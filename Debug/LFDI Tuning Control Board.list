
LFDI Tuning Control Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000114c  08013b90  08013b90  00023b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014cdc  08014cdc  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  08014cdc  08014cdc  00024cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014ce4  08014ce4  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014ce4  08014ce4  00024ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014ce8  08014ce8  00024ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08014cec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302e4  2**0
                  CONTENTS
 10 .bss          00002e68  200002e8  200002e8  000302e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003150  20003150  000302e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd22  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bba  00000000  00000000  00050036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  00054bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017d0  00000000  00000000  000565e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029ac6  00000000  00000000  00057db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022414  00000000  00000000  00081876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0bf3  00000000  00000000  000a3c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018487d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008544  00000000  00000000  001848d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013b78 	.word	0x08013b78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	08013b78 	.word	0x08013b78

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <DAC_InitStruct>:
//Max Voltage peak to peak
float REFERENCE_VOLTAGE = 3;


//
void DAC_InitStruct(struct sDAC* s, SPI_HandleTypeDef* hspi){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	
	s->spi = hspi;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	601a      	str	r2, [r3, #0]
	Set_Config(s);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f831 	bl	80010b0 <Set_Config>
	Set_Max_Peak_To_Peak_Voltage(s, 0);
 800104e:	2100      	movs	r1, #0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f999 	bl	8001388 <Set_Max_Peak_To_Peak_Voltage>
	/* USER CODE BEGIN 1 */
	//Set all DAC Channels Up. Should probably be put into TCB init
	for (int i = 0; i < 6; i++){
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e021      	b.n	80010a0 <DAC_InitStruct+0x68>
		s->DAC_Channels[i].DAC_number = i;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3302      	adds	r3, #2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	460a      	mov	r2, r1
 800106c:	721a      	strb	r2, [r3, #8]
		s->DAC_Channels[i].upper_bound = 0xFFFF;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3302      	adds	r3, #2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	809a      	strh	r2, [r3, #4]
		s->DAC_Channels[i].lower_bound = 0x0000;
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3302      	adds	r3, #2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	80da      	strh	r2, [r3, #6]
		s->DAC_Channels[i].enabled = true;
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3302      	adds	r3, #2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	2201      	movs	r2, #1
 8001098:	729a      	strb	r2, [r3, #10]
	for (int i = 0; i < 6; i++){
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	ddda      	ble.n	800105c <DAC_InitStruct+0x24>
	}

}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <Set_Config>:
//@brief: This function will set a configuration value to the configuration register
//@param s: The DAC struct to use
//@return: None
void Set_Config(struct sDAC* s){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	uint8_t Data[3] = {0x00, 0x00, 0x00};
 80010b8:	4a30      	ldr	r2, [pc, #192]	; (800117c <Set_Config+0xcc>)
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	4611      	mov	r1, r2
 80010c2:	8019      	strh	r1, [r3, #0]
 80010c4:	3302      	adds	r3, #2
 80010c6:	0c12      	lsrs	r2, r2, #16
 80010c8:	701a      	strb	r2, [r3, #0]
	uint8_t read_command[3] = {READ|CONFIG, 0x00, 0x00};
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <Set_Config+0xd0>)
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <Set_Config+0xd4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	743b      	strb	r3, [r7, #16]
 80010d8:	2300      	movs	r3, #0
 80010da:	747b      	strb	r3, [r7, #17]
 80010dc:	2300      	movs	r3, #0
 80010de:	74bb      	strb	r3, [r7, #18]
	
	Hardware_Reset(s);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f923 	bl	800132c <Hardware_Reset>
	//Make sure SCE is 0. This will make it so that the DAC will use the Values direclty written to it
	//rather than trying to use the individual offset and gain of each register to re-adjust
	//the value
	//Gain_A = 1 -> gain is set to 4xVref GAIN_A = 0 -> gain is set to 6xVref
	
	uint8_t tx_data[3] = {WRITE|CONFIG, AB, 0x00};
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <Set_Config+0xd8>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <Set_Config+0xd4>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	733b      	strb	r3, [r7, #12]
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <Set_Config+0xdc>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	737b      	strb	r3, [r7, #13]
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f843 	bl	8001190 <Send_Command>
	Send_Command(s, read_command);
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f83d 	bl	8001190 <Send_Command>
	Recieve_Data(s, Data);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f85b 	bl	80011d8 <Recieve_Data>
	
	//if Data is the same as tx_data then the command was successful
	if(Data[1] == tx_data[1] && Data[2] == tx_data[2]){
 8001122:	7d7a      	ldrb	r2, [r7, #21]
 8001124:	7b7b      	ldrb	r3, [r7, #13]
 8001126:	429a      	cmp	r2, r3
 8001128:	d117      	bne.n	800115a <Set_Config+0xaa>
 800112a:	7dba      	ldrb	r2, [r7, #22]
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	429a      	cmp	r2, r3
 8001130:	d113      	bne.n	800115a <Set_Config+0xaa>
		s->config = (Data[1] << 8) | Data[2];
 8001132:	7d7b      	ldrb	r3, [r7, #21]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	7dbb      	ldrb	r3, [r7, #22]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21b      	sxth	r3, r3
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	809a      	strh	r2, [r3, #4]
		s->Configured = true;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	729a      	strb	r2, [r3, #10]
		s->State = DAC_STATE_OK;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2204      	movs	r2, #4
 8001150:	72da      	strb	r2, [r3, #11]
		s->Ready = true;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	731a      	strb	r2, [r3, #12]
 8001158:	e00c      	b.n	8001174 <Set_Config+0xc4>
	}else{
		s->State = DAC_STATE_INITFAILED;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	72da      	strb	r2, [r3, #11]
		s->Ready = false;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	731a      	strb	r2, [r3, #12]
		s->Errors++;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	89db      	ldrh	r3, [r3, #14]
 800116a:	3301      	adds	r3, #1
 800116c:	b29a      	uxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	81da      	strh	r2, [r3, #14]
	}
			

}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	08013b90 	.word	0x08013b90
 8001180:	20000000 	.word	0x20000000
 8001184:	20000305 	.word	0x20000305
 8001188:	20000304 	.word	0x20000304
 800118c:	20000002 	.word	0x20000002

08001190 <Send_Command>:
//        The second byte is the MSB of the register
//        The third byte is the LSB of the register
//@param: spi: The spi handle to use
//@param: command: The command to send
//@return: none
void Send_Command(struct sDAC* s, uint8_t* Command){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f8aa 	bl	80012f4 <Set_nCS_high>
	hal_status = HAL_SPI_Transmit(s->spi, Command, 3, 1);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	f008 f8ac 	bl	8009306 <HAL_SPI_Transmit>
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
	while (!(s->spi->Instance->SR & SPI_SR_TXE));
 80011b2:	bf00      	nop
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f7      	beq.n	80011b4 <Send_Command+0x24>
	Set_nCS_high(true);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 f895 	bl	80012f4 <Set_nCS_high>
	Delay_us(10);
 80011ca:	200a      	movs	r0, #10
 80011cc:	f001 ff32 	bl	8003034 <Delay_us>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <Recieve_Data>:

//@brief: This function recieves data from the DAC and stores it in the data array
//@param: spi: The spi handle
//@param: Data: buffer to store the data in
//@return: None
void Recieve_Data(struct sDAC* s, uint8_t* Data){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af02      	add	r7, sp, #8
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f886 	bl	80012f4 <Set_nCS_high>
	hal_status = HAL_SPI_TransmitReceive(s->spi,NOP_Send, Data, 3, 100);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2303      	movs	r3, #3
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	490b      	ldr	r1, [pc, #44]	; (8001224 <Recieve_Data+0x4c>)
 80011f6:	f008 f9c2 	bl	800957e <HAL_SPI_TransmitReceive>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
	while ((s->spi->Instance->SR & SPI_SR_RXNE));
 80011fe:	bf00      	nop
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f7      	bne.n	8001200 <Recieve_Data+0x28>
	Set_nCS_high(true);
 8001210:	2001      	movs	r0, #1
 8001212:	f000 f86f 	bl	80012f4 <Set_nCS_high>
	Delay_us(10);
 8001216:	200a      	movs	r0, #10
 8001218:	f001 ff0c 	bl	8003034 <Delay_us>

}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000004 	.word	0x20000004

08001228 <Set_DAC_Value>:
//@brief: This function sets the value of the given dac
//@param: DAC_Num: The DAC number to set the offset of
//@param: val: The value to set the dac to
//@param spi: The spi handle to use
//@return: None
void Set_DAC_Value(struct sDAC* s, uint8_t DAC_Num, uint16_t val){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
 8001234:	4613      	mov	r3, r2
 8001236:	803b      	strh	r3, [r7, #0]
	//Make sure DAC is between 0 and 7
	if(DAC_Num > 7){
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	2b07      	cmp	r3, #7
 800123c:	d819      	bhi.n	8001272 <Set_DAC_Value+0x4a>
		return;
	}
	uint8_t DAC_REG = Set_DAC0+DAC_Num;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <Set_DAC_Value+0x54>)
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	4413      	add	r3, r2
 8001246:	73fb      	strb	r3, [r7, #15]
	//Set the DAC to the correct value by adding the DAC number to the Set_DAC0 command
	uint8_t tx_data[3] = {WRITE|DAC_REG, (val >> 8), (val & 0xFF)};
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <Set_DAC_Value+0x58>)
 800124a:	781a      	ldrb	r2, [r3, #0]
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	4313      	orrs	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	733b      	strb	r3, [r7, #12]
 8001254:	883b      	ldrh	r3, [r7, #0]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	b29b      	uxth	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	737b      	strb	r3, [r7, #13]
 800125e:	883b      	ldrh	r3, [r7, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4619      	mov	r1, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff90 	bl	8001190 <Send_Command>
 8001270:	e000      	b.n	8001274 <Set_DAC_Value+0x4c>
		return;
 8001272:	bf00      	nop
	
}
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000001 	.word	0x20000001
 8001280:	20000304 	.word	0x20000304

08001284 <Set_nLDAC_high>:
}

//@brief: This function sets the nLDAC pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nLDAC_high(bool HIGH){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <Set_nLDAC_high+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <Set_nLDAC_high+0x34>)
 800129c:	f003 fba4 	bl	80049e8 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
	}
}
 80012a0:	e005      	b.n	80012ae <Set_nLDAC_high+0x2a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <Set_nLDAC_high+0x34>)
 80012aa:	f003 fb9d 	bl	80049e8 <HAL_GPIO_WritePin>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020c00 	.word	0x40020c00

080012bc <Set_nRST_high>:
}

//@brief: This function sets the nRST pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nRST_high(bool HIGH){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <Set_nRST_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <Set_nRST_high+0x34>)
 80012d4:	f003 fb88 	bl	80049e8 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
	}

}
 80012d8:	e005      	b.n	80012e6 <Set_nRST_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <Set_nRST_high+0x34>)
 80012e2:	f003 fb81 	bl	80049e8 <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <Set_nCS_high>:
}

//@brief: This function sets the nCS pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nCS_high(bool HIGH){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <Set_nCS_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130a:	4807      	ldr	r0, [pc, #28]	; (8001328 <Set_nCS_high+0x34>)
 800130c:	f003 fb6c 	bl	80049e8 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
	}

}
 8001310:	e005      	b.n	800131e <Set_nCS_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <Set_nCS_high+0x34>)
 800131a:	f003 fb65 	bl	80049e8 <HAL_GPIO_WritePin>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000

0800132c <Hardware_Reset>:
	return state;
}


//Reset the DAC Values using the nRST Pin
void Hardware_Reset(struct sDAC* s){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	Set_nRST_high(false);
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ffc1 	bl	80012bc <Set_nRST_high>
	Delay_us(10);
 800133a:	200a      	movs	r0, #10
 800133c:	f001 fe7a 	bl	8003034 <Delay_us>
	Set_nRST_high(true);
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff ffbb 	bl	80012bc <Set_nRST_high>
	Delay_us(10);
 8001346:	200a      	movs	r0, #10
 8001348:	f001 fe74 	bl	8003034 <Delay_us>
	s->State = DAC_STATE_UNKNOWN;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	72da      	strb	r2, [r3, #11]
	s->Ready= false;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	731a      	strb	r2, [r3, #12]
	s->Errors = 0;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	81da      	strh	r2, [r3, #14]
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <Syncronous_Update>:


//Syncronous Update of LDAC using the nLDAC Pin NOTE: Only Needed if nLDAC is tied High
void Syncronous_Update(void){
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
	Set_nLDAC_high(false);
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff ff8a 	bl	8001284 <Set_nLDAC_high>
	Delay_us(10);
 8001370:	200a      	movs	r0, #10
 8001372:	f001 fe5f 	bl	8003034 <Delay_us>
	Set_nLDAC_high(true);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ff84 	bl	8001284 <Set_nLDAC_high>
	Delay_us(10);
 800137c:	200a      	movs	r0, #10
 800137e:	f001 fe59 	bl	8003034 <Delay_us>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <Set_Max_Peak_To_Peak_Voltage>:


//@brief: This function calculates the max peak to peak voltage that can be achieved
void Set_Max_Peak_To_Peak_Voltage(struct sDAC* s, bool Gain){
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
	//The max Voltage is 11.2V so we need to scale the voltage to fit in 16 bits
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	if(Gain){
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00a      	beq.n	80013b0 <Set_Max_Peak_To_Peak_Voltage+0x28>
		s->max_peak2peak = REFERENCE_VOLTAGE*4;
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80013a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edc3 7a04 	vstr	s15, [r3, #16]
	}else
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
	return;
 80013ae:	e00a      	b.n	80013c6 <Set_Max_Peak_To_Peak_Voltage+0x3e>
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	edc3 7a04 	vstr	s15, [r3, #16]
	return;
 80013c4:	bf00      	nop
}
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20000008 	.word	0x20000008

080013d4 <Set_Voltage_Peak_to_Peak>:

//@brief: This function sets the upper and lower bounds of a DAC Channel
//@param: s: The DAC Channel to set the bounds of
//@param: voltage: The voltage to set the bounds to
void Set_Voltage_Peak_to_Peak(struct sDAC* sDAC, uint8_t Channel_Number, float* voltage){
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	460b      	mov	r3, r1
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	72fb      	strb	r3, [r7, #11]
	//The max Voltage Peak to Peak is 22.4V so we need to scale the voltage to fit in 16 bits
	//Find the upper and lower bounds of the voltage with Zero Bias
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	float percentage = (*voltage/(float)sDAC->max_peak2peak)/2;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edd3 6a00 	vldr	s13, [r3]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80013ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fa:	edc7 7a05 	vstr	s15, [r7, #20]
	sDAC->DAC_Channels[Channel_Number].upper_bound = 0xFFFF/2 + percentage*0xFFFF;
 80013fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001402:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001464 <Set_Voltage_Peak_to_Peak+0x90>
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001468 <Set_Voltage_Peak_to_Peak+0x94>
 800140e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001412:	7afb      	ldrb	r3, [r7, #11]
 8001414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001418:	ee17 2a90 	vmov	r2, s15
 800141c:	b291      	uxth	r1, r2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	3302      	adds	r3, #2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	460a      	mov	r2, r1
 8001428:	809a      	strh	r2, [r3, #4]
	sDAC->DAC_Channels[Channel_Number].lower_bound = 0xFFFF/2 - percentage*0xFFFF;
 800142a:	edd7 7a05 	vldr	s15, [r7, #20]
 800142e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001464 <Set_Voltage_Peak_to_Peak+0x90>
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001468 <Set_Voltage_Peak_to_Peak+0x94>
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	7afb      	ldrb	r3, [r7, #11]
 8001440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001444:	ee17 2a90 	vmov	r2, s15
 8001448:	b291      	uxth	r1, r2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	3302      	adds	r3, #2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	460a      	mov	r2, r1
 8001454:	80da      	strh	r2, [r3, #6]
	return;
 8001456:	bf00      	nop

}
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	477fff00 	.word	0x477fff00
 8001468:	46fffe00 	.word	0x46fffe00

0800146c <PID_InitStruct>:
 */

#include "pid.h"

void PID_InitStruct(struct sPID* s)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->Config.Kp = 0.0f;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
  s->Config.Ki = 0.0f;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
  s->Config.Kd = 0.0f;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
  s->Config.Li = 1.0f;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800149e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014a2:	601a      	str	r2, [r3, #0]
  s->Config.TargetP = -273.0f;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80014aa:	4a22      	ldr	r2, [pc, #136]	; (8001534 <PID_InitStruct+0xc8>)
 80014ac:	601a      	str	r2, [r3, #0]
  s->Config.Enabled = false;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
  s->Config.History = 16;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2210      	movs	r2, #16
 80014ba:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
  s->DeltaT = 0.013f;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <PID_InitStruct+0xcc>)
 80014c6:	601a      	str	r2, [r3, #0]
  s->IntegratorCount = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  for (i=0;i<255;i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e009      	b.n	80014ea <PID_InitStruct+0x7e>
    s->LastP[i]=0.0f;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
  for (i=0;i<255;i++)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	3301      	adds	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	2bff      	cmp	r3, #255	; 0xff
 80014ee:	d1f2      	bne.n	80014d6 <PID_InitStruct+0x6a>
  s->Effort = 0.0f;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
  s->Ep = 0.0f;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
  s->Ei = 0.0f;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
  s->Ed = 0.0f;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
  s->Config.Frequency = 200;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	22c8      	movs	r2, #200	; 0xc8
 8001524:	f8a3 242e 	strh.w	r2, [r3, #1070]	; 0x42e
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	c3888000 	.word	0xc3888000
 8001538:	3c54fdf4 	.word	0x3c54fdf4

0800153c <PID_SavePoint>:

void PID_SavePoint(struct sPID* s, float p)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	ed87 0a00 	vstr	s0, [r7]
  uint8_t i;
  for (i=(s->Config.History-1); i>0; i--)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 800154e:	3b01      	subs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e00d      	b.n	8001570 <PID_SavePoint+0x34>
    s->LastP[i] = s->LastP[i-1];
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	1e5a      	subs	r2, r3, #1
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	440a      	add	r2, r1
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	601a      	str	r2, [r3, #0]
  for (i=(s->Config.History-1); i>0; i--)
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	3b01      	subs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ee      	bne.n	8001554 <PID_SavePoint+0x18>
  s->LastP[0] = p;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	601a      	str	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <PID_SumError>:

float PID_SumError(struct sPID* s)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->IntegratorCount++;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8001596:	3301      	adds	r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  if (s->IntegratorCount < s->Config.History)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d202      	bcs.n	80015b6 <PID_SumError+0x2e>
    return 0;
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e05b      	b.n	800166e <PID_SumError+0xe6>
  else
    s->IntegratorCount = s->Config.History;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 242d 	ldrb.w	r2, [r3, #1069]	; 0x42d
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  float err = 0;
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e015      	b.n	80015fa <PID_SumError+0x72>
    err += (s->Config.TargetP - s->LastP[i]);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80015d4:	ed93 7a00 	vldr	s14, [r3]
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	edc7 7a02 	vstr	s15, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	3301      	adds	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3e3      	bcc.n	80015ce <PID_SumError+0x46>
  err *= (s->Config.Ki);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ed97 7a02 	vldr	s14, [r7, #8]
 8001614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001618:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err < (-s->Config.Li))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	eef1 7a67 	vneg.f32	s15, s15
 800162a:	ed97 7a02 	vldr	s14, [r7, #8]
 800162e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	d508      	bpl.n	800164a <PID_SumError+0xc2>
    err = -(s->Config.Li);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	eef1 7a67 	vneg.f32	s15, s15
 8001646:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err > s->Config.Li)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ed97 7a02 	vldr	s14, [r7, #8]
 8001658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	dd04      	ble.n	800166c <PID_SumError+0xe4>
    err = s->Config.Li;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	60bb      	str	r3, [r7, #8]
  return err;
 800166c:	68bb      	ldr	r3, [r7, #8]
}
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eeb0 0a67 	vmov.f32	s0, s15
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <PID_Velocity>:


float PID_Velocity(struct sPID* s)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint8_t periods = 4;
 8001688:	2304      	movs	r3, #4
 800168a:	73fb      	strb	r3, [r7, #15]
  if (s->IntegratorCount > periods)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	429a      	cmp	r2, r3
 8001696:	d219      	bcs.n	80016cc <PID_Velocity+0x4c>
    return (s->LastP[0]-s->LastP[periods])/(s->DeltaT*periods);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	ed93 7a00 	vldr	s14, [r3]
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b4:	edd3 6a00 	vldr	s13, [r3]
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016ca:	e001      	b.n	80016d0 <PID_Velocity+0x50>
  else
    return 0;
 80016cc:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016e4 <PID_Velocity+0x64>
}
 80016d0:	eef0 7a66 	vmov.f32	s15, s13
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	00000000 	.word	0x00000000

080016e8 <PID_CalculateEffort>:

// calculate the error and return a value between 0 and 1
float PID_CalculateEffort(struct sPID* s, float p)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	ed87 0a00 	vstr	s0, [r7]
  float eff;
  if ((s->Config.Enabled == false) ||
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 342c 	ldrb.w	r3, [r3, #1068]	; 0x42c
 80016fa:	f083 0301 	eor.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d115      	bne.n	8001730 <PID_CalculateEffort+0x48>
      (s->Config.TargetP < -200) ||
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800170a:	edd3 7a00 	vldr	s15, [r3]
  if ((s->Config.Enabled == false) ||
 800170e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001844 <PID_CalculateEffort+0x15c>
 8001712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	d409      	bmi.n	8001730 <PID_CalculateEffort+0x48>
      (s->DeltaT == 0))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001722:	edd3 7a00 	vldr	s15, [r3]
      (s->Config.TargetP < -200) ||
 8001726:	eef5 7a40 	vcmp.f32	s15, #0.0
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	d117      	bne.n	8001760 <PID_CalculateEffort+0x78>
  {
    s->Ep = -1;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001736:	4a44      	ldr	r2, [pc, #272]	; (8001848 <PID_CalculateEffort+0x160>)
 8001738:	601a      	str	r2, [r3, #0]
    s->Ed = -1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001740:	4a41      	ldr	r2, [pc, #260]	; (8001848 <PID_CalculateEffort+0x160>)
 8001742:	601a      	str	r2, [r3, #0]
    s->Ei = -1;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800174a:	4a3f      	ldr	r2, [pc, #252]	; (8001848 <PID_CalculateEffort+0x160>)
 800174c:	601a      	str	r2, [r3, #0]
    s->Effort = 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
    return 0;
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e069      	b.n	8001834 <PID_CalculateEffort+0x14c>
  }
  s->Ep = (s->Config.TargetP - p) * (s->Config.Kp);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8001766:	ed93 7a00 	vldr	s14, [r3]
 800176a:	edd7 7a00 	vldr	s15, [r7]
 800176e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001786:	edc3 7a00 	vstr	s15, [r3]
  s->Ed = (0 - PID_Velocity(s)) * (s->Config.Kd);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff78 	bl	8001680 <PID_Velocity>
 8001790:	eef0 7a40 	vmov.f32	s15, s0
 8001794:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800184c <PID_CalculateEffort+0x164>
 8001798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017b0:	edc3 7a00 	vstr	s15, [r3]
  s->Ei = PID_SumError(s);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fee7 	bl	8001588 <PID_SumError>
 80017ba:	eef0 7a40 	vmov.f32	s15, s0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017c4:	edc3 7a00 	vstr	s15, [r3]
  eff = s->Ep + s->Ed + s->Ei;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80017ce:	ed93 7a00 	vldr	s14, [r3]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (eff > 1)
 80017f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	dd02      	ble.n	800180a <PID_CalculateEffort+0x122>
    eff = 1;
 8001804:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001808:	60fb      	str	r3, [r7, #12]
  if (eff < 0)
 800180a:	edd7 7a03 	vldr	s15, [r7, #12]
 800180e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	d502      	bpl.n	800181e <PID_CalculateEffort+0x136>
    eff = 0;
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  PID_SavePoint(s, p);
 800181e:	ed97 0a00 	vldr	s0, [r7]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fe8a 	bl	800153c <PID_SavePoint>
  s->Effort = eff;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	601a      	str	r2, [r3, #0]
  return eff;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	c3480000 	.word	0xc3480000
 8001848:	bf800000 	.word	0xbf800000
 800184c:	00000000 	.word	0x00000000

08001850 <TMP117_InitStruct>:
//@param s Pointer to the structure to initialize
//@param interface Pointer to the I2C interface to use
//@param addpin Value of the address pin
//@return None
void TMP117_InitStruct(struct sTMP117* s, I2C_HandleTypeDef* interface, uint8_t addpin)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	4613      	mov	r3, r2
 800185c:	71fb      	strb	r3, [r7, #7]
   * 0x01 V+
   * 0x10 SDA
   * 0x11 SCL
   */
  uint8_t i;
  s->Address = 0b1001000 | addpin;
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8001864:	b2da      	uxtb	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	701a      	strb	r2, [r3, #0]
  s->Interface = interface;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	605a      	str	r2, [r3, #4]
  s->Average = -273;
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	a31f      	add	r3, pc, #124	; (adr r3, 80018f0 <TMP117_InitStruct+0xa0>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
  s->Configured = false;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
  s->SamplesInAverage = 16;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2210      	movs	r2, #16
 8001888:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
  s->Index = 0;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  s->State = TMP117_STATE_UNKNOWN;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  for (i=0;i<64;i++)
 800189c:	2300      	movs	r3, #0
 800189e:	75fb      	strb	r3, [r7, #23]
 80018a0:	e00c      	b.n	80018bc <TMP117_InitStruct+0x6c>
    s->Temperature[i] = -273;
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	18d1      	adds	r1, r2, r3
 80018ac:	a310      	add	r3, pc, #64	; (adr r3, 80018f0 <TMP117_InitStruct+0xa0>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	e9c1 2300 	strd	r2, r3, [r1]
  for (i=0;i<64;i++)
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	3301      	adds	r3, #1
 80018ba:	75fb      	strb	r3, [r7, #23]
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	2b3f      	cmp	r3, #63	; 0x3f
 80018c0:	d9ef      	bls.n	80018a2 <TMP117_InitStruct+0x52>
  s->LastTemperature = -273;
 80018c2:	68f9      	ldr	r1, [r7, #12]
 80018c4:	a30a      	add	r3, pc, #40	; (adr r3, 80018f0 <TMP117_InitStruct+0xa0>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Ready = false;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  s->Errors = 0;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
}
 80018de:	bf00      	nop
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	f3af 8000 	nop.w
 80018f0:	00000000 	.word	0x00000000
 80018f4:	c0711000 	.word	0xc0711000

080018f8 <TMP117_Configure>:

//@brief Configure the TMP117
//@param s Pointer to the structure to configure
//@return None
void TMP117_Configure(struct sTMP117* s)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef res;
  printf("Attempting to init... ");
 8001900:	481c      	ldr	r0, [pc, #112]	; (8001974 <TMP117_Configure+0x7c>)
 8001902:	f00d fe59 	bl	800f5b8 <iprintf>
  uint8_t buffer[3] = {0};
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <TMP117_Configure+0x80>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	81bb      	strh	r3, [r7, #12]
 800190c:	2300      	movs	r3, #0
 800190e:	73bb      	strb	r3, [r7, #14]
  buffer[0] = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	733b      	strb	r3, [r7, #12]
  buffer[2] = 1 << 5;
 8001914:	2320      	movs	r3, #32
 8001916:	73bb      	strb	r3, [r7, #14]
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 3, 10); // 8 samples averaged
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6858      	ldr	r0, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	b299      	uxth	r1, r3
 8001926:	f107 020c 	add.w	r2, r7, #12
 800192a:	230a      	movs	r3, #10
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2303      	movs	r3, #3
 8001930:	f003 f9b8 	bl	8004ca4 <HAL_I2C_Master_Transmit>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
  if (res == HAL_OK)
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d107      	bne.n	800194e <TMP117_Configure+0x56>
  {
    s->Configured = true;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    printf("OK!\n");
 8001946:	480d      	ldr	r0, [pc, #52]	; (800197c <TMP117_Configure+0x84>)
 8001948:	f00d febc 	bl	800f6c4 <puts>
  {
    s->Errors++;
    s->State = TMP117_STATE_INITFAILED;
    printf("Failed!\n");
  }
}
 800194c:	e00e      	b.n	800196c <TMP117_Configure+0x74>
    s->Errors++;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001954:	3301      	adds	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    s->State = TMP117_STATE_INITFAILED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    printf("Failed!\n");
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <TMP117_Configure+0x88>)
 8001968:	f00d feac 	bl	800f6c4 <puts>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	08013bb8 	.word	0x08013bb8
 8001978:	08013bdc 	.word	0x08013bdc
 800197c:	08013bd0 	.word	0x08013bd0
 8001980:	08013bd4 	.word	0x08013bd4

08001984 <TMP117_GetTemperature>:

//@brief Get the temperature from the TMP117
//@param s Pointer to the structure to get the temperature from
//@return None
void TMP117_GetTemperature(struct sTMP117* s)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af02      	add	r7, sp, #8
 800198a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t u;
  double t = 0;
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9c7 2306 	strd	r2, r3, [r7, #24]
  //setup an empty Buffer to request the temperature
  uint8_t buffer[2] = {0};
 8001998:	2300      	movs	r3, #0
 800199a:	81bb      	strh	r3, [r7, #12]
  uint16_t data = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef res;
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 1, 10); // request temperature
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6858      	ldr	r0, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	b299      	uxth	r1, r3
 80019ae:	f107 020c 	add.w	r2, r7, #12
 80019b2:	230a      	movs	r3, #10
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	f003 f974 	bl	8004ca4 <HAL_I2C_Master_Transmit>
 80019bc:	4603      	mov	r3, r0
 80019be:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01a      	beq.n	80019fc <TMP117_GetTemperature+0x78>
  {
    s->State = TMP117_STATE_REQUESTNOACK;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019d4:	3301      	adds	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    //If this temperature sensor gets more than 100 errors in a row, it's probably not connected
    if (s->Errors > 100)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019e4:	2b64      	cmp	r3, #100	; 0x64
 80019e6:	f240 80b3 	bls.w	8001b50 <TMP117_GetTemperature+0x1cc>
    {
      s->Configured = false;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 80019fa:	e0a9      	b.n	8001b50 <TMP117_GetTemperature+0x1cc>
  }

  res = HAL_I2C_Master_Receive(s->Interface, (s->Address << 1), buffer, 2, 10); // receive temperature
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6858      	ldr	r0, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	b299      	uxth	r1, r3
 8001a0a:	f107 020c 	add.w	r2, r7, #12
 8001a0e:	230a      	movs	r3, #10
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2302      	movs	r3, #2
 8001a14:	f003 fa44 	bl	8004ea0 <HAL_I2C_Master_Receive>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 8001a1c:	7cfb      	ldrb	r3, [r7, #19]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01a      	beq.n	8001a58 <TMP117_GetTemperature+0xd4>
  {
    s->State = TMP117_STATE_RECEIVEFAIL;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a30:	3301      	adds	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    if (s->Errors > 100)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a40:	2b64      	cmp	r3, #100	; 0x64
 8001a42:	f240 8087 	bls.w	8001b54 <TMP117_GetTemperature+0x1d0>
    {
      s->Configured = false;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 8001a56:	e07d      	b.n	8001b54 <TMP117_GetTemperature+0x1d0>
  }

  
  s->State = TMP117_STATE_VALIDTEMP;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  data = (buffer[0] << 8) | buffer[1];
 8001a60:	7b3b      	ldrb	r3, [r7, #12]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	7b7b      	ldrb	r3, [r7, #13]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	817b      	strh	r3, [r7, #10]
  u = *(&(data));
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	823b      	strh	r3, [r7, #16]
  //Conver the Temp as per documentation
  s->Temperature[s->Index] = ((double)u) * 0.0078125;
 8001a76:	8a3b      	ldrh	r3, [r7, #16]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd63 	bl	8000544 <__aeabi_ui2d>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001a84:	461c      	mov	r4, r3
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a8e:	f7fe fdd3 	bl	8000638 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	1c61      	adds	r1, r4, #1
 8001a9a:	00c9      	lsls	r1, r1, #3
 8001a9c:	4401      	add	r1, r0
 8001a9e:	e9c1 2300 	strd	r2, r3, [r1]
  s->LastTemperature = s->Temperature[s->Index];
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4413      	add	r3, r2
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Index++;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  //If we finally have enough Temperatures to average, set the Ready flag
  //if we have engough samples, set the flags
  if (s->Index >= s->SamplesInAverage)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 2211 	ldrb.w	r2, [r3, #529]	; 0x211
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d307      	bcc.n	8001aea <TMP117_GetTemperature+0x166>
  {
    s->Ready = true;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
    s->Index = 0;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  }
  
  //average the Temperatures
  if (s->Ready)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d030      	beq.n	8001b56 <TMP117_GetTemperature+0x1d2>
  {
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e011      	b.n	8001b1e <TMP117_GetTemperature+0x19a>
    {
      t += s->Temperature[i];
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b0c:	f7fe fbde 	bl	80002cc <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b24:	461a      	mov	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	dbe6      	blt.n	8001afa <TMP117_GetTemperature+0x176>
    }
    s->Average = t / s->SamplesInAverage;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd16 	bl	8000564 <__aeabi_i2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b40:	f7fe fea4 	bl	800088c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
 8001b4e:	e002      	b.n	8001b56 <TMP117_GetTemperature+0x1d2>
    return;
 8001b50:	bf00      	nop
 8001b52:	e000      	b.n	8001b56 <TMP117_GetTemperature+0x1d2>
    return;
 8001b54:	bf00      	nop
  }


}
 8001b56:	3724      	adds	r7, #36	; 0x24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}

08001b5c <TCB_InitStruct>:
#include "DAC.h"



//This Will Setup the TCB structer by initiallizing the DAC and the TMP117 and the Controller
void TCB_InitStruct(struct sTuningControlBoard* s, I2C_HandleTypeDef* hi2c, SPI_HandleTypeDef* hspi){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]

    //For each of the Seven Temperature sensors initialize the struct
    for(int i = 0; i < 4; i++){
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e011      	b.n	8001b92 <TCB_InitStruct+0x36>
        TMP117_InitStruct(&s->Sensor[i], hi2c, i);
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f44f 720a 	mov.w	r2, #552	; 0x228
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fe62 	bl	8001850 <TMP117_InitStruct>
    for(int i = 0; i < 4; i++){
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	ddea      	ble.n	8001b6e <TCB_InitStruct+0x12>
    }   
    Controller_InitStruct(&s->Controller,&s->Sensor[0], 0);
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f001 f93e 	bl	8002e24 <Controller_InitStruct>
    DAC_InitStruct(&s->DAC8718, hspi);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fa41 	bl	8001038 <DAC_InitStruct>

}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc4:	f3bf 8f4f 	dsb	sy
}
 8001bc8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <__NVIC_SystemReset+0x24>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bd2:	4904      	ldr	r1, [pc, #16]	; (8001be4 <__NVIC_SystemReset+0x24>)
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_SystemReset+0x28>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bda:	f3bf 8f4f 	dsb	sy
}
 8001bde:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <__NVIC_SystemReset+0x20>
 8001be4:	e000ed00 	.word	0xe000ed00
 8001be8:	05fa0004 	.word	0x05fa0004

08001bec <ProcessUserInput>:

//Get the User Input and process it
//@param Controller: pointer to the controller struct
//@param buffer: pointer to the buffer
void ProcessUserInput(struct sController* Controller, uint8_t* buffer)
{
 8001bec:	b5b0      	push	{r4, r5, r7, lr}
 8001bee:	b0ca      	sub	sp, #296	; 0x128
 8001bf0:	af04      	add	r7, sp, #16
 8001bf2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001bf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bfa:	6018      	str	r0, [r3, #0]
 8001bfc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c04:	6019      	str	r1, [r3, #0]
  uint16_t i = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  uint8_t u = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
  char output[250];
  char c;
  float f = 0;
 8001c12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
  for (i=0; buffer[i]; i++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001c26:	e02c      	b.n	8001c82 <ProcessUserInput+0x96>
    buffer[i] = tolower(buffer[i]);
 8001c28:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c2c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001c30:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8001c3e:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <ProcessUserInput+0x70>)
 8001c46:	4413      	add	r3, r2
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d106      	bne.n	8001c60 <ProcessUserInput+0x74>
 8001c52:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001c56:	3320      	adds	r3, #32
 8001c58:	e004      	b.n	8001c64 <ProcessUserInput+0x78>
 8001c5a:	bf00      	nop
 8001c5c:	08014820 	.word	0x08014820
 8001c60:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001c64:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8001c68:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001c6c:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001c70:	6809      	ldr	r1, [r1, #0]
 8001c72:	440a      	add	r2, r1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	7013      	strb	r3, [r2, #0]
  for (i=0; buffer[i]; i++)
 8001c78:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001c82:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c86:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001c8a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	4413      	add	r3, r2
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1c7      	bne.n	8001c28 <ProcessUserInput+0x3c>
//  printf("String: %s\n", buffer);

  replacestr(buffer, "=", "");
 8001c98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ca0:	4abe      	ldr	r2, [pc, #760]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001ca2:	49bf      	ldr	r1, [pc, #764]	; (8001fa0 <ProcessUserInput+0x3b4>)
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f001 f9eb 	bl	8003080 <replacestr>
  replacestr(buffer, " ", "");
 8001caa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cb2:	4aba      	ldr	r2, [pc, #744]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001cb4:	49bb      	ldr	r1, [pc, #748]	; (8001fa4 <ProcessUserInput+0x3b8>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f001 f9e2 	bl	8003080 <replacestr>
  replacestr(buffer, " ", "");
 8001cbc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cc4:	4ab5      	ldr	r2, [pc, #724]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001cc6:	49b7      	ldr	r1, [pc, #732]	; (8001fa4 <ProcessUserInput+0x3b8>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	f001 f9d9 	bl	8003080 <replacestr>
  replacestr(buffer, " ", "");
 8001cce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cd6:	4ab1      	ldr	r2, [pc, #708]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001cd8:	49b2      	ldr	r1, [pc, #712]	; (8001fa4 <ProcessUserInput+0x3b8>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	f001 f9d0 	bl	8003080 <replacestr>
  replacestr(buffer, " ", "");
 8001ce0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ce4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ce8:	4aac      	ldr	r2, [pc, #688]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001cea:	49ae      	ldr	r1, [pc, #696]	; (8001fa4 <ProcessUserInput+0x3b8>)
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	f001 f9c7 	bl	8003080 <replacestr>
  replacestr(buffer, " ", "");
 8001cf2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cf6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cfa:	4aa8      	ldr	r2, [pc, #672]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001cfc:	49a9      	ldr	r1, [pc, #676]	; (8001fa4 <ProcessUserInput+0x3b8>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	f001 f9be 	bl	8003080 <replacestr>
  replacestr(buffer, "channel", "c");
 8001d04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d0c:	4aa6      	ldr	r2, [pc, #664]	; (8001fa8 <ProcessUserInput+0x3bc>)
 8001d0e:	49a7      	ldr	r1, [pc, #668]	; (8001fac <ProcessUserInput+0x3c0>)
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	f001 f9b5 	bl	8003080 <replacestr>
//  replacestr(buffer, "controller", "c");
  replacestr(buffer, "chan", "c");
 8001d16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d1a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d1e:	4aa2      	ldr	r2, [pc, #648]	; (8001fa8 <ProcessUserInput+0x3bc>)
 8001d20:	49a3      	ldr	r1, [pc, #652]	; (8001fb0 <ProcessUserInput+0x3c4>)
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	f001 f9ac 	bl	8003080 <replacestr>
//  replacestr(buffer, "con", "c");
  replacestr(buffer, "address", "a");
 8001d28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d30:	4aa0      	ldr	r2, [pc, #640]	; (8001fb4 <ProcessUserInput+0x3c8>)
 8001d32:	49a1      	ldr	r1, [pc, #644]	; (8001fb8 <ProcessUserInput+0x3cc>)
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	f001 f9a3 	bl	8003080 <replacestr>
  replacestr(buffer, "kp", "p");
 8001d3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d42:	4a9e      	ldr	r2, [pc, #632]	; (8001fbc <ProcessUserInput+0x3d0>)
 8001d44:	499e      	ldr	r1, [pc, #632]	; (8001fc0 <ProcessUserInput+0x3d4>)
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	f001 f99a 	bl	8003080 <replacestr>
  replacestr(buffer, "kd", "d");
 8001d4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d54:	4a9b      	ldr	r2, [pc, #620]	; (8001fc4 <ProcessUserInput+0x3d8>)
 8001d56:	499c      	ldr	r1, [pc, #624]	; (8001fc8 <ProcessUserInput+0x3dc>)
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	f001 f991 	bl	8003080 <replacestr>
  replacestr(buffer, "ki", "i");
 8001d5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d62:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d66:	4a99      	ldr	r2, [pc, #612]	; (8001fcc <ProcessUserInput+0x3e0>)
 8001d68:	4999      	ldr	r1, [pc, #612]	; (8001fd0 <ProcessUserInput+0x3e4>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	f001 f988 	bl	8003080 <replacestr>
  replacestr(buffer, "li", "l");
 8001d70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d78:	4a96      	ldr	r2, [pc, #600]	; (8001fd4 <ProcessUserInput+0x3e8>)
 8001d7a:	4997      	ldr	r1, [pc, #604]	; (8001fd8 <ProcessUserInput+0x3ec>)
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	f001 f97f 	bl	8003080 <replacestr>
  replacestr(buffer, "target", "t");
 8001d82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d86:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d8a:	4a94      	ldr	r2, [pc, #592]	; (8001fdc <ProcessUserInput+0x3f0>)
 8001d8c:	4994      	ldr	r1, [pc, #592]	; (8001fe0 <ProcessUserInput+0x3f4>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	f001 f976 	bl	8003080 <replacestr>
  replacestr(buffer, "temperature", "t");
 8001d94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d9c:	4a8f      	ldr	r2, [pc, #572]	; (8001fdc <ProcessUserInput+0x3f0>)
 8001d9e:	4991      	ldr	r1, [pc, #580]	; (8001fe4 <ProcessUserInput+0x3f8>)
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	f001 f96d 	bl	8003080 <replacestr>
  replacestr(buffer, "temp", "t");
 8001da6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001daa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dae:	4a8b      	ldr	r2, [pc, #556]	; (8001fdc <ProcessUserInput+0x3f0>)
 8001db0:	498d      	ldr	r1, [pc, #564]	; (8001fe8 <ProcessUserInput+0x3fc>)
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	f001 f964 	bl	8003080 <replacestr>
  replacestr(buffer, "frequency", "f");
 8001db8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dbc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dc0:	4a8a      	ldr	r2, [pc, #552]	; (8001fec <ProcessUserInput+0x400>)
 8001dc2:	498b      	ldr	r1, [pc, #556]	; (8001ff0 <ProcessUserInput+0x404>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	f001 f95b 	bl	8003080 <replacestr>
  replacestr(buffer, "freq", "f");
 8001dca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dd2:	4a86      	ldr	r2, [pc, #536]	; (8001fec <ProcessUserInput+0x400>)
 8001dd4:	4987      	ldr	r1, [pc, #540]	; (8001ff4 <ProcessUserInput+0x408>)
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	f001 f952 	bl	8003080 <replacestr>
  replacestr(buffer, "enable", "n");
 8001ddc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001de0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001de4:	4a84      	ldr	r2, [pc, #528]	; (8001ff8 <ProcessUserInput+0x40c>)
 8001de6:	4985      	ldr	r1, [pc, #532]	; (8001ffc <ProcessUserInput+0x410>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	f001 f949 	bl	8003080 <replacestr>
  replacestr(buffer, "disable", "f");
 8001dee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001df2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001df6:	4a7d      	ldr	r2, [pc, #500]	; (8001fec <ProcessUserInput+0x400>)
 8001df8:	4981      	ldr	r1, [pc, #516]	; (8002000 <ProcessUserInput+0x414>)
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	f001 f940 	bl	8003080 <replacestr>
  replacestr(buffer, "save", "s");
 8001e00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e08:	4a7e      	ldr	r2, [pc, #504]	; (8002004 <ProcessUserInput+0x418>)
 8001e0a:	497f      	ldr	r1, [pc, #508]	; (8002008 <ProcessUserInput+0x41c>)
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	f001 f937 	bl	8003080 <replacestr>
  replacestr(buffer, "load", "l");
 8001e12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e1a:	4a6e      	ldr	r2, [pc, #440]	; (8001fd4 <ProcessUserInput+0x3e8>)
 8001e1c:	497b      	ldr	r1, [pc, #492]	; (800200c <ProcessUserInput+0x420>)
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	f001 f92e 	bl	8003080 <replacestr>
  replacestr(buffer, "history", "h");
 8001e24:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e2c:	4a78      	ldr	r2, [pc, #480]	; (8002010 <ProcessUserInput+0x424>)
 8001e2e:	4979      	ldr	r1, [pc, #484]	; (8002014 <ProcessUserInput+0x428>)
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	f001 f925 	bl	8003080 <replacestr>
  replacestr(buffer, "update", "u");
 8001e36:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e3e:	4a76      	ldr	r2, [pc, #472]	; (8002018 <ProcessUserInput+0x42c>)
 8001e40:	4976      	ldr	r1, [pc, #472]	; (800201c <ProcessUserInput+0x430>)
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	f001 f91c 	bl	8003080 <replacestr>
  replacestr(buffer, "raw", "r");
 8001e48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e50:	4a73      	ldr	r2, [pc, #460]	; (8002020 <ProcessUserInput+0x434>)
 8001e52:	4974      	ldr	r1, [pc, #464]	; (8002024 <ProcessUserInput+0x438>)
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	f001 f913 	bl	8003080 <replacestr>
  replacestr(buffer, "bounce", "b");
 8001e5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e62:	4a71      	ldr	r2, [pc, #452]	; (8002028 <ProcessUserInput+0x43c>)
 8001e64:	4971      	ldr	r1, [pc, #452]	; (800202c <ProcessUserInput+0x440>)
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	f001 f90a 	bl	8003080 <replacestr>
  replacestr(buffer, "wipe", "w");
 8001e6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e74:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <ProcessUserInput+0x444>)
 8001e76:	496f      	ldr	r1, [pc, #444]	; (8002034 <ProcessUserInput+0x448>)
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	f001 f901 	bl	8003080 <replacestr>

//  printf("New String: %s\n", buffer);

  if ((strcmp((char*) buffer, "?") == 0) || (strcmp((char*) buffer, "help") == 0))
 8001e7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e86:	496c      	ldr	r1, [pc, #432]	; (8002038 <ProcessUserInput+0x44c>)
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	f7fe f9b1 	bl	80001f0 <strcmp>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <ProcessUserInput+0x2be>
 8001e94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e9c:	4967      	ldr	r1, [pc, #412]	; (800203c <ProcessUserInput+0x450>)
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	f7fe f9a6 	bl	80001f0 <strcmp>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d157      	bne.n	8001f5a <ProcessUserInput+0x36e>
  {
    USBSendString("\nLFDI TCB Firmware v1.0\n");
 8001eaa:	4865      	ldr	r0, [pc, #404]	; (8002040 <ProcessUserInput+0x454>)
 8001eac:	f001 f884 	bl	8002fb8 <USBSendString>
    USBSendString("Commands can be upper or lower case. Variables can be set with an equals sign or space or nothing.\n");
 8001eb0:	4864      	ldr	r0, [pc, #400]	; (8002044 <ProcessUserInput+0x458>)
 8001eb2:	f001 f881 	bl	8002fb8 <USBSendString>
    USBSendString("\"channel=1\", \"channel 1\", \"channel1\", \"c1\" are all treated the same.\n");
 8001eb6:	4864      	ldr	r0, [pc, #400]	; (8002048 <ProcessUserInput+0x45c>)
 8001eb8:	f001 f87e 	bl	8002fb8 <USBSendString>
    USBSendString("\n");
 8001ebc:	4863      	ldr	r0, [pc, #396]	; (800204c <ProcessUserInput+0x460>)
 8001ebe:	f001 f87b 	bl	8002fb8 <USBSendString>
//    USBSendString("Controller = n  -- chooses which controller to configure\n");
    USBSendString("Channel = n     -- chooses which channel to configure\n");
 8001ec2:	4863      	ldr	r0, [pc, #396]	; (8002050 <ProcessUserInput+0x464>)
 8001ec4:	f001 f878 	bl	8002fb8 <USBSendString>
    USBSendString("Address = nn    -- sets the address of the temperature sensor (00, 01, 10, or 11)\n");
 8001ec8:	4862      	ldr	r0, [pc, #392]	; (8002054 <ProcessUserInput+0x468>)
 8001eca:	f001 f875 	bl	8002fb8 <USBSendString>
    USBSendString("kP = n.nn       -- sets the proportional gain\n");
 8001ece:	4862      	ldr	r0, [pc, #392]	; (8002058 <ProcessUserInput+0x46c>)
 8001ed0:	f001 f872 	bl	8002fb8 <USBSendString>
    USBSendString("kD = n.nn       -- sets the derivative gain\n");
 8001ed4:	4861      	ldr	r0, [pc, #388]	; (800205c <ProcessUserInput+0x470>)
 8001ed6:	f001 f86f 	bl	8002fb8 <USBSendString>
    USBSendString("kI = n.nn       -- sets the integral gain\n");
 8001eda:	4861      	ldr	r0, [pc, #388]	; (8002060 <ProcessUserInput+0x474>)
 8001edc:	f001 f86c 	bl	8002fb8 <USBSendString>
    USBSendString("Li = n.nn       -- sets the integral gain limit\n");
 8001ee0:	4860      	ldr	r0, [pc, #384]	; (8002064 <ProcessUserInput+0x478>)
 8001ee2:	f001 f869 	bl	8002fb8 <USBSendString>
    USBSendString("History = nn    -- sets the number of points used in the integral (1-255)\n");
 8001ee6:	4860      	ldr	r0, [pc, #384]	; (8002068 <ProcessUserInput+0x47c>)
 8001ee8:	f001 f866 	bl	8002fb8 <USBSendString>
    USBSendString("Target = n      -- sets the target temperature\n");
 8001eec:	485f      	ldr	r0, [pc, #380]	; (800206c <ProcessUserInput+0x480>)
 8001eee:	f001 f863 	bl	8002fb8 <USBSendString>
    USBSendString("Temperature = n -- sets the target temperature\n");
 8001ef2:	485f      	ldr	r0, [pc, #380]	; (8002070 <ProcessUserInput+0x484>)
 8001ef4:	f001 f860 	bl	8002fb8 <USBSendString>
    USBSendString("Freq = n        -- sets the PWM frequency (40 = 1 second)\n");
 8001ef8:	485e      	ldr	r0, [pc, #376]	; (8002074 <ProcessUserInput+0x488>)
 8001efa:	f001 f85d 	bl	8002fb8 <USBSendString>
    USBSendString("Enable          -- starts the temperature control loop\n");
 8001efe:	485e      	ldr	r0, [pc, #376]	; (8002078 <ProcessUserInput+0x48c>)
 8001f00:	f001 f85a 	bl	8002fb8 <USBSendString>
    USBSendString("Disable         -- stops the temperature control loop\n");
 8001f04:	485d      	ldr	r0, [pc, #372]	; (800207c <ProcessUserInput+0x490>)
 8001f06:	f001 f857 	bl	8002fb8 <USBSendString>
    USBSendString("Update          -- shows the status of all of the controllers\n");
 8001f0a:	485d      	ldr	r0, [pc, #372]	; (8002080 <ProcessUserInput+0x494>)
 8001f0c:	f001 f854 	bl	8002fb8 <USBSendString>
    USBSendString("Raw             -- shows an easily parsable version of Update\n");
 8001f10:	485c      	ldr	r0, [pc, #368]	; (8002084 <ProcessUserInput+0x498>)
 8001f12:	f001 f851 	bl	8002fb8 <USBSendString>
    USBSendString("Wipe            -- wipes the existing configuration and load new defaults\n");
 8001f16:	485c      	ldr	r0, [pc, #368]	; (8002088 <ProcessUserInput+0x49c>)
 8001f18:	f001 f84e 	bl	8002fb8 <USBSendString>
    USBSendString("Bounce          -- performs a power-cycle / reboot on the system\n");
 8001f1c:	485b      	ldr	r0, [pc, #364]	; (800208c <ProcessUserInput+0x4a0>)
 8001f1e:	f001 f84b 	bl	8002fb8 <USBSendString>
    USBSendString("Load            -- reloads the previously saved values (automatic at power-on)\n");
 8001f22:	485b      	ldr	r0, [pc, #364]	; (8002090 <ProcessUserInput+0x4a4>)
 8001f24:	f001 f848 	bl	8002fb8 <USBSendString>
    USBSendString("Save            -- saves the currently configured values\n");
 8001f28:	485a      	ldr	r0, [pc, #360]	; (8002094 <ProcessUserInput+0x4a8>)
 8001f2a:	f001 f845 	bl	8002fb8 <USBSendString>
    USBSendString("\n");
 8001f2e:	4847      	ldr	r0, [pc, #284]	; (800204c <ProcessUserInput+0x460>)
 8001f30:	f001 f842 	bl	8002fb8 <USBSendString>
    if (UI_Controller == 9)
 8001f34:	4b58      	ldr	r3, [pc, #352]	; (8002098 <ProcessUserInput+0x4ac>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d104      	bne.n	8001f46 <ProcessUserInput+0x35a>
      USBSendString("No controller selected.\n");
 8001f3c:	4857      	ldr	r0, [pc, #348]	; (800209c <ProcessUserInput+0x4b0>)
 8001f3e:	f001 f83b 	bl	8002fb8 <USBSendString>
      ShowEffort(&TCB.Controller);
      USBSendString("\n");
      */
      ShowAll(Controller, true);
    }
    return;
 8001f42:	f000 bc26 	b.w	8002792 <ProcessUserInput+0xba6>
      ShowAll(Controller, true);
 8001f46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f4e:	2101      	movs	r1, #1
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	f000 fcef 	bl	8002934 <ShowAll>
    return;
 8001f56:	f000 bc1c 	b.w	8002792 <ProcessUserInput+0xba6>
  }

  //Print the Status all the Controllers
  if ((strcmp((char*) buffer, "u") == 0) || (strcmp((char*) buffer, "/") == 0))
 8001f5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f62:	492d      	ldr	r1, [pc, #180]	; (8002018 <ProcessUserInput+0x42c>)
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	f7fe f943 	bl	80001f0 <strcmp>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00b      	beq.n	8001f88 <ProcessUserInput+0x39c>
 8001f70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f78:	4949      	ldr	r1, [pc, #292]	; (80020a0 <ProcessUserInput+0x4b4>)
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	f7fe f938 	bl	80001f0 <strcmp>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 808e 	bne.w	80020a4 <ProcessUserInput+0x4b8>
  {
    ShowAll(Controller, true);
 8001f88:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f90:	2101      	movs	r1, #1
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	f000 fcce 	bl	8002934 <ShowAll>
    return;
 8001f98:	e3fb      	b.n	8002792 <ProcessUserInput+0xba6>
 8001f9a:	bf00      	nop
 8001f9c:	08013be0 	.word	0x08013be0
 8001fa0:	08013be4 	.word	0x08013be4
 8001fa4:	08013be8 	.word	0x08013be8
 8001fa8:	08013bec 	.word	0x08013bec
 8001fac:	08013bf0 	.word	0x08013bf0
 8001fb0:	08013bf8 	.word	0x08013bf8
 8001fb4:	08013c00 	.word	0x08013c00
 8001fb8:	08013c04 	.word	0x08013c04
 8001fbc:	08013c0c 	.word	0x08013c0c
 8001fc0:	08013c10 	.word	0x08013c10
 8001fc4:	08013c14 	.word	0x08013c14
 8001fc8:	08013c18 	.word	0x08013c18
 8001fcc:	08013c1c 	.word	0x08013c1c
 8001fd0:	08013c20 	.word	0x08013c20
 8001fd4:	08013c24 	.word	0x08013c24
 8001fd8:	08013c28 	.word	0x08013c28
 8001fdc:	08013c2c 	.word	0x08013c2c
 8001fe0:	08013c30 	.word	0x08013c30
 8001fe4:	08013c38 	.word	0x08013c38
 8001fe8:	08013c44 	.word	0x08013c44
 8001fec:	08013c4c 	.word	0x08013c4c
 8001ff0:	08013c50 	.word	0x08013c50
 8001ff4:	08013c5c 	.word	0x08013c5c
 8001ff8:	08013c64 	.word	0x08013c64
 8001ffc:	08013c68 	.word	0x08013c68
 8002000:	08013c70 	.word	0x08013c70
 8002004:	08013c78 	.word	0x08013c78
 8002008:	08013c7c 	.word	0x08013c7c
 800200c:	08013c84 	.word	0x08013c84
 8002010:	08013c8c 	.word	0x08013c8c
 8002014:	08013c90 	.word	0x08013c90
 8002018:	08013c98 	.word	0x08013c98
 800201c:	08013c9c 	.word	0x08013c9c
 8002020:	08013ca4 	.word	0x08013ca4
 8002024:	08013ca8 	.word	0x08013ca8
 8002028:	08013cac 	.word	0x08013cac
 800202c:	08013cb0 	.word	0x08013cb0
 8002030:	08013cb8 	.word	0x08013cb8
 8002034:	08013cbc 	.word	0x08013cbc
 8002038:	08013cc4 	.word	0x08013cc4
 800203c:	08013cc8 	.word	0x08013cc8
 8002040:	08013cd0 	.word	0x08013cd0
 8002044:	08013cec 	.word	0x08013cec
 8002048:	08013d50 	.word	0x08013d50
 800204c:	08013d98 	.word	0x08013d98
 8002050:	08013d9c 	.word	0x08013d9c
 8002054:	08013dd4 	.word	0x08013dd4
 8002058:	08013e28 	.word	0x08013e28
 800205c:	08013e58 	.word	0x08013e58
 8002060:	08013e88 	.word	0x08013e88
 8002064:	08013eb4 	.word	0x08013eb4
 8002068:	08013ee8 	.word	0x08013ee8
 800206c:	08013f34 	.word	0x08013f34
 8002070:	08013f64 	.word	0x08013f64
 8002074:	08013f94 	.word	0x08013f94
 8002078:	08013fd0 	.word	0x08013fd0
 800207c:	08014008 	.word	0x08014008
 8002080:	08014040 	.word	0x08014040
 8002084:	08014080 	.word	0x08014080
 8002088:	080140c0 	.word	0x080140c0
 800208c:	0801410c 	.word	0x0801410c
 8002090:	08014150 	.word	0x08014150
 8002094:	080141a0 	.word	0x080141a0
 8002098:	2000000c 	.word	0x2000000c
 800209c:	080141dc 	.word	0x080141dc
 80020a0:	080141f8 	.word	0x080141f8
  }
  //Print the Status all the Controllers in non readable format
  if (strcmp((char*) buffer, "r") == 0)
 80020a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020ac:	49c5      	ldr	r1, [pc, #788]	; (80023c4 <ProcessUserInput+0x7d8>)
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	f7fe f89e 	bl	80001f0 <strcmp>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d108      	bne.n	80020cc <ProcessUserInput+0x4e0>
  {
    ShowAll(Controller, false);
 80020ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020c2:	2100      	movs	r1, #0
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	f000 fc35 	bl	8002934 <ShowAll>
    return;
 80020ca:	e362      	b.n	8002792 <ProcessUserInput+0xba6>
  }
  //Save the Configuration of a controller
  if (strcmp((char*) buffer, "s") == 0)
 80020cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020d4:	49bc      	ldr	r1, [pc, #752]	; (80023c8 <ProcessUserInput+0x7dc>)
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	f7fe f88a 	bl	80001f0 <strcmp>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d103      	bne.n	80020ea <ProcessUserInput+0x4fe>
  {

    USBSendString("Cannot Save, No EEPROM.\n");
 80020e2:	48ba      	ldr	r0, [pc, #744]	; (80023cc <ProcessUserInput+0x7e0>)
 80020e4:	f000 ff68 	bl	8002fb8 <USBSendString>
    return;
 80020e8:	e353      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if (strcmp((char*) buffer, "l") == 0)
 80020ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020ee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020f2:	49b7      	ldr	r1, [pc, #732]	; (80023d0 <ProcessUserInput+0x7e4>)
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	f7fe f87b 	bl	80001f0 <strcmp>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d103      	bne.n	8002108 <ProcessUserInput+0x51c>
  {
    USBSendString("Cannot load Configuration, No EEPROM.\n");
 8002100:	48b4      	ldr	r0, [pc, #720]	; (80023d4 <ProcessUserInput+0x7e8>)
 8002102:	f000 ff59 	bl	8002fb8 <USBSendString>
    return;
 8002106:	e344      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if (strcmp((char*) buffer, "b") == 0)
 8002108:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800210c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002110:	49b1      	ldr	r1, [pc, #708]	; (80023d8 <ProcessUserInput+0x7ec>)
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	f7fe f86c 	bl	80001f0 <strcmp>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <ProcessUserInput+0x536>
  {
    NVIC_SystemReset();
 800211e:	f7ff fd4f 	bl	8001bc0 <__NVIC_SystemReset>
  }

  if (strcmp((char*) buffer, "w") == 0)
 8002122:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002126:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800212a:	49ac      	ldr	r1, [pc, #688]	; (80023dc <ProcessUserInput+0x7f0>)
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	f7fe f85f 	bl	80001f0 <strcmp>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <ProcessUserInput+0x562>
  {
    Controller_WipeConfig(Controller);
 8002138:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800213c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	f000 fedb 	bl	8002efc <Controller_WipeConfig>
    USBSendString("Configuration wiped.\n");
 8002146:	48a6      	ldr	r0, [pc, #664]	; (80023e0 <ProcessUserInput+0x7f4>)
 8002148:	f000 ff36 	bl	8002fb8 <USBSendString>
    return;
 800214c:	e321      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if ((strcmp((char*) buffer, "1") == 0) || (strcmp((char*) buffer, "c1") == 0))
 800214e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002152:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002156:	49a3      	ldr	r1, [pc, #652]	; (80023e4 <ProcessUserInput+0x7f8>)
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	f7fe f849 	bl	80001f0 <strcmp>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <ProcessUserInput+0x58e>
 8002164:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002168:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800216c:	499e      	ldr	r1, [pc, #632]	; (80023e8 <ProcessUserInput+0x7fc>)
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	f7fe f83e 	bl	80001f0 <strcmp>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10a      	bne.n	8002190 <ProcessUserInput+0x5a4>
  {
    UI_Controller = 0;
 800217a:	4b9c      	ldr	r3, [pc, #624]	; (80023ec <ProcessUserInput+0x800>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 8002180:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002184:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	f000 fb09 	bl	80027a0 <ShowControllerConfig>
    return;
 800218e:	e300      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if ((strcmp((char*) buffer, "2") == 0) || (strcmp((char*) buffer, "c2") == 0))
 8002190:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002194:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002198:	4995      	ldr	r1, [pc, #596]	; (80023f0 <ProcessUserInput+0x804>)
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	f7fe f828 	bl	80001f0 <strcmp>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <ProcessUserInput+0x5d0>
 80021a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ae:	4991      	ldr	r1, [pc, #580]	; (80023f4 <ProcessUserInput+0x808>)
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	f7fe f81d 	bl	80001f0 <strcmp>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <ProcessUserInput+0x5e6>
  {
    UI_Controller = 1;
 80021bc:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <ProcessUserInput+0x800>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 80021c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	f000 fae8 	bl	80027a0 <ShowControllerConfig>
    return;
 80021d0:	e2df      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if ((strcmp((char*) buffer, "3") == 0) || (strcmp((char*) buffer, "c3") == 0))
 80021d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021da:	4987      	ldr	r1, [pc, #540]	; (80023f8 <ProcessUserInput+0x80c>)
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	f7fe f807 	bl	80001f0 <strcmp>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <ProcessUserInput+0x612>
 80021e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021f0:	4982      	ldr	r1, [pc, #520]	; (80023fc <ProcessUserInput+0x810>)
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	f7fd fffc 	bl	80001f0 <strcmp>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10a      	bne.n	8002214 <ProcessUserInput+0x628>
  {
    UI_Controller = 2;
 80021fe:	4b7b      	ldr	r3, [pc, #492]	; (80023ec <ProcessUserInput+0x800>)
 8002200:	2202      	movs	r2, #2
 8002202:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 8002204:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002208:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	f000 fac7 	bl	80027a0 <ShowControllerConfig>
    return;
 8002212:	e2be      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if ((strcmp((char*) buffer, "4") == 0) || (strcmp((char*) buffer, "c4") == 0))
 8002214:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002218:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800221c:	4978      	ldr	r1, [pc, #480]	; (8002400 <ProcessUserInput+0x814>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	f7fd ffe6 	bl	80001f0 <strcmp>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <ProcessUserInput+0x654>
 800222a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800222e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002232:	4974      	ldr	r1, [pc, #464]	; (8002404 <ProcessUserInput+0x818>)
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	f7fd ffdb 	bl	80001f0 <strcmp>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <ProcessUserInput+0x66a>
  {
    UI_Controller = 3;
 8002240:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <ProcessUserInput+0x800>)
 8002242:	2203      	movs	r2, #3
 8002244:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 8002246:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800224a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	f000 faa6 	bl	80027a0 <ShowControllerConfig>
    return;
 8002254:	e29d      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if (UI_Controller == 9)
 8002256:	4b65      	ldr	r3, [pc, #404]	; (80023ec <ProcessUserInput+0x800>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b09      	cmp	r3, #9
 800225c:	d103      	bne.n	8002266 <ProcessUserInput+0x67a>
  {
    USBSendString("No controller selected.\n");
 800225e:	486a      	ldr	r0, [pc, #424]	; (8002408 <ProcessUserInput+0x81c>)
 8002260:	f000 feaa 	bl	8002fb8 <USBSendString>
    return;
 8002264:	e295      	b.n	8002792 <ProcessUserInput+0xba6>
  }


  if (strcmp((char*) buffer, "e") == 0)
 8002266:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800226a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800226e:	4967      	ldr	r1, [pc, #412]	; (800240c <ProcessUserInput+0x820>)
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	f7fd ffbd 	bl	80001f0 <strcmp>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10b      	bne.n	8002294 <ProcessUserInput+0x6a8>
  {
    USBSendString("Controller enabled.\n");
 800227c:	4864      	ldr	r0, [pc, #400]	; (8002410 <ProcessUserInput+0x824>)
 800227e:	f000 fe9b 	bl	8002fb8 <USBSendString>
    Controller->PID.Config.Enabled = true;
 8002282:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002286:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 8002292:	e27e      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if (strcmp((char*) buffer, "d") == 0)
 8002294:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002298:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800229c:	495d      	ldr	r1, [pc, #372]	; (8002414 <ProcessUserInput+0x828>)
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	f7fd ffa6 	bl	80001f0 <strcmp>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10b      	bne.n	80022c2 <ProcessUserInput+0x6d6>
  {
    USBSendString("Controller disabled.\n");
 80022aa:	485b      	ldr	r0, [pc, #364]	; (8002418 <ProcessUserInput+0x82c>)
 80022ac:	f000 fe84 	bl	8002fb8 <USBSendString>
    Controller->PID.Config.Enabled = false;
 80022b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 80022c0:	e267      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if (sscanf((char*) buffer, "%c%f", &c, &f) == 2)
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	f107 0217 	add.w	r2, r7, #23
 80022ca:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80022ce:	f5a1 7088 	sub.w	r0, r1, #272	; 0x110
 80022d2:	4952      	ldr	r1, [pc, #328]	; (800241c <ProcessUserInput+0x830>)
 80022d4:	6800      	ldr	r0, [r0, #0]
 80022d6:	f00d fa57 	bl	800f788 <siscanf>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b02      	cmp	r3, #2
 80022de:	f040 8234 	bne.w	800274a <ProcessUserInput+0xb5e>
  {
    u = (uint8_t) f;
 80022e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80022f6:	793b      	ldrb	r3, [r7, #4]
 80022f8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    switch (c)
 80022fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002300:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3b61      	subs	r3, #97	; 0x61
 8002308:	2b13      	cmp	r3, #19
 800230a:	f200 823d 	bhi.w	8002788 <ProcessUserInput+0xb9c>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <ProcessUserInput+0x728>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	0800236d 	.word	0x0800236d
 8002318:	08002789 	.word	0x08002789
 800231c:	08002365 	.word	0x08002365
 8002320:	08002543 	.word	0x08002543
 8002324:	08002789 	.word	0x08002789
 8002328:	080025ab 	.word	0x080025ab
 800232c:	08002789 	.word	0x08002789
 8002330:	080026c3 	.word	0x080026c3
 8002334:	080024db 	.word	0x080024db
 8002338:	08002789 	.word	0x08002789
 800233c:	08002789 	.word	0x08002789
 8002340:	0800265b 	.word	0x0800265b
 8002344:	08002789 	.word	0x08002789
 8002348:	08002789 	.word	0x08002789
 800234c:	08002789 	.word	0x08002789
 8002350:	08002473 	.word	0x08002473
 8002354:	08002789 	.word	0x08002789
 8002358:	08002789 	.word	0x08002789
 800235c:	08002789 	.word	0x08002789
 8002360:	08002701 	.word	0x08002701
    {
      case 'c':
        // we shouldn't get here if a valid number was used
        USBSendString("Invalid controller number.\n");
 8002364:	482e      	ldr	r0, [pc, #184]	; (8002420 <ProcessUserInput+0x834>)
 8002366:	f000 fe27 	bl	8002fb8 <USBSendString>
        return;
 800236a:	e212      	b.n	8002792 <ProcessUserInput+0xba6>
        break;
      case 'a':
        switch (u)
 800236c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002370:	2b0b      	cmp	r3, #11
 8002372:	d87a      	bhi.n	800246a <ProcessUserInput+0x87e>
 8002374:	a201      	add	r2, pc, #4	; (adr r2, 800237c <ProcessUserInput+0x790>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	080023ad 	.word	0x080023ad
 8002380:	0800243f 	.word	0x0800243f
 8002384:	0800246b 	.word	0x0800246b
 8002388:	0800246b 	.word	0x0800246b
 800238c:	0800246b 	.word	0x0800246b
 8002390:	0800246b 	.word	0x0800246b
 8002394:	0800246b 	.word	0x0800246b
 8002398:	0800246b 	.word	0x0800246b
 800239c:	0800246b 	.word	0x0800246b
 80023a0:	0800246b 	.word	0x0800246b
 80023a4:	08002429 	.word	0x08002429
 80023a8:	08002455 	.word	0x08002455
        {
          case 0:
            USBSendString("Address set to 0b 10 01 00 0x.\n");
 80023ac:	481d      	ldr	r0, [pc, #116]	; (8002424 <ProcessUserInput+0x838>)
 80023ae:	f000 fe03 	bl	8002fb8 <USBSendString>
            Controller->Sensor.Address = 0b1001000;
 80023b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2248      	movs	r2, #72	; 0x48
 80023be:	721a      	strb	r2, [r3, #8]
            return;
 80023c0:	e1e7      	b.n	8002792 <ProcessUserInput+0xba6>
 80023c2:	bf00      	nop
 80023c4:	08013ca4 	.word	0x08013ca4
 80023c8:	08013c78 	.word	0x08013c78
 80023cc:	080141fc 	.word	0x080141fc
 80023d0:	08013c24 	.word	0x08013c24
 80023d4:	08014218 	.word	0x08014218
 80023d8:	08013cac 	.word	0x08013cac
 80023dc:	08013cb8 	.word	0x08013cb8
 80023e0:	08014240 	.word	0x08014240
 80023e4:	08014258 	.word	0x08014258
 80023e8:	0801425c 	.word	0x0801425c
 80023ec:	2000000c 	.word	0x2000000c
 80023f0:	08014260 	.word	0x08014260
 80023f4:	08014264 	.word	0x08014264
 80023f8:	08014268 	.word	0x08014268
 80023fc:	0801426c 	.word	0x0801426c
 8002400:	08014270 	.word	0x08014270
 8002404:	08014274 	.word	0x08014274
 8002408:	080141dc 	.word	0x080141dc
 800240c:	08014278 	.word	0x08014278
 8002410:	0801427c 	.word	0x0801427c
 8002414:	08013c14 	.word	0x08013c14
 8002418:	08014294 	.word	0x08014294
 800241c:	080142ac 	.word	0x080142ac
 8002420:	080142b4 	.word	0x080142b4
 8002424:	080142d0 	.word	0x080142d0
            break;
          case 10:
            USBSendString("Address set to 0b 10 01 01 0x.\n");
 8002428:	48c9      	ldr	r0, [pc, #804]	; (8002750 <ProcessUserInput+0xb64>)
 800242a:	f000 fdc5 	bl	8002fb8 <USBSendString>
            Controller->Sensor.Address = 0b1001010;
 800242e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002432:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	224a      	movs	r2, #74	; 0x4a
 800243a:	721a      	strb	r2, [r3, #8]
            return;
 800243c:	e1a9      	b.n	8002792 <ProcessUserInput+0xba6>
            break;
          case 1:
            USBSendString("Address set to 0b 10 01 00 1x.\n");
 800243e:	48c5      	ldr	r0, [pc, #788]	; (8002754 <ProcessUserInput+0xb68>)
 8002440:	f000 fdba 	bl	8002fb8 <USBSendString>
            Controller->Sensor.Address = 0b1001001;
 8002444:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002448:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2249      	movs	r2, #73	; 0x49
 8002450:	721a      	strb	r2, [r3, #8]
            return;
 8002452:	e19e      	b.n	8002792 <ProcessUserInput+0xba6>
            break;
          case 11:
            USBSendString("Address set to 0b 10 01 01 1x.\n");
 8002454:	48c0      	ldr	r0, [pc, #768]	; (8002758 <ProcessUserInput+0xb6c>)
 8002456:	f000 fdaf 	bl	8002fb8 <USBSendString>
            Controller->Sensor.Address = 0b1001011;
 800245a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800245e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	224b      	movs	r2, #75	; 0x4b
 8002466:	721a      	strb	r2, [r3, #8]
            return;
 8002468:	e193      	b.n	8002792 <ProcessUserInput+0xba6>
            break;
          default:
            USBSendString("Invalid Address.\n");
 800246a:	48bc      	ldr	r0, [pc, #752]	; (800275c <ProcessUserInput+0xb70>)
 800246c:	f000 fda4 	bl	8002fb8 <USBSendString>
            return;
 8002470:	e18f      	b.n	8002792 <ProcessUserInput+0xba6>
        Controller->Sensor.Configured = false;
        Controller->Sensor.State = 0;
        Controller->PID.IntegratorCount = 0;
        break;
      case 'p':
        if (f < 0)
 8002472:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002486:	d503      	bpl.n	8002490 <ProcessUserInput+0x8a4>
          USBSendString("Invalid value.");
 8002488:	48b5      	ldr	r0, [pc, #724]	; (8002760 <ProcessUserInput+0xb74>)
 800248a:	f000 fd95 	bl	8002fb8 <USBSendString>
        {
          snprintf(output, 200, "kp set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Kp = f;
        }
        return;
 800248e:	e180      	b.n	8002792 <ProcessUserInput+0xba6>
          snprintf(output, 200, "kp set to %f.\n", f);
 8002490:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f874 	bl	8000588 <__aeabi_f2d>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	f107 0018 	add.w	r0, r7, #24
 80024a8:	e9cd 2300 	strd	r2, r3, [sp]
 80024ac:	4aad      	ldr	r2, [pc, #692]	; (8002764 <ProcessUserInput+0xb78>)
 80024ae:	21c8      	movs	r1, #200	; 0xc8
 80024b0:	f00d f916 	bl	800f6e0 <sniprintf>
          USBSendString(output);
 80024b4:	f107 0318 	add.w	r3, r7, #24
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fd7d 	bl	8002fb8 <USBSendString>
          Controller->PID.Config.Kp = f;
 80024be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 80024d6:	601a      	str	r2, [r3, #0]
        return;
 80024d8:	e15b      	b.n	8002792 <ProcessUserInput+0xba6>
        break;

      case 'i':
        if (f < 0)
 80024da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ee:	d503      	bpl.n	80024f8 <ProcessUserInput+0x90c>
          USBSendString("Invalid value.");
 80024f0:	489b      	ldr	r0, [pc, #620]	; (8002760 <ProcessUserInput+0xb74>)
 80024f2:	f000 fd61 	bl	8002fb8 <USBSendString>
        {
          snprintf(output, 200, "ki set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Ki = f;
        }
        return;
 80024f6:	e14c      	b.n	8002792 <ProcessUserInput+0xba6>
          snprintf(output, 200, "ki set to %f.\n", f);
 80024f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f840 	bl	8000588 <__aeabi_f2d>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	f107 0018 	add.w	r0, r7, #24
 8002510:	e9cd 2300 	strd	r2, r3, [sp]
 8002514:	4a94      	ldr	r2, [pc, #592]	; (8002768 <ProcessUserInput+0xb7c>)
 8002516:	21c8      	movs	r1, #200	; 0xc8
 8002518:	f00d f8e2 	bl	800f6e0 <sniprintf>
          USBSendString(output);
 800251c:	f107 0318 	add.w	r3, r7, #24
 8002520:	4618      	mov	r0, r3
 8002522:	f000 fd49 	bl	8002fb8 <USBSendString>
          Controller->PID.Config.Ki = f;
 8002526:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800252a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002534:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800253e:	601a      	str	r2, [r3, #0]
        return;
 8002540:	e127      	b.n	8002792 <ProcessUserInput+0xba6>
        break;

      case 'd':
        if (f < 0)
 8002542:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	d503      	bpl.n	8002560 <ProcessUserInput+0x974>
          USBSendString("Invalid value.");
 8002558:	4881      	ldr	r0, [pc, #516]	; (8002760 <ProcessUserInput+0xb74>)
 800255a:	f000 fd2d 	bl	8002fb8 <USBSendString>
        {
          snprintf(output, 200, "kd set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Kd = f;
        }
        return;
 800255e:	e118      	b.n	8002792 <ProcessUserInput+0xba6>
          snprintf(output, 200, "kd set to %f.\n", f);
 8002560:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe f80c 	bl	8000588 <__aeabi_f2d>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	f107 0018 	add.w	r0, r7, #24
 8002578:	e9cd 2300 	strd	r2, r3, [sp]
 800257c:	4a7b      	ldr	r2, [pc, #492]	; (800276c <ProcessUserInput+0xb80>)
 800257e:	21c8      	movs	r1, #200	; 0xc8
 8002580:	f00d f8ae 	bl	800f6e0 <sniprintf>
          USBSendString(output);
 8002584:	f107 0318 	add.w	r3, r7, #24
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fd15 	bl	8002fb8 <USBSendString>
          Controller->PID.Config.Kd = f;
 800258e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800259c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80025a6:	601a      	str	r2, [r3, #0]
        return;
 80025a8:	e0f3      	b.n	8002792 <ProcessUserInput+0xba6>
        break;

      case 'f':
        if ((f < 0) || (f > 600))
 80025aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	d40c      	bmi.n	80025da <ProcessUserInput+0x9ee>
 80025c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002770 <ProcessUserInput+0xb84>
 80025d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d8:	dd03      	ble.n	80025e2 <ProcessUserInput+0x9f6>
          USBSendString("Invalid value.");
 80025da:	4861      	ldr	r0, [pc, #388]	; (8002760 <ProcessUserInput+0xb74>)
 80025dc:	f000 fcec 	bl	8002fb8 <USBSendString>
        {
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
          USBSendString(output);
          Controller->PID.Config.Frequency = f;
        }
        return;
 80025e0:	e0d7      	b.n	8002792 <ProcessUserInput+0xba6>
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
 80025e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffcb 	bl	8000588 <__aeabi_f2d>
 80025f2:	4604      	mov	r4, r0
 80025f4:	460d      	mov	r5, r1
 80025f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002774 <ProcessUserInput+0xb88>
 8002606:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800260a:	ee16 0a90 	vmov	r0, s13
 800260e:	f7fd ffbb 	bl	8000588 <__aeabi_f2d>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	f107 0018 	add.w	r0, r7, #24
 800261a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800261e:	e9cd 4500 	strd	r4, r5, [sp]
 8002622:	4a55      	ldr	r2, [pc, #340]	; (8002778 <ProcessUserInput+0xb8c>)
 8002624:	21c8      	movs	r1, #200	; 0xc8
 8002626:	f00d f85b 	bl	800f6e0 <sniprintf>
          USBSendString(output);
 800262a:	f107 0318 	add.w	r3, r7, #24
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fcc2 	bl	8002fb8 <USBSendString>
          Controller->PID.Config.Frequency = f;
 8002634:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002644:	ee17 3a90 	vmov	r3, s15
 8002648:	b29a      	uxth	r2, r3
 800264a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800264e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8a3 265e 	strh.w	r2, [r3, #1630]	; 0x65e
        return;
 8002658:	e09b      	b.n	8002792 <ProcessUserInput+0xba6>
        break;


      case 'l':
        if (f < 0)
 800265a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800265e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002662:	edd3 7a00 	vldr	s15, [r3]
 8002666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	d503      	bpl.n	8002678 <ProcessUserInput+0xa8c>
          USBSendString("Invalid value.");
 8002670:	483b      	ldr	r0, [pc, #236]	; (8002760 <ProcessUserInput+0xb74>)
 8002672:	f000 fca1 	bl	8002fb8 <USBSendString>
        {
          snprintf(output, 200, "Li set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Li = f;
        }
        return;
 8002676:	e08c      	b.n	8002792 <ProcessUserInput+0xba6>
          snprintf(output, 200, "Li set to %f.\n", f);
 8002678:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800267c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd ff80 	bl	8000588 <__aeabi_f2d>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	f107 0018 	add.w	r0, r7, #24
 8002690:	e9cd 2300 	strd	r2, r3, [sp]
 8002694:	4a39      	ldr	r2, [pc, #228]	; (800277c <ProcessUserInput+0xb90>)
 8002696:	21c8      	movs	r1, #200	; 0xc8
 8002698:	f00d f822 	bl	800f6e0 <sniprintf>
          USBSendString(output);
 800269c:	f107 0318 	add.w	r3, r7, #24
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fc89 	bl	8002fb8 <USBSendString>
          Controller->PID.Config.Li = f;
 80026a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 80026be:	601a      	str	r2, [r3, #0]
        return;
 80026c0:	e067      	b.n	8002792 <ProcessUserInput+0xba6>
        break;
      case 'h':
        if (u == 0)
 80026c2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <ProcessUserInput+0xae6>
          USBSendString("Invalid value.");
 80026ca:	4825      	ldr	r0, [pc, #148]	; (8002760 <ProcessUserInput+0xb74>)
 80026cc:	f000 fc74 	bl	8002fb8 <USBSendString>
        {
          snprintf(output, 200, "History set to %u.\n", u);
          USBSendString(output);
          Controller->PID.Config.History = u;
        }
        return;
 80026d0:	e05f      	b.n	8002792 <ProcessUserInput+0xba6>
          snprintf(output, 200, "History set to %u.\n", u);
 80026d2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80026d6:	f107 0018 	add.w	r0, r7, #24
 80026da:	4a29      	ldr	r2, [pc, #164]	; (8002780 <ProcessUserInput+0xb94>)
 80026dc:	21c8      	movs	r1, #200	; 0xc8
 80026de:	f00c ffff 	bl	800f6e0 <sniprintf>
          USBSendString(output);
 80026e2:	f107 0318 	add.w	r3, r7, #24
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fc66 	bl	8002fb8 <USBSendString>
          Controller->PID.Config.History = u;
 80026ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 80026fa:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
        return;
 80026fe:	e048      	b.n	8002792 <ProcessUserInput+0xba6>
        break;

      case 't':
        snprintf(output, 200, "Target temperature set to %f.\n", f);
 8002700:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd ff3c 	bl	8000588 <__aeabi_f2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	f107 0018 	add.w	r0, r7, #24
 8002718:	e9cd 2300 	strd	r2, r3, [sp]
 800271c:	4a19      	ldr	r2, [pc, #100]	; (8002784 <ProcessUserInput+0xb98>)
 800271e:	21c8      	movs	r1, #200	; 0xc8
 8002720:	f00c ffde 	bl	800f6e0 <sniprintf>
        USBSendString(output);
 8002724:	f107 0318 	add.w	r3, r7, #24
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fc45 	bl	8002fb8 <USBSendString>
        Controller->PID.Config.TargetP = f;
 800272e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800273c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002746:	601a      	str	r2, [r3, #0]
        return;
 8002748:	e023      	b.n	8002792 <ProcessUserInput+0xba6>
        break;

      default:
        break;
    }
  }
 800274a:	bf00      	nop
 800274c:	e01d      	b.n	800278a <ProcessUserInput+0xb9e>
 800274e:	bf00      	nop
 8002750:	080142f0 	.word	0x080142f0
 8002754:	08014310 	.word	0x08014310
 8002758:	08014330 	.word	0x08014330
 800275c:	08014350 	.word	0x08014350
 8002760:	08014364 	.word	0x08014364
 8002764:	08014374 	.word	0x08014374
 8002768:	08014384 	.word	0x08014384
 800276c:	08014394 	.word	0x08014394
 8002770:	44160000 	.word	0x44160000
 8002774:	42200000 	.word	0x42200000
 8002778:	080143a4 	.word	0x080143a4
 800277c:	080143c8 	.word	0x080143c8
 8002780:	080143d8 	.word	0x080143d8
 8002784:	080143ec 	.word	0x080143ec
        break;
 8002788:	bf00      	nop
  USBSendString("Unknown command.\n");
 800278a:	4804      	ldr	r0, [pc, #16]	; (800279c <ProcessUserInput+0xbb0>)
 800278c:	f000 fc14 	bl	8002fb8 <USBSendString>
  return;
 8002790:	bf00      	nop
}
 8002792:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002796:	46bd      	mov	sp, r7
 8002798:	bdb0      	pop	{r4, r5, r7, pc}
 800279a:	bf00      	nop
 800279c:	0801440c 	.word	0x0801440c

080027a0 <ShowControllerConfig>:

//Show the Configuration of a Controller
void ShowControllerConfig(struct sController* Controller)
{
 80027a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a4:	b0d1      	sub	sp, #324	; 0x144
 80027a6:	af0c      	add	r7, sp, #48	; 0x30
 80027a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027b0:	6018      	str	r0, [r3, #0]
  char s1[12];
  char buffer[250];
  FormatTemperature(s1, Controller->PID.Config.TargetP);
 80027b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fee0 	bl	8000588 <__aeabi_f2d>
 80027c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80027cc:	ec41 0b10 	vmov	d0, r0, r1
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fafd 	bl	8002dd0 <FormatTemperature>
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80027d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	603b      	str	r3, [r7, #0]
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80027e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 80027f2:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fd fec7 	bl	8000588 <__aeabi_f2d>
 80027fa:	4604      	mov	r4, r0
 80027fc:	460d      	mov	r5, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80027fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002802:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f203 6354 	addw	r3, r3, #1620	; 0x654
 800280c:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd feba 	bl	8000588 <__aeabi_f2d>
 8002814:	4680      	mov	r8, r0
 8002816:	4689      	mov	r9, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002818:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800281c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002826:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fead 	bl	8000588 <__aeabi_f2d>
 800282e:	4682      	mov	sl, r0
 8002830:	468b      	mov	fp, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002832:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002836:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002840:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fea0 	bl	8000588 <__aeabi_f2d>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 800284c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002850:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002854:	6809      	ldr	r1, [r1, #0]
 8002856:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 800285a:	460e      	mov	r6, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 800285c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002860:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002864:	6809      	ldr	r1, [r1, #0]
 8002866:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 800286a:	f107 0008 	add.w	r0, r7, #8
 800286e:	910a      	str	r1, [sp, #40]	; 0x28
 8002870:	9609      	str	r6, [sp, #36]	; 0x24
 8002872:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002876:	9108      	str	r1, [sp, #32]
 8002878:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800287c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002880:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002884:	e9cd 4500 	strd	r4, r5, [sp]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4a23      	ldr	r2, [pc, #140]	; (8002918 <ShowControllerConfig+0x178>)
 800288c:	21c8      	movs	r1, #200	; 0xc8
 800288e:	f00c ff27 	bl	800f6e0 <sniprintf>
  USBSendString(buffer);
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fb8e 	bl	8002fb8 <USBSendString>
  switch (Controller->Sensor.Address & 0x03)
 800289c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	7a1b      	ldrb	r3, [r3, #8]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d81b      	bhi.n	80028e8 <ShowControllerConfig+0x148>
 80028b0:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <ShowControllerConfig+0x118>)
 80028b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b6:	bf00      	nop
 80028b8:	080028c9 	.word	0x080028c9
 80028bc:	080028d1 	.word	0x080028d1
 80028c0:	080028d9 	.word	0x080028d9
 80028c4:	080028e1 	.word	0x080028e1
  {
    case 0:
      USBSendString("00");
 80028c8:	4814      	ldr	r0, [pc, #80]	; (800291c <ShowControllerConfig+0x17c>)
 80028ca:	f000 fb75 	bl	8002fb8 <USBSendString>
      break;
 80028ce:	e00c      	b.n	80028ea <ShowControllerConfig+0x14a>
    case 1:
      USBSendString("01");
 80028d0:	4813      	ldr	r0, [pc, #76]	; (8002920 <ShowControllerConfig+0x180>)
 80028d2:	f000 fb71 	bl	8002fb8 <USBSendString>
      break;
 80028d6:	e008      	b.n	80028ea <ShowControllerConfig+0x14a>
    case 2:
      USBSendString("10");
 80028d8:	4812      	ldr	r0, [pc, #72]	; (8002924 <ShowControllerConfig+0x184>)
 80028da:	f000 fb6d 	bl	8002fb8 <USBSendString>
      break;
 80028de:	e004      	b.n	80028ea <ShowControllerConfig+0x14a>
    case 3:
      USBSendString("11");
 80028e0:	4811      	ldr	r0, [pc, #68]	; (8002928 <ShowControllerConfig+0x188>)
 80028e2:	f000 fb69 	bl	8002fb8 <USBSendString>
      break;
 80028e6:	e000      	b.n	80028ea <ShowControllerConfig+0x14a>
    default:
      break;
 80028e8:	bf00      	nop
  }
  if (Controller->PID.Config.Enabled)
 80028ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <ShowControllerConfig+0x164>
    USBSendString("  ENABLED\n");
 80028fc:	480b      	ldr	r0, [pc, #44]	; (800292c <ShowControllerConfig+0x18c>)
 80028fe:	f000 fb5b 	bl	8002fb8 <USBSendString>
  else
    USBSendString("  DISABLED\n");
}
 8002902:	e002      	b.n	800290a <ShowControllerConfig+0x16a>
    USBSendString("  DISABLED\n");
 8002904:	480a      	ldr	r0, [pc, #40]	; (8002930 <ShowControllerConfig+0x190>)
 8002906:	f000 fb57 	bl	8002fb8 <USBSendString>
}
 800290a:	bf00      	nop
 800290c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002910:	46bd      	mov	sp, r7
 8002912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002916:	bf00      	nop
 8002918:	08014420 	.word	0x08014420
 800291c:	08014484 	.word	0x08014484
 8002920:	08014488 	.word	0x08014488
 8002924:	0801448c 	.word	0x0801448c
 8002928:	08014490 	.word	0x08014490
 800292c:	08014494 	.word	0x08014494
 8002930:	080144a0 	.word	0x080144a0

08002934 <ShowAll>:
//Show the Status of a Controller
//@brief Show the Status of a Controller
//@param Controller The Controller to show
//@param readable If true, show the status in human readable form
void ShowAll(struct sController* Controller, bool readable)
{
 8002934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002938:	b0b7      	sub	sp, #220	; 0xdc
 800293a:	af16      	add	r7, sp, #88	; 0x58
 800293c:	6278      	str	r0, [r7, #36]	; 0x24
 800293e:	460b      	mov	r3, r1
 8002940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint32_t ADCVal = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint8_t i;
    char target[12];
    FormatTemperature(target, Controller->PID.Config.TargetP);
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fe19 	bl	8000588 <__aeabi_f2d>
 8002956:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800295a:	ec41 0b10 	vmov	d0, r0, r1
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fa36 	bl	8002dd0 <FormatTemperature>
    char address[3];
    switch (Controller->Sensor.Address & 0x03)
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	7a1b      	ldrb	r3, [r3, #8]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b03      	cmp	r3, #3
 800296e:	d833      	bhi.n	80029d8 <ShowAll+0xa4>
 8002970:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <ShowAll+0x44>)
 8002972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002976:	bf00      	nop
 8002978:	08002989 	.word	0x08002989
 800297c:	0800299d 	.word	0x0800299d
 8002980:	080029b1 	.word	0x080029b1
 8002984:	080029c5 	.word	0x080029c5
    {
      case 0: strcpy(address, "00"); break;
 8002988:	4aaa      	ldr	r2, [pc, #680]	; (8002c34 <ShowAll+0x300>)
 800298a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	4611      	mov	r1, r2
 8002992:	8019      	strh	r1, [r3, #0]
 8002994:	3302      	adds	r3, #2
 8002996:	0c12      	lsrs	r2, r2, #16
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e01e      	b.n	80029da <ShowAll+0xa6>
      case 1: strcpy(address, "01"); break;
 800299c:	4aa6      	ldr	r2, [pc, #664]	; (8002c38 <ShowAll+0x304>)
 800299e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	4611      	mov	r1, r2
 80029a6:	8019      	strh	r1, [r3, #0]
 80029a8:	3302      	adds	r3, #2
 80029aa:	0c12      	lsrs	r2, r2, #16
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e014      	b.n	80029da <ShowAll+0xa6>
      case 2: strcpy(address, "10"); break;
 80029b0:	4aa2      	ldr	r2, [pc, #648]	; (8002c3c <ShowAll+0x308>)
 80029b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	4611      	mov	r1, r2
 80029ba:	8019      	strh	r1, [r3, #0]
 80029bc:	3302      	adds	r3, #2
 80029be:	0c12      	lsrs	r2, r2, #16
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e00a      	b.n	80029da <ShowAll+0xa6>
      case 3: strcpy(address, "11"); break;
 80029c4:	4a9e      	ldr	r2, [pc, #632]	; (8002c40 <ShowAll+0x30c>)
 80029c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	4611      	mov	r1, r2
 80029ce:	8019      	strh	r1, [r3, #0]
 80029d0:	3302      	adds	r3, #2
 80029d2:	0c12      	lsrs	r2, r2, #16
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e000      	b.n	80029da <ShowAll+0xa6>
      default: break;
 80029d8:	bf00      	nop
    }
    char enabled[10];
    if (Controller->PID.Config.Enabled)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d006      	beq.n	80029f2 <ShowAll+0xbe>
      strcpy(enabled, "ENABLED ");
 80029e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80029e8:	4a96      	ldr	r2, [pc, #600]	; (8002c44 <ShowAll+0x310>)
 80029ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80029ec:	c303      	stmia	r3!, {r0, r1}
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	e005      	b.n	80029fe <ShowAll+0xca>
    else
      strcpy(enabled, "DISABLED");
 80029f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80029f6:	4a94      	ldr	r2, [pc, #592]	; (8002c48 <ShowAll+0x314>)
 80029f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029fa:	c303      	stmia	r3!, {r0, r1}
 80029fc:	701a      	strb	r2, [r3, #0]
    char average[12], last[12], targetp[12];
    FormatTemperature(average, Controller->Sensor.Average);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8002a04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a08:	eeb0 0a47 	vmov.f32	s0, s14
 8002a0c:	eef0 0a67 	vmov.f32	s1, s15
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f9dd 	bl	8002dd0 <FormatTemperature>
    FormatTemperature(last, Controller->Sensor.LastTemperature);
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
 8002a1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a20:	eeb0 0a47 	vmov.f32	s0, s14
 8002a24:	eef0 0a67 	vmov.f32	s1, s15
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f9d1 	bl	8002dd0 <FormatTemperature>
    FormatTemperature(targetp, Controller->PID.Config.TargetP);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fda6 	bl	8000588 <__aeabi_f2d>
 8002a3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a40:	ec41 0b10 	vmov	d0, r0, r1
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f9c3 	bl	8002dd0 <FormatTemperature>

    char sensor[15];
    switch (Controller->Sensor.State)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d839      	bhi.n	8002ac8 <ShowAll+0x194>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <ShowAll+0x128>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a71 	.word	0x08002a71
 8002a60:	08002a81 	.word	0x08002a81
 8002a64:	08002a93 	.word	0x08002a93
 8002a68:	08002aa7 	.word	0x08002aa7
 8002a6c:	08002ab5 	.word	0x08002ab5
    {
      case TMP117_STATE_UNKNOWN:      strcpy(sensor, "Unknown");       break;
 8002a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a74:	4a75      	ldr	r2, [pc, #468]	; (8002c4c <ShowAll+0x318>)
 8002a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a7e:	e024      	b.n	8002aca <ShowAll+0x196>
      case TMP117_STATE_INITFAILED:   strcpy(sensor, "Config failed"); break;
 8002a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a84:	4a72      	ldr	r2, [pc, #456]	; (8002c50 <ShowAll+0x31c>)
 8002a86:	461c      	mov	r4, r3
 8002a88:	4613      	mov	r3, r2
 8002a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a8c:	c407      	stmia	r4!, {r0, r1, r2}
 8002a8e:	8023      	strh	r3, [r4, #0]
 8002a90:	e01b      	b.n	8002aca <ShowAll+0x196>
      case TMP117_STATE_REQUESTNOACK: strcpy(sensor, "Req failed");    break;
 8002a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a96:	4a6f      	ldr	r2, [pc, #444]	; (8002c54 <ShowAll+0x320>)
 8002a98:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a9a:	c303      	stmia	r3!, {r0, r1}
 8002a9c:	801a      	strh	r2, [r3, #0]
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	0c12      	lsrs	r2, r2, #16
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e011      	b.n	8002aca <ShowAll+0x196>
      case TMP117_STATE_RECEIVEFAIL:  strcpy(sensor, "No response");   break;
 8002aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aaa:	4a6b      	ldr	r2, [pc, #428]	; (8002c58 <ShowAll+0x324>)
 8002aac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ab2:	e00a      	b.n	8002aca <ShowAll+0x196>
      case TMP117_STATE_VALIDTEMP:    strcpy(sensor, "OK");            break;
 8002ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab8:	4a68      	ldr	r2, [pc, #416]	; (8002c5c <ShowAll+0x328>)
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	4611      	mov	r1, r2
 8002abe:	8019      	strh	r1, [r3, #0]
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	0c12      	lsrs	r2, r2, #16
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e000      	b.n	8002aca <ShowAll+0x196>
      default: break;
 8002ac8:	bf00      	nop
    }

    static char buffer[250];

    if (readable)
 8002aca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80d2 	beq.w	8002c78 <ShowAll+0x344>
    {
      snprintf(buffer, 200, "C%u: kp=%5.2f   ep=% 7.1f    temp=%8s  freq: %04u  %s\n", Controller->Heater, Controller->PID.Config.Kp, 100 * Controller->PID.Ep, last, Controller->PID.Config.Frequency, enabled);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461e      	mov	r6, r3
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fd50 	bl	8000588 <__aeabi_f2d>
 8002ae8:	4604      	mov	r4, r0
 8002aea:	460d      	mov	r5, r1
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002c74 <ShowAll+0x340>
 8002afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afe:	ee17 0a90 	vmov	r0, s15
 8002b02:	f7fd fd41 	bl	8000588 <__aeabi_f2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0c:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
 8002b10:	4608      	mov	r0, r1
 8002b12:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002b16:	9106      	str	r1, [sp, #24]
 8002b18:	9005      	str	r0, [sp, #20]
 8002b1a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002b1e:	9104      	str	r1, [sp, #16]
 8002b20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b24:	e9cd 4500 	strd	r4, r5, [sp]
 8002b28:	4633      	mov	r3, r6
 8002b2a:	4a4d      	ldr	r2, [pc, #308]	; (8002c60 <ShowAll+0x32c>)
 8002b2c:	21c8      	movs	r1, #200	; 0xc8
 8002b2e:	484d      	ldr	r0, [pc, #308]	; (8002c64 <ShowAll+0x330>)
 8002b30:	f00c fdd6 	bl	800f6e0 <sniprintf>
      USBSendString(buffer);
 8002b34:	484b      	ldr	r0, [pc, #300]	; (8002c64 <ShowAll+0x330>)
 8002b36:	f000 fa3f 	bl	8002fb8 <USBSendString>
      snprintf(buffer, 200,  "  : kd=%5.2f   ed=% 7.1f     avg=%8s  i2c: %2s\n", Controller->PID.Config.Kd, 100 * Controller->PID.Ed, average, address);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fd20 	bl	8000588 <__aeabi_f2d>
 8002b48:	4604      	mov	r4, r0
 8002b4a:	460d      	mov	r5, r1
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002c74 <ShowAll+0x340>
 8002b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b5e:	ee17 0a90 	vmov	r0, s15
 8002b62:	f7fd fd11 	bl	8000588 <__aeabi_f2d>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002b6e:	9105      	str	r1, [sp, #20]
 8002b70:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002b74:	9104      	str	r1, [sp, #16]
 8002b76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b7a:	e9cd 4500 	strd	r4, r5, [sp]
 8002b7e:	4a3a      	ldr	r2, [pc, #232]	; (8002c68 <ShowAll+0x334>)
 8002b80:	21c8      	movs	r1, #200	; 0xc8
 8002b82:	4838      	ldr	r0, [pc, #224]	; (8002c64 <ShowAll+0x330>)
 8002b84:	f00c fdac 	bl	800f6e0 <sniprintf>
      USBSendString(buffer);
 8002b88:	4836      	ldr	r0, [pc, #216]	; (8002c64 <ShowAll+0x330>)
 8002b8a:	f000 fa15 	bl	8002fb8 <USBSendString>
      snprintf(buffer, 200,  "  : ki=%5.2f   ei=% 7.1f  target=%8s  history=%3u\n", Controller->PID.Config.Ki, 100 * Controller->PID.Ei, target, Controller->PID.Config.History);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fcf6 	bl	8000588 <__aeabi_f2d>
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	460d      	mov	r5, r1
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002c74 <ShowAll+0x340>
 8002bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb2:	ee17 0a90 	vmov	r0, s15
 8002bb6:	f7fd fce7 	bl	8000588 <__aeabi_f2d>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bc0:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
 8002bc4:	9105      	str	r1, [sp, #20]
 8002bc6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002bca:	9104      	str	r1, [sp, #16]
 8002bcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bd0:	e9cd 4500 	strd	r4, r5, [sp]
 8002bd4:	4a25      	ldr	r2, [pc, #148]	; (8002c6c <ShowAll+0x338>)
 8002bd6:	21c8      	movs	r1, #200	; 0xc8
 8002bd8:	4822      	ldr	r0, [pc, #136]	; (8002c64 <ShowAll+0x330>)
 8002bda:	f00c fd81 	bl	800f6e0 <sniprintf>
      USBSendString(buffer);
 8002bde:	4821      	ldr	r0, [pc, #132]	; (8002c64 <ShowAll+0x330>)
 8002be0:	f000 f9ea 	bl	8002fb8 <USBSendString>
      snprintf(buffer, 200,  "  : li=%5.2f  eff=% 7.1f  sensor: %s\n\n", Controller->PID.Config.Li, 100 * Controller->PID.Effort, sensor);
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fccb 	bl	8000588 <__aeabi_f2d>
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	460d      	mov	r5, r1
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002bfc:	edd3 7a00 	vldr	s15, [r3]
 8002c00:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002c74 <ShowAll+0x340>
 8002c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c08:	ee17 0a90 	vmov	r0, s15
 8002c0c:	f7fd fcbc 	bl	8000588 <__aeabi_f2d>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002c18:	9104      	str	r1, [sp, #16]
 8002c1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c1e:	e9cd 4500 	strd	r4, r5, [sp]
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <ShowAll+0x33c>)
 8002c24:	21c8      	movs	r1, #200	; 0xc8
 8002c26:	480f      	ldr	r0, [pc, #60]	; (8002c64 <ShowAll+0x330>)
 8002c28:	f00c fd5a 	bl	800f6e0 <sniprintf>
      USBSendString(buffer);
 8002c2c:	480d      	ldr	r0, [pc, #52]	; (8002c64 <ShowAll+0x330>)
 8002c2e:	f000 f9c3 	bl	8002fb8 <USBSendString>
      USBSendString(buffer);
      //}

//      HAL_Delay(1); // don't butcher our buffer before we're done with it
    }
}
 8002c32:	e0b4      	b.n	8002d9e <ShowAll+0x46a>
 8002c34:	08014484 	.word	0x08014484
 8002c38:	08014488 	.word	0x08014488
 8002c3c:	0801448c 	.word	0x0801448c
 8002c40:	08014490 	.word	0x08014490
 8002c44:	08014554 	.word	0x08014554
 8002c48:	08014560 	.word	0x08014560
 8002c4c:	0801456c 	.word	0x0801456c
 8002c50:	08014574 	.word	0x08014574
 8002c54:	08014584 	.word	0x08014584
 8002c58:	08014590 	.word	0x08014590
 8002c5c:	0801459c 	.word	0x0801459c
 8002c60:	080145a0 	.word	0x080145a0
 8002c64:	20000308 	.word	0x20000308
 8002c68:	080145d8 	.word	0x080145d8
 8002c6c:	08014608 	.word	0x08014608
 8002c70:	0801463c 	.word	0x0801463c
 8002c74:	42c80000 	.word	0x42c80000
        ShowRawHeader();
 8002c78:	f000 f89a 	bl	8002db0 <ShowRawHeader>
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	781b      	ldrb	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002c80:	61fb      	str	r3, [r7, #28]
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002c88:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fc7c 	bl	8000588 <__aeabi_f2d>
 8002c90:	4680      	mov	r8, r0
 8002c92:	4689      	mov	r9, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002c9a:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fc73 	bl	8000588 <__aeabi_f2d>
 8002ca2:	4682      	mov	sl, r0
 8002ca4:	468b      	mov	fp, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002cac:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fc6a 	bl	8000588 <__aeabi_f2d>
 8002cb4:	e9c7 0104 	strd	r0, r1, [r7, #16]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 8002c74 <ShowAll+0x340>
 8002cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002cca:	ee17 0a90 	vmov	r0, s15
 8002cce:	f7fd fc5b 	bl	8000588 <__aeabi_f2d>
 8002cd2:	e9c7 0102 	strd	r0, r1, [r7, #8]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002cdc:	edd3 7a00 	vldr	s15, [r3]
 8002ce0:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 8002c74 <ShowAll+0x340>
 8002ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002ce8:	ee17 0a90 	vmov	r0, s15
 8002cec:	f7fd fc4c 	bl	8000588 <__aeabi_f2d>
 8002cf0:	e9c7 0100 	strd	r0, r1, [r7]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8002c74 <ShowAll+0x340>
 8002d02:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d06:	ee17 0a90 	vmov	r0, s15
 8002d0a:	f7fd fc3d 	bl	8000588 <__aeabi_f2d>
 8002d0e:	4604      	mov	r4, r0
 8002d10:	460d      	mov	r5, r1
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002d18:	edd3 7a00 	vldr	s15, [r3]
 8002d1c:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 8002c74 <ShowAll+0x340>
 8002d20:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d24:	ee17 0a90 	vmov	r0, s15
 8002d28:	f7fd fc2e 	bl	8000588 <__aeabi_f2d>
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	f893 365d 	ldrb.w	r3, [r3, #1629]	; 0x65d
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d32:	461e      	mov	r6, r3
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	f8b3 365e 	ldrh.w	r3, [r3, #1630]	; 0x65e
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d40:	9315      	str	r3, [sp, #84]	; 0x54
 8002d42:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d46:	9314      	str	r3, [sp, #80]	; 0x50
 8002d48:	9213      	str	r2, [sp, #76]	; 0x4c
 8002d4a:	9612      	str	r6, [sp, #72]	; 0x48
 8002d4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d50:	9311      	str	r3, [sp, #68]	; 0x44
 8002d52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d56:	9310      	str	r3, [sp, #64]	; 0x40
 8002d58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d62:	930e      	str	r3, [sp, #56]	; 0x38
 8002d64:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002d68:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002d6c:	ed97 7b00 	vldr	d7, [r7]
 8002d70:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002d74:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d78:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002d7c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d80:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002d84:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002d88:	e9cd 8900 	strd	r8, r9, [sp]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	4a06      	ldr	r2, [pc, #24]	; (8002da8 <ShowAll+0x474>)
 8002d90:	21c8      	movs	r1, #200	; 0xc8
 8002d92:	4806      	ldr	r0, [pc, #24]	; (8002dac <ShowAll+0x478>)
 8002d94:	f00c fca4 	bl	800f6e0 <sniprintf>
      USBSendString(buffer);
 8002d98:	4804      	ldr	r0, [pc, #16]	; (8002dac <ShowAll+0x478>)
 8002d9a:	f000 f90d 	bl	8002fb8 <USBSendString>
}
 8002d9e:	bf00      	nop
 8002da0:	3784      	adds	r7, #132	; 0x84
 8002da2:	46bd      	mov	sp, r7
 8002da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002da8:	08014664 	.word	0x08014664
 8002dac:	20000308 	.word	0x20000308

08002db0 <ShowRawHeader>:


//Prints the header for the raw data
void ShowRawHeader(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  static char buffer[250];
  snprintf(buffer, 200,  "Chan\t  kp\t  kd\t  ki\t    ep\t    ed\t    ei\t  effort temp\t         average          target        i2c\thist\tfreq\tenabled\t       sensor\n");
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <ShowRawHeader+0x18>)
 8002db6:	21c8      	movs	r1, #200	; 0xc8
 8002db8:	4804      	ldr	r0, [pc, #16]	; (8002dcc <ShowRawHeader+0x1c>)
 8002dba:	f00c fc91 	bl	800f6e0 <sniprintf>
  USBSendString(buffer);
 8002dbe:	4803      	ldr	r0, [pc, #12]	; (8002dcc <ShowRawHeader+0x1c>)
 8002dc0:	f000 f8fa 	bl	8002fb8 <USBSendString>
//  HAL_Delay(1); // don't butcher our buffer before we're done with it
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	080146b4 	.word	0x080146b4
 8002dcc:	20000404 	.word	0x20000404

08002dd0 <FormatTemperature>:


//Formats the Float to fit into the Temperature Display
void FormatTemperature(char* buffer, double temp)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	ed87 0b00 	vstr	d0, [r7]
  if (temp > -100)
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <FormatTemperature+0x48>)
 8002de2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002de6:	f7fd feb7 	bl	8000b58 <__aeabi_dcmpgt>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d009      	beq.n	8002e04 <FormatTemperature+0x34>
    snprintf(buffer, 10, "% 7.3fC", temp);
 8002df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002df4:	e9cd 2300 	strd	r2, r3, [sp]
 8002df8:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <FormatTemperature+0x4c>)
 8002dfa:	210a      	movs	r1, #10
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f00c fc6f 	bl	800f6e0 <sniprintf>
  else
    snprintf(buffer, 10, "  error ");
}
 8002e02:	e004      	b.n	8002e0e <FormatTemperature+0x3e>
    snprintf(buffer, 10, "  error ");
 8002e04:	4a06      	ldr	r2, [pc, #24]	; (8002e20 <FormatTemperature+0x50>)
 8002e06:	210a      	movs	r1, #10
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f00c fc69 	bl	800f6e0 <sniprintf>
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	c0590000 	.word	0xc0590000
 8002e1c:	08014738 	.word	0x08014738
 8002e20:	08014740 	.word	0x08014740

08002e24 <Controller_InitStruct>:
#include "Controller.h"




void Controller_InitStruct(struct sController* s, struct sTMP117 *t,uint8_t heater){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002e30:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002e34:	6018      	str	r0, [r3, #0]
 8002e36:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002e3a:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8002e3e:	6019      	str	r1, [r3, #0]
 8002e40:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002e44:	f2a3 4339 	subw	r3, r3, #1081	; 0x439
 8002e48:	701a      	strb	r2, [r3, #0]
  struct sPID PID;
  PID_InitStruct(&PID);
 8002e4a:	f107 0310 	add.w	r3, r7, #16
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe fb0c 	bl	800146c <PID_InitStruct>

  s->Heater = heater;
 8002e54:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002e58:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002e62:	f2a2 4239 	subw	r2, r2, #1081	; 0x439
 8002e66:	7812      	ldrb	r2, [r2, #0]
 8002e68:	701a      	strb	r2, [r3, #0]
  s->Sensor = *t;
 8002e6a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002e6e:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002e78:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	4611      	mov	r1, r2
 8002e82:	f44f 720a 	mov.w	r2, #552	; 0x228
 8002e86:	4618      	mov	r0, r3
 8002e88:	f00b fcec 	bl	800e864 <memcpy>
  s->PID = PID;
 8002e8c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002e90:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002e9a:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8002e9e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f00b fcdb 	bl	800e864 <memcpy>
}
 8002eae:	bf00      	nop
 8002eb0:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <Controller_SetHeater>:

// this doesn't sit in the struct because we want something global that the interrupt can call
//This Has been Edited so that it can be used in the TCB
void Controller_SetHeater(uint8_t heater, bool state)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	460a      	mov	r2, r1
 8002ec2:	71fb      	strb	r3, [r7, #7]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71bb      	strb	r3, [r7, #6]
  //For the TCB
  uint16_t Pin;
  GPIO_TypeDef* Port;
  Port = GPIOC;
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <Controller_SetHeater+0x40>)
 8002eca:	60fb      	str	r3, [r7, #12]
  Pin = GPIO_PIN_5;
 8002ecc:	2320      	movs	r3, #32
 8002ece:	817b      	strh	r3, [r7, #10]
  
  if (state)
 8002ed0:	79bb      	ldrb	r3, [r7, #6]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <Controller_SetHeater+0x2c>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8002ed6:	897b      	ldrh	r3, [r7, #10]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4619      	mov	r1, r3
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f001 fd83 	bl	80049e8 <HAL_GPIO_WritePin>
  else
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);

}
 8002ee2:	e005      	b.n	8002ef0 <Controller_SetHeater+0x38>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8002ee4:	897b      	ldrh	r3, [r7, #10]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4619      	mov	r1, r3
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f001 fd7c 	bl	80049e8 <HAL_GPIO_WritePin>
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40020800 	.word	0x40020800

08002efc <Controller_WipeConfig>:

void Controller_WipeConfig(struct sController* Controller)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  Controller_InitStruct(Controller, &Controller->Sensor, 0);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3308      	adds	r3, #8
 8002f08:	2200      	movs	r2, #0
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff89 	bl	8002e24 <Controller_InitStruct>
  printf("Cannot Save No EEPROM");
 8002f12:	4803      	ldr	r0, [pc, #12]	; (8002f20 <Controller_WipeConfig+0x24>)
 8002f14:	f00c fb50 	bl	800f5b8 <iprintf>
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	0801474c 	.word	0x0801474c

08002f24 <Controller_Step>:



void Controller_Step(struct sController* Controller)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint8_t i = Controller->Heater - 1;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	75fb      	strb	r3, [r7, #23]
  float temp, eff;
  if (Controller->PID.Config.Enabled == false)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002f3a:	f083 0301 	eor.w	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <Controller_Step+0x28>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <Controller_Step+0x8c>)
 8002f46:	2264      	movs	r2, #100	; 0x64
 8002f48:	701a      	strb	r2, [r3, #0]
    return;
 8002f4a:	e02d      	b.n	8002fa8 <Controller_Step+0x84>
  }
  if (Controller->Sensor.State != TMP117_STATE_VALIDTEMP)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d003      	beq.n	8002f5e <Controller_Step+0x3a>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <Controller_Step+0x8c>)
 8002f58:	2264      	movs	r2, #100	; 0x64
 8002f5a:	701a      	strb	r2, [r3, #0]
    return;
 8002f5c:	e024      	b.n	8002fa8 <Controller_Step+0x84>
  }

  temp = Controller->Sensor.Average;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	f7fd fe5e 	bl	8000c28 <__aeabi_d2f>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	613b      	str	r3, [r7, #16]
  eff = PID_CalculateEffort(&Controller->PID, temp);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002f76:	ed97 0a04 	vldr	s0, [r7, #16]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fbb4 	bl	80016e8 <PID_CalculateEffort>
 8002f80:	ed87 0a03 	vstr	s0, [r7, #12]
  // dwell is a value between 0 and 100 which tells the heater controller how many
  // heater ticks the heater spends off. A complete heater cycle is 200 ticks.
  // For a 40% duty cycle (effort), dwell becomes 60, making the heater off for 60,
  // on for 80, and off for another 60. This weird design causes heaters with
  // different effort values to turn on and off at different times.
  HeaterDwell = 100 * (1 - eff);
 8002f84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f88:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f90:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002fb4 <Controller_Step+0x90>
 8002f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f9c:	edc7 7a00 	vstr	s15, [r7]
 8002fa0:	783b      	ldrb	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	4b02      	ldr	r3, [pc, #8]	; (8002fb0 <Controller_Step+0x8c>)
 8002fa6:	701a      	strb	r2, [r3, #0]
}
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000010 	.word	0x20000010
 8002fb4:	42c80000 	.word	0x42c80000

08002fb8 <USBSendString>:
   }
   return --i;
}

void USBSendString(char* buf)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  int i, res;
  for (i=0;i<50; i++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	e013      	b.n	8002fee <USBSendString+0x36>
  {
    res = CDC_Transmit_FS((uint8_t *)buf, strlen(buf));
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fd f91c 	bl	8000204 <strlen>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f00a ffc0 	bl	800df58 <CDC_Transmit_FS>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	60bb      	str	r3, [r7, #8]
    if (res == USBD_OK)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <USBSendString+0x3e>
      return;

    HAL_Delay(1);
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	f001 f9ee 	bl	80043c4 <HAL_Delay>
  for (i=0;i<50; i++)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3301      	adds	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b31      	cmp	r3, #49	; 0x31
 8002ff2:	dde8      	ble.n	8002fc6 <USBSendString+0xe>
 8002ff4:	e000      	b.n	8002ff8 <USBSendString+0x40>
      return;
 8002ff6:	bf00      	nop
  }
}
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <InitDWTTimer>:

void InitDWTTimer(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003004:	4b09      	ldr	r3, [pc, #36]	; (800302c <InitDWTTimer+0x2c>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a08      	ldr	r2, [pc, #32]	; (800302c <InitDWTTimer+0x2c>)
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <InitDWTTimer+0x30>)
 8003012:	2200      	movs	r2, #0
 8003014:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk ; // enable the counter
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <InitDWTTimer+0x30>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a05      	ldr	r2, [pc, #20]	; (8003030 <InitDWTTimer+0x30>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6013      	str	r3, [r2, #0]
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000edf0 	.word	0xe000edf0
 8003030:	e0001000 	.word	0xe0001000

08003034 <Delay_us>:

void Delay_us(uint32_t us)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <Delay_us+0x40>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <Delay_us+0x44>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0c9b      	lsrs	r3, r3, #18
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	60fb      	str	r3, [r7, #12]
  volatile uint32_t start = DWT->CYCCNT;
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <Delay_us+0x48>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60bb      	str	r3, [r7, #8]
  do  {
  } while((DWT->CYCCNT - start) < cycles);
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <Delay_us+0x48>)
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	1ad2      	subs	r2, r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	429a      	cmp	r2, r3
 8003062:	d3f8      	bcc.n	8003056 <Delay_us+0x22>
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000014 	.word	0x20000014
 8003078:	431bde83 	.word	0x431bde83
 800307c:	e0001000 	.word	0xe0001000

08003080 <replacestr>:
    return un.u;
}

// in-place string replacement which only works if the new string is smaller than the old string
void replacestr(uint8_t *buffer, const char *search, const char *replace)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
     char *sp;
     char* line = (char*) buffer;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
     if ((sp = strstr(line, search)) == NULL) {
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003094:	f00c fbe9 	bl	800f86a <strstr>
 8003098:	6238      	str	r0, [r7, #32]
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d023      	beq.n	80030e8 <replacestr+0x68>
         return;
     }
     int search_len = strlen(search);
 80030a0:	68b8      	ldr	r0, [r7, #8]
 80030a2:	f7fd f8af 	bl	8000204 <strlen>
 80030a6:	4603      	mov	r3, r0
 80030a8:	61fb      	str	r3, [r7, #28]
     int replace_len = strlen(replace);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd f8aa 	bl	8000204 <strlen>
 80030b0:	4603      	mov	r3, r0
 80030b2:	61bb      	str	r3, [r7, #24]
     int tail_len = strlen(sp+search_len);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	6a3a      	ldr	r2, [r7, #32]
 80030b8:	4413      	add	r3, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd f8a2 	bl	8000204 <strlen>
 80030c0:	4603      	mov	r3, r0
 80030c2:	617b      	str	r3, [r7, #20]

     memmove(sp+replace_len,sp+search_len,tail_len+1);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	6a3a      	ldr	r2, [r7, #32]
 80030c8:	18d0      	adds	r0, r2, r3
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	18d1      	adds	r1, r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3301      	adds	r3, #1
 80030d4:	461a      	mov	r2, r3
 80030d6:	f00b fbd3 	bl	800e880 <memmove>
     memcpy(sp, replace, replace_len);
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	461a      	mov	r2, r3
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	6a38      	ldr	r0, [r7, #32]
 80030e2:	f00b fbbf 	bl	800e864 <memcpy>
 80030e6:	e000      	b.n	80030ea <replacestr+0x6a>
         return;
 80030e8:	bf00      	nop
}
 80030ea:	3728      	adds	r7, #40	; 0x28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80030f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80030fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003108:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800310c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003110:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003118:	e000      	b.n	800311c <ITM_SendChar+0x2c>
    {
      __NOP();
 800311a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800311c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f9      	beq.n	800311a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003126:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003130:	687b      	ldr	r3, [r7, #4]
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This Intterupot is called every .25ms Will Toggle the State of the Dac Channels
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a6c      	ldr	r2, [pc, #432]	; (80032fc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d149      	bne.n	80031e4 <HAL_TIM_PeriodElapsedCallback+0xa4>
  {
    //Syncronous Update of the DACs
    for (int i = 0; i < 6; i++){
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	e041      	b.n	80031da <HAL_TIM_PeriodElapsedCallback+0x9a>
      if(TCB.DAC8718.DAC_Channels[i].enabled){
 8003156:	4a6a      	ldr	r2, [pc, #424]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	33ce      	adds	r3, #206	; 0xce
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	7a9b      	ldrb	r3, [r3, #10]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d036      	beq.n	80031d4 <HAL_TIM_PeriodElapsedCallback+0x94>
        if(TCB.DAC8718.DAC_Channels[i].state_high){
 8003166:	4a66      	ldr	r2, [pc, #408]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	33ce      	adds	r3, #206	; 0xce
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	7a5b      	ldrb	r3, [r3, #9]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d017      	beq.n	80031a6 <HAL_TIM_PeriodElapsedCallback+0x66>

          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].lower_bound);
 8003176:	4a62      	ldr	r2, [pc, #392]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	33ce      	adds	r3, #206	; 0xce
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	7a19      	ldrb	r1, [r3, #8]
 8003182:	4a5f      	ldr	r2, [pc, #380]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	33ce      	adds	r3, #206	; 0xce
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	88db      	ldrh	r3, [r3, #6]
 800318e:	461a      	mov	r2, r3
 8003190:	485c      	ldr	r0, [pc, #368]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003192:	f7fe f849 	bl	8001228 <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = false;
 8003196:	4a5a      	ldr	r2, [pc, #360]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	33ce      	adds	r3, #206	; 0xce
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	2200      	movs	r2, #0
 80031a2:	725a      	strb	r2, [r3, #9]
 80031a4:	e016      	b.n	80031d4 <HAL_TIM_PeriodElapsedCallback+0x94>
        }else{
          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].upper_bound);
 80031a6:	4a56      	ldr	r2, [pc, #344]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	33ce      	adds	r3, #206	; 0xce
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	7a19      	ldrb	r1, [r3, #8]
 80031b2:	4a53      	ldr	r2, [pc, #332]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	33ce      	adds	r3, #206	; 0xce
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	889b      	ldrh	r3, [r3, #4]
 80031be:	461a      	mov	r2, r3
 80031c0:	4850      	ldr	r0, [pc, #320]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80031c2:	f7fe f831 	bl	8001228 <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = true;
 80031c6:	4a4e      	ldr	r2, [pc, #312]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	33ce      	adds	r3, #206	; 0xce
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	2201      	movs	r2, #1
 80031d2:	725a      	strb	r2, [r3, #9]
    for (int i = 0; i < 6; i++){
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b05      	cmp	r3, #5
 80031de:	ddba      	ble.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x16>

        }
      }
    }//End For
    Syncronous_Update();
 80031e0:	f7fe f8c1 	bl	8001366 <Syncronous_Update>
  }//End Timer 2


//--------------------This is from Damons Code-----------------------
  uint8_t i;
  if (htim == &htim6)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a48      	ldr	r2, [pc, #288]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d123      	bne.n	8003234 <HAL_TIM_PeriodElapsedCallback+0xf4>
  {
    HeaterSubtick += HeaterFrequency;
 80031ec:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	4b44      	ldr	r3, [pc, #272]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80031fe:	801a      	strh	r2, [r3, #0]
    if (HeaterSubtick > 1000){
 8003200:	4b43      	ldr	r3, [pc, #268]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	b29b      	uxth	r3, r3
 8003206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800320a:	d913      	bls.n	8003234 <HAL_TIM_PeriodElapsedCallback+0xf4>
        HeaterTick = (HeaterTick + 1) % 200;
 800320c:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	3301      	adds	r3, #1
 8003214:	4a40      	ldr	r2, [pc, #256]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003216:	fb82 1203 	smull	r1, r2, r2, r3
 800321a:	1191      	asrs	r1, r2, #6
 800321c:	17da      	asrs	r2, r3, #31
 800321e:	1a8a      	subs	r2, r1, r2
 8003220:	21c8      	movs	r1, #200	; 0xc8
 8003222:	fb01 f202 	mul.w	r2, r1, r2
 8003226:	1a9a      	subs	r2, r3, r2
 8003228:	b292      	uxth	r2, r2
 800322a:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800322c:	801a      	strh	r2, [r3, #0]
        HeaterSubtick = 0;
 800322e:	4b38      	ldr	r3, [pc, #224]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003230:	2200      	movs	r2, #0
 8003232:	801a      	strh	r2, [r3, #0]
    }
  }//End Timer 3

  if ((HeaterTick > HeaterDwell)&& (HeaterTick < (200 - HeaterDwell))){
 8003234:	4b39      	ldr	r3, [pc, #228]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	b29a      	uxth	r2, r3
 800323c:	4b35      	ldr	r3, [pc, #212]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	429a      	cmp	r2, r3
 8003244:	d210      	bcs.n	8003268 <HAL_TIM_PeriodElapsedCallback+0x128>
 8003246:	4b33      	ldr	r3, [pc, #204]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	4b33      	ldr	r3, [pc, #204]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8003258:	429a      	cmp	r2, r3
 800325a:	da05      	bge.n	8003268 <HAL_TIM_PeriodElapsedCallback+0x128>
        Controller_SetHeater(i, true);
 800325c:	7afb      	ldrb	r3, [r7, #11]
 800325e:	2101      	movs	r1, #1
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fe29 	bl	8002eb8 <Controller_SetHeater>
 8003266:	e004      	b.n	8003272 <HAL_TIM_PeriodElapsedCallback+0x132>
  }else{
        Controller_SetHeater(i, false);
 8003268:	7afb      	ldrb	r3, [r7, #11]
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fe23 	bl	8002eb8 <Controller_SetHeater>
  }//Dictates If heater is on or off

  //Removed ADC stuff

  if (htim == &htim4)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d13c      	bne.n	80032f4 <HAL_TIM_PeriodElapsedCallback+0x1b4>
  {
    ClockTick = (ClockTick + 1) % 100;
 800327a:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	3301      	adds	r3, #1
 8003282:	4a25      	ldr	r2, [pc, #148]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003284:	fb82 1203 	smull	r1, r2, r2, r3
 8003288:	1151      	asrs	r1, r2, #5
 800328a:	17da      	asrs	r2, r3, #31
 800328c:	1a8a      	subs	r2, r1, r2
 800328e:	2164      	movs	r1, #100	; 0x64
 8003290:	fb01 f202 	mul.w	r2, r1, r2
 8003294:	1a9a      	subs	r2, r3, r2
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	4b22      	ldr	r3, [pc, #136]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800329a:	701a      	strb	r2, [r3, #0]
    // this should be after the ClockTick increment
    if (ClockTick == 0)
 800329c:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_TIM_PeriodElapsedCallback+0x174>
      ElapsedSeconds++;
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80032b2:	801a      	strh	r2, [r3, #0]

    if (++Ticks_TMP117 >= 13)
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80032c0:	4619      	mov	r1, r3
 80032c2:	7011      	strb	r1, [r2, #0]
 80032c4:	2b0c      	cmp	r3, #12
 80032c6:	d905      	bls.n	80032d4 <HAL_TIM_PeriodElapsedCallback+0x194>
    {
      Ticks_TMP117 = 0;
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
      DoSampleTMP117 = true;
 80032ce:	4b18      	ldr	r3, [pc, #96]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
    }

    if (++Ticks_CalculatePWM >= 100)
 80032d4:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	4a15      	ldr	r2, [pc, #84]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80032e0:	4619      	mov	r1, r3
 80032e2:	7011      	strb	r1, [r2, #0]
 80032e4:	2b63      	cmp	r3, #99	; 0x63
 80032e6:	d905      	bls.n	80032f4 <HAL_TIM_PeriodElapsedCallback+0x1b4>
    {
      Ticks_CalculatePWM = 0;
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
      DoCalculatePWM = true;
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
    }

  }
}
 80032f4:	bf00      	nop
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	200005ac 	.word	0x200005ac
 8003300:	20000690 	.word	0x20000690
 8003304:	20000cf0 	.word	0x20000cf0
 8003308:	2000063c 	.word	0x2000063c
 800330c:	2000000e 	.word	0x2000000e
 8003310:	20000688 	.word	0x20000688
 8003314:	20000686 	.word	0x20000686
 8003318:	51eb851f 	.word	0x51eb851f
 800331c:	20000010 	.word	0x20000010
 8003320:	200005f4 	.word	0x200005f4
 8003324:	2000068c 	.word	0x2000068c
 8003328:	2000068e 	.word	0x2000068e
 800332c:	2000068a 	.word	0x2000068a
 8003330:	20000684 	.word	0x20000684
 8003334:	2000068b 	.word	0x2000068b
 8003338:	20000685 	.word	0x20000685
 800333c:	00000000 	.word	0x00000000

08003340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b090      	sub	sp, #64	; 0x40
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003346:	f000 ffcb 	bl	80042e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  
  StringFIFOInit(&USBFIFO);
 800334a:	4869      	ldr	r0, [pc, #420]	; (80034f0 <main+0x1b0>)
 800334c:	f000 fd94 	bl	8003e78 <StringFIFOInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003350:	f000 f8ea 	bl	8003528 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  InitDWTTimer(); // we need this for delay_us
 8003354:	f7ff fe54 	bl	8003000 <InitDWTTimer>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003358:	f000 fa96 	bl	8003888 <MX_GPIO_Init>
  MX_SPI4_Init();
 800335c:	f000 f98e 	bl	800367c <MX_SPI4_Init>
  MX_I2C1_Init();
 8003360:	f000 f94c 	bl	80035fc <MX_I2C1_Init>
  MX_TIM2_Init();
 8003364:	f000 f9c0 	bl	80036e8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8003368:	f00a fd2c 	bl	800ddc4 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800336c:	f000 fa08 	bl	8003780 <MX_TIM4_Init>
  MX_TIM6_Init();
 8003370:	f000 fa54 	bl	800381c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  TCB_InitStruct(&TCB, &hi2c1, &hspi4);
 8003374:	4a5f      	ldr	r2, [pc, #380]	; (80034f4 <main+0x1b4>)
 8003376:	4960      	ldr	r1, [pc, #384]	; (80034f8 <main+0x1b8>)
 8003378:	4860      	ldr	r0, [pc, #384]	; (80034fc <main+0x1bc>)
 800337a:	f7fe fbef 	bl	8001b5c <TCB_InitStruct>
  HAL_Delay(500);
 800337e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003382:	f001 f81f 	bl	80043c4 <HAL_Delay>
  printf("-- REBOOT --\n");
 8003386:	485e      	ldr	r0, [pc, #376]	; (8003500 <main+0x1c0>)
 8003388:	f00c f99c 	bl	800f6c4 <puts>

// if you rearrange the PID.CONFIG struct, you should force rewriting defaults
  // over the EEPROM on next startup. This will *probably* be caught by checking
  // the address of the last controller rather than the first.
  //Welcome to OOP hell
  if (!(TCB.Controller.Sensor.Address & 0b1001000)) // if the stored address is not valid, we probably have invalid data.
 800338c:	4b5b      	ldr	r3, [pc, #364]	; (80034fc <main+0x1bc>)
 800338e:	7a1b      	ldrb	r3, [r3, #8]
 8003390:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <main+0x5e>
  {
    printf("The configuration is invalid. Rewriting defaults.");
 8003398:	485a      	ldr	r0, [pc, #360]	; (8003504 <main+0x1c4>)
 800339a:	f00c f90d 	bl	800f5b8 <iprintf>
  }

  TMP117_Configure(&TCB.Controller.Sensor);
 800339e:	485a      	ldr	r0, [pc, #360]	; (8003508 <main+0x1c8>)
 80033a0:	f7fe faaa 	bl	80018f8 <TMP117_Configure>
  HAL_TIM_Base_Start_IT(&htim2); //DAC Timer
 80033a4:	4859      	ldr	r0, [pc, #356]	; (800350c <main+0x1cc>)
 80033a6:	f006 fcc5 	bl	8009d34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6); // Heater Timer
 80033aa:	4859      	ldr	r0, [pc, #356]	; (8003510 <main+0x1d0>)
 80033ac:	f006 fcc2 	bl	8009d34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); // Main Timer
 80033b0:	4858      	ldr	r0, [pc, #352]	; (8003514 <main+0x1d4>)
 80033b2:	f006 fcbf 	bl	8009d34 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float voltage = 0;
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	60bb      	str	r3, [r7, #8]
  float voltage2 = 0;
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]

    /* USER CODE BEGIN 3 */

	  
    //Cycle through the DAC channels and set them to the opposite state and increase and decrease the voltage
    for (voltage = 0; voltage < TCB.DAC8718.max_peak2peak; voltage += 0.1){
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	e044      	b.n	8003454 <main+0x114>
		  for(uint8_t j = 0; j < 3; j++){
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80033d0:	e00c      	b.n	80033ec <main+0xac>
			  Set_Voltage_Peak_to_Peak(&TCB.DAC8718, j, &voltage);
 80033d2:	f107 0208 	add.w	r2, r7, #8
 80033d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033da:	4619      	mov	r1, r3
 80033dc:	484e      	ldr	r0, [pc, #312]	; (8003518 <main+0x1d8>)
 80033de:	f7fd fff9 	bl	80013d4 <Set_Voltage_Peak_to_Peak>
		  for(uint8_t j = 0; j < 3; j++){
 80033e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033e6:	3301      	adds	r3, #1
 80033e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80033ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d9ee      	bls.n	80033d2 <main+0x92>
		  }
		  voltage2 = TCB.DAC8718.max_peak2peak - voltage;
 80033f4:	4b41      	ldr	r3, [pc, #260]	; (80034fc <main+0x1bc>)
 80033f6:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 80033fa:	ed93 7a00 	vldr	s14, [r3]
 80033fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003406:	edc7 7a01 	vstr	s15, [r7, #4]
		  for(uint8_t j = 3; j < 6; j++){
 800340a:	2303      	movs	r3, #3
 800340c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003410:	e00b      	b.n	800342a <main+0xea>
			  Set_Voltage_Peak_to_Peak(&TCB.DAC8718, j, &voltage2);
 8003412:	1d3a      	adds	r2, r7, #4
 8003414:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003418:	4619      	mov	r1, r3
 800341a:	483f      	ldr	r0, [pc, #252]	; (8003518 <main+0x1d8>)
 800341c:	f7fd ffda 	bl	80013d4 <Set_Voltage_Peak_to_Peak>
		  for(uint8_t j = 3; j < 6; j++){
 8003420:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003424:	3301      	adds	r3, #1
 8003426:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800342a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800342e:	2b05      	cmp	r3, #5
 8003430:	d9ef      	bls.n	8003412 <main+0xd2>
    for (voltage = 0; voltage < TCB.DAC8718.max_peak2peak; voltage += 0.1){
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd f8a7 	bl	8000588 <__aeabi_f2d>
 800343a:	a32b      	add	r3, pc, #172	; (adr r3, 80034e8 <main+0x1a8>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	f7fc ff44 	bl	80002cc <__adddf3>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4610      	mov	r0, r2
 800344a:	4619      	mov	r1, r3
 800344c:	f7fd fbec 	bl	8000c28 <__aeabi_d2f>
 8003450:	4603      	mov	r3, r0
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	4b29      	ldr	r3, [pc, #164]	; (80034fc <main+0x1bc>)
 8003456:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 800345a:	ed93 7a00 	vldr	s14, [r3]
 800345e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346a:	dcae      	bgt.n	80033ca <main+0x8a>



    //-------- Damons Code ----------------------
    // we keep a global copy of this for the timer interrupt
    HeaterFrequency = TCB.Controller.PID.Config.Frequency;
 800346c:	4b23      	ldr	r3, [pc, #140]	; (80034fc <main+0x1bc>)
 800346e:	f8b3 265e 	ldrh.w	r2, [r3, #1630]	; 0x65e
 8003472:	4b2a      	ldr	r3, [pc, #168]	; (800351c <main+0x1dc>)
 8003474:	801a      	strh	r2, [r3, #0]

    if (TCB.Controller.Sensor.Errors > 10)
 8003476:	4b21      	ldr	r3, [pc, #132]	; (80034fc <main+0x1bc>)
 8003478:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 800347c:	2b0a      	cmp	r3, #10
 800347e:	d901      	bls.n	8003484 <main+0x144>
      MX_I2C1_Init();
 8003480:	f000 f8bc 	bl	80035fc <MX_I2C1_Init>

    if (DoSampleTMP117)
 8003484:	4b26      	ldr	r3, [pc, #152]	; (8003520 <main+0x1e0>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00e      	beq.n	80034ac <main+0x16c>
    {
      DoSampleTMP117 = false;
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <main+0x1e0>)
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
      if (TCB.Controller.Sensor.Configured){
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <main+0x1bc>)
 8003496:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <main+0x166>
          TMP117_GetTemperature(&TCB.Controller.Sensor);
 800349e:	481a      	ldr	r0, [pc, #104]	; (8003508 <main+0x1c8>)
 80034a0:	f7fe fa70 	bl	8001984 <TMP117_GetTemperature>
 80034a4:	e002      	b.n	80034ac <main+0x16c>
      }else{
          TMP117_Configure(&TCB.Controller.Sensor);
 80034a6:	4818      	ldr	r0, [pc, #96]	; (8003508 <main+0x1c8>)
 80034a8:	f7fe fa26 	bl	80018f8 <TMP117_Configure>
      }
    }


    if (DoCalculatePWM)
 80034ac:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <main+0x1e4>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <main+0x182>
    {
      DoCalculatePWM = false;
 80034b6:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <main+0x1e4>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
      Controller_Step(&TCB.Controller);
 80034bc:	480f      	ldr	r0, [pc, #60]	; (80034fc <main+0x1bc>)
 80034be:	f7ff fd31 	bl	8002f24 <Controller_Step>
    }

    if (StringFIFORemove(&USBFIFO, buffer) == 0)
 80034c2:	f107 030c 	add.w	r3, r7, #12
 80034c6:	4619      	mov	r1, r3
 80034c8:	4809      	ldr	r0, [pc, #36]	; (80034f0 <main+0x1b0>)
 80034ca:	f000 fd69 	bl	8003fa0 <StringFIFORemove>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f47f af76 	bne.w	80033c2 <main+0x82>
    {
      ProcessUserInput(&TCB.Controller, buffer);
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	4619      	mov	r1, r3
 80034dc:	4807      	ldr	r0, [pc, #28]	; (80034fc <main+0x1bc>)
 80034de:	f7fe fb85 	bl	8001bec <ProcessUserInput>
    for (voltage = 0; voltage < TCB.DAC8718.max_peak2peak; voltage += 0.1){
 80034e2:	e76e      	b.n	80033c2 <main+0x82>
 80034e4:	f3af 8000 	nop.w
 80034e8:	9999999a 	.word	0x9999999a
 80034ec:	3fb99999 	.word	0x3fb99999
 80034f0:	20001c60 	.word	0x20001c60
 80034f4:	20000554 	.word	0x20000554
 80034f8:	20000500 	.word	0x20000500
 80034fc:	20000690 	.word	0x20000690
 8003500:	08014764 	.word	0x08014764
 8003504:	08014774 	.word	0x08014774
 8003508:	20000698 	.word	0x20000698
 800350c:	200005ac 	.word	0x200005ac
 8003510:	2000063c 	.word	0x2000063c
 8003514:	200005f4 	.word	0x200005f4
 8003518:	20000cf0 	.word	0x20000cf0
 800351c:	2000000e 	.word	0x2000000e
 8003520:	20000684 	.word	0x20000684
 8003524:	20000685 	.word	0x20000685

08003528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b094      	sub	sp, #80	; 0x50
 800352c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800352e:	f107 0320 	add.w	r3, r7, #32
 8003532:	2230      	movs	r2, #48	; 0x30
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f00b f9bc 	bl	800e8b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800353c:	f107 030c 	add.w	r3, r7, #12
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	2300      	movs	r3, #0
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <SystemClock_Config+0xcc>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	4a27      	ldr	r2, [pc, #156]	; (80035f4 <SystemClock_Config+0xcc>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355a:	6413      	str	r3, [r2, #64]	; 0x40
 800355c:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <SystemClock_Config+0xcc>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003568:	2300      	movs	r3, #0
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <SystemClock_Config+0xd0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <SystemClock_Config+0xd0>)
 8003572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <SystemClock_Config+0xd0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003584:	2301      	movs	r3, #1
 8003586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800358e:	2302      	movs	r3, #2
 8003590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003598:	2304      	movs	r3, #4
 800359a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800359c:	23a8      	movs	r3, #168	; 0xa8
 800359e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035a0:	2302      	movs	r3, #2
 80035a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80035a4:	2307      	movs	r3, #7
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a8:	f107 0320 	add.w	r3, r7, #32
 80035ac:	4618      	mov	r0, r3
 80035ae:	f005 f99d 	bl	80088ec <HAL_RCC_OscConfig>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80035b8:	f000 fab6 	bl	8003b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035bc:	230f      	movs	r3, #15
 80035be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035c0:	2302      	movs	r3, #2
 80035c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80035ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	2105      	movs	r1, #5
 80035da:	4618      	mov	r0, r3
 80035dc:	f005 fbfe 	bl	8008ddc <HAL_RCC_ClockConfig>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80035e6:	f000 fa9f 	bl	8003b28 <Error_Handler>
  }
}
 80035ea:	bf00      	nop
 80035ec:	3750      	adds	r7, #80	; 0x50
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40007000 	.word	0x40007000

080035fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <MX_I2C1_Init+0x74>)
 8003602:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <MX_I2C1_Init+0x78>)
 8003604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <MX_I2C1_Init+0x74>)
 8003608:	4a1b      	ldr	r2, [pc, #108]	; (8003678 <MX_I2C1_Init+0x7c>)
 800360a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800360c:	4b18      	ldr	r3, [pc, #96]	; (8003670 <MX_I2C1_Init+0x74>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003612:	4b17      	ldr	r3, [pc, #92]	; (8003670 <MX_I2C1_Init+0x74>)
 8003614:	2200      	movs	r2, #0
 8003616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003618:	4b15      	ldr	r3, [pc, #84]	; (8003670 <MX_I2C1_Init+0x74>)
 800361a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800361e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003620:	4b13      	ldr	r3, [pc, #76]	; (8003670 <MX_I2C1_Init+0x74>)
 8003622:	2200      	movs	r2, #0
 8003624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <MX_I2C1_Init+0x74>)
 8003628:	2200      	movs	r2, #0
 800362a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800362c:	4b10      	ldr	r3, [pc, #64]	; (8003670 <MX_I2C1_Init+0x74>)
 800362e:	2200      	movs	r2, #0
 8003630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003632:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <MX_I2C1_Init+0x74>)
 8003634:	2200      	movs	r2, #0
 8003636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003638:	480d      	ldr	r0, [pc, #52]	; (8003670 <MX_I2C1_Init+0x74>)
 800363a:	f001 f9ef 	bl	8004a1c <HAL_I2C_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003644:	f000 fa70 	bl	8003b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003648:	2100      	movs	r1, #0
 800364a:	4809      	ldr	r0, [pc, #36]	; (8003670 <MX_I2C1_Init+0x74>)
 800364c:	f003 fe56 	bl	80072fc <HAL_I2CEx_ConfigAnalogFilter>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003656:	f000 fa67 	bl	8003b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800365a:	2100      	movs	r1, #0
 800365c:	4804      	ldr	r0, [pc, #16]	; (8003670 <MX_I2C1_Init+0x74>)
 800365e:	f003 fe89 	bl	8007374 <HAL_I2CEx_ConfigDigitalFilter>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003668:	f000 fa5e 	bl	8003b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800366c:	bf00      	nop
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20000500 	.word	0x20000500
 8003674:	40005400 	.word	0x40005400
 8003678:	000186a0 	.word	0x000186a0

0800367c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <MX_SPI4_Init+0x64>)
 8003682:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <MX_SPI4_Init+0x68>)
 8003684:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <MX_SPI4_Init+0x64>)
 8003688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800368c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800368e:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <MX_SPI4_Init+0x64>)
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003694:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <MX_SPI4_Init+0x64>)
 8003696:	2200      	movs	r2, #0
 8003698:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800369a:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <MX_SPI4_Init+0x64>)
 800369c:	2200      	movs	r2, #0
 800369e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80036a0:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <MX_SPI4_Init+0x64>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80036a6:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <MX_SPI4_Init+0x64>)
 80036a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ac:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <MX_SPI4_Init+0x64>)
 80036b0:	2220      	movs	r2, #32
 80036b2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <MX_SPI4_Init+0x64>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <MX_SPI4_Init+0x64>)
 80036bc:	2200      	movs	r2, #0
 80036be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <MX_SPI4_Init+0x64>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <MX_SPI4_Init+0x64>)
 80036c8:	220a      	movs	r2, #10
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80036cc:	4804      	ldr	r0, [pc, #16]	; (80036e0 <MX_SPI4_Init+0x64>)
 80036ce:	f005 fd91 	bl	80091f4 <HAL_SPI_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80036d8:	f000 fa26 	bl	8003b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20000554 	.word	0x20000554
 80036e4:	40013400 	.word	0x40013400

080036e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036fc:	463b      	mov	r3, r7
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <MX_TIM2_Init+0x94>)
 8003706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800370a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420;
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <MX_TIM2_Init+0x94>)
 800370e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8003712:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <MX_TIM2_Init+0x94>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <MX_TIM2_Init+0x94>)
 800371c:	2232      	movs	r2, #50	; 0x32
 800371e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003720:	4b16      	ldr	r3, [pc, #88]	; (800377c <MX_TIM2_Init+0x94>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <MX_TIM2_Init+0x94>)
 8003728:	2280      	movs	r2, #128	; 0x80
 800372a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800372c:	4813      	ldr	r0, [pc, #76]	; (800377c <MX_TIM2_Init+0x94>)
 800372e:	f006 fab1 	bl	8009c94 <HAL_TIM_Base_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003738:	f000 f9f6 	bl	8003b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800373c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003740:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003742:	f107 0308 	add.w	r3, r7, #8
 8003746:	4619      	mov	r1, r3
 8003748:	480c      	ldr	r0, [pc, #48]	; (800377c <MX_TIM2_Init+0x94>)
 800374a:	f006 fc6b 	bl	800a024 <HAL_TIM_ConfigClockSource>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003754:	f000 f9e8 	bl	8003b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003758:	2300      	movs	r3, #0
 800375a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800375c:	2300      	movs	r3, #0
 800375e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003760:	463b      	mov	r3, r7
 8003762:	4619      	mov	r1, r3
 8003764:	4805      	ldr	r0, [pc, #20]	; (800377c <MX_TIM2_Init+0x94>)
 8003766:	f006 fe87 	bl	800a478 <HAL_TIMEx_MasterConfigSynchronization>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003770:	f000 f9da 	bl	8003b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003774:	bf00      	nop
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	200005ac 	.word	0x200005ac

08003780 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003786:	f107 0308 	add.w	r3, r7, #8
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003794:	463b      	mov	r3, r7
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <MX_TIM4_Init+0x94>)
 800379e:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <MX_TIM4_Init+0x98>)
 80037a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4200;
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <MX_TIM4_Init+0x94>)
 80037a4:	f241 0268 	movw	r2, #4200	; 0x1068
 80037a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037aa:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <MX_TIM4_Init+0x94>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80037b0:	4b18      	ldr	r3, [pc, #96]	; (8003814 <MX_TIM4_Init+0x94>)
 80037b2:	2264      	movs	r2, #100	; 0x64
 80037b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <MX_TIM4_Init+0x94>)
 80037b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <MX_TIM4_Init+0x94>)
 80037c0:	2280      	movs	r2, #128	; 0x80
 80037c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80037c4:	4813      	ldr	r0, [pc, #76]	; (8003814 <MX_TIM4_Init+0x94>)
 80037c6:	f006 fa65 	bl	8009c94 <HAL_TIM_Base_Init>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80037d0:	f000 f9aa 	bl	8003b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80037da:	f107 0308 	add.w	r3, r7, #8
 80037de:	4619      	mov	r1, r3
 80037e0:	480c      	ldr	r0, [pc, #48]	; (8003814 <MX_TIM4_Init+0x94>)
 80037e2:	f006 fc1f 	bl	800a024 <HAL_TIM_ConfigClockSource>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80037ec:	f000 f99c 	bl	8003b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037f0:	2300      	movs	r3, #0
 80037f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037f8:	463b      	mov	r3, r7
 80037fa:	4619      	mov	r1, r3
 80037fc:	4805      	ldr	r0, [pc, #20]	; (8003814 <MX_TIM4_Init+0x94>)
 80037fe:	f006 fe3b 	bl	800a478 <HAL_TIMEx_MasterConfigSynchronization>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003808:	f000 f98e 	bl	8003b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	200005f4 	.word	0x200005f4
 8003818:	40000800 	.word	0x40000800

0800381c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003822:	463b      	mov	r3, r7
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800382a:	4b15      	ldr	r3, [pc, #84]	; (8003880 <MX_TIM6_Init+0x64>)
 800382c:	4a15      	ldr	r2, [pc, #84]	; (8003884 <MX_TIM6_Init+0x68>)
 800382e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1680;
 8003830:	4b13      	ldr	r3, [pc, #76]	; (8003880 <MX_TIM6_Init+0x64>)
 8003832:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8003836:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <MX_TIM6_Init+0x64>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <MX_TIM6_Init+0x64>)
 8003840:	2264      	movs	r2, #100	; 0x64
 8003842:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003844:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <MX_TIM6_Init+0x64>)
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800384a:	480d      	ldr	r0, [pc, #52]	; (8003880 <MX_TIM6_Init+0x64>)
 800384c:	f006 fa22 	bl	8009c94 <HAL_TIM_Base_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003856:	f000 f967 	bl	8003b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800385e:	2300      	movs	r3, #0
 8003860:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003862:	463b      	mov	r3, r7
 8003864:	4619      	mov	r1, r3
 8003866:	4806      	ldr	r0, [pc, #24]	; (8003880 <MX_TIM6_Init+0x64>)
 8003868:	f006 fe06 	bl	800a478 <HAL_TIMEx_MasterConfigSynchronization>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003872:	f000 f959 	bl	8003b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	2000063c 	.word	0x2000063c
 8003884:	40001000 	.word	0x40001000

08003888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08c      	sub	sp, #48	; 0x30
 800388c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388e:	f107 031c 	add.w	r3, r7, #28
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	4b83      	ldr	r3, [pc, #524]	; (8003ab0 <MX_GPIO_Init+0x228>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	4a82      	ldr	r2, [pc, #520]	; (8003ab0 <MX_GPIO_Init+0x228>)
 80038a8:	f043 0310 	orr.w	r3, r3, #16
 80038ac:	6313      	str	r3, [r2, #48]	; 0x30
 80038ae:	4b80      	ldr	r3, [pc, #512]	; (8003ab0 <MX_GPIO_Init+0x228>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	4b7c      	ldr	r3, [pc, #496]	; (8003ab0 <MX_GPIO_Init+0x228>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a7b      	ldr	r2, [pc, #492]	; (8003ab0 <MX_GPIO_Init+0x228>)
 80038c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b79      	ldr	r3, [pc, #484]	; (8003ab0 <MX_GPIO_Init+0x228>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	4b75      	ldr	r3, [pc, #468]	; (8003ab0 <MX_GPIO_Init+0x228>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a74      	ldr	r2, [pc, #464]	; (8003ab0 <MX_GPIO_Init+0x228>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	4b72      	ldr	r3, [pc, #456]	; (8003ab0 <MX_GPIO_Init+0x228>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	4b6e      	ldr	r3, [pc, #440]	; (8003ab0 <MX_GPIO_Init+0x228>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4a6d      	ldr	r2, [pc, #436]	; (8003ab0 <MX_GPIO_Init+0x228>)
 80038fc:	f043 0304 	orr.w	r3, r3, #4
 8003900:	6313      	str	r3, [r2, #48]	; 0x30
 8003902:	4b6b      	ldr	r3, [pc, #428]	; (8003ab0 <MX_GPIO_Init+0x228>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	4b67      	ldr	r3, [pc, #412]	; (8003ab0 <MX_GPIO_Init+0x228>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4a66      	ldr	r2, [pc, #408]	; (8003ab0 <MX_GPIO_Init+0x228>)
 8003918:	f043 0308 	orr.w	r3, r3, #8
 800391c:	6313      	str	r3, [r2, #48]	; 0x30
 800391e:	4b64      	ldr	r3, [pc, #400]	; (8003ab0 <MX_GPIO_Init+0x228>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	4b60      	ldr	r3, [pc, #384]	; (8003ab0 <MX_GPIO_Init+0x228>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4a5f      	ldr	r2, [pc, #380]	; (8003ab0 <MX_GPIO_Init+0x228>)
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	6313      	str	r3, [r2, #48]	; 0x30
 800393a:	4b5d      	ldr	r3, [pc, #372]	; (8003ab0 <MX_GPIO_Init+0x228>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|nWakeUp_Pin, GPIO_PIN_RESET);
 8003946:	2200      	movs	r2, #0
 8003948:	f44f 7184 	mov.w	r1, #264	; 0x108
 800394c:	4859      	ldr	r0, [pc, #356]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 800394e:	f001 f84b 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, GPIO_PIN_RESET);
 8003952:	2200      	movs	r2, #0
 8003954:	2120      	movs	r1, #32
 8003956:	4858      	ldr	r0, [pc, #352]	; (8003ab8 <MX_GPIO_Init+0x230>)
 8003958:	f001 f846 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, nRst_Pin|nClr_Pin|nCS_Pin, GPIO_PIN_SET);
 800395c:	2201      	movs	r2, #1
 800395e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8003962:	4854      	ldr	r0, [pc, #336]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003964:	f001 f840 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLDAC_GPIO_Port, nLDAC_Pin, GPIO_PIN_SET);
 8003968:	2201      	movs	r2, #1
 800396a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800396e:	4853      	ldr	r0, [pc, #332]	; (8003abc <MX_GPIO_Init+0x234>)
 8003970:	f001 f83a 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8003974:	2200      	movs	r2, #0
 8003976:	2101      	movs	r1, #1
 8003978:	4850      	ldr	r0, [pc, #320]	; (8003abc <MX_GPIO_Init+0x234>)
 800397a:	f001 f835 	bl	80049e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800397e:	2308      	movs	r3, #8
 8003980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003982:	2301      	movs	r3, #1
 8003984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003986:	2300      	movs	r3, #0
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398a:	2300      	movs	r3, #0
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800398e:	f107 031c 	add.w	r3, r7, #28
 8003992:	4619      	mov	r1, r3
 8003994:	4847      	ldr	r0, [pc, #284]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003996:	f000 fe7b 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800399a:	2303      	movs	r3, #3
 800399c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399e:	2302      	movs	r3, #2
 80039a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a6:	2303      	movs	r3, #3
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80039aa:	2308      	movs	r3, #8
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ae:	f107 031c 	add.w	r3, r7, #28
 80039b2:	4619      	mov	r1, r3
 80039b4:	4842      	ldr	r0, [pc, #264]	; (8003ac0 <MX_GPIO_Init+0x238>)
 80039b6:	f000 fe6b 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039ba:	23f0      	movs	r3, #240	; 0xf0
 80039bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039be:	2302      	movs	r3, #2
 80039c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c6:	2303      	movs	r3, #3
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039ca:	2305      	movs	r3, #5
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ce:	f107 031c 	add.w	r3, r7, #28
 80039d2:	4619      	mov	r1, r3
 80039d4:	483a      	ldr	r0, [pc, #232]	; (8003ac0 <MX_GPIO_Init+0x238>)
 80039d6:	f000 fe5b 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80039da:	2310      	movs	r3, #16
 80039dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039de:	2303      	movs	r3, #3
 80039e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e6:	f107 031c 	add.w	r3, r7, #28
 80039ea:	4619      	mov	r1, r3
 80039ec:	4832      	ldr	r0, [pc, #200]	; (8003ab8 <MX_GPIO_Init+0x230>)
 80039ee:	f000 fe4f 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Pin */
  GPIO_InitStruct.Pin = Heater_Pin;
 80039f2:	2320      	movs	r3, #32
 80039f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f6:	2301      	movs	r3, #1
 80039f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fe:	2300      	movs	r3, #0
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Heater_GPIO_Port, &GPIO_InitStruct);
 8003a02:	f107 031c 	add.w	r3, r7, #28
 8003a06:	4619      	mov	r1, r3
 8003a08:	482b      	ldr	r0, [pc, #172]	; (8003ab8 <MX_GPIO_Init+0x230>)
 8003a0a:	f000 fe41 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : nWakeUp_Pin nRst_Pin nClr_Pin nCS_Pin */
  GPIO_InitStruct.Pin = nWakeUp_Pin|nRst_Pin|nClr_Pin|nCS_Pin;
 8003a0e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a14:	2301      	movs	r3, #1
 8003a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a20:	f107 031c 	add.w	r3, r7, #28
 8003a24:	4619      	mov	r1, r3
 8003a26:	4823      	ldr	r0, [pc, #140]	; (8003ab4 <MX_GPIO_Init+0x22c>)
 8003a28:	f000 fe32 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : nLDAC_Pin */
  GPIO_InitStruct.Pin = nLDAC_Pin;
 8003a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a32:	2301      	movs	r3, #1
 8003a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nLDAC_GPIO_Port, &GPIO_InitStruct);
 8003a3e:	f107 031c 	add.w	r3, r7, #28
 8003a42:	4619      	mov	r1, r3
 8003a44:	481d      	ldr	r0, [pc, #116]	; (8003abc <MX_GPIO_Init+0x234>)
 8003a46:	f000 fe23 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a4a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003a4e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a50:	2302      	movs	r3, #2
 8003a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a60:	f107 031c 	add.w	r3, r7, #28
 8003a64:	4619      	mov	r1, r3
 8003a66:	4814      	ldr	r0, [pc, #80]	; (8003ab8 <MX_GPIO_Init+0x230>)
 8003a68:	f000 fe12 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a70:	2301      	movs	r3, #1
 8003a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a7c:	f107 031c 	add.w	r3, r7, #28
 8003a80:	4619      	mov	r1, r3
 8003a82:	480e      	ldr	r0, [pc, #56]	; (8003abc <MX_GPIO_Init+0x234>)
 8003a84:	f000 fe04 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a88:	2304      	movs	r3, #4
 8003a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a94:	2303      	movs	r3, #3
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003a98:	230c      	movs	r3, #12
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4806      	ldr	r0, [pc, #24]	; (8003abc <MX_GPIO_Init+0x234>)
 8003aa4:	f000 fdf4 	bl	8004690 <HAL_GPIO_Init>

}
 8003aa8:	bf00      	nop
 8003aaa:	3730      	adds	r7, #48	; 0x30
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40020800 	.word	0x40020800
 8003abc:	40020c00 	.word	0x40020c00
 8003ac0:	40020000 	.word	0x40020000

08003ac4 <_write>:

/* This allows printf to write to the debugger and USB */
/* USB needs #include "usbd_cdc_if.h" */
/* ITM Stimulus port 0 must be enabled in your trace settings */
int _write(int file, char *ptr, int len)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  int i, res;

  for (i=0;i<20; i++)
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61fb      	str	r3, [r7, #28]
 8003ad4:	e00d      	b.n	8003af2 <_write+0x2e>
  {
    res = CDC_Transmit_FS((uint8_t*) ptr, len);  // USB out
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	4619      	mov	r1, r3
 8003adc:	68b8      	ldr	r0, [r7, #8]
 8003ade:	f00a fa3b 	bl	800df58 <CDC_Transmit_FS>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	617b      	str	r3, [r7, #20]
    if (res == USBD_OK)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d006      	beq.n	8003afa <_write+0x36>
  for (i=0;i<20; i++)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	3301      	adds	r3, #1
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b13      	cmp	r3, #19
 8003af6:	ddee      	ble.n	8003ad6 <_write+0x12>
 8003af8:	e000      	b.n	8003afc <_write+0x38>
      break;
 8003afa:	bf00      	nop
  }

  for (int i = 0; i < len; i++)
 8003afc:	2300      	movs	r3, #0
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	e009      	b.n	8003b16 <_write+0x52>
    ITM_SendChar((*ptr++));              // debugger out
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	60ba      	str	r2, [r7, #8]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff faf0 	bl	80030f0 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	3301      	adds	r3, #1
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	dbf1      	blt.n	8003b02 <_write+0x3e>
  return len;
 8003b1e:	687b      	ldr	r3, [r7, #4]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003b2c:	b672      	cpsid	i
}
 8003b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b30:	e7fe      	b.n	8003b30 <Error_Handler+0x8>
	...

08003b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_MspInit+0x4c>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <HAL_MspInit+0x4c>)
 8003b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b48:	6453      	str	r3, [r2, #68]	; 0x44
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <HAL_MspInit+0x4c>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <HAL_MspInit+0x4c>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <HAL_MspInit+0x4c>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_MspInit+0x4c>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800

08003b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b8c:	f107 0314 	add.w	r3, r7, #20
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a21      	ldr	r2, [pc, #132]	; (8003c28 <HAL_I2C_MspInit+0xa4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d13b      	bne.n	8003c1e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <HAL_I2C_MspInit+0xa8>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4a1f      	ldr	r2, [pc, #124]	; (8003c2c <HAL_I2C_MspInit+0xa8>)
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <HAL_I2C_MspInit+0xa8>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bc2:	23c0      	movs	r3, #192	; 0xc0
 8003bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bc6:	2312      	movs	r3, #18
 8003bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4814      	ldr	r0, [pc, #80]	; (8003c30 <HAL_I2C_MspInit+0xac>)
 8003bde:	f000 fd57 	bl	8004690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_I2C_MspInit+0xa8>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <HAL_I2C_MspInit+0xa8>)
 8003bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <HAL_I2C_MspInit+0xa8>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2100      	movs	r1, #0
 8003c02:	201f      	movs	r0, #31
 8003c04:	f000 fcdd 	bl	80045c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003c08:	201f      	movs	r0, #31
 8003c0a:	f000 fcf6 	bl	80045fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	2020      	movs	r0, #32
 8003c14:	f000 fcd5 	bl	80045c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003c18:	2020      	movs	r0, #32
 8003c1a:	f000 fcee 	bl	80045fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003c1e:	bf00      	nop
 8003c20:	3728      	adds	r7, #40	; 0x28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40005400 	.word	0x40005400
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40020400 	.word	0x40020400

08003c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	f107 0314 	add.w	r3, r7, #20
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_SPI_MspInit+0x94>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d134      	bne.n	8003cc0 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <HAL_SPI_MspInit+0x98>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_SPI_MspInit+0x98>)
 8003c60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c64:	6453      	str	r3, [r2, #68]	; 0x44
 8003c66:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <HAL_SPI_MspInit+0x98>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <HAL_SPI_MspInit+0x98>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <HAL_SPI_MspInit+0x98>)
 8003c7c:	f043 0310 	orr.w	r3, r3, #16
 8003c80:	6313      	str	r3, [r2, #48]	; 0x30
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <HAL_SPI_MspInit+0x98>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003c8e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c94:	2302      	movs	r3, #2
 8003c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003ca0:	2305      	movs	r3, #5
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4809      	ldr	r0, [pc, #36]	; (8003cd0 <HAL_SPI_MspInit+0x9c>)
 8003cac:	f000 fcf0 	bl	8004690 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	2054      	movs	r0, #84	; 0x54
 8003cb6:	f000 fc84 	bl	80045c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8003cba:	2054      	movs	r0, #84	; 0x54
 8003cbc:	f000 fc9d 	bl	80045fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003cc0:	bf00      	nop
 8003cc2:	3728      	adds	r7, #40	; 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40013400 	.word	0x40013400
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	40021000 	.word	0x40021000

08003cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce4:	d116      	bne.n	8003d14 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <HAL_TIM_Base_MspInit+0xb8>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4a27      	ldr	r2, [pc, #156]	; (8003d8c <HAL_TIM_Base_MspInit+0xb8>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf6:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <HAL_TIM_Base_MspInit+0xb8>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d02:	2200      	movs	r2, #0
 8003d04:	2100      	movs	r1, #0
 8003d06:	201c      	movs	r0, #28
 8003d08:	f000 fc5b 	bl	80045c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d0c:	201c      	movs	r0, #28
 8003d0e:	f000 fc74 	bl	80045fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003d12:	e036      	b.n	8003d82 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <HAL_TIM_Base_MspInit+0xbc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d116      	bne.n	8003d4c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <HAL_TIM_Base_MspInit+0xb8>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <HAL_TIM_Base_MspInit+0xb8>)
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2e:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <HAL_TIM_Base_MspInit+0xb8>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	201e      	movs	r0, #30
 8003d40:	f000 fc3f 	bl	80045c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d44:	201e      	movs	r0, #30
 8003d46:	f000 fc58 	bl	80045fa <HAL_NVIC_EnableIRQ>
}
 8003d4a:	e01a      	b.n	8003d82 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a10      	ldr	r2, [pc, #64]	; (8003d94 <HAL_TIM_Base_MspInit+0xc0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d115      	bne.n	8003d82 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <HAL_TIM_Base_MspInit+0xb8>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	4a0b      	ldr	r2, [pc, #44]	; (8003d8c <HAL_TIM_Base_MspInit+0xb8>)
 8003d60:	f043 0310 	orr.w	r3, r3, #16
 8003d64:	6413      	str	r3, [r2, #64]	; 0x40
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_TIM_Base_MspInit+0xb8>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003d72:	2200      	movs	r2, #0
 8003d74:	2100      	movs	r1, #0
 8003d76:	2036      	movs	r0, #54	; 0x36
 8003d78:	f000 fc23 	bl	80045c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d7c:	2036      	movs	r0, #54	; 0x36
 8003d7e:	f000 fc3c 	bl	80045fa <HAL_NVIC_EnableIRQ>
}
 8003d82:	bf00      	nop
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40000800 	.word	0x40000800
 8003d94:	40001000 	.word	0x40001000

08003d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d9c:	e7fe      	b.n	8003d9c <NMI_Handler+0x4>

08003d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003da2:	e7fe      	b.n	8003da2 <HardFault_Handler+0x4>

08003da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003da8:	e7fe      	b.n	8003da8 <MemManage_Handler+0x4>

08003daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dae:	e7fe      	b.n	8003dae <BusFault_Handler+0x4>

08003db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003db4:	e7fe      	b.n	8003db4 <UsageFault_Handler+0x4>

08003db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003de4:	f000 face 	bl	8004384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}

08003dec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003df0:	4802      	ldr	r0, [pc, #8]	; (8003dfc <TIM2_IRQHandler+0x10>)
 8003df2:	f006 f80f 	bl	8009e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200005ac 	.word	0x200005ac

08003e00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e04:	4802      	ldr	r0, [pc, #8]	; (8003e10 <TIM4_IRQHandler+0x10>)
 8003e06:	f006 f805 	bl	8009e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	200005f4 	.word	0x200005f4

08003e14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003e18:	4802      	ldr	r0, [pc, #8]	; (8003e24 <I2C1_EV_IRQHandler+0x10>)
 8003e1a:	f001 fa67 	bl	80052ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000500 	.word	0x20000500

08003e28 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003e2c:	4802      	ldr	r0, [pc, #8]	; (8003e38 <I2C1_ER_IRQHandler+0x10>)
 8003e2e:	f001 fbce 	bl	80055ce <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000500 	.word	0x20000500

08003e3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <TIM6_DAC_IRQHandler+0x10>)
 8003e42:	f005 ffe7 	bl	8009e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	2000063c 	.word	0x2000063c

08003e50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <OTG_FS_IRQHandler+0x10>)
 8003e56:	f003 fc1c 	bl	8007692 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20002a14 	.word	0x20002a14

08003e64 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003e68:	4802      	ldr	r0, [pc, #8]	; (8003e74 <SPI4_IRQHandler+0x10>)
 8003e6a:	f005 fd2b 	bl	80098c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000554 	.word	0x20000554

08003e78 <StringFIFOInit>:

#include <stringfifo.h>
#include "string.h"

void StringFIFOInit(struct sStringFIFO* fifo)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint16_t i;
  fifo->head = 0;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  fifo->tail = 0;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 8003e90:	2300      	movs	r3, #0
 8003e92:	81fb      	strh	r3, [r7, #14]
 8003e94:	e006      	b.n	8003ea4 <StringFIFOInit+0x2c>
    fifo->buffer[i]=0;
 8003e96:	89fb      	ldrh	r3, [r7, #14]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	54d1      	strb	r1, [r2, r3]
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 8003e9e:	89fb      	ldrh	r3, [r7, #14]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	81fb      	strh	r3, [r7, #14]
 8003ea4:	89fb      	ldrh	r3, [r7, #14]
 8003ea6:	2bf9      	cmp	r3, #249	; 0xf9
 8003ea8:	d9f5      	bls.n	8003e96 <StringFIFOInit+0x1e>
}
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <StringFIFOUsed>:

uint16_t StringFIFOUsed(struct sStringFIFO* fifo)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  int16_t used = fifo->tail - fifo->head;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	81fb      	strh	r3, [r7, #14]
  if (used < 0)
 8003ed6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da03      	bge.n	8003ee6 <StringFIFOUsed+0x2e>
    used += FIFO_BUFFER_SIZE;
 8003ede:	89fb      	ldrh	r3, [r7, #14]
 8003ee0:	33fa      	adds	r3, #250	; 0xfa
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	81fb      	strh	r3, [r7, #14]
  return (uint16_t) used;
 8003ee6:	89fb      	ldrh	r3, [r7, #14]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <StringFIFOAvailable>:

uint16_t StringFIFOAvailable(struct sStringFIFO* fifo)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint16_t used = StringFIFOUsed(fifo);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff ffdb 	bl	8003eb8 <StringFIFOUsed>
 8003f02:	4603      	mov	r3, r0
 8003f04:	81fb      	strh	r3, [r7, #14]
  int16_t available = FIFO_BUFFER_SIZE - used - 1; // don't use the last byte, otherwise we won't know that we're full
 8003f06:	89fb      	ldrh	r3, [r7, #14]
 8003f08:	f1c3 03f9 	rsb	r3, r3, #249	; 0xf9
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	81bb      	strh	r3, [r7, #12]
  return available;
 8003f10:	89bb      	ldrh	r3, [r7, #12]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <StringFIFOAdd>:

uint8_t StringFIFOAdd(struct sStringFIFO* fifo, uint8_t* item, size_t size)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  int16_t available = StringFIFOAvailable(fifo);
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f7ff ffe3 	bl	8003ef4 <StringFIFOAvailable>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	82fb      	strh	r3, [r7, #22]

  if (available == 0)
 8003f32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d104      	bne.n	8003f44 <StringFIFOAdd+0x28>
  {
    printf("Fifo full\n");
 8003f3a:	4817      	ldr	r0, [pc, #92]	; (8003f98 <StringFIFOAdd+0x7c>)
 8003f3c:	f00b fbc2 	bl	800f6c4 <puts>
    return 1;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e025      	b.n	8003f90 <StringFIFOAdd+0x74>
  }

  if (size > available)
 8003f44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d902      	bls.n	8003f54 <StringFIFOAdd+0x38>
    size = available;
 8003f4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f52:	607b      	str	r3, [r7, #4]

  memcpy(&fifo->buffer[fifo->tail], item, size);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f00a fc7d 	bl	800e864 <memcpy>
  fifo->tail = (fifo->tail + size) % FIFO_BUFFER_SIZE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8003f70:	461a      	mov	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	441a      	add	r2, r3
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <StringFIFOAdd+0x80>)
 8003f78:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	21fa      	movs	r1, #250	; 0xfa
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  return 0;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	080147a8 	.word	0x080147a8
 8003f9c:	10624dd3 	.word	0x10624dd3

08003fa0 <StringFIFORemove>:

uint8_t StringFIFORemove(struct sStringFIFO* fifo, uint8_t* string)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint16_t i, pos;
  uint16_t used = StringFIFOUsed(fifo);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ff84 	bl	8003eb8 <StringFIFOUsed>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	81fb      	strh	r3, [r7, #14]
  uint16_t h_length, t_length;
  int16_t len;

  if (fifo->head == fifo->tail)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 20fa 	ldrb.w	r2, [r3, #250]	; 0xfa
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d101      	bne.n	8003fc8 <StringFIFORemove+0x28>
  {
	  //printf("Empty fifo.\n");
    return 3;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e09e      	b.n	8004106 <StringFIFORemove+0x166>
  }

  for (i=0; i<used; i++)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	82fb      	strh	r3, [r7, #22]
 8003fcc:	e095      	b.n	80040fa <StringFIFORemove+0x15a>
  {
    pos = (fifo->head + i) % FIFO_BUFFER_SIZE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	8afb      	ldrh	r3, [r7, #22]
 8003fd8:	4413      	add	r3, r2
 8003fda:	4a4d      	ldr	r2, [pc, #308]	; (8004110 <StringFIFORemove+0x170>)
 8003fdc:	fb82 1203 	smull	r1, r2, r2, r3
 8003fe0:	1111      	asrs	r1, r2, #4
 8003fe2:	17da      	asrs	r2, r3, #31
 8003fe4:	1a8a      	subs	r2, r1, r2
 8003fe6:	21fa      	movs	r1, #250	; 0xfa
 8003fe8:	fb01 f202 	mul.w	r2, r1, r2
 8003fec:	1a9a      	subs	r2, r3, r2
 8003fee:	4613      	mov	r3, r2
 8003ff0:	81bb      	strh	r3, [r7, #12]
    if ((fifo->buffer[pos] == '\n') || (fifo->buffer[pos] == '\r'))
 8003ff2:	89bb      	ldrh	r3, [r7, #12]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	5cd3      	ldrb	r3, [r2, r3]
 8003ff8:	2b0a      	cmp	r3, #10
 8003ffa:	d004      	beq.n	8004006 <StringFIFORemove+0x66>
 8003ffc:	89bb      	ldrh	r3, [r7, #12]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	5cd3      	ldrb	r3, [r2, r3]
 8004002:	2b0d      	cmp	r3, #13
 8004004:	d176      	bne.n	80040f4 <StringFIFORemove+0x154>
    {
      if (i == 0)
 8004006:	8afb      	ldrh	r3, [r7, #22]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d116      	bne.n	800403a <StringFIFORemove+0x9a>
      {
        fifo->head = (fifo->head + 1) % FIFO_BUFFER_SIZE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004012:	3301      	adds	r3, #1
 8004014:	4a3e      	ldr	r2, [pc, #248]	; (8004110 <StringFIFORemove+0x170>)
 8004016:	fb82 1203 	smull	r1, r2, r2, r3
 800401a:	1111      	asrs	r1, r2, #4
 800401c:	17da      	asrs	r2, r3, #31
 800401e:	1a8a      	subs	r2, r1, r2
 8004020:	21fa      	movs	r1, #250	; 0xfa
 8004022:	fb01 f202 	mul.w	r2, r1, r2
 8004026:	1a9a      	subs	r2, r3, r2
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        string[0] = 0;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]
//        printf("Zero length string in fifo.\n");
        return 1;
 8004036:	2301      	movs	r3, #1
 8004038:	e065      	b.n	8004106 <StringFIFORemove+0x166>
      }
      len = (pos - fifo->head);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004040:	b29b      	uxth	r3, r3
 8004042:	89ba      	ldrh	r2, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	b29b      	uxth	r3, r3
 8004048:	823b      	strh	r3, [r7, #16]
      if (len < 0)
 800404a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	da03      	bge.n	800405a <StringFIFORemove+0xba>
        len += FIFO_BUFFER_SIZE;
 8004052:	8a3b      	ldrh	r3, [r7, #16]
 8004054:	33fa      	adds	r3, #250	; 0xfa
 8004056:	b29b      	uxth	r3, r3
 8004058:	823b      	strh	r3, [r7, #16]
      if (len > (FIFO_BUFFER_SIZE - fifo->head))
 800405a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004064:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8004068:	429a      	cmp	r2, r3
 800406a:	dd0b      	ble.n	8004084 <StringFIFORemove+0xe4>
      {
        h_length = FIFO_BUFFER_SIZE - fifo->head;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004072:	b29b      	uxth	r3, r3
 8004074:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8004078:	82bb      	strh	r3, [r7, #20]
        t_length = len - h_length;
 800407a:	8a3a      	ldrh	r2, [r7, #16]
 800407c:	8abb      	ldrh	r3, [r7, #20]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	827b      	strh	r3, [r7, #18]
 8004082:	e003      	b.n	800408c <StringFIFORemove+0xec>
      }
      else
      {
        h_length = len;
 8004084:	8a3b      	ldrh	r3, [r7, #16]
 8004086:	82bb      	strh	r3, [r7, #20]
        t_length = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	827b      	strh	r3, [r7, #18]
      }
      memcpy(string, &fifo->buffer[fifo->head], h_length);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4413      	add	r3, r2
 8004098:	8aba      	ldrh	r2, [r7, #20]
 800409a:	4619      	mov	r1, r3
 800409c:	6838      	ldr	r0, [r7, #0]
 800409e:	f00a fbe1 	bl	800e864 <memcpy>
      if (t_length)
 80040a2:	8a7b      	ldrh	r3, [r7, #18]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <StringFIFORemove+0x118>
        memcpy(&string[h_length], fifo->buffer, t_length);
 80040a8:	8abb      	ldrh	r3, [r7, #20]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	8a7a      	ldrh	r2, [r7, #18]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f00a fbd6 	bl	800e864 <memcpy>
      fifo->head = (fifo->head + len + 1) % FIFO_BUFFER_SIZE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80040be:	461a      	mov	r2, r3
 80040c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040c4:	4413      	add	r3, r2
 80040c6:	3301      	adds	r3, #1
 80040c8:	4a11      	ldr	r2, [pc, #68]	; (8004110 <StringFIFORemove+0x170>)
 80040ca:	fb82 1203 	smull	r1, r2, r2, r3
 80040ce:	1111      	asrs	r1, r2, #4
 80040d0:	17da      	asrs	r2, r3, #31
 80040d2:	1a8a      	subs	r2, r1, r2
 80040d4:	21fa      	movs	r1, #250	; 0xfa
 80040d6:	fb01 f202 	mul.w	r2, r1, r2
 80040da:	1a9a      	subs	r2, r3, r2
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      string[len] = 0;
 80040e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	4413      	add	r3, r2
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
      return 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e008      	b.n	8004106 <StringFIFORemove+0x166>
  for (i=0; i<used; i++)
 80040f4:	8afb      	ldrh	r3, [r7, #22]
 80040f6:	3301      	adds	r3, #1
 80040f8:	82fb      	strh	r3, [r7, #22]
 80040fa:	8afa      	ldrh	r2, [r7, #22]
 80040fc:	89fb      	ldrh	r3, [r7, #14]
 80040fe:	429a      	cmp	r2, r3
 8004100:	f4ff af65 	bcc.w	8003fce <StringFIFORemove+0x2e>
    }
  }
//  printf("Fifo has no terminator\n");
  return 2;
 8004104:	2302      	movs	r3, #2
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	10624dd3 	.word	0x10624dd3

08004114 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
	return 1;
 8004118:	2301      	movs	r3, #1
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <_kill>:

int _kill(int pid, int sig)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800412e:	f00a fb6f 	bl	800e810 <__errno>
 8004132:	4603      	mov	r3, r0
 8004134:	2216      	movs	r2, #22
 8004136:	601a      	str	r2, [r3, #0]
	return -1;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <_exit>:

void _exit (int status)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800414c:	f04f 31ff 	mov.w	r1, #4294967295
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff ffe7 	bl	8004124 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004156:	e7fe      	b.n	8004156 <_exit+0x12>

08004158 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e00a      	b.n	8004180 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800416a:	f3af 8000 	nop.w
 800416e:	4601      	mov	r1, r0
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	60ba      	str	r2, [r7, #8]
 8004176:	b2ca      	uxtb	r2, r1
 8004178:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	3301      	adds	r3, #1
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	429a      	cmp	r2, r3
 8004186:	dbf0      	blt.n	800416a <_read+0x12>
	}

return len;
 8004188:	687b      	ldr	r3, [r7, #4]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
	return -1;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041ba:	605a      	str	r2, [r3, #4]
	return 0;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <_isatty>:

int _isatty(int file)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
	return 1;
 80041d2:	2301      	movs	r3, #1
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
	return 0;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004204:	4a14      	ldr	r2, [pc, #80]	; (8004258 <_sbrk+0x5c>)
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <_sbrk+0x60>)
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004210:	4b13      	ldr	r3, [pc, #76]	; (8004260 <_sbrk+0x64>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <_sbrk+0x64>)
 800421a:	4a12      	ldr	r2, [pc, #72]	; (8004264 <_sbrk+0x68>)
 800421c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <_sbrk+0x64>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	429a      	cmp	r2, r3
 800422a:	d207      	bcs.n	800423c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800422c:	f00a faf0 	bl	800e810 <__errno>
 8004230:	4603      	mov	r3, r0
 8004232:	220c      	movs	r2, #12
 8004234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004236:	f04f 33ff 	mov.w	r3, #4294967295
 800423a:	e009      	b.n	8004250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800423c:	4b08      	ldr	r3, [pc, #32]	; (8004260 <_sbrk+0x64>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004242:	4b07      	ldr	r3, [pc, #28]	; (8004260 <_sbrk+0x64>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	4a05      	ldr	r2, [pc, #20]	; (8004260 <_sbrk+0x64>)
 800424c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800424e:	68fb      	ldr	r3, [r7, #12]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20030000 	.word	0x20030000
 800425c:	00000400 	.word	0x00000400
 8004260:	20001d5c 	.word	0x20001d5c
 8004264:	20003150 	.word	0x20003150

08004268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <SystemInit+0x20>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	4a05      	ldr	r2, [pc, #20]	; (8004288 <SystemInit+0x20>)
 8004274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800428c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004290:	480d      	ldr	r0, [pc, #52]	; (80042c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004292:	490e      	ldr	r1, [pc, #56]	; (80042cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004294:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004298:	e002      	b.n	80042a0 <LoopCopyDataInit>

0800429a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800429a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800429c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429e:	3304      	adds	r3, #4

080042a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a4:	d3f9      	bcc.n	800429a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a6:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042a8:	4c0b      	ldr	r4, [pc, #44]	; (80042d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80042aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042ac:	e001      	b.n	80042b2 <LoopFillZerobss>

080042ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b0:	3204      	adds	r2, #4

080042b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b4:	d3fb      	bcc.n	80042ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042b6:	f7ff ffd7 	bl	8004268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ba:	f00a faaf 	bl	800e81c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042be:	f7ff f83f 	bl	8003340 <main>
  bx  lr    
 80042c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80042c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042cc:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 80042d0:	08014cec 	.word	0x08014cec
  ldr r2, =_sbss
 80042d4:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 80042d8:	20003150 	.word	0x20003150

080042dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042dc:	e7fe      	b.n	80042dc <ADC_IRQHandler>
	...

080042e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <HAL_Init+0x40>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <HAL_Init+0x40>)
 80042ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_Init+0x40>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <HAL_Init+0x40>)
 80042f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_Init+0x40>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a07      	ldr	r2, [pc, #28]	; (8004320 <HAL_Init+0x40>)
 8004302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004308:	2003      	movs	r0, #3
 800430a:	f000 f94f 	bl	80045ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800430e:	200f      	movs	r0, #15
 8004310:	f000 f808 	bl	8004324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004314:	f7ff fc0e 	bl	8003b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40023c00 	.word	0x40023c00

08004324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_InitTick+0x54>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_InitTick+0x58>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4619      	mov	r1, r3
 8004336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800433a:	fbb3 f3f1 	udiv	r3, r3, r1
 800433e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f967 	bl	8004616 <HAL_SYSTICK_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e00e      	b.n	8004370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b0f      	cmp	r3, #15
 8004356:	d80a      	bhi.n	800436e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004358:	2200      	movs	r2, #0
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	f04f 30ff 	mov.w	r0, #4294967295
 8004360:	f000 f92f 	bl	80045c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004364:	4a06      	ldr	r2, [pc, #24]	; (8004380 <HAL_InitTick+0x5c>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000014 	.word	0x20000014
 800437c:	2000001c 	.word	0x2000001c
 8004380:	20000018 	.word	0x20000018

08004384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_IncTick+0x20>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_IncTick+0x24>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4413      	add	r3, r2
 8004394:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <HAL_IncTick+0x24>)
 8004396:	6013      	str	r3, [r2, #0]
}
 8004398:	bf00      	nop
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	2000001c 	.word	0x2000001c
 80043a8:	20001d60 	.word	0x20001d60

080043ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return uwTick;
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <HAL_GetTick+0x14>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20001d60 	.word	0x20001d60

080043c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043cc:	f7ff ffee 	bl	80043ac <HAL_GetTick>
 80043d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d005      	beq.n	80043ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043de:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <HAL_Delay+0x44>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043ea:	bf00      	nop
 80043ec:	f7ff ffde 	bl	80043ac <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d8f7      	bhi.n	80043ec <HAL_Delay+0x28>
  {
  }
}
 80043fc:	bf00      	nop
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	2000001c 	.word	0x2000001c

0800440c <__NVIC_SetPriorityGrouping>:
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <__NVIC_SetPriorityGrouping+0x44>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004428:	4013      	ands	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800443c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800443e:	4a04      	ldr	r2, [pc, #16]	; (8004450 <__NVIC_SetPriorityGrouping+0x44>)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	60d3      	str	r3, [r2, #12]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	e000ed00 	.word	0xe000ed00

08004454 <__NVIC_GetPriorityGrouping>:
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004458:	4b04      	ldr	r3, [pc, #16]	; (800446c <__NVIC_GetPriorityGrouping+0x18>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	0a1b      	lsrs	r3, r3, #8
 800445e:	f003 0307 	and.w	r3, r3, #7
}
 8004462:	4618      	mov	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	e000ed00 	.word	0xe000ed00

08004470 <__NVIC_EnableIRQ>:
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	2b00      	cmp	r3, #0
 8004480:	db0b      	blt.n	800449a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	f003 021f 	and.w	r2, r3, #31
 8004488:	4907      	ldr	r1, [pc, #28]	; (80044a8 <__NVIC_EnableIRQ+0x38>)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2001      	movs	r0, #1
 8004492:	fa00 f202 	lsl.w	r2, r0, r2
 8004496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	e000e100 	.word	0xe000e100

080044ac <__NVIC_SetPriority>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	6039      	str	r1, [r7, #0]
 80044b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	db0a      	blt.n	80044d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	490c      	ldr	r1, [pc, #48]	; (80044f8 <__NVIC_SetPriority+0x4c>)
 80044c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ca:	0112      	lsls	r2, r2, #4
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	440b      	add	r3, r1
 80044d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80044d4:	e00a      	b.n	80044ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	4908      	ldr	r1, [pc, #32]	; (80044fc <__NVIC_SetPriority+0x50>)
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	3b04      	subs	r3, #4
 80044e4:	0112      	lsls	r2, r2, #4
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	440b      	add	r3, r1
 80044ea:	761a      	strb	r2, [r3, #24]
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	e000e100 	.word	0xe000e100
 80044fc:	e000ed00 	.word	0xe000ed00

08004500 <NVIC_EncodePriority>:
{
 8004500:	b480      	push	{r7}
 8004502:	b089      	sub	sp, #36	; 0x24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f1c3 0307 	rsb	r3, r3, #7
 800451a:	2b04      	cmp	r3, #4
 800451c:	bf28      	it	cs
 800451e:	2304      	movcs	r3, #4
 8004520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	3304      	adds	r3, #4
 8004526:	2b06      	cmp	r3, #6
 8004528:	d902      	bls.n	8004530 <NVIC_EncodePriority+0x30>
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	3b03      	subs	r3, #3
 800452e:	e000      	b.n	8004532 <NVIC_EncodePriority+0x32>
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004534:	f04f 32ff 	mov.w	r2, #4294967295
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43da      	mvns	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	401a      	ands	r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004548:	f04f 31ff 	mov.w	r1, #4294967295
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	fa01 f303 	lsl.w	r3, r1, r3
 8004552:	43d9      	mvns	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004558:	4313      	orrs	r3, r2
}
 800455a:	4618      	mov	r0, r3
 800455c:	3724      	adds	r7, #36	; 0x24
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <SysTick_Config>:
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3b01      	subs	r3, #1
 8004574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004578:	d301      	bcc.n	800457e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800457a:	2301      	movs	r3, #1
 800457c:	e00f      	b.n	800459e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <SysTick_Config+0x40>)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3b01      	subs	r3, #1
 8004584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004586:	210f      	movs	r1, #15
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	f7ff ff8e 	bl	80044ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <SysTick_Config+0x40>)
 8004592:	2200      	movs	r2, #0
 8004594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004596:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <SysTick_Config+0x40>)
 8004598:	2207      	movs	r2, #7
 800459a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	e000e010 	.word	0xe000e010

080045ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ff29 	bl	800440c <__NVIC_SetPriorityGrouping>
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b086      	sub	sp, #24
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	4603      	mov	r3, r0
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045d4:	f7ff ff3e 	bl	8004454 <__NVIC_GetPriorityGrouping>
 80045d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	6978      	ldr	r0, [r7, #20]
 80045e0:	f7ff ff8e 	bl	8004500 <NVIC_EncodePriority>
 80045e4:	4602      	mov	r2, r0
 80045e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff ff5d 	bl	80044ac <__NVIC_SetPriority>
}
 80045f2:	bf00      	nop
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	4603      	mov	r3, r0
 8004602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff ff31 	bl	8004470 <__NVIC_EnableIRQ>
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff ffa2 	bl	8004568 <SysTick_Config>
 8004624:	4603      	mov	r3, r0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d004      	beq.n	800464c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2280      	movs	r2, #128	; 0x80
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e00c      	b.n	8004666 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2205      	movs	r2, #5
 8004650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004680:	b2db      	uxtb	r3, r3
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	; 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	e177      	b.n	800499c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046ac:	2201      	movs	r2, #1
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4013      	ands	r3, r2
 80046be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	f040 8166 	bne.w	8004996 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d005      	beq.n	80046e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d130      	bne.n	8004744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	2203      	movs	r2, #3
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004718:	2201      	movs	r2, #1
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	f003 0201 	and.w	r2, r3, #1
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b03      	cmp	r3, #3
 800474e:	d017      	beq.n	8004780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d123      	bne.n	80047d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	08da      	lsrs	r2, r3, #3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3208      	adds	r2, #8
 8004794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	220f      	movs	r2, #15
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	08da      	lsrs	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3208      	adds	r2, #8
 80047ce:	69b9      	ldr	r1, [r7, #24]
 80047d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	2203      	movs	r2, #3
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4013      	ands	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 0203 	and.w	r2, r3, #3
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4313      	orrs	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80c0 	beq.w	8004996 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	4b66      	ldr	r3, [pc, #408]	; (80049b4 <HAL_GPIO_Init+0x324>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	4a65      	ldr	r2, [pc, #404]	; (80049b4 <HAL_GPIO_Init+0x324>)
 8004820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004824:	6453      	str	r3, [r2, #68]	; 0x44
 8004826:	4b63      	ldr	r3, [pc, #396]	; (80049b4 <HAL_GPIO_Init+0x324>)
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004832:	4a61      	ldr	r2, [pc, #388]	; (80049b8 <HAL_GPIO_Init+0x328>)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	089b      	lsrs	r3, r3, #2
 8004838:	3302      	adds	r3, #2
 800483a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	220f      	movs	r2, #15
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43db      	mvns	r3, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a58      	ldr	r2, [pc, #352]	; (80049bc <HAL_GPIO_Init+0x32c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d037      	beq.n	80048ce <HAL_GPIO_Init+0x23e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a57      	ldr	r2, [pc, #348]	; (80049c0 <HAL_GPIO_Init+0x330>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d031      	beq.n	80048ca <HAL_GPIO_Init+0x23a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a56      	ldr	r2, [pc, #344]	; (80049c4 <HAL_GPIO_Init+0x334>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d02b      	beq.n	80048c6 <HAL_GPIO_Init+0x236>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a55      	ldr	r2, [pc, #340]	; (80049c8 <HAL_GPIO_Init+0x338>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d025      	beq.n	80048c2 <HAL_GPIO_Init+0x232>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a54      	ldr	r2, [pc, #336]	; (80049cc <HAL_GPIO_Init+0x33c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01f      	beq.n	80048be <HAL_GPIO_Init+0x22e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a53      	ldr	r2, [pc, #332]	; (80049d0 <HAL_GPIO_Init+0x340>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d019      	beq.n	80048ba <HAL_GPIO_Init+0x22a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a52      	ldr	r2, [pc, #328]	; (80049d4 <HAL_GPIO_Init+0x344>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <HAL_GPIO_Init+0x226>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a51      	ldr	r2, [pc, #324]	; (80049d8 <HAL_GPIO_Init+0x348>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00d      	beq.n	80048b2 <HAL_GPIO_Init+0x222>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a50      	ldr	r2, [pc, #320]	; (80049dc <HAL_GPIO_Init+0x34c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d007      	beq.n	80048ae <HAL_GPIO_Init+0x21e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a4f      	ldr	r2, [pc, #316]	; (80049e0 <HAL_GPIO_Init+0x350>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d101      	bne.n	80048aa <HAL_GPIO_Init+0x21a>
 80048a6:	2309      	movs	r3, #9
 80048a8:	e012      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048aa:	230a      	movs	r3, #10
 80048ac:	e010      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048ae:	2308      	movs	r3, #8
 80048b0:	e00e      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048b2:	2307      	movs	r3, #7
 80048b4:	e00c      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048b6:	2306      	movs	r3, #6
 80048b8:	e00a      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048ba:	2305      	movs	r3, #5
 80048bc:	e008      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048be:	2304      	movs	r3, #4
 80048c0:	e006      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048c2:	2303      	movs	r3, #3
 80048c4:	e004      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e002      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048ce:	2300      	movs	r3, #0
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	f002 0203 	and.w	r2, r2, #3
 80048d6:	0092      	lsls	r2, r2, #2
 80048d8:	4093      	lsls	r3, r2
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e0:	4935      	ldr	r1, [pc, #212]	; (80049b8 <HAL_GPIO_Init+0x328>)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	3302      	adds	r3, #2
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ee:	4b3d      	ldr	r3, [pc, #244]	; (80049e4 <HAL_GPIO_Init+0x354>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004912:	4a34      	ldr	r2, [pc, #208]	; (80049e4 <HAL_GPIO_Init+0x354>)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004918:	4b32      	ldr	r3, [pc, #200]	; (80049e4 <HAL_GPIO_Init+0x354>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800493c:	4a29      	ldr	r2, [pc, #164]	; (80049e4 <HAL_GPIO_Init+0x354>)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004942:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <HAL_GPIO_Init+0x354>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	43db      	mvns	r3, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4013      	ands	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004966:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_GPIO_Init+0x354>)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800496c:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <HAL_GPIO_Init+0x354>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	43db      	mvns	r3, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4013      	ands	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004990:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <HAL_GPIO_Init+0x354>)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3301      	adds	r3, #1
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b0f      	cmp	r3, #15
 80049a0:	f67f ae84 	bls.w	80046ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	3724      	adds	r7, #36	; 0x24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40013800 	.word	0x40013800
 80049bc:	40020000 	.word	0x40020000
 80049c0:	40020400 	.word	0x40020400
 80049c4:	40020800 	.word	0x40020800
 80049c8:	40020c00 	.word	0x40020c00
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40021400 	.word	0x40021400
 80049d4:	40021800 	.word	0x40021800
 80049d8:	40021c00 	.word	0x40021c00
 80049dc:	40022000 	.word	0x40022000
 80049e0:	40022400 	.word	0x40022400
 80049e4:	40013c00 	.word	0x40013c00

080049e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	807b      	strh	r3, [r7, #2]
 80049f4:	4613      	mov	r3, r2
 80049f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049f8:	787b      	ldrb	r3, [r7, #1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a04:	e003      	b.n	8004a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a06:	887b      	ldrh	r3, [r7, #2]
 8004a08:	041a      	lsls	r2, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	619a      	str	r2, [r3, #24]
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e12b      	b.n	8004c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7ff f89e 	bl	8003b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2224      	movs	r2, #36	; 0x24
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a80:	f004 fba4 	bl	80091cc <HAL_RCC_GetPCLK1Freq>
 8004a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4a81      	ldr	r2, [pc, #516]	; (8004c90 <HAL_I2C_Init+0x274>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d807      	bhi.n	8004aa0 <HAL_I2C_Init+0x84>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a80      	ldr	r2, [pc, #512]	; (8004c94 <HAL_I2C_Init+0x278>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	bf94      	ite	ls
 8004a98:	2301      	movls	r3, #1
 8004a9a:	2300      	movhi	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	e006      	b.n	8004aae <HAL_I2C_Init+0x92>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a7d      	ldr	r2, [pc, #500]	; (8004c98 <HAL_I2C_Init+0x27c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bf94      	ite	ls
 8004aa8:	2301      	movls	r3, #1
 8004aaa:	2300      	movhi	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0e7      	b.n	8004c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a78      	ldr	r2, [pc, #480]	; (8004c9c <HAL_I2C_Init+0x280>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	0c9b      	lsrs	r3, r3, #18
 8004ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4a6a      	ldr	r2, [pc, #424]	; (8004c90 <HAL_I2C_Init+0x274>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d802      	bhi.n	8004af0 <HAL_I2C_Init+0xd4>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	3301      	adds	r3, #1
 8004aee:	e009      	b.n	8004b04 <HAL_I2C_Init+0xe8>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	4a69      	ldr	r2, [pc, #420]	; (8004ca0 <HAL_I2C_Init+0x284>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	099b      	lsrs	r3, r3, #6
 8004b02:	3301      	adds	r3, #1
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	495c      	ldr	r1, [pc, #368]	; (8004c90 <HAL_I2C_Init+0x274>)
 8004b20:	428b      	cmp	r3, r1
 8004b22:	d819      	bhi.n	8004b58 <HAL_I2C_Init+0x13c>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	1e59      	subs	r1, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b32:	1c59      	adds	r1, r3, #1
 8004b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b38:	400b      	ands	r3, r1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_I2C_Init+0x138>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1e59      	subs	r1, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b52:	e051      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004b54:	2304      	movs	r3, #4
 8004b56:	e04f      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d111      	bne.n	8004b84 <HAL_I2C_Init+0x168>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1e58      	subs	r0, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6859      	ldr	r1, [r3, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	440b      	add	r3, r1
 8004b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e012      	b.n	8004baa <HAL_I2C_Init+0x18e>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1e58      	subs	r0, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	0099      	lsls	r1, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Init+0x196>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e022      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_I2C_Init+0x1bc>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1e58      	subs	r0, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	440b      	add	r3, r1
 8004bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bcc:	3301      	adds	r3, #1
 8004bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	e00f      	b.n	8004bf8 <HAL_I2C_Init+0x1dc>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1e58      	subs	r0, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	0099      	lsls	r1, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	6809      	ldr	r1, [r1, #0]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6911      	ldr	r1, [r2, #16]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	68d2      	ldr	r2, [r2, #12]
 8004c32:	4311      	orrs	r1, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	000186a0 	.word	0x000186a0
 8004c94:	001e847f 	.word	0x001e847f
 8004c98:	003d08ff 	.word	0x003d08ff
 8004c9c:	431bde83 	.word	0x431bde83
 8004ca0:	10624dd3 	.word	0x10624dd3

08004ca4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	817b      	strh	r3, [r7, #10]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cb8:	f7ff fb78 	bl	80043ac <HAL_GetTick>
 8004cbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	f040 80e0 	bne.w	8004e8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	2319      	movs	r3, #25
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4970      	ldr	r1, [pc, #448]	; (8004e98 <HAL_I2C_Master_Transmit+0x1f4>)
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f002 f8e6 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e0d3      	b.n	8004e8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_I2C_Master_Transmit+0x50>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e0cc      	b.n	8004e8e <HAL_I2C_Master_Transmit+0x1ea>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d007      	beq.n	8004d1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0201 	orr.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2221      	movs	r2, #33	; 0x21
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2210      	movs	r2, #16
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	893a      	ldrh	r2, [r7, #8]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a50      	ldr	r2, [pc, #320]	; (8004e9c <HAL_I2C_Master_Transmit+0x1f8>)
 8004d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d5c:	8979      	ldrh	r1, [r7, #10]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f001 fea8 	bl	8006ab8 <I2C_MasterRequestWrite>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e08d      	b.n	8004e8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d88:	e066      	b.n	8004e58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	6a39      	ldr	r1, [r7, #32]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f002 f960 	bl	8007054 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00d      	beq.n	8004db6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d107      	bne.n	8004db2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e06b      	b.n	8004e8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	781a      	ldrb	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d11b      	bne.n	8004e2c <HAL_I2C_Master_Transmit+0x188>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d017      	beq.n	8004e2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	6a39      	ldr	r1, [r7, #32]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f002 f950 	bl	80070d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d107      	bne.n	8004e54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e01a      	b.n	8004e8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d194      	bne.n	8004d8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	00100002 	.word	0x00100002
 8004e9c:	ffff0000 	.word	0xffff0000

08004ea0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	; 0x30
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	607a      	str	r2, [r7, #4]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	460b      	mov	r3, r1
 8004eae:	817b      	strh	r3, [r7, #10]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eb4:	f7ff fa7a 	bl	80043ac <HAL_GetTick>
 8004eb8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	f040 820b 	bne.w	80052de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	2319      	movs	r3, #25
 8004ece:	2201      	movs	r2, #1
 8004ed0:	497c      	ldr	r1, [pc, #496]	; (80050c4 <HAL_I2C_Master_Receive+0x224>)
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f001 ffe8 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e1fe      	b.n	80052e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_I2C_Master_Receive+0x50>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e1f7      	b.n	80052e0 <HAL_I2C_Master_Receive+0x440>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d007      	beq.n	8004f16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2222      	movs	r2, #34	; 0x22
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2210      	movs	r2, #16
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	893a      	ldrh	r2, [r7, #8]
 8004f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4a5c      	ldr	r2, [pc, #368]	; (80050c8 <HAL_I2C_Master_Receive+0x228>)
 8004f56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f58:	8979      	ldrh	r1, [r7, #10]
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f001 fe2c 	bl	8006bbc <I2C_MasterRequestRead>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e1b8      	b.n	80052e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d113      	bne.n	8004f9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	e18c      	b.n	80052b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d11b      	bne.n	8004fde <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e16c      	b.n	80052b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d11b      	bne.n	800501e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005006:	2300      	movs	r3, #0
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	e14c      	b.n	80052b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800502c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005044:	e138      	b.n	80052b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	2b03      	cmp	r3, #3
 800504c:	f200 80f1 	bhi.w	8005232 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	2b01      	cmp	r3, #1
 8005056:	d123      	bne.n	80050a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f002 f8ad 	bl	80071bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e139      	b.n	80052e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800509e:	e10b      	b.n	80052b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d14e      	bne.n	8005146 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	2200      	movs	r2, #0
 80050b0:	4906      	ldr	r1, [pc, #24]	; (80050cc <HAL_I2C_Master_Receive+0x22c>)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f001 fef8 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e10e      	b.n	80052e0 <HAL_I2C_Master_Receive+0x440>
 80050c2:	bf00      	nop
 80050c4:	00100002 	.word	0x00100002
 80050c8:	ffff0000 	.word	0xffff0000
 80050cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005144:	e0b8      	b.n	80052b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	2200      	movs	r2, #0
 800514e:	4966      	ldr	r1, [pc, #408]	; (80052e8 <HAL_I2C_Master_Receive+0x448>)
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f001 fea9 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0bf      	b.n	80052e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	2200      	movs	r2, #0
 80051aa:	494f      	ldr	r1, [pc, #316]	; (80052e8 <HAL_I2C_Master_Receive+0x448>)
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f001 fe7b 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e091      	b.n	80052e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005230:	e042      	b.n	80052b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f001 ffc0 	bl	80071bc <I2C_WaitOnRXNEFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e04c      	b.n	80052e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b04      	cmp	r3, #4
 8005284:	d118      	bne.n	80052b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f47f aec2 	bne.w	8005046 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e000      	b.n	80052e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3728      	adds	r7, #40	; 0x28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	00010004 	.word	0x00010004

080052ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800530c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005314:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b10      	cmp	r3, #16
 800531a:	d003      	beq.n	8005324 <HAL_I2C_EV_IRQHandler+0x38>
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	f040 80c1 	bne.w	80054a6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10d      	bne.n	800535a <HAL_I2C_EV_IRQHandler+0x6e>
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005344:	d003      	beq.n	800534e <HAL_I2C_EV_IRQHandler+0x62>
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800534c:	d101      	bne.n	8005352 <HAL_I2C_EV_IRQHandler+0x66>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <HAL_I2C_EV_IRQHandler+0x68>
 8005352:	2300      	movs	r3, #0
 8005354:	2b01      	cmp	r3, #1
 8005356:	f000 8132 	beq.w	80055be <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00c      	beq.n	800537e <HAL_I2C_EV_IRQHandler+0x92>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	0a5b      	lsrs	r3, r3, #9
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d006      	beq.n	800537e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f001 ffa8 	bl	80072c6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fd83 	bl	8005e82 <I2C_Master_SB>
 800537c:	e092      	b.n	80054a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	08db      	lsrs	r3, r3, #3
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <HAL_I2C_EV_IRQHandler+0xb2>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	0a5b      	lsrs	r3, r3, #9
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fdf9 	bl	8005f8e <I2C_Master_ADD10>
 800539c:	e082      	b.n	80054a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_I2C_EV_IRQHandler+0xd2>
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	0a5b      	lsrs	r3, r3, #9
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fe13 	bl	8005fe2 <I2C_Master_ADDR>
 80053bc:	e072      	b.n	80054a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	089b      	lsrs	r3, r3, #2
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d03b      	beq.n	8005442 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d8:	f000 80f3 	beq.w	80055c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	09db      	lsrs	r3, r3, #7
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00f      	beq.n	8005408 <HAL_I2C_EV_IRQHandler+0x11c>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	0a9b      	lsrs	r3, r3, #10
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d009      	beq.n	8005408 <HAL_I2C_EV_IRQHandler+0x11c>
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	089b      	lsrs	r3, r3, #2
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d103      	bne.n	8005408 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f9f3 	bl	80057ec <I2C_MasterTransmit_TXE>
 8005406:	e04d      	b.n	80054a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	089b      	lsrs	r3, r3, #2
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80d6 	beq.w	80055c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	0a5b      	lsrs	r3, r3, #9
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80cf 	beq.w	80055c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005424:	7bbb      	ldrb	r3, [r7, #14]
 8005426:	2b21      	cmp	r3, #33	; 0x21
 8005428:	d103      	bne.n	8005432 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fa7a 	bl	8005924 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005430:	e0c7      	b.n	80055c2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005432:	7bfb      	ldrb	r3, [r7, #15]
 8005434:	2b40      	cmp	r3, #64	; 0x40
 8005436:	f040 80c4 	bne.w	80055c2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fae8 	bl	8005a10 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005440:	e0bf      	b.n	80055c2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005450:	f000 80b7 	beq.w	80055c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	099b      	lsrs	r3, r3, #6
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00f      	beq.n	8005480 <HAL_I2C_EV_IRQHandler+0x194>
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	0a9b      	lsrs	r3, r3, #10
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d009      	beq.n	8005480 <HAL_I2C_EV_IRQHandler+0x194>
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d103      	bne.n	8005480 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fb5d 	bl	8005b38 <I2C_MasterReceive_RXNE>
 800547e:	e011      	b.n	80054a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	089b      	lsrs	r3, r3, #2
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 809a 	beq.w	80055c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	0a5b      	lsrs	r3, r3, #9
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 8093 	beq.w	80055c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fc06 	bl	8005cae <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054a2:	e08e      	b.n	80055c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80054a4:	e08d      	b.n	80055c2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	61fb      	str	r3, [r7, #28]
 80054b6:	e007      	b.n	80054c8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d012      	beq.n	80054fa <HAL_I2C_EV_IRQHandler+0x20e>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	0a5b      	lsrs	r3, r3, #9
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00c      	beq.n	80054fa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80054f0:	69b9      	ldr	r1, [r7, #24]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 ffc4 	bl	8006480 <I2C_Slave_ADDR>
 80054f8:	e066      	b.n	80055c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_I2C_EV_IRQHandler+0x22e>
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	0a5b      	lsrs	r3, r3, #9
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fffe 	bl	8006514 <I2C_Slave_STOPF>
 8005518:	e056      	b.n	80055c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800551a:	7bbb      	ldrb	r3, [r7, #14]
 800551c:	2b21      	cmp	r3, #33	; 0x21
 800551e:	d002      	beq.n	8005526 <HAL_I2C_EV_IRQHandler+0x23a>
 8005520:	7bbb      	ldrb	r3, [r7, #14]
 8005522:	2b29      	cmp	r3, #41	; 0x29
 8005524:	d125      	bne.n	8005572 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	09db      	lsrs	r3, r3, #7
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00f      	beq.n	8005552 <HAL_I2C_EV_IRQHandler+0x266>
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	0a9b      	lsrs	r3, r3, #10
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <HAL_I2C_EV_IRQHandler+0x266>
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	089b      	lsrs	r3, r3, #2
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d103      	bne.n	8005552 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 feda 	bl	8006304 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005550:	e039      	b.n	80055c6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	089b      	lsrs	r3, r3, #2
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d033      	beq.n	80055c6 <HAL_I2C_EV_IRQHandler+0x2da>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	0a5b      	lsrs	r3, r3, #9
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d02d      	beq.n	80055c6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 ff07 	bl	800637e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005570:	e029      	b.n	80055c6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	099b      	lsrs	r3, r3, #6
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00f      	beq.n	800559e <HAL_I2C_EV_IRQHandler+0x2b2>
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	0a9b      	lsrs	r3, r3, #10
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <HAL_I2C_EV_IRQHandler+0x2b2>
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	089b      	lsrs	r3, r3, #2
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 ff12 	bl	80063c0 <I2C_SlaveReceive_RXNE>
 800559c:	e014      	b.n	80055c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	089b      	lsrs	r3, r3, #2
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00e      	beq.n	80055c8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	0a5b      	lsrs	r3, r3, #9
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d008      	beq.n	80055c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 ff40 	bl	800643c <I2C_SlaveReceive_BTF>
 80055bc:	e004      	b.n	80055c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80055be:	bf00      	nop
 80055c0:	e002      	b.n	80055c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055c6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b08a      	sub	sp, #40	; 0x28
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055f0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00e      	beq.n	800561c <HAL_I2C_ER_IRQHandler+0x4e>
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	0a1b      	lsrs	r3, r3, #8
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d008      	beq.n	800561c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800561a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	0a5b      	lsrs	r3, r3, #9
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00e      	beq.n	8005646 <HAL_I2C_ER_IRQHandler+0x78>
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	f043 0302 	orr.w	r3, r3, #2
 800563a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005644:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	0a9b      	lsrs	r3, r3, #10
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d03f      	beq.n	80056d2 <HAL_I2C_ER_IRQHandler+0x104>
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	0a1b      	lsrs	r3, r3, #8
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d039      	beq.n	80056d2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800565e:	7efb      	ldrb	r3, [r7, #27]
 8005660:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005666:	b29b      	uxth	r3, r3
 8005668:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005670:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005678:	7ebb      	ldrb	r3, [r7, #26]
 800567a:	2b20      	cmp	r3, #32
 800567c:	d112      	bne.n	80056a4 <HAL_I2C_ER_IRQHandler+0xd6>
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10f      	bne.n	80056a4 <HAL_I2C_ER_IRQHandler+0xd6>
 8005684:	7cfb      	ldrb	r3, [r7, #19]
 8005686:	2b21      	cmp	r3, #33	; 0x21
 8005688:	d008      	beq.n	800569c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800568a:	7cfb      	ldrb	r3, [r7, #19]
 800568c:	2b29      	cmp	r3, #41	; 0x29
 800568e:	d005      	beq.n	800569c <HAL_I2C_ER_IRQHandler+0xce>
 8005690:	7cfb      	ldrb	r3, [r7, #19]
 8005692:	2b28      	cmp	r3, #40	; 0x28
 8005694:	d106      	bne.n	80056a4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b21      	cmp	r3, #33	; 0x21
 800569a:	d103      	bne.n	80056a4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 f869 	bl	8006774 <I2C_Slave_AF>
 80056a2:	e016      	b.n	80056d2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056ac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	f043 0304 	orr.w	r3, r3, #4
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80056b6:	7efb      	ldrb	r3, [r7, #27]
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d002      	beq.n	80056c2 <HAL_I2C_ER_IRQHandler+0xf4>
 80056bc:	7efb      	ldrb	r3, [r7, #27]
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	d107      	bne.n	80056d2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	0adb      	lsrs	r3, r3, #11
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00e      	beq.n	80056fc <HAL_I2C_ER_IRQHandler+0x12e>
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	0a1b      	lsrs	r3, r3, #8
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d008      	beq.n	80056fc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	f043 0308 	orr.w	r3, r3, #8
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80056fa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d008      	beq.n	8005714 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 f8a0 	bl	8006854 <I2C_ITError>
  }
}
 8005714:	bf00      	nop
 8005716:	3728      	adds	r7, #40	; 0x28
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
 8005778:	4613      	mov	r3, r2
 800577a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005802:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580e:	2b00      	cmp	r3, #0
 8005810:	d150      	bne.n	80058b4 <I2C_MasterTransmit_TXE+0xc8>
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	2b21      	cmp	r3, #33	; 0x21
 8005816:	d14d      	bne.n	80058b4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b08      	cmp	r3, #8
 800581c:	d01d      	beq.n	800585a <I2C_MasterTransmit_TXE+0x6e>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b20      	cmp	r3, #32
 8005822:	d01a      	beq.n	800585a <I2C_MasterTransmit_TXE+0x6e>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800582a:	d016      	beq.n	800585a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800583a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2211      	movs	r2, #17
 8005840:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff ff62 	bl	800571c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005858:	e060      	b.n	800591c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005868:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005878:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d107      	bne.n	80058a4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ff7d 	bl	800579c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058a2:	e03b      	b.n	800591c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff ff35 	bl	800571c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058b2:	e033      	b.n	800591c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b21      	cmp	r3, #33	; 0x21
 80058b8:	d005      	beq.n	80058c6 <I2C_MasterTransmit_TXE+0xda>
 80058ba:	7bbb      	ldrb	r3, [r7, #14]
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	d12d      	bne.n	800591c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b22      	cmp	r3, #34	; 0x22
 80058c4:	d12a      	bne.n	800591c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d108      	bne.n	80058e2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058de:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80058e0:	e01c      	b.n	800591c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b40      	cmp	r3, #64	; 0x40
 80058ec:	d103      	bne.n	80058f6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f88e 	bl	8005a10 <I2C_MemoryTransmit_TXE_BTF>
}
 80058f4:	e012      	b.n	800591c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	781a      	ldrb	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800591a:	e7ff      	b.n	800591c <I2C_MasterTransmit_TXE+0x130>
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b21      	cmp	r3, #33	; 0x21
 800593c:	d164      	bne.n	8005a08 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d012      	beq.n	800596e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	781a      	ldrb	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800596c:	e04c      	b.n	8005a08 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b08      	cmp	r3, #8
 8005972:	d01d      	beq.n	80059b0 <I2C_MasterTransmit_BTF+0x8c>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b20      	cmp	r3, #32
 8005978:	d01a      	beq.n	80059b0 <I2C_MasterTransmit_BTF+0x8c>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005980:	d016      	beq.n	80059b0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005990:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2211      	movs	r2, #17
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff feb7 	bl	800571c <HAL_I2C_MasterTxCpltCallback>
}
 80059ae:	e02b      	b.n	8005a08 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059be:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ce:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b40      	cmp	r3, #64	; 0x40
 80059e8:	d107      	bne.n	80059fa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff fed2 	bl	800579c <HAL_I2C_MemTxCpltCallback>
}
 80059f8:	e006      	b.n	8005a08 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7ff fe8a 	bl	800571c <HAL_I2C_MasterTxCpltCallback>
}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d11d      	bne.n	8005a64 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d10b      	bne.n	8005a48 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a40:	1c9a      	adds	r2, r3, #2
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005a46:	e073      	b.n	8005b30 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	121b      	asrs	r3, r3, #8
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a62:	e065      	b.n	8005b30 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d10b      	bne.n	8005a84 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a82:	e055      	b.n	8005b30 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d151      	bne.n	8005b30 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b22      	cmp	r3, #34	; 0x22
 8005a90:	d10d      	bne.n	8005aae <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aa0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005aac:	e040      	b.n	8005b30 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d015      	beq.n	8005ae4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	2b21      	cmp	r3, #33	; 0x21
 8005abc:	d112      	bne.n	8005ae4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005ae2:	e025      	b.n	8005b30 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d120      	bne.n	8005b30 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	2b21      	cmp	r3, #33	; 0x21
 8005af2:	d11d      	bne.n	8005b30 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b02:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff fe36 	bl	800579c <HAL_I2C_MemTxCpltCallback>
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b22      	cmp	r3, #34	; 0x22
 8005b4a:	f040 80ac 	bne.w	8005ca6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d921      	bls.n	8005ba0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	f040 808c 	bne.w	8005ca6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005b9e:	e082      	b.n	8005ca6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d075      	beq.n	8005c94 <I2C_MasterReceive_RXNE+0x15c>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d002      	beq.n	8005bb4 <I2C_MasterReceive_RXNE+0x7c>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d16f      	bne.n	8005c94 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 facf 	bl	8007158 <I2C_WaitOnSTOPRequestThroughIT>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d142      	bne.n	8005c46 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bce:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bde:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d10a      	bne.n	8005c30 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff fdc1 	bl	80057b0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c2e:	e03a      	b.n	8005ca6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2212      	movs	r2, #18
 8005c3c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff fd76 	bl	8005730 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c44:	e02f      	b.n	8005ca6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c54:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff fd99 	bl	80057c4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c92:	e008      	b.n	8005ca6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca2:	605a      	str	r2, [r3, #4]
}
 8005ca4:	e7ff      	b.n	8005ca6 <I2C_MasterReceive_RXNE+0x16e>
 8005ca6:	bf00      	nop
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d11b      	bne.n	8005cfe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005cfc:	e0bd      	b.n	8005e7a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d129      	bne.n	8005d5c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d16:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d00a      	beq.n	8005d34 <I2C_MasterReceive_BTF+0x86>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d007      	beq.n	8005d34 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d32:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d5a:	e08e      	b.n	8005e7a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d176      	bne.n	8005e54 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d002      	beq.n	8005d72 <I2C_MasterReceive_BTF+0xc4>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b10      	cmp	r3, #16
 8005d70:	d108      	bne.n	8005d84 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e019      	b.n	8005db8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d002      	beq.n	8005d90 <I2C_MasterReceive_BTF+0xe2>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d108      	bne.n	8005da2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	e00a      	b.n	8005db8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d007      	beq.n	8005db8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691a      	ldr	r2, [r3, #16]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e12:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	d10a      	bne.n	8005e3e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff fcba 	bl	80057b0 <HAL_I2C_MemRxCpltCallback>
}
 8005e3c:	e01d      	b.n	8005e7a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2212      	movs	r2, #18
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff fc6f 	bl	8005730 <HAL_I2C_MasterRxCpltCallback>
}
 8005e52:	e012      	b.n	8005e7a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e7a:	bf00      	nop
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d117      	bne.n	8005ec6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005eae:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005eb0:	e067      	b.n	8005f82 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	611a      	str	r2, [r3, #16]
}
 8005ec4:	e05d      	b.n	8005f82 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ece:	d133      	bne.n	8005f38 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b21      	cmp	r3, #33	; 0x21
 8005eda:	d109      	bne.n	8005ef0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005eec:	611a      	str	r2, [r3, #16]
 8005eee:	e008      	b.n	8005f02 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	f043 0301 	orr.w	r3, r3, #1
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d004      	beq.n	8005f14 <I2C_Master_SB+0x92>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d108      	bne.n	8005f26 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d032      	beq.n	8005f82 <I2C_Master_SB+0x100>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d02d      	beq.n	8005f82 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f34:	605a      	str	r2, [r3, #4]
}
 8005f36:	e024      	b.n	8005f82 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10e      	bne.n	8005f5e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	11db      	asrs	r3, r3, #7
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	f003 0306 	and.w	r3, r3, #6
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	f063 030f 	orn	r3, r3, #15
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	611a      	str	r2, [r3, #16]
}
 8005f5c:	e011      	b.n	8005f82 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d10d      	bne.n	8005f82 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	11db      	asrs	r3, r3, #7
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f003 0306 	and.w	r3, r3, #6
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f063 030e 	orn	r3, r3, #14
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	611a      	str	r2, [r3, #16]
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d004      	beq.n	8005fb4 <I2C_Master_ADD10+0x26>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d108      	bne.n	8005fc6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00c      	beq.n	8005fd6 <I2C_Master_ADD10+0x48>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fd4:	605a      	str	r2, [r3, #4]
  }
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b091      	sub	sp, #68	; 0x44
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b22      	cmp	r3, #34	; 0x22
 800600a:	f040 8169 	bne.w	80062e0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10f      	bne.n	8006036 <I2C_Master_ADDR+0x54>
 8006016:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800601a:	2b40      	cmp	r3, #64	; 0x40
 800601c:	d10b      	bne.n	8006036 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800601e:	2300      	movs	r3, #0
 8006020:	633b      	str	r3, [r7, #48]	; 0x30
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	633b      	str	r3, [r7, #48]	; 0x30
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	633b      	str	r3, [r7, #48]	; 0x30
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	e160      	b.n	80062f8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603a:	2b00      	cmp	r3, #0
 800603c:	d11d      	bne.n	800607a <I2C_Master_ADDR+0x98>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006046:	d118      	bne.n	800607a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006048:	2300      	movs	r3, #0
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800606c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	651a      	str	r2, [r3, #80]	; 0x50
 8006078:	e13e      	b.n	80062f8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d113      	bne.n	80060ac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006084:	2300      	movs	r3, #0
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	e115      	b.n	80062d8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	f040 808a 	bne.w	80061cc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80060b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060be:	d137      	bne.n	8006130 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ce:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060de:	d113      	bne.n	8006108 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f0:	2300      	movs	r3, #0
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	e0e7      	b.n	80062d8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006108:	2300      	movs	r3, #0
 800610a:	623b      	str	r3, [r7, #32]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	623b      	str	r3, [r7, #32]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	623b      	str	r3, [r7, #32]
 800611c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	e0d3      	b.n	80062d8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	2b08      	cmp	r3, #8
 8006134:	d02e      	beq.n	8006194 <I2C_Master_ADDR+0x1b2>
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	2b20      	cmp	r3, #32
 800613a:	d02b      	beq.n	8006194 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800613c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613e:	2b12      	cmp	r3, #18
 8006140:	d102      	bne.n	8006148 <I2C_Master_ADDR+0x166>
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006144:	2b01      	cmp	r3, #1
 8006146:	d125      	bne.n	8006194 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	2b04      	cmp	r3, #4
 800614c:	d00e      	beq.n	800616c <I2C_Master_ADDR+0x18a>
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	2b02      	cmp	r3, #2
 8006152:	d00b      	beq.n	800616c <I2C_Master_ADDR+0x18a>
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	2b10      	cmp	r3, #16
 8006158:	d008      	beq.n	800616c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e007      	b.n	800617c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800617a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800617c:	2300      	movs	r3, #0
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	61fb      	str	r3, [r7, #28]
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	e0a1      	b.n	80062d8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	61bb      	str	r3, [r7, #24]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e085      	b.n	80062d8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d14d      	bne.n	8006272 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80061d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d016      	beq.n	800620a <I2C_Master_ADDR+0x228>
 80061dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d013      	beq.n	800620a <I2C_Master_ADDR+0x228>
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	2b10      	cmp	r3, #16
 80061e6:	d010      	beq.n	800620a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	e007      	b.n	800621a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006218:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006228:	d117      	bne.n	800625a <I2C_Master_ADDR+0x278>
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006230:	d00b      	beq.n	800624a <I2C_Master_ADDR+0x268>
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	2b01      	cmp	r3, #1
 8006236:	d008      	beq.n	800624a <I2C_Master_ADDR+0x268>
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	2b08      	cmp	r3, #8
 800623c:	d005      	beq.n	800624a <I2C_Master_ADDR+0x268>
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	2b10      	cmp	r3, #16
 8006242:	d002      	beq.n	800624a <I2C_Master_ADDR+0x268>
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	2b20      	cmp	r3, #32
 8006248:	d107      	bne.n	800625a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006258:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	e032      	b.n	80062d8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006280:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800628c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006290:	d117      	bne.n	80062c2 <I2C_Master_ADDR+0x2e0>
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006298:	d00b      	beq.n	80062b2 <I2C_Master_ADDR+0x2d0>
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	2b01      	cmp	r3, #1
 800629e:	d008      	beq.n	80062b2 <I2C_Master_ADDR+0x2d0>
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d005      	beq.n	80062b2 <I2C_Master_ADDR+0x2d0>
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d002      	beq.n	80062b2 <I2C_Master_ADDR+0x2d0>
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d107      	bne.n	80062c2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	613b      	str	r3, [r7, #16]
 80062d6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80062de:	e00b      	b.n	80062f8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
}
 80062f6:	e7ff      	b.n	80062f8 <I2C_Master_ADDR+0x316>
 80062f8:	bf00      	nop
 80062fa:	3744      	adds	r7, #68	; 0x44
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006312:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d02b      	beq.n	8006376 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	781a      	ldrb	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d114      	bne.n	8006376 <I2C_SlaveTransmit_TXE+0x72>
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b29      	cmp	r3, #41	; 0x29
 8006350:	d111      	bne.n	8006376 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006360:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2221      	movs	r2, #33	; 0x21
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2228      	movs	r2, #40	; 0x28
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff f9e7 	bl	8005744 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006376:	bf00      	nop
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d011      	beq.n	80063b4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	781a      	ldrb	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d02c      	beq.n	8006434 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d114      	bne.n	8006434 <I2C_SlaveReceive_RXNE+0x74>
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	2b2a      	cmp	r3, #42	; 0x2a
 800640e:	d111      	bne.n	8006434 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800641e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2222      	movs	r2, #34	; 0x22
 8006424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2228      	movs	r2, #40	; 0x28
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff f992 	bl	8005758 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006434:	bf00      	nop
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d012      	beq.n	8006474 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800649a:	2b28      	cmp	r3, #40	; 0x28
 800649c:	d127      	bne.n	80064ee <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ac:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	089b      	lsrs	r3, r3, #2
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80064ba:	2301      	movs	r3, #1
 80064bc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	09db      	lsrs	r3, r3, #7
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d103      	bne.n	80064d2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	81bb      	strh	r3, [r7, #12]
 80064d0:	e002      	b.n	80064d8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80064e0:	89ba      	ldrh	r2, [r7, #12]
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff f940 	bl	800576c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80064ec:	e00e      	b.n	800650c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800650c:	bf00      	nop
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006522:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006532:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006534:	2300      	movs	r3, #0
 8006536:	60bb      	str	r3, [r7, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	60bb      	str	r3, [r7, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0201 	orr.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006560:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800656c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006570:	d172      	bne.n	8006658 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2b22      	cmp	r3, #34	; 0x22
 8006576:	d002      	beq.n	800657e <I2C_Slave_STOPF+0x6a>
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b2a      	cmp	r3, #42	; 0x2a
 800657c:	d135      	bne.n	80065ea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	b29a      	uxth	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	f043 0204 	orr.w	r2, r3, #4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe f85b 	bl	8004672 <HAL_DMA_GetState>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d049      	beq.n	8006656 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	4a69      	ldr	r2, [pc, #420]	; (800676c <I2C_Slave_STOPF+0x258>)
 80065c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe f82d 	bl	800462e <HAL_DMA_Abort_IT>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d03d      	beq.n	8006656 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065e4:	4610      	mov	r0, r2
 80065e6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065e8:	e035      	b.n	8006656 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d005      	beq.n	800660e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f043 0204 	orr.w	r2, r3, #4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800661c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe f825 	bl	8004672 <HAL_DMA_GetState>
 8006628:	4603      	mov	r3, r0
 800662a:	2b01      	cmp	r3, #1
 800662c:	d014      	beq.n	8006658 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006632:	4a4e      	ldr	r2, [pc, #312]	; (800676c <I2C_Slave_STOPF+0x258>)
 8006634:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663a:	4618      	mov	r0, r3
 800663c:	f7fd fff7 	bl	800462e <HAL_DMA_Abort_IT>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d008      	beq.n	8006658 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
 8006654:	e000      	b.n	8006658 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006656:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d03e      	beq.n	80066e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b04      	cmp	r3, #4
 800666e:	d112      	bne.n	8006696 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a0:	2b40      	cmp	r3, #64	; 0x40
 80066a2:	d112      	bne.n	80066ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	f043 0204 	orr.w	r2, r3, #4
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f8b3 	bl	8006854 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80066ee:	e039      	b.n	8006764 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2b2a      	cmp	r3, #42	; 0x2a
 80066f4:	d109      	bne.n	800670a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2228      	movs	r2, #40	; 0x28
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff f827 	bl	8005758 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b28      	cmp	r3, #40	; 0x28
 8006714:	d111      	bne.n	800673a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a15      	ldr	r2, [pc, #84]	; (8006770 <I2C_Slave_STOPF+0x25c>)
 800671a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff f828 	bl	8005788 <HAL_I2C_ListenCpltCallback>
}
 8006738:	e014      	b.n	8006764 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	2b22      	cmp	r3, #34	; 0x22
 8006740:	d002      	beq.n	8006748 <I2C_Slave_STOPF+0x234>
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b22      	cmp	r3, #34	; 0x22
 8006746:	d10d      	bne.n	8006764 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fe fffa 	bl	8005758 <HAL_I2C_SlaveRxCpltCallback>
}
 8006764:	bf00      	nop
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	08006d59 	.word	0x08006d59
 8006770:	ffff0000 	.word	0xffff0000

08006774 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006782:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b08      	cmp	r3, #8
 800678e:	d002      	beq.n	8006796 <I2C_Slave_AF+0x22>
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b20      	cmp	r3, #32
 8006794:	d129      	bne.n	80067ea <I2C_Slave_AF+0x76>
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	2b28      	cmp	r3, #40	; 0x28
 800679a:	d126      	bne.n	80067ea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a2c      	ldr	r2, [pc, #176]	; (8006850 <I2C_Slave_AF+0xdc>)
 80067a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067b0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067ba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fe ffd0 	bl	8005788 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80067e8:	e02e      	b.n	8006848 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	2b21      	cmp	r3, #33	; 0x21
 80067ee:	d126      	bne.n	800683e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a17      	ldr	r2, [pc, #92]	; (8006850 <I2C_Slave_AF+0xdc>)
 80067f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2221      	movs	r2, #33	; 0x21
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800681a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006824:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006834:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fe ff84 	bl	8005744 <HAL_I2C_SlaveTxCpltCallback>
}
 800683c:	e004      	b.n	8006848 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006846:	615a      	str	r2, [r3, #20]
}
 8006848:	bf00      	nop
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	ffff0000 	.word	0xffff0000

08006854 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006862:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800686a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800686c:	7bbb      	ldrb	r3, [r7, #14]
 800686e:	2b10      	cmp	r3, #16
 8006870:	d002      	beq.n	8006878 <I2C_ITError+0x24>
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	d10a      	bne.n	800688e <I2C_ITError+0x3a>
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	2b22      	cmp	r3, #34	; 0x22
 800687c:	d107      	bne.n	800688e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800688c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006894:	2b28      	cmp	r3, #40	; 0x28
 8006896:	d107      	bne.n	80068a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2228      	movs	r2, #40	; 0x28
 80068a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068a6:	e015      	b.n	80068d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b6:	d00a      	beq.n	80068ce <I2C_ITError+0x7a>
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	2b60      	cmp	r3, #96	; 0x60
 80068bc:	d007      	beq.n	80068ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e2:	d162      	bne.n	80069aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d020      	beq.n	8006944 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006906:	4a6a      	ldr	r2, [pc, #424]	; (8006ab0 <I2C_ITError+0x25c>)
 8006908:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	4618      	mov	r0, r3
 8006910:	f7fd fe8d 	bl	800462e <HAL_DMA_Abort_IT>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 8089 	beq.w	8006a2e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 0201 	bic.w	r2, r2, #1
 800692a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2220      	movs	r2, #32
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800693e:	4610      	mov	r0, r2
 8006940:	4798      	blx	r3
 8006942:	e074      	b.n	8006a2e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	4a59      	ldr	r2, [pc, #356]	; (8006ab0 <I2C_ITError+0x25c>)
 800694a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	4618      	mov	r0, r3
 8006952:	f7fd fe6c 	bl	800462e <HAL_DMA_Abort_IT>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d068      	beq.n	8006a2e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	d10b      	bne.n	8006982 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0201 	bic.w	r2, r2, #1
 8006990:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	e041      	b.n	8006a2e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b60      	cmp	r3, #96	; 0x60
 80069b4:	d125      	bne.n	8006a02 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d10b      	bne.n	80069ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0201 	bic.w	r2, r2, #1
 80069f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fe feec 	bl	80057d8 <HAL_I2C_AbortCpltCallback>
 8006a00:	e015      	b.n	8006a2e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	d10b      	bne.n	8006a28 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7fe fecb 	bl	80057c4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10e      	bne.n	8006a5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d109      	bne.n	8006a5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d104      	bne.n	8006a5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d007      	beq.n	8006a6c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a6a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a72:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d113      	bne.n	8006aa8 <I2C_ITError+0x254>
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	2b28      	cmp	r3, #40	; 0x28
 8006a84:	d110      	bne.n	8006aa8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a0a      	ldr	r2, [pc, #40]	; (8006ab4 <I2C_ITError+0x260>)
 8006a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fe fe70 	bl	8005788 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	08006d59 	.word	0x08006d59
 8006ab4:	ffff0000 	.word	0xffff0000

08006ab8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	607a      	str	r2, [r7, #4]
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d006      	beq.n	8006ae2 <I2C_MasterRequestWrite+0x2a>
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d003      	beq.n	8006ae2 <I2C_MasterRequestWrite+0x2a>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ae0:	d108      	bne.n	8006af4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e00b      	b.n	8006b0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af8:	2b12      	cmp	r3, #18
 8006afa:	d107      	bne.n	8006b0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 f9c5 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00d      	beq.n	8006b40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b32:	d103      	bne.n	8006b3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e035      	b.n	8006bac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b48:	d108      	bne.n	8006b5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b4a:	897b      	ldrh	r3, [r7, #10]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b58:	611a      	str	r2, [r3, #16]
 8006b5a:	e01b      	b.n	8006b94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006b5c:	897b      	ldrh	r3, [r7, #10]
 8006b5e:	11db      	asrs	r3, r3, #7
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 0306 	and.w	r3, r3, #6
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	f063 030f 	orn	r3, r3, #15
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	490e      	ldr	r1, [pc, #56]	; (8006bb4 <I2C_MasterRequestWrite+0xfc>)
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 f9eb 	bl	8006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e010      	b.n	8006bac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006b8a:	897b      	ldrh	r3, [r7, #10]
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	4907      	ldr	r1, [pc, #28]	; (8006bb8 <I2C_MasterRequestWrite+0x100>)
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 f9db 	bl	8006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	00010008 	.word	0x00010008
 8006bb8:	00010002 	.word	0x00010002

08006bbc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	607a      	str	r2, [r7, #4]
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006be0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d006      	beq.n	8006bf6 <I2C_MasterRequestRead+0x3a>
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d003      	beq.n	8006bf6 <I2C_MasterRequestRead+0x3a>
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bf4:	d108      	bne.n	8006c08 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	e00b      	b.n	8006c20 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0c:	2b11      	cmp	r3, #17
 8006c0e:	d107      	bne.n	8006c20 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f93b 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00d      	beq.n	8006c54 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c46:	d103      	bne.n	8006c50 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e079      	b.n	8006d48 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c5c:	d108      	bne.n	8006c70 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c5e:	897b      	ldrh	r3, [r7, #10]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	f043 0301 	orr.w	r3, r3, #1
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	611a      	str	r2, [r3, #16]
 8006c6e:	e05f      	b.n	8006d30 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c70:	897b      	ldrh	r3, [r7, #10]
 8006c72:	11db      	asrs	r3, r3, #7
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	f003 0306 	and.w	r3, r3, #6
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f063 030f 	orn	r3, r3, #15
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	4930      	ldr	r1, [pc, #192]	; (8006d50 <I2C_MasterRequestRead+0x194>)
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 f961 	bl	8006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e054      	b.n	8006d48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c9e:	897b      	ldrh	r3, [r7, #10]
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	4929      	ldr	r1, [pc, #164]	; (8006d54 <I2C_MasterRequestRead+0x198>)
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f000 f951 	bl	8006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e044      	b.n	8006d48 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	613b      	str	r3, [r7, #16]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 f8d9 	bl	8006ea8 <I2C_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00d      	beq.n	8006d18 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0a:	d103      	bne.n	8006d14 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d12:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e017      	b.n	8006d48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006d18:	897b      	ldrh	r3, [r7, #10]
 8006d1a:	11db      	asrs	r3, r3, #7
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	f003 0306 	and.w	r3, r3, #6
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f063 030e 	orn	r3, r3, #14
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	4907      	ldr	r1, [pc, #28]	; (8006d54 <I2C_MasterRequestRead+0x198>)
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 f90d 	bl	8006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e000      	b.n	8006d48 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	00010008 	.word	0x00010008
 8006d54:	00010002 	.word	0x00010002

08006d58 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d70:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d72:	4b4b      	ldr	r3, [pc, #300]	; (8006ea0 <I2C_DMAAbort+0x148>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	08db      	lsrs	r3, r3, #3
 8006d78:	4a4a      	ldr	r2, [pc, #296]	; (8006ea4 <I2C_DMAAbort+0x14c>)
 8006d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7e:	0a1a      	lsrs	r2, r3, #8
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	00da      	lsls	r2, r3, #3
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0220 	orr.w	r2, r3, #32
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006d9e:	e00a      	b.n	8006db6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db4:	d0ea      	beq.n	8006d8c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2200      	movs	r2, #0
 8006dea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df8:	2200      	movs	r2, #0
 8006dfa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	2200      	movs	r2, #0
 8006e0a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0201 	bic.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b60      	cmp	r3, #96	; 0x60
 8006e26:	d10e      	bne.n	8006e46 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e3e:	6978      	ldr	r0, [r7, #20]
 8006e40:	f7fe fcca 	bl	80057d8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e44:	e027      	b.n	8006e96 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e46:	7cfb      	ldrb	r3, [r7, #19]
 8006e48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e4c:	2b28      	cmp	r3, #40	; 0x28
 8006e4e:	d117      	bne.n	8006e80 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2200      	movs	r2, #0
 8006e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2228      	movs	r2, #40	; 0x28
 8006e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e7e:	e007      	b.n	8006e90 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006e90:	6978      	ldr	r0, [r7, #20]
 8006e92:	f7fe fc97 	bl	80057c4 <HAL_I2C_ErrorCallback>
}
 8006e96:	bf00      	nop
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000014 	.word	0x20000014
 8006ea4:	14f8b589 	.word	0x14f8b589

08006ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006eb8:	e025      	b.n	8006f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec0:	d021      	beq.n	8006f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec2:	f7fd fa73 	bl	80043ac <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d302      	bcc.n	8006ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d116      	bne.n	8006f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	f043 0220 	orr.w	r2, r3, #32
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e023      	b.n	8006f4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	0c1b      	lsrs	r3, r3, #16
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d10d      	bne.n	8006f2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	43da      	mvns	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bf0c      	ite	eq
 8006f22:	2301      	moveq	r3, #1
 8006f24:	2300      	movne	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	e00c      	b.n	8006f46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	43da      	mvns	r2, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	4013      	ands	r3, r2
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bf0c      	ite	eq
 8006f3e:	2301      	moveq	r3, #1
 8006f40:	2300      	movne	r3, #0
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d0b6      	beq.n	8006eba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f64:	e051      	b.n	800700a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f74:	d123      	bne.n	8006fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	f043 0204 	orr.w	r2, r3, #4
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e046      	b.n	800704c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d021      	beq.n	800700a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc6:	f7fd f9f1 	bl	80043ac <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d302      	bcc.n	8006fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d116      	bne.n	800700a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	f043 0220 	orr.w	r2, r3, #32
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e020      	b.n	800704c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	0c1b      	lsrs	r3, r3, #16
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	d10c      	bne.n	800702e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	43da      	mvns	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4013      	ands	r3, r2
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	bf14      	ite	ne
 8007026:	2301      	movne	r3, #1
 8007028:	2300      	moveq	r3, #0
 800702a:	b2db      	uxtb	r3, r3
 800702c:	e00b      	b.n	8007046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	43da      	mvns	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	4013      	ands	r3, r2
 800703a:	b29b      	uxth	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	bf14      	ite	ne
 8007040:	2301      	movne	r3, #1
 8007042:	2300      	moveq	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d18d      	bne.n	8006f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007060:	e02d      	b.n	80070be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 f900 	bl	8007268 <I2C_IsAcknowledgeFailed>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e02d      	b.n	80070ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007078:	d021      	beq.n	80070be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707a:	f7fd f997 	bl	80043ac <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	429a      	cmp	r2, r3
 8007088:	d302      	bcc.n	8007090 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d116      	bne.n	80070be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	f043 0220 	orr.w	r2, r3, #32
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e007      	b.n	80070ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c8:	2b80      	cmp	r3, #128	; 0x80
 80070ca:	d1ca      	bne.n	8007062 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070e2:	e02d      	b.n	8007140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f8bf 	bl	8007268 <I2C_IsAcknowledgeFailed>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e02d      	b.n	8007150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fa:	d021      	beq.n	8007140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070fc:	f7fd f956 	bl	80043ac <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	429a      	cmp	r2, r3
 800710a:	d302      	bcc.n	8007112 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d116      	bne.n	8007140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	f043 0220 	orr.w	r2, r3, #32
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e007      	b.n	8007150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b04      	cmp	r3, #4
 800714c:	d1ca      	bne.n	80070e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007164:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	08db      	lsrs	r3, r3, #3
 800716a:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800716c:	fba2 2303 	umull	r2, r3, r2, r3
 8007170:	0a1a      	lsrs	r2, r3, #8
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3b01      	subs	r3, #1
 800717e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d107      	bne.n	8007196 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	f043 0220 	orr.w	r2, r3, #32
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e008      	b.n	80071a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a4:	d0e9      	beq.n	800717a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	20000014 	.word	0x20000014
 80071b8:	14f8b589 	.word	0x14f8b589

080071bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071c8:	e042      	b.n	8007250 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	f003 0310 	and.w	r3, r3, #16
 80071d4:	2b10      	cmp	r3, #16
 80071d6:	d119      	bne.n	800720c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0210 	mvn.w	r2, #16
 80071e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e029      	b.n	8007260 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800720c:	f7fd f8ce 	bl	80043ac <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	429a      	cmp	r2, r3
 800721a:	d302      	bcc.n	8007222 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d116      	bne.n	8007250 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2220      	movs	r2, #32
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	f043 0220 	orr.w	r2, r3, #32
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e007      	b.n	8007260 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725a:	2b40      	cmp	r3, #64	; 0x40
 800725c:	d1b5      	bne.n	80071ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800727a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800727e:	d11b      	bne.n	80072b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007288:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	f043 0204 	orr.w	r2, r3, #4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80072d6:	d103      	bne.n	80072e0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80072de:	e007      	b.n	80072f0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80072e8:	d102      	bne.n	80072f0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2208      	movs	r2, #8
 80072ee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b20      	cmp	r3, #32
 8007310:	d129      	bne.n	8007366 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2224      	movs	r2, #36	; 0x24
 8007316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 0201 	bic.w	r2, r2, #1
 8007328:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0210 	bic.w	r2, r2, #16
 8007338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f042 0201 	orr.w	r2, r2, #1
 8007358:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	e000      	b.n	8007368 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007366:	2302      	movs	r3, #2
  }
}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b20      	cmp	r3, #32
 800738c:	d12a      	bne.n	80073e4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2224      	movs	r2, #36	; 0x24
 8007392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0201 	bic.w	r2, r2, #1
 80073a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80073ae:	89fb      	ldrh	r3, [r7, #14]
 80073b0:	f023 030f 	bic.w	r3, r3, #15
 80073b4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	89fb      	ldrh	r3, [r7, #14]
 80073bc:	4313      	orrs	r3, r2
 80073be:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	89fa      	ldrh	r2, [r7, #14]
 80073c6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0201 	orr.w	r2, r2, #1
 80073d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2220      	movs	r2, #32
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	e000      	b.n	80073e6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80073e4:	2302      	movs	r3, #2
  }
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80073f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073f4:	b08f      	sub	sp, #60	; 0x3c
 80073f6:	af0a      	add	r7, sp, #40	; 0x28
 80073f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e10f      	b.n	8007624 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d106      	bne.n	8007424 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f006 fee2 	bl	800e1e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2203      	movs	r2, #3
 8007428:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f003 f9bd 	bl	800a7c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	603b      	str	r3, [r7, #0]
 800744e:	687e      	ldr	r6, [r7, #4]
 8007450:	466d      	mov	r5, sp
 8007452:	f106 0410 	add.w	r4, r6, #16
 8007456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800745a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800745c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800745e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007462:	e885 0003 	stmia.w	r5, {r0, r1}
 8007466:	1d33      	adds	r3, r6, #4
 8007468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800746a:	6838      	ldr	r0, [r7, #0]
 800746c:	f003 f894 	bl	800a598 <USB_CoreInit>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e0d0      	b.n	8007624 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2100      	movs	r1, #0
 8007488:	4618      	mov	r0, r3
 800748a:	f003 f9ab 	bl	800a7e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
 8007492:	e04a      	b.n	800752a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007494:	7bfa      	ldrb	r2, [r7, #15]
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	4613      	mov	r3, r2
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	440b      	add	r3, r1
 80074a2:	333d      	adds	r3, #61	; 0x3d
 80074a4:	2201      	movs	r2, #1
 80074a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80074a8:	7bfa      	ldrb	r2, [r7, #15]
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	4613      	mov	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	440b      	add	r3, r1
 80074b6:	333c      	adds	r3, #60	; 0x3c
 80074b8:	7bfa      	ldrb	r2, [r7, #15]
 80074ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80074bc:	7bfa      	ldrb	r2, [r7, #15]
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	b298      	uxth	r0, r3
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	4613      	mov	r3, r2
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	440b      	add	r3, r1
 80074ce:	3344      	adds	r3, #68	; 0x44
 80074d0:	4602      	mov	r2, r0
 80074d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80074d4:	7bfa      	ldrb	r2, [r7, #15]
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	4613      	mov	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	3340      	adds	r3, #64	; 0x40
 80074e4:	2200      	movs	r2, #0
 80074e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80074e8:	7bfa      	ldrb	r2, [r7, #15]
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	4613      	mov	r3, r2
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	440b      	add	r3, r1
 80074f6:	3348      	adds	r3, #72	; 0x48
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80074fc:	7bfa      	ldrb	r2, [r7, #15]
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4613      	mov	r3, r2
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	334c      	adds	r3, #76	; 0x4c
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007510:	7bfa      	ldrb	r2, [r7, #15]
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	4613      	mov	r3, r2
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	440b      	add	r3, r1
 800751e:	3354      	adds	r3, #84	; 0x54
 8007520:	2200      	movs	r2, #0
 8007522:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	3301      	adds	r3, #1
 8007528:	73fb      	strb	r3, [r7, #15]
 800752a:	7bfa      	ldrb	r2, [r7, #15]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	429a      	cmp	r2, r3
 8007532:	d3af      	bcc.n	8007494 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]
 8007538:	e044      	b.n	80075c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800753a:	7bfa      	ldrb	r2, [r7, #15]
 800753c:	6879      	ldr	r1, [r7, #4]
 800753e:	4613      	mov	r3, r2
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	4413      	add	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	440b      	add	r3, r1
 8007548:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007550:	7bfa      	ldrb	r2, [r7, #15]
 8007552:	6879      	ldr	r1, [r7, #4]
 8007554:	4613      	mov	r3, r2
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	440b      	add	r3, r1
 800755e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007562:	7bfa      	ldrb	r2, [r7, #15]
 8007564:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007566:	7bfa      	ldrb	r2, [r7, #15]
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	4613      	mov	r3, r2
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	440b      	add	r3, r1
 8007574:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007578:	2200      	movs	r2, #0
 800757a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800757c:	7bfa      	ldrb	r2, [r7, #15]
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	4613      	mov	r3, r2
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800758e:	2200      	movs	r2, #0
 8007590:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007592:	7bfa      	ldrb	r2, [r7, #15]
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	4613      	mov	r3, r2
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80075a8:	7bfa      	ldrb	r2, [r7, #15]
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	4613      	mov	r3, r2
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	3301      	adds	r3, #1
 80075c2:	73fb      	strb	r3, [r7, #15]
 80075c4:	7bfa      	ldrb	r2, [r7, #15]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d3b5      	bcc.n	800753a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	687e      	ldr	r6, [r7, #4]
 80075d6:	466d      	mov	r5, sp
 80075d8:	f106 0410 	add.w	r4, r6, #16
 80075dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80075e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80075ec:	1d33      	adds	r3, r6, #4
 80075ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075f0:	6838      	ldr	r0, [r7, #0]
 80075f2:	f003 f943 	bl	800a87c <USB_DevInit>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e00d      	b.n	8007624 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f004 fa92 	bl	800bb46 <USB_DevDisconnect>

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800762c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_PCD_Start+0x1c>
 8007644:	2302      	movs	r3, #2
 8007646:	e020      	b.n	800768a <HAL_PCD_Start+0x5e>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007654:	2b01      	cmp	r3, #1
 8007656:	d109      	bne.n	800766c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800765c:	2b01      	cmp	r3, #1
 800765e:	d005      	beq.n	800766c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f003 f895 	bl	800a7a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4618      	mov	r0, r3
 800767c:	f004 fa42 	bl	800bb04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007692:	b590      	push	{r4, r7, lr}
 8007694:	b08d      	sub	sp, #52	; 0x34
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f004 fb00 	bl	800bcae <USB_GetMode>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f040 848a 	bne.w	8007fca <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f004 fa64 	bl	800bb88 <USB_ReadInterrupts>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 8480 	beq.w	8007fc8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	0a1b      	lsrs	r3, r3, #8
 80076d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f004 fa51 	bl	800bb88 <USB_ReadInterrupts>
 80076e6:	4603      	mov	r3, r0
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d107      	bne.n	8007700 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695a      	ldr	r2, [r3, #20]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f002 0202 	and.w	r2, r2, #2
 80076fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f004 fa3f 	bl	800bb88 <USB_ReadInterrupts>
 800770a:	4603      	mov	r3, r0
 800770c:	f003 0310 	and.w	r3, r3, #16
 8007710:	2b10      	cmp	r3, #16
 8007712:	d161      	bne.n	80077d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0210 	bic.w	r2, r2, #16
 8007722:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	f003 020f 	and.w	r2, r3, #15
 8007730:	4613      	mov	r3, r2
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	4413      	add	r3, r2
 8007740:	3304      	adds	r3, #4
 8007742:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	0c5b      	lsrs	r3, r3, #17
 8007748:	f003 030f 	and.w	r3, r3, #15
 800774c:	2b02      	cmp	r3, #2
 800774e:	d124      	bne.n	800779a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007756:	4013      	ands	r3, r2
 8007758:	2b00      	cmp	r3, #0
 800775a:	d035      	beq.n	80077c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	091b      	lsrs	r3, r3, #4
 8007764:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800776a:	b29b      	uxth	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	6a38      	ldr	r0, [r7, #32]
 8007770:	f004 f876 	bl	800b860 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	691a      	ldr	r2, [r3, #16]
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	091b      	lsrs	r3, r3, #4
 800777c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007780:	441a      	add	r2, r3
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	6a1a      	ldr	r2, [r3, #32]
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	091b      	lsrs	r3, r3, #4
 800778e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007792:	441a      	add	r2, r3
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	621a      	str	r2, [r3, #32]
 8007798:	e016      	b.n	80077c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	0c5b      	lsrs	r3, r3, #17
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	2b06      	cmp	r3, #6
 80077a4:	d110      	bne.n	80077c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077ac:	2208      	movs	r2, #8
 80077ae:	4619      	mov	r1, r3
 80077b0:	6a38      	ldr	r0, [r7, #32]
 80077b2:	f004 f855 	bl	800b860 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	6a1a      	ldr	r2, [r3, #32]
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	091b      	lsrs	r3, r3, #4
 80077be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077c2:	441a      	add	r2, r3
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0210 	orr.w	r2, r2, #16
 80077d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4618      	mov	r0, r3
 80077de:	f004 f9d3 	bl	800bb88 <USB_ReadInterrupts>
 80077e2:	4603      	mov	r3, r0
 80077e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80077ec:	f040 80a7 	bne.w	800793e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f004 f9d8 	bl	800bbae <USB_ReadDevAllOutEpInterrupt>
 80077fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007800:	e099      	b.n	8007936 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 808e 	beq.w	800792a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	4611      	mov	r1, r2
 8007818:	4618      	mov	r0, r3
 800781a:	f004 f9fc 	bl	800bc16 <USB_ReadDevOutEPInterrupt>
 800781e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00c      	beq.n	8007844 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007836:	461a      	mov	r2, r3
 8007838:	2301      	movs	r3, #1
 800783a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800783c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fec2 	bl	80085c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00c      	beq.n	8007868 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785a:	461a      	mov	r2, r3
 800785c:	2308      	movs	r3, #8
 800785e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 ff98 	bl	8008798 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b00      	cmp	r3, #0
 8007870:	d008      	beq.n	8007884 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	461a      	mov	r2, r3
 8007880:	2310      	movs	r3, #16
 8007882:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d030      	beq.n	80078f0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007896:	2b80      	cmp	r3, #128	; 0x80
 8007898:	d109      	bne.n	80078ae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	69fa      	ldr	r2, [r7, #28]
 80078a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078ac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80078ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b0:	4613      	mov	r3, r2
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	3304      	adds	r3, #4
 80078c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	78db      	ldrb	r3, [r3, #3]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d108      	bne.n	80078de <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2200      	movs	r2, #0
 80078d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f006 fd8b 	bl	800e3f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ea:	461a      	mov	r2, r3
 80078ec:	2302      	movs	r3, #2
 80078ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d008      	beq.n	800790c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007906:	461a      	mov	r2, r3
 8007908:	2320      	movs	r3, #32
 800790a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007922:	461a      	mov	r2, r3
 8007924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007928:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	3301      	adds	r3, #1
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	085b      	lsrs	r3, r3, #1
 8007934:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	f47f af62 	bne.w	8007802 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f004 f920 	bl	800bb88 <USB_ReadInterrupts>
 8007948:	4603      	mov	r3, r0
 800794a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800794e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007952:	f040 80db 	bne.w	8007b0c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4618      	mov	r0, r3
 800795c:	f004 f941 	bl	800bbe2 <USB_ReadDevAllInEpInterrupt>
 8007960:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007966:	e0cd      	b.n	8007b04 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80c2 	beq.w	8007af8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f004 f967 	bl	800bc52 <USB_ReadDevInEPInterrupt>
 8007984:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d057      	beq.n	8007a40 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	2201      	movs	r2, #1
 8007998:	fa02 f303 	lsl.w	r3, r2, r3
 800799c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	43db      	mvns	r3, r3
 80079aa:	69f9      	ldr	r1, [r7, #28]
 80079ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079b0:	4013      	ands	r3, r2
 80079b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c0:	461a      	mov	r2, r3
 80079c2:	2301      	movs	r3, #1
 80079c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d132      	bne.n	8007a34 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d2:	4613      	mov	r3, r2
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	334c      	adds	r3, #76	; 0x4c
 80079de:	6819      	ldr	r1, [r3, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e4:	4613      	mov	r3, r2
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	4413      	add	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4403      	add	r3, r0
 80079ee:	3348      	adds	r3, #72	; 0x48
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4419      	add	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f8:	4613      	mov	r3, r2
 80079fa:	00db      	lsls	r3, r3, #3
 80079fc:	4413      	add	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4403      	add	r3, r0
 8007a02:	334c      	adds	r3, #76	; 0x4c
 8007a04:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d113      	bne.n	8007a34 <HAL_PCD_IRQHandler+0x3a2>
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a10:	4613      	mov	r3, r2
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	4413      	add	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	3354      	adds	r3, #84	; 0x54
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d108      	bne.n	8007a34 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	2101      	movs	r1, #1
 8007a30:	f004 f96e 	bl	800bd10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f006 fc55 	bl	800e2ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d008      	beq.n	8007a5c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a56:	461a      	mov	r2, r3
 8007a58:	2308      	movs	r3, #8
 8007a5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f003 0310 	and.w	r3, r3, #16
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d008      	beq.n	8007a78 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a72:	461a      	mov	r2, r3
 8007a74:	2310      	movs	r3, #16
 8007a76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d008      	beq.n	8007a94 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8e:	461a      	mov	r2, r3
 8007a90:	2340      	movs	r3, #64	; 0x40
 8007a92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d023      	beq.n	8007ae6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007a9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007aa0:	6a38      	ldr	r0, [r7, #32]
 8007aa2:	f003 f84f 	bl	800ab44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	00db      	lsls	r3, r3, #3
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	3338      	adds	r3, #56	; 0x38
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	78db      	ldrb	r3, [r3, #3]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d108      	bne.n	8007ad4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f006 fca2 	bl	800e418 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fcdb 	bl	80084ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	3301      	adds	r3, #1
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	085b      	lsrs	r3, r3, #1
 8007b02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f47f af2e 	bne.w	8007968 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f004 f839 	bl	800bb88 <USB_ReadInterrupts>
 8007b16:	4603      	mov	r3, r0
 8007b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b20:	d122      	bne.n	8007b68 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b30:	f023 0301 	bic.w	r3, r3, #1
 8007b34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d108      	bne.n	8007b52 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007b48:	2100      	movs	r1, #0
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fec2 	bl	80088d4 <HAL_PCDEx_LPM_Callback>
 8007b50:	e002      	b.n	8007b58 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f006 fc40 	bl	800e3d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695a      	ldr	r2, [r3, #20]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f004 f80b 	bl	800bb88 <USB_ReadInterrupts>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b7c:	d112      	bne.n	8007ba4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d102      	bne.n	8007b94 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f006 fbfc 	bl	800e38c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695a      	ldr	r2, [r3, #20]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007ba2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f003 ffed 	bl	800bb88 <USB_ReadInterrupts>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb8:	f040 80b7 	bne.w	8007d2a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bca:	f023 0301 	bic.w	r3, r3, #1
 8007bce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2110      	movs	r1, #16
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f002 ffb4 	bl	800ab44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bdc:	2300      	movs	r3, #0
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007be0:	e046      	b.n	8007c70 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bf4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c06:	0151      	lsls	r1, r2, #5
 8007c08:	69fa      	ldr	r2, [r7, #28]
 8007c0a:	440a      	add	r2, r1
 8007c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c22:	461a      	mov	r2, r3
 8007c24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c3a:	0151      	lsls	r1, r2, #5
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	440a      	add	r2, r1
 8007c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c5a:	0151      	lsls	r1, r2, #5
 8007c5c:	69fa      	ldr	r2, [r7, #28]
 8007c5e:	440a      	add	r2, r1
 8007c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d3b3      	bcc.n	8007be2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	69fa      	ldr	r2, [r7, #28]
 8007c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007c8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d016      	beq.n	8007cc4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ca0:	69fa      	ldr	r2, [r7, #28]
 8007ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ca6:	f043 030b 	orr.w	r3, r3, #11
 8007caa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cbc:	f043 030b 	orr.w	r3, r3, #11
 8007cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8007cc2:	e015      	b.n	8007cf0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007cd6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007cda:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	69fa      	ldr	r2, [r7, #28]
 8007ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cea:	f043 030b 	orr.w	r3, r3, #11
 8007cee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	69fa      	ldr	r2, [r7, #28]
 8007cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cfe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6818      	ldr	r0, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d14:	461a      	mov	r2, r3
 8007d16:	f003 fffb 	bl	800bd10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	695a      	ldr	r2, [r3, #20]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f003 ff2a 	bl	800bb88 <USB_ReadInterrupts>
 8007d34:	4603      	mov	r3, r0
 8007d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3e:	d124      	bne.n	8007d8a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f003 ffc0 	bl	800bcca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f002 ff75 	bl	800ac3e <USB_GetDevSpeed>
 8007d54:	4603      	mov	r3, r0
 8007d56:	461a      	mov	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681c      	ldr	r4, [r3, #0]
 8007d60:	f001 fa28 	bl	80091b4 <HAL_RCC_GetHCLKFreq>
 8007d64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f002 fc74 	bl	800a65c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f006 fae0 	bl	800e33a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	695a      	ldr	r2, [r3, #20]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f003 fefa 	bl	800bb88 <USB_ReadInterrupts>
 8007d94:	4603      	mov	r3, r0
 8007d96:	f003 0308 	and.w	r3, r3, #8
 8007d9a:	2b08      	cmp	r3, #8
 8007d9c:	d10a      	bne.n	8007db4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f006 fabd 	bl	800e31e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695a      	ldr	r2, [r3, #20]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f002 0208 	and.w	r2, r2, #8
 8007db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f003 fee5 	bl	800bb88 <USB_ReadInterrupts>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc4:	2b80      	cmp	r3, #128	; 0x80
 8007dc6:	d122      	bne.n	8007e0e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd8:	e014      	b.n	8007e04 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dde:	4613      	mov	r3, r2
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	4413      	add	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	440b      	add	r3, r1
 8007de8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d105      	bne.n	8007dfe <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fb27 	bl	800844c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	3301      	adds	r3, #1
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d3e5      	bcc.n	8007dda <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f003 feb8 	bl	800bb88 <USB_ReadInterrupts>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e22:	d13b      	bne.n	8007e9c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e24:	2301      	movs	r3, #1
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
 8007e28:	e02b      	b.n	8007e82 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007e3a:	6879      	ldr	r1, [r7, #4]
 8007e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e3e:	4613      	mov	r3, r2
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	4413      	add	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	440b      	add	r3, r1
 8007e48:	3340      	adds	r3, #64	; 0x40
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d115      	bne.n	8007e7c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007e50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	da12      	bge.n	8007e7c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	4413      	add	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	440b      	add	r3, r1
 8007e64:	333f      	adds	r3, #63	; 0x3f
 8007e66:	2201      	movs	r2, #1
 8007e68:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fae8 	bl	800844c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	3301      	adds	r3, #1
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d3ce      	bcc.n	8007e2a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	695a      	ldr	r2, [r3, #20]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f003 fe71 	bl	800bb88 <USB_ReadInterrupts>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eb0:	d155      	bne.n	8007f5e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb6:	e045      	b.n	8007f44 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ecc:	4613      	mov	r3, r2
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	4413      	add	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	440b      	add	r3, r1
 8007ed6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d12e      	bne.n	8007f3e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007ee0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da2b      	bge.n	8007f3e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007ef2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d121      	bne.n	8007f3e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007efe:	4613      	mov	r3, r2
 8007f00:	00db      	lsls	r3, r3, #3
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	440b      	add	r3, r1
 8007f08:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10a      	bne.n	8007f3e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	69fa      	ldr	r2, [r7, #28]
 8007f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f3a:	6053      	str	r3, [r2, #4]
            break;
 8007f3c:	e007      	b.n	8007f4e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	3301      	adds	r3, #1
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d3b4      	bcc.n	8007eb8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	695a      	ldr	r2, [r3, #20]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f003 fe10 	bl	800bb88 <USB_ReadInterrupts>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f72:	d10a      	bne.n	8007f8a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f006 fa61 	bl	800e43c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	695a      	ldr	r2, [r3, #20]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f003 fdfa 	bl	800bb88 <USB_ReadInterrupts>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f003 0304 	and.w	r3, r3, #4
 8007f9a:	2b04      	cmp	r3, #4
 8007f9c:	d115      	bne.n	8007fca <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f006 fa51 	bl	800e458 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6859      	ldr	r1, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	605a      	str	r2, [r3, #4]
 8007fc6:	e000      	b.n	8007fca <HAL_PCD_IRQHandler+0x938>
      return;
 8007fc8:	bf00      	nop
    }
  }
}
 8007fca:	3734      	adds	r7, #52	; 0x34
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd90      	pop	{r4, r7, pc}

08007fd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d101      	bne.n	8007fea <HAL_PCD_SetAddress+0x1a>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e013      	b.n	8008012 <HAL_PCD_SetAddress+0x42>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	78fa      	ldrb	r2, [r7, #3]
 8007ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	78fa      	ldrb	r2, [r7, #3]
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f003 fd58 	bl	800bab8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	4608      	mov	r0, r1
 8008024:	4611      	mov	r1, r2
 8008026:	461a      	mov	r2, r3
 8008028:	4603      	mov	r3, r0
 800802a:	70fb      	strb	r3, [r7, #3]
 800802c:	460b      	mov	r3, r1
 800802e:	803b      	strh	r3, [r7, #0]
 8008030:	4613      	mov	r3, r2
 8008032:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800803c:	2b00      	cmp	r3, #0
 800803e:	da0f      	bge.n	8008060 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	f003 020f 	and.w	r2, r3, #15
 8008046:	4613      	mov	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	3338      	adds	r3, #56	; 0x38
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	4413      	add	r3, r2
 8008054:	3304      	adds	r3, #4
 8008056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2201      	movs	r2, #1
 800805c:	705a      	strb	r2, [r3, #1]
 800805e:	e00f      	b.n	8008080 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	f003 020f 	and.w	r2, r3, #15
 8008066:	4613      	mov	r3, r2
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	4413      	add	r3, r2
 8008076:	3304      	adds	r3, #4
 8008078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	f003 030f 	and.w	r3, r3, #15
 8008086:	b2da      	uxtb	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800808c:	883a      	ldrh	r2, [r7, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	78ba      	ldrb	r2, [r7, #2]
 8008096:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	785b      	ldrb	r3, [r3, #1]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d004      	beq.n	80080aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80080aa:	78bb      	ldrb	r3, [r7, #2]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d102      	bne.n	80080b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d101      	bne.n	80080c4 <HAL_PCD_EP_Open+0xaa>
 80080c0:	2302      	movs	r3, #2
 80080c2:	e00e      	b.n	80080e2 <HAL_PCD_EP_Open+0xc8>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68f9      	ldr	r1, [r7, #12]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f002 fdd8 	bl	800ac88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80080e0:	7afb      	ldrb	r3, [r7, #11]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80080f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	da0f      	bge.n	800811e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	f003 020f 	and.w	r2, r3, #15
 8008104:	4613      	mov	r3, r2
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	3338      	adds	r3, #56	; 0x38
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	4413      	add	r3, r2
 8008112:	3304      	adds	r3, #4
 8008114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	705a      	strb	r2, [r3, #1]
 800811c:	e00f      	b.n	800813e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800811e:	78fb      	ldrb	r3, [r7, #3]
 8008120:	f003 020f 	and.w	r2, r3, #15
 8008124:	4613      	mov	r3, r2
 8008126:	00db      	lsls	r3, r3, #3
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	4413      	add	r3, r2
 8008134:	3304      	adds	r3, #4
 8008136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800813e:	78fb      	ldrb	r3, [r7, #3]
 8008140:	f003 030f 	and.w	r3, r3, #15
 8008144:	b2da      	uxtb	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_PCD_EP_Close+0x6e>
 8008154:	2302      	movs	r3, #2
 8008156:	e00e      	b.n	8008176 <HAL_PCD_EP_Close+0x8c>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68f9      	ldr	r1, [r7, #12]
 8008166:	4618      	mov	r0, r3
 8008168:	f002 fe16 	bl	800ad98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b086      	sub	sp, #24
 8008182:	af00      	add	r7, sp, #0
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
 800818a:	460b      	mov	r3, r1
 800818c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800818e:	7afb      	ldrb	r3, [r7, #11]
 8008190:	f003 020f 	and.w	r2, r3, #15
 8008194:	4613      	mov	r3, r2
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	4413      	add	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	3304      	adds	r3, #4
 80081a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2200      	movs	r2, #0
 80081b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2200      	movs	r2, #0
 80081be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081c0:	7afb      	ldrb	r3, [r7, #11]
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d102      	bne.n	80081da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80081da:	7afb      	ldrb	r3, [r7, #11]
 80081dc:	f003 030f 	and.w	r3, r3, #15
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d109      	bne.n	80081f8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	461a      	mov	r2, r3
 80081f0:	6979      	ldr	r1, [r7, #20]
 80081f2:	f003 f8f5 	bl	800b3e0 <USB_EP0StartXfer>
 80081f6:	e008      	b.n	800820a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	461a      	mov	r2, r3
 8008204:	6979      	ldr	r1, [r7, #20]
 8008206:	f002 fea3 	bl	800af50 <USB_EPStartXfer>
  }

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	f003 020f 	and.w	r2, r3, #15
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	4613      	mov	r3, r2
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008236:	681b      	ldr	r3, [r3, #0]
}
 8008238:	4618      	mov	r0, r3
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	607a      	str	r2, [r7, #4]
 800824e:	603b      	str	r3, [r7, #0]
 8008250:	460b      	mov	r3, r1
 8008252:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008254:	7afb      	ldrb	r3, [r7, #11]
 8008256:	f003 020f 	and.w	r2, r3, #15
 800825a:	4613      	mov	r3, r2
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	4413      	add	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	3338      	adds	r3, #56	; 0x38
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	3304      	adds	r3, #4
 800826a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2200      	movs	r2, #0
 800827c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2201      	movs	r2, #1
 8008282:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	f003 030f 	and.w	r3, r3, #15
 800828a:	b2da      	uxtb	r2, r3
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d102      	bne.n	800829e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800829e:	7afb      	ldrb	r3, [r7, #11]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d109      	bne.n	80082bc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	461a      	mov	r2, r3
 80082b4:	6979      	ldr	r1, [r7, #20]
 80082b6:	f003 f893 	bl	800b3e0 <USB_EP0StartXfer>
 80082ba:	e008      	b.n	80082ce <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	461a      	mov	r2, r3
 80082c8:	6979      	ldr	r1, [r7, #20]
 80082ca:	f002 fe41 	bl	800af50 <USB_EPStartXfer>
  }

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80082e4:	78fb      	ldrb	r3, [r7, #3]
 80082e6:	f003 020f 	and.w	r2, r3, #15
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d901      	bls.n	80082f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e050      	b.n	8008398 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80082f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	da0f      	bge.n	800831e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082fe:	78fb      	ldrb	r3, [r7, #3]
 8008300:	f003 020f 	and.w	r2, r3, #15
 8008304:	4613      	mov	r3, r2
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	3338      	adds	r3, #56	; 0x38
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	4413      	add	r3, r2
 8008312:	3304      	adds	r3, #4
 8008314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	705a      	strb	r2, [r3, #1]
 800831c:	e00d      	b.n	800833a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	4613      	mov	r3, r2
 8008322:	00db      	lsls	r3, r3, #3
 8008324:	4413      	add	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	4413      	add	r3, r2
 8008330:	3304      	adds	r3, #4
 8008332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008340:	78fb      	ldrb	r3, [r7, #3]
 8008342:	f003 030f 	and.w	r3, r3, #15
 8008346:	b2da      	uxtb	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008352:	2b01      	cmp	r3, #1
 8008354:	d101      	bne.n	800835a <HAL_PCD_EP_SetStall+0x82>
 8008356:	2302      	movs	r3, #2
 8008358:	e01e      	b.n	8008398 <HAL_PCD_EP_SetStall+0xc0>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68f9      	ldr	r1, [r7, #12]
 8008368:	4618      	mov	r0, r3
 800836a:	f003 fad1 	bl	800b910 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800836e:	78fb      	ldrb	r3, [r7, #3]
 8008370:	f003 030f 	and.w	r3, r3, #15
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	b2d9      	uxtb	r1, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008388:	461a      	mov	r2, r3
 800838a:	f003 fcc1 	bl	800bd10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80083ac:	78fb      	ldrb	r3, [r7, #3]
 80083ae:	f003 020f 	and.w	r2, r3, #15
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d901      	bls.n	80083be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e042      	b.n	8008444 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80083be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	da0f      	bge.n	80083e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	f003 020f 	and.w	r2, r3, #15
 80083cc:	4613      	mov	r3, r2
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	3338      	adds	r3, #56	; 0x38
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	4413      	add	r3, r2
 80083da:	3304      	adds	r3, #4
 80083dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2201      	movs	r2, #1
 80083e2:	705a      	strb	r2, [r3, #1]
 80083e4:	e00f      	b.n	8008406 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	f003 020f 	and.w	r2, r3, #15
 80083ec:	4613      	mov	r3, r2
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	4413      	add	r3, r2
 80083fc:	3304      	adds	r3, #4
 80083fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	f003 030f 	and.w	r3, r3, #15
 8008412:	b2da      	uxtb	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800841e:	2b01      	cmp	r3, #1
 8008420:	d101      	bne.n	8008426 <HAL_PCD_EP_ClrStall+0x86>
 8008422:	2302      	movs	r3, #2
 8008424:	e00e      	b.n	8008444 <HAL_PCD_EP_ClrStall+0xa4>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68f9      	ldr	r1, [r7, #12]
 8008434:	4618      	mov	r0, r3
 8008436:	f003 fad9 	bl	800b9ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800845c:	2b00      	cmp	r3, #0
 800845e:	da0c      	bge.n	800847a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	f003 020f 	and.w	r2, r3, #15
 8008466:	4613      	mov	r3, r2
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	3338      	adds	r3, #56	; 0x38
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	4413      	add	r3, r2
 8008474:	3304      	adds	r3, #4
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e00c      	b.n	8008494 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	f003 020f 	and.w	r2, r3, #15
 8008480:	4613      	mov	r3, r2
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	4413      	add	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	4413      	add	r3, r2
 8008490:	3304      	adds	r3, #4
 8008492:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68f9      	ldr	r1, [r7, #12]
 800849a:	4618      	mov	r0, r3
 800849c:	f003 f8f8 	bl	800b690 <USB_EPStopXfer>
 80084a0:	4603      	mov	r3, r0
 80084a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80084a4:	7afb      	ldrb	r3, [r7, #11]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b08a      	sub	sp, #40	; 0x28
 80084b2:	af02      	add	r7, sp, #8
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	4613      	mov	r3, r2
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	4413      	add	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	3338      	adds	r3, #56	; 0x38
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	4413      	add	r3, r2
 80084d2:	3304      	adds	r3, #4
 80084d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a1a      	ldr	r2, [r3, #32]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d901      	bls.n	80084e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e06c      	b.n	80085c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d902      	bls.n	8008502 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	3303      	adds	r3, #3
 8008506:	089b      	lsrs	r3, r3, #2
 8008508:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800850a:	e02b      	b.n	8008564 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	69fa      	ldr	r2, [r7, #28]
 800851e:	429a      	cmp	r2, r3
 8008520:	d902      	bls.n	8008528 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	3303      	adds	r3, #3
 800852c:	089b      	lsrs	r3, r3, #2
 800852e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6919      	ldr	r1, [r3, #16]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	b2da      	uxtb	r2, r3
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008540:	b2db      	uxtb	r3, r3
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	4603      	mov	r3, r0
 8008546:	6978      	ldr	r0, [r7, #20]
 8008548:	f003 f94c 	bl	800b7e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	691a      	ldr	r2, [r3, #16]
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	441a      	add	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a1a      	ldr	r2, [r3, #32]
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	441a      	add	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	b29b      	uxth	r3, r3
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	429a      	cmp	r2, r3
 8008578:	d809      	bhi.n	800858e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6a1a      	ldr	r2, [r3, #32]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008582:	429a      	cmp	r2, r3
 8008584:	d203      	bcs.n	800858e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1be      	bne.n	800850c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	699a      	ldr	r2, [r3, #24]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	429a      	cmp	r2, r3
 8008598:	d811      	bhi.n	80085be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	f003 030f 	and.w	r3, r3, #15
 80085a0:	2201      	movs	r2, #1
 80085a2:	fa02 f303 	lsl.w	r3, r2, r3
 80085a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	43db      	mvns	r3, r3
 80085b4:	6939      	ldr	r1, [r7, #16]
 80085b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085ba:	4013      	ands	r3, r2
 80085bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3720      	adds	r7, #32
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b088      	sub	sp, #32
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	333c      	adds	r3, #60	; 0x3c
 80085e0:	3304      	adds	r3, #4
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d17b      	bne.n	80086f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f003 0308 	and.w	r3, r3, #8
 8008604:	2b00      	cmp	r3, #0
 8008606:	d015      	beq.n	8008634 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	4a61      	ldr	r2, [pc, #388]	; (8008790 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800860c:	4293      	cmp	r3, r2
 800860e:	f240 80b9 	bls.w	8008784 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 80b3 	beq.w	8008784 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862a:	461a      	mov	r2, r3
 800862c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008630:	6093      	str	r3, [r2, #8]
 8008632:	e0a7      	b.n	8008784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b00      	cmp	r3, #0
 800863c:	d009      	beq.n	8008652 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	4413      	add	r3, r2
 8008646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864a:	461a      	mov	r2, r3
 800864c:	2320      	movs	r3, #32
 800864e:	6093      	str	r3, [r2, #8]
 8008650:	e098      	b.n	8008784 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008658:	2b00      	cmp	r3, #0
 800865a:	f040 8093 	bne.w	8008784 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	4a4b      	ldr	r2, [pc, #300]	; (8008790 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d90f      	bls.n	8008686 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	4413      	add	r3, r2
 8008678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867c:	461a      	mov	r2, r3
 800867e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008682:	6093      	str	r3, [r2, #8]
 8008684:	e07e      	b.n	8008784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	4613      	mov	r3, r2
 800868a:	00db      	lsls	r3, r3, #3
 800868c:	4413      	add	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	4413      	add	r3, r2
 8008698:	3304      	adds	r3, #4
 800869a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	69da      	ldr	r2, [r3, #28]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	0159      	lsls	r1, r3, #5
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	440b      	add	r3, r1
 80086a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086b2:	1ad2      	subs	r2, r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d114      	bne.n	80086e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80086d0:	461a      	mov	r2, r3
 80086d2:	2101      	movs	r1, #1
 80086d4:	f003 fb1c 	bl	800bd10 <USB_EP0_OutStart>
 80086d8:	e006      	b.n	80086e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	691a      	ldr	r2, [r3, #16]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	441a      	add	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f005 fde0 	bl	800e2b4 <HAL_PCD_DataOutStageCallback>
 80086f4:	e046      	b.n	8008784 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	4a26      	ldr	r2, [pc, #152]	; (8008794 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d124      	bne.n	8008748 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00a      	beq.n	800871e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008714:	461a      	mov	r2, r3
 8008716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800871a:	6093      	str	r3, [r2, #8]
 800871c:	e032      	b.n	8008784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	d008      	beq.n	800873a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008734:	461a      	mov	r2, r3
 8008736:	2320      	movs	r3, #32
 8008738:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f005 fdb7 	bl	800e2b4 <HAL_PCD_DataOutStageCallback>
 8008746:	e01d      	b.n	8008784 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d114      	bne.n	8008778 <PCD_EP_OutXfrComplete_int+0x1b0>
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	4613      	mov	r3, r2
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d108      	bne.n	8008778 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6818      	ldr	r0, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008770:	461a      	mov	r2, r3
 8008772:	2100      	movs	r1, #0
 8008774:	f003 facc 	bl	800bd10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f005 fd98 	bl	800e2b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3720      	adds	r7, #32
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	4f54300a 	.word	0x4f54300a
 8008794:	4f54310a 	.word	0x4f54310a

08008798 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	333c      	adds	r3, #60	; 0x3c
 80087b0:	3304      	adds	r3, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4a15      	ldr	r2, [pc, #84]	; (8008820 <PCD_EP_OutSetupPacket_int+0x88>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d90e      	bls.n	80087ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d009      	beq.n	80087ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e4:	461a      	mov	r2, r3
 80087e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f005 fd4f 	bl	800e290 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4a0a      	ldr	r2, [pc, #40]	; (8008820 <PCD_EP_OutSetupPacket_int+0x88>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d90c      	bls.n	8008814 <PCD_EP_OutSetupPacket_int+0x7c>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d108      	bne.n	8008814 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6818      	ldr	r0, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800880c:	461a      	mov	r2, r3
 800880e:	2101      	movs	r1, #1
 8008810:	f003 fa7e 	bl	800bd10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	4f54300a 	.word	0x4f54300a

08008824 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	70fb      	strb	r3, [r7, #3]
 8008830:	4613      	mov	r3, r2
 8008832:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d107      	bne.n	8008852 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008842:	883b      	ldrh	r3, [r7, #0]
 8008844:	0419      	lsls	r1, r3, #16
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	430a      	orrs	r2, r1
 800884e:	629a      	str	r2, [r3, #40]	; 0x28
 8008850:	e028      	b.n	80088a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008858:	0c1b      	lsrs	r3, r3, #16
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	4413      	add	r3, r2
 800885e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008860:	2300      	movs	r3, #0
 8008862:	73fb      	strb	r3, [r7, #15]
 8008864:	e00d      	b.n	8008882 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	3340      	adds	r3, #64	; 0x40
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	0c1b      	lsrs	r3, r3, #16
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	4413      	add	r3, r2
 800887a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	3301      	adds	r3, #1
 8008880:	73fb      	strb	r3, [r7, #15]
 8008882:	7bfa      	ldrb	r2, [r7, #15]
 8008884:	78fb      	ldrb	r3, [r7, #3]
 8008886:	3b01      	subs	r3, #1
 8008888:	429a      	cmp	r2, r3
 800888a:	d3ec      	bcc.n	8008866 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800888c:	883b      	ldrh	r3, [r7, #0]
 800888e:	0418      	lsls	r0, r3, #16
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6819      	ldr	r1, [r3, #0]
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	3b01      	subs	r3, #1
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	4302      	orrs	r2, r0
 800889c:	3340      	adds	r3, #64	; 0x40
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	440b      	add	r3, r1
 80088a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	460b      	mov	r3, r1
 80088bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	887a      	ldrh	r2, [r7, #2]
 80088c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e267      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d075      	beq.n	80089f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800890a:	4b88      	ldr	r3, [pc, #544]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f003 030c 	and.w	r3, r3, #12
 8008912:	2b04      	cmp	r3, #4
 8008914:	d00c      	beq.n	8008930 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008916:	4b85      	ldr	r3, [pc, #532]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800891e:	2b08      	cmp	r3, #8
 8008920:	d112      	bne.n	8008948 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008922:	4b82      	ldr	r3, [pc, #520]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800892a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800892e:	d10b      	bne.n	8008948 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008930:	4b7e      	ldr	r3, [pc, #504]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d05b      	beq.n	80089f4 <HAL_RCC_OscConfig+0x108>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d157      	bne.n	80089f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e242      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008950:	d106      	bne.n	8008960 <HAL_RCC_OscConfig+0x74>
 8008952:	4b76      	ldr	r3, [pc, #472]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a75      	ldr	r2, [pc, #468]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800895c:	6013      	str	r3, [r2, #0]
 800895e:	e01d      	b.n	800899c <HAL_RCC_OscConfig+0xb0>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008968:	d10c      	bne.n	8008984 <HAL_RCC_OscConfig+0x98>
 800896a:	4b70      	ldr	r3, [pc, #448]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a6f      	ldr	r2, [pc, #444]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	4b6d      	ldr	r3, [pc, #436]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a6c      	ldr	r2, [pc, #432]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 800897c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	e00b      	b.n	800899c <HAL_RCC_OscConfig+0xb0>
 8008984:	4b69      	ldr	r3, [pc, #420]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a68      	ldr	r2, [pc, #416]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 800898a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	4b66      	ldr	r3, [pc, #408]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a65      	ldr	r2, [pc, #404]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800899a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d013      	beq.n	80089cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089a4:	f7fb fd02 	bl	80043ac <HAL_GetTick>
 80089a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089aa:	e008      	b.n	80089be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089ac:	f7fb fcfe 	bl	80043ac <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b64      	cmp	r3, #100	; 0x64
 80089b8:	d901      	bls.n	80089be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e207      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089be:	4b5b      	ldr	r3, [pc, #364]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d0f0      	beq.n	80089ac <HAL_RCC_OscConfig+0xc0>
 80089ca:	e014      	b.n	80089f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089cc:	f7fb fcee 	bl	80043ac <HAL_GetTick>
 80089d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089d2:	e008      	b.n	80089e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089d4:	f7fb fcea 	bl	80043ac <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	2b64      	cmp	r3, #100	; 0x64
 80089e0:	d901      	bls.n	80089e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e1f3      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089e6:	4b51      	ldr	r3, [pc, #324]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1f0      	bne.n	80089d4 <HAL_RCC_OscConfig+0xe8>
 80089f2:	e000      	b.n	80089f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d063      	beq.n	8008aca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a02:	4b4a      	ldr	r3, [pc, #296]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f003 030c 	and.w	r3, r3, #12
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00b      	beq.n	8008a26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a0e:	4b47      	ldr	r3, [pc, #284]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a16:	2b08      	cmp	r3, #8
 8008a18:	d11c      	bne.n	8008a54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a1a:	4b44      	ldr	r3, [pc, #272]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d116      	bne.n	8008a54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a26:	4b41      	ldr	r3, [pc, #260]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d005      	beq.n	8008a3e <HAL_RCC_OscConfig+0x152>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d001      	beq.n	8008a3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e1c7      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a3e:	4b3b      	ldr	r3, [pc, #236]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	00db      	lsls	r3, r3, #3
 8008a4c:	4937      	ldr	r1, [pc, #220]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a52:	e03a      	b.n	8008aca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d020      	beq.n	8008a9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a5c:	4b34      	ldr	r3, [pc, #208]	; (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008a5e:	2201      	movs	r2, #1
 8008a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a62:	f7fb fca3 	bl	80043ac <HAL_GetTick>
 8008a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a68:	e008      	b.n	8008a7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a6a:	f7fb fc9f 	bl	80043ac <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d901      	bls.n	8008a7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e1a8      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a7c:	4b2b      	ldr	r3, [pc, #172]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0302 	and.w	r3, r3, #2
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d0f0      	beq.n	8008a6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a88:	4b28      	ldr	r3, [pc, #160]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	00db      	lsls	r3, r3, #3
 8008a96:	4925      	ldr	r1, [pc, #148]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	600b      	str	r3, [r1, #0]
 8008a9c:	e015      	b.n	8008aca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a9e:	4b24      	ldr	r3, [pc, #144]	; (8008b30 <HAL_RCC_OscConfig+0x244>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa4:	f7fb fc82 	bl	80043ac <HAL_GetTick>
 8008aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aaa:	e008      	b.n	8008abe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008aac:	f7fb fc7e 	bl	80043ac <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d901      	bls.n	8008abe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e187      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008abe:	4b1b      	ldr	r3, [pc, #108]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0302 	and.w	r3, r3, #2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1f0      	bne.n	8008aac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0308 	and.w	r3, r3, #8
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d036      	beq.n	8008b44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d016      	beq.n	8008b0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ade:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <HAL_RCC_OscConfig+0x248>)
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ae4:	f7fb fc62 	bl	80043ac <HAL_GetTick>
 8008ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008aea:	e008      	b.n	8008afe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008aec:	f7fb fc5e 	bl	80043ac <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d901      	bls.n	8008afe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e167      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008afe:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <HAL_RCC_OscConfig+0x240>)
 8008b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0f0      	beq.n	8008aec <HAL_RCC_OscConfig+0x200>
 8008b0a:	e01b      	b.n	8008b44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b0c:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <HAL_RCC_OscConfig+0x248>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b12:	f7fb fc4b 	bl	80043ac <HAL_GetTick>
 8008b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b18:	e00e      	b.n	8008b38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b1a:	f7fb fc47 	bl	80043ac <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d907      	bls.n	8008b38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e150      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
 8008b2c:	40023800 	.word	0x40023800
 8008b30:	42470000 	.word	0x42470000
 8008b34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b38:	4b88      	ldr	r3, [pc, #544]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1ea      	bne.n	8008b1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8097 	beq.w	8008c80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b52:	2300      	movs	r3, #0
 8008b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b56:	4b81      	ldr	r3, [pc, #516]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10f      	bne.n	8008b82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b62:	2300      	movs	r3, #0
 8008b64:	60bb      	str	r3, [r7, #8]
 8008b66:	4b7d      	ldr	r3, [pc, #500]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6a:	4a7c      	ldr	r2, [pc, #496]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b70:	6413      	str	r3, [r2, #64]	; 0x40
 8008b72:	4b7a      	ldr	r3, [pc, #488]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b7a:	60bb      	str	r3, [r7, #8]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b82:	4b77      	ldr	r3, [pc, #476]	; (8008d60 <HAL_RCC_OscConfig+0x474>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d118      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b8e:	4b74      	ldr	r3, [pc, #464]	; (8008d60 <HAL_RCC_OscConfig+0x474>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a73      	ldr	r2, [pc, #460]	; (8008d60 <HAL_RCC_OscConfig+0x474>)
 8008b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b9a:	f7fb fc07 	bl	80043ac <HAL_GetTick>
 8008b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ba0:	e008      	b.n	8008bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ba2:	f7fb fc03 	bl	80043ac <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d901      	bls.n	8008bb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e10c      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bb4:	4b6a      	ldr	r3, [pc, #424]	; (8008d60 <HAL_RCC_OscConfig+0x474>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0f0      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d106      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x2ea>
 8008bc8:	4b64      	ldr	r3, [pc, #400]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bcc:	4a63      	ldr	r2, [pc, #396]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008bce:	f043 0301 	orr.w	r3, r3, #1
 8008bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8008bd4:	e01c      	b.n	8008c10 <HAL_RCC_OscConfig+0x324>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	2b05      	cmp	r3, #5
 8008bdc:	d10c      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x30c>
 8008bde:	4b5f      	ldr	r3, [pc, #380]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be2:	4a5e      	ldr	r2, [pc, #376]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008be4:	f043 0304 	orr.w	r3, r3, #4
 8008be8:	6713      	str	r3, [r2, #112]	; 0x70
 8008bea:	4b5c      	ldr	r3, [pc, #368]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bee:	4a5b      	ldr	r2, [pc, #364]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008bf0:	f043 0301 	orr.w	r3, r3, #1
 8008bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8008bf6:	e00b      	b.n	8008c10 <HAL_RCC_OscConfig+0x324>
 8008bf8:	4b58      	ldr	r3, [pc, #352]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfc:	4a57      	ldr	r2, [pc, #348]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008bfe:	f023 0301 	bic.w	r3, r3, #1
 8008c02:	6713      	str	r3, [r2, #112]	; 0x70
 8008c04:	4b55      	ldr	r3, [pc, #340]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c08:	4a54      	ldr	r2, [pc, #336]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008c0a:	f023 0304 	bic.w	r3, r3, #4
 8008c0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d015      	beq.n	8008c44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c18:	f7fb fbc8 	bl	80043ac <HAL_GetTick>
 8008c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c1e:	e00a      	b.n	8008c36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c20:	f7fb fbc4 	bl	80043ac <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e0cb      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c36:	4b49      	ldr	r3, [pc, #292]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d0ee      	beq.n	8008c20 <HAL_RCC_OscConfig+0x334>
 8008c42:	e014      	b.n	8008c6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c44:	f7fb fbb2 	bl	80043ac <HAL_GetTick>
 8008c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c4a:	e00a      	b.n	8008c62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c4c:	f7fb fbae 	bl	80043ac <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e0b5      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c62:	4b3e      	ldr	r3, [pc, #248]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c66:	f003 0302 	and.w	r3, r3, #2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1ee      	bne.n	8008c4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d105      	bne.n	8008c80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c74:	4b39      	ldr	r3, [pc, #228]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c78:	4a38      	ldr	r2, [pc, #224]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 80a1 	beq.w	8008dcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c8a:	4b34      	ldr	r3, [pc, #208]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f003 030c 	and.w	r3, r3, #12
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d05c      	beq.n	8008d50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d141      	bne.n	8008d22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c9e:	4b31      	ldr	r3, [pc, #196]	; (8008d64 <HAL_RCC_OscConfig+0x478>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ca4:	f7fb fb82 	bl	80043ac <HAL_GetTick>
 8008ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008caa:	e008      	b.n	8008cbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cac:	f7fb fb7e 	bl	80043ac <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d901      	bls.n	8008cbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e087      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cbe:	4b27      	ldr	r3, [pc, #156]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f0      	bne.n	8008cac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	69da      	ldr	r2, [r3, #28]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	019b      	lsls	r3, r3, #6
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce0:	085b      	lsrs	r3, r3, #1
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	041b      	lsls	r3, r3, #16
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	061b      	lsls	r3, r3, #24
 8008cee:	491b      	ldr	r1, [pc, #108]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cf4:	4b1b      	ldr	r3, [pc, #108]	; (8008d64 <HAL_RCC_OscConfig+0x478>)
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cfa:	f7fb fb57 	bl	80043ac <HAL_GetTick>
 8008cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d00:	e008      	b.n	8008d14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d02:	f7fb fb53 	bl	80043ac <HAL_GetTick>
 8008d06:	4602      	mov	r2, r0
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d901      	bls.n	8008d14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e05c      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d14:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0f0      	beq.n	8008d02 <HAL_RCC_OscConfig+0x416>
 8008d20:	e054      	b.n	8008dcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d22:	4b10      	ldr	r3, [pc, #64]	; (8008d64 <HAL_RCC_OscConfig+0x478>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d28:	f7fb fb40 	bl	80043ac <HAL_GetTick>
 8008d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d2e:	e008      	b.n	8008d42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d30:	f7fb fb3c 	bl	80043ac <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e045      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d42:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <HAL_RCC_OscConfig+0x470>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1f0      	bne.n	8008d30 <HAL_RCC_OscConfig+0x444>
 8008d4e:	e03d      	b.n	8008dcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d107      	bne.n	8008d68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e038      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
 8008d5c:	40023800 	.word	0x40023800
 8008d60:	40007000 	.word	0x40007000
 8008d64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008d68:	4b1b      	ldr	r3, [pc, #108]	; (8008dd8 <HAL_RCC_OscConfig+0x4ec>)
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d028      	beq.n	8008dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d121      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d11a      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008d98:	4013      	ands	r3, r2
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d111      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dae:	085b      	lsrs	r3, r3, #1
 8008db0:	3b01      	subs	r3, #1
 8008db2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d107      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d001      	beq.n	8008dcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e000      	b.n	8008dce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3718      	adds	r7, #24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	40023800 	.word	0x40023800

08008ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e0cc      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008df0:	4b68      	ldr	r3, [pc, #416]	; (8008f94 <HAL_RCC_ClockConfig+0x1b8>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d90c      	bls.n	8008e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dfe:	4b65      	ldr	r3, [pc, #404]	; (8008f94 <HAL_RCC_ClockConfig+0x1b8>)
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	b2d2      	uxtb	r2, r2
 8008e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e06:	4b63      	ldr	r3, [pc, #396]	; (8008f94 <HAL_RCC_ClockConfig+0x1b8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 030f 	and.w	r3, r3, #15
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d001      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e0b8      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0302 	and.w	r3, r3, #2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d020      	beq.n	8008e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0304 	and.w	r3, r3, #4
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d005      	beq.n	8008e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e30:	4b59      	ldr	r3, [pc, #356]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	4a58      	ldr	r2, [pc, #352]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0308 	and.w	r3, r3, #8
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e48:	4b53      	ldr	r3, [pc, #332]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	4a52      	ldr	r2, [pc, #328]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e54:	4b50      	ldr	r3, [pc, #320]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	494d      	ldr	r1, [pc, #308]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d044      	beq.n	8008efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d107      	bne.n	8008e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e7a:	4b47      	ldr	r3, [pc, #284]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d119      	bne.n	8008eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e07f      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d003      	beq.n	8008e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d107      	bne.n	8008eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e9a:	4b3f      	ldr	r3, [pc, #252]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d109      	bne.n	8008eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e06f      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eaa:	4b3b      	ldr	r3, [pc, #236]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e067      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008eba:	4b37      	ldr	r3, [pc, #220]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f023 0203 	bic.w	r2, r3, #3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	4934      	ldr	r1, [pc, #208]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ecc:	f7fb fa6e 	bl	80043ac <HAL_GetTick>
 8008ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ed2:	e00a      	b.n	8008eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ed4:	f7fb fa6a 	bl	80043ac <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d901      	bls.n	8008eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e04f      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eea:	4b2b      	ldr	r3, [pc, #172]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f003 020c 	and.w	r2, r3, #12
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d1eb      	bne.n	8008ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008efc:	4b25      	ldr	r3, [pc, #148]	; (8008f94 <HAL_RCC_ClockConfig+0x1b8>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 030f 	and.w	r3, r3, #15
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d20c      	bcs.n	8008f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f0a:	4b22      	ldr	r3, [pc, #136]	; (8008f94 <HAL_RCC_ClockConfig+0x1b8>)
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	b2d2      	uxtb	r2, r2
 8008f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f12:	4b20      	ldr	r3, [pc, #128]	; (8008f94 <HAL_RCC_ClockConfig+0x1b8>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 030f 	and.w	r3, r3, #15
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d001      	beq.n	8008f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e032      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d008      	beq.n	8008f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f30:	4b19      	ldr	r3, [pc, #100]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	4916      	ldr	r1, [pc, #88]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0308 	and.w	r3, r3, #8
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d009      	beq.n	8008f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f4e:	4b12      	ldr	r3, [pc, #72]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	490e      	ldr	r1, [pc, #56]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f62:	f000 f821 	bl	8008fa8 <HAL_RCC_GetSysClockFreq>
 8008f66:	4602      	mov	r2, r0
 8008f68:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <HAL_RCC_ClockConfig+0x1bc>)
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	091b      	lsrs	r3, r3, #4
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	490a      	ldr	r1, [pc, #40]	; (8008f9c <HAL_RCC_ClockConfig+0x1c0>)
 8008f74:	5ccb      	ldrb	r3, [r1, r3]
 8008f76:	fa22 f303 	lsr.w	r3, r2, r3
 8008f7a:	4a09      	ldr	r2, [pc, #36]	; (8008fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8008f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f7e:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fb f9ce 	bl	8004324 <HAL_InitTick>

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	40023c00 	.word	0x40023c00
 8008f98:	40023800 	.word	0x40023800
 8008f9c:	08014808 	.word	0x08014808
 8008fa0:	20000014 	.word	0x20000014
 8008fa4:	20000018 	.word	0x20000018

08008fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fac:	b094      	sub	sp, #80	; 0x50
 8008fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fb8:	2300      	movs	r3, #0
 8008fba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fc0:	4b79      	ldr	r3, [pc, #484]	; (80091a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f003 030c 	and.w	r3, r3, #12
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d00d      	beq.n	8008fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8008fcc:	2b08      	cmp	r3, #8
 8008fce:	f200 80e1 	bhi.w	8009194 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <HAL_RCC_GetSysClockFreq+0x34>
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d003      	beq.n	8008fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008fda:	e0db      	b.n	8009194 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fdc:	4b73      	ldr	r3, [pc, #460]	; (80091ac <HAL_RCC_GetSysClockFreq+0x204>)
 8008fde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008fe0:	e0db      	b.n	800919a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008fe2:	4b73      	ldr	r3, [pc, #460]	; (80091b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008fe4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fe6:	e0d8      	b.n	800919a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008fe8:	4b6f      	ldr	r3, [pc, #444]	; (80091a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ff0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ff2:	4b6d      	ldr	r3, [pc, #436]	; (80091a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d063      	beq.n	80090c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ffe:	4b6a      	ldr	r3, [pc, #424]	; (80091a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	099b      	lsrs	r3, r3, #6
 8009004:	2200      	movs	r2, #0
 8009006:	63bb      	str	r3, [r7, #56]	; 0x38
 8009008:	63fa      	str	r2, [r7, #60]	; 0x3c
 800900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009010:	633b      	str	r3, [r7, #48]	; 0x30
 8009012:	2300      	movs	r3, #0
 8009014:	637b      	str	r3, [r7, #52]	; 0x34
 8009016:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800901a:	4622      	mov	r2, r4
 800901c:	462b      	mov	r3, r5
 800901e:	f04f 0000 	mov.w	r0, #0
 8009022:	f04f 0100 	mov.w	r1, #0
 8009026:	0159      	lsls	r1, r3, #5
 8009028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800902c:	0150      	lsls	r0, r2, #5
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4621      	mov	r1, r4
 8009034:	1a51      	subs	r1, r2, r1
 8009036:	6139      	str	r1, [r7, #16]
 8009038:	4629      	mov	r1, r5
 800903a:	eb63 0301 	sbc.w	r3, r3, r1
 800903e:	617b      	str	r3, [r7, #20]
 8009040:	f04f 0200 	mov.w	r2, #0
 8009044:	f04f 0300 	mov.w	r3, #0
 8009048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800904c:	4659      	mov	r1, fp
 800904e:	018b      	lsls	r3, r1, #6
 8009050:	4651      	mov	r1, sl
 8009052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009056:	4651      	mov	r1, sl
 8009058:	018a      	lsls	r2, r1, #6
 800905a:	4651      	mov	r1, sl
 800905c:	ebb2 0801 	subs.w	r8, r2, r1
 8009060:	4659      	mov	r1, fp
 8009062:	eb63 0901 	sbc.w	r9, r3, r1
 8009066:	f04f 0200 	mov.w	r2, #0
 800906a:	f04f 0300 	mov.w	r3, #0
 800906e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800907a:	4690      	mov	r8, r2
 800907c:	4699      	mov	r9, r3
 800907e:	4623      	mov	r3, r4
 8009080:	eb18 0303 	adds.w	r3, r8, r3
 8009084:	60bb      	str	r3, [r7, #8]
 8009086:	462b      	mov	r3, r5
 8009088:	eb49 0303 	adc.w	r3, r9, r3
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	f04f 0200 	mov.w	r2, #0
 8009092:	f04f 0300 	mov.w	r3, #0
 8009096:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800909a:	4629      	mov	r1, r5
 800909c:	024b      	lsls	r3, r1, #9
 800909e:	4621      	mov	r1, r4
 80090a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80090a4:	4621      	mov	r1, r4
 80090a6:	024a      	lsls	r2, r1, #9
 80090a8:	4610      	mov	r0, r2
 80090aa:	4619      	mov	r1, r3
 80090ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ae:	2200      	movs	r2, #0
 80090b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80090b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090b8:	f7f7 fe06 	bl	8000cc8 <__aeabi_uldivmod>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4613      	mov	r3, r2
 80090c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090c4:	e058      	b.n	8009178 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090c6:	4b38      	ldr	r3, [pc, #224]	; (80091a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	099b      	lsrs	r3, r3, #6
 80090cc:	2200      	movs	r2, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	4611      	mov	r1, r2
 80090d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80090d6:	623b      	str	r3, [r7, #32]
 80090d8:	2300      	movs	r3, #0
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
 80090dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	f04f 0000 	mov.w	r0, #0
 80090e8:	f04f 0100 	mov.w	r1, #0
 80090ec:	0159      	lsls	r1, r3, #5
 80090ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090f2:	0150      	lsls	r0, r2, #5
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4641      	mov	r1, r8
 80090fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80090fe:	4649      	mov	r1, r9
 8009100:	eb63 0b01 	sbc.w	fp, r3, r1
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	f04f 0300 	mov.w	r3, #0
 800910c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009110:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009114:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009118:	ebb2 040a 	subs.w	r4, r2, sl
 800911c:	eb63 050b 	sbc.w	r5, r3, fp
 8009120:	f04f 0200 	mov.w	r2, #0
 8009124:	f04f 0300 	mov.w	r3, #0
 8009128:	00eb      	lsls	r3, r5, #3
 800912a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800912e:	00e2      	lsls	r2, r4, #3
 8009130:	4614      	mov	r4, r2
 8009132:	461d      	mov	r5, r3
 8009134:	4643      	mov	r3, r8
 8009136:	18e3      	adds	r3, r4, r3
 8009138:	603b      	str	r3, [r7, #0]
 800913a:	464b      	mov	r3, r9
 800913c:	eb45 0303 	adc.w	r3, r5, r3
 8009140:	607b      	str	r3, [r7, #4]
 8009142:	f04f 0200 	mov.w	r2, #0
 8009146:	f04f 0300 	mov.w	r3, #0
 800914a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800914e:	4629      	mov	r1, r5
 8009150:	028b      	lsls	r3, r1, #10
 8009152:	4621      	mov	r1, r4
 8009154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009158:	4621      	mov	r1, r4
 800915a:	028a      	lsls	r2, r1, #10
 800915c:	4610      	mov	r0, r2
 800915e:	4619      	mov	r1, r3
 8009160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009162:	2200      	movs	r2, #0
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	61fa      	str	r2, [r7, #28]
 8009168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800916c:	f7f7 fdac 	bl	8000cc8 <__aeabi_uldivmod>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4613      	mov	r3, r2
 8009176:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009178:	4b0b      	ldr	r3, [pc, #44]	; (80091a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	0c1b      	lsrs	r3, r3, #16
 800917e:	f003 0303 	and.w	r3, r3, #3
 8009182:	3301      	adds	r3, #1
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800918a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800918c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009190:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009192:	e002      	b.n	800919a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009194:	4b05      	ldr	r3, [pc, #20]	; (80091ac <HAL_RCC_GetSysClockFreq+0x204>)
 8009196:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800919a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800919c:	4618      	mov	r0, r3
 800919e:	3750      	adds	r7, #80	; 0x50
 80091a0:	46bd      	mov	sp, r7
 80091a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091a6:	bf00      	nop
 80091a8:	40023800 	.word	0x40023800
 80091ac:	00f42400 	.word	0x00f42400
 80091b0:	007a1200 	.word	0x007a1200

080091b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091b4:	b480      	push	{r7}
 80091b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091b8:	4b03      	ldr	r3, [pc, #12]	; (80091c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80091ba:	681b      	ldr	r3, [r3, #0]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	20000014 	.word	0x20000014

080091cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80091d0:	f7ff fff0 	bl	80091b4 <HAL_RCC_GetHCLKFreq>
 80091d4:	4602      	mov	r2, r0
 80091d6:	4b05      	ldr	r3, [pc, #20]	; (80091ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	0a9b      	lsrs	r3, r3, #10
 80091dc:	f003 0307 	and.w	r3, r3, #7
 80091e0:	4903      	ldr	r1, [pc, #12]	; (80091f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091e2:	5ccb      	ldrb	r3, [r1, r3]
 80091e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	40023800 	.word	0x40023800
 80091f0:	08014818 	.word	0x08014818

080091f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e07b      	b.n	80092fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920a:	2b00      	cmp	r3, #0
 800920c:	d108      	bne.n	8009220 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009216:	d009      	beq.n	800922c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	61da      	str	r2, [r3, #28]
 800921e:	e005      	b.n	800922c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d106      	bne.n	800924c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7fa fcf4 	bl	8003c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2202      	movs	r2, #2
 8009250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009262:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009274:	431a      	orrs	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	431a      	orrs	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	431a      	orrs	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800929c:	431a      	orrs	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a1b      	ldr	r3, [r3, #32]
 80092ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b0:	ea42 0103 	orr.w	r1, r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	430a      	orrs	r2, r1
 80092c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	0c1b      	lsrs	r3, r3, #16
 80092ca:	f003 0104 	and.w	r1, r3, #4
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	f003 0210 	and.w	r2, r3, #16
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	69da      	ldr	r2, [r3, #28]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b088      	sub	sp, #32
 800930a:	af00      	add	r7, sp, #0
 800930c:	60f8      	str	r0, [r7, #12]
 800930e:	60b9      	str	r1, [r7, #8]
 8009310:	603b      	str	r3, [r7, #0]
 8009312:	4613      	mov	r3, r2
 8009314:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009320:	2b01      	cmp	r3, #1
 8009322:	d101      	bne.n	8009328 <HAL_SPI_Transmit+0x22>
 8009324:	2302      	movs	r3, #2
 8009326:	e126      	b.n	8009576 <HAL_SPI_Transmit+0x270>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009330:	f7fb f83c 	bl	80043ac <HAL_GetTick>
 8009334:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009336:	88fb      	ldrh	r3, [r7, #6]
 8009338:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b01      	cmp	r3, #1
 8009344:	d002      	beq.n	800934c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009346:	2302      	movs	r3, #2
 8009348:	77fb      	strb	r3, [r7, #31]
    goto error;
 800934a:	e10b      	b.n	8009564 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <HAL_SPI_Transmit+0x52>
 8009352:	88fb      	ldrh	r3, [r7, #6]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800935c:	e102      	b.n	8009564 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2203      	movs	r2, #3
 8009362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	88fa      	ldrh	r2, [r7, #6]
 8009376:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	88fa      	ldrh	r2, [r7, #6]
 800937c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093a4:	d10f      	bne.n	80093c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d0:	2b40      	cmp	r3, #64	; 0x40
 80093d2:	d007      	beq.n	80093e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ec:	d14b      	bne.n	8009486 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d002      	beq.n	80093fc <HAL_SPI_Transmit+0xf6>
 80093f6:	8afb      	ldrh	r3, [r7, #22]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d13e      	bne.n	800947a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009400:	881a      	ldrh	r2, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940c:	1c9a      	adds	r2, r3, #2
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009416:	b29b      	uxth	r3, r3
 8009418:	3b01      	subs	r3, #1
 800941a:	b29a      	uxth	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009420:	e02b      	b.n	800947a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b02      	cmp	r3, #2
 800942e:	d112      	bne.n	8009456 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009434:	881a      	ldrh	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009440:	1c9a      	adds	r2, r3, #2
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800944a:	b29b      	uxth	r3, r3
 800944c:	3b01      	subs	r3, #1
 800944e:	b29a      	uxth	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	86da      	strh	r2, [r3, #54]	; 0x36
 8009454:	e011      	b.n	800947a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009456:	f7fa ffa9 	bl	80043ac <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	429a      	cmp	r2, r3
 8009464:	d803      	bhi.n	800946e <HAL_SPI_Transmit+0x168>
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946c:	d102      	bne.n	8009474 <HAL_SPI_Transmit+0x16e>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009478:	e074      	b.n	8009564 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800947e:	b29b      	uxth	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1ce      	bne.n	8009422 <HAL_SPI_Transmit+0x11c>
 8009484:	e04c      	b.n	8009520 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <HAL_SPI_Transmit+0x18e>
 800948e:	8afb      	ldrh	r3, [r7, #22]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d140      	bne.n	8009516 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	330c      	adds	r3, #12
 800949e:	7812      	ldrb	r2, [r2, #0]
 80094a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	3b01      	subs	r3, #1
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80094ba:	e02c      	b.n	8009516 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d113      	bne.n	80094f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	330c      	adds	r3, #12
 80094d4:	7812      	ldrb	r2, [r2, #0]
 80094d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	3b01      	subs	r3, #1
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80094f0:	e011      	b.n	8009516 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094f2:	f7fa ff5b 	bl	80043ac <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d803      	bhi.n	800950a <HAL_SPI_Transmit+0x204>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009508:	d102      	bne.n	8009510 <HAL_SPI_Transmit+0x20a>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d102      	bne.n	8009516 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009514:	e026      	b.n	8009564 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800951a:	b29b      	uxth	r3, r3
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1cd      	bne.n	80094bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009520:	69ba      	ldr	r2, [r7, #24]
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 fb73 	bl	8009c10 <SPI_EndRxTxTransaction>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10a      	bne.n	8009554 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800953e:	2300      	movs	r3, #0
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	613b      	str	r3, [r7, #16]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	613b      	str	r3, [r7, #16]
 8009552:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	77fb      	strb	r3, [r7, #31]
 8009560:	e000      	b.n	8009564 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009562:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009574:	7ffb      	ldrb	r3, [r7, #31]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3720      	adds	r7, #32
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b08c      	sub	sp, #48	; 0x30
 8009582:	af00      	add	r7, sp, #0
 8009584:	60f8      	str	r0, [r7, #12]
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	607a      	str	r2, [r7, #4]
 800958a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800958c:	2301      	movs	r3, #1
 800958e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800959c:	2b01      	cmp	r3, #1
 800959e:	d101      	bne.n	80095a4 <HAL_SPI_TransmitReceive+0x26>
 80095a0:	2302      	movs	r3, #2
 80095a2:	e18a      	b.n	80098ba <HAL_SPI_TransmitReceive+0x33c>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095ac:	f7fa fefe 	bl	80043ac <HAL_GetTick>
 80095b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80095c2:	887b      	ldrh	r3, [r7, #2]
 80095c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80095c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d00f      	beq.n	80095ee <HAL_SPI_TransmitReceive+0x70>
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095d4:	d107      	bne.n	80095e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d103      	bne.n	80095e6 <HAL_SPI_TransmitReceive+0x68>
 80095de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d003      	beq.n	80095ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80095e6:	2302      	movs	r3, #2
 80095e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80095ec:	e15b      	b.n	80098a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d005      	beq.n	8009600 <HAL_SPI_TransmitReceive+0x82>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <HAL_SPI_TransmitReceive+0x82>
 80095fa:	887b      	ldrh	r3, [r7, #2]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d103      	bne.n	8009608 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009606:	e14e      	b.n	80098a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b04      	cmp	r3, #4
 8009612:	d003      	beq.n	800961c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2205      	movs	r2, #5
 8009618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	887a      	ldrh	r2, [r7, #2]
 800962c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	887a      	ldrh	r2, [r7, #2]
 8009632:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	887a      	ldrh	r2, [r7, #2]
 800963e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	887a      	ldrh	r2, [r7, #2]
 8009644:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965c:	2b40      	cmp	r3, #64	; 0x40
 800965e:	d007      	beq.n	8009670 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800966e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009678:	d178      	bne.n	800976c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <HAL_SPI_TransmitReceive+0x10a>
 8009682:	8b7b      	ldrh	r3, [r7, #26]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d166      	bne.n	8009756 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968c:	881a      	ldrh	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009698:	1c9a      	adds	r2, r3, #2
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	3b01      	subs	r3, #1
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096ac:	e053      	b.n	8009756 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f003 0302 	and.w	r3, r3, #2
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d11b      	bne.n	80096f4 <HAL_SPI_TransmitReceive+0x176>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d016      	beq.n	80096f4 <HAL_SPI_TransmitReceive+0x176>
 80096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d113      	bne.n	80096f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d0:	881a      	ldrh	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096dc:	1c9a      	adds	r2, r3, #2
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	3b01      	subs	r3, #1
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096f0:	2300      	movs	r3, #0
 80096f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d119      	bne.n	8009736 <HAL_SPI_TransmitReceive+0x1b8>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009706:	b29b      	uxth	r3, r3
 8009708:	2b00      	cmp	r3, #0
 800970a:	d014      	beq.n	8009736 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009716:	b292      	uxth	r2, r2
 8009718:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971e:	1c9a      	adds	r2, r3, #2
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009728:	b29b      	uxth	r3, r3
 800972a:	3b01      	subs	r3, #1
 800972c:	b29a      	uxth	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009732:	2301      	movs	r3, #1
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009736:	f7fa fe39 	bl	80043ac <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009742:	429a      	cmp	r2, r3
 8009744:	d807      	bhi.n	8009756 <HAL_SPI_TransmitReceive+0x1d8>
 8009746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974c:	d003      	beq.n	8009756 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009754:	e0a7      	b.n	80098a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800975a:	b29b      	uxth	r3, r3
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1a6      	bne.n	80096ae <HAL_SPI_TransmitReceive+0x130>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009764:	b29b      	uxth	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1a1      	bne.n	80096ae <HAL_SPI_TransmitReceive+0x130>
 800976a:	e07c      	b.n	8009866 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <HAL_SPI_TransmitReceive+0x1fc>
 8009774:	8b7b      	ldrh	r3, [r7, #26]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d16b      	bne.n	8009852 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	330c      	adds	r3, #12
 8009784:	7812      	ldrb	r2, [r2, #0]
 8009786:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978c:	1c5a      	adds	r2, r3, #1
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009796:	b29b      	uxth	r3, r3
 8009798:	3b01      	subs	r3, #1
 800979a:	b29a      	uxth	r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097a0:	e057      	b.n	8009852 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f003 0302 	and.w	r3, r3, #2
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d11c      	bne.n	80097ea <HAL_SPI_TransmitReceive+0x26c>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d017      	beq.n	80097ea <HAL_SPI_TransmitReceive+0x26c>
 80097ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d114      	bne.n	80097ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	330c      	adds	r3, #12
 80097ca:	7812      	ldrb	r2, [r2, #0]
 80097cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80097e6:	2300      	movs	r3, #0
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d119      	bne.n	800982c <HAL_SPI_TransmitReceive+0x2ae>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d014      	beq.n	800982c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68da      	ldr	r2, [r3, #12]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980c:	b2d2      	uxtb	r2, r2
 800980e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800981e:	b29b      	uxth	r3, r3
 8009820:	3b01      	subs	r3, #1
 8009822:	b29a      	uxth	r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009828:	2301      	movs	r3, #1
 800982a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800982c:	f7fa fdbe 	bl	80043ac <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009838:	429a      	cmp	r2, r3
 800983a:	d803      	bhi.n	8009844 <HAL_SPI_TransmitReceive+0x2c6>
 800983c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009842:	d102      	bne.n	800984a <HAL_SPI_TransmitReceive+0x2cc>
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	2b00      	cmp	r3, #0
 8009848:	d103      	bne.n	8009852 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009850:	e029      	b.n	80098a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009856:	b29b      	uxth	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1a2      	bne.n	80097a2 <HAL_SPI_TransmitReceive+0x224>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009860:	b29b      	uxth	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d19d      	bne.n	80097a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009868:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f9d0 	bl	8009c10 <SPI_EndRxTxTransaction>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d006      	beq.n	8009884 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2220      	movs	r2, #32
 8009880:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009882:	e010      	b.n	80098a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10b      	bne.n	80098a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800988c:	2300      	movs	r3, #0
 800988e:	617b      	str	r3, [r7, #20]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	617b      	str	r3, [r7, #20]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	617b      	str	r3, [r7, #20]
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	e000      	b.n	80098a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80098a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3730      	adds	r7, #48	; 0x30
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
	...

080098c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	099b      	lsrs	r3, r3, #6
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10f      	bne.n	8009908 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	099b      	lsrs	r3, r3, #6
 80098f6:	f003 0301 	and.w	r3, r3, #1
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d004      	beq.n	8009908 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	4798      	blx	r3
    return;
 8009906:	e0d7      	b.n	8009ab8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	085b      	lsrs	r3, r3, #1
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00a      	beq.n	800992a <HAL_SPI_IRQHandler+0x66>
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	09db      	lsrs	r3, r3, #7
 8009918:	f003 0301 	and.w	r3, r3, #1
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	4798      	blx	r3
    return;
 8009928:	e0c6      	b.n	8009ab8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	095b      	lsrs	r3, r3, #5
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10c      	bne.n	8009950 <HAL_SPI_IRQHandler+0x8c>
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	099b      	lsrs	r3, r3, #6
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d106      	bne.n	8009950 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	0a1b      	lsrs	r3, r3, #8
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 80b4 	beq.w	8009ab8 <HAL_SPI_IRQHandler+0x1f4>
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	095b      	lsrs	r3, r3, #5
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 80ad 	beq.w	8009ab8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	099b      	lsrs	r3, r3, #6
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d023      	beq.n	80099b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b03      	cmp	r3, #3
 8009974:	d011      	beq.n	800999a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997a:	f043 0204 	orr.w	r2, r3, #4
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009982:	2300      	movs	r3, #0
 8009984:	617b      	str	r3, [r7, #20]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	617b      	str	r3, [r7, #20]
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	e00b      	b.n	80099b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800999a:	2300      	movs	r3, #0
 800999c:	613b      	str	r3, [r7, #16]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	613b      	str	r3, [r7, #16]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	613b      	str	r3, [r7, #16]
 80099ae:	693b      	ldr	r3, [r7, #16]
        return;
 80099b0:	e082      	b.n	8009ab8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	095b      	lsrs	r3, r3, #5
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d014      	beq.n	80099e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c2:	f043 0201 	orr.w	r2, r3, #1
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80099ca:	2300      	movs	r3, #0
 80099cc:	60fb      	str	r3, [r7, #12]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	60fb      	str	r3, [r7, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	0a1b      	lsrs	r3, r3, #8
 80099ec:	f003 0301 	and.w	r3, r3, #1
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00c      	beq.n	8009a0e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f8:	f043 0208 	orr.w	r2, r3, #8
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a00:	2300      	movs	r3, #0
 8009a02:	60bb      	str	r3, [r7, #8]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	60bb      	str	r3, [r7, #8]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d04f      	beq.n	8009ab6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a24:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	f003 0302 	and.w	r3, r3, #2
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d104      	bne.n	8009a42 <HAL_SPI_IRQHandler+0x17e>
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d034      	beq.n	8009aac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 0203 	bic.w	r2, r2, #3
 8009a50:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d011      	beq.n	8009a7e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a5e:	4a18      	ldr	r2, [pc, #96]	; (8009ac0 <HAL_SPI_IRQHandler+0x1fc>)
 8009a60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fa fde1 	bl	800462e <HAL_DMA_Abort_IT>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d005      	beq.n	8009a7e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d016      	beq.n	8009ab4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a8a:	4a0d      	ldr	r2, [pc, #52]	; (8009ac0 <HAL_SPI_IRQHandler+0x1fc>)
 8009a8c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fa fdcb 	bl	800462e <HAL_DMA_Abort_IT>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00a      	beq.n	8009ab4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009aaa:	e003      	b.n	8009ab4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f809 	bl	8009ac4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009ab2:	e000      	b.n	8009ab6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009ab4:	bf00      	nop
    return;
 8009ab6:	bf00      	nop
  }
}
 8009ab8:	3720      	adds	r7, #32
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	08009ad9 	.word	0x08009ad9

08009ac4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f7ff ffe6 	bl	8009ac4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009af8:	bf00      	nop
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b10:	f7fa fc4c 	bl	80043ac <HAL_GetTick>
 8009b14:	4602      	mov	r2, r0
 8009b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b20:	f7fa fc44 	bl	80043ac <HAL_GetTick>
 8009b24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b26:	4b39      	ldr	r3, [pc, #228]	; (8009c0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	015b      	lsls	r3, r3, #5
 8009b2c:	0d1b      	lsrs	r3, r3, #20
 8009b2e:	69fa      	ldr	r2, [r7, #28]
 8009b30:	fb02 f303 	mul.w	r3, r2, r3
 8009b34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b36:	e054      	b.n	8009be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3e:	d050      	beq.n	8009be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b40:	f7fa fc34 	bl	80043ac <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	69fa      	ldr	r2, [r7, #28]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d902      	bls.n	8009b56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d13d      	bne.n	8009bd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b6e:	d111      	bne.n	8009b94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b78:	d004      	beq.n	8009b84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b82:	d107      	bne.n	8009b94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b9c:	d10f      	bne.n	8009bbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e017      	b.n	8009c02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	4013      	ands	r3, r2
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	bf0c      	ite	eq
 8009bf2:	2301      	moveq	r3, #1
 8009bf4:	2300      	movne	r3, #0
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	79fb      	ldrb	r3, [r7, #7]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d19b      	bne.n	8009b38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3720      	adds	r7, #32
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000014 	.word	0x20000014

08009c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af02      	add	r7, sp, #8
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c1c:	4b1b      	ldr	r3, [pc, #108]	; (8009c8c <SPI_EndRxTxTransaction+0x7c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a1b      	ldr	r2, [pc, #108]	; (8009c90 <SPI_EndRxTxTransaction+0x80>)
 8009c22:	fba2 2303 	umull	r2, r3, r2, r3
 8009c26:	0d5b      	lsrs	r3, r3, #21
 8009c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c2c:	fb02 f303 	mul.w	r3, r2, r3
 8009c30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c3a:	d112      	bne.n	8009c62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2200      	movs	r2, #0
 8009c44:	2180      	movs	r1, #128	; 0x80
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7ff ff5a 	bl	8009b00 <SPI_WaitFlagStateUntilTimeout>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d016      	beq.n	8009c80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c56:	f043 0220 	orr.w	r2, r3, #32
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e00f      	b.n	8009c82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00a      	beq.n	8009c7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c78:	2b80      	cmp	r3, #128	; 0x80
 8009c7a:	d0f2      	beq.n	8009c62 <SPI_EndRxTxTransaction+0x52>
 8009c7c:	e000      	b.n	8009c80 <SPI_EndRxTxTransaction+0x70>
        break;
 8009c7e:	bf00      	nop
  }

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20000014 	.word	0x20000014
 8009c90:	165e9f81 	.word	0x165e9f81

08009c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d101      	bne.n	8009ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e041      	b.n	8009d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d106      	bne.n	8009cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7fa f80a 	bl	8003cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f000 fa96 	bl	800a204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
	...

08009d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d001      	beq.n	8009d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e04e      	b.n	8009dea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68da      	ldr	r2, [r3, #12]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f042 0201 	orr.w	r2, r2, #1
 8009d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a23      	ldr	r2, [pc, #140]	; (8009df8 <HAL_TIM_Base_Start_IT+0xc4>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d022      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d76:	d01d      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a1f      	ldr	r2, [pc, #124]	; (8009dfc <HAL_TIM_Base_Start_IT+0xc8>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d018      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a1e      	ldr	r2, [pc, #120]	; (8009e00 <HAL_TIM_Base_Start_IT+0xcc>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d013      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a1c      	ldr	r2, [pc, #112]	; (8009e04 <HAL_TIM_Base_Start_IT+0xd0>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d00e      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a1b      	ldr	r2, [pc, #108]	; (8009e08 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d009      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a19      	ldr	r2, [pc, #100]	; (8009e0c <HAL_TIM_Base_Start_IT+0xd8>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d004      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0x80>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a18      	ldr	r2, [pc, #96]	; (8009e10 <HAL_TIM_Base_Start_IT+0xdc>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d111      	bne.n	8009dd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f003 0307 	and.w	r3, r3, #7
 8009dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b06      	cmp	r3, #6
 8009dc4:	d010      	beq.n	8009de8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f042 0201 	orr.w	r2, r2, #1
 8009dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dd6:	e007      	b.n	8009de8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f042 0201 	orr.w	r2, r2, #1
 8009de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	40010000 	.word	0x40010000
 8009dfc:	40000400 	.word	0x40000400
 8009e00:	40000800 	.word	0x40000800
 8009e04:	40000c00 	.word	0x40000c00
 8009e08:	40010400 	.word	0x40010400
 8009e0c:	40014000 	.word	0x40014000
 8009e10:	40001800 	.word	0x40001800

08009e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	f003 0302 	and.w	r3, r3, #2
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d122      	bne.n	8009e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f003 0302 	and.w	r3, r3, #2
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d11b      	bne.n	8009e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f06f 0202 	mvn.w	r2, #2
 8009e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	f003 0303 	and.w	r3, r3, #3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f9b5 	bl	800a1c6 <HAL_TIM_IC_CaptureCallback>
 8009e5c:	e005      	b.n	8009e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f9a7 	bl	800a1b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f9b8 	bl	800a1da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	f003 0304 	and.w	r3, r3, #4
 8009e7a:	2b04      	cmp	r3, #4
 8009e7c:	d122      	bne.n	8009ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f003 0304 	and.w	r3, r3, #4
 8009e88:	2b04      	cmp	r3, #4
 8009e8a:	d11b      	bne.n	8009ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f06f 0204 	mvn.w	r2, #4
 8009e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2202      	movs	r2, #2
 8009e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f98b 	bl	800a1c6 <HAL_TIM_IC_CaptureCallback>
 8009eb0:	e005      	b.n	8009ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f97d 	bl	800a1b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f98e 	bl	800a1da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	f003 0308 	and.w	r3, r3, #8
 8009ece:	2b08      	cmp	r3, #8
 8009ed0:	d122      	bne.n	8009f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	f003 0308 	and.w	r3, r3, #8
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d11b      	bne.n	8009f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f06f 0208 	mvn.w	r2, #8
 8009ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2204      	movs	r2, #4
 8009eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	69db      	ldr	r3, [r3, #28]
 8009ef6:	f003 0303 	and.w	r3, r3, #3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f961 	bl	800a1c6 <HAL_TIM_IC_CaptureCallback>
 8009f04:	e005      	b.n	8009f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f953 	bl	800a1b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f964 	bl	800a1da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	f003 0310 	and.w	r3, r3, #16
 8009f22:	2b10      	cmp	r3, #16
 8009f24:	d122      	bne.n	8009f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	f003 0310 	and.w	r3, r3, #16
 8009f30:	2b10      	cmp	r3, #16
 8009f32:	d11b      	bne.n	8009f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f06f 0210 	mvn.w	r2, #16
 8009f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2208      	movs	r2, #8
 8009f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f937 	bl	800a1c6 <HAL_TIM_IC_CaptureCallback>
 8009f58:	e005      	b.n	8009f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f929 	bl	800a1b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f93a 	bl	800a1da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d10e      	bne.n	8009f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d107      	bne.n	8009f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f06f 0201 	mvn.w	r2, #1
 8009f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7f9 f8d4 	bl	8003140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa2:	2b80      	cmp	r3, #128	; 0x80
 8009fa4:	d10e      	bne.n	8009fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb0:	2b80      	cmp	r3, #128	; 0x80
 8009fb2:	d107      	bne.n	8009fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 fae0 	bl	800a584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fce:	2b40      	cmp	r3, #64	; 0x40
 8009fd0:	d10e      	bne.n	8009ff0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fdc:	2b40      	cmp	r3, #64	; 0x40
 8009fde:	d107      	bne.n	8009ff0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f8ff 	bl	800a1ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	f003 0320 	and.w	r3, r3, #32
 8009ffa:	2b20      	cmp	r3, #32
 8009ffc:	d10e      	bne.n	800a01c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	f003 0320 	and.w	r3, r3, #32
 800a008:	2b20      	cmp	r3, #32
 800a00a:	d107      	bne.n	800a01c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f06f 0220 	mvn.w	r2, #32
 800a014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 faaa 	bl	800a570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a01c:	bf00      	nop
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d101      	bne.n	800a040 <HAL_TIM_ConfigClockSource+0x1c>
 800a03c:	2302      	movs	r3, #2
 800a03e:	e0b4      	b.n	800a1aa <HAL_TIM_ConfigClockSource+0x186>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a05e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a078:	d03e      	beq.n	800a0f8 <HAL_TIM_ConfigClockSource+0xd4>
 800a07a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a07e:	f200 8087 	bhi.w	800a190 <HAL_TIM_ConfigClockSource+0x16c>
 800a082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a086:	f000 8086 	beq.w	800a196 <HAL_TIM_ConfigClockSource+0x172>
 800a08a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a08e:	d87f      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x16c>
 800a090:	2b70      	cmp	r3, #112	; 0x70
 800a092:	d01a      	beq.n	800a0ca <HAL_TIM_ConfigClockSource+0xa6>
 800a094:	2b70      	cmp	r3, #112	; 0x70
 800a096:	d87b      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x16c>
 800a098:	2b60      	cmp	r3, #96	; 0x60
 800a09a:	d050      	beq.n	800a13e <HAL_TIM_ConfigClockSource+0x11a>
 800a09c:	2b60      	cmp	r3, #96	; 0x60
 800a09e:	d877      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x16c>
 800a0a0:	2b50      	cmp	r3, #80	; 0x50
 800a0a2:	d03c      	beq.n	800a11e <HAL_TIM_ConfigClockSource+0xfa>
 800a0a4:	2b50      	cmp	r3, #80	; 0x50
 800a0a6:	d873      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x16c>
 800a0a8:	2b40      	cmp	r3, #64	; 0x40
 800a0aa:	d058      	beq.n	800a15e <HAL_TIM_ConfigClockSource+0x13a>
 800a0ac:	2b40      	cmp	r3, #64	; 0x40
 800a0ae:	d86f      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x16c>
 800a0b0:	2b30      	cmp	r3, #48	; 0x30
 800a0b2:	d064      	beq.n	800a17e <HAL_TIM_ConfigClockSource+0x15a>
 800a0b4:	2b30      	cmp	r3, #48	; 0x30
 800a0b6:	d86b      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x16c>
 800a0b8:	2b20      	cmp	r3, #32
 800a0ba:	d060      	beq.n	800a17e <HAL_TIM_ConfigClockSource+0x15a>
 800a0bc:	2b20      	cmp	r3, #32
 800a0be:	d867      	bhi.n	800a190 <HAL_TIM_ConfigClockSource+0x16c>
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d05c      	beq.n	800a17e <HAL_TIM_ConfigClockSource+0x15a>
 800a0c4:	2b10      	cmp	r3, #16
 800a0c6:	d05a      	beq.n	800a17e <HAL_TIM_ConfigClockSource+0x15a>
 800a0c8:	e062      	b.n	800a190 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6818      	ldr	r0, [r3, #0]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	6899      	ldr	r1, [r3, #8]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	f000 f9ad 	bl	800a438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	609a      	str	r2, [r3, #8]
      break;
 800a0f6:	e04f      	b.n	800a198 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6818      	ldr	r0, [r3, #0]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	6899      	ldr	r1, [r3, #8]
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	685a      	ldr	r2, [r3, #4]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	f000 f996 	bl	800a438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	689a      	ldr	r2, [r3, #8]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a11a:	609a      	str	r2, [r3, #8]
      break;
 800a11c:	e03c      	b.n	800a198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6818      	ldr	r0, [r3, #0]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	6859      	ldr	r1, [r3, #4]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	461a      	mov	r2, r3
 800a12c:	f000 f90a 	bl	800a344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2150      	movs	r1, #80	; 0x50
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f963 	bl	800a402 <TIM_ITRx_SetConfig>
      break;
 800a13c:	e02c      	b.n	800a198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	6859      	ldr	r1, [r3, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	461a      	mov	r2, r3
 800a14c:	f000 f929 	bl	800a3a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2160      	movs	r1, #96	; 0x60
 800a156:	4618      	mov	r0, r3
 800a158:	f000 f953 	bl	800a402 <TIM_ITRx_SetConfig>
      break;
 800a15c:	e01c      	b.n	800a198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6818      	ldr	r0, [r3, #0]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	6859      	ldr	r1, [r3, #4]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	461a      	mov	r2, r3
 800a16c:	f000 f8ea 	bl	800a344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2140      	movs	r1, #64	; 0x40
 800a176:	4618      	mov	r0, r3
 800a178:	f000 f943 	bl	800a402 <TIM_ITRx_SetConfig>
      break;
 800a17c:	e00c      	b.n	800a198 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4619      	mov	r1, r3
 800a188:	4610      	mov	r0, r2
 800a18a:	f000 f93a 	bl	800a402 <TIM_ITRx_SetConfig>
      break;
 800a18e:	e003      	b.n	800a198 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	73fb      	strb	r3, [r7, #15]
      break;
 800a194:	e000      	b.n	800a198 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	b083      	sub	sp, #12
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1ba:	bf00      	nop
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	b083      	sub	sp, #12
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a1ce:	bf00      	nop
 800a1d0:	370c      	adds	r7, #12
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b083      	sub	sp, #12
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1e2:	bf00      	nop
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b083      	sub	sp, #12
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1f6:	bf00      	nop
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
	...

0800a204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a40      	ldr	r2, [pc, #256]	; (800a318 <TIM_Base_SetConfig+0x114>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d013      	beq.n	800a244 <TIM_Base_SetConfig+0x40>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a222:	d00f      	beq.n	800a244 <TIM_Base_SetConfig+0x40>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a3d      	ldr	r2, [pc, #244]	; (800a31c <TIM_Base_SetConfig+0x118>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d00b      	beq.n	800a244 <TIM_Base_SetConfig+0x40>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a3c      	ldr	r2, [pc, #240]	; (800a320 <TIM_Base_SetConfig+0x11c>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d007      	beq.n	800a244 <TIM_Base_SetConfig+0x40>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a3b      	ldr	r2, [pc, #236]	; (800a324 <TIM_Base_SetConfig+0x120>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d003      	beq.n	800a244 <TIM_Base_SetConfig+0x40>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a3a      	ldr	r2, [pc, #232]	; (800a328 <TIM_Base_SetConfig+0x124>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d108      	bne.n	800a256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a24a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	4313      	orrs	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a2f      	ldr	r2, [pc, #188]	; (800a318 <TIM_Base_SetConfig+0x114>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d02b      	beq.n	800a2b6 <TIM_Base_SetConfig+0xb2>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a264:	d027      	beq.n	800a2b6 <TIM_Base_SetConfig+0xb2>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a2c      	ldr	r2, [pc, #176]	; (800a31c <TIM_Base_SetConfig+0x118>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d023      	beq.n	800a2b6 <TIM_Base_SetConfig+0xb2>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a2b      	ldr	r2, [pc, #172]	; (800a320 <TIM_Base_SetConfig+0x11c>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d01f      	beq.n	800a2b6 <TIM_Base_SetConfig+0xb2>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a2a      	ldr	r2, [pc, #168]	; (800a324 <TIM_Base_SetConfig+0x120>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d01b      	beq.n	800a2b6 <TIM_Base_SetConfig+0xb2>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a29      	ldr	r2, [pc, #164]	; (800a328 <TIM_Base_SetConfig+0x124>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d017      	beq.n	800a2b6 <TIM_Base_SetConfig+0xb2>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a28      	ldr	r2, [pc, #160]	; (800a32c <TIM_Base_SetConfig+0x128>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d013      	beq.n	800a2b6 <TIM_Base_SetConfig+0xb2>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a27      	ldr	r2, [pc, #156]	; (800a330 <TIM_Base_SetConfig+0x12c>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d00f      	beq.n	800a2b6 <TIM_Base_SetConfig+0xb2>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a26      	ldr	r2, [pc, #152]	; (800a334 <TIM_Base_SetConfig+0x130>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d00b      	beq.n	800a2b6 <TIM_Base_SetConfig+0xb2>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a25      	ldr	r2, [pc, #148]	; (800a338 <TIM_Base_SetConfig+0x134>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d007      	beq.n	800a2b6 <TIM_Base_SetConfig+0xb2>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a24      	ldr	r2, [pc, #144]	; (800a33c <TIM_Base_SetConfig+0x138>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d003      	beq.n	800a2b6 <TIM_Base_SetConfig+0xb2>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a23      	ldr	r2, [pc, #140]	; (800a340 <TIM_Base_SetConfig+0x13c>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d108      	bne.n	800a2c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	689a      	ldr	r2, [r3, #8]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a0a      	ldr	r2, [pc, #40]	; (800a318 <TIM_Base_SetConfig+0x114>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d003      	beq.n	800a2fc <TIM_Base_SetConfig+0xf8>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a0c      	ldr	r2, [pc, #48]	; (800a328 <TIM_Base_SetConfig+0x124>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d103      	bne.n	800a304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	691a      	ldr	r2, [r3, #16]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	615a      	str	r2, [r3, #20]
}
 800a30a:	bf00      	nop
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	40010000 	.word	0x40010000
 800a31c:	40000400 	.word	0x40000400
 800a320:	40000800 	.word	0x40000800
 800a324:	40000c00 	.word	0x40000c00
 800a328:	40010400 	.word	0x40010400
 800a32c:	40014000 	.word	0x40014000
 800a330:	40014400 	.word	0x40014400
 800a334:	40014800 	.word	0x40014800
 800a338:	40001800 	.word	0x40001800
 800a33c:	40001c00 	.word	0x40001c00
 800a340:	40002000 	.word	0x40002000

0800a344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a344:	b480      	push	{r7}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	f023 0201 	bic.w	r2, r3, #1
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a36e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	011b      	lsls	r3, r3, #4
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	4313      	orrs	r3, r2
 800a378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f023 030a 	bic.w	r3, r3, #10
 800a380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	4313      	orrs	r3, r2
 800a388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	621a      	str	r2, [r3, #32]
}
 800a396:	bf00      	nop
 800a398:	371c      	adds	r7, #28
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b087      	sub	sp, #28
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	60f8      	str	r0, [r7, #12]
 800a3aa:	60b9      	str	r1, [r7, #8]
 800a3ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	f023 0210 	bic.w	r2, r3, #16
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	031b      	lsls	r3, r3, #12
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	011b      	lsls	r3, r3, #4
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	621a      	str	r2, [r3, #32]
}
 800a3f6:	bf00      	nop
 800a3f8:	371c      	adds	r7, #28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a402:	b480      	push	{r7}
 800a404:	b085      	sub	sp, #20
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4313      	orrs	r3, r2
 800a420:	f043 0307 	orr.w	r3, r3, #7
 800a424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	609a      	str	r2, [r3, #8]
}
 800a42c:	bf00      	nop
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
 800a444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	021a      	lsls	r2, r3, #8
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	431a      	orrs	r2, r3
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	4313      	orrs	r3, r2
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	4313      	orrs	r3, r2
 800a464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	609a      	str	r2, [r3, #8]
}
 800a46c:	bf00      	nop
 800a46e:	371c      	adds	r7, #28
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d101      	bne.n	800a490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a48c:	2302      	movs	r3, #2
 800a48e:	e05a      	b.n	800a546 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2202      	movs	r2, #2
 800a49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a21      	ldr	r2, [pc, #132]	; (800a554 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d022      	beq.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4dc:	d01d      	beq.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a1d      	ldr	r2, [pc, #116]	; (800a558 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d018      	beq.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a1b      	ldr	r2, [pc, #108]	; (800a55c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d013      	beq.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a1a      	ldr	r2, [pc, #104]	; (800a560 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d00e      	beq.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a18      	ldr	r2, [pc, #96]	; (800a564 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d009      	beq.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a17      	ldr	r2, [pc, #92]	; (800a568 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d004      	beq.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a15      	ldr	r2, [pc, #84]	; (800a56c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d10c      	bne.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	4313      	orrs	r3, r2
 800a52a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3714      	adds	r7, #20
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	40010000 	.word	0x40010000
 800a558:	40000400 	.word	0x40000400
 800a55c:	40000800 	.word	0x40000800
 800a560:	40000c00 	.word	0x40000c00
 800a564:	40010400 	.word	0x40010400
 800a568:	40014000 	.word	0x40014000
 800a56c:	40001800 	.word	0x40001800

0800a570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a598:	b084      	sub	sp, #16
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	f107 001c 	add.w	r0, r7, #28
 800a5a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d122      	bne.n	800a5f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a5c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a5d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d105      	bne.n	800a5ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f001 fbee 	bl	800bdcc <USB_CoreReset>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73fb      	strb	r3, [r7, #15]
 800a5f4:	e01a      	b.n	800a62c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f001 fbe2 	bl	800bdcc <USB_CoreReset>
 800a608:	4603      	mov	r3, r0
 800a60a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a60c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d106      	bne.n	800a620 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a616:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	639a      	str	r2, [r3, #56]	; 0x38
 800a61e:	e005      	b.n	800a62c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a624:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d10b      	bne.n	800a64a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f043 0206 	orr.w	r2, r3, #6
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f043 0220 	orr.w	r2, r3, #32
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a656:	b004      	add	sp, #16
 800a658:	4770      	bx	lr
	...

0800a65c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	4613      	mov	r3, r2
 800a668:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a66a:	79fb      	ldrb	r3, [r7, #7]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d165      	bne.n	800a73c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	4a41      	ldr	r2, [pc, #260]	; (800a778 <USB_SetTurnaroundTime+0x11c>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d906      	bls.n	800a686 <USB_SetTurnaroundTime+0x2a>
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	4a40      	ldr	r2, [pc, #256]	; (800a77c <USB_SetTurnaroundTime+0x120>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d202      	bcs.n	800a686 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a680:	230f      	movs	r3, #15
 800a682:	617b      	str	r3, [r7, #20]
 800a684:	e062      	b.n	800a74c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	4a3c      	ldr	r2, [pc, #240]	; (800a77c <USB_SetTurnaroundTime+0x120>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d306      	bcc.n	800a69c <USB_SetTurnaroundTime+0x40>
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	4a3b      	ldr	r2, [pc, #236]	; (800a780 <USB_SetTurnaroundTime+0x124>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d202      	bcs.n	800a69c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a696:	230e      	movs	r3, #14
 800a698:	617b      	str	r3, [r7, #20]
 800a69a:	e057      	b.n	800a74c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	4a38      	ldr	r2, [pc, #224]	; (800a780 <USB_SetTurnaroundTime+0x124>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d306      	bcc.n	800a6b2 <USB_SetTurnaroundTime+0x56>
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	4a37      	ldr	r2, [pc, #220]	; (800a784 <USB_SetTurnaroundTime+0x128>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d202      	bcs.n	800a6b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a6ac:	230d      	movs	r3, #13
 800a6ae:	617b      	str	r3, [r7, #20]
 800a6b0:	e04c      	b.n	800a74c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	4a33      	ldr	r2, [pc, #204]	; (800a784 <USB_SetTurnaroundTime+0x128>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d306      	bcc.n	800a6c8 <USB_SetTurnaroundTime+0x6c>
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	4a32      	ldr	r2, [pc, #200]	; (800a788 <USB_SetTurnaroundTime+0x12c>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d802      	bhi.n	800a6c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a6c2:	230c      	movs	r3, #12
 800a6c4:	617b      	str	r3, [r7, #20]
 800a6c6:	e041      	b.n	800a74c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	4a2f      	ldr	r2, [pc, #188]	; (800a788 <USB_SetTurnaroundTime+0x12c>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d906      	bls.n	800a6de <USB_SetTurnaroundTime+0x82>
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	4a2e      	ldr	r2, [pc, #184]	; (800a78c <USB_SetTurnaroundTime+0x130>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d802      	bhi.n	800a6de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a6d8:	230b      	movs	r3, #11
 800a6da:	617b      	str	r3, [r7, #20]
 800a6dc:	e036      	b.n	800a74c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	4a2a      	ldr	r2, [pc, #168]	; (800a78c <USB_SetTurnaroundTime+0x130>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d906      	bls.n	800a6f4 <USB_SetTurnaroundTime+0x98>
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	4a29      	ldr	r2, [pc, #164]	; (800a790 <USB_SetTurnaroundTime+0x134>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d802      	bhi.n	800a6f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a6ee:	230a      	movs	r3, #10
 800a6f0:	617b      	str	r3, [r7, #20]
 800a6f2:	e02b      	b.n	800a74c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	4a26      	ldr	r2, [pc, #152]	; (800a790 <USB_SetTurnaroundTime+0x134>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d906      	bls.n	800a70a <USB_SetTurnaroundTime+0xae>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	4a25      	ldr	r2, [pc, #148]	; (800a794 <USB_SetTurnaroundTime+0x138>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d202      	bcs.n	800a70a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a704:	2309      	movs	r3, #9
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	e020      	b.n	800a74c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	4a21      	ldr	r2, [pc, #132]	; (800a794 <USB_SetTurnaroundTime+0x138>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d306      	bcc.n	800a720 <USB_SetTurnaroundTime+0xc4>
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	4a20      	ldr	r2, [pc, #128]	; (800a798 <USB_SetTurnaroundTime+0x13c>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d802      	bhi.n	800a720 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a71a:	2308      	movs	r3, #8
 800a71c:	617b      	str	r3, [r7, #20]
 800a71e:	e015      	b.n	800a74c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4a1d      	ldr	r2, [pc, #116]	; (800a798 <USB_SetTurnaroundTime+0x13c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d906      	bls.n	800a736 <USB_SetTurnaroundTime+0xda>
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	4a1c      	ldr	r2, [pc, #112]	; (800a79c <USB_SetTurnaroundTime+0x140>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d202      	bcs.n	800a736 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a730:	2307      	movs	r3, #7
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	e00a      	b.n	800a74c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a736:	2306      	movs	r3, #6
 800a738:	617b      	str	r3, [r7, #20]
 800a73a:	e007      	b.n	800a74c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d102      	bne.n	800a748 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a742:	2309      	movs	r3, #9
 800a744:	617b      	str	r3, [r7, #20]
 800a746:	e001      	b.n	800a74c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a748:	2309      	movs	r3, #9
 800a74a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	68da      	ldr	r2, [r3, #12]
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	029b      	lsls	r3, r3, #10
 800a760:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a764:	431a      	orrs	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	371c      	adds	r7, #28
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr
 800a778:	00d8acbf 	.word	0x00d8acbf
 800a77c:	00e4e1c0 	.word	0x00e4e1c0
 800a780:	00f42400 	.word	0x00f42400
 800a784:	01067380 	.word	0x01067380
 800a788:	011a499f 	.word	0x011a499f
 800a78c:	01312cff 	.word	0x01312cff
 800a790:	014ca43f 	.word	0x014ca43f
 800a794:	016e3600 	.word	0x016e3600
 800a798:	01a6ab1f 	.word	0x01a6ab1f
 800a79c:	01e84800 	.word	0x01e84800

0800a7a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	f043 0201 	orr.w	r2, r3, #1
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f023 0201 	bic.w	r2, r3, #1
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a800:	78fb      	ldrb	r3, [r7, #3]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d115      	bne.n	800a832 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a812:	2001      	movs	r0, #1
 800a814:	f7f9 fdd6 	bl	80043c4 <HAL_Delay>
      ms++;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	3301      	adds	r3, #1
 800a81c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f001 fa45 	bl	800bcae <USB_GetMode>
 800a824:	4603      	mov	r3, r0
 800a826:	2b01      	cmp	r3, #1
 800a828:	d01e      	beq.n	800a868 <USB_SetCurrentMode+0x84>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b31      	cmp	r3, #49	; 0x31
 800a82e:	d9f0      	bls.n	800a812 <USB_SetCurrentMode+0x2e>
 800a830:	e01a      	b.n	800a868 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a832:	78fb      	ldrb	r3, [r7, #3]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d115      	bne.n	800a864 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a844:	2001      	movs	r0, #1
 800a846:	f7f9 fdbd 	bl	80043c4 <HAL_Delay>
      ms++;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	3301      	adds	r3, #1
 800a84e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f001 fa2c 	bl	800bcae <USB_GetMode>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d005      	beq.n	800a868 <USB_SetCurrentMode+0x84>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2b31      	cmp	r3, #49	; 0x31
 800a860:	d9f0      	bls.n	800a844 <USB_SetCurrentMode+0x60>
 800a862:	e001      	b.n	800a868 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e005      	b.n	800a874 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b32      	cmp	r3, #50	; 0x32
 800a86c:	d101      	bne.n	800a872 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e000      	b.n	800a874 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a87c:	b084      	sub	sp, #16
 800a87e:	b580      	push	{r7, lr}
 800a880:	b086      	sub	sp, #24
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a88a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a896:	2300      	movs	r3, #0
 800a898:	613b      	str	r3, [r7, #16]
 800a89a:	e009      	b.n	800a8b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	3340      	adds	r3, #64	; 0x40
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	613b      	str	r3, [r7, #16]
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	2b0e      	cmp	r3, #14
 800a8b4:	d9f2      	bls.n	800a89c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a8b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d11c      	bne.n	800a8f6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8ca:	f043 0302 	orr.w	r3, r3, #2
 800a8ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	639a      	str	r2, [r3, #56]	; 0x38
 800a8f4:	e00b      	b.n	800a90e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a906:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a914:	461a      	mov	r2, r3
 800a916:	2300      	movs	r3, #0
 800a918:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a920:	4619      	mov	r1, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a928:	461a      	mov	r2, r3
 800a92a:	680b      	ldr	r3, [r1, #0]
 800a92c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a930:	2b01      	cmp	r3, #1
 800a932:	d10c      	bne.n	800a94e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d104      	bne.n	800a944 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a93a:	2100      	movs	r1, #0
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f965 	bl	800ac0c <USB_SetDevSpeed>
 800a942:	e008      	b.n	800a956 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a944:	2101      	movs	r1, #1
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f960 	bl	800ac0c <USB_SetDevSpeed>
 800a94c:	e003      	b.n	800a956 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a94e:	2103      	movs	r1, #3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f95b 	bl	800ac0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a956:	2110      	movs	r1, #16
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f8f3 	bl	800ab44 <USB_FlushTxFifo>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f91f 	bl	800abac <USB_FlushRxFifo>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a97e:	461a      	mov	r2, r3
 800a980:	2300      	movs	r3, #0
 800a982:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a98a:	461a      	mov	r2, r3
 800a98c:	2300      	movs	r3, #0
 800a98e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a996:	461a      	mov	r2, r3
 800a998:	2300      	movs	r3, #0
 800a99a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a99c:	2300      	movs	r3, #0
 800a99e:	613b      	str	r3, [r7, #16]
 800a9a0:	e043      	b.n	800aa2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9b8:	d118      	bne.n	800a9ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	015a      	lsls	r2, r3, #5
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9d2:	6013      	str	r3, [r2, #0]
 800a9d4:	e013      	b.n	800a9fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	015a      	lsls	r2, r3, #5
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	4413      	add	r3, r2
 800a9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a9e8:	6013      	str	r3, [r2, #0]
 800a9ea:	e008      	b.n	800a9fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	015a      	lsls	r2, r3, #5
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	4413      	add	r3, r2
 800aa06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	3301      	adds	r3, #1
 800aa28:	613b      	str	r3, [r7, #16]
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d3b7      	bcc.n	800a9a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa32:	2300      	movs	r3, #0
 800aa34:	613b      	str	r3, [r7, #16]
 800aa36:	e043      	b.n	800aac0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	015a      	lsls	r2, r3, #5
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa4e:	d118      	bne.n	800aa82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10a      	bne.n	800aa6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	015a      	lsls	r2, r3, #5
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa62:	461a      	mov	r2, r3
 800aa64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	e013      	b.n	800aa94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa78:	461a      	mov	r2, r3
 800aa7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa7e:	6013      	str	r3, [r2, #0]
 800aa80:	e008      	b.n	800aa94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	015a      	lsls	r2, r3, #5
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	4413      	add	r3, r2
 800aa8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8e:	461a      	mov	r2, r3
 800aa90:	2300      	movs	r3, #0
 800aa92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab2:	461a      	mov	r2, r3
 800aab4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aab8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	3301      	adds	r3, #1
 800aabe:	613b      	str	r3, [r7, #16]
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d3b7      	bcc.n	800aa38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aada:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aae8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d105      	bne.n	800aafc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	f043 0210 	orr.w	r2, r3, #16
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	699a      	ldr	r2, [r3, #24]
 800ab00:	4b0f      	ldr	r3, [pc, #60]	; (800ab40 <USB_DevInit+0x2c4>)
 800ab02:	4313      	orrs	r3, r2
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d005      	beq.n	800ab1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	f043 0208 	orr.w	r2, r3, #8
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d107      	bne.n	800ab30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab28:	f043 0304 	orr.w	r3, r3, #4
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3718      	adds	r7, #24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab3c:	b004      	add	sp, #16
 800ab3e:	4770      	bx	lr
 800ab40:	803c3800 	.word	0x803c3800

0800ab44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3301      	adds	r3, #1
 800ab56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4a13      	ldr	r2, [pc, #76]	; (800aba8 <USB_FlushTxFifo+0x64>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d901      	bls.n	800ab64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e01b      	b.n	800ab9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	daf2      	bge.n	800ab52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	019b      	lsls	r3, r3, #6
 800ab74:	f043 0220 	orr.w	r2, r3, #32
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	4a08      	ldr	r2, [pc, #32]	; (800aba8 <USB_FlushTxFifo+0x64>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d901      	bls.n	800ab8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e006      	b.n	800ab9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	f003 0320 	and.w	r3, r3, #32
 800ab96:	2b20      	cmp	r3, #32
 800ab98:	d0f0      	beq.n	800ab7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	00030d40 	.word	0x00030d40

0800abac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abb4:	2300      	movs	r3, #0
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3301      	adds	r3, #1
 800abbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	4a11      	ldr	r2, [pc, #68]	; (800ac08 <USB_FlushRxFifo+0x5c>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d901      	bls.n	800abca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e018      	b.n	800abfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	daf2      	bge.n	800abb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800abd2:	2300      	movs	r3, #0
 800abd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2210      	movs	r2, #16
 800abda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3301      	adds	r3, #1
 800abe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	4a08      	ldr	r2, [pc, #32]	; (800ac08 <USB_FlushRxFifo+0x5c>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d901      	bls.n	800abee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	e006      	b.n	800abfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	f003 0310 	and.w	r3, r3, #16
 800abf6:	2b10      	cmp	r3, #16
 800abf8:	d0f0      	beq.n	800abdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	00030d40 	.word	0x00030d40

0800ac0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	78fb      	ldrb	r3, [r7, #3]
 800ac26:	68f9      	ldr	r1, [r7, #12]
 800ac28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ac3e:	b480      	push	{r7}
 800ac40:	b087      	sub	sp, #28
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f003 0306 	and.w	r3, r3, #6
 800ac56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d102      	bne.n	800ac64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	75fb      	strb	r3, [r7, #23]
 800ac62:	e00a      	b.n	800ac7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d002      	beq.n	800ac70 <USB_GetDevSpeed+0x32>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2b06      	cmp	r3, #6
 800ac6e:	d102      	bne.n	800ac76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ac70:	2302      	movs	r3, #2
 800ac72:	75fb      	strb	r3, [r7, #23]
 800ac74:	e001      	b.n	800ac7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ac76:	230f      	movs	r3, #15
 800ac78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	371c      	adds	r7, #28
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	785b      	ldrb	r3, [r3, #1]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d13a      	bne.n	800ad1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acaa:	69da      	ldr	r2, [r3, #28]
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	f003 030f 	and.w	r3, r3, #15
 800acb4:	2101      	movs	r1, #1
 800acb6:	fa01 f303 	lsl.w	r3, r1, r3
 800acba:	b29b      	uxth	r3, r3
 800acbc:	68f9      	ldr	r1, [r7, #12]
 800acbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acc2:	4313      	orrs	r3, r2
 800acc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d155      	bne.n	800ad88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	015a      	lsls	r2, r3, #5
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4413      	add	r3, r2
 800ace4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	791b      	ldrb	r3, [r3, #4]
 800acf6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acf8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	059b      	lsls	r3, r3, #22
 800acfe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad00:	4313      	orrs	r3, r2
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	0151      	lsls	r1, r2, #5
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	440a      	add	r2, r1
 800ad0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad16:	6013      	str	r3, [r2, #0]
 800ad18:	e036      	b.n	800ad88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad20:	69da      	ldr	r2, [r3, #28]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	f003 030f 	and.w	r3, r3, #15
 800ad2a:	2101      	movs	r1, #1
 800ad2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad30:	041b      	lsls	r3, r3, #16
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	015a      	lsls	r2, r3, #5
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4413      	add	r3, r2
 800ad44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d11a      	bne.n	800ad88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	791b      	ldrb	r3, [r3, #4]
 800ad6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad6e:	430b      	orrs	r3, r1
 800ad70:	4313      	orrs	r3, r2
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	0151      	lsls	r1, r2, #5
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	440a      	add	r2, r1
 800ad7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
	...

0800ad98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	785b      	ldrb	r3, [r3, #1]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d161      	bne.n	800ae78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	015a      	lsls	r2, r3, #5
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adca:	d11f      	bne.n	800ae0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	015a      	lsls	r2, r3, #5
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4413      	add	r3, r2
 800add4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	0151      	lsls	r1, r2, #5
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	440a      	add	r2, r1
 800ade2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ade6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800adea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	015a      	lsls	r2, r3, #5
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4413      	add	r3, r2
 800adf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	0151      	lsls	r1, r2, #5
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	440a      	add	r2, r1
 800ae02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	f003 030f 	and.w	r3, r3, #15
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	43db      	mvns	r3, r3
 800ae26:	68f9      	ldr	r1, [r7, #12]
 800ae28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae36:	69da      	ldr	r2, [r3, #28]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	f003 030f 	and.w	r3, r3, #15
 800ae40:	2101      	movs	r1, #1
 800ae42:	fa01 f303 	lsl.w	r3, r1, r3
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	43db      	mvns	r3, r3
 800ae4a:	68f9      	ldr	r1, [r7, #12]
 800ae4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae50:	4013      	ands	r3, r2
 800ae52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	0159      	lsls	r1, r3, #5
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	440b      	add	r3, r1
 800ae6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4b35      	ldr	r3, [pc, #212]	; (800af48 <USB_DeactivateEndpoint+0x1b0>)
 800ae72:	4013      	ands	r3, r2
 800ae74:	600b      	str	r3, [r1, #0]
 800ae76:	e060      	b.n	800af3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	015a      	lsls	r2, r3, #5
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	4413      	add	r3, r2
 800ae80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae8e:	d11f      	bne.n	800aed0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	015a      	lsls	r2, r3, #5
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4413      	add	r3, r2
 800ae98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	0151      	lsls	r1, r2, #5
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	440a      	add	r2, r1
 800aea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aeae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	0151      	lsls	r1, r2, #5
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	440a      	add	r2, r1
 800aec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aece:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	f003 030f 	and.w	r3, r3, #15
 800aee0:	2101      	movs	r1, #1
 800aee2:	fa01 f303 	lsl.w	r3, r1, r3
 800aee6:	041b      	lsls	r3, r3, #16
 800aee8:	43db      	mvns	r3, r3
 800aeea:	68f9      	ldr	r1, [r7, #12]
 800aeec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aef0:	4013      	ands	r3, r2
 800aef2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aefa:	69da      	ldr	r2, [r3, #28]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	f003 030f 	and.w	r3, r3, #15
 800af04:	2101      	movs	r1, #1
 800af06:	fa01 f303 	lsl.w	r3, r1, r3
 800af0a:	041b      	lsls	r3, r3, #16
 800af0c:	43db      	mvns	r3, r3
 800af0e:	68f9      	ldr	r1, [r7, #12]
 800af10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af14:	4013      	ands	r3, r2
 800af16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	015a      	lsls	r2, r3, #5
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4413      	add	r3, r2
 800af20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	0159      	lsls	r1, r3, #5
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	440b      	add	r3, r1
 800af2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af32:	4619      	mov	r1, r3
 800af34:	4b05      	ldr	r3, [pc, #20]	; (800af4c <USB_DeactivateEndpoint+0x1b4>)
 800af36:	4013      	ands	r3, r2
 800af38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	ec337800 	.word	0xec337800
 800af4c:	eff37800 	.word	0xeff37800

0800af50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b08a      	sub	sp, #40	; 0x28
 800af54:	af02      	add	r7, sp, #8
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	4613      	mov	r3, r2
 800af5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	f040 815c 	bne.w	800b22a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d132      	bne.n	800afe0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	015a      	lsls	r2, r3, #5
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	4413      	add	r3, r2
 800af82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	69ba      	ldr	r2, [r7, #24]
 800af8a:	0151      	lsls	r1, r2, #5
 800af8c:	69fa      	ldr	r2, [r7, #28]
 800af8e:	440a      	add	r2, r1
 800af90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	015a      	lsls	r2, r3, #5
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	4413      	add	r3, r2
 800afa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	69ba      	ldr	r2, [r7, #24]
 800afae:	0151      	lsls	r1, r2, #5
 800afb0:	69fa      	ldr	r2, [r7, #28]
 800afb2:	440a      	add	r2, r1
 800afb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	015a      	lsls	r2, r3, #5
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	69ba      	ldr	r2, [r7, #24]
 800afce:	0151      	lsls	r1, r2, #5
 800afd0:	69fa      	ldr	r2, [r7, #28]
 800afd2:	440a      	add	r2, r1
 800afd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afd8:	0cdb      	lsrs	r3, r3, #19
 800afda:	04db      	lsls	r3, r3, #19
 800afdc:	6113      	str	r3, [r2, #16]
 800afde:	e074      	b.n	800b0ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	015a      	lsls	r2, r3, #5
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	4413      	add	r3, r2
 800afe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	69ba      	ldr	r2, [r7, #24]
 800aff0:	0151      	lsls	r1, r2, #5
 800aff2:	69fa      	ldr	r2, [r7, #28]
 800aff4:	440a      	add	r2, r1
 800aff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800affa:	0cdb      	lsrs	r3, r3, #19
 800affc:	04db      	lsls	r3, r3, #19
 800affe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	015a      	lsls	r2, r3, #5
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	4413      	add	r3, r2
 800b008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	69ba      	ldr	r2, [r7, #24]
 800b010:	0151      	lsls	r1, r2, #5
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	440a      	add	r2, r1
 800b016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b01a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b01e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b022:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	015a      	lsls	r2, r3, #5
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b030:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	6999      	ldr	r1, [r3, #24]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	440b      	add	r3, r1
 800b03c:	1e59      	subs	r1, r3, #1
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	fbb1 f3f3 	udiv	r3, r1, r3
 800b046:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b048:	4b9d      	ldr	r3, [pc, #628]	; (800b2c0 <USB_EPStartXfer+0x370>)
 800b04a:	400b      	ands	r3, r1
 800b04c:	69b9      	ldr	r1, [r7, #24]
 800b04e:	0148      	lsls	r0, r1, #5
 800b050:	69f9      	ldr	r1, [r7, #28]
 800b052:	4401      	add	r1, r0
 800b054:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b058:	4313      	orrs	r3, r2
 800b05a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	015a      	lsls	r2, r3, #5
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	4413      	add	r3, r2
 800b064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b068:	691a      	ldr	r2, [r3, #16]
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b072:	69b9      	ldr	r1, [r7, #24]
 800b074:	0148      	lsls	r0, r1, #5
 800b076:	69f9      	ldr	r1, [r7, #28]
 800b078:	4401      	add	r1, r0
 800b07a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b07e:	4313      	orrs	r3, r2
 800b080:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	791b      	ldrb	r3, [r3, #4]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d11f      	bne.n	800b0ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	015a      	lsls	r2, r3, #5
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	4413      	add	r3, r2
 800b092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	69ba      	ldr	r2, [r7, #24]
 800b09a:	0151      	lsls	r1, r2, #5
 800b09c:	69fa      	ldr	r2, [r7, #28]
 800b09e:	440a      	add	r2, r1
 800b0a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b0a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	015a      	lsls	r2, r3, #5
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	69ba      	ldr	r2, [r7, #24]
 800b0ba:	0151      	lsls	r1, r2, #5
 800b0bc:	69fa      	ldr	r2, [r7, #28]
 800b0be:	440a      	add	r2, r1
 800b0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b0ca:	79fb      	ldrb	r3, [r7, #7]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d14b      	bne.n	800b168 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	695b      	ldr	r3, [r3, #20]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d009      	beq.n	800b0ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	015a      	lsls	r2, r3, #5
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	4413      	add	r3, r2
 800b0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	791b      	ldrb	r3, [r3, #4]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d128      	bne.n	800b146 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b100:	2b00      	cmp	r3, #0
 800b102:	d110      	bne.n	800b126 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	015a      	lsls	r2, r3, #5
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	4413      	add	r3, r2
 800b10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	69ba      	ldr	r2, [r7, #24]
 800b114:	0151      	lsls	r1, r2, #5
 800b116:	69fa      	ldr	r2, [r7, #28]
 800b118:	440a      	add	r2, r1
 800b11a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b11e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b122:	6013      	str	r3, [r2, #0]
 800b124:	e00f      	b.n	800b146 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	015a      	lsls	r2, r3, #5
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	4413      	add	r3, r2
 800b12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	0151      	lsls	r1, r2, #5
 800b138:	69fa      	ldr	r2, [r7, #28]
 800b13a:	440a      	add	r2, r1
 800b13c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b144:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	0151      	lsls	r1, r2, #5
 800b158:	69fa      	ldr	r2, [r7, #28]
 800b15a:	440a      	add	r2, r1
 800b15c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b160:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b164:	6013      	str	r3, [r2, #0]
 800b166:	e133      	b.n	800b3d0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	015a      	lsls	r2, r3, #5
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	4413      	add	r3, r2
 800b170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	69ba      	ldr	r2, [r7, #24]
 800b178:	0151      	lsls	r1, r2, #5
 800b17a:	69fa      	ldr	r2, [r7, #28]
 800b17c:	440a      	add	r2, r1
 800b17e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b182:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b186:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	791b      	ldrb	r3, [r3, #4]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d015      	beq.n	800b1bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	2b00      	cmp	r3, #0
 800b196:	f000 811b 	beq.w	800b3d0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	f003 030f 	and.w	r3, r3, #15
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b1b0:	69f9      	ldr	r1, [r7, #28]
 800b1b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	634b      	str	r3, [r1, #52]	; 0x34
 800b1ba:	e109      	b.n	800b3d0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d110      	bne.n	800b1ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	69ba      	ldr	r2, [r7, #24]
 800b1dc:	0151      	lsls	r1, r2, #5
 800b1de:	69fa      	ldr	r2, [r7, #28]
 800b1e0:	440a      	add	r2, r1
 800b1e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b1ea:	6013      	str	r3, [r2, #0]
 800b1ec:	e00f      	b.n	800b20e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	015a      	lsls	r2, r3, #5
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	0151      	lsls	r1, r2, #5
 800b200:	69fa      	ldr	r2, [r7, #28]
 800b202:	440a      	add	r2, r1
 800b204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b20c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	6919      	ldr	r1, [r3, #16]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	781a      	ldrb	r2, [r3, #0]
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	699b      	ldr	r3, [r3, #24]
 800b21a:	b298      	uxth	r0, r3
 800b21c:	79fb      	ldrb	r3, [r7, #7]
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	4603      	mov	r3, r0
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f000 fade 	bl	800b7e4 <USB_WritePacket>
 800b228:	e0d2      	b.n	800b3d0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	4413      	add	r3, r2
 800b232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	69ba      	ldr	r2, [r7, #24]
 800b23a:	0151      	lsls	r1, r2, #5
 800b23c:	69fa      	ldr	r2, [r7, #28]
 800b23e:	440a      	add	r2, r1
 800b240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b244:	0cdb      	lsrs	r3, r3, #19
 800b246:	04db      	lsls	r3, r3, #19
 800b248:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	015a      	lsls	r2, r3, #5
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	4413      	add	r3, r2
 800b252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	69ba      	ldr	r2, [r7, #24]
 800b25a:	0151      	lsls	r1, r2, #5
 800b25c:	69fa      	ldr	r2, [r7, #28]
 800b25e:	440a      	add	r2, r1
 800b260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b264:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b268:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b26c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d126      	bne.n	800b2c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	015a      	lsls	r2, r3, #5
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	4413      	add	r3, r2
 800b27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b282:	691a      	ldr	r2, [r3, #16]
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b28c:	69b9      	ldr	r1, [r7, #24]
 800b28e:	0148      	lsls	r0, r1, #5
 800b290:	69f9      	ldr	r1, [r7, #28]
 800b292:	4401      	add	r1, r0
 800b294:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b298:	4313      	orrs	r3, r2
 800b29a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	015a      	lsls	r2, r3, #5
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	69ba      	ldr	r2, [r7, #24]
 800b2ac:	0151      	lsls	r1, r2, #5
 800b2ae:	69fa      	ldr	r2, [r7, #28]
 800b2b0:	440a      	add	r2, r1
 800b2b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2ba:	6113      	str	r3, [r2, #16]
 800b2bc:	e03a      	b.n	800b334 <USB_EPStartXfer+0x3e4>
 800b2be:	bf00      	nop
 800b2c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	699a      	ldr	r2, [r3, #24]
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	1e5a      	subs	r2, r3, #1
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	8afa      	ldrh	r2, [r7, #22]
 800b2e0:	fb03 f202 	mul.w	r2, r3, r2
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	015a      	lsls	r2, r3, #5
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f4:	691a      	ldr	r2, [r3, #16]
 800b2f6:	8afb      	ldrh	r3, [r7, #22]
 800b2f8:	04d9      	lsls	r1, r3, #19
 800b2fa:	4b38      	ldr	r3, [pc, #224]	; (800b3dc <USB_EPStartXfer+0x48c>)
 800b2fc:	400b      	ands	r3, r1
 800b2fe:	69b9      	ldr	r1, [r7, #24]
 800b300:	0148      	lsls	r0, r1, #5
 800b302:	69f9      	ldr	r1, [r7, #28]
 800b304:	4401      	add	r1, r0
 800b306:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b30a:	4313      	orrs	r3, r2
 800b30c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	015a      	lsls	r2, r3, #5
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	4413      	add	r3, r2
 800b316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b31a:	691a      	ldr	r2, [r3, #16]
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	69db      	ldr	r3, [r3, #28]
 800b320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b324:	69b9      	ldr	r1, [r7, #24]
 800b326:	0148      	lsls	r0, r1, #5
 800b328:	69f9      	ldr	r1, [r7, #28]
 800b32a:	4401      	add	r1, r0
 800b32c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b330:	4313      	orrs	r3, r2
 800b332:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b334:	79fb      	ldrb	r3, [r7, #7]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d10d      	bne.n	800b356 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d009      	beq.n	800b356 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	6919      	ldr	r1, [r3, #16]
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	015a      	lsls	r2, r3, #5
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	4413      	add	r3, r2
 800b34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b352:	460a      	mov	r2, r1
 800b354:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	791b      	ldrb	r3, [r3, #4]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d128      	bne.n	800b3b0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d110      	bne.n	800b390 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	4413      	add	r3, r2
 800b376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	69ba      	ldr	r2, [r7, #24]
 800b37e:	0151      	lsls	r1, r2, #5
 800b380:	69fa      	ldr	r2, [r7, #28]
 800b382:	440a      	add	r2, r1
 800b384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b388:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	e00f      	b.n	800b3b0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	015a      	lsls	r2, r3, #5
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	4413      	add	r3, r2
 800b398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	69ba      	ldr	r2, [r7, #24]
 800b3a0:	0151      	lsls	r1, r2, #5
 800b3a2:	69fa      	ldr	r2, [r7, #28]
 800b3a4:	440a      	add	r2, r1
 800b3a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	015a      	lsls	r2, r3, #5
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	69ba      	ldr	r2, [r7, #24]
 800b3c0:	0151      	lsls	r1, r2, #5
 800b3c2:	69fa      	ldr	r2, [r7, #28]
 800b3c4:	440a      	add	r2, r1
 800b3c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3720      	adds	r7, #32
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	1ff80000 	.word	0x1ff80000

0800b3e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b087      	sub	sp, #28
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	785b      	ldrb	r3, [r3, #1]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	f040 80ce 	bne.w	800b59e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d132      	bne.n	800b470 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	015a      	lsls	r2, r3, #5
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	4413      	add	r3, r2
 800b412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	0151      	lsls	r1, r2, #5
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	440a      	add	r2, r1
 800b420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b424:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b428:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b42c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	015a      	lsls	r2, r3, #5
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	4413      	add	r3, r2
 800b436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	0151      	lsls	r1, r2, #5
 800b440:	697a      	ldr	r2, [r7, #20]
 800b442:	440a      	add	r2, r1
 800b444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b448:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b44c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	4413      	add	r3, r2
 800b456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	0151      	lsls	r1, r2, #5
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	440a      	add	r2, r1
 800b464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b468:	0cdb      	lsrs	r3, r3, #19
 800b46a:	04db      	lsls	r3, r3, #19
 800b46c:	6113      	str	r3, [r2, #16]
 800b46e:	e04e      	b.n	800b50e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	015a      	lsls	r2, r3, #5
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	4413      	add	r3, r2
 800b478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	0151      	lsls	r1, r2, #5
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	440a      	add	r2, r1
 800b486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b48a:	0cdb      	lsrs	r3, r3, #19
 800b48c:	04db      	lsls	r3, r3, #19
 800b48e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	015a      	lsls	r2, r3, #5
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	4413      	add	r3, r2
 800b498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	0151      	lsls	r1, r2, #5
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	440a      	add	r2, r1
 800b4a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	699a      	ldr	r2, [r3, #24]
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d903      	bls.n	800b4c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	68da      	ldr	r2, [r3, #12]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	693a      	ldr	r2, [r7, #16]
 800b4d8:	0151      	lsls	r1, r2, #5
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	440a      	add	r2, r1
 800b4de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	015a      	lsls	r2, r3, #5
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4f4:	691a      	ldr	r2, [r3, #16]
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	699b      	ldr	r3, [r3, #24]
 800b4fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4fe:	6939      	ldr	r1, [r7, #16]
 800b500:	0148      	lsls	r0, r1, #5
 800b502:	6979      	ldr	r1, [r7, #20]
 800b504:	4401      	add	r1, r0
 800b506:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b50a:	4313      	orrs	r3, r2
 800b50c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b50e:	79fb      	ldrb	r3, [r7, #7]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d11e      	bne.n	800b552 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d009      	beq.n	800b530 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	015a      	lsls	r2, r3, #5
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	4413      	add	r3, r2
 800b524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b528:	461a      	mov	r2, r3
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	695b      	ldr	r3, [r3, #20]
 800b52e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	015a      	lsls	r2, r3, #5
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	4413      	add	r3, r2
 800b538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	0151      	lsls	r1, r2, #5
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	440a      	add	r2, r1
 800b546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b54a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b54e:	6013      	str	r3, [r2, #0]
 800b550:	e097      	b.n	800b682 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	015a      	lsls	r2, r3, #5
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	4413      	add	r3, r2
 800b55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	0151      	lsls	r1, r2, #5
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	440a      	add	r2, r1
 800b568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b56c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b570:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	2b00      	cmp	r3, #0
 800b578:	f000 8083 	beq.w	800b682 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	f003 030f 	and.w	r3, r3, #15
 800b58c:	2101      	movs	r1, #1
 800b58e:	fa01 f303 	lsl.w	r3, r1, r3
 800b592:	6979      	ldr	r1, [r7, #20]
 800b594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b598:	4313      	orrs	r3, r2
 800b59a:	634b      	str	r3, [r1, #52]	; 0x34
 800b59c:	e071      	b.n	800b682 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	015a      	lsls	r2, r3, #5
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5aa:	691b      	ldr	r3, [r3, #16]
 800b5ac:	693a      	ldr	r2, [r7, #16]
 800b5ae:	0151      	lsls	r1, r2, #5
 800b5b0:	697a      	ldr	r2, [r7, #20]
 800b5b2:	440a      	add	r2, r1
 800b5b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5b8:	0cdb      	lsrs	r3, r3, #19
 800b5ba:	04db      	lsls	r3, r3, #19
 800b5bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	015a      	lsls	r2, r3, #5
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	0151      	lsls	r1, r2, #5
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	440a      	add	r2, r1
 800b5d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b5dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b5e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	699b      	ldr	r3, [r3, #24]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d003      	beq.n	800b5f2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	68da      	ldr	r2, [r3, #12]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	015a      	lsls	r2, r3, #5
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	4413      	add	r3, r2
 800b602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	0151      	lsls	r1, r2, #5
 800b60c:	697a      	ldr	r2, [r7, #20]
 800b60e:	440a      	add	r2, r1
 800b610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b618:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	015a      	lsls	r2, r3, #5
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	4413      	add	r3, r2
 800b622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b626:	691a      	ldr	r2, [r3, #16]
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	69db      	ldr	r3, [r3, #28]
 800b62c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b630:	6939      	ldr	r1, [r7, #16]
 800b632:	0148      	lsls	r0, r1, #5
 800b634:	6979      	ldr	r1, [r7, #20]
 800b636:	4401      	add	r1, r0
 800b638:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b63c:	4313      	orrs	r3, r2
 800b63e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b640:	79fb      	ldrb	r3, [r7, #7]
 800b642:	2b01      	cmp	r3, #1
 800b644:	d10d      	bne.n	800b662 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d009      	beq.n	800b662 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	6919      	ldr	r1, [r3, #16]
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	015a      	lsls	r2, r3, #5
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	4413      	add	r3, r2
 800b65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65e:	460a      	mov	r2, r1
 800b660:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	015a      	lsls	r2, r3, #5
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	4413      	add	r3, r2
 800b66a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	0151      	lsls	r1, r2, #5
 800b674:	697a      	ldr	r2, [r7, #20]
 800b676:	440a      	add	r2, r1
 800b678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b67c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b680:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	371c      	adds	r7, #28
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b690:	b480      	push	{r7}
 800b692:	b087      	sub	sp, #28
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b69a:	2300      	movs	r3, #0
 800b69c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	785b      	ldrb	r3, [r3, #1]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d14a      	bne.n	800b744 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6c6:	f040 8086 	bne.w	800b7d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	015a      	lsls	r2, r3, #5
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	7812      	ldrb	r2, [r2, #0]
 800b6de:	0151      	lsls	r1, r2, #5
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	440a      	add	r2, r1
 800b6e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	015a      	lsls	r2, r3, #5
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	683a      	ldr	r2, [r7, #0]
 800b700:	7812      	ldrb	r2, [r2, #0]
 800b702:	0151      	lsls	r1, r2, #5
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	440a      	add	r2, r1
 800b708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b70c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b710:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	3301      	adds	r3, #1
 800b716:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b71e:	4293      	cmp	r3, r2
 800b720:	d902      	bls.n	800b728 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	75fb      	strb	r3, [r7, #23]
          break;
 800b726:	e056      	b.n	800b7d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	015a      	lsls	r2, r3, #5
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	4413      	add	r3, r2
 800b732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b73c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b740:	d0e7      	beq.n	800b712 <USB_EPStopXfer+0x82>
 800b742:	e048      	b.n	800b7d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	015a      	lsls	r2, r3, #5
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	4413      	add	r3, r2
 800b74e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b75c:	d13b      	bne.n	800b7d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	015a      	lsls	r2, r3, #5
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	4413      	add	r3, r2
 800b768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	7812      	ldrb	r2, [r2, #0]
 800b772:	0151      	lsls	r1, r2, #5
 800b774:	693a      	ldr	r2, [r7, #16]
 800b776:	440a      	add	r2, r1
 800b778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b77c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b780:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	015a      	lsls	r2, r3, #5
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	4413      	add	r3, r2
 800b78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	7812      	ldrb	r2, [r2, #0]
 800b796:	0151      	lsls	r1, r2, #5
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	440a      	add	r2, r1
 800b79c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f242 7210 	movw	r2, #10000	; 0x2710
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d902      	bls.n	800b7bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	75fb      	strb	r3, [r7, #23]
          break;
 800b7ba:	e00c      	b.n	800b7d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	015a      	lsls	r2, r3, #5
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7d4:	d0e7      	beq.n	800b7a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	371c      	adds	r7, #28
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b089      	sub	sp, #36	; 0x24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	4611      	mov	r1, r2
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	71fb      	strb	r3, [r7, #7]
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b802:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b806:	2b00      	cmp	r3, #0
 800b808:	d123      	bne.n	800b852 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b80a:	88bb      	ldrh	r3, [r7, #4]
 800b80c:	3303      	adds	r3, #3
 800b80e:	089b      	lsrs	r3, r3, #2
 800b810:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b812:	2300      	movs	r3, #0
 800b814:	61bb      	str	r3, [r7, #24]
 800b816:	e018      	b.n	800b84a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b818:	79fb      	ldrb	r3, [r7, #7]
 800b81a:	031a      	lsls	r2, r3, #12
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	4413      	add	r3, r2
 800b820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b824:	461a      	mov	r2, r3
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	3301      	adds	r3, #1
 800b830:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	3301      	adds	r3, #1
 800b836:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	3301      	adds	r3, #1
 800b83c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	3301      	adds	r3, #1
 800b842:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	3301      	adds	r3, #1
 800b848:	61bb      	str	r3, [r7, #24]
 800b84a:	69ba      	ldr	r2, [r7, #24]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d3e2      	bcc.n	800b818 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3724      	adds	r7, #36	; 0x24
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b860:	b480      	push	{r7}
 800b862:	b08b      	sub	sp, #44	; 0x2c
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	4613      	mov	r3, r2
 800b86c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b876:	88fb      	ldrh	r3, [r7, #6]
 800b878:	089b      	lsrs	r3, r3, #2
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b87e:	88fb      	ldrh	r3, [r7, #6]
 800b880:	f003 0303 	and.w	r3, r3, #3
 800b884:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b886:	2300      	movs	r3, #0
 800b888:	623b      	str	r3, [r7, #32]
 800b88a:	e014      	b.n	800b8b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	601a      	str	r2, [r3, #0]
    pDest++;
 800b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89a:	3301      	adds	r3, #1
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	623b      	str	r3, [r7, #32]
 800b8b6:	6a3a      	ldr	r2, [r7, #32]
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d3e6      	bcc.n	800b88c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b8be:	8bfb      	ldrh	r3, [r7, #30]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d01e      	beq.n	800b902 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	f107 0310 	add.w	r3, r7, #16
 800b8d4:	6812      	ldr	r2, [r2, #0]
 800b8d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	00db      	lsls	r3, r3, #3
 800b8e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e8:	701a      	strb	r2, [r3, #0]
      i++;
 800b8ea:	6a3b      	ldr	r3, [r7, #32]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	623b      	str	r3, [r7, #32]
      pDest++;
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b8f6:	8bfb      	ldrh	r3, [r7, #30]
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b8fc:	8bfb      	ldrh	r3, [r7, #30]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1ea      	bne.n	800b8d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b904:	4618      	mov	r0, r3
 800b906:	372c      	adds	r7, #44	; 0x2c
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	785b      	ldrb	r3, [r3, #1]
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d12c      	bne.n	800b986 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	015a      	lsls	r2, r3, #5
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	4413      	add	r3, r2
 800b934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	db12      	blt.n	800b964 <USB_EPSetStall+0x54>
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00f      	beq.n	800b964 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	015a      	lsls	r2, r3, #5
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4413      	add	r3, r2
 800b94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	0151      	lsls	r1, r2, #5
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	440a      	add	r2, r1
 800b95a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b95e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b962:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	015a      	lsls	r2, r3, #5
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	4413      	add	r3, r2
 800b96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	0151      	lsls	r1, r2, #5
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	440a      	add	r2, r1
 800b97a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b97e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	e02b      	b.n	800b9de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	015a      	lsls	r2, r3, #5
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	4413      	add	r3, r2
 800b98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	db12      	blt.n	800b9be <USB_EPSetStall+0xae>
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00f      	beq.n	800b9be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	015a      	lsls	r2, r3, #5
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	0151      	lsls	r1, r2, #5
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	440a      	add	r2, r1
 800b9b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b9bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	015a      	lsls	r2, r3, #5
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	0151      	lsls	r1, r2, #5
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	440a      	add	r2, r1
 800b9d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3714      	adds	r7, #20
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	785b      	ldrb	r3, [r3, #1]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d128      	bne.n	800ba5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	015a      	lsls	r2, r3, #5
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	4413      	add	r3, r2
 800ba10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	0151      	lsls	r1, r2, #5
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	440a      	add	r2, r1
 800ba1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	791b      	ldrb	r3, [r3, #4]
 800ba2c:	2b03      	cmp	r3, #3
 800ba2e:	d003      	beq.n	800ba38 <USB_EPClearStall+0x4c>
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	791b      	ldrb	r3, [r3, #4]
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d138      	bne.n	800baaa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	015a      	lsls	r2, r3, #5
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	4413      	add	r3, r2
 800ba40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	0151      	lsls	r1, r2, #5
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	440a      	add	r2, r1
 800ba4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba56:	6013      	str	r3, [r2, #0]
 800ba58:	e027      	b.n	800baaa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	015a      	lsls	r2, r3, #5
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	4413      	add	r3, r2
 800ba62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	0151      	lsls	r1, r2, #5
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	440a      	add	r2, r1
 800ba70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	791b      	ldrb	r3, [r3, #4]
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d003      	beq.n	800ba8a <USB_EPClearStall+0x9e>
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	791b      	ldrb	r3, [r3, #4]
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	d10f      	bne.n	800baaa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	015a      	lsls	r2, r3, #5
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	4413      	add	r3, r2
 800ba92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	0151      	lsls	r1, r2, #5
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	440a      	add	r2, r1
 800baa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baa8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3714      	adds	r7, #20
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	460b      	mov	r3, r1
 800bac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bad6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bada:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	78fb      	ldrb	r3, [r7, #3]
 800bae6:	011b      	lsls	r3, r3, #4
 800bae8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800baec:	68f9      	ldr	r1, [r7, #12]
 800baee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800baf2:	4313      	orrs	r3, r2
 800baf4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb1e:	f023 0303 	bic.w	r3, r3, #3
 800bb22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb32:	f023 0302 	bic.w	r3, r3, #2
 800bb36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bb46:	b480      	push	{r7}
 800bb48:	b085      	sub	sp, #20
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb60:	f023 0303 	bic.w	r3, r3, #3
 800bb64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb74:	f043 0302 	orr.w	r3, r3, #2
 800bb78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bba0:	68fb      	ldr	r3, [r7, #12]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b085      	sub	sp, #20
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc0:	699b      	ldr	r3, [r3, #24]
 800bbc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbca:	69db      	ldr	r3, [r3, #28]
 800bbcc:	68ba      	ldr	r2, [r7, #8]
 800bbce:	4013      	ands	r3, r2
 800bbd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	0c1b      	lsrs	r3, r3, #16
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b085      	sub	sp, #20
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbfe:	69db      	ldr	r3, [r3, #28]
 800bc00:	68ba      	ldr	r2, [r7, #8]
 800bc02:	4013      	ands	r3, r2
 800bc04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	b29b      	uxth	r3, r3
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3714      	adds	r7, #20
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc16:	b480      	push	{r7}
 800bc18:	b085      	sub	sp, #20
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	460b      	mov	r3, r1
 800bc20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bc26:	78fb      	ldrb	r3, [r7, #3]
 800bc28:	015a      	lsls	r2, r3, #5
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	4013      	ands	r3, r2
 800bc42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc44:	68bb      	ldr	r3, [r7, #8]
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b087      	sub	sp, #28
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bc76:	78fb      	ldrb	r3, [r7, #3]
 800bc78:	f003 030f 	and.w	r3, r3, #15
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc82:	01db      	lsls	r3, r3, #7
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bc8c:	78fb      	ldrb	r3, [r7, #3]
 800bc8e:	015a      	lsls	r2, r3, #5
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	4413      	add	r3, r2
 800bc94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	693a      	ldr	r2, [r7, #16]
 800bc9c:	4013      	ands	r3, r2
 800bc9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bca0:	68bb      	ldr	r3, [r7, #8]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	371c      	adds	r7, #28
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b083      	sub	sp, #12
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	f003 0301 	and.w	r3, r3, #1
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b085      	sub	sp, #20
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bce4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bce8:	f023 0307 	bic.w	r3, r3, #7
 800bcec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	68fa      	ldr	r2, [r7, #12]
 800bcf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b087      	sub	sp, #28
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	607a      	str	r2, [r7, #4]
 800bd1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	333c      	adds	r3, #60	; 0x3c
 800bd26:	3304      	adds	r3, #4
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	4a26      	ldr	r2, [pc, #152]	; (800bdc8 <USB_EP0_OutStart+0xb8>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d90a      	bls.n	800bd4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd44:	d101      	bne.n	800bd4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	e037      	b.n	800bdba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd50:	461a      	mov	r2, r3
 800bd52:	2300      	movs	r3, #0
 800bd54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	697a      	ldr	r2, [r7, #20]
 800bd60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	697a      	ldr	r2, [r7, #20]
 800bd74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd78:	f043 0318 	orr.w	r3, r3, #24
 800bd7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd84:	691b      	ldr	r3, [r3, #16]
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bd90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bd92:	7afb      	ldrb	r3, [r7, #11]
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d10f      	bne.n	800bdb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd9e:	461a      	mov	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bdb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	371c      	adds	r7, #28
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	4f54300a 	.word	0x4f54300a

0800bdcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	3301      	adds	r3, #1
 800bddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	4a13      	ldr	r2, [pc, #76]	; (800be30 <USB_CoreReset+0x64>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d901      	bls.n	800bdea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bde6:	2303      	movs	r3, #3
 800bde8:	e01b      	b.n	800be22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	daf2      	bge.n	800bdd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	f043 0201 	orr.w	r2, r3, #1
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3301      	adds	r3, #1
 800be06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	4a09      	ldr	r2, [pc, #36]	; (800be30 <USB_CoreReset+0x64>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d901      	bls.n	800be14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be10:	2303      	movs	r3, #3
 800be12:	e006      	b.n	800be22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	691b      	ldr	r3, [r3, #16]
 800be18:	f003 0301 	and.w	r3, r3, #1
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d0f0      	beq.n	800be02 <USB_CoreReset+0x36>

  return HAL_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	00030d40 	.word	0x00030d40

0800be34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	460b      	mov	r3, r1
 800be3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800be44:	f002 fca0 	bl	800e788 <USBD_static_malloc>
 800be48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d109      	bne.n	800be64 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	32b0      	adds	r2, #176	; 0xb0
 800be5a:	2100      	movs	r1, #0
 800be5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800be60:	2302      	movs	r3, #2
 800be62:	e0d4      	b.n	800c00e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800be64:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800be68:	2100      	movs	r1, #0
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f002 fd22 	bl	800e8b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	32b0      	adds	r2, #176	; 0xb0
 800be7a:	68f9      	ldr	r1, [r7, #12]
 800be7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	32b0      	adds	r2, #176	; 0xb0
 800be8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	7c1b      	ldrb	r3, [r3, #16]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d138      	bne.n	800bf0e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be9c:	4b5e      	ldr	r3, [pc, #376]	; (800c018 <USBD_CDC_Init+0x1e4>)
 800be9e:	7819      	ldrb	r1, [r3, #0]
 800bea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bea4:	2202      	movs	r2, #2
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f002 fb4b 	bl	800e542 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800beac:	4b5a      	ldr	r3, [pc, #360]	; (800c018 <USBD_CDC_Init+0x1e4>)
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	f003 020f 	and.w	r2, r3, #15
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	4613      	mov	r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	4413      	add	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	440b      	add	r3, r1
 800bec0:	3324      	adds	r3, #36	; 0x24
 800bec2:	2201      	movs	r2, #1
 800bec4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bec6:	4b55      	ldr	r3, [pc, #340]	; (800c01c <USBD_CDC_Init+0x1e8>)
 800bec8:	7819      	ldrb	r1, [r3, #0]
 800beca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bece:	2202      	movs	r2, #2
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f002 fb36 	bl	800e542 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bed6:	4b51      	ldr	r3, [pc, #324]	; (800c01c <USBD_CDC_Init+0x1e8>)
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	f003 020f 	and.w	r2, r3, #15
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	4613      	mov	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	440b      	add	r3, r1
 800beea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800beee:	2201      	movs	r2, #1
 800bef0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bef2:	4b4b      	ldr	r3, [pc, #300]	; (800c020 <USBD_CDC_Init+0x1ec>)
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	f003 020f 	and.w	r2, r3, #15
 800befa:	6879      	ldr	r1, [r7, #4]
 800befc:	4613      	mov	r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	440b      	add	r3, r1
 800bf06:	3326      	adds	r3, #38	; 0x26
 800bf08:	2210      	movs	r2, #16
 800bf0a:	801a      	strh	r2, [r3, #0]
 800bf0c:	e035      	b.n	800bf7a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bf0e:	4b42      	ldr	r3, [pc, #264]	; (800c018 <USBD_CDC_Init+0x1e4>)
 800bf10:	7819      	ldrb	r1, [r3, #0]
 800bf12:	2340      	movs	r3, #64	; 0x40
 800bf14:	2202      	movs	r2, #2
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f002 fb13 	bl	800e542 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf1c:	4b3e      	ldr	r3, [pc, #248]	; (800c018 <USBD_CDC_Init+0x1e4>)
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	f003 020f 	and.w	r2, r3, #15
 800bf24:	6879      	ldr	r1, [r7, #4]
 800bf26:	4613      	mov	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4413      	add	r3, r2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	440b      	add	r3, r1
 800bf30:	3324      	adds	r3, #36	; 0x24
 800bf32:	2201      	movs	r2, #1
 800bf34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf36:	4b39      	ldr	r3, [pc, #228]	; (800c01c <USBD_CDC_Init+0x1e8>)
 800bf38:	7819      	ldrb	r1, [r3, #0]
 800bf3a:	2340      	movs	r3, #64	; 0x40
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f002 faff 	bl	800e542 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf44:	4b35      	ldr	r3, [pc, #212]	; (800c01c <USBD_CDC_Init+0x1e8>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	f003 020f 	and.w	r2, r3, #15
 800bf4c:	6879      	ldr	r1, [r7, #4]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4413      	add	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	440b      	add	r3, r1
 800bf58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bf60:	4b2f      	ldr	r3, [pc, #188]	; (800c020 <USBD_CDC_Init+0x1ec>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	f003 020f 	and.w	r2, r3, #15
 800bf68:	6879      	ldr	r1, [r7, #4]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	440b      	add	r3, r1
 800bf74:	3326      	adds	r3, #38	; 0x26
 800bf76:	2210      	movs	r2, #16
 800bf78:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf7a:	4b29      	ldr	r3, [pc, #164]	; (800c020 <USBD_CDC_Init+0x1ec>)
 800bf7c:	7819      	ldrb	r1, [r3, #0]
 800bf7e:	2308      	movs	r3, #8
 800bf80:	2203      	movs	r2, #3
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f002 fadd 	bl	800e542 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bf88:	4b25      	ldr	r3, [pc, #148]	; (800c020 <USBD_CDC_Init+0x1ec>)
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	f003 020f 	and.w	r2, r3, #15
 800bf90:	6879      	ldr	r1, [r7, #4]
 800bf92:	4613      	mov	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	4413      	add	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	440b      	add	r3, r1
 800bf9c:	3324      	adds	r3, #36	; 0x24
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	33b0      	adds	r3, #176	; 0xb0
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d101      	bne.n	800bfdc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bfd8:	2302      	movs	r3, #2
 800bfda:	e018      	b.n	800c00e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	7c1b      	ldrb	r3, [r3, #16]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d10a      	bne.n	800bffa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfe4:	4b0d      	ldr	r3, [pc, #52]	; (800c01c <USBD_CDC_Init+0x1e8>)
 800bfe6:	7819      	ldrb	r1, [r3, #0]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f002 fb94 	bl	800e720 <USBD_LL_PrepareReceive>
 800bff8:	e008      	b.n	800c00c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bffa:	4b08      	ldr	r3, [pc, #32]	; (800c01c <USBD_CDC_Init+0x1e8>)
 800bffc:	7819      	ldrb	r1, [r3, #0]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c004:	2340      	movs	r3, #64	; 0x40
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f002 fb8a 	bl	800e720 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	200000a7 	.word	0x200000a7
 800c01c:	200000a8 	.word	0x200000a8
 800c020:	200000a9 	.word	0x200000a9

0800c024 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c030:	4b3a      	ldr	r3, [pc, #232]	; (800c11c <USBD_CDC_DeInit+0xf8>)
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f002 faa9 	bl	800e58e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c03c:	4b37      	ldr	r3, [pc, #220]	; (800c11c <USBD_CDC_DeInit+0xf8>)
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	f003 020f 	and.w	r2, r3, #15
 800c044:	6879      	ldr	r1, [r7, #4]
 800c046:	4613      	mov	r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	4413      	add	r3, r2
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	440b      	add	r3, r1
 800c050:	3324      	adds	r3, #36	; 0x24
 800c052:	2200      	movs	r2, #0
 800c054:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c056:	4b32      	ldr	r3, [pc, #200]	; (800c120 <USBD_CDC_DeInit+0xfc>)
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f002 fa96 	bl	800e58e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c062:	4b2f      	ldr	r3, [pc, #188]	; (800c120 <USBD_CDC_DeInit+0xfc>)
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	f003 020f 	and.w	r2, r3, #15
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	4613      	mov	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	440b      	add	r3, r1
 800c076:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c07a:	2200      	movs	r2, #0
 800c07c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c07e:	4b29      	ldr	r3, [pc, #164]	; (800c124 <USBD_CDC_DeInit+0x100>)
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f002 fa82 	bl	800e58e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c08a:	4b26      	ldr	r3, [pc, #152]	; (800c124 <USBD_CDC_DeInit+0x100>)
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	f003 020f 	and.w	r2, r3, #15
 800c092:	6879      	ldr	r1, [r7, #4]
 800c094:	4613      	mov	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	440b      	add	r3, r1
 800c09e:	3324      	adds	r3, #36	; 0x24
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c0a4:	4b1f      	ldr	r3, [pc, #124]	; (800c124 <USBD_CDC_DeInit+0x100>)
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	f003 020f 	and.w	r2, r3, #15
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	440b      	add	r3, r1
 800c0b8:	3326      	adds	r3, #38	; 0x26
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	32b0      	adds	r2, #176	; 0xb0
 800c0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d01f      	beq.n	800c110 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	33b0      	adds	r3, #176	; 0xb0
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	4413      	add	r3, r2
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	32b0      	adds	r2, #176	; 0xb0
 800c0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f002 fb56 	bl	800e7a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	32b0      	adds	r2, #176	; 0xb0
 800c102:	2100      	movs	r1, #0
 800c104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c110:	2300      	movs	r3, #0
}
 800c112:	4618      	mov	r0, r3
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	200000a7 	.word	0x200000a7
 800c120:	200000a8 	.word	0x200000a8
 800c124:	200000a9 	.word	0x200000a9

0800c128 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	32b0      	adds	r2, #176	; 0xb0
 800c13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c140:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c142:	2300      	movs	r3, #0
 800c144:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c146:	2300      	movs	r3, #0
 800c148:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c14a:	2300      	movs	r3, #0
 800c14c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d101      	bne.n	800c158 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c154:	2303      	movs	r3, #3
 800c156:	e0bf      	b.n	800c2d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c160:	2b00      	cmp	r3, #0
 800c162:	d050      	beq.n	800c206 <USBD_CDC_Setup+0xde>
 800c164:	2b20      	cmp	r3, #32
 800c166:	f040 80af 	bne.w	800c2c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	88db      	ldrh	r3, [r3, #6]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d03a      	beq.n	800c1e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	b25b      	sxtb	r3, r3
 800c178:	2b00      	cmp	r3, #0
 800c17a:	da1b      	bge.n	800c1b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	33b0      	adds	r3, #176	; 0xb0
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	4413      	add	r3, r2
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c192:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	88d2      	ldrh	r2, [r2, #6]
 800c198:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	88db      	ldrh	r3, [r3, #6]
 800c19e:	2b07      	cmp	r3, #7
 800c1a0:	bf28      	it	cs
 800c1a2:	2307      	movcs	r3, #7
 800c1a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	89fa      	ldrh	r2, [r7, #14]
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f001 fd89 	bl	800dcc4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c1b2:	e090      	b.n	800c2d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	785a      	ldrb	r2, [r3, #1]
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	88db      	ldrh	r3, [r3, #6]
 800c1c2:	2b3f      	cmp	r3, #63	; 0x3f
 800c1c4:	d803      	bhi.n	800c1ce <USBD_CDC_Setup+0xa6>
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	88db      	ldrh	r3, [r3, #6]
 800c1ca:	b2da      	uxtb	r2, r3
 800c1cc:	e000      	b.n	800c1d0 <USBD_CDC_Setup+0xa8>
 800c1ce:	2240      	movs	r2, #64	; 0x40
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c1d6:	6939      	ldr	r1, [r7, #16]
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c1de:	461a      	mov	r2, r3
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f001 fd9b 	bl	800dd1c <USBD_CtlPrepareRx>
      break;
 800c1e6:	e076      	b.n	800c2d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	33b0      	adds	r3, #176	; 0xb0
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	7850      	ldrb	r0, [r2, #1]
 800c1fe:	2200      	movs	r2, #0
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	4798      	blx	r3
      break;
 800c204:	e067      	b.n	800c2d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	785b      	ldrb	r3, [r3, #1]
 800c20a:	2b0b      	cmp	r3, #11
 800c20c:	d851      	bhi.n	800c2b2 <USBD_CDC_Setup+0x18a>
 800c20e:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <USBD_CDC_Setup+0xec>)
 800c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c214:	0800c245 	.word	0x0800c245
 800c218:	0800c2c1 	.word	0x0800c2c1
 800c21c:	0800c2b3 	.word	0x0800c2b3
 800c220:	0800c2b3 	.word	0x0800c2b3
 800c224:	0800c2b3 	.word	0x0800c2b3
 800c228:	0800c2b3 	.word	0x0800c2b3
 800c22c:	0800c2b3 	.word	0x0800c2b3
 800c230:	0800c2b3 	.word	0x0800c2b3
 800c234:	0800c2b3 	.word	0x0800c2b3
 800c238:	0800c2b3 	.word	0x0800c2b3
 800c23c:	0800c26f 	.word	0x0800c26f
 800c240:	0800c299 	.word	0x0800c299
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d107      	bne.n	800c260 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c250:	f107 030a 	add.w	r3, r7, #10
 800c254:	2202      	movs	r2, #2
 800c256:	4619      	mov	r1, r3
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f001 fd33 	bl	800dcc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c25e:	e032      	b.n	800c2c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c260:	6839      	ldr	r1, [r7, #0]
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f001 fcbd 	bl	800dbe2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c268:	2303      	movs	r3, #3
 800c26a:	75fb      	strb	r3, [r7, #23]
          break;
 800c26c:	e02b      	b.n	800c2c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c274:	b2db      	uxtb	r3, r3
 800c276:	2b03      	cmp	r3, #3
 800c278:	d107      	bne.n	800c28a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c27a:	f107 030d 	add.w	r3, r7, #13
 800c27e:	2201      	movs	r2, #1
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f001 fd1e 	bl	800dcc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c288:	e01d      	b.n	800c2c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f001 fca8 	bl	800dbe2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c292:	2303      	movs	r3, #3
 800c294:	75fb      	strb	r3, [r7, #23]
          break;
 800c296:	e016      	b.n	800c2c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b03      	cmp	r3, #3
 800c2a2:	d00f      	beq.n	800c2c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f001 fc9b 	bl	800dbe2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c2b0:	e008      	b.n	800c2c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f001 fc94 	bl	800dbe2 <USBD_CtlError>
          ret = USBD_FAIL;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	75fb      	strb	r3, [r7, #23]
          break;
 800c2be:	e002      	b.n	800c2c6 <USBD_CDC_Setup+0x19e>
          break;
 800c2c0:	bf00      	nop
 800c2c2:	e008      	b.n	800c2d6 <USBD_CDC_Setup+0x1ae>
          break;
 800c2c4:	bf00      	nop
      }
      break;
 800c2c6:	e006      	b.n	800c2d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c2c8:	6839      	ldr	r1, [r7, #0]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f001 fc89 	bl	800dbe2 <USBD_CtlError>
      ret = USBD_FAIL;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	75fb      	strb	r3, [r7, #23]
      break;
 800c2d4:	bf00      	nop
  }

  return (uint8_t)ret;
 800c2d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3718      	adds	r7, #24
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	32b0      	adds	r2, #176	; 0xb0
 800c2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c306:	2303      	movs	r3, #3
 800c308:	e065      	b.n	800c3d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	32b0      	adds	r2, #176	; 0xb0
 800c314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c318:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c31a:	78fb      	ldrb	r3, [r7, #3]
 800c31c:	f003 020f 	and.w	r2, r3, #15
 800c320:	6879      	ldr	r1, [r7, #4]
 800c322:	4613      	mov	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	440b      	add	r3, r1
 800c32c:	3318      	adds	r3, #24
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d02f      	beq.n	800c394 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c334:	78fb      	ldrb	r3, [r7, #3]
 800c336:	f003 020f 	and.w	r2, r3, #15
 800c33a:	6879      	ldr	r1, [r7, #4]
 800c33c:	4613      	mov	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	440b      	add	r3, r1
 800c346:	3318      	adds	r3, #24
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	78fb      	ldrb	r3, [r7, #3]
 800c34c:	f003 010f 	and.w	r1, r3, #15
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	460b      	mov	r3, r1
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	440b      	add	r3, r1
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4403      	add	r3, r0
 800c35c:	3348      	adds	r3, #72	; 0x48
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	fbb2 f1f3 	udiv	r1, r2, r3
 800c364:	fb01 f303 	mul.w	r3, r1, r3
 800c368:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d112      	bne.n	800c394 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c36e:	78fb      	ldrb	r3, [r7, #3]
 800c370:	f003 020f 	and.w	r2, r3, #15
 800c374:	6879      	ldr	r1, [r7, #4]
 800c376:	4613      	mov	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	440b      	add	r3, r1
 800c380:	3318      	adds	r3, #24
 800c382:	2200      	movs	r2, #0
 800c384:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c386:	78f9      	ldrb	r1, [r7, #3]
 800c388:	2300      	movs	r3, #0
 800c38a:	2200      	movs	r2, #0
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f002 f9a6 	bl	800e6de <USBD_LL_Transmit>
 800c392:	e01f      	b.n	800c3d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2200      	movs	r2, #0
 800c398:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	33b0      	adds	r3, #176	; 0xb0
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d010      	beq.n	800c3d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	33b0      	adds	r3, #176	; 0xb0
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	4413      	add	r3, r2
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c3d0:	78fa      	ldrb	r2, [r7, #3]
 800c3d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b084      	sub	sp, #16
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	32b0      	adds	r2, #176	; 0xb0
 800c3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	32b0      	adds	r2, #176	; 0xb0
 800c404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c40c:	2303      	movs	r3, #3
 800c40e:	e01a      	b.n	800c446 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c410:	78fb      	ldrb	r3, [r7, #3]
 800c412:	4619      	mov	r1, r3
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f002 f9a4 	bl	800e762 <USBD_LL_GetRxDataSize>
 800c41a:	4602      	mov	r2, r0
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	33b0      	adds	r3, #176	; 0xb0
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	4413      	add	r3, r2
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c440:	4611      	mov	r1, r2
 800c442:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b084      	sub	sp, #16
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	32b0      	adds	r2, #176	; 0xb0
 800c460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c464:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d101      	bne.n	800c470 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e025      	b.n	800c4bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	33b0      	adds	r3, #176	; 0xb0
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4413      	add	r3, r2
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d01a      	beq.n	800c4ba <USBD_CDC_EP0_RxReady+0x6c>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c48a:	2bff      	cmp	r3, #255	; 0xff
 800c48c:	d015      	beq.n	800c4ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	33b0      	adds	r3, #176	; 0xb0
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	4413      	add	r3, r2
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c4a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c4ae:	b292      	uxth	r2, r2
 800c4b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	22ff      	movs	r2, #255	; 0xff
 800c4b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4cc:	2182      	movs	r1, #130	; 0x82
 800c4ce:	4818      	ldr	r0, [pc, #96]	; (800c530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4d0:	f000 fd4f 	bl	800cf72 <USBD_GetEpDesc>
 800c4d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	4815      	ldr	r0, [pc, #84]	; (800c530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4da:	f000 fd4a 	bl	800cf72 <USBD_GetEpDesc>
 800c4de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4e0:	2181      	movs	r1, #129	; 0x81
 800c4e2:	4813      	ldr	r0, [pc, #76]	; (800c530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4e4:	f000 fd45 	bl	800cf72 <USBD_GetEpDesc>
 800c4e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d002      	beq.n	800c4f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	2210      	movs	r2, #16
 800c4f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d006      	beq.n	800c50a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c504:	711a      	strb	r2, [r3, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d006      	beq.n	800c51e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2200      	movs	r2, #0
 800c514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c518:	711a      	strb	r2, [r3, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2243      	movs	r2, #67	; 0x43
 800c522:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c524:	4b02      	ldr	r3, [pc, #8]	; (800c530 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c526:	4618      	mov	r0, r3
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	20000064 	.word	0x20000064

0800c534 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b086      	sub	sp, #24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c53c:	2182      	movs	r1, #130	; 0x82
 800c53e:	4818      	ldr	r0, [pc, #96]	; (800c5a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c540:	f000 fd17 	bl	800cf72 <USBD_GetEpDesc>
 800c544:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c546:	2101      	movs	r1, #1
 800c548:	4815      	ldr	r0, [pc, #84]	; (800c5a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c54a:	f000 fd12 	bl	800cf72 <USBD_GetEpDesc>
 800c54e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c550:	2181      	movs	r1, #129	; 0x81
 800c552:	4813      	ldr	r0, [pc, #76]	; (800c5a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c554:	f000 fd0d 	bl	800cf72 <USBD_GetEpDesc>
 800c558:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d002      	beq.n	800c566 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	2210      	movs	r2, #16
 800c564:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d006      	beq.n	800c57a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	2200      	movs	r2, #0
 800c570:	711a      	strb	r2, [r3, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	f042 0202 	orr.w	r2, r2, #2
 800c578:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d006      	beq.n	800c58e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	711a      	strb	r2, [r3, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	f042 0202 	orr.w	r2, r2, #2
 800c58c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2243      	movs	r2, #67	; 0x43
 800c592:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c594:	4b02      	ldr	r3, [pc, #8]	; (800c5a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c596:	4618      	mov	r0, r3
 800c598:	3718      	adds	r7, #24
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	20000064 	.word	0x20000064

0800c5a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b086      	sub	sp, #24
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c5ac:	2182      	movs	r1, #130	; 0x82
 800c5ae:	4818      	ldr	r0, [pc, #96]	; (800c610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5b0:	f000 fcdf 	bl	800cf72 <USBD_GetEpDesc>
 800c5b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c5b6:	2101      	movs	r1, #1
 800c5b8:	4815      	ldr	r0, [pc, #84]	; (800c610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5ba:	f000 fcda 	bl	800cf72 <USBD_GetEpDesc>
 800c5be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c5c0:	2181      	movs	r1, #129	; 0x81
 800c5c2:	4813      	ldr	r0, [pc, #76]	; (800c610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5c4:	f000 fcd5 	bl	800cf72 <USBD_GetEpDesc>
 800c5c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d002      	beq.n	800c5d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	2210      	movs	r2, #16
 800c5d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d006      	beq.n	800c5ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5e4:	711a      	strb	r2, [r3, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d006      	beq.n	800c5fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5f8:	711a      	strb	r2, [r3, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2243      	movs	r2, #67	; 0x43
 800c602:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c604:	4b02      	ldr	r3, [pc, #8]	; (800c610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c606:	4618      	mov	r0, r3
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	20000064 	.word	0x20000064

0800c614 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	220a      	movs	r2, #10
 800c620:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c622:	4b03      	ldr	r3, [pc, #12]	; (800c630 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c624:	4618      	mov	r0, r3
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr
 800c630:	20000020 	.word	0x20000020

0800c634 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c644:	2303      	movs	r3, #3
 800c646:	e009      	b.n	800c65c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	33b0      	adds	r3, #176	; 0xb0
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4413      	add	r3, r2
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c668:	b480      	push	{r7}
 800c66a:	b087      	sub	sp, #28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	32b0      	adds	r2, #176	; 0xb0
 800c67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c682:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d101      	bne.n	800c68e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c68a:	2303      	movs	r3, #3
 800c68c:	e008      	b.n	800c6a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c69e:	2300      	movs	r3, #0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	371c      	adds	r7, #28
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	32b0      	adds	r2, #176	; 0xb0
 800c6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d101      	bne.n	800c6d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c6cc:	2303      	movs	r3, #3
 800c6ce:	e004      	b.n	800c6da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3714      	adds	r7, #20
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
	...

0800c6e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	32b0      	adds	r2, #176	; 0xb0
 800c6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c700:	2301      	movs	r3, #1
 800c702:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	32b0      	adds	r2, #176	; 0xb0
 800c70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d101      	bne.n	800c71a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c716:	2303      	movs	r3, #3
 800c718:	e025      	b.n	800c766 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c720:	2b00      	cmp	r3, #0
 800c722:	d11f      	bne.n	800c764 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	2201      	movs	r2, #1
 800c728:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c72c:	4b10      	ldr	r3, [pc, #64]	; (800c770 <USBD_CDC_TransmitPacket+0x88>)
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	f003 020f 	and.w	r2, r3, #15
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	4613      	mov	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4413      	add	r3, r2
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4403      	add	r3, r0
 800c746:	3318      	adds	r3, #24
 800c748:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c74a:	4b09      	ldr	r3, [pc, #36]	; (800c770 <USBD_CDC_TransmitPacket+0x88>)
 800c74c:	7819      	ldrb	r1, [r3, #0]
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f001 ffbf 	bl	800e6de <USBD_LL_Transmit>

    ret = USBD_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c764:	7bfb      	ldrb	r3, [r7, #15]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	200000a7 	.word	0x200000a7

0800c774 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	32b0      	adds	r2, #176	; 0xb0
 800c786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c78a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	32b0      	adds	r2, #176	; 0xb0
 800c796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d101      	bne.n	800c7a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	e018      	b.n	800c7d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	7c1b      	ldrb	r3, [r3, #16]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10a      	bne.n	800c7c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c7aa:	4b0c      	ldr	r3, [pc, #48]	; (800c7dc <USBD_CDC_ReceivePacket+0x68>)
 800c7ac:	7819      	ldrb	r1, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c7b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f001 ffb1 	bl	800e720 <USBD_LL_PrepareReceive>
 800c7be:	e008      	b.n	800c7d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c7c0:	4b06      	ldr	r3, [pc, #24]	; (800c7dc <USBD_CDC_ReceivePacket+0x68>)
 800c7c2:	7819      	ldrb	r1, [r3, #0]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c7ca:	2340      	movs	r3, #64	; 0x40
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f001 ffa7 	bl	800e720 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	200000a8 	.word	0x200000a8

0800c7e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d101      	bne.n	800c7f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c7f4:	2303      	movs	r3, #3
 800c7f6:	e01f      	b.n	800c838 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2200      	movs	r2, #0
 800c804:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d003      	beq.n	800c81e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2201      	movs	r2, #1
 800c822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	79fa      	ldrb	r2, [r7, #7]
 800c82a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f001 fe21 	bl	800e474 <USBD_LL_Init>
 800c832:	4603      	mov	r3, r0
 800c834:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c836:	7dfb      	ldrb	r3, [r7, #23]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3718      	adds	r7, #24
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c84a:	2300      	movs	r3, #0
 800c84c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d101      	bne.n	800c858 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c854:	2303      	movs	r3, #3
 800c856:	e025      	b.n	800c8a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	683a      	ldr	r2, [r7, #0]
 800c85c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	32ae      	adds	r2, #174	; 0xae
 800c86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00f      	beq.n	800c894 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	32ae      	adds	r2, #174	; 0xae
 800c87e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c884:	f107 020e 	add.w	r2, r7, #14
 800c888:	4610      	mov	r0, r2
 800c88a:	4798      	blx	r3
 800c88c:	4602      	mov	r2, r0
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f001 fe29 	bl	800e50c <USBD_LL_Start>
 800c8ba:	4603      	mov	r3, r0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c8cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	370c      	adds	r7, #12
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b084      	sub	sp, #16
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d009      	beq.n	800c908 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	78fa      	ldrb	r2, [r7, #3]
 800c8fe:	4611      	mov	r1, r2
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	4798      	blx	r3
 800c904:	4603      	mov	r3, r0
 800c906:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c908:	7bfb      	ldrb	r3, [r7, #15]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b084      	sub	sp, #16
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
 800c91a:	460b      	mov	r3, r1
 800c91c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	78fa      	ldrb	r2, [r7, #3]
 800c92c:	4611      	mov	r1, r2
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	4798      	blx	r3
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d001      	beq.n	800c93c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c938:	2303      	movs	r3, #3
 800c93a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b084      	sub	sp, #16
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
 800c94e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	4618      	mov	r0, r3
 800c95a:	f001 f908 	bl	800db6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2201      	movs	r2, #1
 800c962:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c96c:	461a      	mov	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c97a:	f003 031f 	and.w	r3, r3, #31
 800c97e:	2b02      	cmp	r3, #2
 800c980:	d01a      	beq.n	800c9b8 <USBD_LL_SetupStage+0x72>
 800c982:	2b02      	cmp	r3, #2
 800c984:	d822      	bhi.n	800c9cc <USBD_LL_SetupStage+0x86>
 800c986:	2b00      	cmp	r3, #0
 800c988:	d002      	beq.n	800c990 <USBD_LL_SetupStage+0x4a>
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d00a      	beq.n	800c9a4 <USBD_LL_SetupStage+0x5e>
 800c98e:	e01d      	b.n	800c9cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c996:	4619      	mov	r1, r3
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fb5f 	bl	800d05c <USBD_StdDevReq>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	73fb      	strb	r3, [r7, #15]
      break;
 800c9a2:	e020      	b.n	800c9e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fbc7 	bl	800d140 <USBD_StdItfReq>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	73fb      	strb	r3, [r7, #15]
      break;
 800c9b6:	e016      	b.n	800c9e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fc29 	bl	800d218 <USBD_StdEPReq>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	73fb      	strb	r3, [r7, #15]
      break;
 800c9ca:	e00c      	b.n	800c9e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c9d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	4619      	mov	r1, r3
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f001 fdf6 	bl	800e5cc <USBD_LL_StallEP>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c9e4:	bf00      	nop
  }

  return ret;
 800c9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	607a      	str	r2, [r7, #4]
 800c9fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ca02:	7afb      	ldrb	r3, [r7, #11]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d16e      	bne.n	800cae6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ca0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca16:	2b03      	cmp	r3, #3
 800ca18:	f040 8098 	bne.w	800cb4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	689a      	ldr	r2, [r3, #8]
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d913      	bls.n	800ca50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	689a      	ldr	r2, [r3, #8]
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	1ad2      	subs	r2, r2, r3
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	68da      	ldr	r2, [r3, #12]
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	bf28      	it	cs
 800ca42:	4613      	movcs	r3, r2
 800ca44:	461a      	mov	r2, r3
 800ca46:	6879      	ldr	r1, [r7, #4]
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f001 f984 	bl	800dd56 <USBD_CtlContinueRx>
 800ca4e:	e07d      	b.n	800cb4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca56:	f003 031f 	and.w	r3, r3, #31
 800ca5a:	2b02      	cmp	r3, #2
 800ca5c:	d014      	beq.n	800ca88 <USBD_LL_DataOutStage+0x98>
 800ca5e:	2b02      	cmp	r3, #2
 800ca60:	d81d      	bhi.n	800ca9e <USBD_LL_DataOutStage+0xae>
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d002      	beq.n	800ca6c <USBD_LL_DataOutStage+0x7c>
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d003      	beq.n	800ca72 <USBD_LL_DataOutStage+0x82>
 800ca6a:	e018      	b.n	800ca9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	75bb      	strb	r3, [r7, #22]
            break;
 800ca70:	e018      	b.n	800caa4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	68f8      	ldr	r0, [r7, #12]
 800ca7e:	f000 fa5e 	bl	800cf3e <USBD_CoreFindIF>
 800ca82:	4603      	mov	r3, r0
 800ca84:	75bb      	strb	r3, [r7, #22]
            break;
 800ca86:	e00d      	b.n	800caa4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	4619      	mov	r1, r3
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f000 fa60 	bl	800cf58 <USBD_CoreFindEP>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	75bb      	strb	r3, [r7, #22]
            break;
 800ca9c:	e002      	b.n	800caa4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	75bb      	strb	r3, [r7, #22]
            break;
 800caa2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800caa4:	7dbb      	ldrb	r3, [r7, #22]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d119      	bne.n	800cade <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	2b03      	cmp	r3, #3
 800cab4:	d113      	bne.n	800cade <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cab6:	7dba      	ldrb	r2, [r7, #22]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	32ae      	adds	r2, #174	; 0xae
 800cabc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cac0:	691b      	ldr	r3, [r3, #16]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00b      	beq.n	800cade <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cac6:	7dba      	ldrb	r2, [r7, #22]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cace:	7dba      	ldrb	r2, [r7, #22]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	32ae      	adds	r2, #174	; 0xae
 800cad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f001 f94a 	bl	800dd78 <USBD_CtlSendStatus>
 800cae4:	e032      	b.n	800cb4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cae6:	7afb      	ldrb	r3, [r7, #11]
 800cae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caec:	b2db      	uxtb	r3, r3
 800caee:	4619      	mov	r1, r3
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	f000 fa31 	bl	800cf58 <USBD_CoreFindEP>
 800caf6:	4603      	mov	r3, r0
 800caf8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cafa:	7dbb      	ldrb	r3, [r7, #22]
 800cafc:	2bff      	cmp	r3, #255	; 0xff
 800cafe:	d025      	beq.n	800cb4c <USBD_LL_DataOutStage+0x15c>
 800cb00:	7dbb      	ldrb	r3, [r7, #22]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d122      	bne.n	800cb4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	2b03      	cmp	r3, #3
 800cb10:	d117      	bne.n	800cb42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cb12:	7dba      	ldrb	r2, [r7, #22]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	32ae      	adds	r2, #174	; 0xae
 800cb18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb1c:	699b      	ldr	r3, [r3, #24]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00f      	beq.n	800cb42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cb22:	7dba      	ldrb	r2, [r7, #22]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cb2a:	7dba      	ldrb	r2, [r7, #22]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	32ae      	adds	r2, #174	; 0xae
 800cb30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb34:	699b      	ldr	r3, [r3, #24]
 800cb36:	7afa      	ldrb	r2, [r7, #11]
 800cb38:	4611      	mov	r1, r2
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	4798      	blx	r3
 800cb3e:	4603      	mov	r3, r0
 800cb40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cb42:	7dfb      	ldrb	r3, [r7, #23]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d001      	beq.n	800cb4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cb48:	7dfb      	ldrb	r3, [r7, #23]
 800cb4a:	e000      	b.n	800cb4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b086      	sub	sp, #24
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	60f8      	str	r0, [r7, #12]
 800cb5e:	460b      	mov	r3, r1
 800cb60:	607a      	str	r2, [r7, #4]
 800cb62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cb64:	7afb      	ldrb	r3, [r7, #11]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d16f      	bne.n	800cc4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	3314      	adds	r3, #20
 800cb6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	d15a      	bne.n	800cc30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	689a      	ldr	r2, [r3, #8]
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d914      	bls.n	800cbb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	689a      	ldr	r2, [r3, #8]
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	1ad2      	subs	r2, r2, r3
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	6879      	ldr	r1, [r7, #4]
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f001 f8ac 	bl	800dcfa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cba2:	2300      	movs	r3, #0
 800cba4:	2200      	movs	r2, #0
 800cba6:	2100      	movs	r1, #0
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f001 fdb9 	bl	800e720 <USBD_LL_PrepareReceive>
 800cbae:	e03f      	b.n	800cc30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	68da      	ldr	r2, [r3, #12]
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d11c      	bne.n	800cbf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d316      	bcc.n	800cbf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d20f      	bcs.n	800cbf6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	2100      	movs	r1, #0
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f001 f88d 	bl	800dcfa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbe8:	2300      	movs	r3, #0
 800cbea:	2200      	movs	r2, #0
 800cbec:	2100      	movs	r1, #0
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f001 fd96 	bl	800e720 <USBD_LL_PrepareReceive>
 800cbf4:	e01c      	b.n	800cc30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d10f      	bne.n	800cc22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d009      	beq.n	800cc22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc22:	2180      	movs	r1, #128	; 0x80
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f001 fcd1 	bl	800e5cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f001 f8b7 	bl	800dd9e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d03a      	beq.n	800ccb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f7ff fe42 	bl	800c8c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cc48:	e032      	b.n	800ccb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cc4a:	7afb      	ldrb	r3, [r7, #11]
 800cc4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	4619      	mov	r1, r3
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f000 f97f 	bl	800cf58 <USBD_CoreFindEP>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	2bff      	cmp	r3, #255	; 0xff
 800cc62:	d025      	beq.n	800ccb0 <USBD_LL_DataInStage+0x15a>
 800cc64:	7dfb      	ldrb	r3, [r7, #23]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d122      	bne.n	800ccb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	2b03      	cmp	r3, #3
 800cc74:	d11c      	bne.n	800ccb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cc76:	7dfa      	ldrb	r2, [r7, #23]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	32ae      	adds	r2, #174	; 0xae
 800cc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc80:	695b      	ldr	r3, [r3, #20]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d014      	beq.n	800ccb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cc86:	7dfa      	ldrb	r2, [r7, #23]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cc8e:	7dfa      	ldrb	r2, [r7, #23]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	32ae      	adds	r2, #174	; 0xae
 800cc94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc98:	695b      	ldr	r3, [r3, #20]
 800cc9a:	7afa      	ldrb	r2, [r7, #11]
 800cc9c:	4611      	mov	r1, r2
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	4798      	blx	r3
 800cca2:	4603      	mov	r3, r0
 800cca4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cca6:	7dbb      	ldrb	r3, [r7, #22]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d001      	beq.n	800ccb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ccac:	7dbb      	ldrb	r3, [r7, #22]
 800ccae:	e000      	b.n	800ccb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3718      	adds	r7, #24
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b084      	sub	sp, #16
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d014      	beq.n	800cd20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00e      	beq.n	800cd20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	6852      	ldr	r2, [r2, #4]
 800cd0e:	b2d2      	uxtb	r2, r2
 800cd10:	4611      	mov	r1, r2
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	4798      	blx	r3
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d001      	beq.n	800cd20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cd1c:	2303      	movs	r3, #3
 800cd1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd20:	2340      	movs	r3, #64	; 0x40
 800cd22:	2200      	movs	r2, #0
 800cd24:	2100      	movs	r1, #0
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f001 fc0b 	bl	800e542 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2240      	movs	r2, #64	; 0x40
 800cd38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd3c:	2340      	movs	r3, #64	; 0x40
 800cd3e:	2200      	movs	r2, #0
 800cd40:	2180      	movs	r1, #128	; 0x80
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f001 fbfd 	bl	800e542 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2240      	movs	r2, #64	; 0x40
 800cd52:	621a      	str	r2, [r3, #32]

  return ret;
 800cd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cd5e:	b480      	push	{r7}
 800cd60:	b083      	sub	sp, #12
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	460b      	mov	r3, r1
 800cd68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	78fa      	ldrb	r2, [r7, #3]
 800cd6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	370c      	adds	r7, #12
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr

0800cd7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cd7e:	b480      	push	{r7}
 800cd80:	b083      	sub	sp, #12
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2204      	movs	r2, #4
 800cd98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	370c      	adds	r7, #12
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr

0800cdaa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cdaa:	b480      	push	{r7}
 800cdac:	b083      	sub	sp, #12
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	2b04      	cmp	r3, #4
 800cdbc:	d106      	bne.n	800cdcc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cdc4:	b2da      	uxtb	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	370c      	adds	r7, #12
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b082      	sub	sp, #8
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	2b03      	cmp	r3, #3
 800cdec:	d110      	bne.n	800ce10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00b      	beq.n	800ce10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdfe:	69db      	ldr	r3, [r3, #28]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d005      	beq.n	800ce10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce0a:	69db      	ldr	r3, [r3, #28]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b082      	sub	sp, #8
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	460b      	mov	r3, r1
 800ce24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	32ae      	adds	r2, #174	; 0xae
 800ce30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d101      	bne.n	800ce3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	e01c      	b.n	800ce76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d115      	bne.n	800ce74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	32ae      	adds	r2, #174	; 0xae
 800ce52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce56:	6a1b      	ldr	r3, [r3, #32]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00b      	beq.n	800ce74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	32ae      	adds	r2, #174	; 0xae
 800ce66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce6a:	6a1b      	ldr	r3, [r3, #32]
 800ce6c:	78fa      	ldrb	r2, [r7, #3]
 800ce6e:	4611      	mov	r1, r2
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3708      	adds	r7, #8
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b082      	sub	sp, #8
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	460b      	mov	r3, r1
 800ce88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	32ae      	adds	r2, #174	; 0xae
 800ce94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ce9c:	2303      	movs	r3, #3
 800ce9e:	e01c      	b.n	800ceda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	2b03      	cmp	r3, #3
 800ceaa:	d115      	bne.n	800ced8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	32ae      	adds	r2, #174	; 0xae
 800ceb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00b      	beq.n	800ced8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	32ae      	adds	r2, #174	; 0xae
 800ceca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced0:	78fa      	ldrb	r2, [r7, #3]
 800ced2:	4611      	mov	r1, r2
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ced8:	2300      	movs	r3, #0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3708      	adds	r7, #8
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cee2:	b480      	push	{r7}
 800cee4:	b083      	sub	sp, #12
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cf00:	2300      	movs	r3, #0
 800cf02:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00e      	beq.n	800cf34 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	6852      	ldr	r2, [r2, #4]
 800cf22:	b2d2      	uxtb	r2, r2
 800cf24:	4611      	mov	r1, r2
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	4798      	blx	r3
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d001      	beq.n	800cf34 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cf30:	2303      	movs	r3, #3
 800cf32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf34:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cf3e:	b480      	push	{r7}
 800cf40:	b083      	sub	sp, #12
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
 800cf46:	460b      	mov	r3, r1
 800cf48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cf4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	370c      	adds	r7, #12
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	460b      	mov	r3, r1
 800cf62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cf64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b086      	sub	sp, #24
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cf86:	2300      	movs	r3, #0
 800cf88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	885b      	ldrh	r3, [r3, #2]
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d920      	bls.n	800cfdc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cfa2:	e013      	b.n	800cfcc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cfa4:	f107 030a 	add.w	r3, r7, #10
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6978      	ldr	r0, [r7, #20]
 800cfac:	f000 f81b 	bl	800cfe6 <USBD_GetNextDesc>
 800cfb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	785b      	ldrb	r3, [r3, #1]
 800cfb6:	2b05      	cmp	r3, #5
 800cfb8:	d108      	bne.n	800cfcc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	789b      	ldrb	r3, [r3, #2]
 800cfc2:	78fa      	ldrb	r2, [r7, #3]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d008      	beq.n	800cfda <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	885b      	ldrh	r3, [r3, #2]
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	897b      	ldrh	r3, [r7, #10]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d8e5      	bhi.n	800cfa4 <USBD_GetEpDesc+0x32>
 800cfd8:	e000      	b.n	800cfdc <USBD_GetEpDesc+0x6a>
          break;
 800cfda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cfdc:	693b      	ldr	r3, [r7, #16]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3718      	adds	r7, #24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cfe6:	b480      	push	{r7}
 800cfe8:	b085      	sub	sp, #20
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	881a      	ldrh	r2, [r3, #0]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	4413      	add	r3, r2
 800d000:	b29a      	uxth	r2, r3
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	461a      	mov	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4413      	add	r3, r2
 800d010:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d012:	68fb      	ldr	r3, [r7, #12]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d020:	b480      	push	{r7}
 800d022:	b087      	sub	sp, #28
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	3301      	adds	r3, #1
 800d036:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d03e:	8a3b      	ldrh	r3, [r7, #16]
 800d040:	021b      	lsls	r3, r3, #8
 800d042:	b21a      	sxth	r2, r3
 800d044:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d048:	4313      	orrs	r3, r2
 800d04a:	b21b      	sxth	r3, r3
 800d04c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d04e:	89fb      	ldrh	r3, [r7, #14]
}
 800d050:	4618      	mov	r0, r3
 800d052:	371c      	adds	r7, #28
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d066:	2300      	movs	r3, #0
 800d068:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d072:	2b40      	cmp	r3, #64	; 0x40
 800d074:	d005      	beq.n	800d082 <USBD_StdDevReq+0x26>
 800d076:	2b40      	cmp	r3, #64	; 0x40
 800d078:	d857      	bhi.n	800d12a <USBD_StdDevReq+0xce>
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00f      	beq.n	800d09e <USBD_StdDevReq+0x42>
 800d07e:	2b20      	cmp	r3, #32
 800d080:	d153      	bne.n	800d12a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	32ae      	adds	r2, #174	; 0xae
 800d08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	6839      	ldr	r1, [r7, #0]
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	4798      	blx	r3
 800d098:	4603      	mov	r3, r0
 800d09a:	73fb      	strb	r3, [r7, #15]
      break;
 800d09c:	e04a      	b.n	800d134 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	785b      	ldrb	r3, [r3, #1]
 800d0a2:	2b09      	cmp	r3, #9
 800d0a4:	d83b      	bhi.n	800d11e <USBD_StdDevReq+0xc2>
 800d0a6:	a201      	add	r2, pc, #4	; (adr r2, 800d0ac <USBD_StdDevReq+0x50>)
 800d0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ac:	0800d101 	.word	0x0800d101
 800d0b0:	0800d115 	.word	0x0800d115
 800d0b4:	0800d11f 	.word	0x0800d11f
 800d0b8:	0800d10b 	.word	0x0800d10b
 800d0bc:	0800d11f 	.word	0x0800d11f
 800d0c0:	0800d0df 	.word	0x0800d0df
 800d0c4:	0800d0d5 	.word	0x0800d0d5
 800d0c8:	0800d11f 	.word	0x0800d11f
 800d0cc:	0800d0f7 	.word	0x0800d0f7
 800d0d0:	0800d0e9 	.word	0x0800d0e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d0d4:	6839      	ldr	r1, [r7, #0]
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 fa3c 	bl	800d554 <USBD_GetDescriptor>
          break;
 800d0dc:	e024      	b.n	800d128 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fba1 	bl	800d828 <USBD_SetAddress>
          break;
 800d0e6:	e01f      	b.n	800d128 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d0e8:	6839      	ldr	r1, [r7, #0]
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 fbe0 	bl	800d8b0 <USBD_SetConfig>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	73fb      	strb	r3, [r7, #15]
          break;
 800d0f4:	e018      	b.n	800d128 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d0f6:	6839      	ldr	r1, [r7, #0]
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fc83 	bl	800da04 <USBD_GetConfig>
          break;
 800d0fe:	e013      	b.n	800d128 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d100:	6839      	ldr	r1, [r7, #0]
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 fcb4 	bl	800da70 <USBD_GetStatus>
          break;
 800d108:	e00e      	b.n	800d128 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d10a:	6839      	ldr	r1, [r7, #0]
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 fce3 	bl	800dad8 <USBD_SetFeature>
          break;
 800d112:	e009      	b.n	800d128 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 fd07 	bl	800db2a <USBD_ClrFeature>
          break;
 800d11c:	e004      	b.n	800d128 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d11e:	6839      	ldr	r1, [r7, #0]
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f000 fd5e 	bl	800dbe2 <USBD_CtlError>
          break;
 800d126:	bf00      	nop
      }
      break;
 800d128:	e004      	b.n	800d134 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d12a:	6839      	ldr	r1, [r7, #0]
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fd58 	bl	800dbe2 <USBD_CtlError>
      break;
 800d132:	bf00      	nop
  }

  return ret;
 800d134:	7bfb      	ldrb	r3, [r7, #15]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop

0800d140 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d156:	2b40      	cmp	r3, #64	; 0x40
 800d158:	d005      	beq.n	800d166 <USBD_StdItfReq+0x26>
 800d15a:	2b40      	cmp	r3, #64	; 0x40
 800d15c:	d852      	bhi.n	800d204 <USBD_StdItfReq+0xc4>
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d001      	beq.n	800d166 <USBD_StdItfReq+0x26>
 800d162:	2b20      	cmp	r3, #32
 800d164:	d14e      	bne.n	800d204 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	3b01      	subs	r3, #1
 800d170:	2b02      	cmp	r3, #2
 800d172:	d840      	bhi.n	800d1f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	889b      	ldrh	r3, [r3, #4]
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d836      	bhi.n	800d1ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	889b      	ldrh	r3, [r3, #4]
 800d182:	b2db      	uxtb	r3, r3
 800d184:	4619      	mov	r1, r3
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f7ff fed9 	bl	800cf3e <USBD_CoreFindIF>
 800d18c:	4603      	mov	r3, r0
 800d18e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d190:	7bbb      	ldrb	r3, [r7, #14]
 800d192:	2bff      	cmp	r3, #255	; 0xff
 800d194:	d01d      	beq.n	800d1d2 <USBD_StdItfReq+0x92>
 800d196:	7bbb      	ldrb	r3, [r7, #14]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d11a      	bne.n	800d1d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d19c:	7bba      	ldrb	r2, [r7, #14]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	32ae      	adds	r2, #174	; 0xae
 800d1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a6:	689b      	ldr	r3, [r3, #8]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00f      	beq.n	800d1cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d1ac:	7bba      	ldrb	r2, [r7, #14]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d1b4:	7bba      	ldrb	r2, [r7, #14]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	32ae      	adds	r2, #174	; 0xae
 800d1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	6839      	ldr	r1, [r7, #0]
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	4798      	blx	r3
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d1ca:	e004      	b.n	800d1d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d1d0:	e001      	b.n	800d1d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	88db      	ldrh	r3, [r3, #6]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d110      	bne.n	800d200 <USBD_StdItfReq+0xc0>
 800d1de:	7bfb      	ldrb	r3, [r7, #15]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d10d      	bne.n	800d200 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 fdc7 	bl	800dd78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d1ea:	e009      	b.n	800d200 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d1ec:	6839      	ldr	r1, [r7, #0]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 fcf7 	bl	800dbe2 <USBD_CtlError>
          break;
 800d1f4:	e004      	b.n	800d200 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d1f6:	6839      	ldr	r1, [r7, #0]
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 fcf2 	bl	800dbe2 <USBD_CtlError>
          break;
 800d1fe:	e000      	b.n	800d202 <USBD_StdItfReq+0xc2>
          break;
 800d200:	bf00      	nop
      }
      break;
 800d202:	e004      	b.n	800d20e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d204:	6839      	ldr	r1, [r7, #0]
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fceb 	bl	800dbe2 <USBD_CtlError>
      break;
 800d20c:	bf00      	nop
  }

  return ret;
 800d20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3710      	adds	r7, #16
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d222:	2300      	movs	r3, #0
 800d224:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	889b      	ldrh	r3, [r3, #4]
 800d22a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d234:	2b40      	cmp	r3, #64	; 0x40
 800d236:	d007      	beq.n	800d248 <USBD_StdEPReq+0x30>
 800d238:	2b40      	cmp	r3, #64	; 0x40
 800d23a:	f200 817f 	bhi.w	800d53c <USBD_StdEPReq+0x324>
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d02a      	beq.n	800d298 <USBD_StdEPReq+0x80>
 800d242:	2b20      	cmp	r3, #32
 800d244:	f040 817a 	bne.w	800d53c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d248:	7bbb      	ldrb	r3, [r7, #14]
 800d24a:	4619      	mov	r1, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f7ff fe83 	bl	800cf58 <USBD_CoreFindEP>
 800d252:	4603      	mov	r3, r0
 800d254:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d256:	7b7b      	ldrb	r3, [r7, #13]
 800d258:	2bff      	cmp	r3, #255	; 0xff
 800d25a:	f000 8174 	beq.w	800d546 <USBD_StdEPReq+0x32e>
 800d25e:	7b7b      	ldrb	r3, [r7, #13]
 800d260:	2b00      	cmp	r3, #0
 800d262:	f040 8170 	bne.w	800d546 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d266:	7b7a      	ldrb	r2, [r7, #13]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d26e:	7b7a      	ldrb	r2, [r7, #13]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	32ae      	adds	r2, #174	; 0xae
 800d274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	f000 8163 	beq.w	800d546 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d280:	7b7a      	ldrb	r2, [r7, #13]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	32ae      	adds	r2, #174	; 0xae
 800d286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	6839      	ldr	r1, [r7, #0]
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	4798      	blx	r3
 800d292:	4603      	mov	r3, r0
 800d294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d296:	e156      	b.n	800d546 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	785b      	ldrb	r3, [r3, #1]
 800d29c:	2b03      	cmp	r3, #3
 800d29e:	d008      	beq.n	800d2b2 <USBD_StdEPReq+0x9a>
 800d2a0:	2b03      	cmp	r3, #3
 800d2a2:	f300 8145 	bgt.w	800d530 <USBD_StdEPReq+0x318>
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	f000 809b 	beq.w	800d3e2 <USBD_StdEPReq+0x1ca>
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d03c      	beq.n	800d32a <USBD_StdEPReq+0x112>
 800d2b0:	e13e      	b.n	800d530 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	2b02      	cmp	r3, #2
 800d2bc:	d002      	beq.n	800d2c4 <USBD_StdEPReq+0xac>
 800d2be:	2b03      	cmp	r3, #3
 800d2c0:	d016      	beq.n	800d2f0 <USBD_StdEPReq+0xd8>
 800d2c2:	e02c      	b.n	800d31e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2c4:	7bbb      	ldrb	r3, [r7, #14]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00d      	beq.n	800d2e6 <USBD_StdEPReq+0xce>
 800d2ca:	7bbb      	ldrb	r3, [r7, #14]
 800d2cc:	2b80      	cmp	r3, #128	; 0x80
 800d2ce:	d00a      	beq.n	800d2e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d2d0:	7bbb      	ldrb	r3, [r7, #14]
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f001 f979 	bl	800e5cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2da:	2180      	movs	r1, #128	; 0x80
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f001 f975 	bl	800e5cc <USBD_LL_StallEP>
 800d2e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d2e4:	e020      	b.n	800d328 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d2e6:	6839      	ldr	r1, [r7, #0]
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 fc7a 	bl	800dbe2 <USBD_CtlError>
              break;
 800d2ee:	e01b      	b.n	800d328 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	885b      	ldrh	r3, [r3, #2]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d10e      	bne.n	800d316 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d2f8:	7bbb      	ldrb	r3, [r7, #14]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00b      	beq.n	800d316 <USBD_StdEPReq+0xfe>
 800d2fe:	7bbb      	ldrb	r3, [r7, #14]
 800d300:	2b80      	cmp	r3, #128	; 0x80
 800d302:	d008      	beq.n	800d316 <USBD_StdEPReq+0xfe>
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	88db      	ldrh	r3, [r3, #6]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d104      	bne.n	800d316 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d30c:	7bbb      	ldrb	r3, [r7, #14]
 800d30e:	4619      	mov	r1, r3
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f001 f95b 	bl	800e5cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 fd2e 	bl	800dd78 <USBD_CtlSendStatus>

              break;
 800d31c:	e004      	b.n	800d328 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d31e:	6839      	ldr	r1, [r7, #0]
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 fc5e 	bl	800dbe2 <USBD_CtlError>
              break;
 800d326:	bf00      	nop
          }
          break;
 800d328:	e107      	b.n	800d53a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d330:	b2db      	uxtb	r3, r3
 800d332:	2b02      	cmp	r3, #2
 800d334:	d002      	beq.n	800d33c <USBD_StdEPReq+0x124>
 800d336:	2b03      	cmp	r3, #3
 800d338:	d016      	beq.n	800d368 <USBD_StdEPReq+0x150>
 800d33a:	e04b      	b.n	800d3d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d33c:	7bbb      	ldrb	r3, [r7, #14]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d00d      	beq.n	800d35e <USBD_StdEPReq+0x146>
 800d342:	7bbb      	ldrb	r3, [r7, #14]
 800d344:	2b80      	cmp	r3, #128	; 0x80
 800d346:	d00a      	beq.n	800d35e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d348:	7bbb      	ldrb	r3, [r7, #14]
 800d34a:	4619      	mov	r1, r3
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f001 f93d 	bl	800e5cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d352:	2180      	movs	r1, #128	; 0x80
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f001 f939 	bl	800e5cc <USBD_LL_StallEP>
 800d35a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d35c:	e040      	b.n	800d3e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d35e:	6839      	ldr	r1, [r7, #0]
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 fc3e 	bl	800dbe2 <USBD_CtlError>
              break;
 800d366:	e03b      	b.n	800d3e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	885b      	ldrh	r3, [r3, #2]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d136      	bne.n	800d3de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d370:	7bbb      	ldrb	r3, [r7, #14]
 800d372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d376:	2b00      	cmp	r3, #0
 800d378:	d004      	beq.n	800d384 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d37a:	7bbb      	ldrb	r3, [r7, #14]
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f001 f943 	bl	800e60a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fcf7 	bl	800dd78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d38a:	7bbb      	ldrb	r3, [r7, #14]
 800d38c:	4619      	mov	r1, r3
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f7ff fde2 	bl	800cf58 <USBD_CoreFindEP>
 800d394:	4603      	mov	r3, r0
 800d396:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d398:	7b7b      	ldrb	r3, [r7, #13]
 800d39a:	2bff      	cmp	r3, #255	; 0xff
 800d39c:	d01f      	beq.n	800d3de <USBD_StdEPReq+0x1c6>
 800d39e:	7b7b      	ldrb	r3, [r7, #13]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d11c      	bne.n	800d3de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d3a4:	7b7a      	ldrb	r2, [r7, #13]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d3ac:	7b7a      	ldrb	r2, [r7, #13]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	32ae      	adds	r2, #174	; 0xae
 800d3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d010      	beq.n	800d3de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d3bc:	7b7a      	ldrb	r2, [r7, #13]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	32ae      	adds	r2, #174	; 0xae
 800d3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	4798      	blx	r3
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d3d2:	e004      	b.n	800d3de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d3d4:	6839      	ldr	r1, [r7, #0]
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 fc03 	bl	800dbe2 <USBD_CtlError>
              break;
 800d3dc:	e000      	b.n	800d3e0 <USBD_StdEPReq+0x1c8>
              break;
 800d3de:	bf00      	nop
          }
          break;
 800d3e0:	e0ab      	b.n	800d53a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	d002      	beq.n	800d3f4 <USBD_StdEPReq+0x1dc>
 800d3ee:	2b03      	cmp	r3, #3
 800d3f0:	d032      	beq.n	800d458 <USBD_StdEPReq+0x240>
 800d3f2:	e097      	b.n	800d524 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d3f4:	7bbb      	ldrb	r3, [r7, #14]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d007      	beq.n	800d40a <USBD_StdEPReq+0x1f2>
 800d3fa:	7bbb      	ldrb	r3, [r7, #14]
 800d3fc:	2b80      	cmp	r3, #128	; 0x80
 800d3fe:	d004      	beq.n	800d40a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d400:	6839      	ldr	r1, [r7, #0]
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 fbed 	bl	800dbe2 <USBD_CtlError>
                break;
 800d408:	e091      	b.n	800d52e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d40a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	da0b      	bge.n	800d42a <USBD_StdEPReq+0x212>
 800d412:	7bbb      	ldrb	r3, [r7, #14]
 800d414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d418:	4613      	mov	r3, r2
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	4413      	add	r3, r2
 800d41e:	009b      	lsls	r3, r3, #2
 800d420:	3310      	adds	r3, #16
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4413      	add	r3, r2
 800d426:	3304      	adds	r3, #4
 800d428:	e00b      	b.n	800d442 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d42a:	7bbb      	ldrb	r3, [r7, #14]
 800d42c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d430:	4613      	mov	r3, r2
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4413      	add	r3, r2
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	4413      	add	r3, r2
 800d440:	3304      	adds	r3, #4
 800d442:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2200      	movs	r2, #0
 800d448:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	2202      	movs	r2, #2
 800d44e:	4619      	mov	r1, r3
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fc37 	bl	800dcc4 <USBD_CtlSendData>
              break;
 800d456:	e06a      	b.n	800d52e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	da11      	bge.n	800d484 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d460:	7bbb      	ldrb	r3, [r7, #14]
 800d462:	f003 020f 	and.w	r2, r3, #15
 800d466:	6879      	ldr	r1, [r7, #4]
 800d468:	4613      	mov	r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	4413      	add	r3, r2
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	440b      	add	r3, r1
 800d472:	3324      	adds	r3, #36	; 0x24
 800d474:	881b      	ldrh	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d117      	bne.n	800d4aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d47a:	6839      	ldr	r1, [r7, #0]
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 fbb0 	bl	800dbe2 <USBD_CtlError>
                  break;
 800d482:	e054      	b.n	800d52e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d484:	7bbb      	ldrb	r3, [r7, #14]
 800d486:	f003 020f 	and.w	r2, r3, #15
 800d48a:	6879      	ldr	r1, [r7, #4]
 800d48c:	4613      	mov	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	4413      	add	r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	440b      	add	r3, r1
 800d496:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d49a:	881b      	ldrh	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d104      	bne.n	800d4aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d4a0:	6839      	ldr	r1, [r7, #0]
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 fb9d 	bl	800dbe2 <USBD_CtlError>
                  break;
 800d4a8:	e041      	b.n	800d52e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	da0b      	bge.n	800d4ca <USBD_StdEPReq+0x2b2>
 800d4b2:	7bbb      	ldrb	r3, [r7, #14]
 800d4b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	4413      	add	r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	3310      	adds	r3, #16
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	3304      	adds	r3, #4
 800d4c8:	e00b      	b.n	800d4e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d4ca:	7bbb      	ldrb	r3, [r7, #14]
 800d4cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	4413      	add	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	4413      	add	r3, r2
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d4e4:	7bbb      	ldrb	r3, [r7, #14]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d002      	beq.n	800d4f0 <USBD_StdEPReq+0x2d8>
 800d4ea:	7bbb      	ldrb	r3, [r7, #14]
 800d4ec:	2b80      	cmp	r3, #128	; 0x80
 800d4ee:	d103      	bne.n	800d4f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	601a      	str	r2, [r3, #0]
 800d4f6:	e00e      	b.n	800d516 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d4f8:	7bbb      	ldrb	r3, [r7, #14]
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f001 f8a3 	bl	800e648 <USBD_LL_IsStallEP>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d003      	beq.n	800d510 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	2201      	movs	r2, #1
 800d50c:	601a      	str	r2, [r3, #0]
 800d50e:	e002      	b.n	800d516 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	2200      	movs	r2, #0
 800d514:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	2202      	movs	r2, #2
 800d51a:	4619      	mov	r1, r3
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 fbd1 	bl	800dcc4 <USBD_CtlSendData>
              break;
 800d522:	e004      	b.n	800d52e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d524:	6839      	ldr	r1, [r7, #0]
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 fb5b 	bl	800dbe2 <USBD_CtlError>
              break;
 800d52c:	bf00      	nop
          }
          break;
 800d52e:	e004      	b.n	800d53a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d530:	6839      	ldr	r1, [r7, #0]
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fb55 	bl	800dbe2 <USBD_CtlError>
          break;
 800d538:	bf00      	nop
      }
      break;
 800d53a:	e005      	b.n	800d548 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d53c:	6839      	ldr	r1, [r7, #0]
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fb4f 	bl	800dbe2 <USBD_CtlError>
      break;
 800d544:	e000      	b.n	800d548 <USBD_StdEPReq+0x330>
      break;
 800d546:	bf00      	nop
  }

  return ret;
 800d548:	7bfb      	ldrb	r3, [r7, #15]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3710      	adds	r7, #16
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
	...

0800d554 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d55e:	2300      	movs	r3, #0
 800d560:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d562:	2300      	movs	r3, #0
 800d564:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d566:	2300      	movs	r3, #0
 800d568:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	885b      	ldrh	r3, [r3, #2]
 800d56e:	0a1b      	lsrs	r3, r3, #8
 800d570:	b29b      	uxth	r3, r3
 800d572:	3b01      	subs	r3, #1
 800d574:	2b06      	cmp	r3, #6
 800d576:	f200 8128 	bhi.w	800d7ca <USBD_GetDescriptor+0x276>
 800d57a:	a201      	add	r2, pc, #4	; (adr r2, 800d580 <USBD_GetDescriptor+0x2c>)
 800d57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d580:	0800d59d 	.word	0x0800d59d
 800d584:	0800d5b5 	.word	0x0800d5b5
 800d588:	0800d5f5 	.word	0x0800d5f5
 800d58c:	0800d7cb 	.word	0x0800d7cb
 800d590:	0800d7cb 	.word	0x0800d7cb
 800d594:	0800d76b 	.word	0x0800d76b
 800d598:	0800d797 	.word	0x0800d797
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	7c12      	ldrb	r2, [r2, #16]
 800d5a8:	f107 0108 	add.w	r1, r7, #8
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	4798      	blx	r3
 800d5b0:	60f8      	str	r0, [r7, #12]
      break;
 800d5b2:	e112      	b.n	800d7da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	7c1b      	ldrb	r3, [r3, #16]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d10d      	bne.n	800d5d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c4:	f107 0208 	add.w	r2, r7, #8
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	4798      	blx	r3
 800d5cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	2202      	movs	r2, #2
 800d5d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d5d6:	e100      	b.n	800d7da <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e0:	f107 0208 	add.w	r2, r7, #8
 800d5e4:	4610      	mov	r0, r2
 800d5e6:	4798      	blx	r3
 800d5e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	2202      	movs	r2, #2
 800d5f0:	701a      	strb	r2, [r3, #0]
      break;
 800d5f2:	e0f2      	b.n	800d7da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	885b      	ldrh	r3, [r3, #2]
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	2b05      	cmp	r3, #5
 800d5fc:	f200 80ac 	bhi.w	800d758 <USBD_GetDescriptor+0x204>
 800d600:	a201      	add	r2, pc, #4	; (adr r2, 800d608 <USBD_GetDescriptor+0xb4>)
 800d602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d606:	bf00      	nop
 800d608:	0800d621 	.word	0x0800d621
 800d60c:	0800d655 	.word	0x0800d655
 800d610:	0800d689 	.word	0x0800d689
 800d614:	0800d6bd 	.word	0x0800d6bd
 800d618:	0800d6f1 	.word	0x0800d6f1
 800d61c:	0800d725 	.word	0x0800d725
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00b      	beq.n	800d644 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	7c12      	ldrb	r2, [r2, #16]
 800d638:	f107 0108 	add.w	r1, r7, #8
 800d63c:	4610      	mov	r0, r2
 800d63e:	4798      	blx	r3
 800d640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d642:	e091      	b.n	800d768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d644:	6839      	ldr	r1, [r7, #0]
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 facb 	bl	800dbe2 <USBD_CtlError>
            err++;
 800d64c:	7afb      	ldrb	r3, [r7, #11]
 800d64e:	3301      	adds	r3, #1
 800d650:	72fb      	strb	r3, [r7, #11]
          break;
 800d652:	e089      	b.n	800d768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d65a:	689b      	ldr	r3, [r3, #8]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d00b      	beq.n	800d678 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	7c12      	ldrb	r2, [r2, #16]
 800d66c:	f107 0108 	add.w	r1, r7, #8
 800d670:	4610      	mov	r0, r2
 800d672:	4798      	blx	r3
 800d674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d676:	e077      	b.n	800d768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d678:	6839      	ldr	r1, [r7, #0]
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fab1 	bl	800dbe2 <USBD_CtlError>
            err++;
 800d680:	7afb      	ldrb	r3, [r7, #11]
 800d682:	3301      	adds	r3, #1
 800d684:	72fb      	strb	r3, [r7, #11]
          break;
 800d686:	e06f      	b.n	800d768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00b      	beq.n	800d6ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	7c12      	ldrb	r2, [r2, #16]
 800d6a0:	f107 0108 	add.w	r1, r7, #8
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	4798      	blx	r3
 800d6a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6aa:	e05d      	b.n	800d768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6ac:	6839      	ldr	r1, [r7, #0]
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 fa97 	bl	800dbe2 <USBD_CtlError>
            err++;
 800d6b4:	7afb      	ldrb	r3, [r7, #11]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d6ba:	e055      	b.n	800d768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6c2:	691b      	ldr	r3, [r3, #16]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00b      	beq.n	800d6e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	7c12      	ldrb	r2, [r2, #16]
 800d6d4:	f107 0108 	add.w	r1, r7, #8
 800d6d8:	4610      	mov	r0, r2
 800d6da:	4798      	blx	r3
 800d6dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6de:	e043      	b.n	800d768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fa7d 	bl	800dbe2 <USBD_CtlError>
            err++;
 800d6e8:	7afb      	ldrb	r3, [r7, #11]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d6ee:	e03b      	b.n	800d768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6f6:	695b      	ldr	r3, [r3, #20]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00b      	beq.n	800d714 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d702:	695b      	ldr	r3, [r3, #20]
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	7c12      	ldrb	r2, [r2, #16]
 800d708:	f107 0108 	add.w	r1, r7, #8
 800d70c:	4610      	mov	r0, r2
 800d70e:	4798      	blx	r3
 800d710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d712:	e029      	b.n	800d768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d714:	6839      	ldr	r1, [r7, #0]
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 fa63 	bl	800dbe2 <USBD_CtlError>
            err++;
 800d71c:	7afb      	ldrb	r3, [r7, #11]
 800d71e:	3301      	adds	r3, #1
 800d720:	72fb      	strb	r3, [r7, #11]
          break;
 800d722:	e021      	b.n	800d768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d72a:	699b      	ldr	r3, [r3, #24]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00b      	beq.n	800d748 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d736:	699b      	ldr	r3, [r3, #24]
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	7c12      	ldrb	r2, [r2, #16]
 800d73c:	f107 0108 	add.w	r1, r7, #8
 800d740:	4610      	mov	r0, r2
 800d742:	4798      	blx	r3
 800d744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d746:	e00f      	b.n	800d768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d748:	6839      	ldr	r1, [r7, #0]
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 fa49 	bl	800dbe2 <USBD_CtlError>
            err++;
 800d750:	7afb      	ldrb	r3, [r7, #11]
 800d752:	3301      	adds	r3, #1
 800d754:	72fb      	strb	r3, [r7, #11]
          break;
 800d756:	e007      	b.n	800d768 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d758:	6839      	ldr	r1, [r7, #0]
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 fa41 	bl	800dbe2 <USBD_CtlError>
          err++;
 800d760:	7afb      	ldrb	r3, [r7, #11]
 800d762:	3301      	adds	r3, #1
 800d764:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d766:	bf00      	nop
      }
      break;
 800d768:	e037      	b.n	800d7da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	7c1b      	ldrb	r3, [r3, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d109      	bne.n	800d786 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77a:	f107 0208 	add.w	r2, r7, #8
 800d77e:	4610      	mov	r0, r2
 800d780:	4798      	blx	r3
 800d782:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d784:	e029      	b.n	800d7da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d786:	6839      	ldr	r1, [r7, #0]
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 fa2a 	bl	800dbe2 <USBD_CtlError>
        err++;
 800d78e:	7afb      	ldrb	r3, [r7, #11]
 800d790:	3301      	adds	r3, #1
 800d792:	72fb      	strb	r3, [r7, #11]
      break;
 800d794:	e021      	b.n	800d7da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	7c1b      	ldrb	r3, [r3, #16]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d10d      	bne.n	800d7ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a6:	f107 0208 	add.w	r2, r7, #8
 800d7aa:	4610      	mov	r0, r2
 800d7ac:	4798      	blx	r3
 800d7ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	2207      	movs	r2, #7
 800d7b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7b8:	e00f      	b.n	800d7da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d7ba:	6839      	ldr	r1, [r7, #0]
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 fa10 	bl	800dbe2 <USBD_CtlError>
        err++;
 800d7c2:	7afb      	ldrb	r3, [r7, #11]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	72fb      	strb	r3, [r7, #11]
      break;
 800d7c8:	e007      	b.n	800d7da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d7ca:	6839      	ldr	r1, [r7, #0]
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f000 fa08 	bl	800dbe2 <USBD_CtlError>
      err++;
 800d7d2:	7afb      	ldrb	r3, [r7, #11]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	72fb      	strb	r3, [r7, #11]
      break;
 800d7d8:	bf00      	nop
  }

  if (err != 0U)
 800d7da:	7afb      	ldrb	r3, [r7, #11]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d11e      	bne.n	800d81e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	88db      	ldrh	r3, [r3, #6]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d016      	beq.n	800d816 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d7e8:	893b      	ldrh	r3, [r7, #8]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00e      	beq.n	800d80c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	88da      	ldrh	r2, [r3, #6]
 800d7f2:	893b      	ldrh	r3, [r7, #8]
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	bf28      	it	cs
 800d7f8:	4613      	movcs	r3, r2
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d7fe:	893b      	ldrh	r3, [r7, #8]
 800d800:	461a      	mov	r2, r3
 800d802:	68f9      	ldr	r1, [r7, #12]
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 fa5d 	bl	800dcc4 <USBD_CtlSendData>
 800d80a:	e009      	b.n	800d820 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f9e7 	bl	800dbe2 <USBD_CtlError>
 800d814:	e004      	b.n	800d820 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 faae 	bl	800dd78 <USBD_CtlSendStatus>
 800d81c:	e000      	b.n	800d820 <USBD_GetDescriptor+0x2cc>
    return;
 800d81e:	bf00      	nop
  }
}
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop

0800d828 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	889b      	ldrh	r3, [r3, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d131      	bne.n	800d89e <USBD_SetAddress+0x76>
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	88db      	ldrh	r3, [r3, #6]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d12d      	bne.n	800d89e <USBD_SetAddress+0x76>
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	885b      	ldrh	r3, [r3, #2]
 800d846:	2b7f      	cmp	r3, #127	; 0x7f
 800d848:	d829      	bhi.n	800d89e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	885b      	ldrh	r3, [r3, #2]
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d854:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d104      	bne.n	800d86c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d862:	6839      	ldr	r1, [r7, #0]
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f000 f9bc 	bl	800dbe2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d86a:	e01d      	b.n	800d8a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	7bfa      	ldrb	r2, [r7, #15]
 800d870:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d874:	7bfb      	ldrb	r3, [r7, #15]
 800d876:	4619      	mov	r1, r3
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f000 ff11 	bl	800e6a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 fa7a 	bl	800dd78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d884:	7bfb      	ldrb	r3, [r7, #15]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d004      	beq.n	800d894 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2202      	movs	r2, #2
 800d88e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d892:	e009      	b.n	800d8a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2201      	movs	r2, #1
 800d898:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d89c:	e004      	b.n	800d8a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 f99e 	bl	800dbe2 <USBD_CtlError>
  }
}
 800d8a6:	bf00      	nop
 800d8a8:	bf00      	nop
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	885b      	ldrh	r3, [r3, #2]
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	4b4e      	ldr	r3, [pc, #312]	; (800da00 <USBD_SetConfig+0x150>)
 800d8c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d8c8:	4b4d      	ldr	r3, [pc, #308]	; (800da00 <USBD_SetConfig+0x150>)
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d905      	bls.n	800d8dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d8d0:	6839      	ldr	r1, [r7, #0]
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f000 f985 	bl	800dbe2 <USBD_CtlError>
    return USBD_FAIL;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	e08c      	b.n	800d9f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	2b02      	cmp	r3, #2
 800d8e6:	d002      	beq.n	800d8ee <USBD_SetConfig+0x3e>
 800d8e8:	2b03      	cmp	r3, #3
 800d8ea:	d029      	beq.n	800d940 <USBD_SetConfig+0x90>
 800d8ec:	e075      	b.n	800d9da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d8ee:	4b44      	ldr	r3, [pc, #272]	; (800da00 <USBD_SetConfig+0x150>)
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d020      	beq.n	800d938 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d8f6:	4b42      	ldr	r3, [pc, #264]	; (800da00 <USBD_SetConfig+0x150>)
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d900:	4b3f      	ldr	r3, [pc, #252]	; (800da00 <USBD_SetConfig+0x150>)
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	4619      	mov	r1, r3
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f7fe ffe7 	bl	800c8da <USBD_SetClassConfig>
 800d90c:	4603      	mov	r3, r0
 800d90e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d910:	7bfb      	ldrb	r3, [r7, #15]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d008      	beq.n	800d928 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d916:	6839      	ldr	r1, [r7, #0]
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f000 f962 	bl	800dbe2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2202      	movs	r2, #2
 800d922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d926:	e065      	b.n	800d9f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 fa25 	bl	800dd78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2203      	movs	r2, #3
 800d932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d936:	e05d      	b.n	800d9f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 fa1d 	bl	800dd78 <USBD_CtlSendStatus>
      break;
 800d93e:	e059      	b.n	800d9f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d940:	4b2f      	ldr	r3, [pc, #188]	; (800da00 <USBD_SetConfig+0x150>)
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d112      	bne.n	800d96e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2202      	movs	r2, #2
 800d94c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d950:	4b2b      	ldr	r3, [pc, #172]	; (800da00 <USBD_SetConfig+0x150>)
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	461a      	mov	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d95a:	4b29      	ldr	r3, [pc, #164]	; (800da00 <USBD_SetConfig+0x150>)
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	4619      	mov	r1, r3
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f7fe ffd6 	bl	800c912 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 fa06 	bl	800dd78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d96c:	e042      	b.n	800d9f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d96e:	4b24      	ldr	r3, [pc, #144]	; (800da00 <USBD_SetConfig+0x150>)
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	461a      	mov	r2, r3
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d02a      	beq.n	800d9d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	b2db      	uxtb	r3, r3
 800d982:	4619      	mov	r1, r3
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7fe ffc4 	bl	800c912 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d98a:	4b1d      	ldr	r3, [pc, #116]	; (800da00 <USBD_SetConfig+0x150>)
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	461a      	mov	r2, r3
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d994:	4b1a      	ldr	r3, [pc, #104]	; (800da00 <USBD_SetConfig+0x150>)
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	4619      	mov	r1, r3
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7fe ff9d 	bl	800c8da <USBD_SetClassConfig>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d9a4:	7bfb      	ldrb	r3, [r7, #15]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d00f      	beq.n	800d9ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d9aa:	6839      	ldr	r1, [r7, #0]
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 f918 	bl	800dbe2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f7fe ffa9 	bl	800c912 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2202      	movs	r2, #2
 800d9c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d9c8:	e014      	b.n	800d9f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 f9d4 	bl	800dd78 <USBD_CtlSendStatus>
      break;
 800d9d0:	e010      	b.n	800d9f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 f9d0 	bl	800dd78 <USBD_CtlSendStatus>
      break;
 800d9d8:	e00c      	b.n	800d9f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d9da:	6839      	ldr	r1, [r7, #0]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 f900 	bl	800dbe2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d9e2:	4b07      	ldr	r3, [pc, #28]	; (800da00 <USBD_SetConfig+0x150>)
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f7fe ff92 	bl	800c912 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d9ee:	2303      	movs	r3, #3
 800d9f0:	73fb      	strb	r3, [r7, #15]
      break;
 800d9f2:	bf00      	nop
  }

  return ret;
 800d9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	20001d64 	.word	0x20001d64

0800da04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	88db      	ldrh	r3, [r3, #6]
 800da12:	2b01      	cmp	r3, #1
 800da14:	d004      	beq.n	800da20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800da16:	6839      	ldr	r1, [r7, #0]
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f8e2 	bl	800dbe2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800da1e:	e023      	b.n	800da68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da26:	b2db      	uxtb	r3, r3
 800da28:	2b02      	cmp	r3, #2
 800da2a:	dc02      	bgt.n	800da32 <USBD_GetConfig+0x2e>
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	dc03      	bgt.n	800da38 <USBD_GetConfig+0x34>
 800da30:	e015      	b.n	800da5e <USBD_GetConfig+0x5a>
 800da32:	2b03      	cmp	r3, #3
 800da34:	d00b      	beq.n	800da4e <USBD_GetConfig+0x4a>
 800da36:	e012      	b.n	800da5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	3308      	adds	r3, #8
 800da42:	2201      	movs	r2, #1
 800da44:	4619      	mov	r1, r3
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f93c 	bl	800dcc4 <USBD_CtlSendData>
        break;
 800da4c:	e00c      	b.n	800da68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	3304      	adds	r3, #4
 800da52:	2201      	movs	r2, #1
 800da54:	4619      	mov	r1, r3
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 f934 	bl	800dcc4 <USBD_CtlSendData>
        break;
 800da5c:	e004      	b.n	800da68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800da5e:	6839      	ldr	r1, [r7, #0]
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 f8be 	bl	800dbe2 <USBD_CtlError>
        break;
 800da66:	bf00      	nop
}
 800da68:	bf00      	nop
 800da6a:	3708      	adds	r7, #8
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da80:	b2db      	uxtb	r3, r3
 800da82:	3b01      	subs	r3, #1
 800da84:	2b02      	cmp	r3, #2
 800da86:	d81e      	bhi.n	800dac6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	88db      	ldrh	r3, [r3, #6]
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d004      	beq.n	800da9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800da90:	6839      	ldr	r1, [r7, #0]
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 f8a5 	bl	800dbe2 <USBD_CtlError>
        break;
 800da98:	e01a      	b.n	800dad0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2201      	movs	r2, #1
 800da9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d005      	beq.n	800dab6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	f043 0202 	orr.w	r2, r3, #2
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	330c      	adds	r3, #12
 800daba:	2202      	movs	r2, #2
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f900 	bl	800dcc4 <USBD_CtlSendData>
      break;
 800dac4:	e004      	b.n	800dad0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dac6:	6839      	ldr	r1, [r7, #0]
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 f88a 	bl	800dbe2 <USBD_CtlError>
      break;
 800dace:	bf00      	nop
  }
}
 800dad0:	bf00      	nop
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	885b      	ldrh	r3, [r3, #2]
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d107      	bne.n	800dafa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2201      	movs	r2, #1
 800daee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 f940 	bl	800dd78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800daf8:	e013      	b.n	800db22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	885b      	ldrh	r3, [r3, #2]
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d10b      	bne.n	800db1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	889b      	ldrh	r3, [r3, #4]
 800db06:	0a1b      	lsrs	r3, r3, #8
 800db08:	b29b      	uxth	r3, r3
 800db0a:	b2da      	uxtb	r2, r3
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 f930 	bl	800dd78 <USBD_CtlSendStatus>
}
 800db18:	e003      	b.n	800db22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800db1a:	6839      	ldr	r1, [r7, #0]
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 f860 	bl	800dbe2 <USBD_CtlError>
}
 800db22:	bf00      	nop
 800db24:	3708      	adds	r7, #8
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b082      	sub	sp, #8
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	3b01      	subs	r3, #1
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d80b      	bhi.n	800db5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	885b      	ldrh	r3, [r3, #2]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d10c      	bne.n	800db64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2200      	movs	r2, #0
 800db4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 f910 	bl	800dd78 <USBD_CtlSendStatus>
      }
      break;
 800db58:	e004      	b.n	800db64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800db5a:	6839      	ldr	r1, [r7, #0]
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 f840 	bl	800dbe2 <USBD_CtlError>
      break;
 800db62:	e000      	b.n	800db66 <USBD_ClrFeature+0x3c>
      break;
 800db64:	bf00      	nop
  }
}
 800db66:	bf00      	nop
 800db68:	3708      	adds	r7, #8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b084      	sub	sp, #16
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	781a      	ldrb	r2, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	3301      	adds	r3, #1
 800db88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	781a      	ldrb	r2, [r3, #0]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	3301      	adds	r3, #1
 800db96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f7ff fa41 	bl	800d020 <SWAPBYTE>
 800db9e:	4603      	mov	r3, r0
 800dba0:	461a      	mov	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f7ff fa34 	bl	800d020 <SWAPBYTE>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	461a      	mov	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f7ff fa27 	bl	800d020 <SWAPBYTE>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	80da      	strh	r2, [r3, #6]
}
 800dbda:	bf00      	nop
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b082      	sub	sp, #8
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
 800dbea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dbec:	2180      	movs	r1, #128	; 0x80
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 fcec 	bl	800e5cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 fce8 	bl	800e5cc <USBD_LL_StallEP>
}
 800dbfc:	bf00      	nop
 800dbfe:	3708      	adds	r7, #8
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc10:	2300      	movs	r3, #0
 800dc12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d036      	beq.n	800dc88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dc1e:	6938      	ldr	r0, [r7, #16]
 800dc20:	f000 f836 	bl	800dc90 <USBD_GetLen>
 800dc24:	4603      	mov	r3, r0
 800dc26:	3301      	adds	r3, #1
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	005b      	lsls	r3, r3, #1
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dc32:	7dfb      	ldrb	r3, [r7, #23]
 800dc34:	68ba      	ldr	r2, [r7, #8]
 800dc36:	4413      	add	r3, r2
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	7812      	ldrb	r2, [r2, #0]
 800dc3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc3e:	7dfb      	ldrb	r3, [r7, #23]
 800dc40:	3301      	adds	r3, #1
 800dc42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
 800dc46:	68ba      	ldr	r2, [r7, #8]
 800dc48:	4413      	add	r3, r2
 800dc4a:	2203      	movs	r2, #3
 800dc4c:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc4e:	7dfb      	ldrb	r3, [r7, #23]
 800dc50:	3301      	adds	r3, #1
 800dc52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dc54:	e013      	b.n	800dc7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dc56:	7dfb      	ldrb	r3, [r7, #23]
 800dc58:	68ba      	ldr	r2, [r7, #8]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	693a      	ldr	r2, [r7, #16]
 800dc5e:	7812      	ldrb	r2, [r2, #0]
 800dc60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	3301      	adds	r3, #1
 800dc66:	613b      	str	r3, [r7, #16]
    idx++;
 800dc68:	7dfb      	ldrb	r3, [r7, #23]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dc6e:	7dfb      	ldrb	r3, [r7, #23]
 800dc70:	68ba      	ldr	r2, [r7, #8]
 800dc72:	4413      	add	r3, r2
 800dc74:	2200      	movs	r2, #0
 800dc76:	701a      	strb	r2, [r3, #0]
    idx++;
 800dc78:	7dfb      	ldrb	r3, [r7, #23]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1e7      	bne.n	800dc56 <USBD_GetString+0x52>
 800dc86:	e000      	b.n	800dc8a <USBD_GetString+0x86>
    return;
 800dc88:	bf00      	nop
  }
}
 800dc8a:	3718      	adds	r7, #24
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b085      	sub	sp, #20
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dca0:	e005      	b.n	800dcae <USBD_GetLen+0x1e>
  {
    len++;
 800dca2:	7bfb      	ldrb	r3, [r7, #15]
 800dca4:	3301      	adds	r3, #1
 800dca6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1f5      	bne.n	800dca2 <USBD_GetLen+0x12>
  }

  return len;
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3714      	adds	r7, #20
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2202      	movs	r2, #2
 800dcd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	2100      	movs	r1, #0
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	f000 fcf7 	bl	800e6de <USBD_LL_Transmit>

  return USBD_OK;
 800dcf0:	2300      	movs	r3, #0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b084      	sub	sp, #16
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	60f8      	str	r0, [r7, #12]
 800dd02:	60b9      	str	r1, [r7, #8]
 800dd04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	68ba      	ldr	r2, [r7, #8]
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	68f8      	ldr	r0, [r7, #12]
 800dd0e:	f000 fce6 	bl	800e6de <USBD_LL_Transmit>

  return USBD_OK;
 800dd12:	2300      	movs	r3, #0
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3710      	adds	r7, #16
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2203      	movs	r2, #3
 800dd2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	68ba      	ldr	r2, [r7, #8]
 800dd44:	2100      	movs	r1, #0
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f000 fcea 	bl	800e720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd4c:	2300      	movs	r3, #0
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b084      	sub	sp, #16
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	60f8      	str	r0, [r7, #12]
 800dd5e:	60b9      	str	r1, [r7, #8]
 800dd60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	2100      	movs	r1, #0
 800dd68:	68f8      	ldr	r0, [r7, #12]
 800dd6a:	f000 fcd9 	bl	800e720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2204      	movs	r2, #4
 800dd84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dd88:	2300      	movs	r3, #0
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fca5 	bl	800e6de <USBD_LL_Transmit>

  return USBD_OK;
 800dd94:	2300      	movs	r3, #0
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3708      	adds	r7, #8
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b082      	sub	sp, #8
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2205      	movs	r2, #5
 800ddaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ddae:	2300      	movs	r3, #0
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 fcb3 	bl	800e720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddba:	2300      	movs	r3, #0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ddc8:	2200      	movs	r2, #0
 800ddca:	4912      	ldr	r1, [pc, #72]	; (800de14 <MX_USB_DEVICE_Init+0x50>)
 800ddcc:	4812      	ldr	r0, [pc, #72]	; (800de18 <MX_USB_DEVICE_Init+0x54>)
 800ddce:	f7fe fd07 	bl	800c7e0 <USBD_Init>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d001      	beq.n	800dddc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ddd8:	f7f5 fea6 	bl	8003b28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dddc:	490f      	ldr	r1, [pc, #60]	; (800de1c <MX_USB_DEVICE_Init+0x58>)
 800ddde:	480e      	ldr	r0, [pc, #56]	; (800de18 <MX_USB_DEVICE_Init+0x54>)
 800dde0:	f7fe fd2e 	bl	800c840 <USBD_RegisterClass>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d001      	beq.n	800ddee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ddea:	f7f5 fe9d 	bl	8003b28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ddee:	490c      	ldr	r1, [pc, #48]	; (800de20 <MX_USB_DEVICE_Init+0x5c>)
 800ddf0:	4809      	ldr	r0, [pc, #36]	; (800de18 <MX_USB_DEVICE_Init+0x54>)
 800ddf2:	f7fe fc1f 	bl	800c634 <USBD_CDC_RegisterInterface>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d001      	beq.n	800de00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ddfc:	f7f5 fe94 	bl	8003b28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800de00:	4805      	ldr	r0, [pc, #20]	; (800de18 <MX_USB_DEVICE_Init+0x54>)
 800de02:	f7fe fd53 	bl	800c8ac <USBD_Start>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d001      	beq.n	800de10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800de0c:	f7f5 fe8c 	bl	8003b28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800de10:	bf00      	nop
 800de12:	bd80      	pop	{r7, pc}
 800de14:	200000c0 	.word	0x200000c0
 800de18:	20001d68 	.word	0x20001d68
 800de1c:	2000002c 	.word	0x2000002c
 800de20:	200000ac 	.word	0x200000ac

0800de24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800de28:	2200      	movs	r2, #0
 800de2a:	4905      	ldr	r1, [pc, #20]	; (800de40 <CDC_Init_FS+0x1c>)
 800de2c:	4805      	ldr	r0, [pc, #20]	; (800de44 <CDC_Init_FS+0x20>)
 800de2e:	f7fe fc1b 	bl	800c668 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800de32:	4905      	ldr	r1, [pc, #20]	; (800de48 <CDC_Init_FS+0x24>)
 800de34:	4803      	ldr	r0, [pc, #12]	; (800de44 <CDC_Init_FS+0x20>)
 800de36:	f7fe fc39 	bl	800c6ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800de3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	2000242c 	.word	0x2000242c
 800de44:	20001d68 	.word	0x20001d68
 800de48:	20002044 	.word	0x20002044

0800de4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800de4c:	b480      	push	{r7}
 800de4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800de50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800de52:	4618      	mov	r0, r3
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr

0800de5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
 800de62:	4603      	mov	r3, r0
 800de64:	6039      	str	r1, [r7, #0]
 800de66:	71fb      	strb	r3, [r7, #7]
 800de68:	4613      	mov	r3, r2
 800de6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800de6c:	79fb      	ldrb	r3, [r7, #7]
 800de6e:	2b23      	cmp	r3, #35	; 0x23
 800de70:	d84a      	bhi.n	800df08 <CDC_Control_FS+0xac>
 800de72:	a201      	add	r2, pc, #4	; (adr r2, 800de78 <CDC_Control_FS+0x1c>)
 800de74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de78:	0800df09 	.word	0x0800df09
 800de7c:	0800df09 	.word	0x0800df09
 800de80:	0800df09 	.word	0x0800df09
 800de84:	0800df09 	.word	0x0800df09
 800de88:	0800df09 	.word	0x0800df09
 800de8c:	0800df09 	.word	0x0800df09
 800de90:	0800df09 	.word	0x0800df09
 800de94:	0800df09 	.word	0x0800df09
 800de98:	0800df09 	.word	0x0800df09
 800de9c:	0800df09 	.word	0x0800df09
 800dea0:	0800df09 	.word	0x0800df09
 800dea4:	0800df09 	.word	0x0800df09
 800dea8:	0800df09 	.word	0x0800df09
 800deac:	0800df09 	.word	0x0800df09
 800deb0:	0800df09 	.word	0x0800df09
 800deb4:	0800df09 	.word	0x0800df09
 800deb8:	0800df09 	.word	0x0800df09
 800debc:	0800df09 	.word	0x0800df09
 800dec0:	0800df09 	.word	0x0800df09
 800dec4:	0800df09 	.word	0x0800df09
 800dec8:	0800df09 	.word	0x0800df09
 800decc:	0800df09 	.word	0x0800df09
 800ded0:	0800df09 	.word	0x0800df09
 800ded4:	0800df09 	.word	0x0800df09
 800ded8:	0800df09 	.word	0x0800df09
 800dedc:	0800df09 	.word	0x0800df09
 800dee0:	0800df09 	.word	0x0800df09
 800dee4:	0800df09 	.word	0x0800df09
 800dee8:	0800df09 	.word	0x0800df09
 800deec:	0800df09 	.word	0x0800df09
 800def0:	0800df09 	.word	0x0800df09
 800def4:	0800df09 	.word	0x0800df09
 800def8:	0800df09 	.word	0x0800df09
 800defc:	0800df09 	.word	0x0800df09
 800df00:	0800df09 	.word	0x0800df09
 800df04:	0800df09 	.word	0x0800df09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800df08:	bf00      	nop
  }

  return (USBD_OK);
 800df0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint16_t len = (uint8_t) *Len;
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	b2db      	uxtb	r3, r3
 800df28:	81fb      	strh	r3, [r7, #14]
  StringFIFOAdd(&USBFIFO, Buf, len);
 800df2a:	89fb      	ldrh	r3, [r7, #14]
 800df2c:	461a      	mov	r2, r3
 800df2e:	6879      	ldr	r1, [r7, #4]
 800df30:	4807      	ldr	r0, [pc, #28]	; (800df50 <CDC_Receive_FS+0x38>)
 800df32:	f7f5 fff3 	bl	8003f1c <StringFIFOAdd>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800df36:	6879      	ldr	r1, [r7, #4]
 800df38:	4806      	ldr	r0, [pc, #24]	; (800df54 <CDC_Receive_FS+0x3c>)
 800df3a:	f7fe fbb7 	bl	800c6ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800df3e:	4805      	ldr	r0, [pc, #20]	; (800df54 <CDC_Receive_FS+0x3c>)
 800df40:	f7fe fc18 	bl	800c774 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800df44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800df46:	4618      	mov	r0, r3
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	20001c60 	.word	0x20001c60
 800df54:	20001d68 	.word	0x20001d68

0800df58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	460b      	mov	r3, r1
 800df62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800df64:	2300      	movs	r3, #0
 800df66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800df68:	4b0d      	ldr	r3, [pc, #52]	; (800dfa0 <CDC_Transmit_FS+0x48>)
 800df6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800df7a:	2301      	movs	r3, #1
 800df7c:	e00b      	b.n	800df96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800df7e:	887b      	ldrh	r3, [r7, #2]
 800df80:	461a      	mov	r2, r3
 800df82:	6879      	ldr	r1, [r7, #4]
 800df84:	4806      	ldr	r0, [pc, #24]	; (800dfa0 <CDC_Transmit_FS+0x48>)
 800df86:	f7fe fb6f 	bl	800c668 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800df8a:	4805      	ldr	r0, [pc, #20]	; (800dfa0 <CDC_Transmit_FS+0x48>)
 800df8c:	f7fe fbac 	bl	800c6e8 <USBD_CDC_TransmitPacket>
 800df90:	4603      	mov	r3, r0
 800df92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800df94:	7bfb      	ldrb	r3, [r7, #15]
}
 800df96:	4618      	mov	r0, r3
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	20001d68 	.word	0x20001d68

0800dfa4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b087      	sub	sp, #28
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	4613      	mov	r3, r2
 800dfb0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dfb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	371c      	adds	r7, #28
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
	...

0800dfc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	4603      	mov	r3, r0
 800dfd0:	6039      	str	r1, [r7, #0]
 800dfd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	2212      	movs	r2, #18
 800dfd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dfda:	4b03      	ldr	r3, [pc, #12]	; (800dfe8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	200000dc 	.word	0x200000dc

0800dfec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	4603      	mov	r3, r0
 800dff4:	6039      	str	r1, [r7, #0]
 800dff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	2204      	movs	r2, #4
 800dffc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dffe:	4b03      	ldr	r3, [pc, #12]	; (800e00c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e000:	4618      	mov	r0, r3
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr
 800e00c:	200000f0 	.word	0x200000f0

0800e010 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	4603      	mov	r3, r0
 800e018:	6039      	str	r1, [r7, #0]
 800e01a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e01c:	79fb      	ldrb	r3, [r7, #7]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d105      	bne.n	800e02e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e022:	683a      	ldr	r2, [r7, #0]
 800e024:	4907      	ldr	r1, [pc, #28]	; (800e044 <USBD_FS_ProductStrDescriptor+0x34>)
 800e026:	4808      	ldr	r0, [pc, #32]	; (800e048 <USBD_FS_ProductStrDescriptor+0x38>)
 800e028:	f7ff fdec 	bl	800dc04 <USBD_GetString>
 800e02c:	e004      	b.n	800e038 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e02e:	683a      	ldr	r2, [r7, #0]
 800e030:	4904      	ldr	r1, [pc, #16]	; (800e044 <USBD_FS_ProductStrDescriptor+0x34>)
 800e032:	4805      	ldr	r0, [pc, #20]	; (800e048 <USBD_FS_ProductStrDescriptor+0x38>)
 800e034:	f7ff fde6 	bl	800dc04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e038:	4b02      	ldr	r3, [pc, #8]	; (800e044 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	20002814 	.word	0x20002814
 800e048:	080147b4 	.word	0x080147b4

0800e04c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	4603      	mov	r3, r0
 800e054:	6039      	str	r1, [r7, #0]
 800e056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e058:	683a      	ldr	r2, [r7, #0]
 800e05a:	4904      	ldr	r1, [pc, #16]	; (800e06c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e05c:	4804      	ldr	r0, [pc, #16]	; (800e070 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e05e:	f7ff fdd1 	bl	800dc04 <USBD_GetString>
  return USBD_StrDesc;
 800e062:	4b02      	ldr	r3, [pc, #8]	; (800e06c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e064:	4618      	mov	r0, r3
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	20002814 	.word	0x20002814
 800e070:	080147cc 	.word	0x080147cc

0800e074 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	4603      	mov	r3, r0
 800e07c:	6039      	str	r1, [r7, #0]
 800e07e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	221a      	movs	r2, #26
 800e084:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e086:	f000 f843 	bl	800e110 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e08a:	4b02      	ldr	r3, [pc, #8]	; (800e094 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3708      	adds	r7, #8
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	200000f4 	.word	0x200000f4

0800e098 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	4603      	mov	r3, r0
 800e0a0:	6039      	str	r1, [r7, #0]
 800e0a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e0a4:	79fb      	ldrb	r3, [r7, #7]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d105      	bne.n	800e0b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e0aa:	683a      	ldr	r2, [r7, #0]
 800e0ac:	4907      	ldr	r1, [pc, #28]	; (800e0cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800e0ae:	4808      	ldr	r0, [pc, #32]	; (800e0d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e0b0:	f7ff fda8 	bl	800dc04 <USBD_GetString>
 800e0b4:	e004      	b.n	800e0c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	4904      	ldr	r1, [pc, #16]	; (800e0cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800e0ba:	4805      	ldr	r0, [pc, #20]	; (800e0d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e0bc:	f7ff fda2 	bl	800dc04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e0c0:	4b02      	ldr	r3, [pc, #8]	; (800e0cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	20002814 	.word	0x20002814
 800e0d0:	080147e0 	.word	0x080147e0

0800e0d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	4603      	mov	r3, r0
 800e0dc:	6039      	str	r1, [r7, #0]
 800e0de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e0e0:	79fb      	ldrb	r3, [r7, #7]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d105      	bne.n	800e0f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e0e6:	683a      	ldr	r2, [r7, #0]
 800e0e8:	4907      	ldr	r1, [pc, #28]	; (800e108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e0ea:	4808      	ldr	r0, [pc, #32]	; (800e10c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e0ec:	f7ff fd8a 	bl	800dc04 <USBD_GetString>
 800e0f0:	e004      	b.n	800e0fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e0f2:	683a      	ldr	r2, [r7, #0]
 800e0f4:	4904      	ldr	r1, [pc, #16]	; (800e108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e0f6:	4805      	ldr	r0, [pc, #20]	; (800e10c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e0f8:	f7ff fd84 	bl	800dc04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e0fc:	4b02      	ldr	r3, [pc, #8]	; (800e108 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	20002814 	.word	0x20002814
 800e10c:	080147ec 	.word	0x080147ec

0800e110 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e116:	4b0f      	ldr	r3, [pc, #60]	; (800e154 <Get_SerialNum+0x44>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e11c:	4b0e      	ldr	r3, [pc, #56]	; (800e158 <Get_SerialNum+0x48>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e122:	4b0e      	ldr	r3, [pc, #56]	; (800e15c <Get_SerialNum+0x4c>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e128:	68fa      	ldr	r2, [r7, #12]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	4413      	add	r3, r2
 800e12e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d009      	beq.n	800e14a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e136:	2208      	movs	r2, #8
 800e138:	4909      	ldr	r1, [pc, #36]	; (800e160 <Get_SerialNum+0x50>)
 800e13a:	68f8      	ldr	r0, [r7, #12]
 800e13c:	f000 f814 	bl	800e168 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e140:	2204      	movs	r2, #4
 800e142:	4908      	ldr	r1, [pc, #32]	; (800e164 <Get_SerialNum+0x54>)
 800e144:	68b8      	ldr	r0, [r7, #8]
 800e146:	f000 f80f 	bl	800e168 <IntToUnicode>
  }
}
 800e14a:	bf00      	nop
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	1fff7a10 	.word	0x1fff7a10
 800e158:	1fff7a14 	.word	0x1fff7a14
 800e15c:	1fff7a18 	.word	0x1fff7a18
 800e160:	200000f6 	.word	0x200000f6
 800e164:	20000106 	.word	0x20000106

0800e168 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e168:	b480      	push	{r7}
 800e16a:	b087      	sub	sp, #28
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	4613      	mov	r3, r2
 800e174:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e176:	2300      	movs	r3, #0
 800e178:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e17a:	2300      	movs	r3, #0
 800e17c:	75fb      	strb	r3, [r7, #23]
 800e17e:	e027      	b.n	800e1d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	0f1b      	lsrs	r3, r3, #28
 800e184:	2b09      	cmp	r3, #9
 800e186:	d80b      	bhi.n	800e1a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	0f1b      	lsrs	r3, r3, #28
 800e18c:	b2da      	uxtb	r2, r3
 800e18e:	7dfb      	ldrb	r3, [r7, #23]
 800e190:	005b      	lsls	r3, r3, #1
 800e192:	4619      	mov	r1, r3
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	440b      	add	r3, r1
 800e198:	3230      	adds	r2, #48	; 0x30
 800e19a:	b2d2      	uxtb	r2, r2
 800e19c:	701a      	strb	r2, [r3, #0]
 800e19e:	e00a      	b.n	800e1b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	0f1b      	lsrs	r3, r3, #28
 800e1a4:	b2da      	uxtb	r2, r3
 800e1a6:	7dfb      	ldrb	r3, [r7, #23]
 800e1a8:	005b      	lsls	r3, r3, #1
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	440b      	add	r3, r1
 800e1b0:	3237      	adds	r2, #55	; 0x37
 800e1b2:	b2d2      	uxtb	r2, r2
 800e1b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	011b      	lsls	r3, r3, #4
 800e1ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e1bc:	7dfb      	ldrb	r3, [r7, #23]
 800e1be:	005b      	lsls	r3, r3, #1
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	68ba      	ldr	r2, [r7, #8]
 800e1c4:	4413      	add	r3, r2
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e1ca:	7dfb      	ldrb	r3, [r7, #23]
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	75fb      	strb	r3, [r7, #23]
 800e1d0:	7dfa      	ldrb	r2, [r7, #23]
 800e1d2:	79fb      	ldrb	r3, [r7, #7]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d3d3      	bcc.n	800e180 <IntToUnicode+0x18>
  }
}
 800e1d8:	bf00      	nop
 800e1da:	bf00      	nop
 800e1dc:	371c      	adds	r7, #28
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
	...

0800e1e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08a      	sub	sp, #40	; 0x28
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1f0:	f107 0314 	add.w	r3, r7, #20
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	601a      	str	r2, [r3, #0]
 800e1f8:	605a      	str	r2, [r3, #4]
 800e1fa:	609a      	str	r2, [r3, #8]
 800e1fc:	60da      	str	r2, [r3, #12]
 800e1fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e208:	d13a      	bne.n	800e280 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e20a:	2300      	movs	r3, #0
 800e20c:	613b      	str	r3, [r7, #16]
 800e20e:	4b1e      	ldr	r3, [pc, #120]	; (800e288 <HAL_PCD_MspInit+0xa0>)
 800e210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e212:	4a1d      	ldr	r2, [pc, #116]	; (800e288 <HAL_PCD_MspInit+0xa0>)
 800e214:	f043 0301 	orr.w	r3, r3, #1
 800e218:	6313      	str	r3, [r2, #48]	; 0x30
 800e21a:	4b1b      	ldr	r3, [pc, #108]	; (800e288 <HAL_PCD_MspInit+0xa0>)
 800e21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e21e:	f003 0301 	and.w	r3, r3, #1
 800e222:	613b      	str	r3, [r7, #16]
 800e224:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800e226:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800e22a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e22c:	2302      	movs	r3, #2
 800e22e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e230:	2300      	movs	r3, #0
 800e232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e234:	2303      	movs	r3, #3
 800e236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e238:	230a      	movs	r3, #10
 800e23a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e23c:	f107 0314 	add.w	r3, r7, #20
 800e240:	4619      	mov	r1, r3
 800e242:	4812      	ldr	r0, [pc, #72]	; (800e28c <HAL_PCD_MspInit+0xa4>)
 800e244:	f7f6 fa24 	bl	8004690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e248:	4b0f      	ldr	r3, [pc, #60]	; (800e288 <HAL_PCD_MspInit+0xa0>)
 800e24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e24c:	4a0e      	ldr	r2, [pc, #56]	; (800e288 <HAL_PCD_MspInit+0xa0>)
 800e24e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e252:	6353      	str	r3, [r2, #52]	; 0x34
 800e254:	2300      	movs	r3, #0
 800e256:	60fb      	str	r3, [r7, #12]
 800e258:	4b0b      	ldr	r3, [pc, #44]	; (800e288 <HAL_PCD_MspInit+0xa0>)
 800e25a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e25c:	4a0a      	ldr	r2, [pc, #40]	; (800e288 <HAL_PCD_MspInit+0xa0>)
 800e25e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e262:	6453      	str	r3, [r2, #68]	; 0x44
 800e264:	4b08      	ldr	r3, [pc, #32]	; (800e288 <HAL_PCD_MspInit+0xa0>)
 800e266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e26c:	60fb      	str	r3, [r7, #12]
 800e26e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e270:	2200      	movs	r2, #0
 800e272:	2100      	movs	r1, #0
 800e274:	2043      	movs	r0, #67	; 0x43
 800e276:	f7f6 f9a4 	bl	80045c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e27a:	2043      	movs	r0, #67	; 0x43
 800e27c:	f7f6 f9bd 	bl	80045fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e280:	bf00      	nop
 800e282:	3728      	adds	r7, #40	; 0x28
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	40023800 	.word	0x40023800
 800e28c:	40020000 	.word	0x40020000

0800e290 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	4610      	mov	r0, r2
 800e2a8:	f7fe fb4d 	bl	800c946 <USBD_LL_SetupStage>
}
 800e2ac:	bf00      	nop
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	460b      	mov	r3, r1
 800e2be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e2c6:	78fa      	ldrb	r2, [r7, #3]
 800e2c8:	6879      	ldr	r1, [r7, #4]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	00db      	lsls	r3, r3, #3
 800e2ce:	4413      	add	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	440b      	add	r3, r1
 800e2d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	78fb      	ldrb	r3, [r7, #3]
 800e2dc:	4619      	mov	r1, r3
 800e2de:	f7fe fb87 	bl	800c9f0 <USBD_LL_DataOutStage>
}
 800e2e2:	bf00      	nop
 800e2e4:	3708      	adds	r7, #8
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}

0800e2ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b082      	sub	sp, #8
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e2fc:	78fa      	ldrb	r2, [r7, #3]
 800e2fe:	6879      	ldr	r1, [r7, #4]
 800e300:	4613      	mov	r3, r2
 800e302:	00db      	lsls	r3, r3, #3
 800e304:	4413      	add	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	440b      	add	r3, r1
 800e30a:	334c      	adds	r3, #76	; 0x4c
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	78fb      	ldrb	r3, [r7, #3]
 800e310:	4619      	mov	r1, r3
 800e312:	f7fe fc20 	bl	800cb56 <USBD_LL_DataInStage>
}
 800e316:	bf00      	nop
 800e318:	3708      	adds	r7, #8
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e31e:	b580      	push	{r7, lr}
 800e320:	b082      	sub	sp, #8
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7fe fd54 	bl	800cdda <USBD_LL_SOF>
}
 800e332:	bf00      	nop
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	b084      	sub	sp, #16
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e342:	2301      	movs	r3, #1
 800e344:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	68db      	ldr	r3, [r3, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d102      	bne.n	800e354 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e34e:	2300      	movs	r3, #0
 800e350:	73fb      	strb	r3, [r7, #15]
 800e352:	e008      	b.n	800e366 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	2b02      	cmp	r3, #2
 800e35a:	d102      	bne.n	800e362 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e35c:	2301      	movs	r3, #1
 800e35e:	73fb      	strb	r3, [r7, #15]
 800e360:	e001      	b.n	800e366 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e362:	f7f5 fbe1 	bl	8003b28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e36c:	7bfa      	ldrb	r2, [r7, #15]
 800e36e:	4611      	mov	r1, r2
 800e370:	4618      	mov	r0, r3
 800e372:	f7fe fcf4 	bl	800cd5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fe fc9c 	bl	800ccba <USBD_LL_Reset>
}
 800e382:	bf00      	nop
 800e384:	3710      	adds	r7, #16
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
	...

0800e38c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7fe fcef 	bl	800cd7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	6812      	ldr	r2, [r2, #0]
 800e3ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e3b2:	f043 0301 	orr.w	r3, r3, #1
 800e3b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6a1b      	ldr	r3, [r3, #32]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d005      	beq.n	800e3cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e3c0:	4b04      	ldr	r3, [pc, #16]	; (800e3d4 <HAL_PCD_SuspendCallback+0x48>)
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	4a03      	ldr	r2, [pc, #12]	; (800e3d4 <HAL_PCD_SuspendCallback+0x48>)
 800e3c6:	f043 0306 	orr.w	r3, r3, #6
 800e3ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e3cc:	bf00      	nop
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	e000ed00 	.word	0xe000ed00

0800e3d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fe fcdf 	bl	800cdaa <USBD_LL_Resume>
}
 800e3ec:	bf00      	nop
 800e3ee:	3708      	adds	r7, #8
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e406:	78fa      	ldrb	r2, [r7, #3]
 800e408:	4611      	mov	r1, r2
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fe fd37 	bl	800ce7e <USBD_LL_IsoOUTIncomplete>
}
 800e410:	bf00      	nop
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	460b      	mov	r3, r1
 800e422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e42a:	78fa      	ldrb	r2, [r7, #3]
 800e42c:	4611      	mov	r1, r2
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fe fcf3 	bl	800ce1a <USBD_LL_IsoINIncomplete>
}
 800e434:	bf00      	nop
 800e436:	3708      	adds	r7, #8
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fe fd49 	bl	800cee2 <USBD_LL_DevConnected>
}
 800e450:	bf00      	nop
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e466:	4618      	mov	r0, r3
 800e468:	f7fe fd46 	bl	800cef8 <USBD_LL_DevDisconnected>
}
 800e46c:	bf00      	nop
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d13c      	bne.n	800e4fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e484:	4a20      	ldr	r2, [pc, #128]	; (800e508 <USBD_LL_Init+0x94>)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	4a1e      	ldr	r2, [pc, #120]	; (800e508 <USBD_LL_Init+0x94>)
 800e490:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e494:	4b1c      	ldr	r3, [pc, #112]	; (800e508 <USBD_LL_Init+0x94>)
 800e496:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e49a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e49c:	4b1a      	ldr	r3, [pc, #104]	; (800e508 <USBD_LL_Init+0x94>)
 800e49e:	2204      	movs	r2, #4
 800e4a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e4a2:	4b19      	ldr	r3, [pc, #100]	; (800e508 <USBD_LL_Init+0x94>)
 800e4a4:	2202      	movs	r2, #2
 800e4a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e4a8:	4b17      	ldr	r3, [pc, #92]	; (800e508 <USBD_LL_Init+0x94>)
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e4ae:	4b16      	ldr	r3, [pc, #88]	; (800e508 <USBD_LL_Init+0x94>)
 800e4b0:	2202      	movs	r2, #2
 800e4b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e4b4:	4b14      	ldr	r3, [pc, #80]	; (800e508 <USBD_LL_Init+0x94>)
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e4ba:	4b13      	ldr	r3, [pc, #76]	; (800e508 <USBD_LL_Init+0x94>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e4c0:	4b11      	ldr	r3, [pc, #68]	; (800e508 <USBD_LL_Init+0x94>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e4c6:	4b10      	ldr	r3, [pc, #64]	; (800e508 <USBD_LL_Init+0x94>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e4cc:	4b0e      	ldr	r3, [pc, #56]	; (800e508 <USBD_LL_Init+0x94>)
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e4d2:	480d      	ldr	r0, [pc, #52]	; (800e508 <USBD_LL_Init+0x94>)
 800e4d4:	f7f8 ff8d 	bl	80073f2 <HAL_PCD_Init>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d001      	beq.n	800e4e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e4de:	f7f5 fb23 	bl	8003b28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e4e2:	2180      	movs	r1, #128	; 0x80
 800e4e4:	4808      	ldr	r0, [pc, #32]	; (800e508 <USBD_LL_Init+0x94>)
 800e4e6:	f7fa f9e4 	bl	80088b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e4ea:	2240      	movs	r2, #64	; 0x40
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	4806      	ldr	r0, [pc, #24]	; (800e508 <USBD_LL_Init+0x94>)
 800e4f0:	f7fa f998 	bl	8008824 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e4f4:	2280      	movs	r2, #128	; 0x80
 800e4f6:	2101      	movs	r1, #1
 800e4f8:	4803      	ldr	r0, [pc, #12]	; (800e508 <USBD_LL_Init+0x94>)
 800e4fa:	f7fa f993 	bl	8008824 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e4fe:	2300      	movs	r3, #0
}
 800e500:	4618      	mov	r0, r3
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	20002a14 	.word	0x20002a14

0800e50c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e514:	2300      	movs	r3, #0
 800e516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e518:	2300      	movs	r3, #0
 800e51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e522:	4618      	mov	r0, r3
 800e524:	f7f9 f882 	bl	800762c <HAL_PCD_Start>
 800e528:	4603      	mov	r3, r0
 800e52a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e52c:	7bfb      	ldrb	r3, [r7, #15]
 800e52e:	4618      	mov	r0, r3
 800e530:	f000 f942 	bl	800e7b8 <USBD_Get_USB_Status>
 800e534:	4603      	mov	r3, r0
 800e536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e538:	7bbb      	ldrb	r3, [r7, #14]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}

0800e542 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e542:	b580      	push	{r7, lr}
 800e544:	b084      	sub	sp, #16
 800e546:	af00      	add	r7, sp, #0
 800e548:	6078      	str	r0, [r7, #4]
 800e54a:	4608      	mov	r0, r1
 800e54c:	4611      	mov	r1, r2
 800e54e:	461a      	mov	r2, r3
 800e550:	4603      	mov	r3, r0
 800e552:	70fb      	strb	r3, [r7, #3]
 800e554:	460b      	mov	r3, r1
 800e556:	70bb      	strb	r3, [r7, #2]
 800e558:	4613      	mov	r3, r2
 800e55a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e55c:	2300      	movs	r3, #0
 800e55e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e560:	2300      	movs	r3, #0
 800e562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e56a:	78bb      	ldrb	r3, [r7, #2]
 800e56c:	883a      	ldrh	r2, [r7, #0]
 800e56e:	78f9      	ldrb	r1, [r7, #3]
 800e570:	f7f9 fd53 	bl	800801a <HAL_PCD_EP_Open>
 800e574:	4603      	mov	r3, r0
 800e576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e578:	7bfb      	ldrb	r3, [r7, #15]
 800e57a:	4618      	mov	r0, r3
 800e57c:	f000 f91c 	bl	800e7b8 <USBD_Get_USB_Status>
 800e580:	4603      	mov	r3, r0
 800e582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e584:	7bbb      	ldrb	r3, [r7, #14]
}
 800e586:	4618      	mov	r0, r3
 800e588:	3710      	adds	r7, #16
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b084      	sub	sp, #16
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
 800e596:	460b      	mov	r3, r1
 800e598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e59a:	2300      	movs	r3, #0
 800e59c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5a8:	78fa      	ldrb	r2, [r7, #3]
 800e5aa:	4611      	mov	r1, r2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7f9 fd9c 	bl	80080ea <HAL_PCD_EP_Close>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5b6:	7bfb      	ldrb	r3, [r7, #15]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f000 f8fd 	bl	800e7b8 <USBD_Get_USB_Status>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3710      	adds	r7, #16
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5e6:	78fa      	ldrb	r2, [r7, #3]
 800e5e8:	4611      	mov	r1, r2
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7f9 fe74 	bl	80082d8 <HAL_PCD_EP_SetStall>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5f4:	7bfb      	ldrb	r3, [r7, #15]
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f000 f8de 	bl	800e7b8 <USBD_Get_USB_Status>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e600:	7bbb      	ldrb	r3, [r7, #14]
}
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b084      	sub	sp, #16
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
 800e612:	460b      	mov	r3, r1
 800e614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e616:	2300      	movs	r3, #0
 800e618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e61a:	2300      	movs	r3, #0
 800e61c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e624:	78fa      	ldrb	r2, [r7, #3]
 800e626:	4611      	mov	r1, r2
 800e628:	4618      	mov	r0, r3
 800e62a:	f7f9 feb9 	bl	80083a0 <HAL_PCD_EP_ClrStall>
 800e62e:	4603      	mov	r3, r0
 800e630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e632:	7bfb      	ldrb	r3, [r7, #15]
 800e634:	4618      	mov	r0, r3
 800e636:	f000 f8bf 	bl	800e7b8 <USBD_Get_USB_Status>
 800e63a:	4603      	mov	r3, r0
 800e63c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e63e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e648:	b480      	push	{r7}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	460b      	mov	r3, r1
 800e652:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e65a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e65c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e660:	2b00      	cmp	r3, #0
 800e662:	da0b      	bge.n	800e67c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e664:	78fb      	ldrb	r3, [r7, #3]
 800e666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e66a:	68f9      	ldr	r1, [r7, #12]
 800e66c:	4613      	mov	r3, r2
 800e66e:	00db      	lsls	r3, r3, #3
 800e670:	4413      	add	r3, r2
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	440b      	add	r3, r1
 800e676:	333e      	adds	r3, #62	; 0x3e
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	e00b      	b.n	800e694 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e67c:	78fb      	ldrb	r3, [r7, #3]
 800e67e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e682:	68f9      	ldr	r1, [r7, #12]
 800e684:	4613      	mov	r3, r2
 800e686:	00db      	lsls	r3, r3, #3
 800e688:	4413      	add	r3, r2
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	440b      	add	r3, r1
 800e68e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e692:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e694:	4618      	mov	r0, r3
 800e696:	3714      	adds	r7, #20
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr

0800e6a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6ba:	78fa      	ldrb	r2, [r7, #3]
 800e6bc:	4611      	mov	r1, r2
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7f9 fc86 	bl	8007fd0 <HAL_PCD_SetAddress>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6c8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f000 f874 	bl	800e7b8 <USBD_Get_USB_Status>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b086      	sub	sp, #24
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	60f8      	str	r0, [r7, #12]
 800e6e6:	607a      	str	r2, [r7, #4]
 800e6e8:	603b      	str	r3, [r7, #0]
 800e6ea:	460b      	mov	r3, r1
 800e6ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e6fc:	7af9      	ldrb	r1, [r7, #11]
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	f7f9 fd9f 	bl	8008244 <HAL_PCD_EP_Transmit>
 800e706:	4603      	mov	r3, r0
 800e708:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e70a:	7dfb      	ldrb	r3, [r7, #23]
 800e70c:	4618      	mov	r0, r3
 800e70e:	f000 f853 	bl	800e7b8 <USBD_Get_USB_Status>
 800e712:	4603      	mov	r3, r0
 800e714:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e716:	7dbb      	ldrb	r3, [r7, #22]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3718      	adds	r7, #24
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	607a      	str	r2, [r7, #4]
 800e72a:	603b      	str	r3, [r7, #0]
 800e72c:	460b      	mov	r3, r1
 800e72e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e730:	2300      	movs	r3, #0
 800e732:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e734:	2300      	movs	r3, #0
 800e736:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e73e:	7af9      	ldrb	r1, [r7, #11]
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	f7f9 fd1b 	bl	800817e <HAL_PCD_EP_Receive>
 800e748:	4603      	mov	r3, r0
 800e74a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e74c:	7dfb      	ldrb	r3, [r7, #23]
 800e74e:	4618      	mov	r0, r3
 800e750:	f000 f832 	bl	800e7b8 <USBD_Get_USB_Status>
 800e754:	4603      	mov	r3, r0
 800e756:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e758:	7dbb      	ldrb	r3, [r7, #22]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3718      	adds	r7, #24
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}

0800e762 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e762:	b580      	push	{r7, lr}
 800e764:	b082      	sub	sp, #8
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
 800e76a:	460b      	mov	r3, r1
 800e76c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e774:	78fa      	ldrb	r2, [r7, #3]
 800e776:	4611      	mov	r1, r2
 800e778:	4618      	mov	r0, r3
 800e77a:	f7f9 fd4b 	bl	8008214 <HAL_PCD_EP_GetRxCount>
 800e77e:	4603      	mov	r3, r0
}
 800e780:	4618      	mov	r0, r3
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e790:	4b03      	ldr	r3, [pc, #12]	; (800e7a0 <USBD_static_malloc+0x18>)
}
 800e792:	4618      	mov	r0, r3
 800e794:	370c      	adds	r7, #12
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	20002f20 	.word	0x20002f20

0800e7a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]

}
 800e7ac:	bf00      	nop
 800e7ae:	370c      	adds	r7, #12
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	4603      	mov	r3, r0
 800e7c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e7c6:	79fb      	ldrb	r3, [r7, #7]
 800e7c8:	2b03      	cmp	r3, #3
 800e7ca:	d817      	bhi.n	800e7fc <USBD_Get_USB_Status+0x44>
 800e7cc:	a201      	add	r2, pc, #4	; (adr r2, 800e7d4 <USBD_Get_USB_Status+0x1c>)
 800e7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d2:	bf00      	nop
 800e7d4:	0800e7e5 	.word	0x0800e7e5
 800e7d8:	0800e7eb 	.word	0x0800e7eb
 800e7dc:	0800e7f1 	.word	0x0800e7f1
 800e7e0:	0800e7f7 	.word	0x0800e7f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e7e8:	e00b      	b.n	800e802 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e7ea:	2303      	movs	r3, #3
 800e7ec:	73fb      	strb	r3, [r7, #15]
    break;
 800e7ee:	e008      	b.n	800e802 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800e7f4:	e005      	b.n	800e802 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e7f6:	2303      	movs	r3, #3
 800e7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800e7fa:	e002      	b.n	800e802 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e7fc:	2303      	movs	r3, #3
 800e7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800e800:	bf00      	nop
  }
  return usb_status;
 800e802:	7bfb      	ldrb	r3, [r7, #15]
}
 800e804:	4618      	mov	r0, r3
 800e806:	3714      	adds	r7, #20
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <__errno>:
 800e810:	4b01      	ldr	r3, [pc, #4]	; (800e818 <__errno+0x8>)
 800e812:	6818      	ldr	r0, [r3, #0]
 800e814:	4770      	bx	lr
 800e816:	bf00      	nop
 800e818:	20000110 	.word	0x20000110

0800e81c <__libc_init_array>:
 800e81c:	b570      	push	{r4, r5, r6, lr}
 800e81e:	4d0d      	ldr	r5, [pc, #52]	; (800e854 <__libc_init_array+0x38>)
 800e820:	4c0d      	ldr	r4, [pc, #52]	; (800e858 <__libc_init_array+0x3c>)
 800e822:	1b64      	subs	r4, r4, r5
 800e824:	10a4      	asrs	r4, r4, #2
 800e826:	2600      	movs	r6, #0
 800e828:	42a6      	cmp	r6, r4
 800e82a:	d109      	bne.n	800e840 <__libc_init_array+0x24>
 800e82c:	4d0b      	ldr	r5, [pc, #44]	; (800e85c <__libc_init_array+0x40>)
 800e82e:	4c0c      	ldr	r4, [pc, #48]	; (800e860 <__libc_init_array+0x44>)
 800e830:	f005 f9a2 	bl	8013b78 <_init>
 800e834:	1b64      	subs	r4, r4, r5
 800e836:	10a4      	asrs	r4, r4, #2
 800e838:	2600      	movs	r6, #0
 800e83a:	42a6      	cmp	r6, r4
 800e83c:	d105      	bne.n	800e84a <__libc_init_array+0x2e>
 800e83e:	bd70      	pop	{r4, r5, r6, pc}
 800e840:	f855 3b04 	ldr.w	r3, [r5], #4
 800e844:	4798      	blx	r3
 800e846:	3601      	adds	r6, #1
 800e848:	e7ee      	b.n	800e828 <__libc_init_array+0xc>
 800e84a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e84e:	4798      	blx	r3
 800e850:	3601      	adds	r6, #1
 800e852:	e7f2      	b.n	800e83a <__libc_init_array+0x1e>
 800e854:	08014ce4 	.word	0x08014ce4
 800e858:	08014ce4 	.word	0x08014ce4
 800e85c:	08014ce4 	.word	0x08014ce4
 800e860:	08014ce8 	.word	0x08014ce8

0800e864 <memcpy>:
 800e864:	440a      	add	r2, r1
 800e866:	4291      	cmp	r1, r2
 800e868:	f100 33ff 	add.w	r3, r0, #4294967295
 800e86c:	d100      	bne.n	800e870 <memcpy+0xc>
 800e86e:	4770      	bx	lr
 800e870:	b510      	push	{r4, lr}
 800e872:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e87a:	4291      	cmp	r1, r2
 800e87c:	d1f9      	bne.n	800e872 <memcpy+0xe>
 800e87e:	bd10      	pop	{r4, pc}

0800e880 <memmove>:
 800e880:	4288      	cmp	r0, r1
 800e882:	b510      	push	{r4, lr}
 800e884:	eb01 0402 	add.w	r4, r1, r2
 800e888:	d902      	bls.n	800e890 <memmove+0x10>
 800e88a:	4284      	cmp	r4, r0
 800e88c:	4623      	mov	r3, r4
 800e88e:	d807      	bhi.n	800e8a0 <memmove+0x20>
 800e890:	1e43      	subs	r3, r0, #1
 800e892:	42a1      	cmp	r1, r4
 800e894:	d008      	beq.n	800e8a8 <memmove+0x28>
 800e896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e89a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e89e:	e7f8      	b.n	800e892 <memmove+0x12>
 800e8a0:	4402      	add	r2, r0
 800e8a2:	4601      	mov	r1, r0
 800e8a4:	428a      	cmp	r2, r1
 800e8a6:	d100      	bne.n	800e8aa <memmove+0x2a>
 800e8a8:	bd10      	pop	{r4, pc}
 800e8aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8b2:	e7f7      	b.n	800e8a4 <memmove+0x24>

0800e8b4 <memset>:
 800e8b4:	4402      	add	r2, r0
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d100      	bne.n	800e8be <memset+0xa>
 800e8bc:	4770      	bx	lr
 800e8be:	f803 1b01 	strb.w	r1, [r3], #1
 800e8c2:	e7f9      	b.n	800e8b8 <memset+0x4>

0800e8c4 <__cvt>:
 800e8c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8c8:	ec55 4b10 	vmov	r4, r5, d0
 800e8cc:	2d00      	cmp	r5, #0
 800e8ce:	460e      	mov	r6, r1
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	462b      	mov	r3, r5
 800e8d4:	bfbb      	ittet	lt
 800e8d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e8da:	461d      	movlt	r5, r3
 800e8dc:	2300      	movge	r3, #0
 800e8de:	232d      	movlt	r3, #45	; 0x2d
 800e8e0:	700b      	strb	r3, [r1, #0]
 800e8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e8e8:	4691      	mov	r9, r2
 800e8ea:	f023 0820 	bic.w	r8, r3, #32
 800e8ee:	bfbc      	itt	lt
 800e8f0:	4622      	movlt	r2, r4
 800e8f2:	4614      	movlt	r4, r2
 800e8f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e8f8:	d005      	beq.n	800e906 <__cvt+0x42>
 800e8fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e8fe:	d100      	bne.n	800e902 <__cvt+0x3e>
 800e900:	3601      	adds	r6, #1
 800e902:	2102      	movs	r1, #2
 800e904:	e000      	b.n	800e908 <__cvt+0x44>
 800e906:	2103      	movs	r1, #3
 800e908:	ab03      	add	r3, sp, #12
 800e90a:	9301      	str	r3, [sp, #4]
 800e90c:	ab02      	add	r3, sp, #8
 800e90e:	9300      	str	r3, [sp, #0]
 800e910:	ec45 4b10 	vmov	d0, r4, r5
 800e914:	4653      	mov	r3, sl
 800e916:	4632      	mov	r2, r6
 800e918:	f001 ffda 	bl	80108d0 <_dtoa_r>
 800e91c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e920:	4607      	mov	r7, r0
 800e922:	d102      	bne.n	800e92a <__cvt+0x66>
 800e924:	f019 0f01 	tst.w	r9, #1
 800e928:	d022      	beq.n	800e970 <__cvt+0xac>
 800e92a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e92e:	eb07 0906 	add.w	r9, r7, r6
 800e932:	d110      	bne.n	800e956 <__cvt+0x92>
 800e934:	783b      	ldrb	r3, [r7, #0]
 800e936:	2b30      	cmp	r3, #48	; 0x30
 800e938:	d10a      	bne.n	800e950 <__cvt+0x8c>
 800e93a:	2200      	movs	r2, #0
 800e93c:	2300      	movs	r3, #0
 800e93e:	4620      	mov	r0, r4
 800e940:	4629      	mov	r1, r5
 800e942:	f7f2 f8e1 	bl	8000b08 <__aeabi_dcmpeq>
 800e946:	b918      	cbnz	r0, 800e950 <__cvt+0x8c>
 800e948:	f1c6 0601 	rsb	r6, r6, #1
 800e94c:	f8ca 6000 	str.w	r6, [sl]
 800e950:	f8da 3000 	ldr.w	r3, [sl]
 800e954:	4499      	add	r9, r3
 800e956:	2200      	movs	r2, #0
 800e958:	2300      	movs	r3, #0
 800e95a:	4620      	mov	r0, r4
 800e95c:	4629      	mov	r1, r5
 800e95e:	f7f2 f8d3 	bl	8000b08 <__aeabi_dcmpeq>
 800e962:	b108      	cbz	r0, 800e968 <__cvt+0xa4>
 800e964:	f8cd 900c 	str.w	r9, [sp, #12]
 800e968:	2230      	movs	r2, #48	; 0x30
 800e96a:	9b03      	ldr	r3, [sp, #12]
 800e96c:	454b      	cmp	r3, r9
 800e96e:	d307      	bcc.n	800e980 <__cvt+0xbc>
 800e970:	9b03      	ldr	r3, [sp, #12]
 800e972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e974:	1bdb      	subs	r3, r3, r7
 800e976:	4638      	mov	r0, r7
 800e978:	6013      	str	r3, [r2, #0]
 800e97a:	b004      	add	sp, #16
 800e97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e980:	1c59      	adds	r1, r3, #1
 800e982:	9103      	str	r1, [sp, #12]
 800e984:	701a      	strb	r2, [r3, #0]
 800e986:	e7f0      	b.n	800e96a <__cvt+0xa6>

0800e988 <__exponent>:
 800e988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e98a:	4603      	mov	r3, r0
 800e98c:	2900      	cmp	r1, #0
 800e98e:	bfb8      	it	lt
 800e990:	4249      	neglt	r1, r1
 800e992:	f803 2b02 	strb.w	r2, [r3], #2
 800e996:	bfb4      	ite	lt
 800e998:	222d      	movlt	r2, #45	; 0x2d
 800e99a:	222b      	movge	r2, #43	; 0x2b
 800e99c:	2909      	cmp	r1, #9
 800e99e:	7042      	strb	r2, [r0, #1]
 800e9a0:	dd2a      	ble.n	800e9f8 <__exponent+0x70>
 800e9a2:	f10d 0407 	add.w	r4, sp, #7
 800e9a6:	46a4      	mov	ip, r4
 800e9a8:	270a      	movs	r7, #10
 800e9aa:	46a6      	mov	lr, r4
 800e9ac:	460a      	mov	r2, r1
 800e9ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800e9b2:	fb07 1516 	mls	r5, r7, r6, r1
 800e9b6:	3530      	adds	r5, #48	; 0x30
 800e9b8:	2a63      	cmp	r2, #99	; 0x63
 800e9ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800e9be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	dcf1      	bgt.n	800e9aa <__exponent+0x22>
 800e9c6:	3130      	adds	r1, #48	; 0x30
 800e9c8:	f1ae 0502 	sub.w	r5, lr, #2
 800e9cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e9d0:	1c44      	adds	r4, r0, #1
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	4561      	cmp	r1, ip
 800e9d6:	d30a      	bcc.n	800e9ee <__exponent+0x66>
 800e9d8:	f10d 0209 	add.w	r2, sp, #9
 800e9dc:	eba2 020e 	sub.w	r2, r2, lr
 800e9e0:	4565      	cmp	r5, ip
 800e9e2:	bf88      	it	hi
 800e9e4:	2200      	movhi	r2, #0
 800e9e6:	4413      	add	r3, r2
 800e9e8:	1a18      	subs	r0, r3, r0
 800e9ea:	b003      	add	sp, #12
 800e9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e9f6:	e7ed      	b.n	800e9d4 <__exponent+0x4c>
 800e9f8:	2330      	movs	r3, #48	; 0x30
 800e9fa:	3130      	adds	r1, #48	; 0x30
 800e9fc:	7083      	strb	r3, [r0, #2]
 800e9fe:	70c1      	strb	r1, [r0, #3]
 800ea00:	1d03      	adds	r3, r0, #4
 800ea02:	e7f1      	b.n	800e9e8 <__exponent+0x60>

0800ea04 <_printf_float>:
 800ea04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea08:	ed2d 8b02 	vpush	{d8}
 800ea0c:	b08d      	sub	sp, #52	; 0x34
 800ea0e:	460c      	mov	r4, r1
 800ea10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ea14:	4616      	mov	r6, r2
 800ea16:	461f      	mov	r7, r3
 800ea18:	4605      	mov	r5, r0
 800ea1a:	f003 fa6d 	bl	8011ef8 <_localeconv_r>
 800ea1e:	f8d0 a000 	ldr.w	sl, [r0]
 800ea22:	4650      	mov	r0, sl
 800ea24:	f7f1 fbee 	bl	8000204 <strlen>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ea2c:	6823      	ldr	r3, [r4, #0]
 800ea2e:	9305      	str	r3, [sp, #20]
 800ea30:	f8d8 3000 	ldr.w	r3, [r8]
 800ea34:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ea38:	3307      	adds	r3, #7
 800ea3a:	f023 0307 	bic.w	r3, r3, #7
 800ea3e:	f103 0208 	add.w	r2, r3, #8
 800ea42:	f8c8 2000 	str.w	r2, [r8]
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ea4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ea52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea56:	9307      	str	r3, [sp, #28]
 800ea58:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea5c:	ee08 0a10 	vmov	s16, r0
 800ea60:	4b9f      	ldr	r3, [pc, #636]	; (800ece0 <_printf_float+0x2dc>)
 800ea62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea66:	f04f 32ff 	mov.w	r2, #4294967295
 800ea6a:	f7f2 f87f 	bl	8000b6c <__aeabi_dcmpun>
 800ea6e:	bb88      	cbnz	r0, 800ead4 <_printf_float+0xd0>
 800ea70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea74:	4b9a      	ldr	r3, [pc, #616]	; (800ece0 <_printf_float+0x2dc>)
 800ea76:	f04f 32ff 	mov.w	r2, #4294967295
 800ea7a:	f7f2 f859 	bl	8000b30 <__aeabi_dcmple>
 800ea7e:	bb48      	cbnz	r0, 800ead4 <_printf_float+0xd0>
 800ea80:	2200      	movs	r2, #0
 800ea82:	2300      	movs	r3, #0
 800ea84:	4640      	mov	r0, r8
 800ea86:	4649      	mov	r1, r9
 800ea88:	f7f2 f848 	bl	8000b1c <__aeabi_dcmplt>
 800ea8c:	b110      	cbz	r0, 800ea94 <_printf_float+0x90>
 800ea8e:	232d      	movs	r3, #45	; 0x2d
 800ea90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea94:	4b93      	ldr	r3, [pc, #588]	; (800ece4 <_printf_float+0x2e0>)
 800ea96:	4894      	ldr	r0, [pc, #592]	; (800ece8 <_printf_float+0x2e4>)
 800ea98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ea9c:	bf94      	ite	ls
 800ea9e:	4698      	movls	r8, r3
 800eaa0:	4680      	movhi	r8, r0
 800eaa2:	2303      	movs	r3, #3
 800eaa4:	6123      	str	r3, [r4, #16]
 800eaa6:	9b05      	ldr	r3, [sp, #20]
 800eaa8:	f023 0204 	bic.w	r2, r3, #4
 800eaac:	6022      	str	r2, [r4, #0]
 800eaae:	f04f 0900 	mov.w	r9, #0
 800eab2:	9700      	str	r7, [sp, #0]
 800eab4:	4633      	mov	r3, r6
 800eab6:	aa0b      	add	r2, sp, #44	; 0x2c
 800eab8:	4621      	mov	r1, r4
 800eaba:	4628      	mov	r0, r5
 800eabc:	f000 f9d8 	bl	800ee70 <_printf_common>
 800eac0:	3001      	adds	r0, #1
 800eac2:	f040 8090 	bne.w	800ebe6 <_printf_float+0x1e2>
 800eac6:	f04f 30ff 	mov.w	r0, #4294967295
 800eaca:	b00d      	add	sp, #52	; 0x34
 800eacc:	ecbd 8b02 	vpop	{d8}
 800ead0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead4:	4642      	mov	r2, r8
 800ead6:	464b      	mov	r3, r9
 800ead8:	4640      	mov	r0, r8
 800eada:	4649      	mov	r1, r9
 800eadc:	f7f2 f846 	bl	8000b6c <__aeabi_dcmpun>
 800eae0:	b140      	cbz	r0, 800eaf4 <_printf_float+0xf0>
 800eae2:	464b      	mov	r3, r9
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	bfbc      	itt	lt
 800eae8:	232d      	movlt	r3, #45	; 0x2d
 800eaea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eaee:	487f      	ldr	r0, [pc, #508]	; (800ecec <_printf_float+0x2e8>)
 800eaf0:	4b7f      	ldr	r3, [pc, #508]	; (800ecf0 <_printf_float+0x2ec>)
 800eaf2:	e7d1      	b.n	800ea98 <_printf_float+0x94>
 800eaf4:	6863      	ldr	r3, [r4, #4]
 800eaf6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eafa:	9206      	str	r2, [sp, #24]
 800eafc:	1c5a      	adds	r2, r3, #1
 800eafe:	d13f      	bne.n	800eb80 <_printf_float+0x17c>
 800eb00:	2306      	movs	r3, #6
 800eb02:	6063      	str	r3, [r4, #4]
 800eb04:	9b05      	ldr	r3, [sp, #20]
 800eb06:	6861      	ldr	r1, [r4, #4]
 800eb08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	9303      	str	r3, [sp, #12]
 800eb10:	ab0a      	add	r3, sp, #40	; 0x28
 800eb12:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eb16:	ab09      	add	r3, sp, #36	; 0x24
 800eb18:	ec49 8b10 	vmov	d0, r8, r9
 800eb1c:	9300      	str	r3, [sp, #0]
 800eb1e:	6022      	str	r2, [r4, #0]
 800eb20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eb24:	4628      	mov	r0, r5
 800eb26:	f7ff fecd 	bl	800e8c4 <__cvt>
 800eb2a:	9b06      	ldr	r3, [sp, #24]
 800eb2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb2e:	2b47      	cmp	r3, #71	; 0x47
 800eb30:	4680      	mov	r8, r0
 800eb32:	d108      	bne.n	800eb46 <_printf_float+0x142>
 800eb34:	1cc8      	adds	r0, r1, #3
 800eb36:	db02      	blt.n	800eb3e <_printf_float+0x13a>
 800eb38:	6863      	ldr	r3, [r4, #4]
 800eb3a:	4299      	cmp	r1, r3
 800eb3c:	dd41      	ble.n	800ebc2 <_printf_float+0x1be>
 800eb3e:	f1ab 0b02 	sub.w	fp, fp, #2
 800eb42:	fa5f fb8b 	uxtb.w	fp, fp
 800eb46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb4a:	d820      	bhi.n	800eb8e <_printf_float+0x18a>
 800eb4c:	3901      	subs	r1, #1
 800eb4e:	465a      	mov	r2, fp
 800eb50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eb54:	9109      	str	r1, [sp, #36]	; 0x24
 800eb56:	f7ff ff17 	bl	800e988 <__exponent>
 800eb5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb5c:	1813      	adds	r3, r2, r0
 800eb5e:	2a01      	cmp	r2, #1
 800eb60:	4681      	mov	r9, r0
 800eb62:	6123      	str	r3, [r4, #16]
 800eb64:	dc02      	bgt.n	800eb6c <_printf_float+0x168>
 800eb66:	6822      	ldr	r2, [r4, #0]
 800eb68:	07d2      	lsls	r2, r2, #31
 800eb6a:	d501      	bpl.n	800eb70 <_printf_float+0x16c>
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	6123      	str	r3, [r4, #16]
 800eb70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d09c      	beq.n	800eab2 <_printf_float+0xae>
 800eb78:	232d      	movs	r3, #45	; 0x2d
 800eb7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb7e:	e798      	b.n	800eab2 <_printf_float+0xae>
 800eb80:	9a06      	ldr	r2, [sp, #24]
 800eb82:	2a47      	cmp	r2, #71	; 0x47
 800eb84:	d1be      	bne.n	800eb04 <_printf_float+0x100>
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d1bc      	bne.n	800eb04 <_printf_float+0x100>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e7b9      	b.n	800eb02 <_printf_float+0xfe>
 800eb8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800eb92:	d118      	bne.n	800ebc6 <_printf_float+0x1c2>
 800eb94:	2900      	cmp	r1, #0
 800eb96:	6863      	ldr	r3, [r4, #4]
 800eb98:	dd0b      	ble.n	800ebb2 <_printf_float+0x1ae>
 800eb9a:	6121      	str	r1, [r4, #16]
 800eb9c:	b913      	cbnz	r3, 800eba4 <_printf_float+0x1a0>
 800eb9e:	6822      	ldr	r2, [r4, #0]
 800eba0:	07d0      	lsls	r0, r2, #31
 800eba2:	d502      	bpl.n	800ebaa <_printf_float+0x1a6>
 800eba4:	3301      	adds	r3, #1
 800eba6:	440b      	add	r3, r1
 800eba8:	6123      	str	r3, [r4, #16]
 800ebaa:	65a1      	str	r1, [r4, #88]	; 0x58
 800ebac:	f04f 0900 	mov.w	r9, #0
 800ebb0:	e7de      	b.n	800eb70 <_printf_float+0x16c>
 800ebb2:	b913      	cbnz	r3, 800ebba <_printf_float+0x1b6>
 800ebb4:	6822      	ldr	r2, [r4, #0]
 800ebb6:	07d2      	lsls	r2, r2, #31
 800ebb8:	d501      	bpl.n	800ebbe <_printf_float+0x1ba>
 800ebba:	3302      	adds	r3, #2
 800ebbc:	e7f4      	b.n	800eba8 <_printf_float+0x1a4>
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e7f2      	b.n	800eba8 <_printf_float+0x1a4>
 800ebc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ebc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebc8:	4299      	cmp	r1, r3
 800ebca:	db05      	blt.n	800ebd8 <_printf_float+0x1d4>
 800ebcc:	6823      	ldr	r3, [r4, #0]
 800ebce:	6121      	str	r1, [r4, #16]
 800ebd0:	07d8      	lsls	r0, r3, #31
 800ebd2:	d5ea      	bpl.n	800ebaa <_printf_float+0x1a6>
 800ebd4:	1c4b      	adds	r3, r1, #1
 800ebd6:	e7e7      	b.n	800eba8 <_printf_float+0x1a4>
 800ebd8:	2900      	cmp	r1, #0
 800ebda:	bfd4      	ite	le
 800ebdc:	f1c1 0202 	rsble	r2, r1, #2
 800ebe0:	2201      	movgt	r2, #1
 800ebe2:	4413      	add	r3, r2
 800ebe4:	e7e0      	b.n	800eba8 <_printf_float+0x1a4>
 800ebe6:	6823      	ldr	r3, [r4, #0]
 800ebe8:	055a      	lsls	r2, r3, #21
 800ebea:	d407      	bmi.n	800ebfc <_printf_float+0x1f8>
 800ebec:	6923      	ldr	r3, [r4, #16]
 800ebee:	4642      	mov	r2, r8
 800ebf0:	4631      	mov	r1, r6
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	47b8      	blx	r7
 800ebf6:	3001      	adds	r0, #1
 800ebf8:	d12c      	bne.n	800ec54 <_printf_float+0x250>
 800ebfa:	e764      	b.n	800eac6 <_printf_float+0xc2>
 800ebfc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec00:	f240 80e0 	bls.w	800edc4 <_printf_float+0x3c0>
 800ec04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec08:	2200      	movs	r2, #0
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	f7f1 ff7c 	bl	8000b08 <__aeabi_dcmpeq>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d034      	beq.n	800ec7e <_printf_float+0x27a>
 800ec14:	4a37      	ldr	r2, [pc, #220]	; (800ecf4 <_printf_float+0x2f0>)
 800ec16:	2301      	movs	r3, #1
 800ec18:	4631      	mov	r1, r6
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	47b8      	blx	r7
 800ec1e:	3001      	adds	r0, #1
 800ec20:	f43f af51 	beq.w	800eac6 <_printf_float+0xc2>
 800ec24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	db02      	blt.n	800ec32 <_printf_float+0x22e>
 800ec2c:	6823      	ldr	r3, [r4, #0]
 800ec2e:	07d8      	lsls	r0, r3, #31
 800ec30:	d510      	bpl.n	800ec54 <_printf_float+0x250>
 800ec32:	ee18 3a10 	vmov	r3, s16
 800ec36:	4652      	mov	r2, sl
 800ec38:	4631      	mov	r1, r6
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	47b8      	blx	r7
 800ec3e:	3001      	adds	r0, #1
 800ec40:	f43f af41 	beq.w	800eac6 <_printf_float+0xc2>
 800ec44:	f04f 0800 	mov.w	r8, #0
 800ec48:	f104 091a 	add.w	r9, r4, #26
 800ec4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec4e:	3b01      	subs	r3, #1
 800ec50:	4543      	cmp	r3, r8
 800ec52:	dc09      	bgt.n	800ec68 <_printf_float+0x264>
 800ec54:	6823      	ldr	r3, [r4, #0]
 800ec56:	079b      	lsls	r3, r3, #30
 800ec58:	f100 8105 	bmi.w	800ee66 <_printf_float+0x462>
 800ec5c:	68e0      	ldr	r0, [r4, #12]
 800ec5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec60:	4298      	cmp	r0, r3
 800ec62:	bfb8      	it	lt
 800ec64:	4618      	movlt	r0, r3
 800ec66:	e730      	b.n	800eaca <_printf_float+0xc6>
 800ec68:	2301      	movs	r3, #1
 800ec6a:	464a      	mov	r2, r9
 800ec6c:	4631      	mov	r1, r6
 800ec6e:	4628      	mov	r0, r5
 800ec70:	47b8      	blx	r7
 800ec72:	3001      	adds	r0, #1
 800ec74:	f43f af27 	beq.w	800eac6 <_printf_float+0xc2>
 800ec78:	f108 0801 	add.w	r8, r8, #1
 800ec7c:	e7e6      	b.n	800ec4c <_printf_float+0x248>
 800ec7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	dc39      	bgt.n	800ecf8 <_printf_float+0x2f4>
 800ec84:	4a1b      	ldr	r2, [pc, #108]	; (800ecf4 <_printf_float+0x2f0>)
 800ec86:	2301      	movs	r3, #1
 800ec88:	4631      	mov	r1, r6
 800ec8a:	4628      	mov	r0, r5
 800ec8c:	47b8      	blx	r7
 800ec8e:	3001      	adds	r0, #1
 800ec90:	f43f af19 	beq.w	800eac6 <_printf_float+0xc2>
 800ec94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	d102      	bne.n	800eca2 <_printf_float+0x29e>
 800ec9c:	6823      	ldr	r3, [r4, #0]
 800ec9e:	07d9      	lsls	r1, r3, #31
 800eca0:	d5d8      	bpl.n	800ec54 <_printf_float+0x250>
 800eca2:	ee18 3a10 	vmov	r3, s16
 800eca6:	4652      	mov	r2, sl
 800eca8:	4631      	mov	r1, r6
 800ecaa:	4628      	mov	r0, r5
 800ecac:	47b8      	blx	r7
 800ecae:	3001      	adds	r0, #1
 800ecb0:	f43f af09 	beq.w	800eac6 <_printf_float+0xc2>
 800ecb4:	f04f 0900 	mov.w	r9, #0
 800ecb8:	f104 0a1a 	add.w	sl, r4, #26
 800ecbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecbe:	425b      	negs	r3, r3
 800ecc0:	454b      	cmp	r3, r9
 800ecc2:	dc01      	bgt.n	800ecc8 <_printf_float+0x2c4>
 800ecc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecc6:	e792      	b.n	800ebee <_printf_float+0x1ea>
 800ecc8:	2301      	movs	r3, #1
 800ecca:	4652      	mov	r2, sl
 800eccc:	4631      	mov	r1, r6
 800ecce:	4628      	mov	r0, r5
 800ecd0:	47b8      	blx	r7
 800ecd2:	3001      	adds	r0, #1
 800ecd4:	f43f aef7 	beq.w	800eac6 <_printf_float+0xc2>
 800ecd8:	f109 0901 	add.w	r9, r9, #1
 800ecdc:	e7ee      	b.n	800ecbc <_printf_float+0x2b8>
 800ecde:	bf00      	nop
 800ece0:	7fefffff 	.word	0x7fefffff
 800ece4:	08014928 	.word	0x08014928
 800ece8:	0801492c 	.word	0x0801492c
 800ecec:	08014934 	.word	0x08014934
 800ecf0:	08014930 	.word	0x08014930
 800ecf4:	08014c89 	.word	0x08014c89
 800ecf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	bfa8      	it	ge
 800ed00:	461a      	movge	r2, r3
 800ed02:	2a00      	cmp	r2, #0
 800ed04:	4691      	mov	r9, r2
 800ed06:	dc37      	bgt.n	800ed78 <_printf_float+0x374>
 800ed08:	f04f 0b00 	mov.w	fp, #0
 800ed0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed10:	f104 021a 	add.w	r2, r4, #26
 800ed14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed16:	9305      	str	r3, [sp, #20]
 800ed18:	eba3 0309 	sub.w	r3, r3, r9
 800ed1c:	455b      	cmp	r3, fp
 800ed1e:	dc33      	bgt.n	800ed88 <_printf_float+0x384>
 800ed20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed24:	429a      	cmp	r2, r3
 800ed26:	db3b      	blt.n	800eda0 <_printf_float+0x39c>
 800ed28:	6823      	ldr	r3, [r4, #0]
 800ed2a:	07da      	lsls	r2, r3, #31
 800ed2c:	d438      	bmi.n	800eda0 <_printf_float+0x39c>
 800ed2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed30:	9a05      	ldr	r2, [sp, #20]
 800ed32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed34:	1a9a      	subs	r2, r3, r2
 800ed36:	eba3 0901 	sub.w	r9, r3, r1
 800ed3a:	4591      	cmp	r9, r2
 800ed3c:	bfa8      	it	ge
 800ed3e:	4691      	movge	r9, r2
 800ed40:	f1b9 0f00 	cmp.w	r9, #0
 800ed44:	dc35      	bgt.n	800edb2 <_printf_float+0x3ae>
 800ed46:	f04f 0800 	mov.w	r8, #0
 800ed4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed4e:	f104 0a1a 	add.w	sl, r4, #26
 800ed52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed56:	1a9b      	subs	r3, r3, r2
 800ed58:	eba3 0309 	sub.w	r3, r3, r9
 800ed5c:	4543      	cmp	r3, r8
 800ed5e:	f77f af79 	ble.w	800ec54 <_printf_float+0x250>
 800ed62:	2301      	movs	r3, #1
 800ed64:	4652      	mov	r2, sl
 800ed66:	4631      	mov	r1, r6
 800ed68:	4628      	mov	r0, r5
 800ed6a:	47b8      	blx	r7
 800ed6c:	3001      	adds	r0, #1
 800ed6e:	f43f aeaa 	beq.w	800eac6 <_printf_float+0xc2>
 800ed72:	f108 0801 	add.w	r8, r8, #1
 800ed76:	e7ec      	b.n	800ed52 <_printf_float+0x34e>
 800ed78:	4613      	mov	r3, r2
 800ed7a:	4631      	mov	r1, r6
 800ed7c:	4642      	mov	r2, r8
 800ed7e:	4628      	mov	r0, r5
 800ed80:	47b8      	blx	r7
 800ed82:	3001      	adds	r0, #1
 800ed84:	d1c0      	bne.n	800ed08 <_printf_float+0x304>
 800ed86:	e69e      	b.n	800eac6 <_printf_float+0xc2>
 800ed88:	2301      	movs	r3, #1
 800ed8a:	4631      	mov	r1, r6
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	9205      	str	r2, [sp, #20]
 800ed90:	47b8      	blx	r7
 800ed92:	3001      	adds	r0, #1
 800ed94:	f43f ae97 	beq.w	800eac6 <_printf_float+0xc2>
 800ed98:	9a05      	ldr	r2, [sp, #20]
 800ed9a:	f10b 0b01 	add.w	fp, fp, #1
 800ed9e:	e7b9      	b.n	800ed14 <_printf_float+0x310>
 800eda0:	ee18 3a10 	vmov	r3, s16
 800eda4:	4652      	mov	r2, sl
 800eda6:	4631      	mov	r1, r6
 800eda8:	4628      	mov	r0, r5
 800edaa:	47b8      	blx	r7
 800edac:	3001      	adds	r0, #1
 800edae:	d1be      	bne.n	800ed2e <_printf_float+0x32a>
 800edb0:	e689      	b.n	800eac6 <_printf_float+0xc2>
 800edb2:	9a05      	ldr	r2, [sp, #20]
 800edb4:	464b      	mov	r3, r9
 800edb6:	4442      	add	r2, r8
 800edb8:	4631      	mov	r1, r6
 800edba:	4628      	mov	r0, r5
 800edbc:	47b8      	blx	r7
 800edbe:	3001      	adds	r0, #1
 800edc0:	d1c1      	bne.n	800ed46 <_printf_float+0x342>
 800edc2:	e680      	b.n	800eac6 <_printf_float+0xc2>
 800edc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edc6:	2a01      	cmp	r2, #1
 800edc8:	dc01      	bgt.n	800edce <_printf_float+0x3ca>
 800edca:	07db      	lsls	r3, r3, #31
 800edcc:	d538      	bpl.n	800ee40 <_printf_float+0x43c>
 800edce:	2301      	movs	r3, #1
 800edd0:	4642      	mov	r2, r8
 800edd2:	4631      	mov	r1, r6
 800edd4:	4628      	mov	r0, r5
 800edd6:	47b8      	blx	r7
 800edd8:	3001      	adds	r0, #1
 800edda:	f43f ae74 	beq.w	800eac6 <_printf_float+0xc2>
 800edde:	ee18 3a10 	vmov	r3, s16
 800ede2:	4652      	mov	r2, sl
 800ede4:	4631      	mov	r1, r6
 800ede6:	4628      	mov	r0, r5
 800ede8:	47b8      	blx	r7
 800edea:	3001      	adds	r0, #1
 800edec:	f43f ae6b 	beq.w	800eac6 <_printf_float+0xc2>
 800edf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800edf4:	2200      	movs	r2, #0
 800edf6:	2300      	movs	r3, #0
 800edf8:	f7f1 fe86 	bl	8000b08 <__aeabi_dcmpeq>
 800edfc:	b9d8      	cbnz	r0, 800ee36 <_printf_float+0x432>
 800edfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee00:	f108 0201 	add.w	r2, r8, #1
 800ee04:	3b01      	subs	r3, #1
 800ee06:	4631      	mov	r1, r6
 800ee08:	4628      	mov	r0, r5
 800ee0a:	47b8      	blx	r7
 800ee0c:	3001      	adds	r0, #1
 800ee0e:	d10e      	bne.n	800ee2e <_printf_float+0x42a>
 800ee10:	e659      	b.n	800eac6 <_printf_float+0xc2>
 800ee12:	2301      	movs	r3, #1
 800ee14:	4652      	mov	r2, sl
 800ee16:	4631      	mov	r1, r6
 800ee18:	4628      	mov	r0, r5
 800ee1a:	47b8      	blx	r7
 800ee1c:	3001      	adds	r0, #1
 800ee1e:	f43f ae52 	beq.w	800eac6 <_printf_float+0xc2>
 800ee22:	f108 0801 	add.w	r8, r8, #1
 800ee26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee28:	3b01      	subs	r3, #1
 800ee2a:	4543      	cmp	r3, r8
 800ee2c:	dcf1      	bgt.n	800ee12 <_printf_float+0x40e>
 800ee2e:	464b      	mov	r3, r9
 800ee30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ee34:	e6dc      	b.n	800ebf0 <_printf_float+0x1ec>
 800ee36:	f04f 0800 	mov.w	r8, #0
 800ee3a:	f104 0a1a 	add.w	sl, r4, #26
 800ee3e:	e7f2      	b.n	800ee26 <_printf_float+0x422>
 800ee40:	2301      	movs	r3, #1
 800ee42:	4642      	mov	r2, r8
 800ee44:	e7df      	b.n	800ee06 <_printf_float+0x402>
 800ee46:	2301      	movs	r3, #1
 800ee48:	464a      	mov	r2, r9
 800ee4a:	4631      	mov	r1, r6
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	47b8      	blx	r7
 800ee50:	3001      	adds	r0, #1
 800ee52:	f43f ae38 	beq.w	800eac6 <_printf_float+0xc2>
 800ee56:	f108 0801 	add.w	r8, r8, #1
 800ee5a:	68e3      	ldr	r3, [r4, #12]
 800ee5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee5e:	1a5b      	subs	r3, r3, r1
 800ee60:	4543      	cmp	r3, r8
 800ee62:	dcf0      	bgt.n	800ee46 <_printf_float+0x442>
 800ee64:	e6fa      	b.n	800ec5c <_printf_float+0x258>
 800ee66:	f04f 0800 	mov.w	r8, #0
 800ee6a:	f104 0919 	add.w	r9, r4, #25
 800ee6e:	e7f4      	b.n	800ee5a <_printf_float+0x456>

0800ee70 <_printf_common>:
 800ee70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee74:	4616      	mov	r6, r2
 800ee76:	4699      	mov	r9, r3
 800ee78:	688a      	ldr	r2, [r1, #8]
 800ee7a:	690b      	ldr	r3, [r1, #16]
 800ee7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee80:	4293      	cmp	r3, r2
 800ee82:	bfb8      	it	lt
 800ee84:	4613      	movlt	r3, r2
 800ee86:	6033      	str	r3, [r6, #0]
 800ee88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee8c:	4607      	mov	r7, r0
 800ee8e:	460c      	mov	r4, r1
 800ee90:	b10a      	cbz	r2, 800ee96 <_printf_common+0x26>
 800ee92:	3301      	adds	r3, #1
 800ee94:	6033      	str	r3, [r6, #0]
 800ee96:	6823      	ldr	r3, [r4, #0]
 800ee98:	0699      	lsls	r1, r3, #26
 800ee9a:	bf42      	ittt	mi
 800ee9c:	6833      	ldrmi	r3, [r6, #0]
 800ee9e:	3302      	addmi	r3, #2
 800eea0:	6033      	strmi	r3, [r6, #0]
 800eea2:	6825      	ldr	r5, [r4, #0]
 800eea4:	f015 0506 	ands.w	r5, r5, #6
 800eea8:	d106      	bne.n	800eeb8 <_printf_common+0x48>
 800eeaa:	f104 0a19 	add.w	sl, r4, #25
 800eeae:	68e3      	ldr	r3, [r4, #12]
 800eeb0:	6832      	ldr	r2, [r6, #0]
 800eeb2:	1a9b      	subs	r3, r3, r2
 800eeb4:	42ab      	cmp	r3, r5
 800eeb6:	dc26      	bgt.n	800ef06 <_printf_common+0x96>
 800eeb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eebc:	1e13      	subs	r3, r2, #0
 800eebe:	6822      	ldr	r2, [r4, #0]
 800eec0:	bf18      	it	ne
 800eec2:	2301      	movne	r3, #1
 800eec4:	0692      	lsls	r2, r2, #26
 800eec6:	d42b      	bmi.n	800ef20 <_printf_common+0xb0>
 800eec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eecc:	4649      	mov	r1, r9
 800eece:	4638      	mov	r0, r7
 800eed0:	47c0      	blx	r8
 800eed2:	3001      	adds	r0, #1
 800eed4:	d01e      	beq.n	800ef14 <_printf_common+0xa4>
 800eed6:	6823      	ldr	r3, [r4, #0]
 800eed8:	68e5      	ldr	r5, [r4, #12]
 800eeda:	6832      	ldr	r2, [r6, #0]
 800eedc:	f003 0306 	and.w	r3, r3, #6
 800eee0:	2b04      	cmp	r3, #4
 800eee2:	bf08      	it	eq
 800eee4:	1aad      	subeq	r5, r5, r2
 800eee6:	68a3      	ldr	r3, [r4, #8]
 800eee8:	6922      	ldr	r2, [r4, #16]
 800eeea:	bf0c      	ite	eq
 800eeec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eef0:	2500      	movne	r5, #0
 800eef2:	4293      	cmp	r3, r2
 800eef4:	bfc4      	itt	gt
 800eef6:	1a9b      	subgt	r3, r3, r2
 800eef8:	18ed      	addgt	r5, r5, r3
 800eefa:	2600      	movs	r6, #0
 800eefc:	341a      	adds	r4, #26
 800eefe:	42b5      	cmp	r5, r6
 800ef00:	d11a      	bne.n	800ef38 <_printf_common+0xc8>
 800ef02:	2000      	movs	r0, #0
 800ef04:	e008      	b.n	800ef18 <_printf_common+0xa8>
 800ef06:	2301      	movs	r3, #1
 800ef08:	4652      	mov	r2, sl
 800ef0a:	4649      	mov	r1, r9
 800ef0c:	4638      	mov	r0, r7
 800ef0e:	47c0      	blx	r8
 800ef10:	3001      	adds	r0, #1
 800ef12:	d103      	bne.n	800ef1c <_printf_common+0xac>
 800ef14:	f04f 30ff 	mov.w	r0, #4294967295
 800ef18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef1c:	3501      	adds	r5, #1
 800ef1e:	e7c6      	b.n	800eeae <_printf_common+0x3e>
 800ef20:	18e1      	adds	r1, r4, r3
 800ef22:	1c5a      	adds	r2, r3, #1
 800ef24:	2030      	movs	r0, #48	; 0x30
 800ef26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef2a:	4422      	add	r2, r4
 800ef2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef34:	3302      	adds	r3, #2
 800ef36:	e7c7      	b.n	800eec8 <_printf_common+0x58>
 800ef38:	2301      	movs	r3, #1
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	4649      	mov	r1, r9
 800ef3e:	4638      	mov	r0, r7
 800ef40:	47c0      	blx	r8
 800ef42:	3001      	adds	r0, #1
 800ef44:	d0e6      	beq.n	800ef14 <_printf_common+0xa4>
 800ef46:	3601      	adds	r6, #1
 800ef48:	e7d9      	b.n	800eefe <_printf_common+0x8e>
	...

0800ef4c <_printf_i>:
 800ef4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef50:	7e0f      	ldrb	r7, [r1, #24]
 800ef52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef54:	2f78      	cmp	r7, #120	; 0x78
 800ef56:	4691      	mov	r9, r2
 800ef58:	4680      	mov	r8, r0
 800ef5a:	460c      	mov	r4, r1
 800ef5c:	469a      	mov	sl, r3
 800ef5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ef62:	d807      	bhi.n	800ef74 <_printf_i+0x28>
 800ef64:	2f62      	cmp	r7, #98	; 0x62
 800ef66:	d80a      	bhi.n	800ef7e <_printf_i+0x32>
 800ef68:	2f00      	cmp	r7, #0
 800ef6a:	f000 80d8 	beq.w	800f11e <_printf_i+0x1d2>
 800ef6e:	2f58      	cmp	r7, #88	; 0x58
 800ef70:	f000 80a3 	beq.w	800f0ba <_printf_i+0x16e>
 800ef74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef7c:	e03a      	b.n	800eff4 <_printf_i+0xa8>
 800ef7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef82:	2b15      	cmp	r3, #21
 800ef84:	d8f6      	bhi.n	800ef74 <_printf_i+0x28>
 800ef86:	a101      	add	r1, pc, #4	; (adr r1, 800ef8c <_printf_i+0x40>)
 800ef88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef8c:	0800efe5 	.word	0x0800efe5
 800ef90:	0800eff9 	.word	0x0800eff9
 800ef94:	0800ef75 	.word	0x0800ef75
 800ef98:	0800ef75 	.word	0x0800ef75
 800ef9c:	0800ef75 	.word	0x0800ef75
 800efa0:	0800ef75 	.word	0x0800ef75
 800efa4:	0800eff9 	.word	0x0800eff9
 800efa8:	0800ef75 	.word	0x0800ef75
 800efac:	0800ef75 	.word	0x0800ef75
 800efb0:	0800ef75 	.word	0x0800ef75
 800efb4:	0800ef75 	.word	0x0800ef75
 800efb8:	0800f105 	.word	0x0800f105
 800efbc:	0800f029 	.word	0x0800f029
 800efc0:	0800f0e7 	.word	0x0800f0e7
 800efc4:	0800ef75 	.word	0x0800ef75
 800efc8:	0800ef75 	.word	0x0800ef75
 800efcc:	0800f127 	.word	0x0800f127
 800efd0:	0800ef75 	.word	0x0800ef75
 800efd4:	0800f029 	.word	0x0800f029
 800efd8:	0800ef75 	.word	0x0800ef75
 800efdc:	0800ef75 	.word	0x0800ef75
 800efe0:	0800f0ef 	.word	0x0800f0ef
 800efe4:	682b      	ldr	r3, [r5, #0]
 800efe6:	1d1a      	adds	r2, r3, #4
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	602a      	str	r2, [r5, #0]
 800efec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eff4:	2301      	movs	r3, #1
 800eff6:	e0a3      	b.n	800f140 <_printf_i+0x1f4>
 800eff8:	6820      	ldr	r0, [r4, #0]
 800effa:	6829      	ldr	r1, [r5, #0]
 800effc:	0606      	lsls	r6, r0, #24
 800effe:	f101 0304 	add.w	r3, r1, #4
 800f002:	d50a      	bpl.n	800f01a <_printf_i+0xce>
 800f004:	680e      	ldr	r6, [r1, #0]
 800f006:	602b      	str	r3, [r5, #0]
 800f008:	2e00      	cmp	r6, #0
 800f00a:	da03      	bge.n	800f014 <_printf_i+0xc8>
 800f00c:	232d      	movs	r3, #45	; 0x2d
 800f00e:	4276      	negs	r6, r6
 800f010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f014:	485e      	ldr	r0, [pc, #376]	; (800f190 <_printf_i+0x244>)
 800f016:	230a      	movs	r3, #10
 800f018:	e019      	b.n	800f04e <_printf_i+0x102>
 800f01a:	680e      	ldr	r6, [r1, #0]
 800f01c:	602b      	str	r3, [r5, #0]
 800f01e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f022:	bf18      	it	ne
 800f024:	b236      	sxthne	r6, r6
 800f026:	e7ef      	b.n	800f008 <_printf_i+0xbc>
 800f028:	682b      	ldr	r3, [r5, #0]
 800f02a:	6820      	ldr	r0, [r4, #0]
 800f02c:	1d19      	adds	r1, r3, #4
 800f02e:	6029      	str	r1, [r5, #0]
 800f030:	0601      	lsls	r1, r0, #24
 800f032:	d501      	bpl.n	800f038 <_printf_i+0xec>
 800f034:	681e      	ldr	r6, [r3, #0]
 800f036:	e002      	b.n	800f03e <_printf_i+0xf2>
 800f038:	0646      	lsls	r6, r0, #25
 800f03a:	d5fb      	bpl.n	800f034 <_printf_i+0xe8>
 800f03c:	881e      	ldrh	r6, [r3, #0]
 800f03e:	4854      	ldr	r0, [pc, #336]	; (800f190 <_printf_i+0x244>)
 800f040:	2f6f      	cmp	r7, #111	; 0x6f
 800f042:	bf0c      	ite	eq
 800f044:	2308      	moveq	r3, #8
 800f046:	230a      	movne	r3, #10
 800f048:	2100      	movs	r1, #0
 800f04a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f04e:	6865      	ldr	r5, [r4, #4]
 800f050:	60a5      	str	r5, [r4, #8]
 800f052:	2d00      	cmp	r5, #0
 800f054:	bfa2      	ittt	ge
 800f056:	6821      	ldrge	r1, [r4, #0]
 800f058:	f021 0104 	bicge.w	r1, r1, #4
 800f05c:	6021      	strge	r1, [r4, #0]
 800f05e:	b90e      	cbnz	r6, 800f064 <_printf_i+0x118>
 800f060:	2d00      	cmp	r5, #0
 800f062:	d04d      	beq.n	800f100 <_printf_i+0x1b4>
 800f064:	4615      	mov	r5, r2
 800f066:	fbb6 f1f3 	udiv	r1, r6, r3
 800f06a:	fb03 6711 	mls	r7, r3, r1, r6
 800f06e:	5dc7      	ldrb	r7, [r0, r7]
 800f070:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f074:	4637      	mov	r7, r6
 800f076:	42bb      	cmp	r3, r7
 800f078:	460e      	mov	r6, r1
 800f07a:	d9f4      	bls.n	800f066 <_printf_i+0x11a>
 800f07c:	2b08      	cmp	r3, #8
 800f07e:	d10b      	bne.n	800f098 <_printf_i+0x14c>
 800f080:	6823      	ldr	r3, [r4, #0]
 800f082:	07de      	lsls	r6, r3, #31
 800f084:	d508      	bpl.n	800f098 <_printf_i+0x14c>
 800f086:	6923      	ldr	r3, [r4, #16]
 800f088:	6861      	ldr	r1, [r4, #4]
 800f08a:	4299      	cmp	r1, r3
 800f08c:	bfde      	ittt	le
 800f08e:	2330      	movle	r3, #48	; 0x30
 800f090:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f094:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f098:	1b52      	subs	r2, r2, r5
 800f09a:	6122      	str	r2, [r4, #16]
 800f09c:	f8cd a000 	str.w	sl, [sp]
 800f0a0:	464b      	mov	r3, r9
 800f0a2:	aa03      	add	r2, sp, #12
 800f0a4:	4621      	mov	r1, r4
 800f0a6:	4640      	mov	r0, r8
 800f0a8:	f7ff fee2 	bl	800ee70 <_printf_common>
 800f0ac:	3001      	adds	r0, #1
 800f0ae:	d14c      	bne.n	800f14a <_printf_i+0x1fe>
 800f0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b4:	b004      	add	sp, #16
 800f0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ba:	4835      	ldr	r0, [pc, #212]	; (800f190 <_printf_i+0x244>)
 800f0bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f0c0:	6829      	ldr	r1, [r5, #0]
 800f0c2:	6823      	ldr	r3, [r4, #0]
 800f0c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f0c8:	6029      	str	r1, [r5, #0]
 800f0ca:	061d      	lsls	r5, r3, #24
 800f0cc:	d514      	bpl.n	800f0f8 <_printf_i+0x1ac>
 800f0ce:	07df      	lsls	r7, r3, #31
 800f0d0:	bf44      	itt	mi
 800f0d2:	f043 0320 	orrmi.w	r3, r3, #32
 800f0d6:	6023      	strmi	r3, [r4, #0]
 800f0d8:	b91e      	cbnz	r6, 800f0e2 <_printf_i+0x196>
 800f0da:	6823      	ldr	r3, [r4, #0]
 800f0dc:	f023 0320 	bic.w	r3, r3, #32
 800f0e0:	6023      	str	r3, [r4, #0]
 800f0e2:	2310      	movs	r3, #16
 800f0e4:	e7b0      	b.n	800f048 <_printf_i+0xfc>
 800f0e6:	6823      	ldr	r3, [r4, #0]
 800f0e8:	f043 0320 	orr.w	r3, r3, #32
 800f0ec:	6023      	str	r3, [r4, #0]
 800f0ee:	2378      	movs	r3, #120	; 0x78
 800f0f0:	4828      	ldr	r0, [pc, #160]	; (800f194 <_printf_i+0x248>)
 800f0f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0f6:	e7e3      	b.n	800f0c0 <_printf_i+0x174>
 800f0f8:	0659      	lsls	r1, r3, #25
 800f0fa:	bf48      	it	mi
 800f0fc:	b2b6      	uxthmi	r6, r6
 800f0fe:	e7e6      	b.n	800f0ce <_printf_i+0x182>
 800f100:	4615      	mov	r5, r2
 800f102:	e7bb      	b.n	800f07c <_printf_i+0x130>
 800f104:	682b      	ldr	r3, [r5, #0]
 800f106:	6826      	ldr	r6, [r4, #0]
 800f108:	6961      	ldr	r1, [r4, #20]
 800f10a:	1d18      	adds	r0, r3, #4
 800f10c:	6028      	str	r0, [r5, #0]
 800f10e:	0635      	lsls	r5, r6, #24
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	d501      	bpl.n	800f118 <_printf_i+0x1cc>
 800f114:	6019      	str	r1, [r3, #0]
 800f116:	e002      	b.n	800f11e <_printf_i+0x1d2>
 800f118:	0670      	lsls	r0, r6, #25
 800f11a:	d5fb      	bpl.n	800f114 <_printf_i+0x1c8>
 800f11c:	8019      	strh	r1, [r3, #0]
 800f11e:	2300      	movs	r3, #0
 800f120:	6123      	str	r3, [r4, #16]
 800f122:	4615      	mov	r5, r2
 800f124:	e7ba      	b.n	800f09c <_printf_i+0x150>
 800f126:	682b      	ldr	r3, [r5, #0]
 800f128:	1d1a      	adds	r2, r3, #4
 800f12a:	602a      	str	r2, [r5, #0]
 800f12c:	681d      	ldr	r5, [r3, #0]
 800f12e:	6862      	ldr	r2, [r4, #4]
 800f130:	2100      	movs	r1, #0
 800f132:	4628      	mov	r0, r5
 800f134:	f7f1 f874 	bl	8000220 <memchr>
 800f138:	b108      	cbz	r0, 800f13e <_printf_i+0x1f2>
 800f13a:	1b40      	subs	r0, r0, r5
 800f13c:	6060      	str	r0, [r4, #4]
 800f13e:	6863      	ldr	r3, [r4, #4]
 800f140:	6123      	str	r3, [r4, #16]
 800f142:	2300      	movs	r3, #0
 800f144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f148:	e7a8      	b.n	800f09c <_printf_i+0x150>
 800f14a:	6923      	ldr	r3, [r4, #16]
 800f14c:	462a      	mov	r2, r5
 800f14e:	4649      	mov	r1, r9
 800f150:	4640      	mov	r0, r8
 800f152:	47d0      	blx	sl
 800f154:	3001      	adds	r0, #1
 800f156:	d0ab      	beq.n	800f0b0 <_printf_i+0x164>
 800f158:	6823      	ldr	r3, [r4, #0]
 800f15a:	079b      	lsls	r3, r3, #30
 800f15c:	d413      	bmi.n	800f186 <_printf_i+0x23a>
 800f15e:	68e0      	ldr	r0, [r4, #12]
 800f160:	9b03      	ldr	r3, [sp, #12]
 800f162:	4298      	cmp	r0, r3
 800f164:	bfb8      	it	lt
 800f166:	4618      	movlt	r0, r3
 800f168:	e7a4      	b.n	800f0b4 <_printf_i+0x168>
 800f16a:	2301      	movs	r3, #1
 800f16c:	4632      	mov	r2, r6
 800f16e:	4649      	mov	r1, r9
 800f170:	4640      	mov	r0, r8
 800f172:	47d0      	blx	sl
 800f174:	3001      	adds	r0, #1
 800f176:	d09b      	beq.n	800f0b0 <_printf_i+0x164>
 800f178:	3501      	adds	r5, #1
 800f17a:	68e3      	ldr	r3, [r4, #12]
 800f17c:	9903      	ldr	r1, [sp, #12]
 800f17e:	1a5b      	subs	r3, r3, r1
 800f180:	42ab      	cmp	r3, r5
 800f182:	dcf2      	bgt.n	800f16a <_printf_i+0x21e>
 800f184:	e7eb      	b.n	800f15e <_printf_i+0x212>
 800f186:	2500      	movs	r5, #0
 800f188:	f104 0619 	add.w	r6, r4, #25
 800f18c:	e7f5      	b.n	800f17a <_printf_i+0x22e>
 800f18e:	bf00      	nop
 800f190:	08014938 	.word	0x08014938
 800f194:	08014949 	.word	0x08014949

0800f198 <_scanf_float>:
 800f198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f19c:	b087      	sub	sp, #28
 800f19e:	4617      	mov	r7, r2
 800f1a0:	9303      	str	r3, [sp, #12]
 800f1a2:	688b      	ldr	r3, [r1, #8]
 800f1a4:	1e5a      	subs	r2, r3, #1
 800f1a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f1aa:	bf83      	ittte	hi
 800f1ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f1b0:	195b      	addhi	r3, r3, r5
 800f1b2:	9302      	strhi	r3, [sp, #8]
 800f1b4:	2300      	movls	r3, #0
 800f1b6:	bf86      	itte	hi
 800f1b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f1bc:	608b      	strhi	r3, [r1, #8]
 800f1be:	9302      	strls	r3, [sp, #8]
 800f1c0:	680b      	ldr	r3, [r1, #0]
 800f1c2:	468b      	mov	fp, r1
 800f1c4:	2500      	movs	r5, #0
 800f1c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f1ca:	f84b 3b1c 	str.w	r3, [fp], #28
 800f1ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f1d2:	4680      	mov	r8, r0
 800f1d4:	460c      	mov	r4, r1
 800f1d6:	465e      	mov	r6, fp
 800f1d8:	46aa      	mov	sl, r5
 800f1da:	46a9      	mov	r9, r5
 800f1dc:	9501      	str	r5, [sp, #4]
 800f1de:	68a2      	ldr	r2, [r4, #8]
 800f1e0:	b152      	cbz	r2, 800f1f8 <_scanf_float+0x60>
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	2b4e      	cmp	r3, #78	; 0x4e
 800f1e8:	d864      	bhi.n	800f2b4 <_scanf_float+0x11c>
 800f1ea:	2b40      	cmp	r3, #64	; 0x40
 800f1ec:	d83c      	bhi.n	800f268 <_scanf_float+0xd0>
 800f1ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f1f2:	b2c8      	uxtb	r0, r1
 800f1f4:	280e      	cmp	r0, #14
 800f1f6:	d93a      	bls.n	800f26e <_scanf_float+0xd6>
 800f1f8:	f1b9 0f00 	cmp.w	r9, #0
 800f1fc:	d003      	beq.n	800f206 <_scanf_float+0x6e>
 800f1fe:	6823      	ldr	r3, [r4, #0]
 800f200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f20a:	f1ba 0f01 	cmp.w	sl, #1
 800f20e:	f200 8113 	bhi.w	800f438 <_scanf_float+0x2a0>
 800f212:	455e      	cmp	r6, fp
 800f214:	f200 8105 	bhi.w	800f422 <_scanf_float+0x28a>
 800f218:	2501      	movs	r5, #1
 800f21a:	4628      	mov	r0, r5
 800f21c:	b007      	add	sp, #28
 800f21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f222:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f226:	2a0d      	cmp	r2, #13
 800f228:	d8e6      	bhi.n	800f1f8 <_scanf_float+0x60>
 800f22a:	a101      	add	r1, pc, #4	; (adr r1, 800f230 <_scanf_float+0x98>)
 800f22c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f230:	0800f36f 	.word	0x0800f36f
 800f234:	0800f1f9 	.word	0x0800f1f9
 800f238:	0800f1f9 	.word	0x0800f1f9
 800f23c:	0800f1f9 	.word	0x0800f1f9
 800f240:	0800f3cf 	.word	0x0800f3cf
 800f244:	0800f3a7 	.word	0x0800f3a7
 800f248:	0800f1f9 	.word	0x0800f1f9
 800f24c:	0800f1f9 	.word	0x0800f1f9
 800f250:	0800f37d 	.word	0x0800f37d
 800f254:	0800f1f9 	.word	0x0800f1f9
 800f258:	0800f1f9 	.word	0x0800f1f9
 800f25c:	0800f1f9 	.word	0x0800f1f9
 800f260:	0800f1f9 	.word	0x0800f1f9
 800f264:	0800f335 	.word	0x0800f335
 800f268:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f26c:	e7db      	b.n	800f226 <_scanf_float+0x8e>
 800f26e:	290e      	cmp	r1, #14
 800f270:	d8c2      	bhi.n	800f1f8 <_scanf_float+0x60>
 800f272:	a001      	add	r0, pc, #4	; (adr r0, 800f278 <_scanf_float+0xe0>)
 800f274:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f278:	0800f327 	.word	0x0800f327
 800f27c:	0800f1f9 	.word	0x0800f1f9
 800f280:	0800f327 	.word	0x0800f327
 800f284:	0800f3bb 	.word	0x0800f3bb
 800f288:	0800f1f9 	.word	0x0800f1f9
 800f28c:	0800f2d5 	.word	0x0800f2d5
 800f290:	0800f311 	.word	0x0800f311
 800f294:	0800f311 	.word	0x0800f311
 800f298:	0800f311 	.word	0x0800f311
 800f29c:	0800f311 	.word	0x0800f311
 800f2a0:	0800f311 	.word	0x0800f311
 800f2a4:	0800f311 	.word	0x0800f311
 800f2a8:	0800f311 	.word	0x0800f311
 800f2ac:	0800f311 	.word	0x0800f311
 800f2b0:	0800f311 	.word	0x0800f311
 800f2b4:	2b6e      	cmp	r3, #110	; 0x6e
 800f2b6:	d809      	bhi.n	800f2cc <_scanf_float+0x134>
 800f2b8:	2b60      	cmp	r3, #96	; 0x60
 800f2ba:	d8b2      	bhi.n	800f222 <_scanf_float+0x8a>
 800f2bc:	2b54      	cmp	r3, #84	; 0x54
 800f2be:	d077      	beq.n	800f3b0 <_scanf_float+0x218>
 800f2c0:	2b59      	cmp	r3, #89	; 0x59
 800f2c2:	d199      	bne.n	800f1f8 <_scanf_float+0x60>
 800f2c4:	2d07      	cmp	r5, #7
 800f2c6:	d197      	bne.n	800f1f8 <_scanf_float+0x60>
 800f2c8:	2508      	movs	r5, #8
 800f2ca:	e029      	b.n	800f320 <_scanf_float+0x188>
 800f2cc:	2b74      	cmp	r3, #116	; 0x74
 800f2ce:	d06f      	beq.n	800f3b0 <_scanf_float+0x218>
 800f2d0:	2b79      	cmp	r3, #121	; 0x79
 800f2d2:	e7f6      	b.n	800f2c2 <_scanf_float+0x12a>
 800f2d4:	6821      	ldr	r1, [r4, #0]
 800f2d6:	05c8      	lsls	r0, r1, #23
 800f2d8:	d51a      	bpl.n	800f310 <_scanf_float+0x178>
 800f2da:	9b02      	ldr	r3, [sp, #8]
 800f2dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f2e0:	6021      	str	r1, [r4, #0]
 800f2e2:	f109 0901 	add.w	r9, r9, #1
 800f2e6:	b11b      	cbz	r3, 800f2f0 <_scanf_float+0x158>
 800f2e8:	3b01      	subs	r3, #1
 800f2ea:	3201      	adds	r2, #1
 800f2ec:	9302      	str	r3, [sp, #8]
 800f2ee:	60a2      	str	r2, [r4, #8]
 800f2f0:	68a3      	ldr	r3, [r4, #8]
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	60a3      	str	r3, [r4, #8]
 800f2f6:	6923      	ldr	r3, [r4, #16]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	6123      	str	r3, [r4, #16]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	3b01      	subs	r3, #1
 800f300:	2b00      	cmp	r3, #0
 800f302:	607b      	str	r3, [r7, #4]
 800f304:	f340 8084 	ble.w	800f410 <_scanf_float+0x278>
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	3301      	adds	r3, #1
 800f30c:	603b      	str	r3, [r7, #0]
 800f30e:	e766      	b.n	800f1de <_scanf_float+0x46>
 800f310:	eb1a 0f05 	cmn.w	sl, r5
 800f314:	f47f af70 	bne.w	800f1f8 <_scanf_float+0x60>
 800f318:	6822      	ldr	r2, [r4, #0]
 800f31a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f31e:	6022      	str	r2, [r4, #0]
 800f320:	f806 3b01 	strb.w	r3, [r6], #1
 800f324:	e7e4      	b.n	800f2f0 <_scanf_float+0x158>
 800f326:	6822      	ldr	r2, [r4, #0]
 800f328:	0610      	lsls	r0, r2, #24
 800f32a:	f57f af65 	bpl.w	800f1f8 <_scanf_float+0x60>
 800f32e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f332:	e7f4      	b.n	800f31e <_scanf_float+0x186>
 800f334:	f1ba 0f00 	cmp.w	sl, #0
 800f338:	d10e      	bne.n	800f358 <_scanf_float+0x1c0>
 800f33a:	f1b9 0f00 	cmp.w	r9, #0
 800f33e:	d10e      	bne.n	800f35e <_scanf_float+0x1c6>
 800f340:	6822      	ldr	r2, [r4, #0]
 800f342:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f346:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f34a:	d108      	bne.n	800f35e <_scanf_float+0x1c6>
 800f34c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f350:	6022      	str	r2, [r4, #0]
 800f352:	f04f 0a01 	mov.w	sl, #1
 800f356:	e7e3      	b.n	800f320 <_scanf_float+0x188>
 800f358:	f1ba 0f02 	cmp.w	sl, #2
 800f35c:	d055      	beq.n	800f40a <_scanf_float+0x272>
 800f35e:	2d01      	cmp	r5, #1
 800f360:	d002      	beq.n	800f368 <_scanf_float+0x1d0>
 800f362:	2d04      	cmp	r5, #4
 800f364:	f47f af48 	bne.w	800f1f8 <_scanf_float+0x60>
 800f368:	3501      	adds	r5, #1
 800f36a:	b2ed      	uxtb	r5, r5
 800f36c:	e7d8      	b.n	800f320 <_scanf_float+0x188>
 800f36e:	f1ba 0f01 	cmp.w	sl, #1
 800f372:	f47f af41 	bne.w	800f1f8 <_scanf_float+0x60>
 800f376:	f04f 0a02 	mov.w	sl, #2
 800f37a:	e7d1      	b.n	800f320 <_scanf_float+0x188>
 800f37c:	b97d      	cbnz	r5, 800f39e <_scanf_float+0x206>
 800f37e:	f1b9 0f00 	cmp.w	r9, #0
 800f382:	f47f af3c 	bne.w	800f1fe <_scanf_float+0x66>
 800f386:	6822      	ldr	r2, [r4, #0]
 800f388:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f38c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f390:	f47f af39 	bne.w	800f206 <_scanf_float+0x6e>
 800f394:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f398:	6022      	str	r2, [r4, #0]
 800f39a:	2501      	movs	r5, #1
 800f39c:	e7c0      	b.n	800f320 <_scanf_float+0x188>
 800f39e:	2d03      	cmp	r5, #3
 800f3a0:	d0e2      	beq.n	800f368 <_scanf_float+0x1d0>
 800f3a2:	2d05      	cmp	r5, #5
 800f3a4:	e7de      	b.n	800f364 <_scanf_float+0x1cc>
 800f3a6:	2d02      	cmp	r5, #2
 800f3a8:	f47f af26 	bne.w	800f1f8 <_scanf_float+0x60>
 800f3ac:	2503      	movs	r5, #3
 800f3ae:	e7b7      	b.n	800f320 <_scanf_float+0x188>
 800f3b0:	2d06      	cmp	r5, #6
 800f3b2:	f47f af21 	bne.w	800f1f8 <_scanf_float+0x60>
 800f3b6:	2507      	movs	r5, #7
 800f3b8:	e7b2      	b.n	800f320 <_scanf_float+0x188>
 800f3ba:	6822      	ldr	r2, [r4, #0]
 800f3bc:	0591      	lsls	r1, r2, #22
 800f3be:	f57f af1b 	bpl.w	800f1f8 <_scanf_float+0x60>
 800f3c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f3c6:	6022      	str	r2, [r4, #0]
 800f3c8:	f8cd 9004 	str.w	r9, [sp, #4]
 800f3cc:	e7a8      	b.n	800f320 <_scanf_float+0x188>
 800f3ce:	6822      	ldr	r2, [r4, #0]
 800f3d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f3d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f3d8:	d006      	beq.n	800f3e8 <_scanf_float+0x250>
 800f3da:	0550      	lsls	r0, r2, #21
 800f3dc:	f57f af0c 	bpl.w	800f1f8 <_scanf_float+0x60>
 800f3e0:	f1b9 0f00 	cmp.w	r9, #0
 800f3e4:	f43f af0f 	beq.w	800f206 <_scanf_float+0x6e>
 800f3e8:	0591      	lsls	r1, r2, #22
 800f3ea:	bf58      	it	pl
 800f3ec:	9901      	ldrpl	r1, [sp, #4]
 800f3ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f3f2:	bf58      	it	pl
 800f3f4:	eba9 0101 	subpl.w	r1, r9, r1
 800f3f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f3fc:	bf58      	it	pl
 800f3fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f402:	6022      	str	r2, [r4, #0]
 800f404:	f04f 0900 	mov.w	r9, #0
 800f408:	e78a      	b.n	800f320 <_scanf_float+0x188>
 800f40a:	f04f 0a03 	mov.w	sl, #3
 800f40e:	e787      	b.n	800f320 <_scanf_float+0x188>
 800f410:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f414:	4639      	mov	r1, r7
 800f416:	4640      	mov	r0, r8
 800f418:	4798      	blx	r3
 800f41a:	2800      	cmp	r0, #0
 800f41c:	f43f aedf 	beq.w	800f1de <_scanf_float+0x46>
 800f420:	e6ea      	b.n	800f1f8 <_scanf_float+0x60>
 800f422:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f426:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f42a:	463a      	mov	r2, r7
 800f42c:	4640      	mov	r0, r8
 800f42e:	4798      	blx	r3
 800f430:	6923      	ldr	r3, [r4, #16]
 800f432:	3b01      	subs	r3, #1
 800f434:	6123      	str	r3, [r4, #16]
 800f436:	e6ec      	b.n	800f212 <_scanf_float+0x7a>
 800f438:	1e6b      	subs	r3, r5, #1
 800f43a:	2b06      	cmp	r3, #6
 800f43c:	d825      	bhi.n	800f48a <_scanf_float+0x2f2>
 800f43e:	2d02      	cmp	r5, #2
 800f440:	d836      	bhi.n	800f4b0 <_scanf_float+0x318>
 800f442:	455e      	cmp	r6, fp
 800f444:	f67f aee8 	bls.w	800f218 <_scanf_float+0x80>
 800f448:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f44c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f450:	463a      	mov	r2, r7
 800f452:	4640      	mov	r0, r8
 800f454:	4798      	blx	r3
 800f456:	6923      	ldr	r3, [r4, #16]
 800f458:	3b01      	subs	r3, #1
 800f45a:	6123      	str	r3, [r4, #16]
 800f45c:	e7f1      	b.n	800f442 <_scanf_float+0x2aa>
 800f45e:	9802      	ldr	r0, [sp, #8]
 800f460:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f464:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f468:	9002      	str	r0, [sp, #8]
 800f46a:	463a      	mov	r2, r7
 800f46c:	4640      	mov	r0, r8
 800f46e:	4798      	blx	r3
 800f470:	6923      	ldr	r3, [r4, #16]
 800f472:	3b01      	subs	r3, #1
 800f474:	6123      	str	r3, [r4, #16]
 800f476:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f47a:	fa5f fa8a 	uxtb.w	sl, sl
 800f47e:	f1ba 0f02 	cmp.w	sl, #2
 800f482:	d1ec      	bne.n	800f45e <_scanf_float+0x2c6>
 800f484:	3d03      	subs	r5, #3
 800f486:	b2ed      	uxtb	r5, r5
 800f488:	1b76      	subs	r6, r6, r5
 800f48a:	6823      	ldr	r3, [r4, #0]
 800f48c:	05da      	lsls	r2, r3, #23
 800f48e:	d52f      	bpl.n	800f4f0 <_scanf_float+0x358>
 800f490:	055b      	lsls	r3, r3, #21
 800f492:	d510      	bpl.n	800f4b6 <_scanf_float+0x31e>
 800f494:	455e      	cmp	r6, fp
 800f496:	f67f aebf 	bls.w	800f218 <_scanf_float+0x80>
 800f49a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f49e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f4a2:	463a      	mov	r2, r7
 800f4a4:	4640      	mov	r0, r8
 800f4a6:	4798      	blx	r3
 800f4a8:	6923      	ldr	r3, [r4, #16]
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	6123      	str	r3, [r4, #16]
 800f4ae:	e7f1      	b.n	800f494 <_scanf_float+0x2fc>
 800f4b0:	46aa      	mov	sl, r5
 800f4b2:	9602      	str	r6, [sp, #8]
 800f4b4:	e7df      	b.n	800f476 <_scanf_float+0x2de>
 800f4b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f4ba:	6923      	ldr	r3, [r4, #16]
 800f4bc:	2965      	cmp	r1, #101	; 0x65
 800f4be:	f103 33ff 	add.w	r3, r3, #4294967295
 800f4c2:	f106 35ff 	add.w	r5, r6, #4294967295
 800f4c6:	6123      	str	r3, [r4, #16]
 800f4c8:	d00c      	beq.n	800f4e4 <_scanf_float+0x34c>
 800f4ca:	2945      	cmp	r1, #69	; 0x45
 800f4cc:	d00a      	beq.n	800f4e4 <_scanf_float+0x34c>
 800f4ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4d2:	463a      	mov	r2, r7
 800f4d4:	4640      	mov	r0, r8
 800f4d6:	4798      	blx	r3
 800f4d8:	6923      	ldr	r3, [r4, #16]
 800f4da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f4de:	3b01      	subs	r3, #1
 800f4e0:	1eb5      	subs	r5, r6, #2
 800f4e2:	6123      	str	r3, [r4, #16]
 800f4e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4e8:	463a      	mov	r2, r7
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	4798      	blx	r3
 800f4ee:	462e      	mov	r6, r5
 800f4f0:	6825      	ldr	r5, [r4, #0]
 800f4f2:	f015 0510 	ands.w	r5, r5, #16
 800f4f6:	d159      	bne.n	800f5ac <_scanf_float+0x414>
 800f4f8:	7035      	strb	r5, [r6, #0]
 800f4fa:	6823      	ldr	r3, [r4, #0]
 800f4fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f504:	d11b      	bne.n	800f53e <_scanf_float+0x3a6>
 800f506:	9b01      	ldr	r3, [sp, #4]
 800f508:	454b      	cmp	r3, r9
 800f50a:	eba3 0209 	sub.w	r2, r3, r9
 800f50e:	d123      	bne.n	800f558 <_scanf_float+0x3c0>
 800f510:	2200      	movs	r2, #0
 800f512:	4659      	mov	r1, fp
 800f514:	4640      	mov	r0, r8
 800f516:	f000 ffe1 	bl	80104dc <_strtod_r>
 800f51a:	6822      	ldr	r2, [r4, #0]
 800f51c:	9b03      	ldr	r3, [sp, #12]
 800f51e:	f012 0f02 	tst.w	r2, #2
 800f522:	ec57 6b10 	vmov	r6, r7, d0
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	d021      	beq.n	800f56e <_scanf_float+0x3d6>
 800f52a:	9903      	ldr	r1, [sp, #12]
 800f52c:	1d1a      	adds	r2, r3, #4
 800f52e:	600a      	str	r2, [r1, #0]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	e9c3 6700 	strd	r6, r7, [r3]
 800f536:	68e3      	ldr	r3, [r4, #12]
 800f538:	3301      	adds	r3, #1
 800f53a:	60e3      	str	r3, [r4, #12]
 800f53c:	e66d      	b.n	800f21a <_scanf_float+0x82>
 800f53e:	9b04      	ldr	r3, [sp, #16]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d0e5      	beq.n	800f510 <_scanf_float+0x378>
 800f544:	9905      	ldr	r1, [sp, #20]
 800f546:	230a      	movs	r3, #10
 800f548:	462a      	mov	r2, r5
 800f54a:	3101      	adds	r1, #1
 800f54c:	4640      	mov	r0, r8
 800f54e:	f001 f84d 	bl	80105ec <_strtol_r>
 800f552:	9b04      	ldr	r3, [sp, #16]
 800f554:	9e05      	ldr	r6, [sp, #20]
 800f556:	1ac2      	subs	r2, r0, r3
 800f558:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f55c:	429e      	cmp	r6, r3
 800f55e:	bf28      	it	cs
 800f560:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f564:	4912      	ldr	r1, [pc, #72]	; (800f5b0 <_scanf_float+0x418>)
 800f566:	4630      	mov	r0, r6
 800f568:	f000 f8ee 	bl	800f748 <siprintf>
 800f56c:	e7d0      	b.n	800f510 <_scanf_float+0x378>
 800f56e:	9903      	ldr	r1, [sp, #12]
 800f570:	f012 0f04 	tst.w	r2, #4
 800f574:	f103 0204 	add.w	r2, r3, #4
 800f578:	600a      	str	r2, [r1, #0]
 800f57a:	d1d9      	bne.n	800f530 <_scanf_float+0x398>
 800f57c:	f8d3 8000 	ldr.w	r8, [r3]
 800f580:	ee10 2a10 	vmov	r2, s0
 800f584:	ee10 0a10 	vmov	r0, s0
 800f588:	463b      	mov	r3, r7
 800f58a:	4639      	mov	r1, r7
 800f58c:	f7f1 faee 	bl	8000b6c <__aeabi_dcmpun>
 800f590:	b128      	cbz	r0, 800f59e <_scanf_float+0x406>
 800f592:	4808      	ldr	r0, [pc, #32]	; (800f5b4 <_scanf_float+0x41c>)
 800f594:	f000 f89e 	bl	800f6d4 <nanf>
 800f598:	ed88 0a00 	vstr	s0, [r8]
 800f59c:	e7cb      	b.n	800f536 <_scanf_float+0x39e>
 800f59e:	4630      	mov	r0, r6
 800f5a0:	4639      	mov	r1, r7
 800f5a2:	f7f1 fb41 	bl	8000c28 <__aeabi_d2f>
 800f5a6:	f8c8 0000 	str.w	r0, [r8]
 800f5aa:	e7c4      	b.n	800f536 <_scanf_float+0x39e>
 800f5ac:	2500      	movs	r5, #0
 800f5ae:	e634      	b.n	800f21a <_scanf_float+0x82>
 800f5b0:	0801495a 	.word	0x0801495a
 800f5b4:	08014cdb 	.word	0x08014cdb

0800f5b8 <iprintf>:
 800f5b8:	b40f      	push	{r0, r1, r2, r3}
 800f5ba:	4b0a      	ldr	r3, [pc, #40]	; (800f5e4 <iprintf+0x2c>)
 800f5bc:	b513      	push	{r0, r1, r4, lr}
 800f5be:	681c      	ldr	r4, [r3, #0]
 800f5c0:	b124      	cbz	r4, 800f5cc <iprintf+0x14>
 800f5c2:	69a3      	ldr	r3, [r4, #24]
 800f5c4:	b913      	cbnz	r3, 800f5cc <iprintf+0x14>
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f002 f88a 	bl	80116e0 <__sinit>
 800f5cc:	ab05      	add	r3, sp, #20
 800f5ce:	9a04      	ldr	r2, [sp, #16]
 800f5d0:	68a1      	ldr	r1, [r4, #8]
 800f5d2:	9301      	str	r3, [sp, #4]
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	f003 fe39 	bl	801324c <_vfiprintf_r>
 800f5da:	b002      	add	sp, #8
 800f5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5e0:	b004      	add	sp, #16
 800f5e2:	4770      	bx	lr
 800f5e4:	20000110 	.word	0x20000110

0800f5e8 <_puts_r>:
 800f5e8:	b570      	push	{r4, r5, r6, lr}
 800f5ea:	460e      	mov	r6, r1
 800f5ec:	4605      	mov	r5, r0
 800f5ee:	b118      	cbz	r0, 800f5f8 <_puts_r+0x10>
 800f5f0:	6983      	ldr	r3, [r0, #24]
 800f5f2:	b90b      	cbnz	r3, 800f5f8 <_puts_r+0x10>
 800f5f4:	f002 f874 	bl	80116e0 <__sinit>
 800f5f8:	69ab      	ldr	r3, [r5, #24]
 800f5fa:	68ac      	ldr	r4, [r5, #8]
 800f5fc:	b913      	cbnz	r3, 800f604 <_puts_r+0x1c>
 800f5fe:	4628      	mov	r0, r5
 800f600:	f002 f86e 	bl	80116e0 <__sinit>
 800f604:	4b2c      	ldr	r3, [pc, #176]	; (800f6b8 <_puts_r+0xd0>)
 800f606:	429c      	cmp	r4, r3
 800f608:	d120      	bne.n	800f64c <_puts_r+0x64>
 800f60a:	686c      	ldr	r4, [r5, #4]
 800f60c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f60e:	07db      	lsls	r3, r3, #31
 800f610:	d405      	bmi.n	800f61e <_puts_r+0x36>
 800f612:	89a3      	ldrh	r3, [r4, #12]
 800f614:	0598      	lsls	r0, r3, #22
 800f616:	d402      	bmi.n	800f61e <_puts_r+0x36>
 800f618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f61a:	f002 fc72 	bl	8011f02 <__retarget_lock_acquire_recursive>
 800f61e:	89a3      	ldrh	r3, [r4, #12]
 800f620:	0719      	lsls	r1, r3, #28
 800f622:	d51d      	bpl.n	800f660 <_puts_r+0x78>
 800f624:	6923      	ldr	r3, [r4, #16]
 800f626:	b1db      	cbz	r3, 800f660 <_puts_r+0x78>
 800f628:	3e01      	subs	r6, #1
 800f62a:	68a3      	ldr	r3, [r4, #8]
 800f62c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f630:	3b01      	subs	r3, #1
 800f632:	60a3      	str	r3, [r4, #8]
 800f634:	bb39      	cbnz	r1, 800f686 <_puts_r+0x9e>
 800f636:	2b00      	cmp	r3, #0
 800f638:	da38      	bge.n	800f6ac <_puts_r+0xc4>
 800f63a:	4622      	mov	r2, r4
 800f63c:	210a      	movs	r1, #10
 800f63e:	4628      	mov	r0, r5
 800f640:	f000 ffd6 	bl	80105f0 <__swbuf_r>
 800f644:	3001      	adds	r0, #1
 800f646:	d011      	beq.n	800f66c <_puts_r+0x84>
 800f648:	250a      	movs	r5, #10
 800f64a:	e011      	b.n	800f670 <_puts_r+0x88>
 800f64c:	4b1b      	ldr	r3, [pc, #108]	; (800f6bc <_puts_r+0xd4>)
 800f64e:	429c      	cmp	r4, r3
 800f650:	d101      	bne.n	800f656 <_puts_r+0x6e>
 800f652:	68ac      	ldr	r4, [r5, #8]
 800f654:	e7da      	b.n	800f60c <_puts_r+0x24>
 800f656:	4b1a      	ldr	r3, [pc, #104]	; (800f6c0 <_puts_r+0xd8>)
 800f658:	429c      	cmp	r4, r3
 800f65a:	bf08      	it	eq
 800f65c:	68ec      	ldreq	r4, [r5, #12]
 800f65e:	e7d5      	b.n	800f60c <_puts_r+0x24>
 800f660:	4621      	mov	r1, r4
 800f662:	4628      	mov	r0, r5
 800f664:	f001 f828 	bl	80106b8 <__swsetup_r>
 800f668:	2800      	cmp	r0, #0
 800f66a:	d0dd      	beq.n	800f628 <_puts_r+0x40>
 800f66c:	f04f 35ff 	mov.w	r5, #4294967295
 800f670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f672:	07da      	lsls	r2, r3, #31
 800f674:	d405      	bmi.n	800f682 <_puts_r+0x9a>
 800f676:	89a3      	ldrh	r3, [r4, #12]
 800f678:	059b      	lsls	r3, r3, #22
 800f67a:	d402      	bmi.n	800f682 <_puts_r+0x9a>
 800f67c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f67e:	f002 fc41 	bl	8011f04 <__retarget_lock_release_recursive>
 800f682:	4628      	mov	r0, r5
 800f684:	bd70      	pop	{r4, r5, r6, pc}
 800f686:	2b00      	cmp	r3, #0
 800f688:	da04      	bge.n	800f694 <_puts_r+0xac>
 800f68a:	69a2      	ldr	r2, [r4, #24]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	dc06      	bgt.n	800f69e <_puts_r+0xb6>
 800f690:	290a      	cmp	r1, #10
 800f692:	d004      	beq.n	800f69e <_puts_r+0xb6>
 800f694:	6823      	ldr	r3, [r4, #0]
 800f696:	1c5a      	adds	r2, r3, #1
 800f698:	6022      	str	r2, [r4, #0]
 800f69a:	7019      	strb	r1, [r3, #0]
 800f69c:	e7c5      	b.n	800f62a <_puts_r+0x42>
 800f69e:	4622      	mov	r2, r4
 800f6a0:	4628      	mov	r0, r5
 800f6a2:	f000 ffa5 	bl	80105f0 <__swbuf_r>
 800f6a6:	3001      	adds	r0, #1
 800f6a8:	d1bf      	bne.n	800f62a <_puts_r+0x42>
 800f6aa:	e7df      	b.n	800f66c <_puts_r+0x84>
 800f6ac:	6823      	ldr	r3, [r4, #0]
 800f6ae:	250a      	movs	r5, #10
 800f6b0:	1c5a      	adds	r2, r3, #1
 800f6b2:	6022      	str	r2, [r4, #0]
 800f6b4:	701d      	strb	r5, [r3, #0]
 800f6b6:	e7db      	b.n	800f670 <_puts_r+0x88>
 800f6b8:	08014a60 	.word	0x08014a60
 800f6bc:	08014a80 	.word	0x08014a80
 800f6c0:	08014a40 	.word	0x08014a40

0800f6c4 <puts>:
 800f6c4:	4b02      	ldr	r3, [pc, #8]	; (800f6d0 <puts+0xc>)
 800f6c6:	4601      	mov	r1, r0
 800f6c8:	6818      	ldr	r0, [r3, #0]
 800f6ca:	f7ff bf8d 	b.w	800f5e8 <_puts_r>
 800f6ce:	bf00      	nop
 800f6d0:	20000110 	.word	0x20000110

0800f6d4 <nanf>:
 800f6d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f6dc <nanf+0x8>
 800f6d8:	4770      	bx	lr
 800f6da:	bf00      	nop
 800f6dc:	7fc00000 	.word	0x7fc00000

0800f6e0 <sniprintf>:
 800f6e0:	b40c      	push	{r2, r3}
 800f6e2:	b530      	push	{r4, r5, lr}
 800f6e4:	4b17      	ldr	r3, [pc, #92]	; (800f744 <sniprintf+0x64>)
 800f6e6:	1e0c      	subs	r4, r1, #0
 800f6e8:	681d      	ldr	r5, [r3, #0]
 800f6ea:	b09d      	sub	sp, #116	; 0x74
 800f6ec:	da08      	bge.n	800f700 <sniprintf+0x20>
 800f6ee:	238b      	movs	r3, #139	; 0x8b
 800f6f0:	602b      	str	r3, [r5, #0]
 800f6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6f6:	b01d      	add	sp, #116	; 0x74
 800f6f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6fc:	b002      	add	sp, #8
 800f6fe:	4770      	bx	lr
 800f700:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f704:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f708:	bf14      	ite	ne
 800f70a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f70e:	4623      	moveq	r3, r4
 800f710:	9304      	str	r3, [sp, #16]
 800f712:	9307      	str	r3, [sp, #28]
 800f714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f718:	9002      	str	r0, [sp, #8]
 800f71a:	9006      	str	r0, [sp, #24]
 800f71c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f720:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f722:	ab21      	add	r3, sp, #132	; 0x84
 800f724:	a902      	add	r1, sp, #8
 800f726:	4628      	mov	r0, r5
 800f728:	9301      	str	r3, [sp, #4]
 800f72a:	f003 fa93 	bl	8012c54 <_svfiprintf_r>
 800f72e:	1c43      	adds	r3, r0, #1
 800f730:	bfbc      	itt	lt
 800f732:	238b      	movlt	r3, #139	; 0x8b
 800f734:	602b      	strlt	r3, [r5, #0]
 800f736:	2c00      	cmp	r4, #0
 800f738:	d0dd      	beq.n	800f6f6 <sniprintf+0x16>
 800f73a:	9b02      	ldr	r3, [sp, #8]
 800f73c:	2200      	movs	r2, #0
 800f73e:	701a      	strb	r2, [r3, #0]
 800f740:	e7d9      	b.n	800f6f6 <sniprintf+0x16>
 800f742:	bf00      	nop
 800f744:	20000110 	.word	0x20000110

0800f748 <siprintf>:
 800f748:	b40e      	push	{r1, r2, r3}
 800f74a:	b500      	push	{lr}
 800f74c:	b09c      	sub	sp, #112	; 0x70
 800f74e:	ab1d      	add	r3, sp, #116	; 0x74
 800f750:	9002      	str	r0, [sp, #8]
 800f752:	9006      	str	r0, [sp, #24]
 800f754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f758:	4809      	ldr	r0, [pc, #36]	; (800f780 <siprintf+0x38>)
 800f75a:	9107      	str	r1, [sp, #28]
 800f75c:	9104      	str	r1, [sp, #16]
 800f75e:	4909      	ldr	r1, [pc, #36]	; (800f784 <siprintf+0x3c>)
 800f760:	f853 2b04 	ldr.w	r2, [r3], #4
 800f764:	9105      	str	r1, [sp, #20]
 800f766:	6800      	ldr	r0, [r0, #0]
 800f768:	9301      	str	r3, [sp, #4]
 800f76a:	a902      	add	r1, sp, #8
 800f76c:	f003 fa72 	bl	8012c54 <_svfiprintf_r>
 800f770:	9b02      	ldr	r3, [sp, #8]
 800f772:	2200      	movs	r2, #0
 800f774:	701a      	strb	r2, [r3, #0]
 800f776:	b01c      	add	sp, #112	; 0x70
 800f778:	f85d eb04 	ldr.w	lr, [sp], #4
 800f77c:	b003      	add	sp, #12
 800f77e:	4770      	bx	lr
 800f780:	20000110 	.word	0x20000110
 800f784:	ffff0208 	.word	0xffff0208

0800f788 <siscanf>:
 800f788:	b40e      	push	{r1, r2, r3}
 800f78a:	b510      	push	{r4, lr}
 800f78c:	b09f      	sub	sp, #124	; 0x7c
 800f78e:	ac21      	add	r4, sp, #132	; 0x84
 800f790:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f794:	f854 2b04 	ldr.w	r2, [r4], #4
 800f798:	9201      	str	r2, [sp, #4]
 800f79a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f79e:	9004      	str	r0, [sp, #16]
 800f7a0:	9008      	str	r0, [sp, #32]
 800f7a2:	f7f0 fd2f 	bl	8000204 <strlen>
 800f7a6:	4b0c      	ldr	r3, [pc, #48]	; (800f7d8 <siscanf+0x50>)
 800f7a8:	9005      	str	r0, [sp, #20]
 800f7aa:	9009      	str	r0, [sp, #36]	; 0x24
 800f7ac:	930d      	str	r3, [sp, #52]	; 0x34
 800f7ae:	480b      	ldr	r0, [pc, #44]	; (800f7dc <siscanf+0x54>)
 800f7b0:	9a01      	ldr	r2, [sp, #4]
 800f7b2:	6800      	ldr	r0, [r0, #0]
 800f7b4:	9403      	str	r4, [sp, #12]
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	9311      	str	r3, [sp, #68]	; 0x44
 800f7ba:	9316      	str	r3, [sp, #88]	; 0x58
 800f7bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f7c4:	a904      	add	r1, sp, #16
 800f7c6:	4623      	mov	r3, r4
 800f7c8:	f003 fb9e 	bl	8012f08 <__ssvfiscanf_r>
 800f7cc:	b01f      	add	sp, #124	; 0x7c
 800f7ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7d2:	b003      	add	sp, #12
 800f7d4:	4770      	bx	lr
 800f7d6:	bf00      	nop
 800f7d8:	0800f803 	.word	0x0800f803
 800f7dc:	20000110 	.word	0x20000110

0800f7e0 <__sread>:
 800f7e0:	b510      	push	{r4, lr}
 800f7e2:	460c      	mov	r4, r1
 800f7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7e8:	f003 ffb2 	bl	8013750 <_read_r>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	bfab      	itete	ge
 800f7f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f7f2:	89a3      	ldrhlt	r3, [r4, #12]
 800f7f4:	181b      	addge	r3, r3, r0
 800f7f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f7fa:	bfac      	ite	ge
 800f7fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f7fe:	81a3      	strhlt	r3, [r4, #12]
 800f800:	bd10      	pop	{r4, pc}

0800f802 <__seofread>:
 800f802:	2000      	movs	r0, #0
 800f804:	4770      	bx	lr

0800f806 <__swrite>:
 800f806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f80a:	461f      	mov	r7, r3
 800f80c:	898b      	ldrh	r3, [r1, #12]
 800f80e:	05db      	lsls	r3, r3, #23
 800f810:	4605      	mov	r5, r0
 800f812:	460c      	mov	r4, r1
 800f814:	4616      	mov	r6, r2
 800f816:	d505      	bpl.n	800f824 <__swrite+0x1e>
 800f818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f81c:	2302      	movs	r3, #2
 800f81e:	2200      	movs	r2, #0
 800f820:	f002 fb72 	bl	8011f08 <_lseek_r>
 800f824:	89a3      	ldrh	r3, [r4, #12]
 800f826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f82a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f82e:	81a3      	strh	r3, [r4, #12]
 800f830:	4632      	mov	r2, r6
 800f832:	463b      	mov	r3, r7
 800f834:	4628      	mov	r0, r5
 800f836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f83a:	f000 bf2b 	b.w	8010694 <_write_r>

0800f83e <__sseek>:
 800f83e:	b510      	push	{r4, lr}
 800f840:	460c      	mov	r4, r1
 800f842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f846:	f002 fb5f 	bl	8011f08 <_lseek_r>
 800f84a:	1c43      	adds	r3, r0, #1
 800f84c:	89a3      	ldrh	r3, [r4, #12]
 800f84e:	bf15      	itete	ne
 800f850:	6560      	strne	r0, [r4, #84]	; 0x54
 800f852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f85a:	81a3      	strheq	r3, [r4, #12]
 800f85c:	bf18      	it	ne
 800f85e:	81a3      	strhne	r3, [r4, #12]
 800f860:	bd10      	pop	{r4, pc}

0800f862 <__sclose>:
 800f862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f866:	f000 bf95 	b.w	8010794 <_close_r>

0800f86a <strstr>:
 800f86a:	780a      	ldrb	r2, [r1, #0]
 800f86c:	b570      	push	{r4, r5, r6, lr}
 800f86e:	b96a      	cbnz	r2, 800f88c <strstr+0x22>
 800f870:	bd70      	pop	{r4, r5, r6, pc}
 800f872:	429a      	cmp	r2, r3
 800f874:	d109      	bne.n	800f88a <strstr+0x20>
 800f876:	460c      	mov	r4, r1
 800f878:	4605      	mov	r5, r0
 800f87a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d0f6      	beq.n	800f870 <strstr+0x6>
 800f882:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f886:	429e      	cmp	r6, r3
 800f888:	d0f7      	beq.n	800f87a <strstr+0x10>
 800f88a:	3001      	adds	r0, #1
 800f88c:	7803      	ldrb	r3, [r0, #0]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d1ef      	bne.n	800f872 <strstr+0x8>
 800f892:	4618      	mov	r0, r3
 800f894:	e7ec      	b.n	800f870 <strstr+0x6>

0800f896 <sulp>:
 800f896:	b570      	push	{r4, r5, r6, lr}
 800f898:	4604      	mov	r4, r0
 800f89a:	460d      	mov	r5, r1
 800f89c:	ec45 4b10 	vmov	d0, r4, r5
 800f8a0:	4616      	mov	r6, r2
 800f8a2:	f002 ff35 	bl	8012710 <__ulp>
 800f8a6:	ec51 0b10 	vmov	r0, r1, d0
 800f8aa:	b17e      	cbz	r6, 800f8cc <sulp+0x36>
 800f8ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f8b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	dd09      	ble.n	800f8cc <sulp+0x36>
 800f8b8:	051b      	lsls	r3, r3, #20
 800f8ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f8be:	2400      	movs	r4, #0
 800f8c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f8c4:	4622      	mov	r2, r4
 800f8c6:	462b      	mov	r3, r5
 800f8c8:	f7f0 feb6 	bl	8000638 <__aeabi_dmul>
 800f8cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f8d0 <_strtod_l>:
 800f8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d4:	ed2d 8b02 	vpush	{d8}
 800f8d8:	b09d      	sub	sp, #116	; 0x74
 800f8da:	461f      	mov	r7, r3
 800f8dc:	2300      	movs	r3, #0
 800f8de:	9318      	str	r3, [sp, #96]	; 0x60
 800f8e0:	4ba2      	ldr	r3, [pc, #648]	; (800fb6c <_strtod_l+0x29c>)
 800f8e2:	9213      	str	r2, [sp, #76]	; 0x4c
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	9305      	str	r3, [sp, #20]
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	4688      	mov	r8, r1
 800f8ee:	f7f0 fc89 	bl	8000204 <strlen>
 800f8f2:	f04f 0a00 	mov.w	sl, #0
 800f8f6:	4605      	mov	r5, r0
 800f8f8:	f04f 0b00 	mov.w	fp, #0
 800f8fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f902:	781a      	ldrb	r2, [r3, #0]
 800f904:	2a2b      	cmp	r2, #43	; 0x2b
 800f906:	d04e      	beq.n	800f9a6 <_strtod_l+0xd6>
 800f908:	d83b      	bhi.n	800f982 <_strtod_l+0xb2>
 800f90a:	2a0d      	cmp	r2, #13
 800f90c:	d834      	bhi.n	800f978 <_strtod_l+0xa8>
 800f90e:	2a08      	cmp	r2, #8
 800f910:	d834      	bhi.n	800f97c <_strtod_l+0xac>
 800f912:	2a00      	cmp	r2, #0
 800f914:	d03e      	beq.n	800f994 <_strtod_l+0xc4>
 800f916:	2300      	movs	r3, #0
 800f918:	930a      	str	r3, [sp, #40]	; 0x28
 800f91a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f91c:	7833      	ldrb	r3, [r6, #0]
 800f91e:	2b30      	cmp	r3, #48	; 0x30
 800f920:	f040 80b0 	bne.w	800fa84 <_strtod_l+0x1b4>
 800f924:	7873      	ldrb	r3, [r6, #1]
 800f926:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f92a:	2b58      	cmp	r3, #88	; 0x58
 800f92c:	d168      	bne.n	800fa00 <_strtod_l+0x130>
 800f92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f930:	9301      	str	r3, [sp, #4]
 800f932:	ab18      	add	r3, sp, #96	; 0x60
 800f934:	9702      	str	r7, [sp, #8]
 800f936:	9300      	str	r3, [sp, #0]
 800f938:	4a8d      	ldr	r2, [pc, #564]	; (800fb70 <_strtod_l+0x2a0>)
 800f93a:	ab19      	add	r3, sp, #100	; 0x64
 800f93c:	a917      	add	r1, sp, #92	; 0x5c
 800f93e:	4620      	mov	r0, r4
 800f940:	f001 ffd2 	bl	80118e8 <__gethex>
 800f944:	f010 0707 	ands.w	r7, r0, #7
 800f948:	4605      	mov	r5, r0
 800f94a:	d005      	beq.n	800f958 <_strtod_l+0x88>
 800f94c:	2f06      	cmp	r7, #6
 800f94e:	d12c      	bne.n	800f9aa <_strtod_l+0xda>
 800f950:	3601      	adds	r6, #1
 800f952:	2300      	movs	r3, #0
 800f954:	9617      	str	r6, [sp, #92]	; 0x5c
 800f956:	930a      	str	r3, [sp, #40]	; 0x28
 800f958:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f040 8590 	bne.w	8010480 <_strtod_l+0xbb0>
 800f960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f962:	b1eb      	cbz	r3, 800f9a0 <_strtod_l+0xd0>
 800f964:	4652      	mov	r2, sl
 800f966:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f96a:	ec43 2b10 	vmov	d0, r2, r3
 800f96e:	b01d      	add	sp, #116	; 0x74
 800f970:	ecbd 8b02 	vpop	{d8}
 800f974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f978:	2a20      	cmp	r2, #32
 800f97a:	d1cc      	bne.n	800f916 <_strtod_l+0x46>
 800f97c:	3301      	adds	r3, #1
 800f97e:	9317      	str	r3, [sp, #92]	; 0x5c
 800f980:	e7be      	b.n	800f900 <_strtod_l+0x30>
 800f982:	2a2d      	cmp	r2, #45	; 0x2d
 800f984:	d1c7      	bne.n	800f916 <_strtod_l+0x46>
 800f986:	2201      	movs	r2, #1
 800f988:	920a      	str	r2, [sp, #40]	; 0x28
 800f98a:	1c5a      	adds	r2, r3, #1
 800f98c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f98e:	785b      	ldrb	r3, [r3, #1]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d1c2      	bne.n	800f91a <_strtod_l+0x4a>
 800f994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f996:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f040 856e 	bne.w	801047c <_strtod_l+0xbac>
 800f9a0:	4652      	mov	r2, sl
 800f9a2:	465b      	mov	r3, fp
 800f9a4:	e7e1      	b.n	800f96a <_strtod_l+0x9a>
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	e7ee      	b.n	800f988 <_strtod_l+0xb8>
 800f9aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f9ac:	b13a      	cbz	r2, 800f9be <_strtod_l+0xee>
 800f9ae:	2135      	movs	r1, #53	; 0x35
 800f9b0:	a81a      	add	r0, sp, #104	; 0x68
 800f9b2:	f002 ffb8 	bl	8012926 <__copybits>
 800f9b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f002 fb77 	bl	80120ac <_Bfree>
 800f9be:	3f01      	subs	r7, #1
 800f9c0:	2f04      	cmp	r7, #4
 800f9c2:	d806      	bhi.n	800f9d2 <_strtod_l+0x102>
 800f9c4:	e8df f007 	tbb	[pc, r7]
 800f9c8:	1714030a 	.word	0x1714030a
 800f9cc:	0a          	.byte	0x0a
 800f9cd:	00          	.byte	0x00
 800f9ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f9d2:	0728      	lsls	r0, r5, #28
 800f9d4:	d5c0      	bpl.n	800f958 <_strtod_l+0x88>
 800f9d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f9da:	e7bd      	b.n	800f958 <_strtod_l+0x88>
 800f9dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f9e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f9e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f9e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f9ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f9ee:	e7f0      	b.n	800f9d2 <_strtod_l+0x102>
 800f9f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800fb74 <_strtod_l+0x2a4>
 800f9f4:	e7ed      	b.n	800f9d2 <_strtod_l+0x102>
 800f9f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f9fa:	f04f 3aff 	mov.w	sl, #4294967295
 800f9fe:	e7e8      	b.n	800f9d2 <_strtod_l+0x102>
 800fa00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa02:	1c5a      	adds	r2, r3, #1
 800fa04:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa06:	785b      	ldrb	r3, [r3, #1]
 800fa08:	2b30      	cmp	r3, #48	; 0x30
 800fa0a:	d0f9      	beq.n	800fa00 <_strtod_l+0x130>
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d0a3      	beq.n	800f958 <_strtod_l+0x88>
 800fa10:	2301      	movs	r3, #1
 800fa12:	f04f 0900 	mov.w	r9, #0
 800fa16:	9304      	str	r3, [sp, #16]
 800fa18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa1a:	9308      	str	r3, [sp, #32]
 800fa1c:	f8cd 901c 	str.w	r9, [sp, #28]
 800fa20:	464f      	mov	r7, r9
 800fa22:	220a      	movs	r2, #10
 800fa24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fa26:	7806      	ldrb	r6, [r0, #0]
 800fa28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fa2c:	b2d9      	uxtb	r1, r3
 800fa2e:	2909      	cmp	r1, #9
 800fa30:	d92a      	bls.n	800fa88 <_strtod_l+0x1b8>
 800fa32:	9905      	ldr	r1, [sp, #20]
 800fa34:	462a      	mov	r2, r5
 800fa36:	f003 feef 	bl	8013818 <strncmp>
 800fa3a:	b398      	cbz	r0, 800faa4 <_strtod_l+0x1d4>
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	4632      	mov	r2, r6
 800fa40:	463d      	mov	r5, r7
 800fa42:	9005      	str	r0, [sp, #20]
 800fa44:	4603      	mov	r3, r0
 800fa46:	2a65      	cmp	r2, #101	; 0x65
 800fa48:	d001      	beq.n	800fa4e <_strtod_l+0x17e>
 800fa4a:	2a45      	cmp	r2, #69	; 0x45
 800fa4c:	d118      	bne.n	800fa80 <_strtod_l+0x1b0>
 800fa4e:	b91d      	cbnz	r5, 800fa58 <_strtod_l+0x188>
 800fa50:	9a04      	ldr	r2, [sp, #16]
 800fa52:	4302      	orrs	r2, r0
 800fa54:	d09e      	beq.n	800f994 <_strtod_l+0xc4>
 800fa56:	2500      	movs	r5, #0
 800fa58:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800fa5c:	f108 0201 	add.w	r2, r8, #1
 800fa60:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa62:	f898 2001 	ldrb.w	r2, [r8, #1]
 800fa66:	2a2b      	cmp	r2, #43	; 0x2b
 800fa68:	d075      	beq.n	800fb56 <_strtod_l+0x286>
 800fa6a:	2a2d      	cmp	r2, #45	; 0x2d
 800fa6c:	d07b      	beq.n	800fb66 <_strtod_l+0x296>
 800fa6e:	f04f 0c00 	mov.w	ip, #0
 800fa72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fa76:	2909      	cmp	r1, #9
 800fa78:	f240 8082 	bls.w	800fb80 <_strtod_l+0x2b0>
 800fa7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fa80:	2600      	movs	r6, #0
 800fa82:	e09d      	b.n	800fbc0 <_strtod_l+0x2f0>
 800fa84:	2300      	movs	r3, #0
 800fa86:	e7c4      	b.n	800fa12 <_strtod_l+0x142>
 800fa88:	2f08      	cmp	r7, #8
 800fa8a:	bfd8      	it	le
 800fa8c:	9907      	ldrle	r1, [sp, #28]
 800fa8e:	f100 0001 	add.w	r0, r0, #1
 800fa92:	bfda      	itte	le
 800fa94:	fb02 3301 	mlale	r3, r2, r1, r3
 800fa98:	9307      	strle	r3, [sp, #28]
 800fa9a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fa9e:	3701      	adds	r7, #1
 800faa0:	9017      	str	r0, [sp, #92]	; 0x5c
 800faa2:	e7bf      	b.n	800fa24 <_strtod_l+0x154>
 800faa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800faa6:	195a      	adds	r2, r3, r5
 800faa8:	9217      	str	r2, [sp, #92]	; 0x5c
 800faaa:	5d5a      	ldrb	r2, [r3, r5]
 800faac:	2f00      	cmp	r7, #0
 800faae:	d037      	beq.n	800fb20 <_strtod_l+0x250>
 800fab0:	9005      	str	r0, [sp, #20]
 800fab2:	463d      	mov	r5, r7
 800fab4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fab8:	2b09      	cmp	r3, #9
 800faba:	d912      	bls.n	800fae2 <_strtod_l+0x212>
 800fabc:	2301      	movs	r3, #1
 800fabe:	e7c2      	b.n	800fa46 <_strtod_l+0x176>
 800fac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fac2:	1c5a      	adds	r2, r3, #1
 800fac4:	9217      	str	r2, [sp, #92]	; 0x5c
 800fac6:	785a      	ldrb	r2, [r3, #1]
 800fac8:	3001      	adds	r0, #1
 800faca:	2a30      	cmp	r2, #48	; 0x30
 800facc:	d0f8      	beq.n	800fac0 <_strtod_l+0x1f0>
 800face:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fad2:	2b08      	cmp	r3, #8
 800fad4:	f200 84d9 	bhi.w	801048a <_strtod_l+0xbba>
 800fad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fada:	9005      	str	r0, [sp, #20]
 800fadc:	2000      	movs	r0, #0
 800fade:	9308      	str	r3, [sp, #32]
 800fae0:	4605      	mov	r5, r0
 800fae2:	3a30      	subs	r2, #48	; 0x30
 800fae4:	f100 0301 	add.w	r3, r0, #1
 800fae8:	d014      	beq.n	800fb14 <_strtod_l+0x244>
 800faea:	9905      	ldr	r1, [sp, #20]
 800faec:	4419      	add	r1, r3
 800faee:	9105      	str	r1, [sp, #20]
 800faf0:	462b      	mov	r3, r5
 800faf2:	eb00 0e05 	add.w	lr, r0, r5
 800faf6:	210a      	movs	r1, #10
 800faf8:	4573      	cmp	r3, lr
 800fafa:	d113      	bne.n	800fb24 <_strtod_l+0x254>
 800fafc:	182b      	adds	r3, r5, r0
 800fafe:	2b08      	cmp	r3, #8
 800fb00:	f105 0501 	add.w	r5, r5, #1
 800fb04:	4405      	add	r5, r0
 800fb06:	dc1c      	bgt.n	800fb42 <_strtod_l+0x272>
 800fb08:	9907      	ldr	r1, [sp, #28]
 800fb0a:	230a      	movs	r3, #10
 800fb0c:	fb03 2301 	mla	r3, r3, r1, r2
 800fb10:	9307      	str	r3, [sp, #28]
 800fb12:	2300      	movs	r3, #0
 800fb14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb16:	1c51      	adds	r1, r2, #1
 800fb18:	9117      	str	r1, [sp, #92]	; 0x5c
 800fb1a:	7852      	ldrb	r2, [r2, #1]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	e7c9      	b.n	800fab4 <_strtod_l+0x1e4>
 800fb20:	4638      	mov	r0, r7
 800fb22:	e7d2      	b.n	800faca <_strtod_l+0x1fa>
 800fb24:	2b08      	cmp	r3, #8
 800fb26:	dc04      	bgt.n	800fb32 <_strtod_l+0x262>
 800fb28:	9e07      	ldr	r6, [sp, #28]
 800fb2a:	434e      	muls	r6, r1
 800fb2c:	9607      	str	r6, [sp, #28]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	e7e2      	b.n	800faf8 <_strtod_l+0x228>
 800fb32:	f103 0c01 	add.w	ip, r3, #1
 800fb36:	f1bc 0f10 	cmp.w	ip, #16
 800fb3a:	bfd8      	it	le
 800fb3c:	fb01 f909 	mulle.w	r9, r1, r9
 800fb40:	e7f5      	b.n	800fb2e <_strtod_l+0x25e>
 800fb42:	2d10      	cmp	r5, #16
 800fb44:	bfdc      	itt	le
 800fb46:	230a      	movle	r3, #10
 800fb48:	fb03 2909 	mlale	r9, r3, r9, r2
 800fb4c:	e7e1      	b.n	800fb12 <_strtod_l+0x242>
 800fb4e:	2300      	movs	r3, #0
 800fb50:	9305      	str	r3, [sp, #20]
 800fb52:	2301      	movs	r3, #1
 800fb54:	e77c      	b.n	800fa50 <_strtod_l+0x180>
 800fb56:	f04f 0c00 	mov.w	ip, #0
 800fb5a:	f108 0202 	add.w	r2, r8, #2
 800fb5e:	9217      	str	r2, [sp, #92]	; 0x5c
 800fb60:	f898 2002 	ldrb.w	r2, [r8, #2]
 800fb64:	e785      	b.n	800fa72 <_strtod_l+0x1a2>
 800fb66:	f04f 0c01 	mov.w	ip, #1
 800fb6a:	e7f6      	b.n	800fb5a <_strtod_l+0x28a>
 800fb6c:	08014b08 	.word	0x08014b08
 800fb70:	08014960 	.word	0x08014960
 800fb74:	7ff00000 	.word	0x7ff00000
 800fb78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb7a:	1c51      	adds	r1, r2, #1
 800fb7c:	9117      	str	r1, [sp, #92]	; 0x5c
 800fb7e:	7852      	ldrb	r2, [r2, #1]
 800fb80:	2a30      	cmp	r2, #48	; 0x30
 800fb82:	d0f9      	beq.n	800fb78 <_strtod_l+0x2a8>
 800fb84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fb88:	2908      	cmp	r1, #8
 800fb8a:	f63f af79 	bhi.w	800fa80 <_strtod_l+0x1b0>
 800fb8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fb92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb94:	9206      	str	r2, [sp, #24]
 800fb96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb98:	1c51      	adds	r1, r2, #1
 800fb9a:	9117      	str	r1, [sp, #92]	; 0x5c
 800fb9c:	7852      	ldrb	r2, [r2, #1]
 800fb9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800fba2:	2e09      	cmp	r6, #9
 800fba4:	d937      	bls.n	800fc16 <_strtod_l+0x346>
 800fba6:	9e06      	ldr	r6, [sp, #24]
 800fba8:	1b89      	subs	r1, r1, r6
 800fbaa:	2908      	cmp	r1, #8
 800fbac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fbb0:	dc02      	bgt.n	800fbb8 <_strtod_l+0x2e8>
 800fbb2:	4576      	cmp	r6, lr
 800fbb4:	bfa8      	it	ge
 800fbb6:	4676      	movge	r6, lr
 800fbb8:	f1bc 0f00 	cmp.w	ip, #0
 800fbbc:	d000      	beq.n	800fbc0 <_strtod_l+0x2f0>
 800fbbe:	4276      	negs	r6, r6
 800fbc0:	2d00      	cmp	r5, #0
 800fbc2:	d14d      	bne.n	800fc60 <_strtod_l+0x390>
 800fbc4:	9904      	ldr	r1, [sp, #16]
 800fbc6:	4301      	orrs	r1, r0
 800fbc8:	f47f aec6 	bne.w	800f958 <_strtod_l+0x88>
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	f47f aee1 	bne.w	800f994 <_strtod_l+0xc4>
 800fbd2:	2a69      	cmp	r2, #105	; 0x69
 800fbd4:	d027      	beq.n	800fc26 <_strtod_l+0x356>
 800fbd6:	dc24      	bgt.n	800fc22 <_strtod_l+0x352>
 800fbd8:	2a49      	cmp	r2, #73	; 0x49
 800fbda:	d024      	beq.n	800fc26 <_strtod_l+0x356>
 800fbdc:	2a4e      	cmp	r2, #78	; 0x4e
 800fbde:	f47f aed9 	bne.w	800f994 <_strtod_l+0xc4>
 800fbe2:	499f      	ldr	r1, [pc, #636]	; (800fe60 <_strtod_l+0x590>)
 800fbe4:	a817      	add	r0, sp, #92	; 0x5c
 800fbe6:	f002 f8d7 	bl	8011d98 <__match>
 800fbea:	2800      	cmp	r0, #0
 800fbec:	f43f aed2 	beq.w	800f994 <_strtod_l+0xc4>
 800fbf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	2b28      	cmp	r3, #40	; 0x28
 800fbf6:	d12d      	bne.n	800fc54 <_strtod_l+0x384>
 800fbf8:	499a      	ldr	r1, [pc, #616]	; (800fe64 <_strtod_l+0x594>)
 800fbfa:	aa1a      	add	r2, sp, #104	; 0x68
 800fbfc:	a817      	add	r0, sp, #92	; 0x5c
 800fbfe:	f002 f8df 	bl	8011dc0 <__hexnan>
 800fc02:	2805      	cmp	r0, #5
 800fc04:	d126      	bne.n	800fc54 <_strtod_l+0x384>
 800fc06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fc0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fc10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fc14:	e6a0      	b.n	800f958 <_strtod_l+0x88>
 800fc16:	210a      	movs	r1, #10
 800fc18:	fb01 2e0e 	mla	lr, r1, lr, r2
 800fc1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fc20:	e7b9      	b.n	800fb96 <_strtod_l+0x2c6>
 800fc22:	2a6e      	cmp	r2, #110	; 0x6e
 800fc24:	e7db      	b.n	800fbde <_strtod_l+0x30e>
 800fc26:	4990      	ldr	r1, [pc, #576]	; (800fe68 <_strtod_l+0x598>)
 800fc28:	a817      	add	r0, sp, #92	; 0x5c
 800fc2a:	f002 f8b5 	bl	8011d98 <__match>
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	f43f aeb0 	beq.w	800f994 <_strtod_l+0xc4>
 800fc34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc36:	498d      	ldr	r1, [pc, #564]	; (800fe6c <_strtod_l+0x59c>)
 800fc38:	3b01      	subs	r3, #1
 800fc3a:	a817      	add	r0, sp, #92	; 0x5c
 800fc3c:	9317      	str	r3, [sp, #92]	; 0x5c
 800fc3e:	f002 f8ab 	bl	8011d98 <__match>
 800fc42:	b910      	cbnz	r0, 800fc4a <_strtod_l+0x37a>
 800fc44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc46:	3301      	adds	r3, #1
 800fc48:	9317      	str	r3, [sp, #92]	; 0x5c
 800fc4a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fe7c <_strtod_l+0x5ac>
 800fc4e:	f04f 0a00 	mov.w	sl, #0
 800fc52:	e681      	b.n	800f958 <_strtod_l+0x88>
 800fc54:	4886      	ldr	r0, [pc, #536]	; (800fe70 <_strtod_l+0x5a0>)
 800fc56:	f003 fd8f 	bl	8013778 <nan>
 800fc5a:	ec5b ab10 	vmov	sl, fp, d0
 800fc5e:	e67b      	b.n	800f958 <_strtod_l+0x88>
 800fc60:	9b05      	ldr	r3, [sp, #20]
 800fc62:	9807      	ldr	r0, [sp, #28]
 800fc64:	1af3      	subs	r3, r6, r3
 800fc66:	2f00      	cmp	r7, #0
 800fc68:	bf08      	it	eq
 800fc6a:	462f      	moveq	r7, r5
 800fc6c:	2d10      	cmp	r5, #16
 800fc6e:	9306      	str	r3, [sp, #24]
 800fc70:	46a8      	mov	r8, r5
 800fc72:	bfa8      	it	ge
 800fc74:	f04f 0810 	movge.w	r8, #16
 800fc78:	f7f0 fc64 	bl	8000544 <__aeabi_ui2d>
 800fc7c:	2d09      	cmp	r5, #9
 800fc7e:	4682      	mov	sl, r0
 800fc80:	468b      	mov	fp, r1
 800fc82:	dd13      	ble.n	800fcac <_strtod_l+0x3dc>
 800fc84:	4b7b      	ldr	r3, [pc, #492]	; (800fe74 <_strtod_l+0x5a4>)
 800fc86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fc8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fc8e:	f7f0 fcd3 	bl	8000638 <__aeabi_dmul>
 800fc92:	4682      	mov	sl, r0
 800fc94:	4648      	mov	r0, r9
 800fc96:	468b      	mov	fp, r1
 800fc98:	f7f0 fc54 	bl	8000544 <__aeabi_ui2d>
 800fc9c:	4602      	mov	r2, r0
 800fc9e:	460b      	mov	r3, r1
 800fca0:	4650      	mov	r0, sl
 800fca2:	4659      	mov	r1, fp
 800fca4:	f7f0 fb12 	bl	80002cc <__adddf3>
 800fca8:	4682      	mov	sl, r0
 800fcaa:	468b      	mov	fp, r1
 800fcac:	2d0f      	cmp	r5, #15
 800fcae:	dc38      	bgt.n	800fd22 <_strtod_l+0x452>
 800fcb0:	9b06      	ldr	r3, [sp, #24]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	f43f ae50 	beq.w	800f958 <_strtod_l+0x88>
 800fcb8:	dd24      	ble.n	800fd04 <_strtod_l+0x434>
 800fcba:	2b16      	cmp	r3, #22
 800fcbc:	dc0b      	bgt.n	800fcd6 <_strtod_l+0x406>
 800fcbe:	496d      	ldr	r1, [pc, #436]	; (800fe74 <_strtod_l+0x5a4>)
 800fcc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fcc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcc8:	4652      	mov	r2, sl
 800fcca:	465b      	mov	r3, fp
 800fccc:	f7f0 fcb4 	bl	8000638 <__aeabi_dmul>
 800fcd0:	4682      	mov	sl, r0
 800fcd2:	468b      	mov	fp, r1
 800fcd4:	e640      	b.n	800f958 <_strtod_l+0x88>
 800fcd6:	9a06      	ldr	r2, [sp, #24]
 800fcd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fcdc:	4293      	cmp	r3, r2
 800fcde:	db20      	blt.n	800fd22 <_strtod_l+0x452>
 800fce0:	4c64      	ldr	r4, [pc, #400]	; (800fe74 <_strtod_l+0x5a4>)
 800fce2:	f1c5 050f 	rsb	r5, r5, #15
 800fce6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fcea:	4652      	mov	r2, sl
 800fcec:	465b      	mov	r3, fp
 800fcee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcf2:	f7f0 fca1 	bl	8000638 <__aeabi_dmul>
 800fcf6:	9b06      	ldr	r3, [sp, #24]
 800fcf8:	1b5d      	subs	r5, r3, r5
 800fcfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fcfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fd02:	e7e3      	b.n	800fccc <_strtod_l+0x3fc>
 800fd04:	9b06      	ldr	r3, [sp, #24]
 800fd06:	3316      	adds	r3, #22
 800fd08:	db0b      	blt.n	800fd22 <_strtod_l+0x452>
 800fd0a:	9b05      	ldr	r3, [sp, #20]
 800fd0c:	1b9e      	subs	r6, r3, r6
 800fd0e:	4b59      	ldr	r3, [pc, #356]	; (800fe74 <_strtod_l+0x5a4>)
 800fd10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800fd14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fd18:	4650      	mov	r0, sl
 800fd1a:	4659      	mov	r1, fp
 800fd1c:	f7f0 fdb6 	bl	800088c <__aeabi_ddiv>
 800fd20:	e7d6      	b.n	800fcd0 <_strtod_l+0x400>
 800fd22:	9b06      	ldr	r3, [sp, #24]
 800fd24:	eba5 0808 	sub.w	r8, r5, r8
 800fd28:	4498      	add	r8, r3
 800fd2a:	f1b8 0f00 	cmp.w	r8, #0
 800fd2e:	dd74      	ble.n	800fe1a <_strtod_l+0x54a>
 800fd30:	f018 030f 	ands.w	r3, r8, #15
 800fd34:	d00a      	beq.n	800fd4c <_strtod_l+0x47c>
 800fd36:	494f      	ldr	r1, [pc, #316]	; (800fe74 <_strtod_l+0x5a4>)
 800fd38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd3c:	4652      	mov	r2, sl
 800fd3e:	465b      	mov	r3, fp
 800fd40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd44:	f7f0 fc78 	bl	8000638 <__aeabi_dmul>
 800fd48:	4682      	mov	sl, r0
 800fd4a:	468b      	mov	fp, r1
 800fd4c:	f038 080f 	bics.w	r8, r8, #15
 800fd50:	d04f      	beq.n	800fdf2 <_strtod_l+0x522>
 800fd52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fd56:	dd22      	ble.n	800fd9e <_strtod_l+0x4ce>
 800fd58:	2500      	movs	r5, #0
 800fd5a:	462e      	mov	r6, r5
 800fd5c:	9507      	str	r5, [sp, #28]
 800fd5e:	9505      	str	r5, [sp, #20]
 800fd60:	2322      	movs	r3, #34	; 0x22
 800fd62:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fe7c <_strtod_l+0x5ac>
 800fd66:	6023      	str	r3, [r4, #0]
 800fd68:	f04f 0a00 	mov.w	sl, #0
 800fd6c:	9b07      	ldr	r3, [sp, #28]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	f43f adf2 	beq.w	800f958 <_strtod_l+0x88>
 800fd74:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd76:	4620      	mov	r0, r4
 800fd78:	f002 f998 	bl	80120ac <_Bfree>
 800fd7c:	9905      	ldr	r1, [sp, #20]
 800fd7e:	4620      	mov	r0, r4
 800fd80:	f002 f994 	bl	80120ac <_Bfree>
 800fd84:	4631      	mov	r1, r6
 800fd86:	4620      	mov	r0, r4
 800fd88:	f002 f990 	bl	80120ac <_Bfree>
 800fd8c:	9907      	ldr	r1, [sp, #28]
 800fd8e:	4620      	mov	r0, r4
 800fd90:	f002 f98c 	bl	80120ac <_Bfree>
 800fd94:	4629      	mov	r1, r5
 800fd96:	4620      	mov	r0, r4
 800fd98:	f002 f988 	bl	80120ac <_Bfree>
 800fd9c:	e5dc      	b.n	800f958 <_strtod_l+0x88>
 800fd9e:	4b36      	ldr	r3, [pc, #216]	; (800fe78 <_strtod_l+0x5a8>)
 800fda0:	9304      	str	r3, [sp, #16]
 800fda2:	2300      	movs	r3, #0
 800fda4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fda8:	4650      	mov	r0, sl
 800fdaa:	4659      	mov	r1, fp
 800fdac:	4699      	mov	r9, r3
 800fdae:	f1b8 0f01 	cmp.w	r8, #1
 800fdb2:	dc21      	bgt.n	800fdf8 <_strtod_l+0x528>
 800fdb4:	b10b      	cbz	r3, 800fdba <_strtod_l+0x4ea>
 800fdb6:	4682      	mov	sl, r0
 800fdb8:	468b      	mov	fp, r1
 800fdba:	4b2f      	ldr	r3, [pc, #188]	; (800fe78 <_strtod_l+0x5a8>)
 800fdbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fdc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fdc4:	4652      	mov	r2, sl
 800fdc6:	465b      	mov	r3, fp
 800fdc8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fdcc:	f7f0 fc34 	bl	8000638 <__aeabi_dmul>
 800fdd0:	4b2a      	ldr	r3, [pc, #168]	; (800fe7c <_strtod_l+0x5ac>)
 800fdd2:	460a      	mov	r2, r1
 800fdd4:	400b      	ands	r3, r1
 800fdd6:	492a      	ldr	r1, [pc, #168]	; (800fe80 <_strtod_l+0x5b0>)
 800fdd8:	428b      	cmp	r3, r1
 800fdda:	4682      	mov	sl, r0
 800fddc:	d8bc      	bhi.n	800fd58 <_strtod_l+0x488>
 800fdde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fde2:	428b      	cmp	r3, r1
 800fde4:	bf86      	itte	hi
 800fde6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fe84 <_strtod_l+0x5b4>
 800fdea:	f04f 3aff 	movhi.w	sl, #4294967295
 800fdee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	9304      	str	r3, [sp, #16]
 800fdf6:	e084      	b.n	800ff02 <_strtod_l+0x632>
 800fdf8:	f018 0f01 	tst.w	r8, #1
 800fdfc:	d005      	beq.n	800fe0a <_strtod_l+0x53a>
 800fdfe:	9b04      	ldr	r3, [sp, #16]
 800fe00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe04:	f7f0 fc18 	bl	8000638 <__aeabi_dmul>
 800fe08:	2301      	movs	r3, #1
 800fe0a:	9a04      	ldr	r2, [sp, #16]
 800fe0c:	3208      	adds	r2, #8
 800fe0e:	f109 0901 	add.w	r9, r9, #1
 800fe12:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fe16:	9204      	str	r2, [sp, #16]
 800fe18:	e7c9      	b.n	800fdae <_strtod_l+0x4de>
 800fe1a:	d0ea      	beq.n	800fdf2 <_strtod_l+0x522>
 800fe1c:	f1c8 0800 	rsb	r8, r8, #0
 800fe20:	f018 020f 	ands.w	r2, r8, #15
 800fe24:	d00a      	beq.n	800fe3c <_strtod_l+0x56c>
 800fe26:	4b13      	ldr	r3, [pc, #76]	; (800fe74 <_strtod_l+0x5a4>)
 800fe28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe2c:	4650      	mov	r0, sl
 800fe2e:	4659      	mov	r1, fp
 800fe30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe34:	f7f0 fd2a 	bl	800088c <__aeabi_ddiv>
 800fe38:	4682      	mov	sl, r0
 800fe3a:	468b      	mov	fp, r1
 800fe3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fe40:	d0d7      	beq.n	800fdf2 <_strtod_l+0x522>
 800fe42:	f1b8 0f1f 	cmp.w	r8, #31
 800fe46:	dd1f      	ble.n	800fe88 <_strtod_l+0x5b8>
 800fe48:	2500      	movs	r5, #0
 800fe4a:	462e      	mov	r6, r5
 800fe4c:	9507      	str	r5, [sp, #28]
 800fe4e:	9505      	str	r5, [sp, #20]
 800fe50:	2322      	movs	r3, #34	; 0x22
 800fe52:	f04f 0a00 	mov.w	sl, #0
 800fe56:	f04f 0b00 	mov.w	fp, #0
 800fe5a:	6023      	str	r3, [r4, #0]
 800fe5c:	e786      	b.n	800fd6c <_strtod_l+0x49c>
 800fe5e:	bf00      	nop
 800fe60:	08014935 	.word	0x08014935
 800fe64:	08014974 	.word	0x08014974
 800fe68:	0801492d 	.word	0x0801492d
 800fe6c:	080149b3 	.word	0x080149b3
 800fe70:	08014cdb 	.word	0x08014cdb
 800fe74:	08014ba0 	.word	0x08014ba0
 800fe78:	08014b78 	.word	0x08014b78
 800fe7c:	7ff00000 	.word	0x7ff00000
 800fe80:	7ca00000 	.word	0x7ca00000
 800fe84:	7fefffff 	.word	0x7fefffff
 800fe88:	f018 0310 	ands.w	r3, r8, #16
 800fe8c:	bf18      	it	ne
 800fe8e:	236a      	movne	r3, #106	; 0x6a
 800fe90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010240 <_strtod_l+0x970>
 800fe94:	9304      	str	r3, [sp, #16]
 800fe96:	4650      	mov	r0, sl
 800fe98:	4659      	mov	r1, fp
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	f018 0f01 	tst.w	r8, #1
 800fea0:	d004      	beq.n	800feac <_strtod_l+0x5dc>
 800fea2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fea6:	f7f0 fbc7 	bl	8000638 <__aeabi_dmul>
 800feaa:	2301      	movs	r3, #1
 800feac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800feb0:	f109 0908 	add.w	r9, r9, #8
 800feb4:	d1f2      	bne.n	800fe9c <_strtod_l+0x5cc>
 800feb6:	b10b      	cbz	r3, 800febc <_strtod_l+0x5ec>
 800feb8:	4682      	mov	sl, r0
 800feba:	468b      	mov	fp, r1
 800febc:	9b04      	ldr	r3, [sp, #16]
 800febe:	b1c3      	cbz	r3, 800fef2 <_strtod_l+0x622>
 800fec0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fec4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fec8:	2b00      	cmp	r3, #0
 800feca:	4659      	mov	r1, fp
 800fecc:	dd11      	ble.n	800fef2 <_strtod_l+0x622>
 800fece:	2b1f      	cmp	r3, #31
 800fed0:	f340 8124 	ble.w	801011c <_strtod_l+0x84c>
 800fed4:	2b34      	cmp	r3, #52	; 0x34
 800fed6:	bfde      	ittt	le
 800fed8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fedc:	f04f 33ff 	movle.w	r3, #4294967295
 800fee0:	fa03 f202 	lslle.w	r2, r3, r2
 800fee4:	f04f 0a00 	mov.w	sl, #0
 800fee8:	bfcc      	ite	gt
 800feea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800feee:	ea02 0b01 	andle.w	fp, r2, r1
 800fef2:	2200      	movs	r2, #0
 800fef4:	2300      	movs	r3, #0
 800fef6:	4650      	mov	r0, sl
 800fef8:	4659      	mov	r1, fp
 800fefa:	f7f0 fe05 	bl	8000b08 <__aeabi_dcmpeq>
 800fefe:	2800      	cmp	r0, #0
 800ff00:	d1a2      	bne.n	800fe48 <_strtod_l+0x578>
 800ff02:	9b07      	ldr	r3, [sp, #28]
 800ff04:	9300      	str	r3, [sp, #0]
 800ff06:	9908      	ldr	r1, [sp, #32]
 800ff08:	462b      	mov	r3, r5
 800ff0a:	463a      	mov	r2, r7
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	f002 f935 	bl	801217c <__s2b>
 800ff12:	9007      	str	r0, [sp, #28]
 800ff14:	2800      	cmp	r0, #0
 800ff16:	f43f af1f 	beq.w	800fd58 <_strtod_l+0x488>
 800ff1a:	9b05      	ldr	r3, [sp, #20]
 800ff1c:	1b9e      	subs	r6, r3, r6
 800ff1e:	9b06      	ldr	r3, [sp, #24]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	bfb4      	ite	lt
 800ff24:	4633      	movlt	r3, r6
 800ff26:	2300      	movge	r3, #0
 800ff28:	930c      	str	r3, [sp, #48]	; 0x30
 800ff2a:	9b06      	ldr	r3, [sp, #24]
 800ff2c:	2500      	movs	r5, #0
 800ff2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ff32:	9312      	str	r3, [sp, #72]	; 0x48
 800ff34:	462e      	mov	r6, r5
 800ff36:	9b07      	ldr	r3, [sp, #28]
 800ff38:	4620      	mov	r0, r4
 800ff3a:	6859      	ldr	r1, [r3, #4]
 800ff3c:	f002 f876 	bl	801202c <_Balloc>
 800ff40:	9005      	str	r0, [sp, #20]
 800ff42:	2800      	cmp	r0, #0
 800ff44:	f43f af0c 	beq.w	800fd60 <_strtod_l+0x490>
 800ff48:	9b07      	ldr	r3, [sp, #28]
 800ff4a:	691a      	ldr	r2, [r3, #16]
 800ff4c:	3202      	adds	r2, #2
 800ff4e:	f103 010c 	add.w	r1, r3, #12
 800ff52:	0092      	lsls	r2, r2, #2
 800ff54:	300c      	adds	r0, #12
 800ff56:	f7fe fc85 	bl	800e864 <memcpy>
 800ff5a:	ec4b ab10 	vmov	d0, sl, fp
 800ff5e:	aa1a      	add	r2, sp, #104	; 0x68
 800ff60:	a919      	add	r1, sp, #100	; 0x64
 800ff62:	4620      	mov	r0, r4
 800ff64:	f002 fc50 	bl	8012808 <__d2b>
 800ff68:	ec4b ab18 	vmov	d8, sl, fp
 800ff6c:	9018      	str	r0, [sp, #96]	; 0x60
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	f43f aef6 	beq.w	800fd60 <_strtod_l+0x490>
 800ff74:	2101      	movs	r1, #1
 800ff76:	4620      	mov	r0, r4
 800ff78:	f002 f99a 	bl	80122b0 <__i2b>
 800ff7c:	4606      	mov	r6, r0
 800ff7e:	2800      	cmp	r0, #0
 800ff80:	f43f aeee 	beq.w	800fd60 <_strtod_l+0x490>
 800ff84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ff86:	9904      	ldr	r1, [sp, #16]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	bfab      	itete	ge
 800ff8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ff8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ff90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ff92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ff96:	bfac      	ite	ge
 800ff98:	eb03 0902 	addge.w	r9, r3, r2
 800ff9c:	1ad7      	sublt	r7, r2, r3
 800ff9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ffa0:	eba3 0801 	sub.w	r8, r3, r1
 800ffa4:	4490      	add	r8, r2
 800ffa6:	4ba1      	ldr	r3, [pc, #644]	; (801022c <_strtod_l+0x95c>)
 800ffa8:	f108 38ff 	add.w	r8, r8, #4294967295
 800ffac:	4598      	cmp	r8, r3
 800ffae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ffb2:	f280 80c7 	bge.w	8010144 <_strtod_l+0x874>
 800ffb6:	eba3 0308 	sub.w	r3, r3, r8
 800ffba:	2b1f      	cmp	r3, #31
 800ffbc:	eba2 0203 	sub.w	r2, r2, r3
 800ffc0:	f04f 0101 	mov.w	r1, #1
 800ffc4:	f300 80b1 	bgt.w	801012a <_strtod_l+0x85a>
 800ffc8:	fa01 f303 	lsl.w	r3, r1, r3
 800ffcc:	930d      	str	r3, [sp, #52]	; 0x34
 800ffce:	2300      	movs	r3, #0
 800ffd0:	9308      	str	r3, [sp, #32]
 800ffd2:	eb09 0802 	add.w	r8, r9, r2
 800ffd6:	9b04      	ldr	r3, [sp, #16]
 800ffd8:	45c1      	cmp	r9, r8
 800ffda:	4417      	add	r7, r2
 800ffdc:	441f      	add	r7, r3
 800ffde:	464b      	mov	r3, r9
 800ffe0:	bfa8      	it	ge
 800ffe2:	4643      	movge	r3, r8
 800ffe4:	42bb      	cmp	r3, r7
 800ffe6:	bfa8      	it	ge
 800ffe8:	463b      	movge	r3, r7
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	bfc2      	ittt	gt
 800ffee:	eba8 0803 	subgt.w	r8, r8, r3
 800fff2:	1aff      	subgt	r7, r7, r3
 800fff4:	eba9 0903 	subgt.w	r9, r9, r3
 800fff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	dd17      	ble.n	801002e <_strtod_l+0x75e>
 800fffe:	4631      	mov	r1, r6
 8010000:	461a      	mov	r2, r3
 8010002:	4620      	mov	r0, r4
 8010004:	f002 fa14 	bl	8012430 <__pow5mult>
 8010008:	4606      	mov	r6, r0
 801000a:	2800      	cmp	r0, #0
 801000c:	f43f aea8 	beq.w	800fd60 <_strtod_l+0x490>
 8010010:	4601      	mov	r1, r0
 8010012:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010014:	4620      	mov	r0, r4
 8010016:	f002 f961 	bl	80122dc <__multiply>
 801001a:	900b      	str	r0, [sp, #44]	; 0x2c
 801001c:	2800      	cmp	r0, #0
 801001e:	f43f ae9f 	beq.w	800fd60 <_strtod_l+0x490>
 8010022:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010024:	4620      	mov	r0, r4
 8010026:	f002 f841 	bl	80120ac <_Bfree>
 801002a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801002c:	9318      	str	r3, [sp, #96]	; 0x60
 801002e:	f1b8 0f00 	cmp.w	r8, #0
 8010032:	f300 808c 	bgt.w	801014e <_strtod_l+0x87e>
 8010036:	9b06      	ldr	r3, [sp, #24]
 8010038:	2b00      	cmp	r3, #0
 801003a:	dd08      	ble.n	801004e <_strtod_l+0x77e>
 801003c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801003e:	9905      	ldr	r1, [sp, #20]
 8010040:	4620      	mov	r0, r4
 8010042:	f002 f9f5 	bl	8012430 <__pow5mult>
 8010046:	9005      	str	r0, [sp, #20]
 8010048:	2800      	cmp	r0, #0
 801004a:	f43f ae89 	beq.w	800fd60 <_strtod_l+0x490>
 801004e:	2f00      	cmp	r7, #0
 8010050:	dd08      	ble.n	8010064 <_strtod_l+0x794>
 8010052:	9905      	ldr	r1, [sp, #20]
 8010054:	463a      	mov	r2, r7
 8010056:	4620      	mov	r0, r4
 8010058:	f002 fa44 	bl	80124e4 <__lshift>
 801005c:	9005      	str	r0, [sp, #20]
 801005e:	2800      	cmp	r0, #0
 8010060:	f43f ae7e 	beq.w	800fd60 <_strtod_l+0x490>
 8010064:	f1b9 0f00 	cmp.w	r9, #0
 8010068:	dd08      	ble.n	801007c <_strtod_l+0x7ac>
 801006a:	4631      	mov	r1, r6
 801006c:	464a      	mov	r2, r9
 801006e:	4620      	mov	r0, r4
 8010070:	f002 fa38 	bl	80124e4 <__lshift>
 8010074:	4606      	mov	r6, r0
 8010076:	2800      	cmp	r0, #0
 8010078:	f43f ae72 	beq.w	800fd60 <_strtod_l+0x490>
 801007c:	9a05      	ldr	r2, [sp, #20]
 801007e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010080:	4620      	mov	r0, r4
 8010082:	f002 fabb 	bl	80125fc <__mdiff>
 8010086:	4605      	mov	r5, r0
 8010088:	2800      	cmp	r0, #0
 801008a:	f43f ae69 	beq.w	800fd60 <_strtod_l+0x490>
 801008e:	68c3      	ldr	r3, [r0, #12]
 8010090:	930b      	str	r3, [sp, #44]	; 0x2c
 8010092:	2300      	movs	r3, #0
 8010094:	60c3      	str	r3, [r0, #12]
 8010096:	4631      	mov	r1, r6
 8010098:	f002 fa94 	bl	80125c4 <__mcmp>
 801009c:	2800      	cmp	r0, #0
 801009e:	da60      	bge.n	8010162 <_strtod_l+0x892>
 80100a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100a2:	ea53 030a 	orrs.w	r3, r3, sl
 80100a6:	f040 8082 	bne.w	80101ae <_strtod_l+0x8de>
 80100aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d17d      	bne.n	80101ae <_strtod_l+0x8de>
 80100b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100b6:	0d1b      	lsrs	r3, r3, #20
 80100b8:	051b      	lsls	r3, r3, #20
 80100ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80100be:	d976      	bls.n	80101ae <_strtod_l+0x8de>
 80100c0:	696b      	ldr	r3, [r5, #20]
 80100c2:	b913      	cbnz	r3, 80100ca <_strtod_l+0x7fa>
 80100c4:	692b      	ldr	r3, [r5, #16]
 80100c6:	2b01      	cmp	r3, #1
 80100c8:	dd71      	ble.n	80101ae <_strtod_l+0x8de>
 80100ca:	4629      	mov	r1, r5
 80100cc:	2201      	movs	r2, #1
 80100ce:	4620      	mov	r0, r4
 80100d0:	f002 fa08 	bl	80124e4 <__lshift>
 80100d4:	4631      	mov	r1, r6
 80100d6:	4605      	mov	r5, r0
 80100d8:	f002 fa74 	bl	80125c4 <__mcmp>
 80100dc:	2800      	cmp	r0, #0
 80100de:	dd66      	ble.n	80101ae <_strtod_l+0x8de>
 80100e0:	9904      	ldr	r1, [sp, #16]
 80100e2:	4a53      	ldr	r2, [pc, #332]	; (8010230 <_strtod_l+0x960>)
 80100e4:	465b      	mov	r3, fp
 80100e6:	2900      	cmp	r1, #0
 80100e8:	f000 8081 	beq.w	80101ee <_strtod_l+0x91e>
 80100ec:	ea02 010b 	and.w	r1, r2, fp
 80100f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80100f4:	dc7b      	bgt.n	80101ee <_strtod_l+0x91e>
 80100f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80100fa:	f77f aea9 	ble.w	800fe50 <_strtod_l+0x580>
 80100fe:	4b4d      	ldr	r3, [pc, #308]	; (8010234 <_strtod_l+0x964>)
 8010100:	4650      	mov	r0, sl
 8010102:	4659      	mov	r1, fp
 8010104:	2200      	movs	r2, #0
 8010106:	f7f0 fa97 	bl	8000638 <__aeabi_dmul>
 801010a:	460b      	mov	r3, r1
 801010c:	4303      	orrs	r3, r0
 801010e:	bf08      	it	eq
 8010110:	2322      	moveq	r3, #34	; 0x22
 8010112:	4682      	mov	sl, r0
 8010114:	468b      	mov	fp, r1
 8010116:	bf08      	it	eq
 8010118:	6023      	streq	r3, [r4, #0]
 801011a:	e62b      	b.n	800fd74 <_strtod_l+0x4a4>
 801011c:	f04f 32ff 	mov.w	r2, #4294967295
 8010120:	fa02 f303 	lsl.w	r3, r2, r3
 8010124:	ea03 0a0a 	and.w	sl, r3, sl
 8010128:	e6e3      	b.n	800fef2 <_strtod_l+0x622>
 801012a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801012e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010132:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010136:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801013a:	fa01 f308 	lsl.w	r3, r1, r8
 801013e:	9308      	str	r3, [sp, #32]
 8010140:	910d      	str	r1, [sp, #52]	; 0x34
 8010142:	e746      	b.n	800ffd2 <_strtod_l+0x702>
 8010144:	2300      	movs	r3, #0
 8010146:	9308      	str	r3, [sp, #32]
 8010148:	2301      	movs	r3, #1
 801014a:	930d      	str	r3, [sp, #52]	; 0x34
 801014c:	e741      	b.n	800ffd2 <_strtod_l+0x702>
 801014e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010150:	4642      	mov	r2, r8
 8010152:	4620      	mov	r0, r4
 8010154:	f002 f9c6 	bl	80124e4 <__lshift>
 8010158:	9018      	str	r0, [sp, #96]	; 0x60
 801015a:	2800      	cmp	r0, #0
 801015c:	f47f af6b 	bne.w	8010036 <_strtod_l+0x766>
 8010160:	e5fe      	b.n	800fd60 <_strtod_l+0x490>
 8010162:	465f      	mov	r7, fp
 8010164:	d16e      	bne.n	8010244 <_strtod_l+0x974>
 8010166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010168:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801016c:	b342      	cbz	r2, 80101c0 <_strtod_l+0x8f0>
 801016e:	4a32      	ldr	r2, [pc, #200]	; (8010238 <_strtod_l+0x968>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d128      	bne.n	80101c6 <_strtod_l+0x8f6>
 8010174:	9b04      	ldr	r3, [sp, #16]
 8010176:	4651      	mov	r1, sl
 8010178:	b1eb      	cbz	r3, 80101b6 <_strtod_l+0x8e6>
 801017a:	4b2d      	ldr	r3, [pc, #180]	; (8010230 <_strtod_l+0x960>)
 801017c:	403b      	ands	r3, r7
 801017e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010182:	f04f 32ff 	mov.w	r2, #4294967295
 8010186:	d819      	bhi.n	80101bc <_strtod_l+0x8ec>
 8010188:	0d1b      	lsrs	r3, r3, #20
 801018a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801018e:	fa02 f303 	lsl.w	r3, r2, r3
 8010192:	4299      	cmp	r1, r3
 8010194:	d117      	bne.n	80101c6 <_strtod_l+0x8f6>
 8010196:	4b29      	ldr	r3, [pc, #164]	; (801023c <_strtod_l+0x96c>)
 8010198:	429f      	cmp	r7, r3
 801019a:	d102      	bne.n	80101a2 <_strtod_l+0x8d2>
 801019c:	3101      	adds	r1, #1
 801019e:	f43f addf 	beq.w	800fd60 <_strtod_l+0x490>
 80101a2:	4b23      	ldr	r3, [pc, #140]	; (8010230 <_strtod_l+0x960>)
 80101a4:	403b      	ands	r3, r7
 80101a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80101aa:	f04f 0a00 	mov.w	sl, #0
 80101ae:	9b04      	ldr	r3, [sp, #16]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d1a4      	bne.n	80100fe <_strtod_l+0x82e>
 80101b4:	e5de      	b.n	800fd74 <_strtod_l+0x4a4>
 80101b6:	f04f 33ff 	mov.w	r3, #4294967295
 80101ba:	e7ea      	b.n	8010192 <_strtod_l+0x8c2>
 80101bc:	4613      	mov	r3, r2
 80101be:	e7e8      	b.n	8010192 <_strtod_l+0x8c2>
 80101c0:	ea53 030a 	orrs.w	r3, r3, sl
 80101c4:	d08c      	beq.n	80100e0 <_strtod_l+0x810>
 80101c6:	9b08      	ldr	r3, [sp, #32]
 80101c8:	b1db      	cbz	r3, 8010202 <_strtod_l+0x932>
 80101ca:	423b      	tst	r3, r7
 80101cc:	d0ef      	beq.n	80101ae <_strtod_l+0x8de>
 80101ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101d0:	9a04      	ldr	r2, [sp, #16]
 80101d2:	4650      	mov	r0, sl
 80101d4:	4659      	mov	r1, fp
 80101d6:	b1c3      	cbz	r3, 801020a <_strtod_l+0x93a>
 80101d8:	f7ff fb5d 	bl	800f896 <sulp>
 80101dc:	4602      	mov	r2, r0
 80101de:	460b      	mov	r3, r1
 80101e0:	ec51 0b18 	vmov	r0, r1, d8
 80101e4:	f7f0 f872 	bl	80002cc <__adddf3>
 80101e8:	4682      	mov	sl, r0
 80101ea:	468b      	mov	fp, r1
 80101ec:	e7df      	b.n	80101ae <_strtod_l+0x8de>
 80101ee:	4013      	ands	r3, r2
 80101f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80101f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80101f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80101fc:	f04f 3aff 	mov.w	sl, #4294967295
 8010200:	e7d5      	b.n	80101ae <_strtod_l+0x8de>
 8010202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010204:	ea13 0f0a 	tst.w	r3, sl
 8010208:	e7e0      	b.n	80101cc <_strtod_l+0x8fc>
 801020a:	f7ff fb44 	bl	800f896 <sulp>
 801020e:	4602      	mov	r2, r0
 8010210:	460b      	mov	r3, r1
 8010212:	ec51 0b18 	vmov	r0, r1, d8
 8010216:	f7f0 f857 	bl	80002c8 <__aeabi_dsub>
 801021a:	2200      	movs	r2, #0
 801021c:	2300      	movs	r3, #0
 801021e:	4682      	mov	sl, r0
 8010220:	468b      	mov	fp, r1
 8010222:	f7f0 fc71 	bl	8000b08 <__aeabi_dcmpeq>
 8010226:	2800      	cmp	r0, #0
 8010228:	d0c1      	beq.n	80101ae <_strtod_l+0x8de>
 801022a:	e611      	b.n	800fe50 <_strtod_l+0x580>
 801022c:	fffffc02 	.word	0xfffffc02
 8010230:	7ff00000 	.word	0x7ff00000
 8010234:	39500000 	.word	0x39500000
 8010238:	000fffff 	.word	0x000fffff
 801023c:	7fefffff 	.word	0x7fefffff
 8010240:	08014988 	.word	0x08014988
 8010244:	4631      	mov	r1, r6
 8010246:	4628      	mov	r0, r5
 8010248:	f002 fb3a 	bl	80128c0 <__ratio>
 801024c:	ec59 8b10 	vmov	r8, r9, d0
 8010250:	ee10 0a10 	vmov	r0, s0
 8010254:	2200      	movs	r2, #0
 8010256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801025a:	4649      	mov	r1, r9
 801025c:	f7f0 fc68 	bl	8000b30 <__aeabi_dcmple>
 8010260:	2800      	cmp	r0, #0
 8010262:	d07a      	beq.n	801035a <_strtod_l+0xa8a>
 8010264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010266:	2b00      	cmp	r3, #0
 8010268:	d04a      	beq.n	8010300 <_strtod_l+0xa30>
 801026a:	4b95      	ldr	r3, [pc, #596]	; (80104c0 <_strtod_l+0xbf0>)
 801026c:	2200      	movs	r2, #0
 801026e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010272:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80104c0 <_strtod_l+0xbf0>
 8010276:	f04f 0800 	mov.w	r8, #0
 801027a:	4b92      	ldr	r3, [pc, #584]	; (80104c4 <_strtod_l+0xbf4>)
 801027c:	403b      	ands	r3, r7
 801027e:	930d      	str	r3, [sp, #52]	; 0x34
 8010280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010282:	4b91      	ldr	r3, [pc, #580]	; (80104c8 <_strtod_l+0xbf8>)
 8010284:	429a      	cmp	r2, r3
 8010286:	f040 80b0 	bne.w	80103ea <_strtod_l+0xb1a>
 801028a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801028e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010292:	ec4b ab10 	vmov	d0, sl, fp
 8010296:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801029a:	f002 fa39 	bl	8012710 <__ulp>
 801029e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80102a2:	ec53 2b10 	vmov	r2, r3, d0
 80102a6:	f7f0 f9c7 	bl	8000638 <__aeabi_dmul>
 80102aa:	4652      	mov	r2, sl
 80102ac:	465b      	mov	r3, fp
 80102ae:	f7f0 f80d 	bl	80002cc <__adddf3>
 80102b2:	460b      	mov	r3, r1
 80102b4:	4983      	ldr	r1, [pc, #524]	; (80104c4 <_strtod_l+0xbf4>)
 80102b6:	4a85      	ldr	r2, [pc, #532]	; (80104cc <_strtod_l+0xbfc>)
 80102b8:	4019      	ands	r1, r3
 80102ba:	4291      	cmp	r1, r2
 80102bc:	4682      	mov	sl, r0
 80102be:	d960      	bls.n	8010382 <_strtod_l+0xab2>
 80102c0:	ee18 3a90 	vmov	r3, s17
 80102c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d104      	bne.n	80102d6 <_strtod_l+0xa06>
 80102cc:	ee18 3a10 	vmov	r3, s16
 80102d0:	3301      	adds	r3, #1
 80102d2:	f43f ad45 	beq.w	800fd60 <_strtod_l+0x490>
 80102d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80104d8 <_strtod_l+0xc08>
 80102da:	f04f 3aff 	mov.w	sl, #4294967295
 80102de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80102e0:	4620      	mov	r0, r4
 80102e2:	f001 fee3 	bl	80120ac <_Bfree>
 80102e6:	9905      	ldr	r1, [sp, #20]
 80102e8:	4620      	mov	r0, r4
 80102ea:	f001 fedf 	bl	80120ac <_Bfree>
 80102ee:	4631      	mov	r1, r6
 80102f0:	4620      	mov	r0, r4
 80102f2:	f001 fedb 	bl	80120ac <_Bfree>
 80102f6:	4629      	mov	r1, r5
 80102f8:	4620      	mov	r0, r4
 80102fa:	f001 fed7 	bl	80120ac <_Bfree>
 80102fe:	e61a      	b.n	800ff36 <_strtod_l+0x666>
 8010300:	f1ba 0f00 	cmp.w	sl, #0
 8010304:	d11b      	bne.n	801033e <_strtod_l+0xa6e>
 8010306:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801030a:	b9f3      	cbnz	r3, 801034a <_strtod_l+0xa7a>
 801030c:	4b6c      	ldr	r3, [pc, #432]	; (80104c0 <_strtod_l+0xbf0>)
 801030e:	2200      	movs	r2, #0
 8010310:	4640      	mov	r0, r8
 8010312:	4649      	mov	r1, r9
 8010314:	f7f0 fc02 	bl	8000b1c <__aeabi_dcmplt>
 8010318:	b9d0      	cbnz	r0, 8010350 <_strtod_l+0xa80>
 801031a:	4640      	mov	r0, r8
 801031c:	4649      	mov	r1, r9
 801031e:	4b6c      	ldr	r3, [pc, #432]	; (80104d0 <_strtod_l+0xc00>)
 8010320:	2200      	movs	r2, #0
 8010322:	f7f0 f989 	bl	8000638 <__aeabi_dmul>
 8010326:	4680      	mov	r8, r0
 8010328:	4689      	mov	r9, r1
 801032a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801032e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010332:	9315      	str	r3, [sp, #84]	; 0x54
 8010334:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010338:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801033c:	e79d      	b.n	801027a <_strtod_l+0x9aa>
 801033e:	f1ba 0f01 	cmp.w	sl, #1
 8010342:	d102      	bne.n	801034a <_strtod_l+0xa7a>
 8010344:	2f00      	cmp	r7, #0
 8010346:	f43f ad83 	beq.w	800fe50 <_strtod_l+0x580>
 801034a:	4b62      	ldr	r3, [pc, #392]	; (80104d4 <_strtod_l+0xc04>)
 801034c:	2200      	movs	r2, #0
 801034e:	e78e      	b.n	801026e <_strtod_l+0x99e>
 8010350:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80104d0 <_strtod_l+0xc00>
 8010354:	f04f 0800 	mov.w	r8, #0
 8010358:	e7e7      	b.n	801032a <_strtod_l+0xa5a>
 801035a:	4b5d      	ldr	r3, [pc, #372]	; (80104d0 <_strtod_l+0xc00>)
 801035c:	4640      	mov	r0, r8
 801035e:	4649      	mov	r1, r9
 8010360:	2200      	movs	r2, #0
 8010362:	f7f0 f969 	bl	8000638 <__aeabi_dmul>
 8010366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010368:	4680      	mov	r8, r0
 801036a:	4689      	mov	r9, r1
 801036c:	b933      	cbnz	r3, 801037c <_strtod_l+0xaac>
 801036e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010372:	900e      	str	r0, [sp, #56]	; 0x38
 8010374:	930f      	str	r3, [sp, #60]	; 0x3c
 8010376:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801037a:	e7dd      	b.n	8010338 <_strtod_l+0xa68>
 801037c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010380:	e7f9      	b.n	8010376 <_strtod_l+0xaa6>
 8010382:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010386:	9b04      	ldr	r3, [sp, #16]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d1a8      	bne.n	80102de <_strtod_l+0xa0e>
 801038c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010392:	0d1b      	lsrs	r3, r3, #20
 8010394:	051b      	lsls	r3, r3, #20
 8010396:	429a      	cmp	r2, r3
 8010398:	d1a1      	bne.n	80102de <_strtod_l+0xa0e>
 801039a:	4640      	mov	r0, r8
 801039c:	4649      	mov	r1, r9
 801039e:	f7f0 fcab 	bl	8000cf8 <__aeabi_d2lz>
 80103a2:	f7f0 f91b 	bl	80005dc <__aeabi_l2d>
 80103a6:	4602      	mov	r2, r0
 80103a8:	460b      	mov	r3, r1
 80103aa:	4640      	mov	r0, r8
 80103ac:	4649      	mov	r1, r9
 80103ae:	f7ef ff8b 	bl	80002c8 <__aeabi_dsub>
 80103b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80103b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80103b8:	ea43 030a 	orr.w	r3, r3, sl
 80103bc:	4313      	orrs	r3, r2
 80103be:	4680      	mov	r8, r0
 80103c0:	4689      	mov	r9, r1
 80103c2:	d055      	beq.n	8010470 <_strtod_l+0xba0>
 80103c4:	a336      	add	r3, pc, #216	; (adr r3, 80104a0 <_strtod_l+0xbd0>)
 80103c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ca:	f7f0 fba7 	bl	8000b1c <__aeabi_dcmplt>
 80103ce:	2800      	cmp	r0, #0
 80103d0:	f47f acd0 	bne.w	800fd74 <_strtod_l+0x4a4>
 80103d4:	a334      	add	r3, pc, #208	; (adr r3, 80104a8 <_strtod_l+0xbd8>)
 80103d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103da:	4640      	mov	r0, r8
 80103dc:	4649      	mov	r1, r9
 80103de:	f7f0 fbbb 	bl	8000b58 <__aeabi_dcmpgt>
 80103e2:	2800      	cmp	r0, #0
 80103e4:	f43f af7b 	beq.w	80102de <_strtod_l+0xa0e>
 80103e8:	e4c4      	b.n	800fd74 <_strtod_l+0x4a4>
 80103ea:	9b04      	ldr	r3, [sp, #16]
 80103ec:	b333      	cbz	r3, 801043c <_strtod_l+0xb6c>
 80103ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80103f4:	d822      	bhi.n	801043c <_strtod_l+0xb6c>
 80103f6:	a32e      	add	r3, pc, #184	; (adr r3, 80104b0 <_strtod_l+0xbe0>)
 80103f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fc:	4640      	mov	r0, r8
 80103fe:	4649      	mov	r1, r9
 8010400:	f7f0 fb96 	bl	8000b30 <__aeabi_dcmple>
 8010404:	b1a0      	cbz	r0, 8010430 <_strtod_l+0xb60>
 8010406:	4649      	mov	r1, r9
 8010408:	4640      	mov	r0, r8
 801040a:	f7f0 fbed 	bl	8000be8 <__aeabi_d2uiz>
 801040e:	2801      	cmp	r0, #1
 8010410:	bf38      	it	cc
 8010412:	2001      	movcc	r0, #1
 8010414:	f7f0 f896 	bl	8000544 <__aeabi_ui2d>
 8010418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801041a:	4680      	mov	r8, r0
 801041c:	4689      	mov	r9, r1
 801041e:	bb23      	cbnz	r3, 801046a <_strtod_l+0xb9a>
 8010420:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010424:	9010      	str	r0, [sp, #64]	; 0x40
 8010426:	9311      	str	r3, [sp, #68]	; 0x44
 8010428:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801042c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010432:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010434:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010438:	1a9b      	subs	r3, r3, r2
 801043a:	9309      	str	r3, [sp, #36]	; 0x24
 801043c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010440:	eeb0 0a48 	vmov.f32	s0, s16
 8010444:	eef0 0a68 	vmov.f32	s1, s17
 8010448:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801044c:	f002 f960 	bl	8012710 <__ulp>
 8010450:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010454:	ec53 2b10 	vmov	r2, r3, d0
 8010458:	f7f0 f8ee 	bl	8000638 <__aeabi_dmul>
 801045c:	ec53 2b18 	vmov	r2, r3, d8
 8010460:	f7ef ff34 	bl	80002cc <__adddf3>
 8010464:	4682      	mov	sl, r0
 8010466:	468b      	mov	fp, r1
 8010468:	e78d      	b.n	8010386 <_strtod_l+0xab6>
 801046a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801046e:	e7db      	b.n	8010428 <_strtod_l+0xb58>
 8010470:	a311      	add	r3, pc, #68	; (adr r3, 80104b8 <_strtod_l+0xbe8>)
 8010472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010476:	f7f0 fb51 	bl	8000b1c <__aeabi_dcmplt>
 801047a:	e7b2      	b.n	80103e2 <_strtod_l+0xb12>
 801047c:	2300      	movs	r3, #0
 801047e:	930a      	str	r3, [sp, #40]	; 0x28
 8010480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010482:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010484:	6013      	str	r3, [r2, #0]
 8010486:	f7ff ba6b 	b.w	800f960 <_strtod_l+0x90>
 801048a:	2a65      	cmp	r2, #101	; 0x65
 801048c:	f43f ab5f 	beq.w	800fb4e <_strtod_l+0x27e>
 8010490:	2a45      	cmp	r2, #69	; 0x45
 8010492:	f43f ab5c 	beq.w	800fb4e <_strtod_l+0x27e>
 8010496:	2301      	movs	r3, #1
 8010498:	f7ff bb94 	b.w	800fbc4 <_strtod_l+0x2f4>
 801049c:	f3af 8000 	nop.w
 80104a0:	94a03595 	.word	0x94a03595
 80104a4:	3fdfffff 	.word	0x3fdfffff
 80104a8:	35afe535 	.word	0x35afe535
 80104ac:	3fe00000 	.word	0x3fe00000
 80104b0:	ffc00000 	.word	0xffc00000
 80104b4:	41dfffff 	.word	0x41dfffff
 80104b8:	94a03595 	.word	0x94a03595
 80104bc:	3fcfffff 	.word	0x3fcfffff
 80104c0:	3ff00000 	.word	0x3ff00000
 80104c4:	7ff00000 	.word	0x7ff00000
 80104c8:	7fe00000 	.word	0x7fe00000
 80104cc:	7c9fffff 	.word	0x7c9fffff
 80104d0:	3fe00000 	.word	0x3fe00000
 80104d4:	bff00000 	.word	0xbff00000
 80104d8:	7fefffff 	.word	0x7fefffff

080104dc <_strtod_r>:
 80104dc:	4b01      	ldr	r3, [pc, #4]	; (80104e4 <_strtod_r+0x8>)
 80104de:	f7ff b9f7 	b.w	800f8d0 <_strtod_l>
 80104e2:	bf00      	nop
 80104e4:	20000178 	.word	0x20000178

080104e8 <_strtol_l.constprop.0>:
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104ee:	d001      	beq.n	80104f4 <_strtol_l.constprop.0+0xc>
 80104f0:	2b24      	cmp	r3, #36	; 0x24
 80104f2:	d906      	bls.n	8010502 <_strtol_l.constprop.0+0x1a>
 80104f4:	f7fe f98c 	bl	800e810 <__errno>
 80104f8:	2316      	movs	r3, #22
 80104fa:	6003      	str	r3, [r0, #0]
 80104fc:	2000      	movs	r0, #0
 80104fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010502:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80105e8 <_strtol_l.constprop.0+0x100>
 8010506:	460d      	mov	r5, r1
 8010508:	462e      	mov	r6, r5
 801050a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801050e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010512:	f017 0708 	ands.w	r7, r7, #8
 8010516:	d1f7      	bne.n	8010508 <_strtol_l.constprop.0+0x20>
 8010518:	2c2d      	cmp	r4, #45	; 0x2d
 801051a:	d132      	bne.n	8010582 <_strtol_l.constprop.0+0x9a>
 801051c:	782c      	ldrb	r4, [r5, #0]
 801051e:	2701      	movs	r7, #1
 8010520:	1cb5      	adds	r5, r6, #2
 8010522:	2b00      	cmp	r3, #0
 8010524:	d05b      	beq.n	80105de <_strtol_l.constprop.0+0xf6>
 8010526:	2b10      	cmp	r3, #16
 8010528:	d109      	bne.n	801053e <_strtol_l.constprop.0+0x56>
 801052a:	2c30      	cmp	r4, #48	; 0x30
 801052c:	d107      	bne.n	801053e <_strtol_l.constprop.0+0x56>
 801052e:	782c      	ldrb	r4, [r5, #0]
 8010530:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010534:	2c58      	cmp	r4, #88	; 0x58
 8010536:	d14d      	bne.n	80105d4 <_strtol_l.constprop.0+0xec>
 8010538:	786c      	ldrb	r4, [r5, #1]
 801053a:	2310      	movs	r3, #16
 801053c:	3502      	adds	r5, #2
 801053e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010542:	f108 38ff 	add.w	r8, r8, #4294967295
 8010546:	f04f 0c00 	mov.w	ip, #0
 801054a:	fbb8 f9f3 	udiv	r9, r8, r3
 801054e:	4666      	mov	r6, ip
 8010550:	fb03 8a19 	mls	sl, r3, r9, r8
 8010554:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010558:	f1be 0f09 	cmp.w	lr, #9
 801055c:	d816      	bhi.n	801058c <_strtol_l.constprop.0+0xa4>
 801055e:	4674      	mov	r4, lr
 8010560:	42a3      	cmp	r3, r4
 8010562:	dd24      	ble.n	80105ae <_strtol_l.constprop.0+0xc6>
 8010564:	f1bc 0f00 	cmp.w	ip, #0
 8010568:	db1e      	blt.n	80105a8 <_strtol_l.constprop.0+0xc0>
 801056a:	45b1      	cmp	r9, r6
 801056c:	d31c      	bcc.n	80105a8 <_strtol_l.constprop.0+0xc0>
 801056e:	d101      	bne.n	8010574 <_strtol_l.constprop.0+0x8c>
 8010570:	45a2      	cmp	sl, r4
 8010572:	db19      	blt.n	80105a8 <_strtol_l.constprop.0+0xc0>
 8010574:	fb06 4603 	mla	r6, r6, r3, r4
 8010578:	f04f 0c01 	mov.w	ip, #1
 801057c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010580:	e7e8      	b.n	8010554 <_strtol_l.constprop.0+0x6c>
 8010582:	2c2b      	cmp	r4, #43	; 0x2b
 8010584:	bf04      	itt	eq
 8010586:	782c      	ldrbeq	r4, [r5, #0]
 8010588:	1cb5      	addeq	r5, r6, #2
 801058a:	e7ca      	b.n	8010522 <_strtol_l.constprop.0+0x3a>
 801058c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010590:	f1be 0f19 	cmp.w	lr, #25
 8010594:	d801      	bhi.n	801059a <_strtol_l.constprop.0+0xb2>
 8010596:	3c37      	subs	r4, #55	; 0x37
 8010598:	e7e2      	b.n	8010560 <_strtol_l.constprop.0+0x78>
 801059a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801059e:	f1be 0f19 	cmp.w	lr, #25
 80105a2:	d804      	bhi.n	80105ae <_strtol_l.constprop.0+0xc6>
 80105a4:	3c57      	subs	r4, #87	; 0x57
 80105a6:	e7db      	b.n	8010560 <_strtol_l.constprop.0+0x78>
 80105a8:	f04f 3cff 	mov.w	ip, #4294967295
 80105ac:	e7e6      	b.n	801057c <_strtol_l.constprop.0+0x94>
 80105ae:	f1bc 0f00 	cmp.w	ip, #0
 80105b2:	da05      	bge.n	80105c0 <_strtol_l.constprop.0+0xd8>
 80105b4:	2322      	movs	r3, #34	; 0x22
 80105b6:	6003      	str	r3, [r0, #0]
 80105b8:	4646      	mov	r6, r8
 80105ba:	b942      	cbnz	r2, 80105ce <_strtol_l.constprop.0+0xe6>
 80105bc:	4630      	mov	r0, r6
 80105be:	e79e      	b.n	80104fe <_strtol_l.constprop.0+0x16>
 80105c0:	b107      	cbz	r7, 80105c4 <_strtol_l.constprop.0+0xdc>
 80105c2:	4276      	negs	r6, r6
 80105c4:	2a00      	cmp	r2, #0
 80105c6:	d0f9      	beq.n	80105bc <_strtol_l.constprop.0+0xd4>
 80105c8:	f1bc 0f00 	cmp.w	ip, #0
 80105cc:	d000      	beq.n	80105d0 <_strtol_l.constprop.0+0xe8>
 80105ce:	1e69      	subs	r1, r5, #1
 80105d0:	6011      	str	r1, [r2, #0]
 80105d2:	e7f3      	b.n	80105bc <_strtol_l.constprop.0+0xd4>
 80105d4:	2430      	movs	r4, #48	; 0x30
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d1b1      	bne.n	801053e <_strtol_l.constprop.0+0x56>
 80105da:	2308      	movs	r3, #8
 80105dc:	e7af      	b.n	801053e <_strtol_l.constprop.0+0x56>
 80105de:	2c30      	cmp	r4, #48	; 0x30
 80105e0:	d0a5      	beq.n	801052e <_strtol_l.constprop.0+0x46>
 80105e2:	230a      	movs	r3, #10
 80105e4:	e7ab      	b.n	801053e <_strtol_l.constprop.0+0x56>
 80105e6:	bf00      	nop
 80105e8:	08014821 	.word	0x08014821

080105ec <_strtol_r>:
 80105ec:	f7ff bf7c 	b.w	80104e8 <_strtol_l.constprop.0>

080105f0 <__swbuf_r>:
 80105f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105f2:	460e      	mov	r6, r1
 80105f4:	4614      	mov	r4, r2
 80105f6:	4605      	mov	r5, r0
 80105f8:	b118      	cbz	r0, 8010602 <__swbuf_r+0x12>
 80105fa:	6983      	ldr	r3, [r0, #24]
 80105fc:	b90b      	cbnz	r3, 8010602 <__swbuf_r+0x12>
 80105fe:	f001 f86f 	bl	80116e0 <__sinit>
 8010602:	4b21      	ldr	r3, [pc, #132]	; (8010688 <__swbuf_r+0x98>)
 8010604:	429c      	cmp	r4, r3
 8010606:	d12b      	bne.n	8010660 <__swbuf_r+0x70>
 8010608:	686c      	ldr	r4, [r5, #4]
 801060a:	69a3      	ldr	r3, [r4, #24]
 801060c:	60a3      	str	r3, [r4, #8]
 801060e:	89a3      	ldrh	r3, [r4, #12]
 8010610:	071a      	lsls	r2, r3, #28
 8010612:	d52f      	bpl.n	8010674 <__swbuf_r+0x84>
 8010614:	6923      	ldr	r3, [r4, #16]
 8010616:	b36b      	cbz	r3, 8010674 <__swbuf_r+0x84>
 8010618:	6923      	ldr	r3, [r4, #16]
 801061a:	6820      	ldr	r0, [r4, #0]
 801061c:	1ac0      	subs	r0, r0, r3
 801061e:	6963      	ldr	r3, [r4, #20]
 8010620:	b2f6      	uxtb	r6, r6
 8010622:	4283      	cmp	r3, r0
 8010624:	4637      	mov	r7, r6
 8010626:	dc04      	bgt.n	8010632 <__swbuf_r+0x42>
 8010628:	4621      	mov	r1, r4
 801062a:	4628      	mov	r0, r5
 801062c:	f000 ffc4 	bl	80115b8 <_fflush_r>
 8010630:	bb30      	cbnz	r0, 8010680 <__swbuf_r+0x90>
 8010632:	68a3      	ldr	r3, [r4, #8]
 8010634:	3b01      	subs	r3, #1
 8010636:	60a3      	str	r3, [r4, #8]
 8010638:	6823      	ldr	r3, [r4, #0]
 801063a:	1c5a      	adds	r2, r3, #1
 801063c:	6022      	str	r2, [r4, #0]
 801063e:	701e      	strb	r6, [r3, #0]
 8010640:	6963      	ldr	r3, [r4, #20]
 8010642:	3001      	adds	r0, #1
 8010644:	4283      	cmp	r3, r0
 8010646:	d004      	beq.n	8010652 <__swbuf_r+0x62>
 8010648:	89a3      	ldrh	r3, [r4, #12]
 801064a:	07db      	lsls	r3, r3, #31
 801064c:	d506      	bpl.n	801065c <__swbuf_r+0x6c>
 801064e:	2e0a      	cmp	r6, #10
 8010650:	d104      	bne.n	801065c <__swbuf_r+0x6c>
 8010652:	4621      	mov	r1, r4
 8010654:	4628      	mov	r0, r5
 8010656:	f000 ffaf 	bl	80115b8 <_fflush_r>
 801065a:	b988      	cbnz	r0, 8010680 <__swbuf_r+0x90>
 801065c:	4638      	mov	r0, r7
 801065e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010660:	4b0a      	ldr	r3, [pc, #40]	; (801068c <__swbuf_r+0x9c>)
 8010662:	429c      	cmp	r4, r3
 8010664:	d101      	bne.n	801066a <__swbuf_r+0x7a>
 8010666:	68ac      	ldr	r4, [r5, #8]
 8010668:	e7cf      	b.n	801060a <__swbuf_r+0x1a>
 801066a:	4b09      	ldr	r3, [pc, #36]	; (8010690 <__swbuf_r+0xa0>)
 801066c:	429c      	cmp	r4, r3
 801066e:	bf08      	it	eq
 8010670:	68ec      	ldreq	r4, [r5, #12]
 8010672:	e7ca      	b.n	801060a <__swbuf_r+0x1a>
 8010674:	4621      	mov	r1, r4
 8010676:	4628      	mov	r0, r5
 8010678:	f000 f81e 	bl	80106b8 <__swsetup_r>
 801067c:	2800      	cmp	r0, #0
 801067e:	d0cb      	beq.n	8010618 <__swbuf_r+0x28>
 8010680:	f04f 37ff 	mov.w	r7, #4294967295
 8010684:	e7ea      	b.n	801065c <__swbuf_r+0x6c>
 8010686:	bf00      	nop
 8010688:	08014a60 	.word	0x08014a60
 801068c:	08014a80 	.word	0x08014a80
 8010690:	08014a40 	.word	0x08014a40

08010694 <_write_r>:
 8010694:	b538      	push	{r3, r4, r5, lr}
 8010696:	4d07      	ldr	r5, [pc, #28]	; (80106b4 <_write_r+0x20>)
 8010698:	4604      	mov	r4, r0
 801069a:	4608      	mov	r0, r1
 801069c:	4611      	mov	r1, r2
 801069e:	2200      	movs	r2, #0
 80106a0:	602a      	str	r2, [r5, #0]
 80106a2:	461a      	mov	r2, r3
 80106a4:	f7f3 fa0e 	bl	8003ac4 <_write>
 80106a8:	1c43      	adds	r3, r0, #1
 80106aa:	d102      	bne.n	80106b2 <_write_r+0x1e>
 80106ac:	682b      	ldr	r3, [r5, #0]
 80106ae:	b103      	cbz	r3, 80106b2 <_write_r+0x1e>
 80106b0:	6023      	str	r3, [r4, #0]
 80106b2:	bd38      	pop	{r3, r4, r5, pc}
 80106b4:	2000314c 	.word	0x2000314c

080106b8 <__swsetup_r>:
 80106b8:	4b32      	ldr	r3, [pc, #200]	; (8010784 <__swsetup_r+0xcc>)
 80106ba:	b570      	push	{r4, r5, r6, lr}
 80106bc:	681d      	ldr	r5, [r3, #0]
 80106be:	4606      	mov	r6, r0
 80106c0:	460c      	mov	r4, r1
 80106c2:	b125      	cbz	r5, 80106ce <__swsetup_r+0x16>
 80106c4:	69ab      	ldr	r3, [r5, #24]
 80106c6:	b913      	cbnz	r3, 80106ce <__swsetup_r+0x16>
 80106c8:	4628      	mov	r0, r5
 80106ca:	f001 f809 	bl	80116e0 <__sinit>
 80106ce:	4b2e      	ldr	r3, [pc, #184]	; (8010788 <__swsetup_r+0xd0>)
 80106d0:	429c      	cmp	r4, r3
 80106d2:	d10f      	bne.n	80106f4 <__swsetup_r+0x3c>
 80106d4:	686c      	ldr	r4, [r5, #4]
 80106d6:	89a3      	ldrh	r3, [r4, #12]
 80106d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80106dc:	0719      	lsls	r1, r3, #28
 80106de:	d42c      	bmi.n	801073a <__swsetup_r+0x82>
 80106e0:	06dd      	lsls	r5, r3, #27
 80106e2:	d411      	bmi.n	8010708 <__swsetup_r+0x50>
 80106e4:	2309      	movs	r3, #9
 80106e6:	6033      	str	r3, [r6, #0]
 80106e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80106ec:	81a3      	strh	r3, [r4, #12]
 80106ee:	f04f 30ff 	mov.w	r0, #4294967295
 80106f2:	e03e      	b.n	8010772 <__swsetup_r+0xba>
 80106f4:	4b25      	ldr	r3, [pc, #148]	; (801078c <__swsetup_r+0xd4>)
 80106f6:	429c      	cmp	r4, r3
 80106f8:	d101      	bne.n	80106fe <__swsetup_r+0x46>
 80106fa:	68ac      	ldr	r4, [r5, #8]
 80106fc:	e7eb      	b.n	80106d6 <__swsetup_r+0x1e>
 80106fe:	4b24      	ldr	r3, [pc, #144]	; (8010790 <__swsetup_r+0xd8>)
 8010700:	429c      	cmp	r4, r3
 8010702:	bf08      	it	eq
 8010704:	68ec      	ldreq	r4, [r5, #12]
 8010706:	e7e6      	b.n	80106d6 <__swsetup_r+0x1e>
 8010708:	0758      	lsls	r0, r3, #29
 801070a:	d512      	bpl.n	8010732 <__swsetup_r+0x7a>
 801070c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801070e:	b141      	cbz	r1, 8010722 <__swsetup_r+0x6a>
 8010710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010714:	4299      	cmp	r1, r3
 8010716:	d002      	beq.n	801071e <__swsetup_r+0x66>
 8010718:	4630      	mov	r0, r6
 801071a:	f002 f95f 	bl	80129dc <_free_r>
 801071e:	2300      	movs	r3, #0
 8010720:	6363      	str	r3, [r4, #52]	; 0x34
 8010722:	89a3      	ldrh	r3, [r4, #12]
 8010724:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010728:	81a3      	strh	r3, [r4, #12]
 801072a:	2300      	movs	r3, #0
 801072c:	6063      	str	r3, [r4, #4]
 801072e:	6923      	ldr	r3, [r4, #16]
 8010730:	6023      	str	r3, [r4, #0]
 8010732:	89a3      	ldrh	r3, [r4, #12]
 8010734:	f043 0308 	orr.w	r3, r3, #8
 8010738:	81a3      	strh	r3, [r4, #12]
 801073a:	6923      	ldr	r3, [r4, #16]
 801073c:	b94b      	cbnz	r3, 8010752 <__swsetup_r+0x9a>
 801073e:	89a3      	ldrh	r3, [r4, #12]
 8010740:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010748:	d003      	beq.n	8010752 <__swsetup_r+0x9a>
 801074a:	4621      	mov	r1, r4
 801074c:	4630      	mov	r0, r6
 801074e:	f001 fc13 	bl	8011f78 <__smakebuf_r>
 8010752:	89a0      	ldrh	r0, [r4, #12]
 8010754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010758:	f010 0301 	ands.w	r3, r0, #1
 801075c:	d00a      	beq.n	8010774 <__swsetup_r+0xbc>
 801075e:	2300      	movs	r3, #0
 8010760:	60a3      	str	r3, [r4, #8]
 8010762:	6963      	ldr	r3, [r4, #20]
 8010764:	425b      	negs	r3, r3
 8010766:	61a3      	str	r3, [r4, #24]
 8010768:	6923      	ldr	r3, [r4, #16]
 801076a:	b943      	cbnz	r3, 801077e <__swsetup_r+0xc6>
 801076c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010770:	d1ba      	bne.n	80106e8 <__swsetup_r+0x30>
 8010772:	bd70      	pop	{r4, r5, r6, pc}
 8010774:	0781      	lsls	r1, r0, #30
 8010776:	bf58      	it	pl
 8010778:	6963      	ldrpl	r3, [r4, #20]
 801077a:	60a3      	str	r3, [r4, #8]
 801077c:	e7f4      	b.n	8010768 <__swsetup_r+0xb0>
 801077e:	2000      	movs	r0, #0
 8010780:	e7f7      	b.n	8010772 <__swsetup_r+0xba>
 8010782:	bf00      	nop
 8010784:	20000110 	.word	0x20000110
 8010788:	08014a60 	.word	0x08014a60
 801078c:	08014a80 	.word	0x08014a80
 8010790:	08014a40 	.word	0x08014a40

08010794 <_close_r>:
 8010794:	b538      	push	{r3, r4, r5, lr}
 8010796:	4d06      	ldr	r5, [pc, #24]	; (80107b0 <_close_r+0x1c>)
 8010798:	2300      	movs	r3, #0
 801079a:	4604      	mov	r4, r0
 801079c:	4608      	mov	r0, r1
 801079e:	602b      	str	r3, [r5, #0]
 80107a0:	f7f3 fcf7 	bl	8004192 <_close>
 80107a4:	1c43      	adds	r3, r0, #1
 80107a6:	d102      	bne.n	80107ae <_close_r+0x1a>
 80107a8:	682b      	ldr	r3, [r5, #0]
 80107aa:	b103      	cbz	r3, 80107ae <_close_r+0x1a>
 80107ac:	6023      	str	r3, [r4, #0]
 80107ae:	bd38      	pop	{r3, r4, r5, pc}
 80107b0:	2000314c 	.word	0x2000314c

080107b4 <quorem>:
 80107b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b8:	6903      	ldr	r3, [r0, #16]
 80107ba:	690c      	ldr	r4, [r1, #16]
 80107bc:	42a3      	cmp	r3, r4
 80107be:	4607      	mov	r7, r0
 80107c0:	f2c0 8081 	blt.w	80108c6 <quorem+0x112>
 80107c4:	3c01      	subs	r4, #1
 80107c6:	f101 0814 	add.w	r8, r1, #20
 80107ca:	f100 0514 	add.w	r5, r0, #20
 80107ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107d2:	9301      	str	r3, [sp, #4]
 80107d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80107d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107dc:	3301      	adds	r3, #1
 80107de:	429a      	cmp	r2, r3
 80107e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80107e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80107e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80107ec:	d331      	bcc.n	8010852 <quorem+0x9e>
 80107ee:	f04f 0e00 	mov.w	lr, #0
 80107f2:	4640      	mov	r0, r8
 80107f4:	46ac      	mov	ip, r5
 80107f6:	46f2      	mov	sl, lr
 80107f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80107fc:	b293      	uxth	r3, r2
 80107fe:	fb06 e303 	mla	r3, r6, r3, lr
 8010802:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010806:	b29b      	uxth	r3, r3
 8010808:	ebaa 0303 	sub.w	r3, sl, r3
 801080c:	f8dc a000 	ldr.w	sl, [ip]
 8010810:	0c12      	lsrs	r2, r2, #16
 8010812:	fa13 f38a 	uxtah	r3, r3, sl
 8010816:	fb06 e202 	mla	r2, r6, r2, lr
 801081a:	9300      	str	r3, [sp, #0]
 801081c:	9b00      	ldr	r3, [sp, #0]
 801081e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010822:	b292      	uxth	r2, r2
 8010824:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010828:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801082c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010830:	4581      	cmp	r9, r0
 8010832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010836:	f84c 3b04 	str.w	r3, [ip], #4
 801083a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801083e:	d2db      	bcs.n	80107f8 <quorem+0x44>
 8010840:	f855 300b 	ldr.w	r3, [r5, fp]
 8010844:	b92b      	cbnz	r3, 8010852 <quorem+0x9e>
 8010846:	9b01      	ldr	r3, [sp, #4]
 8010848:	3b04      	subs	r3, #4
 801084a:	429d      	cmp	r5, r3
 801084c:	461a      	mov	r2, r3
 801084e:	d32e      	bcc.n	80108ae <quorem+0xfa>
 8010850:	613c      	str	r4, [r7, #16]
 8010852:	4638      	mov	r0, r7
 8010854:	f001 feb6 	bl	80125c4 <__mcmp>
 8010858:	2800      	cmp	r0, #0
 801085a:	db24      	blt.n	80108a6 <quorem+0xf2>
 801085c:	3601      	adds	r6, #1
 801085e:	4628      	mov	r0, r5
 8010860:	f04f 0c00 	mov.w	ip, #0
 8010864:	f858 2b04 	ldr.w	r2, [r8], #4
 8010868:	f8d0 e000 	ldr.w	lr, [r0]
 801086c:	b293      	uxth	r3, r2
 801086e:	ebac 0303 	sub.w	r3, ip, r3
 8010872:	0c12      	lsrs	r2, r2, #16
 8010874:	fa13 f38e 	uxtah	r3, r3, lr
 8010878:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801087c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010880:	b29b      	uxth	r3, r3
 8010882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010886:	45c1      	cmp	r9, r8
 8010888:	f840 3b04 	str.w	r3, [r0], #4
 801088c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010890:	d2e8      	bcs.n	8010864 <quorem+0xb0>
 8010892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801089a:	b922      	cbnz	r2, 80108a6 <quorem+0xf2>
 801089c:	3b04      	subs	r3, #4
 801089e:	429d      	cmp	r5, r3
 80108a0:	461a      	mov	r2, r3
 80108a2:	d30a      	bcc.n	80108ba <quorem+0x106>
 80108a4:	613c      	str	r4, [r7, #16]
 80108a6:	4630      	mov	r0, r6
 80108a8:	b003      	add	sp, #12
 80108aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ae:	6812      	ldr	r2, [r2, #0]
 80108b0:	3b04      	subs	r3, #4
 80108b2:	2a00      	cmp	r2, #0
 80108b4:	d1cc      	bne.n	8010850 <quorem+0x9c>
 80108b6:	3c01      	subs	r4, #1
 80108b8:	e7c7      	b.n	801084a <quorem+0x96>
 80108ba:	6812      	ldr	r2, [r2, #0]
 80108bc:	3b04      	subs	r3, #4
 80108be:	2a00      	cmp	r2, #0
 80108c0:	d1f0      	bne.n	80108a4 <quorem+0xf0>
 80108c2:	3c01      	subs	r4, #1
 80108c4:	e7eb      	b.n	801089e <quorem+0xea>
 80108c6:	2000      	movs	r0, #0
 80108c8:	e7ee      	b.n	80108a8 <quorem+0xf4>
 80108ca:	0000      	movs	r0, r0
 80108cc:	0000      	movs	r0, r0
	...

080108d0 <_dtoa_r>:
 80108d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d4:	ed2d 8b04 	vpush	{d8-d9}
 80108d8:	ec57 6b10 	vmov	r6, r7, d0
 80108dc:	b093      	sub	sp, #76	; 0x4c
 80108de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80108e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80108e4:	9106      	str	r1, [sp, #24]
 80108e6:	ee10 aa10 	vmov	sl, s0
 80108ea:	4604      	mov	r4, r0
 80108ec:	9209      	str	r2, [sp, #36]	; 0x24
 80108ee:	930c      	str	r3, [sp, #48]	; 0x30
 80108f0:	46bb      	mov	fp, r7
 80108f2:	b975      	cbnz	r5, 8010912 <_dtoa_r+0x42>
 80108f4:	2010      	movs	r0, #16
 80108f6:	f001 fb7f 	bl	8011ff8 <malloc>
 80108fa:	4602      	mov	r2, r0
 80108fc:	6260      	str	r0, [r4, #36]	; 0x24
 80108fe:	b920      	cbnz	r0, 801090a <_dtoa_r+0x3a>
 8010900:	4ba7      	ldr	r3, [pc, #668]	; (8010ba0 <_dtoa_r+0x2d0>)
 8010902:	21ea      	movs	r1, #234	; 0xea
 8010904:	48a7      	ldr	r0, [pc, #668]	; (8010ba4 <_dtoa_r+0x2d4>)
 8010906:	f003 f857 	bl	80139b8 <__assert_func>
 801090a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801090e:	6005      	str	r5, [r0, #0]
 8010910:	60c5      	str	r5, [r0, #12]
 8010912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010914:	6819      	ldr	r1, [r3, #0]
 8010916:	b151      	cbz	r1, 801092e <_dtoa_r+0x5e>
 8010918:	685a      	ldr	r2, [r3, #4]
 801091a:	604a      	str	r2, [r1, #4]
 801091c:	2301      	movs	r3, #1
 801091e:	4093      	lsls	r3, r2
 8010920:	608b      	str	r3, [r1, #8]
 8010922:	4620      	mov	r0, r4
 8010924:	f001 fbc2 	bl	80120ac <_Bfree>
 8010928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801092a:	2200      	movs	r2, #0
 801092c:	601a      	str	r2, [r3, #0]
 801092e:	1e3b      	subs	r3, r7, #0
 8010930:	bfaa      	itet	ge
 8010932:	2300      	movge	r3, #0
 8010934:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010938:	f8c8 3000 	strge.w	r3, [r8]
 801093c:	4b9a      	ldr	r3, [pc, #616]	; (8010ba8 <_dtoa_r+0x2d8>)
 801093e:	bfbc      	itt	lt
 8010940:	2201      	movlt	r2, #1
 8010942:	f8c8 2000 	strlt.w	r2, [r8]
 8010946:	ea33 030b 	bics.w	r3, r3, fp
 801094a:	d11b      	bne.n	8010984 <_dtoa_r+0xb4>
 801094c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801094e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010952:	6013      	str	r3, [r2, #0]
 8010954:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010958:	4333      	orrs	r3, r6
 801095a:	f000 8592 	beq.w	8011482 <_dtoa_r+0xbb2>
 801095e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010960:	b963      	cbnz	r3, 801097c <_dtoa_r+0xac>
 8010962:	4b92      	ldr	r3, [pc, #584]	; (8010bac <_dtoa_r+0x2dc>)
 8010964:	e022      	b.n	80109ac <_dtoa_r+0xdc>
 8010966:	4b92      	ldr	r3, [pc, #584]	; (8010bb0 <_dtoa_r+0x2e0>)
 8010968:	9301      	str	r3, [sp, #4]
 801096a:	3308      	adds	r3, #8
 801096c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801096e:	6013      	str	r3, [r2, #0]
 8010970:	9801      	ldr	r0, [sp, #4]
 8010972:	b013      	add	sp, #76	; 0x4c
 8010974:	ecbd 8b04 	vpop	{d8-d9}
 8010978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801097c:	4b8b      	ldr	r3, [pc, #556]	; (8010bac <_dtoa_r+0x2dc>)
 801097e:	9301      	str	r3, [sp, #4]
 8010980:	3303      	adds	r3, #3
 8010982:	e7f3      	b.n	801096c <_dtoa_r+0x9c>
 8010984:	2200      	movs	r2, #0
 8010986:	2300      	movs	r3, #0
 8010988:	4650      	mov	r0, sl
 801098a:	4659      	mov	r1, fp
 801098c:	f7f0 f8bc 	bl	8000b08 <__aeabi_dcmpeq>
 8010990:	ec4b ab19 	vmov	d9, sl, fp
 8010994:	4680      	mov	r8, r0
 8010996:	b158      	cbz	r0, 80109b0 <_dtoa_r+0xe0>
 8010998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801099a:	2301      	movs	r3, #1
 801099c:	6013      	str	r3, [r2, #0]
 801099e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	f000 856b 	beq.w	801147c <_dtoa_r+0xbac>
 80109a6:	4883      	ldr	r0, [pc, #524]	; (8010bb4 <_dtoa_r+0x2e4>)
 80109a8:	6018      	str	r0, [r3, #0]
 80109aa:	1e43      	subs	r3, r0, #1
 80109ac:	9301      	str	r3, [sp, #4]
 80109ae:	e7df      	b.n	8010970 <_dtoa_r+0xa0>
 80109b0:	ec4b ab10 	vmov	d0, sl, fp
 80109b4:	aa10      	add	r2, sp, #64	; 0x40
 80109b6:	a911      	add	r1, sp, #68	; 0x44
 80109b8:	4620      	mov	r0, r4
 80109ba:	f001 ff25 	bl	8012808 <__d2b>
 80109be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80109c2:	ee08 0a10 	vmov	s16, r0
 80109c6:	2d00      	cmp	r5, #0
 80109c8:	f000 8084 	beq.w	8010ad4 <_dtoa_r+0x204>
 80109cc:	ee19 3a90 	vmov	r3, s19
 80109d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80109d8:	4656      	mov	r6, sl
 80109da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80109de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80109e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80109e6:	4b74      	ldr	r3, [pc, #464]	; (8010bb8 <_dtoa_r+0x2e8>)
 80109e8:	2200      	movs	r2, #0
 80109ea:	4630      	mov	r0, r6
 80109ec:	4639      	mov	r1, r7
 80109ee:	f7ef fc6b 	bl	80002c8 <__aeabi_dsub>
 80109f2:	a365      	add	r3, pc, #404	; (adr r3, 8010b88 <_dtoa_r+0x2b8>)
 80109f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f8:	f7ef fe1e 	bl	8000638 <__aeabi_dmul>
 80109fc:	a364      	add	r3, pc, #400	; (adr r3, 8010b90 <_dtoa_r+0x2c0>)
 80109fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a02:	f7ef fc63 	bl	80002cc <__adddf3>
 8010a06:	4606      	mov	r6, r0
 8010a08:	4628      	mov	r0, r5
 8010a0a:	460f      	mov	r7, r1
 8010a0c:	f7ef fdaa 	bl	8000564 <__aeabi_i2d>
 8010a10:	a361      	add	r3, pc, #388	; (adr r3, 8010b98 <_dtoa_r+0x2c8>)
 8010a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a16:	f7ef fe0f 	bl	8000638 <__aeabi_dmul>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	460b      	mov	r3, r1
 8010a1e:	4630      	mov	r0, r6
 8010a20:	4639      	mov	r1, r7
 8010a22:	f7ef fc53 	bl	80002cc <__adddf3>
 8010a26:	4606      	mov	r6, r0
 8010a28:	460f      	mov	r7, r1
 8010a2a:	f7f0 f8b5 	bl	8000b98 <__aeabi_d2iz>
 8010a2e:	2200      	movs	r2, #0
 8010a30:	9000      	str	r0, [sp, #0]
 8010a32:	2300      	movs	r3, #0
 8010a34:	4630      	mov	r0, r6
 8010a36:	4639      	mov	r1, r7
 8010a38:	f7f0 f870 	bl	8000b1c <__aeabi_dcmplt>
 8010a3c:	b150      	cbz	r0, 8010a54 <_dtoa_r+0x184>
 8010a3e:	9800      	ldr	r0, [sp, #0]
 8010a40:	f7ef fd90 	bl	8000564 <__aeabi_i2d>
 8010a44:	4632      	mov	r2, r6
 8010a46:	463b      	mov	r3, r7
 8010a48:	f7f0 f85e 	bl	8000b08 <__aeabi_dcmpeq>
 8010a4c:	b910      	cbnz	r0, 8010a54 <_dtoa_r+0x184>
 8010a4e:	9b00      	ldr	r3, [sp, #0]
 8010a50:	3b01      	subs	r3, #1
 8010a52:	9300      	str	r3, [sp, #0]
 8010a54:	9b00      	ldr	r3, [sp, #0]
 8010a56:	2b16      	cmp	r3, #22
 8010a58:	d85a      	bhi.n	8010b10 <_dtoa_r+0x240>
 8010a5a:	9a00      	ldr	r2, [sp, #0]
 8010a5c:	4b57      	ldr	r3, [pc, #348]	; (8010bbc <_dtoa_r+0x2ec>)
 8010a5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a66:	ec51 0b19 	vmov	r0, r1, d9
 8010a6a:	f7f0 f857 	bl	8000b1c <__aeabi_dcmplt>
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	d050      	beq.n	8010b14 <_dtoa_r+0x244>
 8010a72:	9b00      	ldr	r3, [sp, #0]
 8010a74:	3b01      	subs	r3, #1
 8010a76:	9300      	str	r3, [sp, #0]
 8010a78:	2300      	movs	r3, #0
 8010a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a7e:	1b5d      	subs	r5, r3, r5
 8010a80:	1e6b      	subs	r3, r5, #1
 8010a82:	9305      	str	r3, [sp, #20]
 8010a84:	bf45      	ittet	mi
 8010a86:	f1c5 0301 	rsbmi	r3, r5, #1
 8010a8a:	9304      	strmi	r3, [sp, #16]
 8010a8c:	2300      	movpl	r3, #0
 8010a8e:	2300      	movmi	r3, #0
 8010a90:	bf4c      	ite	mi
 8010a92:	9305      	strmi	r3, [sp, #20]
 8010a94:	9304      	strpl	r3, [sp, #16]
 8010a96:	9b00      	ldr	r3, [sp, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	db3d      	blt.n	8010b18 <_dtoa_r+0x248>
 8010a9c:	9b05      	ldr	r3, [sp, #20]
 8010a9e:	9a00      	ldr	r2, [sp, #0]
 8010aa0:	920a      	str	r2, [sp, #40]	; 0x28
 8010aa2:	4413      	add	r3, r2
 8010aa4:	9305      	str	r3, [sp, #20]
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	9307      	str	r3, [sp, #28]
 8010aaa:	9b06      	ldr	r3, [sp, #24]
 8010aac:	2b09      	cmp	r3, #9
 8010aae:	f200 8089 	bhi.w	8010bc4 <_dtoa_r+0x2f4>
 8010ab2:	2b05      	cmp	r3, #5
 8010ab4:	bfc4      	itt	gt
 8010ab6:	3b04      	subgt	r3, #4
 8010ab8:	9306      	strgt	r3, [sp, #24]
 8010aba:	9b06      	ldr	r3, [sp, #24]
 8010abc:	f1a3 0302 	sub.w	r3, r3, #2
 8010ac0:	bfcc      	ite	gt
 8010ac2:	2500      	movgt	r5, #0
 8010ac4:	2501      	movle	r5, #1
 8010ac6:	2b03      	cmp	r3, #3
 8010ac8:	f200 8087 	bhi.w	8010bda <_dtoa_r+0x30a>
 8010acc:	e8df f003 	tbb	[pc, r3]
 8010ad0:	59383a2d 	.word	0x59383a2d
 8010ad4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010ad8:	441d      	add	r5, r3
 8010ada:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010ade:	2b20      	cmp	r3, #32
 8010ae0:	bfc1      	itttt	gt
 8010ae2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010ae6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010aea:	fa0b f303 	lslgt.w	r3, fp, r3
 8010aee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010af2:	bfda      	itte	le
 8010af4:	f1c3 0320 	rsble	r3, r3, #32
 8010af8:	fa06 f003 	lslle.w	r0, r6, r3
 8010afc:	4318      	orrgt	r0, r3
 8010afe:	f7ef fd21 	bl	8000544 <__aeabi_ui2d>
 8010b02:	2301      	movs	r3, #1
 8010b04:	4606      	mov	r6, r0
 8010b06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010b0a:	3d01      	subs	r5, #1
 8010b0c:	930e      	str	r3, [sp, #56]	; 0x38
 8010b0e:	e76a      	b.n	80109e6 <_dtoa_r+0x116>
 8010b10:	2301      	movs	r3, #1
 8010b12:	e7b2      	b.n	8010a7a <_dtoa_r+0x1aa>
 8010b14:	900b      	str	r0, [sp, #44]	; 0x2c
 8010b16:	e7b1      	b.n	8010a7c <_dtoa_r+0x1ac>
 8010b18:	9b04      	ldr	r3, [sp, #16]
 8010b1a:	9a00      	ldr	r2, [sp, #0]
 8010b1c:	1a9b      	subs	r3, r3, r2
 8010b1e:	9304      	str	r3, [sp, #16]
 8010b20:	4253      	negs	r3, r2
 8010b22:	9307      	str	r3, [sp, #28]
 8010b24:	2300      	movs	r3, #0
 8010b26:	930a      	str	r3, [sp, #40]	; 0x28
 8010b28:	e7bf      	b.n	8010aaa <_dtoa_r+0x1da>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	9308      	str	r3, [sp, #32]
 8010b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	dc55      	bgt.n	8010be0 <_dtoa_r+0x310>
 8010b34:	2301      	movs	r3, #1
 8010b36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010b3a:	461a      	mov	r2, r3
 8010b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8010b3e:	e00c      	b.n	8010b5a <_dtoa_r+0x28a>
 8010b40:	2301      	movs	r3, #1
 8010b42:	e7f3      	b.n	8010b2c <_dtoa_r+0x25c>
 8010b44:	2300      	movs	r3, #0
 8010b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b48:	9308      	str	r3, [sp, #32]
 8010b4a:	9b00      	ldr	r3, [sp, #0]
 8010b4c:	4413      	add	r3, r2
 8010b4e:	9302      	str	r3, [sp, #8]
 8010b50:	3301      	adds	r3, #1
 8010b52:	2b01      	cmp	r3, #1
 8010b54:	9303      	str	r3, [sp, #12]
 8010b56:	bfb8      	it	lt
 8010b58:	2301      	movlt	r3, #1
 8010b5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	6042      	str	r2, [r0, #4]
 8010b60:	2204      	movs	r2, #4
 8010b62:	f102 0614 	add.w	r6, r2, #20
 8010b66:	429e      	cmp	r6, r3
 8010b68:	6841      	ldr	r1, [r0, #4]
 8010b6a:	d93d      	bls.n	8010be8 <_dtoa_r+0x318>
 8010b6c:	4620      	mov	r0, r4
 8010b6e:	f001 fa5d 	bl	801202c <_Balloc>
 8010b72:	9001      	str	r0, [sp, #4]
 8010b74:	2800      	cmp	r0, #0
 8010b76:	d13b      	bne.n	8010bf0 <_dtoa_r+0x320>
 8010b78:	4b11      	ldr	r3, [pc, #68]	; (8010bc0 <_dtoa_r+0x2f0>)
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010b80:	e6c0      	b.n	8010904 <_dtoa_r+0x34>
 8010b82:	2301      	movs	r3, #1
 8010b84:	e7df      	b.n	8010b46 <_dtoa_r+0x276>
 8010b86:	bf00      	nop
 8010b88:	636f4361 	.word	0x636f4361
 8010b8c:	3fd287a7 	.word	0x3fd287a7
 8010b90:	8b60c8b3 	.word	0x8b60c8b3
 8010b94:	3fc68a28 	.word	0x3fc68a28
 8010b98:	509f79fb 	.word	0x509f79fb
 8010b9c:	3fd34413 	.word	0x3fd34413
 8010ba0:	080149bd 	.word	0x080149bd
 8010ba4:	080149d4 	.word	0x080149d4
 8010ba8:	7ff00000 	.word	0x7ff00000
 8010bac:	080149b9 	.word	0x080149b9
 8010bb0:	080149b0 	.word	0x080149b0
 8010bb4:	08014c8a 	.word	0x08014c8a
 8010bb8:	3ff80000 	.word	0x3ff80000
 8010bbc:	08014ba0 	.word	0x08014ba0
 8010bc0:	08014a2f 	.word	0x08014a2f
 8010bc4:	2501      	movs	r5, #1
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	9306      	str	r3, [sp, #24]
 8010bca:	9508      	str	r5, [sp, #32]
 8010bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8010bd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	2312      	movs	r3, #18
 8010bd8:	e7b0      	b.n	8010b3c <_dtoa_r+0x26c>
 8010bda:	2301      	movs	r3, #1
 8010bdc:	9308      	str	r3, [sp, #32]
 8010bde:	e7f5      	b.n	8010bcc <_dtoa_r+0x2fc>
 8010be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010be2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010be6:	e7b8      	b.n	8010b5a <_dtoa_r+0x28a>
 8010be8:	3101      	adds	r1, #1
 8010bea:	6041      	str	r1, [r0, #4]
 8010bec:	0052      	lsls	r2, r2, #1
 8010bee:	e7b8      	b.n	8010b62 <_dtoa_r+0x292>
 8010bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bf2:	9a01      	ldr	r2, [sp, #4]
 8010bf4:	601a      	str	r2, [r3, #0]
 8010bf6:	9b03      	ldr	r3, [sp, #12]
 8010bf8:	2b0e      	cmp	r3, #14
 8010bfa:	f200 809d 	bhi.w	8010d38 <_dtoa_r+0x468>
 8010bfe:	2d00      	cmp	r5, #0
 8010c00:	f000 809a 	beq.w	8010d38 <_dtoa_r+0x468>
 8010c04:	9b00      	ldr	r3, [sp, #0]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	dd32      	ble.n	8010c70 <_dtoa_r+0x3a0>
 8010c0a:	4ab7      	ldr	r2, [pc, #732]	; (8010ee8 <_dtoa_r+0x618>)
 8010c0c:	f003 030f 	and.w	r3, r3, #15
 8010c10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c18:	9b00      	ldr	r3, [sp, #0]
 8010c1a:	05d8      	lsls	r0, r3, #23
 8010c1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010c20:	d516      	bpl.n	8010c50 <_dtoa_r+0x380>
 8010c22:	4bb2      	ldr	r3, [pc, #712]	; (8010eec <_dtoa_r+0x61c>)
 8010c24:	ec51 0b19 	vmov	r0, r1, d9
 8010c28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010c2c:	f7ef fe2e 	bl	800088c <__aeabi_ddiv>
 8010c30:	f007 070f 	and.w	r7, r7, #15
 8010c34:	4682      	mov	sl, r0
 8010c36:	468b      	mov	fp, r1
 8010c38:	2503      	movs	r5, #3
 8010c3a:	4eac      	ldr	r6, [pc, #688]	; (8010eec <_dtoa_r+0x61c>)
 8010c3c:	b957      	cbnz	r7, 8010c54 <_dtoa_r+0x384>
 8010c3e:	4642      	mov	r2, r8
 8010c40:	464b      	mov	r3, r9
 8010c42:	4650      	mov	r0, sl
 8010c44:	4659      	mov	r1, fp
 8010c46:	f7ef fe21 	bl	800088c <__aeabi_ddiv>
 8010c4a:	4682      	mov	sl, r0
 8010c4c:	468b      	mov	fp, r1
 8010c4e:	e028      	b.n	8010ca2 <_dtoa_r+0x3d2>
 8010c50:	2502      	movs	r5, #2
 8010c52:	e7f2      	b.n	8010c3a <_dtoa_r+0x36a>
 8010c54:	07f9      	lsls	r1, r7, #31
 8010c56:	d508      	bpl.n	8010c6a <_dtoa_r+0x39a>
 8010c58:	4640      	mov	r0, r8
 8010c5a:	4649      	mov	r1, r9
 8010c5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010c60:	f7ef fcea 	bl	8000638 <__aeabi_dmul>
 8010c64:	3501      	adds	r5, #1
 8010c66:	4680      	mov	r8, r0
 8010c68:	4689      	mov	r9, r1
 8010c6a:	107f      	asrs	r7, r7, #1
 8010c6c:	3608      	adds	r6, #8
 8010c6e:	e7e5      	b.n	8010c3c <_dtoa_r+0x36c>
 8010c70:	f000 809b 	beq.w	8010daa <_dtoa_r+0x4da>
 8010c74:	9b00      	ldr	r3, [sp, #0]
 8010c76:	4f9d      	ldr	r7, [pc, #628]	; (8010eec <_dtoa_r+0x61c>)
 8010c78:	425e      	negs	r6, r3
 8010c7a:	4b9b      	ldr	r3, [pc, #620]	; (8010ee8 <_dtoa_r+0x618>)
 8010c7c:	f006 020f 	and.w	r2, r6, #15
 8010c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c88:	ec51 0b19 	vmov	r0, r1, d9
 8010c8c:	f7ef fcd4 	bl	8000638 <__aeabi_dmul>
 8010c90:	1136      	asrs	r6, r6, #4
 8010c92:	4682      	mov	sl, r0
 8010c94:	468b      	mov	fp, r1
 8010c96:	2300      	movs	r3, #0
 8010c98:	2502      	movs	r5, #2
 8010c9a:	2e00      	cmp	r6, #0
 8010c9c:	d17a      	bne.n	8010d94 <_dtoa_r+0x4c4>
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d1d3      	bne.n	8010c4a <_dtoa_r+0x37a>
 8010ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	f000 8082 	beq.w	8010dae <_dtoa_r+0x4de>
 8010caa:	4b91      	ldr	r3, [pc, #580]	; (8010ef0 <_dtoa_r+0x620>)
 8010cac:	2200      	movs	r2, #0
 8010cae:	4650      	mov	r0, sl
 8010cb0:	4659      	mov	r1, fp
 8010cb2:	f7ef ff33 	bl	8000b1c <__aeabi_dcmplt>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d079      	beq.n	8010dae <_dtoa_r+0x4de>
 8010cba:	9b03      	ldr	r3, [sp, #12]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d076      	beq.n	8010dae <_dtoa_r+0x4de>
 8010cc0:	9b02      	ldr	r3, [sp, #8]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	dd36      	ble.n	8010d34 <_dtoa_r+0x464>
 8010cc6:	9b00      	ldr	r3, [sp, #0]
 8010cc8:	4650      	mov	r0, sl
 8010cca:	4659      	mov	r1, fp
 8010ccc:	1e5f      	subs	r7, r3, #1
 8010cce:	2200      	movs	r2, #0
 8010cd0:	4b88      	ldr	r3, [pc, #544]	; (8010ef4 <_dtoa_r+0x624>)
 8010cd2:	f7ef fcb1 	bl	8000638 <__aeabi_dmul>
 8010cd6:	9e02      	ldr	r6, [sp, #8]
 8010cd8:	4682      	mov	sl, r0
 8010cda:	468b      	mov	fp, r1
 8010cdc:	3501      	adds	r5, #1
 8010cde:	4628      	mov	r0, r5
 8010ce0:	f7ef fc40 	bl	8000564 <__aeabi_i2d>
 8010ce4:	4652      	mov	r2, sl
 8010ce6:	465b      	mov	r3, fp
 8010ce8:	f7ef fca6 	bl	8000638 <__aeabi_dmul>
 8010cec:	4b82      	ldr	r3, [pc, #520]	; (8010ef8 <_dtoa_r+0x628>)
 8010cee:	2200      	movs	r2, #0
 8010cf0:	f7ef faec 	bl	80002cc <__adddf3>
 8010cf4:	46d0      	mov	r8, sl
 8010cf6:	46d9      	mov	r9, fp
 8010cf8:	4682      	mov	sl, r0
 8010cfa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010cfe:	2e00      	cmp	r6, #0
 8010d00:	d158      	bne.n	8010db4 <_dtoa_r+0x4e4>
 8010d02:	4b7e      	ldr	r3, [pc, #504]	; (8010efc <_dtoa_r+0x62c>)
 8010d04:	2200      	movs	r2, #0
 8010d06:	4640      	mov	r0, r8
 8010d08:	4649      	mov	r1, r9
 8010d0a:	f7ef fadd 	bl	80002c8 <__aeabi_dsub>
 8010d0e:	4652      	mov	r2, sl
 8010d10:	465b      	mov	r3, fp
 8010d12:	4680      	mov	r8, r0
 8010d14:	4689      	mov	r9, r1
 8010d16:	f7ef ff1f 	bl	8000b58 <__aeabi_dcmpgt>
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	f040 8295 	bne.w	801124a <_dtoa_r+0x97a>
 8010d20:	4652      	mov	r2, sl
 8010d22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010d26:	4640      	mov	r0, r8
 8010d28:	4649      	mov	r1, r9
 8010d2a:	f7ef fef7 	bl	8000b1c <__aeabi_dcmplt>
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	f040 8289 	bne.w	8011246 <_dtoa_r+0x976>
 8010d34:	ec5b ab19 	vmov	sl, fp, d9
 8010d38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	f2c0 8148 	blt.w	8010fd0 <_dtoa_r+0x700>
 8010d40:	9a00      	ldr	r2, [sp, #0]
 8010d42:	2a0e      	cmp	r2, #14
 8010d44:	f300 8144 	bgt.w	8010fd0 <_dtoa_r+0x700>
 8010d48:	4b67      	ldr	r3, [pc, #412]	; (8010ee8 <_dtoa_r+0x618>)
 8010d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	f280 80d5 	bge.w	8010f04 <_dtoa_r+0x634>
 8010d5a:	9b03      	ldr	r3, [sp, #12]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f300 80d1 	bgt.w	8010f04 <_dtoa_r+0x634>
 8010d62:	f040 826f 	bne.w	8011244 <_dtoa_r+0x974>
 8010d66:	4b65      	ldr	r3, [pc, #404]	; (8010efc <_dtoa_r+0x62c>)
 8010d68:	2200      	movs	r2, #0
 8010d6a:	4640      	mov	r0, r8
 8010d6c:	4649      	mov	r1, r9
 8010d6e:	f7ef fc63 	bl	8000638 <__aeabi_dmul>
 8010d72:	4652      	mov	r2, sl
 8010d74:	465b      	mov	r3, fp
 8010d76:	f7ef fee5 	bl	8000b44 <__aeabi_dcmpge>
 8010d7a:	9e03      	ldr	r6, [sp, #12]
 8010d7c:	4637      	mov	r7, r6
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	f040 8245 	bne.w	801120e <_dtoa_r+0x93e>
 8010d84:	9d01      	ldr	r5, [sp, #4]
 8010d86:	2331      	movs	r3, #49	; 0x31
 8010d88:	f805 3b01 	strb.w	r3, [r5], #1
 8010d8c:	9b00      	ldr	r3, [sp, #0]
 8010d8e:	3301      	adds	r3, #1
 8010d90:	9300      	str	r3, [sp, #0]
 8010d92:	e240      	b.n	8011216 <_dtoa_r+0x946>
 8010d94:	07f2      	lsls	r2, r6, #31
 8010d96:	d505      	bpl.n	8010da4 <_dtoa_r+0x4d4>
 8010d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d9c:	f7ef fc4c 	bl	8000638 <__aeabi_dmul>
 8010da0:	3501      	adds	r5, #1
 8010da2:	2301      	movs	r3, #1
 8010da4:	1076      	asrs	r6, r6, #1
 8010da6:	3708      	adds	r7, #8
 8010da8:	e777      	b.n	8010c9a <_dtoa_r+0x3ca>
 8010daa:	2502      	movs	r5, #2
 8010dac:	e779      	b.n	8010ca2 <_dtoa_r+0x3d2>
 8010dae:	9f00      	ldr	r7, [sp, #0]
 8010db0:	9e03      	ldr	r6, [sp, #12]
 8010db2:	e794      	b.n	8010cde <_dtoa_r+0x40e>
 8010db4:	9901      	ldr	r1, [sp, #4]
 8010db6:	4b4c      	ldr	r3, [pc, #304]	; (8010ee8 <_dtoa_r+0x618>)
 8010db8:	4431      	add	r1, r6
 8010dba:	910d      	str	r1, [sp, #52]	; 0x34
 8010dbc:	9908      	ldr	r1, [sp, #32]
 8010dbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010dc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010dc6:	2900      	cmp	r1, #0
 8010dc8:	d043      	beq.n	8010e52 <_dtoa_r+0x582>
 8010dca:	494d      	ldr	r1, [pc, #308]	; (8010f00 <_dtoa_r+0x630>)
 8010dcc:	2000      	movs	r0, #0
 8010dce:	f7ef fd5d 	bl	800088c <__aeabi_ddiv>
 8010dd2:	4652      	mov	r2, sl
 8010dd4:	465b      	mov	r3, fp
 8010dd6:	f7ef fa77 	bl	80002c8 <__aeabi_dsub>
 8010dda:	9d01      	ldr	r5, [sp, #4]
 8010ddc:	4682      	mov	sl, r0
 8010dde:	468b      	mov	fp, r1
 8010de0:	4649      	mov	r1, r9
 8010de2:	4640      	mov	r0, r8
 8010de4:	f7ef fed8 	bl	8000b98 <__aeabi_d2iz>
 8010de8:	4606      	mov	r6, r0
 8010dea:	f7ef fbbb 	bl	8000564 <__aeabi_i2d>
 8010dee:	4602      	mov	r2, r0
 8010df0:	460b      	mov	r3, r1
 8010df2:	4640      	mov	r0, r8
 8010df4:	4649      	mov	r1, r9
 8010df6:	f7ef fa67 	bl	80002c8 <__aeabi_dsub>
 8010dfa:	3630      	adds	r6, #48	; 0x30
 8010dfc:	f805 6b01 	strb.w	r6, [r5], #1
 8010e00:	4652      	mov	r2, sl
 8010e02:	465b      	mov	r3, fp
 8010e04:	4680      	mov	r8, r0
 8010e06:	4689      	mov	r9, r1
 8010e08:	f7ef fe88 	bl	8000b1c <__aeabi_dcmplt>
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	d163      	bne.n	8010ed8 <_dtoa_r+0x608>
 8010e10:	4642      	mov	r2, r8
 8010e12:	464b      	mov	r3, r9
 8010e14:	4936      	ldr	r1, [pc, #216]	; (8010ef0 <_dtoa_r+0x620>)
 8010e16:	2000      	movs	r0, #0
 8010e18:	f7ef fa56 	bl	80002c8 <__aeabi_dsub>
 8010e1c:	4652      	mov	r2, sl
 8010e1e:	465b      	mov	r3, fp
 8010e20:	f7ef fe7c 	bl	8000b1c <__aeabi_dcmplt>
 8010e24:	2800      	cmp	r0, #0
 8010e26:	f040 80b5 	bne.w	8010f94 <_dtoa_r+0x6c4>
 8010e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e2c:	429d      	cmp	r5, r3
 8010e2e:	d081      	beq.n	8010d34 <_dtoa_r+0x464>
 8010e30:	4b30      	ldr	r3, [pc, #192]	; (8010ef4 <_dtoa_r+0x624>)
 8010e32:	2200      	movs	r2, #0
 8010e34:	4650      	mov	r0, sl
 8010e36:	4659      	mov	r1, fp
 8010e38:	f7ef fbfe 	bl	8000638 <__aeabi_dmul>
 8010e3c:	4b2d      	ldr	r3, [pc, #180]	; (8010ef4 <_dtoa_r+0x624>)
 8010e3e:	4682      	mov	sl, r0
 8010e40:	468b      	mov	fp, r1
 8010e42:	4640      	mov	r0, r8
 8010e44:	4649      	mov	r1, r9
 8010e46:	2200      	movs	r2, #0
 8010e48:	f7ef fbf6 	bl	8000638 <__aeabi_dmul>
 8010e4c:	4680      	mov	r8, r0
 8010e4e:	4689      	mov	r9, r1
 8010e50:	e7c6      	b.n	8010de0 <_dtoa_r+0x510>
 8010e52:	4650      	mov	r0, sl
 8010e54:	4659      	mov	r1, fp
 8010e56:	f7ef fbef 	bl	8000638 <__aeabi_dmul>
 8010e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e5c:	9d01      	ldr	r5, [sp, #4]
 8010e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e60:	4682      	mov	sl, r0
 8010e62:	468b      	mov	fp, r1
 8010e64:	4649      	mov	r1, r9
 8010e66:	4640      	mov	r0, r8
 8010e68:	f7ef fe96 	bl	8000b98 <__aeabi_d2iz>
 8010e6c:	4606      	mov	r6, r0
 8010e6e:	f7ef fb79 	bl	8000564 <__aeabi_i2d>
 8010e72:	3630      	adds	r6, #48	; 0x30
 8010e74:	4602      	mov	r2, r0
 8010e76:	460b      	mov	r3, r1
 8010e78:	4640      	mov	r0, r8
 8010e7a:	4649      	mov	r1, r9
 8010e7c:	f7ef fa24 	bl	80002c8 <__aeabi_dsub>
 8010e80:	f805 6b01 	strb.w	r6, [r5], #1
 8010e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e86:	429d      	cmp	r5, r3
 8010e88:	4680      	mov	r8, r0
 8010e8a:	4689      	mov	r9, r1
 8010e8c:	f04f 0200 	mov.w	r2, #0
 8010e90:	d124      	bne.n	8010edc <_dtoa_r+0x60c>
 8010e92:	4b1b      	ldr	r3, [pc, #108]	; (8010f00 <_dtoa_r+0x630>)
 8010e94:	4650      	mov	r0, sl
 8010e96:	4659      	mov	r1, fp
 8010e98:	f7ef fa18 	bl	80002cc <__adddf3>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	460b      	mov	r3, r1
 8010ea0:	4640      	mov	r0, r8
 8010ea2:	4649      	mov	r1, r9
 8010ea4:	f7ef fe58 	bl	8000b58 <__aeabi_dcmpgt>
 8010ea8:	2800      	cmp	r0, #0
 8010eaa:	d173      	bne.n	8010f94 <_dtoa_r+0x6c4>
 8010eac:	4652      	mov	r2, sl
 8010eae:	465b      	mov	r3, fp
 8010eb0:	4913      	ldr	r1, [pc, #76]	; (8010f00 <_dtoa_r+0x630>)
 8010eb2:	2000      	movs	r0, #0
 8010eb4:	f7ef fa08 	bl	80002c8 <__aeabi_dsub>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	460b      	mov	r3, r1
 8010ebc:	4640      	mov	r0, r8
 8010ebe:	4649      	mov	r1, r9
 8010ec0:	f7ef fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	f43f af35 	beq.w	8010d34 <_dtoa_r+0x464>
 8010eca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010ecc:	1e6b      	subs	r3, r5, #1
 8010ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ed0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010ed4:	2b30      	cmp	r3, #48	; 0x30
 8010ed6:	d0f8      	beq.n	8010eca <_dtoa_r+0x5fa>
 8010ed8:	9700      	str	r7, [sp, #0]
 8010eda:	e049      	b.n	8010f70 <_dtoa_r+0x6a0>
 8010edc:	4b05      	ldr	r3, [pc, #20]	; (8010ef4 <_dtoa_r+0x624>)
 8010ede:	f7ef fbab 	bl	8000638 <__aeabi_dmul>
 8010ee2:	4680      	mov	r8, r0
 8010ee4:	4689      	mov	r9, r1
 8010ee6:	e7bd      	b.n	8010e64 <_dtoa_r+0x594>
 8010ee8:	08014ba0 	.word	0x08014ba0
 8010eec:	08014b78 	.word	0x08014b78
 8010ef0:	3ff00000 	.word	0x3ff00000
 8010ef4:	40240000 	.word	0x40240000
 8010ef8:	401c0000 	.word	0x401c0000
 8010efc:	40140000 	.word	0x40140000
 8010f00:	3fe00000 	.word	0x3fe00000
 8010f04:	9d01      	ldr	r5, [sp, #4]
 8010f06:	4656      	mov	r6, sl
 8010f08:	465f      	mov	r7, fp
 8010f0a:	4642      	mov	r2, r8
 8010f0c:	464b      	mov	r3, r9
 8010f0e:	4630      	mov	r0, r6
 8010f10:	4639      	mov	r1, r7
 8010f12:	f7ef fcbb 	bl	800088c <__aeabi_ddiv>
 8010f16:	f7ef fe3f 	bl	8000b98 <__aeabi_d2iz>
 8010f1a:	4682      	mov	sl, r0
 8010f1c:	f7ef fb22 	bl	8000564 <__aeabi_i2d>
 8010f20:	4642      	mov	r2, r8
 8010f22:	464b      	mov	r3, r9
 8010f24:	f7ef fb88 	bl	8000638 <__aeabi_dmul>
 8010f28:	4602      	mov	r2, r0
 8010f2a:	460b      	mov	r3, r1
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	4639      	mov	r1, r7
 8010f30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010f34:	f7ef f9c8 	bl	80002c8 <__aeabi_dsub>
 8010f38:	f805 6b01 	strb.w	r6, [r5], #1
 8010f3c:	9e01      	ldr	r6, [sp, #4]
 8010f3e:	9f03      	ldr	r7, [sp, #12]
 8010f40:	1bae      	subs	r6, r5, r6
 8010f42:	42b7      	cmp	r7, r6
 8010f44:	4602      	mov	r2, r0
 8010f46:	460b      	mov	r3, r1
 8010f48:	d135      	bne.n	8010fb6 <_dtoa_r+0x6e6>
 8010f4a:	f7ef f9bf 	bl	80002cc <__adddf3>
 8010f4e:	4642      	mov	r2, r8
 8010f50:	464b      	mov	r3, r9
 8010f52:	4606      	mov	r6, r0
 8010f54:	460f      	mov	r7, r1
 8010f56:	f7ef fdff 	bl	8000b58 <__aeabi_dcmpgt>
 8010f5a:	b9d0      	cbnz	r0, 8010f92 <_dtoa_r+0x6c2>
 8010f5c:	4642      	mov	r2, r8
 8010f5e:	464b      	mov	r3, r9
 8010f60:	4630      	mov	r0, r6
 8010f62:	4639      	mov	r1, r7
 8010f64:	f7ef fdd0 	bl	8000b08 <__aeabi_dcmpeq>
 8010f68:	b110      	cbz	r0, 8010f70 <_dtoa_r+0x6a0>
 8010f6a:	f01a 0f01 	tst.w	sl, #1
 8010f6e:	d110      	bne.n	8010f92 <_dtoa_r+0x6c2>
 8010f70:	4620      	mov	r0, r4
 8010f72:	ee18 1a10 	vmov	r1, s16
 8010f76:	f001 f899 	bl	80120ac <_Bfree>
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	9800      	ldr	r0, [sp, #0]
 8010f7e:	702b      	strb	r3, [r5, #0]
 8010f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f82:	3001      	adds	r0, #1
 8010f84:	6018      	str	r0, [r3, #0]
 8010f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f43f acf1 	beq.w	8010970 <_dtoa_r+0xa0>
 8010f8e:	601d      	str	r5, [r3, #0]
 8010f90:	e4ee      	b.n	8010970 <_dtoa_r+0xa0>
 8010f92:	9f00      	ldr	r7, [sp, #0]
 8010f94:	462b      	mov	r3, r5
 8010f96:	461d      	mov	r5, r3
 8010f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f9c:	2a39      	cmp	r2, #57	; 0x39
 8010f9e:	d106      	bne.n	8010fae <_dtoa_r+0x6de>
 8010fa0:	9a01      	ldr	r2, [sp, #4]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d1f7      	bne.n	8010f96 <_dtoa_r+0x6c6>
 8010fa6:	9901      	ldr	r1, [sp, #4]
 8010fa8:	2230      	movs	r2, #48	; 0x30
 8010faa:	3701      	adds	r7, #1
 8010fac:	700a      	strb	r2, [r1, #0]
 8010fae:	781a      	ldrb	r2, [r3, #0]
 8010fb0:	3201      	adds	r2, #1
 8010fb2:	701a      	strb	r2, [r3, #0]
 8010fb4:	e790      	b.n	8010ed8 <_dtoa_r+0x608>
 8010fb6:	4ba6      	ldr	r3, [pc, #664]	; (8011250 <_dtoa_r+0x980>)
 8010fb8:	2200      	movs	r2, #0
 8010fba:	f7ef fb3d 	bl	8000638 <__aeabi_dmul>
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	4606      	mov	r6, r0
 8010fc4:	460f      	mov	r7, r1
 8010fc6:	f7ef fd9f 	bl	8000b08 <__aeabi_dcmpeq>
 8010fca:	2800      	cmp	r0, #0
 8010fcc:	d09d      	beq.n	8010f0a <_dtoa_r+0x63a>
 8010fce:	e7cf      	b.n	8010f70 <_dtoa_r+0x6a0>
 8010fd0:	9a08      	ldr	r2, [sp, #32]
 8010fd2:	2a00      	cmp	r2, #0
 8010fd4:	f000 80d7 	beq.w	8011186 <_dtoa_r+0x8b6>
 8010fd8:	9a06      	ldr	r2, [sp, #24]
 8010fda:	2a01      	cmp	r2, #1
 8010fdc:	f300 80ba 	bgt.w	8011154 <_dtoa_r+0x884>
 8010fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010fe2:	2a00      	cmp	r2, #0
 8010fe4:	f000 80b2 	beq.w	801114c <_dtoa_r+0x87c>
 8010fe8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010fec:	9e07      	ldr	r6, [sp, #28]
 8010fee:	9d04      	ldr	r5, [sp, #16]
 8010ff0:	9a04      	ldr	r2, [sp, #16]
 8010ff2:	441a      	add	r2, r3
 8010ff4:	9204      	str	r2, [sp, #16]
 8010ff6:	9a05      	ldr	r2, [sp, #20]
 8010ff8:	2101      	movs	r1, #1
 8010ffa:	441a      	add	r2, r3
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	9205      	str	r2, [sp, #20]
 8011000:	f001 f956 	bl	80122b0 <__i2b>
 8011004:	4607      	mov	r7, r0
 8011006:	2d00      	cmp	r5, #0
 8011008:	dd0c      	ble.n	8011024 <_dtoa_r+0x754>
 801100a:	9b05      	ldr	r3, [sp, #20]
 801100c:	2b00      	cmp	r3, #0
 801100e:	dd09      	ble.n	8011024 <_dtoa_r+0x754>
 8011010:	42ab      	cmp	r3, r5
 8011012:	9a04      	ldr	r2, [sp, #16]
 8011014:	bfa8      	it	ge
 8011016:	462b      	movge	r3, r5
 8011018:	1ad2      	subs	r2, r2, r3
 801101a:	9204      	str	r2, [sp, #16]
 801101c:	9a05      	ldr	r2, [sp, #20]
 801101e:	1aed      	subs	r5, r5, r3
 8011020:	1ad3      	subs	r3, r2, r3
 8011022:	9305      	str	r3, [sp, #20]
 8011024:	9b07      	ldr	r3, [sp, #28]
 8011026:	b31b      	cbz	r3, 8011070 <_dtoa_r+0x7a0>
 8011028:	9b08      	ldr	r3, [sp, #32]
 801102a:	2b00      	cmp	r3, #0
 801102c:	f000 80af 	beq.w	801118e <_dtoa_r+0x8be>
 8011030:	2e00      	cmp	r6, #0
 8011032:	dd13      	ble.n	801105c <_dtoa_r+0x78c>
 8011034:	4639      	mov	r1, r7
 8011036:	4632      	mov	r2, r6
 8011038:	4620      	mov	r0, r4
 801103a:	f001 f9f9 	bl	8012430 <__pow5mult>
 801103e:	ee18 2a10 	vmov	r2, s16
 8011042:	4601      	mov	r1, r0
 8011044:	4607      	mov	r7, r0
 8011046:	4620      	mov	r0, r4
 8011048:	f001 f948 	bl	80122dc <__multiply>
 801104c:	ee18 1a10 	vmov	r1, s16
 8011050:	4680      	mov	r8, r0
 8011052:	4620      	mov	r0, r4
 8011054:	f001 f82a 	bl	80120ac <_Bfree>
 8011058:	ee08 8a10 	vmov	s16, r8
 801105c:	9b07      	ldr	r3, [sp, #28]
 801105e:	1b9a      	subs	r2, r3, r6
 8011060:	d006      	beq.n	8011070 <_dtoa_r+0x7a0>
 8011062:	ee18 1a10 	vmov	r1, s16
 8011066:	4620      	mov	r0, r4
 8011068:	f001 f9e2 	bl	8012430 <__pow5mult>
 801106c:	ee08 0a10 	vmov	s16, r0
 8011070:	2101      	movs	r1, #1
 8011072:	4620      	mov	r0, r4
 8011074:	f001 f91c 	bl	80122b0 <__i2b>
 8011078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801107a:	2b00      	cmp	r3, #0
 801107c:	4606      	mov	r6, r0
 801107e:	f340 8088 	ble.w	8011192 <_dtoa_r+0x8c2>
 8011082:	461a      	mov	r2, r3
 8011084:	4601      	mov	r1, r0
 8011086:	4620      	mov	r0, r4
 8011088:	f001 f9d2 	bl	8012430 <__pow5mult>
 801108c:	9b06      	ldr	r3, [sp, #24]
 801108e:	2b01      	cmp	r3, #1
 8011090:	4606      	mov	r6, r0
 8011092:	f340 8081 	ble.w	8011198 <_dtoa_r+0x8c8>
 8011096:	f04f 0800 	mov.w	r8, #0
 801109a:	6933      	ldr	r3, [r6, #16]
 801109c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80110a0:	6918      	ldr	r0, [r3, #16]
 80110a2:	f001 f8b5 	bl	8012210 <__hi0bits>
 80110a6:	f1c0 0020 	rsb	r0, r0, #32
 80110aa:	9b05      	ldr	r3, [sp, #20]
 80110ac:	4418      	add	r0, r3
 80110ae:	f010 001f 	ands.w	r0, r0, #31
 80110b2:	f000 8092 	beq.w	80111da <_dtoa_r+0x90a>
 80110b6:	f1c0 0320 	rsb	r3, r0, #32
 80110ba:	2b04      	cmp	r3, #4
 80110bc:	f340 808a 	ble.w	80111d4 <_dtoa_r+0x904>
 80110c0:	f1c0 001c 	rsb	r0, r0, #28
 80110c4:	9b04      	ldr	r3, [sp, #16]
 80110c6:	4403      	add	r3, r0
 80110c8:	9304      	str	r3, [sp, #16]
 80110ca:	9b05      	ldr	r3, [sp, #20]
 80110cc:	4403      	add	r3, r0
 80110ce:	4405      	add	r5, r0
 80110d0:	9305      	str	r3, [sp, #20]
 80110d2:	9b04      	ldr	r3, [sp, #16]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	dd07      	ble.n	80110e8 <_dtoa_r+0x818>
 80110d8:	ee18 1a10 	vmov	r1, s16
 80110dc:	461a      	mov	r2, r3
 80110de:	4620      	mov	r0, r4
 80110e0:	f001 fa00 	bl	80124e4 <__lshift>
 80110e4:	ee08 0a10 	vmov	s16, r0
 80110e8:	9b05      	ldr	r3, [sp, #20]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	dd05      	ble.n	80110fa <_dtoa_r+0x82a>
 80110ee:	4631      	mov	r1, r6
 80110f0:	461a      	mov	r2, r3
 80110f2:	4620      	mov	r0, r4
 80110f4:	f001 f9f6 	bl	80124e4 <__lshift>
 80110f8:	4606      	mov	r6, r0
 80110fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d06e      	beq.n	80111de <_dtoa_r+0x90e>
 8011100:	ee18 0a10 	vmov	r0, s16
 8011104:	4631      	mov	r1, r6
 8011106:	f001 fa5d 	bl	80125c4 <__mcmp>
 801110a:	2800      	cmp	r0, #0
 801110c:	da67      	bge.n	80111de <_dtoa_r+0x90e>
 801110e:	9b00      	ldr	r3, [sp, #0]
 8011110:	3b01      	subs	r3, #1
 8011112:	ee18 1a10 	vmov	r1, s16
 8011116:	9300      	str	r3, [sp, #0]
 8011118:	220a      	movs	r2, #10
 801111a:	2300      	movs	r3, #0
 801111c:	4620      	mov	r0, r4
 801111e:	f000 ffe7 	bl	80120f0 <__multadd>
 8011122:	9b08      	ldr	r3, [sp, #32]
 8011124:	ee08 0a10 	vmov	s16, r0
 8011128:	2b00      	cmp	r3, #0
 801112a:	f000 81b1 	beq.w	8011490 <_dtoa_r+0xbc0>
 801112e:	2300      	movs	r3, #0
 8011130:	4639      	mov	r1, r7
 8011132:	220a      	movs	r2, #10
 8011134:	4620      	mov	r0, r4
 8011136:	f000 ffdb 	bl	80120f0 <__multadd>
 801113a:	9b02      	ldr	r3, [sp, #8]
 801113c:	2b00      	cmp	r3, #0
 801113e:	4607      	mov	r7, r0
 8011140:	f300 808e 	bgt.w	8011260 <_dtoa_r+0x990>
 8011144:	9b06      	ldr	r3, [sp, #24]
 8011146:	2b02      	cmp	r3, #2
 8011148:	dc51      	bgt.n	80111ee <_dtoa_r+0x91e>
 801114a:	e089      	b.n	8011260 <_dtoa_r+0x990>
 801114c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801114e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011152:	e74b      	b.n	8010fec <_dtoa_r+0x71c>
 8011154:	9b03      	ldr	r3, [sp, #12]
 8011156:	1e5e      	subs	r6, r3, #1
 8011158:	9b07      	ldr	r3, [sp, #28]
 801115a:	42b3      	cmp	r3, r6
 801115c:	bfbf      	itttt	lt
 801115e:	9b07      	ldrlt	r3, [sp, #28]
 8011160:	9607      	strlt	r6, [sp, #28]
 8011162:	1af2      	sublt	r2, r6, r3
 8011164:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011166:	bfb6      	itet	lt
 8011168:	189b      	addlt	r3, r3, r2
 801116a:	1b9e      	subge	r6, r3, r6
 801116c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801116e:	9b03      	ldr	r3, [sp, #12]
 8011170:	bfb8      	it	lt
 8011172:	2600      	movlt	r6, #0
 8011174:	2b00      	cmp	r3, #0
 8011176:	bfb7      	itett	lt
 8011178:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801117c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011180:	1a9d      	sublt	r5, r3, r2
 8011182:	2300      	movlt	r3, #0
 8011184:	e734      	b.n	8010ff0 <_dtoa_r+0x720>
 8011186:	9e07      	ldr	r6, [sp, #28]
 8011188:	9d04      	ldr	r5, [sp, #16]
 801118a:	9f08      	ldr	r7, [sp, #32]
 801118c:	e73b      	b.n	8011006 <_dtoa_r+0x736>
 801118e:	9a07      	ldr	r2, [sp, #28]
 8011190:	e767      	b.n	8011062 <_dtoa_r+0x792>
 8011192:	9b06      	ldr	r3, [sp, #24]
 8011194:	2b01      	cmp	r3, #1
 8011196:	dc18      	bgt.n	80111ca <_dtoa_r+0x8fa>
 8011198:	f1ba 0f00 	cmp.w	sl, #0
 801119c:	d115      	bne.n	80111ca <_dtoa_r+0x8fa>
 801119e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80111a2:	b993      	cbnz	r3, 80111ca <_dtoa_r+0x8fa>
 80111a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80111a8:	0d1b      	lsrs	r3, r3, #20
 80111aa:	051b      	lsls	r3, r3, #20
 80111ac:	b183      	cbz	r3, 80111d0 <_dtoa_r+0x900>
 80111ae:	9b04      	ldr	r3, [sp, #16]
 80111b0:	3301      	adds	r3, #1
 80111b2:	9304      	str	r3, [sp, #16]
 80111b4:	9b05      	ldr	r3, [sp, #20]
 80111b6:	3301      	adds	r3, #1
 80111b8:	9305      	str	r3, [sp, #20]
 80111ba:	f04f 0801 	mov.w	r8, #1
 80111be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	f47f af6a 	bne.w	801109a <_dtoa_r+0x7ca>
 80111c6:	2001      	movs	r0, #1
 80111c8:	e76f      	b.n	80110aa <_dtoa_r+0x7da>
 80111ca:	f04f 0800 	mov.w	r8, #0
 80111ce:	e7f6      	b.n	80111be <_dtoa_r+0x8ee>
 80111d0:	4698      	mov	r8, r3
 80111d2:	e7f4      	b.n	80111be <_dtoa_r+0x8ee>
 80111d4:	f43f af7d 	beq.w	80110d2 <_dtoa_r+0x802>
 80111d8:	4618      	mov	r0, r3
 80111da:	301c      	adds	r0, #28
 80111dc:	e772      	b.n	80110c4 <_dtoa_r+0x7f4>
 80111de:	9b03      	ldr	r3, [sp, #12]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	dc37      	bgt.n	8011254 <_dtoa_r+0x984>
 80111e4:	9b06      	ldr	r3, [sp, #24]
 80111e6:	2b02      	cmp	r3, #2
 80111e8:	dd34      	ble.n	8011254 <_dtoa_r+0x984>
 80111ea:	9b03      	ldr	r3, [sp, #12]
 80111ec:	9302      	str	r3, [sp, #8]
 80111ee:	9b02      	ldr	r3, [sp, #8]
 80111f0:	b96b      	cbnz	r3, 801120e <_dtoa_r+0x93e>
 80111f2:	4631      	mov	r1, r6
 80111f4:	2205      	movs	r2, #5
 80111f6:	4620      	mov	r0, r4
 80111f8:	f000 ff7a 	bl	80120f0 <__multadd>
 80111fc:	4601      	mov	r1, r0
 80111fe:	4606      	mov	r6, r0
 8011200:	ee18 0a10 	vmov	r0, s16
 8011204:	f001 f9de 	bl	80125c4 <__mcmp>
 8011208:	2800      	cmp	r0, #0
 801120a:	f73f adbb 	bgt.w	8010d84 <_dtoa_r+0x4b4>
 801120e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011210:	9d01      	ldr	r5, [sp, #4]
 8011212:	43db      	mvns	r3, r3
 8011214:	9300      	str	r3, [sp, #0]
 8011216:	f04f 0800 	mov.w	r8, #0
 801121a:	4631      	mov	r1, r6
 801121c:	4620      	mov	r0, r4
 801121e:	f000 ff45 	bl	80120ac <_Bfree>
 8011222:	2f00      	cmp	r7, #0
 8011224:	f43f aea4 	beq.w	8010f70 <_dtoa_r+0x6a0>
 8011228:	f1b8 0f00 	cmp.w	r8, #0
 801122c:	d005      	beq.n	801123a <_dtoa_r+0x96a>
 801122e:	45b8      	cmp	r8, r7
 8011230:	d003      	beq.n	801123a <_dtoa_r+0x96a>
 8011232:	4641      	mov	r1, r8
 8011234:	4620      	mov	r0, r4
 8011236:	f000 ff39 	bl	80120ac <_Bfree>
 801123a:	4639      	mov	r1, r7
 801123c:	4620      	mov	r0, r4
 801123e:	f000 ff35 	bl	80120ac <_Bfree>
 8011242:	e695      	b.n	8010f70 <_dtoa_r+0x6a0>
 8011244:	2600      	movs	r6, #0
 8011246:	4637      	mov	r7, r6
 8011248:	e7e1      	b.n	801120e <_dtoa_r+0x93e>
 801124a:	9700      	str	r7, [sp, #0]
 801124c:	4637      	mov	r7, r6
 801124e:	e599      	b.n	8010d84 <_dtoa_r+0x4b4>
 8011250:	40240000 	.word	0x40240000
 8011254:	9b08      	ldr	r3, [sp, #32]
 8011256:	2b00      	cmp	r3, #0
 8011258:	f000 80ca 	beq.w	80113f0 <_dtoa_r+0xb20>
 801125c:	9b03      	ldr	r3, [sp, #12]
 801125e:	9302      	str	r3, [sp, #8]
 8011260:	2d00      	cmp	r5, #0
 8011262:	dd05      	ble.n	8011270 <_dtoa_r+0x9a0>
 8011264:	4639      	mov	r1, r7
 8011266:	462a      	mov	r2, r5
 8011268:	4620      	mov	r0, r4
 801126a:	f001 f93b 	bl	80124e4 <__lshift>
 801126e:	4607      	mov	r7, r0
 8011270:	f1b8 0f00 	cmp.w	r8, #0
 8011274:	d05b      	beq.n	801132e <_dtoa_r+0xa5e>
 8011276:	6879      	ldr	r1, [r7, #4]
 8011278:	4620      	mov	r0, r4
 801127a:	f000 fed7 	bl	801202c <_Balloc>
 801127e:	4605      	mov	r5, r0
 8011280:	b928      	cbnz	r0, 801128e <_dtoa_r+0x9be>
 8011282:	4b87      	ldr	r3, [pc, #540]	; (80114a0 <_dtoa_r+0xbd0>)
 8011284:	4602      	mov	r2, r0
 8011286:	f240 21ea 	movw	r1, #746	; 0x2ea
 801128a:	f7ff bb3b 	b.w	8010904 <_dtoa_r+0x34>
 801128e:	693a      	ldr	r2, [r7, #16]
 8011290:	3202      	adds	r2, #2
 8011292:	0092      	lsls	r2, r2, #2
 8011294:	f107 010c 	add.w	r1, r7, #12
 8011298:	300c      	adds	r0, #12
 801129a:	f7fd fae3 	bl	800e864 <memcpy>
 801129e:	2201      	movs	r2, #1
 80112a0:	4629      	mov	r1, r5
 80112a2:	4620      	mov	r0, r4
 80112a4:	f001 f91e 	bl	80124e4 <__lshift>
 80112a8:	9b01      	ldr	r3, [sp, #4]
 80112aa:	f103 0901 	add.w	r9, r3, #1
 80112ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80112b2:	4413      	add	r3, r2
 80112b4:	9305      	str	r3, [sp, #20]
 80112b6:	f00a 0301 	and.w	r3, sl, #1
 80112ba:	46b8      	mov	r8, r7
 80112bc:	9304      	str	r3, [sp, #16]
 80112be:	4607      	mov	r7, r0
 80112c0:	4631      	mov	r1, r6
 80112c2:	ee18 0a10 	vmov	r0, s16
 80112c6:	f7ff fa75 	bl	80107b4 <quorem>
 80112ca:	4641      	mov	r1, r8
 80112cc:	9002      	str	r0, [sp, #8]
 80112ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80112d2:	ee18 0a10 	vmov	r0, s16
 80112d6:	f001 f975 	bl	80125c4 <__mcmp>
 80112da:	463a      	mov	r2, r7
 80112dc:	9003      	str	r0, [sp, #12]
 80112de:	4631      	mov	r1, r6
 80112e0:	4620      	mov	r0, r4
 80112e2:	f001 f98b 	bl	80125fc <__mdiff>
 80112e6:	68c2      	ldr	r2, [r0, #12]
 80112e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80112ec:	4605      	mov	r5, r0
 80112ee:	bb02      	cbnz	r2, 8011332 <_dtoa_r+0xa62>
 80112f0:	4601      	mov	r1, r0
 80112f2:	ee18 0a10 	vmov	r0, s16
 80112f6:	f001 f965 	bl	80125c4 <__mcmp>
 80112fa:	4602      	mov	r2, r0
 80112fc:	4629      	mov	r1, r5
 80112fe:	4620      	mov	r0, r4
 8011300:	9207      	str	r2, [sp, #28]
 8011302:	f000 fed3 	bl	80120ac <_Bfree>
 8011306:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801130a:	ea43 0102 	orr.w	r1, r3, r2
 801130e:	9b04      	ldr	r3, [sp, #16]
 8011310:	430b      	orrs	r3, r1
 8011312:	464d      	mov	r5, r9
 8011314:	d10f      	bne.n	8011336 <_dtoa_r+0xa66>
 8011316:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801131a:	d02a      	beq.n	8011372 <_dtoa_r+0xaa2>
 801131c:	9b03      	ldr	r3, [sp, #12]
 801131e:	2b00      	cmp	r3, #0
 8011320:	dd02      	ble.n	8011328 <_dtoa_r+0xa58>
 8011322:	9b02      	ldr	r3, [sp, #8]
 8011324:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011328:	f88b a000 	strb.w	sl, [fp]
 801132c:	e775      	b.n	801121a <_dtoa_r+0x94a>
 801132e:	4638      	mov	r0, r7
 8011330:	e7ba      	b.n	80112a8 <_dtoa_r+0x9d8>
 8011332:	2201      	movs	r2, #1
 8011334:	e7e2      	b.n	80112fc <_dtoa_r+0xa2c>
 8011336:	9b03      	ldr	r3, [sp, #12]
 8011338:	2b00      	cmp	r3, #0
 801133a:	db04      	blt.n	8011346 <_dtoa_r+0xa76>
 801133c:	9906      	ldr	r1, [sp, #24]
 801133e:	430b      	orrs	r3, r1
 8011340:	9904      	ldr	r1, [sp, #16]
 8011342:	430b      	orrs	r3, r1
 8011344:	d122      	bne.n	801138c <_dtoa_r+0xabc>
 8011346:	2a00      	cmp	r2, #0
 8011348:	ddee      	ble.n	8011328 <_dtoa_r+0xa58>
 801134a:	ee18 1a10 	vmov	r1, s16
 801134e:	2201      	movs	r2, #1
 8011350:	4620      	mov	r0, r4
 8011352:	f001 f8c7 	bl	80124e4 <__lshift>
 8011356:	4631      	mov	r1, r6
 8011358:	ee08 0a10 	vmov	s16, r0
 801135c:	f001 f932 	bl	80125c4 <__mcmp>
 8011360:	2800      	cmp	r0, #0
 8011362:	dc03      	bgt.n	801136c <_dtoa_r+0xa9c>
 8011364:	d1e0      	bne.n	8011328 <_dtoa_r+0xa58>
 8011366:	f01a 0f01 	tst.w	sl, #1
 801136a:	d0dd      	beq.n	8011328 <_dtoa_r+0xa58>
 801136c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011370:	d1d7      	bne.n	8011322 <_dtoa_r+0xa52>
 8011372:	2339      	movs	r3, #57	; 0x39
 8011374:	f88b 3000 	strb.w	r3, [fp]
 8011378:	462b      	mov	r3, r5
 801137a:	461d      	mov	r5, r3
 801137c:	3b01      	subs	r3, #1
 801137e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011382:	2a39      	cmp	r2, #57	; 0x39
 8011384:	d071      	beq.n	801146a <_dtoa_r+0xb9a>
 8011386:	3201      	adds	r2, #1
 8011388:	701a      	strb	r2, [r3, #0]
 801138a:	e746      	b.n	801121a <_dtoa_r+0x94a>
 801138c:	2a00      	cmp	r2, #0
 801138e:	dd07      	ble.n	80113a0 <_dtoa_r+0xad0>
 8011390:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011394:	d0ed      	beq.n	8011372 <_dtoa_r+0xaa2>
 8011396:	f10a 0301 	add.w	r3, sl, #1
 801139a:	f88b 3000 	strb.w	r3, [fp]
 801139e:	e73c      	b.n	801121a <_dtoa_r+0x94a>
 80113a0:	9b05      	ldr	r3, [sp, #20]
 80113a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80113a6:	4599      	cmp	r9, r3
 80113a8:	d047      	beq.n	801143a <_dtoa_r+0xb6a>
 80113aa:	ee18 1a10 	vmov	r1, s16
 80113ae:	2300      	movs	r3, #0
 80113b0:	220a      	movs	r2, #10
 80113b2:	4620      	mov	r0, r4
 80113b4:	f000 fe9c 	bl	80120f0 <__multadd>
 80113b8:	45b8      	cmp	r8, r7
 80113ba:	ee08 0a10 	vmov	s16, r0
 80113be:	f04f 0300 	mov.w	r3, #0
 80113c2:	f04f 020a 	mov.w	r2, #10
 80113c6:	4641      	mov	r1, r8
 80113c8:	4620      	mov	r0, r4
 80113ca:	d106      	bne.n	80113da <_dtoa_r+0xb0a>
 80113cc:	f000 fe90 	bl	80120f0 <__multadd>
 80113d0:	4680      	mov	r8, r0
 80113d2:	4607      	mov	r7, r0
 80113d4:	f109 0901 	add.w	r9, r9, #1
 80113d8:	e772      	b.n	80112c0 <_dtoa_r+0x9f0>
 80113da:	f000 fe89 	bl	80120f0 <__multadd>
 80113de:	4639      	mov	r1, r7
 80113e0:	4680      	mov	r8, r0
 80113e2:	2300      	movs	r3, #0
 80113e4:	220a      	movs	r2, #10
 80113e6:	4620      	mov	r0, r4
 80113e8:	f000 fe82 	bl	80120f0 <__multadd>
 80113ec:	4607      	mov	r7, r0
 80113ee:	e7f1      	b.n	80113d4 <_dtoa_r+0xb04>
 80113f0:	9b03      	ldr	r3, [sp, #12]
 80113f2:	9302      	str	r3, [sp, #8]
 80113f4:	9d01      	ldr	r5, [sp, #4]
 80113f6:	ee18 0a10 	vmov	r0, s16
 80113fa:	4631      	mov	r1, r6
 80113fc:	f7ff f9da 	bl	80107b4 <quorem>
 8011400:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011404:	9b01      	ldr	r3, [sp, #4]
 8011406:	f805 ab01 	strb.w	sl, [r5], #1
 801140a:	1aea      	subs	r2, r5, r3
 801140c:	9b02      	ldr	r3, [sp, #8]
 801140e:	4293      	cmp	r3, r2
 8011410:	dd09      	ble.n	8011426 <_dtoa_r+0xb56>
 8011412:	ee18 1a10 	vmov	r1, s16
 8011416:	2300      	movs	r3, #0
 8011418:	220a      	movs	r2, #10
 801141a:	4620      	mov	r0, r4
 801141c:	f000 fe68 	bl	80120f0 <__multadd>
 8011420:	ee08 0a10 	vmov	s16, r0
 8011424:	e7e7      	b.n	80113f6 <_dtoa_r+0xb26>
 8011426:	9b02      	ldr	r3, [sp, #8]
 8011428:	2b00      	cmp	r3, #0
 801142a:	bfc8      	it	gt
 801142c:	461d      	movgt	r5, r3
 801142e:	9b01      	ldr	r3, [sp, #4]
 8011430:	bfd8      	it	le
 8011432:	2501      	movle	r5, #1
 8011434:	441d      	add	r5, r3
 8011436:	f04f 0800 	mov.w	r8, #0
 801143a:	ee18 1a10 	vmov	r1, s16
 801143e:	2201      	movs	r2, #1
 8011440:	4620      	mov	r0, r4
 8011442:	f001 f84f 	bl	80124e4 <__lshift>
 8011446:	4631      	mov	r1, r6
 8011448:	ee08 0a10 	vmov	s16, r0
 801144c:	f001 f8ba 	bl	80125c4 <__mcmp>
 8011450:	2800      	cmp	r0, #0
 8011452:	dc91      	bgt.n	8011378 <_dtoa_r+0xaa8>
 8011454:	d102      	bne.n	801145c <_dtoa_r+0xb8c>
 8011456:	f01a 0f01 	tst.w	sl, #1
 801145a:	d18d      	bne.n	8011378 <_dtoa_r+0xaa8>
 801145c:	462b      	mov	r3, r5
 801145e:	461d      	mov	r5, r3
 8011460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011464:	2a30      	cmp	r2, #48	; 0x30
 8011466:	d0fa      	beq.n	801145e <_dtoa_r+0xb8e>
 8011468:	e6d7      	b.n	801121a <_dtoa_r+0x94a>
 801146a:	9a01      	ldr	r2, [sp, #4]
 801146c:	429a      	cmp	r2, r3
 801146e:	d184      	bne.n	801137a <_dtoa_r+0xaaa>
 8011470:	9b00      	ldr	r3, [sp, #0]
 8011472:	3301      	adds	r3, #1
 8011474:	9300      	str	r3, [sp, #0]
 8011476:	2331      	movs	r3, #49	; 0x31
 8011478:	7013      	strb	r3, [r2, #0]
 801147a:	e6ce      	b.n	801121a <_dtoa_r+0x94a>
 801147c:	4b09      	ldr	r3, [pc, #36]	; (80114a4 <_dtoa_r+0xbd4>)
 801147e:	f7ff ba95 	b.w	80109ac <_dtoa_r+0xdc>
 8011482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011484:	2b00      	cmp	r3, #0
 8011486:	f47f aa6e 	bne.w	8010966 <_dtoa_r+0x96>
 801148a:	4b07      	ldr	r3, [pc, #28]	; (80114a8 <_dtoa_r+0xbd8>)
 801148c:	f7ff ba8e 	b.w	80109ac <_dtoa_r+0xdc>
 8011490:	9b02      	ldr	r3, [sp, #8]
 8011492:	2b00      	cmp	r3, #0
 8011494:	dcae      	bgt.n	80113f4 <_dtoa_r+0xb24>
 8011496:	9b06      	ldr	r3, [sp, #24]
 8011498:	2b02      	cmp	r3, #2
 801149a:	f73f aea8 	bgt.w	80111ee <_dtoa_r+0x91e>
 801149e:	e7a9      	b.n	80113f4 <_dtoa_r+0xb24>
 80114a0:	08014a2f 	.word	0x08014a2f
 80114a4:	08014c89 	.word	0x08014c89
 80114a8:	080149b0 	.word	0x080149b0

080114ac <__sflush_r>:
 80114ac:	898a      	ldrh	r2, [r1, #12]
 80114ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b2:	4605      	mov	r5, r0
 80114b4:	0710      	lsls	r0, r2, #28
 80114b6:	460c      	mov	r4, r1
 80114b8:	d458      	bmi.n	801156c <__sflush_r+0xc0>
 80114ba:	684b      	ldr	r3, [r1, #4]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	dc05      	bgt.n	80114cc <__sflush_r+0x20>
 80114c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	dc02      	bgt.n	80114cc <__sflush_r+0x20>
 80114c6:	2000      	movs	r0, #0
 80114c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114ce:	2e00      	cmp	r6, #0
 80114d0:	d0f9      	beq.n	80114c6 <__sflush_r+0x1a>
 80114d2:	2300      	movs	r3, #0
 80114d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80114d8:	682f      	ldr	r7, [r5, #0]
 80114da:	602b      	str	r3, [r5, #0]
 80114dc:	d032      	beq.n	8011544 <__sflush_r+0x98>
 80114de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80114e0:	89a3      	ldrh	r3, [r4, #12]
 80114e2:	075a      	lsls	r2, r3, #29
 80114e4:	d505      	bpl.n	80114f2 <__sflush_r+0x46>
 80114e6:	6863      	ldr	r3, [r4, #4]
 80114e8:	1ac0      	subs	r0, r0, r3
 80114ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80114ec:	b10b      	cbz	r3, 80114f2 <__sflush_r+0x46>
 80114ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80114f0:	1ac0      	subs	r0, r0, r3
 80114f2:	2300      	movs	r3, #0
 80114f4:	4602      	mov	r2, r0
 80114f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114f8:	6a21      	ldr	r1, [r4, #32]
 80114fa:	4628      	mov	r0, r5
 80114fc:	47b0      	blx	r6
 80114fe:	1c43      	adds	r3, r0, #1
 8011500:	89a3      	ldrh	r3, [r4, #12]
 8011502:	d106      	bne.n	8011512 <__sflush_r+0x66>
 8011504:	6829      	ldr	r1, [r5, #0]
 8011506:	291d      	cmp	r1, #29
 8011508:	d82c      	bhi.n	8011564 <__sflush_r+0xb8>
 801150a:	4a2a      	ldr	r2, [pc, #168]	; (80115b4 <__sflush_r+0x108>)
 801150c:	40ca      	lsrs	r2, r1
 801150e:	07d6      	lsls	r6, r2, #31
 8011510:	d528      	bpl.n	8011564 <__sflush_r+0xb8>
 8011512:	2200      	movs	r2, #0
 8011514:	6062      	str	r2, [r4, #4]
 8011516:	04d9      	lsls	r1, r3, #19
 8011518:	6922      	ldr	r2, [r4, #16]
 801151a:	6022      	str	r2, [r4, #0]
 801151c:	d504      	bpl.n	8011528 <__sflush_r+0x7c>
 801151e:	1c42      	adds	r2, r0, #1
 8011520:	d101      	bne.n	8011526 <__sflush_r+0x7a>
 8011522:	682b      	ldr	r3, [r5, #0]
 8011524:	b903      	cbnz	r3, 8011528 <__sflush_r+0x7c>
 8011526:	6560      	str	r0, [r4, #84]	; 0x54
 8011528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801152a:	602f      	str	r7, [r5, #0]
 801152c:	2900      	cmp	r1, #0
 801152e:	d0ca      	beq.n	80114c6 <__sflush_r+0x1a>
 8011530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011534:	4299      	cmp	r1, r3
 8011536:	d002      	beq.n	801153e <__sflush_r+0x92>
 8011538:	4628      	mov	r0, r5
 801153a:	f001 fa4f 	bl	80129dc <_free_r>
 801153e:	2000      	movs	r0, #0
 8011540:	6360      	str	r0, [r4, #52]	; 0x34
 8011542:	e7c1      	b.n	80114c8 <__sflush_r+0x1c>
 8011544:	6a21      	ldr	r1, [r4, #32]
 8011546:	2301      	movs	r3, #1
 8011548:	4628      	mov	r0, r5
 801154a:	47b0      	blx	r6
 801154c:	1c41      	adds	r1, r0, #1
 801154e:	d1c7      	bne.n	80114e0 <__sflush_r+0x34>
 8011550:	682b      	ldr	r3, [r5, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d0c4      	beq.n	80114e0 <__sflush_r+0x34>
 8011556:	2b1d      	cmp	r3, #29
 8011558:	d001      	beq.n	801155e <__sflush_r+0xb2>
 801155a:	2b16      	cmp	r3, #22
 801155c:	d101      	bne.n	8011562 <__sflush_r+0xb6>
 801155e:	602f      	str	r7, [r5, #0]
 8011560:	e7b1      	b.n	80114c6 <__sflush_r+0x1a>
 8011562:	89a3      	ldrh	r3, [r4, #12]
 8011564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011568:	81a3      	strh	r3, [r4, #12]
 801156a:	e7ad      	b.n	80114c8 <__sflush_r+0x1c>
 801156c:	690f      	ldr	r7, [r1, #16]
 801156e:	2f00      	cmp	r7, #0
 8011570:	d0a9      	beq.n	80114c6 <__sflush_r+0x1a>
 8011572:	0793      	lsls	r3, r2, #30
 8011574:	680e      	ldr	r6, [r1, #0]
 8011576:	bf08      	it	eq
 8011578:	694b      	ldreq	r3, [r1, #20]
 801157a:	600f      	str	r7, [r1, #0]
 801157c:	bf18      	it	ne
 801157e:	2300      	movne	r3, #0
 8011580:	eba6 0807 	sub.w	r8, r6, r7
 8011584:	608b      	str	r3, [r1, #8]
 8011586:	f1b8 0f00 	cmp.w	r8, #0
 801158a:	dd9c      	ble.n	80114c6 <__sflush_r+0x1a>
 801158c:	6a21      	ldr	r1, [r4, #32]
 801158e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011590:	4643      	mov	r3, r8
 8011592:	463a      	mov	r2, r7
 8011594:	4628      	mov	r0, r5
 8011596:	47b0      	blx	r6
 8011598:	2800      	cmp	r0, #0
 801159a:	dc06      	bgt.n	80115aa <__sflush_r+0xfe>
 801159c:	89a3      	ldrh	r3, [r4, #12]
 801159e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115a2:	81a3      	strh	r3, [r4, #12]
 80115a4:	f04f 30ff 	mov.w	r0, #4294967295
 80115a8:	e78e      	b.n	80114c8 <__sflush_r+0x1c>
 80115aa:	4407      	add	r7, r0
 80115ac:	eba8 0800 	sub.w	r8, r8, r0
 80115b0:	e7e9      	b.n	8011586 <__sflush_r+0xda>
 80115b2:	bf00      	nop
 80115b4:	20400001 	.word	0x20400001

080115b8 <_fflush_r>:
 80115b8:	b538      	push	{r3, r4, r5, lr}
 80115ba:	690b      	ldr	r3, [r1, #16]
 80115bc:	4605      	mov	r5, r0
 80115be:	460c      	mov	r4, r1
 80115c0:	b913      	cbnz	r3, 80115c8 <_fflush_r+0x10>
 80115c2:	2500      	movs	r5, #0
 80115c4:	4628      	mov	r0, r5
 80115c6:	bd38      	pop	{r3, r4, r5, pc}
 80115c8:	b118      	cbz	r0, 80115d2 <_fflush_r+0x1a>
 80115ca:	6983      	ldr	r3, [r0, #24]
 80115cc:	b90b      	cbnz	r3, 80115d2 <_fflush_r+0x1a>
 80115ce:	f000 f887 	bl	80116e0 <__sinit>
 80115d2:	4b14      	ldr	r3, [pc, #80]	; (8011624 <_fflush_r+0x6c>)
 80115d4:	429c      	cmp	r4, r3
 80115d6:	d11b      	bne.n	8011610 <_fflush_r+0x58>
 80115d8:	686c      	ldr	r4, [r5, #4]
 80115da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d0ef      	beq.n	80115c2 <_fflush_r+0xa>
 80115e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80115e4:	07d0      	lsls	r0, r2, #31
 80115e6:	d404      	bmi.n	80115f2 <_fflush_r+0x3a>
 80115e8:	0599      	lsls	r1, r3, #22
 80115ea:	d402      	bmi.n	80115f2 <_fflush_r+0x3a>
 80115ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115ee:	f000 fc88 	bl	8011f02 <__retarget_lock_acquire_recursive>
 80115f2:	4628      	mov	r0, r5
 80115f4:	4621      	mov	r1, r4
 80115f6:	f7ff ff59 	bl	80114ac <__sflush_r>
 80115fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115fc:	07da      	lsls	r2, r3, #31
 80115fe:	4605      	mov	r5, r0
 8011600:	d4e0      	bmi.n	80115c4 <_fflush_r+0xc>
 8011602:	89a3      	ldrh	r3, [r4, #12]
 8011604:	059b      	lsls	r3, r3, #22
 8011606:	d4dd      	bmi.n	80115c4 <_fflush_r+0xc>
 8011608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801160a:	f000 fc7b 	bl	8011f04 <__retarget_lock_release_recursive>
 801160e:	e7d9      	b.n	80115c4 <_fflush_r+0xc>
 8011610:	4b05      	ldr	r3, [pc, #20]	; (8011628 <_fflush_r+0x70>)
 8011612:	429c      	cmp	r4, r3
 8011614:	d101      	bne.n	801161a <_fflush_r+0x62>
 8011616:	68ac      	ldr	r4, [r5, #8]
 8011618:	e7df      	b.n	80115da <_fflush_r+0x22>
 801161a:	4b04      	ldr	r3, [pc, #16]	; (801162c <_fflush_r+0x74>)
 801161c:	429c      	cmp	r4, r3
 801161e:	bf08      	it	eq
 8011620:	68ec      	ldreq	r4, [r5, #12]
 8011622:	e7da      	b.n	80115da <_fflush_r+0x22>
 8011624:	08014a60 	.word	0x08014a60
 8011628:	08014a80 	.word	0x08014a80
 801162c:	08014a40 	.word	0x08014a40

08011630 <std>:
 8011630:	2300      	movs	r3, #0
 8011632:	b510      	push	{r4, lr}
 8011634:	4604      	mov	r4, r0
 8011636:	e9c0 3300 	strd	r3, r3, [r0]
 801163a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801163e:	6083      	str	r3, [r0, #8]
 8011640:	8181      	strh	r1, [r0, #12]
 8011642:	6643      	str	r3, [r0, #100]	; 0x64
 8011644:	81c2      	strh	r2, [r0, #14]
 8011646:	6183      	str	r3, [r0, #24]
 8011648:	4619      	mov	r1, r3
 801164a:	2208      	movs	r2, #8
 801164c:	305c      	adds	r0, #92	; 0x5c
 801164e:	f7fd f931 	bl	800e8b4 <memset>
 8011652:	4b05      	ldr	r3, [pc, #20]	; (8011668 <std+0x38>)
 8011654:	6263      	str	r3, [r4, #36]	; 0x24
 8011656:	4b05      	ldr	r3, [pc, #20]	; (801166c <std+0x3c>)
 8011658:	62a3      	str	r3, [r4, #40]	; 0x28
 801165a:	4b05      	ldr	r3, [pc, #20]	; (8011670 <std+0x40>)
 801165c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801165e:	4b05      	ldr	r3, [pc, #20]	; (8011674 <std+0x44>)
 8011660:	6224      	str	r4, [r4, #32]
 8011662:	6323      	str	r3, [r4, #48]	; 0x30
 8011664:	bd10      	pop	{r4, pc}
 8011666:	bf00      	nop
 8011668:	0800f7e1 	.word	0x0800f7e1
 801166c:	0800f807 	.word	0x0800f807
 8011670:	0800f83f 	.word	0x0800f83f
 8011674:	0800f863 	.word	0x0800f863

08011678 <_cleanup_r>:
 8011678:	4901      	ldr	r1, [pc, #4]	; (8011680 <_cleanup_r+0x8>)
 801167a:	f000 b8af 	b.w	80117dc <_fwalk_reent>
 801167e:	bf00      	nop
 8011680:	080115b9 	.word	0x080115b9

08011684 <__sfmoreglue>:
 8011684:	b570      	push	{r4, r5, r6, lr}
 8011686:	2268      	movs	r2, #104	; 0x68
 8011688:	1e4d      	subs	r5, r1, #1
 801168a:	4355      	muls	r5, r2
 801168c:	460e      	mov	r6, r1
 801168e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011692:	f001 fa0f 	bl	8012ab4 <_malloc_r>
 8011696:	4604      	mov	r4, r0
 8011698:	b140      	cbz	r0, 80116ac <__sfmoreglue+0x28>
 801169a:	2100      	movs	r1, #0
 801169c:	e9c0 1600 	strd	r1, r6, [r0]
 80116a0:	300c      	adds	r0, #12
 80116a2:	60a0      	str	r0, [r4, #8]
 80116a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80116a8:	f7fd f904 	bl	800e8b4 <memset>
 80116ac:	4620      	mov	r0, r4
 80116ae:	bd70      	pop	{r4, r5, r6, pc}

080116b0 <__sfp_lock_acquire>:
 80116b0:	4801      	ldr	r0, [pc, #4]	; (80116b8 <__sfp_lock_acquire+0x8>)
 80116b2:	f000 bc26 	b.w	8011f02 <__retarget_lock_acquire_recursive>
 80116b6:	bf00      	nop
 80116b8:	20003141 	.word	0x20003141

080116bc <__sfp_lock_release>:
 80116bc:	4801      	ldr	r0, [pc, #4]	; (80116c4 <__sfp_lock_release+0x8>)
 80116be:	f000 bc21 	b.w	8011f04 <__retarget_lock_release_recursive>
 80116c2:	bf00      	nop
 80116c4:	20003141 	.word	0x20003141

080116c8 <__sinit_lock_acquire>:
 80116c8:	4801      	ldr	r0, [pc, #4]	; (80116d0 <__sinit_lock_acquire+0x8>)
 80116ca:	f000 bc1a 	b.w	8011f02 <__retarget_lock_acquire_recursive>
 80116ce:	bf00      	nop
 80116d0:	20003142 	.word	0x20003142

080116d4 <__sinit_lock_release>:
 80116d4:	4801      	ldr	r0, [pc, #4]	; (80116dc <__sinit_lock_release+0x8>)
 80116d6:	f000 bc15 	b.w	8011f04 <__retarget_lock_release_recursive>
 80116da:	bf00      	nop
 80116dc:	20003142 	.word	0x20003142

080116e0 <__sinit>:
 80116e0:	b510      	push	{r4, lr}
 80116e2:	4604      	mov	r4, r0
 80116e4:	f7ff fff0 	bl	80116c8 <__sinit_lock_acquire>
 80116e8:	69a3      	ldr	r3, [r4, #24]
 80116ea:	b11b      	cbz	r3, 80116f4 <__sinit+0x14>
 80116ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116f0:	f7ff bff0 	b.w	80116d4 <__sinit_lock_release>
 80116f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80116f8:	6523      	str	r3, [r4, #80]	; 0x50
 80116fa:	4b13      	ldr	r3, [pc, #76]	; (8011748 <__sinit+0x68>)
 80116fc:	4a13      	ldr	r2, [pc, #76]	; (801174c <__sinit+0x6c>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	62a2      	str	r2, [r4, #40]	; 0x28
 8011702:	42a3      	cmp	r3, r4
 8011704:	bf04      	itt	eq
 8011706:	2301      	moveq	r3, #1
 8011708:	61a3      	streq	r3, [r4, #24]
 801170a:	4620      	mov	r0, r4
 801170c:	f000 f820 	bl	8011750 <__sfp>
 8011710:	6060      	str	r0, [r4, #4]
 8011712:	4620      	mov	r0, r4
 8011714:	f000 f81c 	bl	8011750 <__sfp>
 8011718:	60a0      	str	r0, [r4, #8]
 801171a:	4620      	mov	r0, r4
 801171c:	f000 f818 	bl	8011750 <__sfp>
 8011720:	2200      	movs	r2, #0
 8011722:	60e0      	str	r0, [r4, #12]
 8011724:	2104      	movs	r1, #4
 8011726:	6860      	ldr	r0, [r4, #4]
 8011728:	f7ff ff82 	bl	8011630 <std>
 801172c:	68a0      	ldr	r0, [r4, #8]
 801172e:	2201      	movs	r2, #1
 8011730:	2109      	movs	r1, #9
 8011732:	f7ff ff7d 	bl	8011630 <std>
 8011736:	68e0      	ldr	r0, [r4, #12]
 8011738:	2202      	movs	r2, #2
 801173a:	2112      	movs	r1, #18
 801173c:	f7ff ff78 	bl	8011630 <std>
 8011740:	2301      	movs	r3, #1
 8011742:	61a3      	str	r3, [r4, #24]
 8011744:	e7d2      	b.n	80116ec <__sinit+0xc>
 8011746:	bf00      	nop
 8011748:	08014924 	.word	0x08014924
 801174c:	08011679 	.word	0x08011679

08011750 <__sfp>:
 8011750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011752:	4607      	mov	r7, r0
 8011754:	f7ff ffac 	bl	80116b0 <__sfp_lock_acquire>
 8011758:	4b1e      	ldr	r3, [pc, #120]	; (80117d4 <__sfp+0x84>)
 801175a:	681e      	ldr	r6, [r3, #0]
 801175c:	69b3      	ldr	r3, [r6, #24]
 801175e:	b913      	cbnz	r3, 8011766 <__sfp+0x16>
 8011760:	4630      	mov	r0, r6
 8011762:	f7ff ffbd 	bl	80116e0 <__sinit>
 8011766:	3648      	adds	r6, #72	; 0x48
 8011768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801176c:	3b01      	subs	r3, #1
 801176e:	d503      	bpl.n	8011778 <__sfp+0x28>
 8011770:	6833      	ldr	r3, [r6, #0]
 8011772:	b30b      	cbz	r3, 80117b8 <__sfp+0x68>
 8011774:	6836      	ldr	r6, [r6, #0]
 8011776:	e7f7      	b.n	8011768 <__sfp+0x18>
 8011778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801177c:	b9d5      	cbnz	r5, 80117b4 <__sfp+0x64>
 801177e:	4b16      	ldr	r3, [pc, #88]	; (80117d8 <__sfp+0x88>)
 8011780:	60e3      	str	r3, [r4, #12]
 8011782:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011786:	6665      	str	r5, [r4, #100]	; 0x64
 8011788:	f000 fbba 	bl	8011f00 <__retarget_lock_init_recursive>
 801178c:	f7ff ff96 	bl	80116bc <__sfp_lock_release>
 8011790:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011794:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011798:	6025      	str	r5, [r4, #0]
 801179a:	61a5      	str	r5, [r4, #24]
 801179c:	2208      	movs	r2, #8
 801179e:	4629      	mov	r1, r5
 80117a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80117a4:	f7fd f886 	bl	800e8b4 <memset>
 80117a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80117ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80117b0:	4620      	mov	r0, r4
 80117b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117b4:	3468      	adds	r4, #104	; 0x68
 80117b6:	e7d9      	b.n	801176c <__sfp+0x1c>
 80117b8:	2104      	movs	r1, #4
 80117ba:	4638      	mov	r0, r7
 80117bc:	f7ff ff62 	bl	8011684 <__sfmoreglue>
 80117c0:	4604      	mov	r4, r0
 80117c2:	6030      	str	r0, [r6, #0]
 80117c4:	2800      	cmp	r0, #0
 80117c6:	d1d5      	bne.n	8011774 <__sfp+0x24>
 80117c8:	f7ff ff78 	bl	80116bc <__sfp_lock_release>
 80117cc:	230c      	movs	r3, #12
 80117ce:	603b      	str	r3, [r7, #0]
 80117d0:	e7ee      	b.n	80117b0 <__sfp+0x60>
 80117d2:	bf00      	nop
 80117d4:	08014924 	.word	0x08014924
 80117d8:	ffff0001 	.word	0xffff0001

080117dc <_fwalk_reent>:
 80117dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117e0:	4606      	mov	r6, r0
 80117e2:	4688      	mov	r8, r1
 80117e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80117e8:	2700      	movs	r7, #0
 80117ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80117ee:	f1b9 0901 	subs.w	r9, r9, #1
 80117f2:	d505      	bpl.n	8011800 <_fwalk_reent+0x24>
 80117f4:	6824      	ldr	r4, [r4, #0]
 80117f6:	2c00      	cmp	r4, #0
 80117f8:	d1f7      	bne.n	80117ea <_fwalk_reent+0xe>
 80117fa:	4638      	mov	r0, r7
 80117fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011800:	89ab      	ldrh	r3, [r5, #12]
 8011802:	2b01      	cmp	r3, #1
 8011804:	d907      	bls.n	8011816 <_fwalk_reent+0x3a>
 8011806:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801180a:	3301      	adds	r3, #1
 801180c:	d003      	beq.n	8011816 <_fwalk_reent+0x3a>
 801180e:	4629      	mov	r1, r5
 8011810:	4630      	mov	r0, r6
 8011812:	47c0      	blx	r8
 8011814:	4307      	orrs	r7, r0
 8011816:	3568      	adds	r5, #104	; 0x68
 8011818:	e7e9      	b.n	80117ee <_fwalk_reent+0x12>

0801181a <rshift>:
 801181a:	6903      	ldr	r3, [r0, #16]
 801181c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011824:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011828:	f100 0414 	add.w	r4, r0, #20
 801182c:	dd45      	ble.n	80118ba <rshift+0xa0>
 801182e:	f011 011f 	ands.w	r1, r1, #31
 8011832:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011836:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801183a:	d10c      	bne.n	8011856 <rshift+0x3c>
 801183c:	f100 0710 	add.w	r7, r0, #16
 8011840:	4629      	mov	r1, r5
 8011842:	42b1      	cmp	r1, r6
 8011844:	d334      	bcc.n	80118b0 <rshift+0x96>
 8011846:	1a9b      	subs	r3, r3, r2
 8011848:	009b      	lsls	r3, r3, #2
 801184a:	1eea      	subs	r2, r5, #3
 801184c:	4296      	cmp	r6, r2
 801184e:	bf38      	it	cc
 8011850:	2300      	movcc	r3, #0
 8011852:	4423      	add	r3, r4
 8011854:	e015      	b.n	8011882 <rshift+0x68>
 8011856:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801185a:	f1c1 0820 	rsb	r8, r1, #32
 801185e:	40cf      	lsrs	r7, r1
 8011860:	f105 0e04 	add.w	lr, r5, #4
 8011864:	46a1      	mov	r9, r4
 8011866:	4576      	cmp	r6, lr
 8011868:	46f4      	mov	ip, lr
 801186a:	d815      	bhi.n	8011898 <rshift+0x7e>
 801186c:	1a9a      	subs	r2, r3, r2
 801186e:	0092      	lsls	r2, r2, #2
 8011870:	3a04      	subs	r2, #4
 8011872:	3501      	adds	r5, #1
 8011874:	42ae      	cmp	r6, r5
 8011876:	bf38      	it	cc
 8011878:	2200      	movcc	r2, #0
 801187a:	18a3      	adds	r3, r4, r2
 801187c:	50a7      	str	r7, [r4, r2]
 801187e:	b107      	cbz	r7, 8011882 <rshift+0x68>
 8011880:	3304      	adds	r3, #4
 8011882:	1b1a      	subs	r2, r3, r4
 8011884:	42a3      	cmp	r3, r4
 8011886:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801188a:	bf08      	it	eq
 801188c:	2300      	moveq	r3, #0
 801188e:	6102      	str	r2, [r0, #16]
 8011890:	bf08      	it	eq
 8011892:	6143      	streq	r3, [r0, #20]
 8011894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011898:	f8dc c000 	ldr.w	ip, [ip]
 801189c:	fa0c fc08 	lsl.w	ip, ip, r8
 80118a0:	ea4c 0707 	orr.w	r7, ip, r7
 80118a4:	f849 7b04 	str.w	r7, [r9], #4
 80118a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80118ac:	40cf      	lsrs	r7, r1
 80118ae:	e7da      	b.n	8011866 <rshift+0x4c>
 80118b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80118b4:	f847 cf04 	str.w	ip, [r7, #4]!
 80118b8:	e7c3      	b.n	8011842 <rshift+0x28>
 80118ba:	4623      	mov	r3, r4
 80118bc:	e7e1      	b.n	8011882 <rshift+0x68>

080118be <__hexdig_fun>:
 80118be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80118c2:	2b09      	cmp	r3, #9
 80118c4:	d802      	bhi.n	80118cc <__hexdig_fun+0xe>
 80118c6:	3820      	subs	r0, #32
 80118c8:	b2c0      	uxtb	r0, r0
 80118ca:	4770      	bx	lr
 80118cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80118d0:	2b05      	cmp	r3, #5
 80118d2:	d801      	bhi.n	80118d8 <__hexdig_fun+0x1a>
 80118d4:	3847      	subs	r0, #71	; 0x47
 80118d6:	e7f7      	b.n	80118c8 <__hexdig_fun+0xa>
 80118d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80118dc:	2b05      	cmp	r3, #5
 80118de:	d801      	bhi.n	80118e4 <__hexdig_fun+0x26>
 80118e0:	3827      	subs	r0, #39	; 0x27
 80118e2:	e7f1      	b.n	80118c8 <__hexdig_fun+0xa>
 80118e4:	2000      	movs	r0, #0
 80118e6:	4770      	bx	lr

080118e8 <__gethex>:
 80118e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ec:	ed2d 8b02 	vpush	{d8}
 80118f0:	b089      	sub	sp, #36	; 0x24
 80118f2:	ee08 0a10 	vmov	s16, r0
 80118f6:	9304      	str	r3, [sp, #16]
 80118f8:	4bb4      	ldr	r3, [pc, #720]	; (8011bcc <__gethex+0x2e4>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	9301      	str	r3, [sp, #4]
 80118fe:	4618      	mov	r0, r3
 8011900:	468b      	mov	fp, r1
 8011902:	4690      	mov	r8, r2
 8011904:	f7ee fc7e 	bl	8000204 <strlen>
 8011908:	9b01      	ldr	r3, [sp, #4]
 801190a:	f8db 2000 	ldr.w	r2, [fp]
 801190e:	4403      	add	r3, r0
 8011910:	4682      	mov	sl, r0
 8011912:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011916:	9305      	str	r3, [sp, #20]
 8011918:	1c93      	adds	r3, r2, #2
 801191a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801191e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011922:	32fe      	adds	r2, #254	; 0xfe
 8011924:	18d1      	adds	r1, r2, r3
 8011926:	461f      	mov	r7, r3
 8011928:	f813 0b01 	ldrb.w	r0, [r3], #1
 801192c:	9100      	str	r1, [sp, #0]
 801192e:	2830      	cmp	r0, #48	; 0x30
 8011930:	d0f8      	beq.n	8011924 <__gethex+0x3c>
 8011932:	f7ff ffc4 	bl	80118be <__hexdig_fun>
 8011936:	4604      	mov	r4, r0
 8011938:	2800      	cmp	r0, #0
 801193a:	d13a      	bne.n	80119b2 <__gethex+0xca>
 801193c:	9901      	ldr	r1, [sp, #4]
 801193e:	4652      	mov	r2, sl
 8011940:	4638      	mov	r0, r7
 8011942:	f001 ff69 	bl	8013818 <strncmp>
 8011946:	4605      	mov	r5, r0
 8011948:	2800      	cmp	r0, #0
 801194a:	d168      	bne.n	8011a1e <__gethex+0x136>
 801194c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011950:	eb07 060a 	add.w	r6, r7, sl
 8011954:	f7ff ffb3 	bl	80118be <__hexdig_fun>
 8011958:	2800      	cmp	r0, #0
 801195a:	d062      	beq.n	8011a22 <__gethex+0x13a>
 801195c:	4633      	mov	r3, r6
 801195e:	7818      	ldrb	r0, [r3, #0]
 8011960:	2830      	cmp	r0, #48	; 0x30
 8011962:	461f      	mov	r7, r3
 8011964:	f103 0301 	add.w	r3, r3, #1
 8011968:	d0f9      	beq.n	801195e <__gethex+0x76>
 801196a:	f7ff ffa8 	bl	80118be <__hexdig_fun>
 801196e:	2301      	movs	r3, #1
 8011970:	fab0 f480 	clz	r4, r0
 8011974:	0964      	lsrs	r4, r4, #5
 8011976:	4635      	mov	r5, r6
 8011978:	9300      	str	r3, [sp, #0]
 801197a:	463a      	mov	r2, r7
 801197c:	4616      	mov	r6, r2
 801197e:	3201      	adds	r2, #1
 8011980:	7830      	ldrb	r0, [r6, #0]
 8011982:	f7ff ff9c 	bl	80118be <__hexdig_fun>
 8011986:	2800      	cmp	r0, #0
 8011988:	d1f8      	bne.n	801197c <__gethex+0x94>
 801198a:	9901      	ldr	r1, [sp, #4]
 801198c:	4652      	mov	r2, sl
 801198e:	4630      	mov	r0, r6
 8011990:	f001 ff42 	bl	8013818 <strncmp>
 8011994:	b980      	cbnz	r0, 80119b8 <__gethex+0xd0>
 8011996:	b94d      	cbnz	r5, 80119ac <__gethex+0xc4>
 8011998:	eb06 050a 	add.w	r5, r6, sl
 801199c:	462a      	mov	r2, r5
 801199e:	4616      	mov	r6, r2
 80119a0:	3201      	adds	r2, #1
 80119a2:	7830      	ldrb	r0, [r6, #0]
 80119a4:	f7ff ff8b 	bl	80118be <__hexdig_fun>
 80119a8:	2800      	cmp	r0, #0
 80119aa:	d1f8      	bne.n	801199e <__gethex+0xb6>
 80119ac:	1bad      	subs	r5, r5, r6
 80119ae:	00ad      	lsls	r5, r5, #2
 80119b0:	e004      	b.n	80119bc <__gethex+0xd4>
 80119b2:	2400      	movs	r4, #0
 80119b4:	4625      	mov	r5, r4
 80119b6:	e7e0      	b.n	801197a <__gethex+0x92>
 80119b8:	2d00      	cmp	r5, #0
 80119ba:	d1f7      	bne.n	80119ac <__gethex+0xc4>
 80119bc:	7833      	ldrb	r3, [r6, #0]
 80119be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80119c2:	2b50      	cmp	r3, #80	; 0x50
 80119c4:	d13b      	bne.n	8011a3e <__gethex+0x156>
 80119c6:	7873      	ldrb	r3, [r6, #1]
 80119c8:	2b2b      	cmp	r3, #43	; 0x2b
 80119ca:	d02c      	beq.n	8011a26 <__gethex+0x13e>
 80119cc:	2b2d      	cmp	r3, #45	; 0x2d
 80119ce:	d02e      	beq.n	8011a2e <__gethex+0x146>
 80119d0:	1c71      	adds	r1, r6, #1
 80119d2:	f04f 0900 	mov.w	r9, #0
 80119d6:	7808      	ldrb	r0, [r1, #0]
 80119d8:	f7ff ff71 	bl	80118be <__hexdig_fun>
 80119dc:	1e43      	subs	r3, r0, #1
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	2b18      	cmp	r3, #24
 80119e2:	d82c      	bhi.n	8011a3e <__gethex+0x156>
 80119e4:	f1a0 0210 	sub.w	r2, r0, #16
 80119e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80119ec:	f7ff ff67 	bl	80118be <__hexdig_fun>
 80119f0:	1e43      	subs	r3, r0, #1
 80119f2:	b2db      	uxtb	r3, r3
 80119f4:	2b18      	cmp	r3, #24
 80119f6:	d91d      	bls.n	8011a34 <__gethex+0x14c>
 80119f8:	f1b9 0f00 	cmp.w	r9, #0
 80119fc:	d000      	beq.n	8011a00 <__gethex+0x118>
 80119fe:	4252      	negs	r2, r2
 8011a00:	4415      	add	r5, r2
 8011a02:	f8cb 1000 	str.w	r1, [fp]
 8011a06:	b1e4      	cbz	r4, 8011a42 <__gethex+0x15a>
 8011a08:	9b00      	ldr	r3, [sp, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	bf14      	ite	ne
 8011a0e:	2700      	movne	r7, #0
 8011a10:	2706      	moveq	r7, #6
 8011a12:	4638      	mov	r0, r7
 8011a14:	b009      	add	sp, #36	; 0x24
 8011a16:	ecbd 8b02 	vpop	{d8}
 8011a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a1e:	463e      	mov	r6, r7
 8011a20:	4625      	mov	r5, r4
 8011a22:	2401      	movs	r4, #1
 8011a24:	e7ca      	b.n	80119bc <__gethex+0xd4>
 8011a26:	f04f 0900 	mov.w	r9, #0
 8011a2a:	1cb1      	adds	r1, r6, #2
 8011a2c:	e7d3      	b.n	80119d6 <__gethex+0xee>
 8011a2e:	f04f 0901 	mov.w	r9, #1
 8011a32:	e7fa      	b.n	8011a2a <__gethex+0x142>
 8011a34:	230a      	movs	r3, #10
 8011a36:	fb03 0202 	mla	r2, r3, r2, r0
 8011a3a:	3a10      	subs	r2, #16
 8011a3c:	e7d4      	b.n	80119e8 <__gethex+0x100>
 8011a3e:	4631      	mov	r1, r6
 8011a40:	e7df      	b.n	8011a02 <__gethex+0x11a>
 8011a42:	1bf3      	subs	r3, r6, r7
 8011a44:	3b01      	subs	r3, #1
 8011a46:	4621      	mov	r1, r4
 8011a48:	2b07      	cmp	r3, #7
 8011a4a:	dc0b      	bgt.n	8011a64 <__gethex+0x17c>
 8011a4c:	ee18 0a10 	vmov	r0, s16
 8011a50:	f000 faec 	bl	801202c <_Balloc>
 8011a54:	4604      	mov	r4, r0
 8011a56:	b940      	cbnz	r0, 8011a6a <__gethex+0x182>
 8011a58:	4b5d      	ldr	r3, [pc, #372]	; (8011bd0 <__gethex+0x2e8>)
 8011a5a:	4602      	mov	r2, r0
 8011a5c:	21de      	movs	r1, #222	; 0xde
 8011a5e:	485d      	ldr	r0, [pc, #372]	; (8011bd4 <__gethex+0x2ec>)
 8011a60:	f001 ffaa 	bl	80139b8 <__assert_func>
 8011a64:	3101      	adds	r1, #1
 8011a66:	105b      	asrs	r3, r3, #1
 8011a68:	e7ee      	b.n	8011a48 <__gethex+0x160>
 8011a6a:	f100 0914 	add.w	r9, r0, #20
 8011a6e:	f04f 0b00 	mov.w	fp, #0
 8011a72:	f1ca 0301 	rsb	r3, sl, #1
 8011a76:	f8cd 9008 	str.w	r9, [sp, #8]
 8011a7a:	f8cd b000 	str.w	fp, [sp]
 8011a7e:	9306      	str	r3, [sp, #24]
 8011a80:	42b7      	cmp	r7, r6
 8011a82:	d340      	bcc.n	8011b06 <__gethex+0x21e>
 8011a84:	9802      	ldr	r0, [sp, #8]
 8011a86:	9b00      	ldr	r3, [sp, #0]
 8011a88:	f840 3b04 	str.w	r3, [r0], #4
 8011a8c:	eba0 0009 	sub.w	r0, r0, r9
 8011a90:	1080      	asrs	r0, r0, #2
 8011a92:	0146      	lsls	r6, r0, #5
 8011a94:	6120      	str	r0, [r4, #16]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f000 fbba 	bl	8012210 <__hi0bits>
 8011a9c:	1a30      	subs	r0, r6, r0
 8011a9e:	f8d8 6000 	ldr.w	r6, [r8]
 8011aa2:	42b0      	cmp	r0, r6
 8011aa4:	dd63      	ble.n	8011b6e <__gethex+0x286>
 8011aa6:	1b87      	subs	r7, r0, r6
 8011aa8:	4639      	mov	r1, r7
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f000 ff5e 	bl	801296c <__any_on>
 8011ab0:	4682      	mov	sl, r0
 8011ab2:	b1a8      	cbz	r0, 8011ae0 <__gethex+0x1f8>
 8011ab4:	1e7b      	subs	r3, r7, #1
 8011ab6:	1159      	asrs	r1, r3, #5
 8011ab8:	f003 021f 	and.w	r2, r3, #31
 8011abc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011ac0:	f04f 0a01 	mov.w	sl, #1
 8011ac4:	fa0a f202 	lsl.w	r2, sl, r2
 8011ac8:	420a      	tst	r2, r1
 8011aca:	d009      	beq.n	8011ae0 <__gethex+0x1f8>
 8011acc:	4553      	cmp	r3, sl
 8011ace:	dd05      	ble.n	8011adc <__gethex+0x1f4>
 8011ad0:	1eb9      	subs	r1, r7, #2
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	f000 ff4a 	bl	801296c <__any_on>
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	d145      	bne.n	8011b68 <__gethex+0x280>
 8011adc:	f04f 0a02 	mov.w	sl, #2
 8011ae0:	4639      	mov	r1, r7
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	f7ff fe99 	bl	801181a <rshift>
 8011ae8:	443d      	add	r5, r7
 8011aea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011aee:	42ab      	cmp	r3, r5
 8011af0:	da4c      	bge.n	8011b8c <__gethex+0x2a4>
 8011af2:	ee18 0a10 	vmov	r0, s16
 8011af6:	4621      	mov	r1, r4
 8011af8:	f000 fad8 	bl	80120ac <_Bfree>
 8011afc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011afe:	2300      	movs	r3, #0
 8011b00:	6013      	str	r3, [r2, #0]
 8011b02:	27a3      	movs	r7, #163	; 0xa3
 8011b04:	e785      	b.n	8011a12 <__gethex+0x12a>
 8011b06:	1e73      	subs	r3, r6, #1
 8011b08:	9a05      	ldr	r2, [sp, #20]
 8011b0a:	9303      	str	r3, [sp, #12]
 8011b0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011b10:	4293      	cmp	r3, r2
 8011b12:	d019      	beq.n	8011b48 <__gethex+0x260>
 8011b14:	f1bb 0f20 	cmp.w	fp, #32
 8011b18:	d107      	bne.n	8011b2a <__gethex+0x242>
 8011b1a:	9b02      	ldr	r3, [sp, #8]
 8011b1c:	9a00      	ldr	r2, [sp, #0]
 8011b1e:	f843 2b04 	str.w	r2, [r3], #4
 8011b22:	9302      	str	r3, [sp, #8]
 8011b24:	2300      	movs	r3, #0
 8011b26:	9300      	str	r3, [sp, #0]
 8011b28:	469b      	mov	fp, r3
 8011b2a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011b2e:	f7ff fec6 	bl	80118be <__hexdig_fun>
 8011b32:	9b00      	ldr	r3, [sp, #0]
 8011b34:	f000 000f 	and.w	r0, r0, #15
 8011b38:	fa00 f00b 	lsl.w	r0, r0, fp
 8011b3c:	4303      	orrs	r3, r0
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	f10b 0b04 	add.w	fp, fp, #4
 8011b44:	9b03      	ldr	r3, [sp, #12]
 8011b46:	e00d      	b.n	8011b64 <__gethex+0x27c>
 8011b48:	9b03      	ldr	r3, [sp, #12]
 8011b4a:	9a06      	ldr	r2, [sp, #24]
 8011b4c:	4413      	add	r3, r2
 8011b4e:	42bb      	cmp	r3, r7
 8011b50:	d3e0      	bcc.n	8011b14 <__gethex+0x22c>
 8011b52:	4618      	mov	r0, r3
 8011b54:	9901      	ldr	r1, [sp, #4]
 8011b56:	9307      	str	r3, [sp, #28]
 8011b58:	4652      	mov	r2, sl
 8011b5a:	f001 fe5d 	bl	8013818 <strncmp>
 8011b5e:	9b07      	ldr	r3, [sp, #28]
 8011b60:	2800      	cmp	r0, #0
 8011b62:	d1d7      	bne.n	8011b14 <__gethex+0x22c>
 8011b64:	461e      	mov	r6, r3
 8011b66:	e78b      	b.n	8011a80 <__gethex+0x198>
 8011b68:	f04f 0a03 	mov.w	sl, #3
 8011b6c:	e7b8      	b.n	8011ae0 <__gethex+0x1f8>
 8011b6e:	da0a      	bge.n	8011b86 <__gethex+0x29e>
 8011b70:	1a37      	subs	r7, r6, r0
 8011b72:	4621      	mov	r1, r4
 8011b74:	ee18 0a10 	vmov	r0, s16
 8011b78:	463a      	mov	r2, r7
 8011b7a:	f000 fcb3 	bl	80124e4 <__lshift>
 8011b7e:	1bed      	subs	r5, r5, r7
 8011b80:	4604      	mov	r4, r0
 8011b82:	f100 0914 	add.w	r9, r0, #20
 8011b86:	f04f 0a00 	mov.w	sl, #0
 8011b8a:	e7ae      	b.n	8011aea <__gethex+0x202>
 8011b8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011b90:	42a8      	cmp	r0, r5
 8011b92:	dd72      	ble.n	8011c7a <__gethex+0x392>
 8011b94:	1b45      	subs	r5, r0, r5
 8011b96:	42ae      	cmp	r6, r5
 8011b98:	dc36      	bgt.n	8011c08 <__gethex+0x320>
 8011b9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011b9e:	2b02      	cmp	r3, #2
 8011ba0:	d02a      	beq.n	8011bf8 <__gethex+0x310>
 8011ba2:	2b03      	cmp	r3, #3
 8011ba4:	d02c      	beq.n	8011c00 <__gethex+0x318>
 8011ba6:	2b01      	cmp	r3, #1
 8011ba8:	d11c      	bne.n	8011be4 <__gethex+0x2fc>
 8011baa:	42ae      	cmp	r6, r5
 8011bac:	d11a      	bne.n	8011be4 <__gethex+0x2fc>
 8011bae:	2e01      	cmp	r6, #1
 8011bb0:	d112      	bne.n	8011bd8 <__gethex+0x2f0>
 8011bb2:	9a04      	ldr	r2, [sp, #16]
 8011bb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011bb8:	6013      	str	r3, [r2, #0]
 8011bba:	2301      	movs	r3, #1
 8011bbc:	6123      	str	r3, [r4, #16]
 8011bbe:	f8c9 3000 	str.w	r3, [r9]
 8011bc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011bc4:	2762      	movs	r7, #98	; 0x62
 8011bc6:	601c      	str	r4, [r3, #0]
 8011bc8:	e723      	b.n	8011a12 <__gethex+0x12a>
 8011bca:	bf00      	nop
 8011bcc:	08014b08 	.word	0x08014b08
 8011bd0:	08014a2f 	.word	0x08014a2f
 8011bd4:	08014aa0 	.word	0x08014aa0
 8011bd8:	1e71      	subs	r1, r6, #1
 8011bda:	4620      	mov	r0, r4
 8011bdc:	f000 fec6 	bl	801296c <__any_on>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d1e6      	bne.n	8011bb2 <__gethex+0x2ca>
 8011be4:	ee18 0a10 	vmov	r0, s16
 8011be8:	4621      	mov	r1, r4
 8011bea:	f000 fa5f 	bl	80120ac <_Bfree>
 8011bee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	6013      	str	r3, [r2, #0]
 8011bf4:	2750      	movs	r7, #80	; 0x50
 8011bf6:	e70c      	b.n	8011a12 <__gethex+0x12a>
 8011bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d1f2      	bne.n	8011be4 <__gethex+0x2fc>
 8011bfe:	e7d8      	b.n	8011bb2 <__gethex+0x2ca>
 8011c00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d1d5      	bne.n	8011bb2 <__gethex+0x2ca>
 8011c06:	e7ed      	b.n	8011be4 <__gethex+0x2fc>
 8011c08:	1e6f      	subs	r7, r5, #1
 8011c0a:	f1ba 0f00 	cmp.w	sl, #0
 8011c0e:	d131      	bne.n	8011c74 <__gethex+0x38c>
 8011c10:	b127      	cbz	r7, 8011c1c <__gethex+0x334>
 8011c12:	4639      	mov	r1, r7
 8011c14:	4620      	mov	r0, r4
 8011c16:	f000 fea9 	bl	801296c <__any_on>
 8011c1a:	4682      	mov	sl, r0
 8011c1c:	117b      	asrs	r3, r7, #5
 8011c1e:	2101      	movs	r1, #1
 8011c20:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011c24:	f007 071f 	and.w	r7, r7, #31
 8011c28:	fa01 f707 	lsl.w	r7, r1, r7
 8011c2c:	421f      	tst	r7, r3
 8011c2e:	4629      	mov	r1, r5
 8011c30:	4620      	mov	r0, r4
 8011c32:	bf18      	it	ne
 8011c34:	f04a 0a02 	orrne.w	sl, sl, #2
 8011c38:	1b76      	subs	r6, r6, r5
 8011c3a:	f7ff fdee 	bl	801181a <rshift>
 8011c3e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011c42:	2702      	movs	r7, #2
 8011c44:	f1ba 0f00 	cmp.w	sl, #0
 8011c48:	d048      	beq.n	8011cdc <__gethex+0x3f4>
 8011c4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c4e:	2b02      	cmp	r3, #2
 8011c50:	d015      	beq.n	8011c7e <__gethex+0x396>
 8011c52:	2b03      	cmp	r3, #3
 8011c54:	d017      	beq.n	8011c86 <__gethex+0x39e>
 8011c56:	2b01      	cmp	r3, #1
 8011c58:	d109      	bne.n	8011c6e <__gethex+0x386>
 8011c5a:	f01a 0f02 	tst.w	sl, #2
 8011c5e:	d006      	beq.n	8011c6e <__gethex+0x386>
 8011c60:	f8d9 0000 	ldr.w	r0, [r9]
 8011c64:	ea4a 0a00 	orr.w	sl, sl, r0
 8011c68:	f01a 0f01 	tst.w	sl, #1
 8011c6c:	d10e      	bne.n	8011c8c <__gethex+0x3a4>
 8011c6e:	f047 0710 	orr.w	r7, r7, #16
 8011c72:	e033      	b.n	8011cdc <__gethex+0x3f4>
 8011c74:	f04f 0a01 	mov.w	sl, #1
 8011c78:	e7d0      	b.n	8011c1c <__gethex+0x334>
 8011c7a:	2701      	movs	r7, #1
 8011c7c:	e7e2      	b.n	8011c44 <__gethex+0x35c>
 8011c7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c80:	f1c3 0301 	rsb	r3, r3, #1
 8011c84:	9315      	str	r3, [sp, #84]	; 0x54
 8011c86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d0f0      	beq.n	8011c6e <__gethex+0x386>
 8011c8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011c90:	f104 0314 	add.w	r3, r4, #20
 8011c94:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011c98:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011c9c:	f04f 0c00 	mov.w	ip, #0
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ca6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011caa:	d01c      	beq.n	8011ce6 <__gethex+0x3fe>
 8011cac:	3201      	adds	r2, #1
 8011cae:	6002      	str	r2, [r0, #0]
 8011cb0:	2f02      	cmp	r7, #2
 8011cb2:	f104 0314 	add.w	r3, r4, #20
 8011cb6:	d13f      	bne.n	8011d38 <__gethex+0x450>
 8011cb8:	f8d8 2000 	ldr.w	r2, [r8]
 8011cbc:	3a01      	subs	r2, #1
 8011cbe:	42b2      	cmp	r2, r6
 8011cc0:	d10a      	bne.n	8011cd8 <__gethex+0x3f0>
 8011cc2:	1171      	asrs	r1, r6, #5
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011cca:	f006 061f 	and.w	r6, r6, #31
 8011cce:	fa02 f606 	lsl.w	r6, r2, r6
 8011cd2:	421e      	tst	r6, r3
 8011cd4:	bf18      	it	ne
 8011cd6:	4617      	movne	r7, r2
 8011cd8:	f047 0720 	orr.w	r7, r7, #32
 8011cdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011cde:	601c      	str	r4, [r3, #0]
 8011ce0:	9b04      	ldr	r3, [sp, #16]
 8011ce2:	601d      	str	r5, [r3, #0]
 8011ce4:	e695      	b.n	8011a12 <__gethex+0x12a>
 8011ce6:	4299      	cmp	r1, r3
 8011ce8:	f843 cc04 	str.w	ip, [r3, #-4]
 8011cec:	d8d8      	bhi.n	8011ca0 <__gethex+0x3b8>
 8011cee:	68a3      	ldr	r3, [r4, #8]
 8011cf0:	459b      	cmp	fp, r3
 8011cf2:	db19      	blt.n	8011d28 <__gethex+0x440>
 8011cf4:	6861      	ldr	r1, [r4, #4]
 8011cf6:	ee18 0a10 	vmov	r0, s16
 8011cfa:	3101      	adds	r1, #1
 8011cfc:	f000 f996 	bl	801202c <_Balloc>
 8011d00:	4681      	mov	r9, r0
 8011d02:	b918      	cbnz	r0, 8011d0c <__gethex+0x424>
 8011d04:	4b1a      	ldr	r3, [pc, #104]	; (8011d70 <__gethex+0x488>)
 8011d06:	4602      	mov	r2, r0
 8011d08:	2184      	movs	r1, #132	; 0x84
 8011d0a:	e6a8      	b.n	8011a5e <__gethex+0x176>
 8011d0c:	6922      	ldr	r2, [r4, #16]
 8011d0e:	3202      	adds	r2, #2
 8011d10:	f104 010c 	add.w	r1, r4, #12
 8011d14:	0092      	lsls	r2, r2, #2
 8011d16:	300c      	adds	r0, #12
 8011d18:	f7fc fda4 	bl	800e864 <memcpy>
 8011d1c:	4621      	mov	r1, r4
 8011d1e:	ee18 0a10 	vmov	r0, s16
 8011d22:	f000 f9c3 	bl	80120ac <_Bfree>
 8011d26:	464c      	mov	r4, r9
 8011d28:	6923      	ldr	r3, [r4, #16]
 8011d2a:	1c5a      	adds	r2, r3, #1
 8011d2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011d30:	6122      	str	r2, [r4, #16]
 8011d32:	2201      	movs	r2, #1
 8011d34:	615a      	str	r2, [r3, #20]
 8011d36:	e7bb      	b.n	8011cb0 <__gethex+0x3c8>
 8011d38:	6922      	ldr	r2, [r4, #16]
 8011d3a:	455a      	cmp	r2, fp
 8011d3c:	dd0b      	ble.n	8011d56 <__gethex+0x46e>
 8011d3e:	2101      	movs	r1, #1
 8011d40:	4620      	mov	r0, r4
 8011d42:	f7ff fd6a 	bl	801181a <rshift>
 8011d46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d4a:	3501      	adds	r5, #1
 8011d4c:	42ab      	cmp	r3, r5
 8011d4e:	f6ff aed0 	blt.w	8011af2 <__gethex+0x20a>
 8011d52:	2701      	movs	r7, #1
 8011d54:	e7c0      	b.n	8011cd8 <__gethex+0x3f0>
 8011d56:	f016 061f 	ands.w	r6, r6, #31
 8011d5a:	d0fa      	beq.n	8011d52 <__gethex+0x46a>
 8011d5c:	4453      	add	r3, sl
 8011d5e:	f1c6 0620 	rsb	r6, r6, #32
 8011d62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011d66:	f000 fa53 	bl	8012210 <__hi0bits>
 8011d6a:	42b0      	cmp	r0, r6
 8011d6c:	dbe7      	blt.n	8011d3e <__gethex+0x456>
 8011d6e:	e7f0      	b.n	8011d52 <__gethex+0x46a>
 8011d70:	08014a2f 	.word	0x08014a2f

08011d74 <L_shift>:
 8011d74:	f1c2 0208 	rsb	r2, r2, #8
 8011d78:	0092      	lsls	r2, r2, #2
 8011d7a:	b570      	push	{r4, r5, r6, lr}
 8011d7c:	f1c2 0620 	rsb	r6, r2, #32
 8011d80:	6843      	ldr	r3, [r0, #4]
 8011d82:	6804      	ldr	r4, [r0, #0]
 8011d84:	fa03 f506 	lsl.w	r5, r3, r6
 8011d88:	432c      	orrs	r4, r5
 8011d8a:	40d3      	lsrs	r3, r2
 8011d8c:	6004      	str	r4, [r0, #0]
 8011d8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011d92:	4288      	cmp	r0, r1
 8011d94:	d3f4      	bcc.n	8011d80 <L_shift+0xc>
 8011d96:	bd70      	pop	{r4, r5, r6, pc}

08011d98 <__match>:
 8011d98:	b530      	push	{r4, r5, lr}
 8011d9a:	6803      	ldr	r3, [r0, #0]
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011da2:	b914      	cbnz	r4, 8011daa <__match+0x12>
 8011da4:	6003      	str	r3, [r0, #0]
 8011da6:	2001      	movs	r0, #1
 8011da8:	bd30      	pop	{r4, r5, pc}
 8011daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011db2:	2d19      	cmp	r5, #25
 8011db4:	bf98      	it	ls
 8011db6:	3220      	addls	r2, #32
 8011db8:	42a2      	cmp	r2, r4
 8011dba:	d0f0      	beq.n	8011d9e <__match+0x6>
 8011dbc:	2000      	movs	r0, #0
 8011dbe:	e7f3      	b.n	8011da8 <__match+0x10>

08011dc0 <__hexnan>:
 8011dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc4:	680b      	ldr	r3, [r1, #0]
 8011dc6:	115e      	asrs	r6, r3, #5
 8011dc8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011dcc:	f013 031f 	ands.w	r3, r3, #31
 8011dd0:	b087      	sub	sp, #28
 8011dd2:	bf18      	it	ne
 8011dd4:	3604      	addne	r6, #4
 8011dd6:	2500      	movs	r5, #0
 8011dd8:	1f37      	subs	r7, r6, #4
 8011dda:	4690      	mov	r8, r2
 8011ddc:	6802      	ldr	r2, [r0, #0]
 8011dde:	9301      	str	r3, [sp, #4]
 8011de0:	4682      	mov	sl, r0
 8011de2:	f846 5c04 	str.w	r5, [r6, #-4]
 8011de6:	46b9      	mov	r9, r7
 8011de8:	463c      	mov	r4, r7
 8011dea:	9502      	str	r5, [sp, #8]
 8011dec:	46ab      	mov	fp, r5
 8011dee:	7851      	ldrb	r1, [r2, #1]
 8011df0:	1c53      	adds	r3, r2, #1
 8011df2:	9303      	str	r3, [sp, #12]
 8011df4:	b341      	cbz	r1, 8011e48 <__hexnan+0x88>
 8011df6:	4608      	mov	r0, r1
 8011df8:	9205      	str	r2, [sp, #20]
 8011dfa:	9104      	str	r1, [sp, #16]
 8011dfc:	f7ff fd5f 	bl	80118be <__hexdig_fun>
 8011e00:	2800      	cmp	r0, #0
 8011e02:	d14f      	bne.n	8011ea4 <__hexnan+0xe4>
 8011e04:	9904      	ldr	r1, [sp, #16]
 8011e06:	9a05      	ldr	r2, [sp, #20]
 8011e08:	2920      	cmp	r1, #32
 8011e0a:	d818      	bhi.n	8011e3e <__hexnan+0x7e>
 8011e0c:	9b02      	ldr	r3, [sp, #8]
 8011e0e:	459b      	cmp	fp, r3
 8011e10:	dd13      	ble.n	8011e3a <__hexnan+0x7a>
 8011e12:	454c      	cmp	r4, r9
 8011e14:	d206      	bcs.n	8011e24 <__hexnan+0x64>
 8011e16:	2d07      	cmp	r5, #7
 8011e18:	dc04      	bgt.n	8011e24 <__hexnan+0x64>
 8011e1a:	462a      	mov	r2, r5
 8011e1c:	4649      	mov	r1, r9
 8011e1e:	4620      	mov	r0, r4
 8011e20:	f7ff ffa8 	bl	8011d74 <L_shift>
 8011e24:	4544      	cmp	r4, r8
 8011e26:	d950      	bls.n	8011eca <__hexnan+0x10a>
 8011e28:	2300      	movs	r3, #0
 8011e2a:	f1a4 0904 	sub.w	r9, r4, #4
 8011e2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e32:	f8cd b008 	str.w	fp, [sp, #8]
 8011e36:	464c      	mov	r4, r9
 8011e38:	461d      	mov	r5, r3
 8011e3a:	9a03      	ldr	r2, [sp, #12]
 8011e3c:	e7d7      	b.n	8011dee <__hexnan+0x2e>
 8011e3e:	2929      	cmp	r1, #41	; 0x29
 8011e40:	d156      	bne.n	8011ef0 <__hexnan+0x130>
 8011e42:	3202      	adds	r2, #2
 8011e44:	f8ca 2000 	str.w	r2, [sl]
 8011e48:	f1bb 0f00 	cmp.w	fp, #0
 8011e4c:	d050      	beq.n	8011ef0 <__hexnan+0x130>
 8011e4e:	454c      	cmp	r4, r9
 8011e50:	d206      	bcs.n	8011e60 <__hexnan+0xa0>
 8011e52:	2d07      	cmp	r5, #7
 8011e54:	dc04      	bgt.n	8011e60 <__hexnan+0xa0>
 8011e56:	462a      	mov	r2, r5
 8011e58:	4649      	mov	r1, r9
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	f7ff ff8a 	bl	8011d74 <L_shift>
 8011e60:	4544      	cmp	r4, r8
 8011e62:	d934      	bls.n	8011ece <__hexnan+0x10e>
 8011e64:	f1a8 0204 	sub.w	r2, r8, #4
 8011e68:	4623      	mov	r3, r4
 8011e6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8011e6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011e72:	429f      	cmp	r7, r3
 8011e74:	d2f9      	bcs.n	8011e6a <__hexnan+0xaa>
 8011e76:	1b3b      	subs	r3, r7, r4
 8011e78:	f023 0303 	bic.w	r3, r3, #3
 8011e7c:	3304      	adds	r3, #4
 8011e7e:	3401      	adds	r4, #1
 8011e80:	3e03      	subs	r6, #3
 8011e82:	42b4      	cmp	r4, r6
 8011e84:	bf88      	it	hi
 8011e86:	2304      	movhi	r3, #4
 8011e88:	4443      	add	r3, r8
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	f843 2b04 	str.w	r2, [r3], #4
 8011e90:	429f      	cmp	r7, r3
 8011e92:	d2fb      	bcs.n	8011e8c <__hexnan+0xcc>
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	b91b      	cbnz	r3, 8011ea0 <__hexnan+0xe0>
 8011e98:	4547      	cmp	r7, r8
 8011e9a:	d127      	bne.n	8011eec <__hexnan+0x12c>
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	603b      	str	r3, [r7, #0]
 8011ea0:	2005      	movs	r0, #5
 8011ea2:	e026      	b.n	8011ef2 <__hexnan+0x132>
 8011ea4:	3501      	adds	r5, #1
 8011ea6:	2d08      	cmp	r5, #8
 8011ea8:	f10b 0b01 	add.w	fp, fp, #1
 8011eac:	dd06      	ble.n	8011ebc <__hexnan+0xfc>
 8011eae:	4544      	cmp	r4, r8
 8011eb0:	d9c3      	bls.n	8011e3a <__hexnan+0x7a>
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	f844 3c04 	str.w	r3, [r4, #-4]
 8011eb8:	2501      	movs	r5, #1
 8011eba:	3c04      	subs	r4, #4
 8011ebc:	6822      	ldr	r2, [r4, #0]
 8011ebe:	f000 000f 	and.w	r0, r0, #15
 8011ec2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011ec6:	6022      	str	r2, [r4, #0]
 8011ec8:	e7b7      	b.n	8011e3a <__hexnan+0x7a>
 8011eca:	2508      	movs	r5, #8
 8011ecc:	e7b5      	b.n	8011e3a <__hexnan+0x7a>
 8011ece:	9b01      	ldr	r3, [sp, #4]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d0df      	beq.n	8011e94 <__hexnan+0xd4>
 8011ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ed8:	f1c3 0320 	rsb	r3, r3, #32
 8011edc:	fa22 f303 	lsr.w	r3, r2, r3
 8011ee0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011ee4:	401a      	ands	r2, r3
 8011ee6:	f846 2c04 	str.w	r2, [r6, #-4]
 8011eea:	e7d3      	b.n	8011e94 <__hexnan+0xd4>
 8011eec:	3f04      	subs	r7, #4
 8011eee:	e7d1      	b.n	8011e94 <__hexnan+0xd4>
 8011ef0:	2004      	movs	r0, #4
 8011ef2:	b007      	add	sp, #28
 8011ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011ef8 <_localeconv_r>:
 8011ef8:	4800      	ldr	r0, [pc, #0]	; (8011efc <_localeconv_r+0x4>)
 8011efa:	4770      	bx	lr
 8011efc:	20000268 	.word	0x20000268

08011f00 <__retarget_lock_init_recursive>:
 8011f00:	4770      	bx	lr

08011f02 <__retarget_lock_acquire_recursive>:
 8011f02:	4770      	bx	lr

08011f04 <__retarget_lock_release_recursive>:
 8011f04:	4770      	bx	lr
	...

08011f08 <_lseek_r>:
 8011f08:	b538      	push	{r3, r4, r5, lr}
 8011f0a:	4d07      	ldr	r5, [pc, #28]	; (8011f28 <_lseek_r+0x20>)
 8011f0c:	4604      	mov	r4, r0
 8011f0e:	4608      	mov	r0, r1
 8011f10:	4611      	mov	r1, r2
 8011f12:	2200      	movs	r2, #0
 8011f14:	602a      	str	r2, [r5, #0]
 8011f16:	461a      	mov	r2, r3
 8011f18:	f7f2 f962 	bl	80041e0 <_lseek>
 8011f1c:	1c43      	adds	r3, r0, #1
 8011f1e:	d102      	bne.n	8011f26 <_lseek_r+0x1e>
 8011f20:	682b      	ldr	r3, [r5, #0]
 8011f22:	b103      	cbz	r3, 8011f26 <_lseek_r+0x1e>
 8011f24:	6023      	str	r3, [r4, #0]
 8011f26:	bd38      	pop	{r3, r4, r5, pc}
 8011f28:	2000314c 	.word	0x2000314c

08011f2c <__swhatbuf_r>:
 8011f2c:	b570      	push	{r4, r5, r6, lr}
 8011f2e:	460e      	mov	r6, r1
 8011f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f34:	2900      	cmp	r1, #0
 8011f36:	b096      	sub	sp, #88	; 0x58
 8011f38:	4614      	mov	r4, r2
 8011f3a:	461d      	mov	r5, r3
 8011f3c:	da08      	bge.n	8011f50 <__swhatbuf_r+0x24>
 8011f3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011f42:	2200      	movs	r2, #0
 8011f44:	602a      	str	r2, [r5, #0]
 8011f46:	061a      	lsls	r2, r3, #24
 8011f48:	d410      	bmi.n	8011f6c <__swhatbuf_r+0x40>
 8011f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f4e:	e00e      	b.n	8011f6e <__swhatbuf_r+0x42>
 8011f50:	466a      	mov	r2, sp
 8011f52:	f001 fd61 	bl	8013a18 <_fstat_r>
 8011f56:	2800      	cmp	r0, #0
 8011f58:	dbf1      	blt.n	8011f3e <__swhatbuf_r+0x12>
 8011f5a:	9a01      	ldr	r2, [sp, #4]
 8011f5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011f60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011f64:	425a      	negs	r2, r3
 8011f66:	415a      	adcs	r2, r3
 8011f68:	602a      	str	r2, [r5, #0]
 8011f6a:	e7ee      	b.n	8011f4a <__swhatbuf_r+0x1e>
 8011f6c:	2340      	movs	r3, #64	; 0x40
 8011f6e:	2000      	movs	r0, #0
 8011f70:	6023      	str	r3, [r4, #0]
 8011f72:	b016      	add	sp, #88	; 0x58
 8011f74:	bd70      	pop	{r4, r5, r6, pc}
	...

08011f78 <__smakebuf_r>:
 8011f78:	898b      	ldrh	r3, [r1, #12]
 8011f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f7c:	079d      	lsls	r5, r3, #30
 8011f7e:	4606      	mov	r6, r0
 8011f80:	460c      	mov	r4, r1
 8011f82:	d507      	bpl.n	8011f94 <__smakebuf_r+0x1c>
 8011f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f88:	6023      	str	r3, [r4, #0]
 8011f8a:	6123      	str	r3, [r4, #16]
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	6163      	str	r3, [r4, #20]
 8011f90:	b002      	add	sp, #8
 8011f92:	bd70      	pop	{r4, r5, r6, pc}
 8011f94:	ab01      	add	r3, sp, #4
 8011f96:	466a      	mov	r2, sp
 8011f98:	f7ff ffc8 	bl	8011f2c <__swhatbuf_r>
 8011f9c:	9900      	ldr	r1, [sp, #0]
 8011f9e:	4605      	mov	r5, r0
 8011fa0:	4630      	mov	r0, r6
 8011fa2:	f000 fd87 	bl	8012ab4 <_malloc_r>
 8011fa6:	b948      	cbnz	r0, 8011fbc <__smakebuf_r+0x44>
 8011fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fac:	059a      	lsls	r2, r3, #22
 8011fae:	d4ef      	bmi.n	8011f90 <__smakebuf_r+0x18>
 8011fb0:	f023 0303 	bic.w	r3, r3, #3
 8011fb4:	f043 0302 	orr.w	r3, r3, #2
 8011fb8:	81a3      	strh	r3, [r4, #12]
 8011fba:	e7e3      	b.n	8011f84 <__smakebuf_r+0xc>
 8011fbc:	4b0d      	ldr	r3, [pc, #52]	; (8011ff4 <__smakebuf_r+0x7c>)
 8011fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8011fc0:	89a3      	ldrh	r3, [r4, #12]
 8011fc2:	6020      	str	r0, [r4, #0]
 8011fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fc8:	81a3      	strh	r3, [r4, #12]
 8011fca:	9b00      	ldr	r3, [sp, #0]
 8011fcc:	6163      	str	r3, [r4, #20]
 8011fce:	9b01      	ldr	r3, [sp, #4]
 8011fd0:	6120      	str	r0, [r4, #16]
 8011fd2:	b15b      	cbz	r3, 8011fec <__smakebuf_r+0x74>
 8011fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fd8:	4630      	mov	r0, r6
 8011fda:	f001 fd2f 	bl	8013a3c <_isatty_r>
 8011fde:	b128      	cbz	r0, 8011fec <__smakebuf_r+0x74>
 8011fe0:	89a3      	ldrh	r3, [r4, #12]
 8011fe2:	f023 0303 	bic.w	r3, r3, #3
 8011fe6:	f043 0301 	orr.w	r3, r3, #1
 8011fea:	81a3      	strh	r3, [r4, #12]
 8011fec:	89a0      	ldrh	r0, [r4, #12]
 8011fee:	4305      	orrs	r5, r0
 8011ff0:	81a5      	strh	r5, [r4, #12]
 8011ff2:	e7cd      	b.n	8011f90 <__smakebuf_r+0x18>
 8011ff4:	08011679 	.word	0x08011679

08011ff8 <malloc>:
 8011ff8:	4b02      	ldr	r3, [pc, #8]	; (8012004 <malloc+0xc>)
 8011ffa:	4601      	mov	r1, r0
 8011ffc:	6818      	ldr	r0, [r3, #0]
 8011ffe:	f000 bd59 	b.w	8012ab4 <_malloc_r>
 8012002:	bf00      	nop
 8012004:	20000110 	.word	0x20000110

08012008 <__ascii_mbtowc>:
 8012008:	b082      	sub	sp, #8
 801200a:	b901      	cbnz	r1, 801200e <__ascii_mbtowc+0x6>
 801200c:	a901      	add	r1, sp, #4
 801200e:	b142      	cbz	r2, 8012022 <__ascii_mbtowc+0x1a>
 8012010:	b14b      	cbz	r3, 8012026 <__ascii_mbtowc+0x1e>
 8012012:	7813      	ldrb	r3, [r2, #0]
 8012014:	600b      	str	r3, [r1, #0]
 8012016:	7812      	ldrb	r2, [r2, #0]
 8012018:	1e10      	subs	r0, r2, #0
 801201a:	bf18      	it	ne
 801201c:	2001      	movne	r0, #1
 801201e:	b002      	add	sp, #8
 8012020:	4770      	bx	lr
 8012022:	4610      	mov	r0, r2
 8012024:	e7fb      	b.n	801201e <__ascii_mbtowc+0x16>
 8012026:	f06f 0001 	mvn.w	r0, #1
 801202a:	e7f8      	b.n	801201e <__ascii_mbtowc+0x16>

0801202c <_Balloc>:
 801202c:	b570      	push	{r4, r5, r6, lr}
 801202e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012030:	4604      	mov	r4, r0
 8012032:	460d      	mov	r5, r1
 8012034:	b976      	cbnz	r6, 8012054 <_Balloc+0x28>
 8012036:	2010      	movs	r0, #16
 8012038:	f7ff ffde 	bl	8011ff8 <malloc>
 801203c:	4602      	mov	r2, r0
 801203e:	6260      	str	r0, [r4, #36]	; 0x24
 8012040:	b920      	cbnz	r0, 801204c <_Balloc+0x20>
 8012042:	4b18      	ldr	r3, [pc, #96]	; (80120a4 <_Balloc+0x78>)
 8012044:	4818      	ldr	r0, [pc, #96]	; (80120a8 <_Balloc+0x7c>)
 8012046:	2166      	movs	r1, #102	; 0x66
 8012048:	f001 fcb6 	bl	80139b8 <__assert_func>
 801204c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012050:	6006      	str	r6, [r0, #0]
 8012052:	60c6      	str	r6, [r0, #12]
 8012054:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012056:	68f3      	ldr	r3, [r6, #12]
 8012058:	b183      	cbz	r3, 801207c <_Balloc+0x50>
 801205a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012062:	b9b8      	cbnz	r0, 8012094 <_Balloc+0x68>
 8012064:	2101      	movs	r1, #1
 8012066:	fa01 f605 	lsl.w	r6, r1, r5
 801206a:	1d72      	adds	r2, r6, #5
 801206c:	0092      	lsls	r2, r2, #2
 801206e:	4620      	mov	r0, r4
 8012070:	f000 fc9d 	bl	80129ae <_calloc_r>
 8012074:	b160      	cbz	r0, 8012090 <_Balloc+0x64>
 8012076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801207a:	e00e      	b.n	801209a <_Balloc+0x6e>
 801207c:	2221      	movs	r2, #33	; 0x21
 801207e:	2104      	movs	r1, #4
 8012080:	4620      	mov	r0, r4
 8012082:	f000 fc94 	bl	80129ae <_calloc_r>
 8012086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012088:	60f0      	str	r0, [r6, #12]
 801208a:	68db      	ldr	r3, [r3, #12]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1e4      	bne.n	801205a <_Balloc+0x2e>
 8012090:	2000      	movs	r0, #0
 8012092:	bd70      	pop	{r4, r5, r6, pc}
 8012094:	6802      	ldr	r2, [r0, #0]
 8012096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801209a:	2300      	movs	r3, #0
 801209c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80120a0:	e7f7      	b.n	8012092 <_Balloc+0x66>
 80120a2:	bf00      	nop
 80120a4:	080149bd 	.word	0x080149bd
 80120a8:	08014b1c 	.word	0x08014b1c

080120ac <_Bfree>:
 80120ac:	b570      	push	{r4, r5, r6, lr}
 80120ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120b0:	4605      	mov	r5, r0
 80120b2:	460c      	mov	r4, r1
 80120b4:	b976      	cbnz	r6, 80120d4 <_Bfree+0x28>
 80120b6:	2010      	movs	r0, #16
 80120b8:	f7ff ff9e 	bl	8011ff8 <malloc>
 80120bc:	4602      	mov	r2, r0
 80120be:	6268      	str	r0, [r5, #36]	; 0x24
 80120c0:	b920      	cbnz	r0, 80120cc <_Bfree+0x20>
 80120c2:	4b09      	ldr	r3, [pc, #36]	; (80120e8 <_Bfree+0x3c>)
 80120c4:	4809      	ldr	r0, [pc, #36]	; (80120ec <_Bfree+0x40>)
 80120c6:	218a      	movs	r1, #138	; 0x8a
 80120c8:	f001 fc76 	bl	80139b8 <__assert_func>
 80120cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120d0:	6006      	str	r6, [r0, #0]
 80120d2:	60c6      	str	r6, [r0, #12]
 80120d4:	b13c      	cbz	r4, 80120e6 <_Bfree+0x3a>
 80120d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80120d8:	6862      	ldr	r2, [r4, #4]
 80120da:	68db      	ldr	r3, [r3, #12]
 80120dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80120e0:	6021      	str	r1, [r4, #0]
 80120e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80120e6:	bd70      	pop	{r4, r5, r6, pc}
 80120e8:	080149bd 	.word	0x080149bd
 80120ec:	08014b1c 	.word	0x08014b1c

080120f0 <__multadd>:
 80120f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120f4:	690d      	ldr	r5, [r1, #16]
 80120f6:	4607      	mov	r7, r0
 80120f8:	460c      	mov	r4, r1
 80120fa:	461e      	mov	r6, r3
 80120fc:	f101 0c14 	add.w	ip, r1, #20
 8012100:	2000      	movs	r0, #0
 8012102:	f8dc 3000 	ldr.w	r3, [ip]
 8012106:	b299      	uxth	r1, r3
 8012108:	fb02 6101 	mla	r1, r2, r1, r6
 801210c:	0c1e      	lsrs	r6, r3, #16
 801210e:	0c0b      	lsrs	r3, r1, #16
 8012110:	fb02 3306 	mla	r3, r2, r6, r3
 8012114:	b289      	uxth	r1, r1
 8012116:	3001      	adds	r0, #1
 8012118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801211c:	4285      	cmp	r5, r0
 801211e:	f84c 1b04 	str.w	r1, [ip], #4
 8012122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012126:	dcec      	bgt.n	8012102 <__multadd+0x12>
 8012128:	b30e      	cbz	r6, 801216e <__multadd+0x7e>
 801212a:	68a3      	ldr	r3, [r4, #8]
 801212c:	42ab      	cmp	r3, r5
 801212e:	dc19      	bgt.n	8012164 <__multadd+0x74>
 8012130:	6861      	ldr	r1, [r4, #4]
 8012132:	4638      	mov	r0, r7
 8012134:	3101      	adds	r1, #1
 8012136:	f7ff ff79 	bl	801202c <_Balloc>
 801213a:	4680      	mov	r8, r0
 801213c:	b928      	cbnz	r0, 801214a <__multadd+0x5a>
 801213e:	4602      	mov	r2, r0
 8012140:	4b0c      	ldr	r3, [pc, #48]	; (8012174 <__multadd+0x84>)
 8012142:	480d      	ldr	r0, [pc, #52]	; (8012178 <__multadd+0x88>)
 8012144:	21b5      	movs	r1, #181	; 0xb5
 8012146:	f001 fc37 	bl	80139b8 <__assert_func>
 801214a:	6922      	ldr	r2, [r4, #16]
 801214c:	3202      	adds	r2, #2
 801214e:	f104 010c 	add.w	r1, r4, #12
 8012152:	0092      	lsls	r2, r2, #2
 8012154:	300c      	adds	r0, #12
 8012156:	f7fc fb85 	bl	800e864 <memcpy>
 801215a:	4621      	mov	r1, r4
 801215c:	4638      	mov	r0, r7
 801215e:	f7ff ffa5 	bl	80120ac <_Bfree>
 8012162:	4644      	mov	r4, r8
 8012164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012168:	3501      	adds	r5, #1
 801216a:	615e      	str	r6, [r3, #20]
 801216c:	6125      	str	r5, [r4, #16]
 801216e:	4620      	mov	r0, r4
 8012170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012174:	08014a2f 	.word	0x08014a2f
 8012178:	08014b1c 	.word	0x08014b1c

0801217c <__s2b>:
 801217c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012180:	460c      	mov	r4, r1
 8012182:	4615      	mov	r5, r2
 8012184:	461f      	mov	r7, r3
 8012186:	2209      	movs	r2, #9
 8012188:	3308      	adds	r3, #8
 801218a:	4606      	mov	r6, r0
 801218c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012190:	2100      	movs	r1, #0
 8012192:	2201      	movs	r2, #1
 8012194:	429a      	cmp	r2, r3
 8012196:	db09      	blt.n	80121ac <__s2b+0x30>
 8012198:	4630      	mov	r0, r6
 801219a:	f7ff ff47 	bl	801202c <_Balloc>
 801219e:	b940      	cbnz	r0, 80121b2 <__s2b+0x36>
 80121a0:	4602      	mov	r2, r0
 80121a2:	4b19      	ldr	r3, [pc, #100]	; (8012208 <__s2b+0x8c>)
 80121a4:	4819      	ldr	r0, [pc, #100]	; (801220c <__s2b+0x90>)
 80121a6:	21ce      	movs	r1, #206	; 0xce
 80121a8:	f001 fc06 	bl	80139b8 <__assert_func>
 80121ac:	0052      	lsls	r2, r2, #1
 80121ae:	3101      	adds	r1, #1
 80121b0:	e7f0      	b.n	8012194 <__s2b+0x18>
 80121b2:	9b08      	ldr	r3, [sp, #32]
 80121b4:	6143      	str	r3, [r0, #20]
 80121b6:	2d09      	cmp	r5, #9
 80121b8:	f04f 0301 	mov.w	r3, #1
 80121bc:	6103      	str	r3, [r0, #16]
 80121be:	dd16      	ble.n	80121ee <__s2b+0x72>
 80121c0:	f104 0909 	add.w	r9, r4, #9
 80121c4:	46c8      	mov	r8, r9
 80121c6:	442c      	add	r4, r5
 80121c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80121cc:	4601      	mov	r1, r0
 80121ce:	3b30      	subs	r3, #48	; 0x30
 80121d0:	220a      	movs	r2, #10
 80121d2:	4630      	mov	r0, r6
 80121d4:	f7ff ff8c 	bl	80120f0 <__multadd>
 80121d8:	45a0      	cmp	r8, r4
 80121da:	d1f5      	bne.n	80121c8 <__s2b+0x4c>
 80121dc:	f1a5 0408 	sub.w	r4, r5, #8
 80121e0:	444c      	add	r4, r9
 80121e2:	1b2d      	subs	r5, r5, r4
 80121e4:	1963      	adds	r3, r4, r5
 80121e6:	42bb      	cmp	r3, r7
 80121e8:	db04      	blt.n	80121f4 <__s2b+0x78>
 80121ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121ee:	340a      	adds	r4, #10
 80121f0:	2509      	movs	r5, #9
 80121f2:	e7f6      	b.n	80121e2 <__s2b+0x66>
 80121f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80121f8:	4601      	mov	r1, r0
 80121fa:	3b30      	subs	r3, #48	; 0x30
 80121fc:	220a      	movs	r2, #10
 80121fe:	4630      	mov	r0, r6
 8012200:	f7ff ff76 	bl	80120f0 <__multadd>
 8012204:	e7ee      	b.n	80121e4 <__s2b+0x68>
 8012206:	bf00      	nop
 8012208:	08014a2f 	.word	0x08014a2f
 801220c:	08014b1c 	.word	0x08014b1c

08012210 <__hi0bits>:
 8012210:	0c03      	lsrs	r3, r0, #16
 8012212:	041b      	lsls	r3, r3, #16
 8012214:	b9d3      	cbnz	r3, 801224c <__hi0bits+0x3c>
 8012216:	0400      	lsls	r0, r0, #16
 8012218:	2310      	movs	r3, #16
 801221a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801221e:	bf04      	itt	eq
 8012220:	0200      	lsleq	r0, r0, #8
 8012222:	3308      	addeq	r3, #8
 8012224:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012228:	bf04      	itt	eq
 801222a:	0100      	lsleq	r0, r0, #4
 801222c:	3304      	addeq	r3, #4
 801222e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012232:	bf04      	itt	eq
 8012234:	0080      	lsleq	r0, r0, #2
 8012236:	3302      	addeq	r3, #2
 8012238:	2800      	cmp	r0, #0
 801223a:	db05      	blt.n	8012248 <__hi0bits+0x38>
 801223c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012240:	f103 0301 	add.w	r3, r3, #1
 8012244:	bf08      	it	eq
 8012246:	2320      	moveq	r3, #32
 8012248:	4618      	mov	r0, r3
 801224a:	4770      	bx	lr
 801224c:	2300      	movs	r3, #0
 801224e:	e7e4      	b.n	801221a <__hi0bits+0xa>

08012250 <__lo0bits>:
 8012250:	6803      	ldr	r3, [r0, #0]
 8012252:	f013 0207 	ands.w	r2, r3, #7
 8012256:	4601      	mov	r1, r0
 8012258:	d00b      	beq.n	8012272 <__lo0bits+0x22>
 801225a:	07da      	lsls	r2, r3, #31
 801225c:	d423      	bmi.n	80122a6 <__lo0bits+0x56>
 801225e:	0798      	lsls	r0, r3, #30
 8012260:	bf49      	itett	mi
 8012262:	085b      	lsrmi	r3, r3, #1
 8012264:	089b      	lsrpl	r3, r3, #2
 8012266:	2001      	movmi	r0, #1
 8012268:	600b      	strmi	r3, [r1, #0]
 801226a:	bf5c      	itt	pl
 801226c:	600b      	strpl	r3, [r1, #0]
 801226e:	2002      	movpl	r0, #2
 8012270:	4770      	bx	lr
 8012272:	b298      	uxth	r0, r3
 8012274:	b9a8      	cbnz	r0, 80122a2 <__lo0bits+0x52>
 8012276:	0c1b      	lsrs	r3, r3, #16
 8012278:	2010      	movs	r0, #16
 801227a:	b2da      	uxtb	r2, r3
 801227c:	b90a      	cbnz	r2, 8012282 <__lo0bits+0x32>
 801227e:	3008      	adds	r0, #8
 8012280:	0a1b      	lsrs	r3, r3, #8
 8012282:	071a      	lsls	r2, r3, #28
 8012284:	bf04      	itt	eq
 8012286:	091b      	lsreq	r3, r3, #4
 8012288:	3004      	addeq	r0, #4
 801228a:	079a      	lsls	r2, r3, #30
 801228c:	bf04      	itt	eq
 801228e:	089b      	lsreq	r3, r3, #2
 8012290:	3002      	addeq	r0, #2
 8012292:	07da      	lsls	r2, r3, #31
 8012294:	d403      	bmi.n	801229e <__lo0bits+0x4e>
 8012296:	085b      	lsrs	r3, r3, #1
 8012298:	f100 0001 	add.w	r0, r0, #1
 801229c:	d005      	beq.n	80122aa <__lo0bits+0x5a>
 801229e:	600b      	str	r3, [r1, #0]
 80122a0:	4770      	bx	lr
 80122a2:	4610      	mov	r0, r2
 80122a4:	e7e9      	b.n	801227a <__lo0bits+0x2a>
 80122a6:	2000      	movs	r0, #0
 80122a8:	4770      	bx	lr
 80122aa:	2020      	movs	r0, #32
 80122ac:	4770      	bx	lr
	...

080122b0 <__i2b>:
 80122b0:	b510      	push	{r4, lr}
 80122b2:	460c      	mov	r4, r1
 80122b4:	2101      	movs	r1, #1
 80122b6:	f7ff feb9 	bl	801202c <_Balloc>
 80122ba:	4602      	mov	r2, r0
 80122bc:	b928      	cbnz	r0, 80122ca <__i2b+0x1a>
 80122be:	4b05      	ldr	r3, [pc, #20]	; (80122d4 <__i2b+0x24>)
 80122c0:	4805      	ldr	r0, [pc, #20]	; (80122d8 <__i2b+0x28>)
 80122c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80122c6:	f001 fb77 	bl	80139b8 <__assert_func>
 80122ca:	2301      	movs	r3, #1
 80122cc:	6144      	str	r4, [r0, #20]
 80122ce:	6103      	str	r3, [r0, #16]
 80122d0:	bd10      	pop	{r4, pc}
 80122d2:	bf00      	nop
 80122d4:	08014a2f 	.word	0x08014a2f
 80122d8:	08014b1c 	.word	0x08014b1c

080122dc <__multiply>:
 80122dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e0:	4691      	mov	r9, r2
 80122e2:	690a      	ldr	r2, [r1, #16]
 80122e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80122e8:	429a      	cmp	r2, r3
 80122ea:	bfb8      	it	lt
 80122ec:	460b      	movlt	r3, r1
 80122ee:	460c      	mov	r4, r1
 80122f0:	bfbc      	itt	lt
 80122f2:	464c      	movlt	r4, r9
 80122f4:	4699      	movlt	r9, r3
 80122f6:	6927      	ldr	r7, [r4, #16]
 80122f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80122fc:	68a3      	ldr	r3, [r4, #8]
 80122fe:	6861      	ldr	r1, [r4, #4]
 8012300:	eb07 060a 	add.w	r6, r7, sl
 8012304:	42b3      	cmp	r3, r6
 8012306:	b085      	sub	sp, #20
 8012308:	bfb8      	it	lt
 801230a:	3101      	addlt	r1, #1
 801230c:	f7ff fe8e 	bl	801202c <_Balloc>
 8012310:	b930      	cbnz	r0, 8012320 <__multiply+0x44>
 8012312:	4602      	mov	r2, r0
 8012314:	4b44      	ldr	r3, [pc, #272]	; (8012428 <__multiply+0x14c>)
 8012316:	4845      	ldr	r0, [pc, #276]	; (801242c <__multiply+0x150>)
 8012318:	f240 115d 	movw	r1, #349	; 0x15d
 801231c:	f001 fb4c 	bl	80139b8 <__assert_func>
 8012320:	f100 0514 	add.w	r5, r0, #20
 8012324:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012328:	462b      	mov	r3, r5
 801232a:	2200      	movs	r2, #0
 801232c:	4543      	cmp	r3, r8
 801232e:	d321      	bcc.n	8012374 <__multiply+0x98>
 8012330:	f104 0314 	add.w	r3, r4, #20
 8012334:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012338:	f109 0314 	add.w	r3, r9, #20
 801233c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012340:	9202      	str	r2, [sp, #8]
 8012342:	1b3a      	subs	r2, r7, r4
 8012344:	3a15      	subs	r2, #21
 8012346:	f022 0203 	bic.w	r2, r2, #3
 801234a:	3204      	adds	r2, #4
 801234c:	f104 0115 	add.w	r1, r4, #21
 8012350:	428f      	cmp	r7, r1
 8012352:	bf38      	it	cc
 8012354:	2204      	movcc	r2, #4
 8012356:	9201      	str	r2, [sp, #4]
 8012358:	9a02      	ldr	r2, [sp, #8]
 801235a:	9303      	str	r3, [sp, #12]
 801235c:	429a      	cmp	r2, r3
 801235e:	d80c      	bhi.n	801237a <__multiply+0x9e>
 8012360:	2e00      	cmp	r6, #0
 8012362:	dd03      	ble.n	801236c <__multiply+0x90>
 8012364:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012368:	2b00      	cmp	r3, #0
 801236a:	d05a      	beq.n	8012422 <__multiply+0x146>
 801236c:	6106      	str	r6, [r0, #16]
 801236e:	b005      	add	sp, #20
 8012370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012374:	f843 2b04 	str.w	r2, [r3], #4
 8012378:	e7d8      	b.n	801232c <__multiply+0x50>
 801237a:	f8b3 a000 	ldrh.w	sl, [r3]
 801237e:	f1ba 0f00 	cmp.w	sl, #0
 8012382:	d024      	beq.n	80123ce <__multiply+0xf2>
 8012384:	f104 0e14 	add.w	lr, r4, #20
 8012388:	46a9      	mov	r9, r5
 801238a:	f04f 0c00 	mov.w	ip, #0
 801238e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012392:	f8d9 1000 	ldr.w	r1, [r9]
 8012396:	fa1f fb82 	uxth.w	fp, r2
 801239a:	b289      	uxth	r1, r1
 801239c:	fb0a 110b 	mla	r1, sl, fp, r1
 80123a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80123a4:	f8d9 2000 	ldr.w	r2, [r9]
 80123a8:	4461      	add	r1, ip
 80123aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80123ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80123b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80123b6:	b289      	uxth	r1, r1
 80123b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80123bc:	4577      	cmp	r7, lr
 80123be:	f849 1b04 	str.w	r1, [r9], #4
 80123c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80123c6:	d8e2      	bhi.n	801238e <__multiply+0xb2>
 80123c8:	9a01      	ldr	r2, [sp, #4]
 80123ca:	f845 c002 	str.w	ip, [r5, r2]
 80123ce:	9a03      	ldr	r2, [sp, #12]
 80123d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80123d4:	3304      	adds	r3, #4
 80123d6:	f1b9 0f00 	cmp.w	r9, #0
 80123da:	d020      	beq.n	801241e <__multiply+0x142>
 80123dc:	6829      	ldr	r1, [r5, #0]
 80123de:	f104 0c14 	add.w	ip, r4, #20
 80123e2:	46ae      	mov	lr, r5
 80123e4:	f04f 0a00 	mov.w	sl, #0
 80123e8:	f8bc b000 	ldrh.w	fp, [ip]
 80123ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80123f0:	fb09 220b 	mla	r2, r9, fp, r2
 80123f4:	4492      	add	sl, r2
 80123f6:	b289      	uxth	r1, r1
 80123f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80123fc:	f84e 1b04 	str.w	r1, [lr], #4
 8012400:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012404:	f8be 1000 	ldrh.w	r1, [lr]
 8012408:	0c12      	lsrs	r2, r2, #16
 801240a:	fb09 1102 	mla	r1, r9, r2, r1
 801240e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012412:	4567      	cmp	r7, ip
 8012414:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012418:	d8e6      	bhi.n	80123e8 <__multiply+0x10c>
 801241a:	9a01      	ldr	r2, [sp, #4]
 801241c:	50a9      	str	r1, [r5, r2]
 801241e:	3504      	adds	r5, #4
 8012420:	e79a      	b.n	8012358 <__multiply+0x7c>
 8012422:	3e01      	subs	r6, #1
 8012424:	e79c      	b.n	8012360 <__multiply+0x84>
 8012426:	bf00      	nop
 8012428:	08014a2f 	.word	0x08014a2f
 801242c:	08014b1c 	.word	0x08014b1c

08012430 <__pow5mult>:
 8012430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012434:	4615      	mov	r5, r2
 8012436:	f012 0203 	ands.w	r2, r2, #3
 801243a:	4606      	mov	r6, r0
 801243c:	460f      	mov	r7, r1
 801243e:	d007      	beq.n	8012450 <__pow5mult+0x20>
 8012440:	4c25      	ldr	r4, [pc, #148]	; (80124d8 <__pow5mult+0xa8>)
 8012442:	3a01      	subs	r2, #1
 8012444:	2300      	movs	r3, #0
 8012446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801244a:	f7ff fe51 	bl	80120f0 <__multadd>
 801244e:	4607      	mov	r7, r0
 8012450:	10ad      	asrs	r5, r5, #2
 8012452:	d03d      	beq.n	80124d0 <__pow5mult+0xa0>
 8012454:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012456:	b97c      	cbnz	r4, 8012478 <__pow5mult+0x48>
 8012458:	2010      	movs	r0, #16
 801245a:	f7ff fdcd 	bl	8011ff8 <malloc>
 801245e:	4602      	mov	r2, r0
 8012460:	6270      	str	r0, [r6, #36]	; 0x24
 8012462:	b928      	cbnz	r0, 8012470 <__pow5mult+0x40>
 8012464:	4b1d      	ldr	r3, [pc, #116]	; (80124dc <__pow5mult+0xac>)
 8012466:	481e      	ldr	r0, [pc, #120]	; (80124e0 <__pow5mult+0xb0>)
 8012468:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801246c:	f001 faa4 	bl	80139b8 <__assert_func>
 8012470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012474:	6004      	str	r4, [r0, #0]
 8012476:	60c4      	str	r4, [r0, #12]
 8012478:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801247c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012480:	b94c      	cbnz	r4, 8012496 <__pow5mult+0x66>
 8012482:	f240 2171 	movw	r1, #625	; 0x271
 8012486:	4630      	mov	r0, r6
 8012488:	f7ff ff12 	bl	80122b0 <__i2b>
 801248c:	2300      	movs	r3, #0
 801248e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012492:	4604      	mov	r4, r0
 8012494:	6003      	str	r3, [r0, #0]
 8012496:	f04f 0900 	mov.w	r9, #0
 801249a:	07eb      	lsls	r3, r5, #31
 801249c:	d50a      	bpl.n	80124b4 <__pow5mult+0x84>
 801249e:	4639      	mov	r1, r7
 80124a0:	4622      	mov	r2, r4
 80124a2:	4630      	mov	r0, r6
 80124a4:	f7ff ff1a 	bl	80122dc <__multiply>
 80124a8:	4639      	mov	r1, r7
 80124aa:	4680      	mov	r8, r0
 80124ac:	4630      	mov	r0, r6
 80124ae:	f7ff fdfd 	bl	80120ac <_Bfree>
 80124b2:	4647      	mov	r7, r8
 80124b4:	106d      	asrs	r5, r5, #1
 80124b6:	d00b      	beq.n	80124d0 <__pow5mult+0xa0>
 80124b8:	6820      	ldr	r0, [r4, #0]
 80124ba:	b938      	cbnz	r0, 80124cc <__pow5mult+0x9c>
 80124bc:	4622      	mov	r2, r4
 80124be:	4621      	mov	r1, r4
 80124c0:	4630      	mov	r0, r6
 80124c2:	f7ff ff0b 	bl	80122dc <__multiply>
 80124c6:	6020      	str	r0, [r4, #0]
 80124c8:	f8c0 9000 	str.w	r9, [r0]
 80124cc:	4604      	mov	r4, r0
 80124ce:	e7e4      	b.n	801249a <__pow5mult+0x6a>
 80124d0:	4638      	mov	r0, r7
 80124d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124d6:	bf00      	nop
 80124d8:	08014c68 	.word	0x08014c68
 80124dc:	080149bd 	.word	0x080149bd
 80124e0:	08014b1c 	.word	0x08014b1c

080124e4 <__lshift>:
 80124e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124e8:	460c      	mov	r4, r1
 80124ea:	6849      	ldr	r1, [r1, #4]
 80124ec:	6923      	ldr	r3, [r4, #16]
 80124ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80124f2:	68a3      	ldr	r3, [r4, #8]
 80124f4:	4607      	mov	r7, r0
 80124f6:	4691      	mov	r9, r2
 80124f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80124fc:	f108 0601 	add.w	r6, r8, #1
 8012500:	42b3      	cmp	r3, r6
 8012502:	db0b      	blt.n	801251c <__lshift+0x38>
 8012504:	4638      	mov	r0, r7
 8012506:	f7ff fd91 	bl	801202c <_Balloc>
 801250a:	4605      	mov	r5, r0
 801250c:	b948      	cbnz	r0, 8012522 <__lshift+0x3e>
 801250e:	4602      	mov	r2, r0
 8012510:	4b2a      	ldr	r3, [pc, #168]	; (80125bc <__lshift+0xd8>)
 8012512:	482b      	ldr	r0, [pc, #172]	; (80125c0 <__lshift+0xdc>)
 8012514:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012518:	f001 fa4e 	bl	80139b8 <__assert_func>
 801251c:	3101      	adds	r1, #1
 801251e:	005b      	lsls	r3, r3, #1
 8012520:	e7ee      	b.n	8012500 <__lshift+0x1c>
 8012522:	2300      	movs	r3, #0
 8012524:	f100 0114 	add.w	r1, r0, #20
 8012528:	f100 0210 	add.w	r2, r0, #16
 801252c:	4618      	mov	r0, r3
 801252e:	4553      	cmp	r3, sl
 8012530:	db37      	blt.n	80125a2 <__lshift+0xbe>
 8012532:	6920      	ldr	r0, [r4, #16]
 8012534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012538:	f104 0314 	add.w	r3, r4, #20
 801253c:	f019 091f 	ands.w	r9, r9, #31
 8012540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012544:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012548:	d02f      	beq.n	80125aa <__lshift+0xc6>
 801254a:	f1c9 0e20 	rsb	lr, r9, #32
 801254e:	468a      	mov	sl, r1
 8012550:	f04f 0c00 	mov.w	ip, #0
 8012554:	681a      	ldr	r2, [r3, #0]
 8012556:	fa02 f209 	lsl.w	r2, r2, r9
 801255a:	ea42 020c 	orr.w	r2, r2, ip
 801255e:	f84a 2b04 	str.w	r2, [sl], #4
 8012562:	f853 2b04 	ldr.w	r2, [r3], #4
 8012566:	4298      	cmp	r0, r3
 8012568:	fa22 fc0e 	lsr.w	ip, r2, lr
 801256c:	d8f2      	bhi.n	8012554 <__lshift+0x70>
 801256e:	1b03      	subs	r3, r0, r4
 8012570:	3b15      	subs	r3, #21
 8012572:	f023 0303 	bic.w	r3, r3, #3
 8012576:	3304      	adds	r3, #4
 8012578:	f104 0215 	add.w	r2, r4, #21
 801257c:	4290      	cmp	r0, r2
 801257e:	bf38      	it	cc
 8012580:	2304      	movcc	r3, #4
 8012582:	f841 c003 	str.w	ip, [r1, r3]
 8012586:	f1bc 0f00 	cmp.w	ip, #0
 801258a:	d001      	beq.n	8012590 <__lshift+0xac>
 801258c:	f108 0602 	add.w	r6, r8, #2
 8012590:	3e01      	subs	r6, #1
 8012592:	4638      	mov	r0, r7
 8012594:	612e      	str	r6, [r5, #16]
 8012596:	4621      	mov	r1, r4
 8012598:	f7ff fd88 	bl	80120ac <_Bfree>
 801259c:	4628      	mov	r0, r5
 801259e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80125a6:	3301      	adds	r3, #1
 80125a8:	e7c1      	b.n	801252e <__lshift+0x4a>
 80125aa:	3904      	subs	r1, #4
 80125ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80125b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80125b4:	4298      	cmp	r0, r3
 80125b6:	d8f9      	bhi.n	80125ac <__lshift+0xc8>
 80125b8:	e7ea      	b.n	8012590 <__lshift+0xac>
 80125ba:	bf00      	nop
 80125bc:	08014a2f 	.word	0x08014a2f
 80125c0:	08014b1c 	.word	0x08014b1c

080125c4 <__mcmp>:
 80125c4:	b530      	push	{r4, r5, lr}
 80125c6:	6902      	ldr	r2, [r0, #16]
 80125c8:	690c      	ldr	r4, [r1, #16]
 80125ca:	1b12      	subs	r2, r2, r4
 80125cc:	d10e      	bne.n	80125ec <__mcmp+0x28>
 80125ce:	f100 0314 	add.w	r3, r0, #20
 80125d2:	3114      	adds	r1, #20
 80125d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80125d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80125dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80125e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80125e4:	42a5      	cmp	r5, r4
 80125e6:	d003      	beq.n	80125f0 <__mcmp+0x2c>
 80125e8:	d305      	bcc.n	80125f6 <__mcmp+0x32>
 80125ea:	2201      	movs	r2, #1
 80125ec:	4610      	mov	r0, r2
 80125ee:	bd30      	pop	{r4, r5, pc}
 80125f0:	4283      	cmp	r3, r0
 80125f2:	d3f3      	bcc.n	80125dc <__mcmp+0x18>
 80125f4:	e7fa      	b.n	80125ec <__mcmp+0x28>
 80125f6:	f04f 32ff 	mov.w	r2, #4294967295
 80125fa:	e7f7      	b.n	80125ec <__mcmp+0x28>

080125fc <__mdiff>:
 80125fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012600:	460c      	mov	r4, r1
 8012602:	4606      	mov	r6, r0
 8012604:	4611      	mov	r1, r2
 8012606:	4620      	mov	r0, r4
 8012608:	4690      	mov	r8, r2
 801260a:	f7ff ffdb 	bl	80125c4 <__mcmp>
 801260e:	1e05      	subs	r5, r0, #0
 8012610:	d110      	bne.n	8012634 <__mdiff+0x38>
 8012612:	4629      	mov	r1, r5
 8012614:	4630      	mov	r0, r6
 8012616:	f7ff fd09 	bl	801202c <_Balloc>
 801261a:	b930      	cbnz	r0, 801262a <__mdiff+0x2e>
 801261c:	4b3a      	ldr	r3, [pc, #232]	; (8012708 <__mdiff+0x10c>)
 801261e:	4602      	mov	r2, r0
 8012620:	f240 2132 	movw	r1, #562	; 0x232
 8012624:	4839      	ldr	r0, [pc, #228]	; (801270c <__mdiff+0x110>)
 8012626:	f001 f9c7 	bl	80139b8 <__assert_func>
 801262a:	2301      	movs	r3, #1
 801262c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012634:	bfa4      	itt	ge
 8012636:	4643      	movge	r3, r8
 8012638:	46a0      	movge	r8, r4
 801263a:	4630      	mov	r0, r6
 801263c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012640:	bfa6      	itte	ge
 8012642:	461c      	movge	r4, r3
 8012644:	2500      	movge	r5, #0
 8012646:	2501      	movlt	r5, #1
 8012648:	f7ff fcf0 	bl	801202c <_Balloc>
 801264c:	b920      	cbnz	r0, 8012658 <__mdiff+0x5c>
 801264e:	4b2e      	ldr	r3, [pc, #184]	; (8012708 <__mdiff+0x10c>)
 8012650:	4602      	mov	r2, r0
 8012652:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012656:	e7e5      	b.n	8012624 <__mdiff+0x28>
 8012658:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801265c:	6926      	ldr	r6, [r4, #16]
 801265e:	60c5      	str	r5, [r0, #12]
 8012660:	f104 0914 	add.w	r9, r4, #20
 8012664:	f108 0514 	add.w	r5, r8, #20
 8012668:	f100 0e14 	add.w	lr, r0, #20
 801266c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012670:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012674:	f108 0210 	add.w	r2, r8, #16
 8012678:	46f2      	mov	sl, lr
 801267a:	2100      	movs	r1, #0
 801267c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012680:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012684:	fa1f f883 	uxth.w	r8, r3
 8012688:	fa11 f18b 	uxtah	r1, r1, fp
 801268c:	0c1b      	lsrs	r3, r3, #16
 801268e:	eba1 0808 	sub.w	r8, r1, r8
 8012692:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012696:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801269a:	fa1f f888 	uxth.w	r8, r8
 801269e:	1419      	asrs	r1, r3, #16
 80126a0:	454e      	cmp	r6, r9
 80126a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80126a6:	f84a 3b04 	str.w	r3, [sl], #4
 80126aa:	d8e7      	bhi.n	801267c <__mdiff+0x80>
 80126ac:	1b33      	subs	r3, r6, r4
 80126ae:	3b15      	subs	r3, #21
 80126b0:	f023 0303 	bic.w	r3, r3, #3
 80126b4:	3304      	adds	r3, #4
 80126b6:	3415      	adds	r4, #21
 80126b8:	42a6      	cmp	r6, r4
 80126ba:	bf38      	it	cc
 80126bc:	2304      	movcc	r3, #4
 80126be:	441d      	add	r5, r3
 80126c0:	4473      	add	r3, lr
 80126c2:	469e      	mov	lr, r3
 80126c4:	462e      	mov	r6, r5
 80126c6:	4566      	cmp	r6, ip
 80126c8:	d30e      	bcc.n	80126e8 <__mdiff+0xec>
 80126ca:	f10c 0203 	add.w	r2, ip, #3
 80126ce:	1b52      	subs	r2, r2, r5
 80126d0:	f022 0203 	bic.w	r2, r2, #3
 80126d4:	3d03      	subs	r5, #3
 80126d6:	45ac      	cmp	ip, r5
 80126d8:	bf38      	it	cc
 80126da:	2200      	movcc	r2, #0
 80126dc:	441a      	add	r2, r3
 80126de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80126e2:	b17b      	cbz	r3, 8012704 <__mdiff+0x108>
 80126e4:	6107      	str	r7, [r0, #16]
 80126e6:	e7a3      	b.n	8012630 <__mdiff+0x34>
 80126e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80126ec:	fa11 f288 	uxtah	r2, r1, r8
 80126f0:	1414      	asrs	r4, r2, #16
 80126f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80126f6:	b292      	uxth	r2, r2
 80126f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80126fc:	f84e 2b04 	str.w	r2, [lr], #4
 8012700:	1421      	asrs	r1, r4, #16
 8012702:	e7e0      	b.n	80126c6 <__mdiff+0xca>
 8012704:	3f01      	subs	r7, #1
 8012706:	e7ea      	b.n	80126de <__mdiff+0xe2>
 8012708:	08014a2f 	.word	0x08014a2f
 801270c:	08014b1c 	.word	0x08014b1c

08012710 <__ulp>:
 8012710:	b082      	sub	sp, #8
 8012712:	ed8d 0b00 	vstr	d0, [sp]
 8012716:	9b01      	ldr	r3, [sp, #4]
 8012718:	4912      	ldr	r1, [pc, #72]	; (8012764 <__ulp+0x54>)
 801271a:	4019      	ands	r1, r3
 801271c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012720:	2900      	cmp	r1, #0
 8012722:	dd05      	ble.n	8012730 <__ulp+0x20>
 8012724:	2200      	movs	r2, #0
 8012726:	460b      	mov	r3, r1
 8012728:	ec43 2b10 	vmov	d0, r2, r3
 801272c:	b002      	add	sp, #8
 801272e:	4770      	bx	lr
 8012730:	4249      	negs	r1, r1
 8012732:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012736:	ea4f 5021 	mov.w	r0, r1, asr #20
 801273a:	f04f 0200 	mov.w	r2, #0
 801273e:	f04f 0300 	mov.w	r3, #0
 8012742:	da04      	bge.n	801274e <__ulp+0x3e>
 8012744:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012748:	fa41 f300 	asr.w	r3, r1, r0
 801274c:	e7ec      	b.n	8012728 <__ulp+0x18>
 801274e:	f1a0 0114 	sub.w	r1, r0, #20
 8012752:	291e      	cmp	r1, #30
 8012754:	bfda      	itte	le
 8012756:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801275a:	fa20 f101 	lsrle.w	r1, r0, r1
 801275e:	2101      	movgt	r1, #1
 8012760:	460a      	mov	r2, r1
 8012762:	e7e1      	b.n	8012728 <__ulp+0x18>
 8012764:	7ff00000 	.word	0x7ff00000

08012768 <__b2d>:
 8012768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801276a:	6905      	ldr	r5, [r0, #16]
 801276c:	f100 0714 	add.w	r7, r0, #20
 8012770:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012774:	1f2e      	subs	r6, r5, #4
 8012776:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801277a:	4620      	mov	r0, r4
 801277c:	f7ff fd48 	bl	8012210 <__hi0bits>
 8012780:	f1c0 0320 	rsb	r3, r0, #32
 8012784:	280a      	cmp	r0, #10
 8012786:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012804 <__b2d+0x9c>
 801278a:	600b      	str	r3, [r1, #0]
 801278c:	dc14      	bgt.n	80127b8 <__b2d+0x50>
 801278e:	f1c0 0e0b 	rsb	lr, r0, #11
 8012792:	fa24 f10e 	lsr.w	r1, r4, lr
 8012796:	42b7      	cmp	r7, r6
 8012798:	ea41 030c 	orr.w	r3, r1, ip
 801279c:	bf34      	ite	cc
 801279e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80127a2:	2100      	movcs	r1, #0
 80127a4:	3015      	adds	r0, #21
 80127a6:	fa04 f000 	lsl.w	r0, r4, r0
 80127aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80127ae:	ea40 0201 	orr.w	r2, r0, r1
 80127b2:	ec43 2b10 	vmov	d0, r2, r3
 80127b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127b8:	42b7      	cmp	r7, r6
 80127ba:	bf3a      	itte	cc
 80127bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80127c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80127c4:	2100      	movcs	r1, #0
 80127c6:	380b      	subs	r0, #11
 80127c8:	d017      	beq.n	80127fa <__b2d+0x92>
 80127ca:	f1c0 0c20 	rsb	ip, r0, #32
 80127ce:	fa04 f500 	lsl.w	r5, r4, r0
 80127d2:	42be      	cmp	r6, r7
 80127d4:	fa21 f40c 	lsr.w	r4, r1, ip
 80127d8:	ea45 0504 	orr.w	r5, r5, r4
 80127dc:	bf8c      	ite	hi
 80127de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80127e2:	2400      	movls	r4, #0
 80127e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80127e8:	fa01 f000 	lsl.w	r0, r1, r0
 80127ec:	fa24 f40c 	lsr.w	r4, r4, ip
 80127f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80127f4:	ea40 0204 	orr.w	r2, r0, r4
 80127f8:	e7db      	b.n	80127b2 <__b2d+0x4a>
 80127fa:	ea44 030c 	orr.w	r3, r4, ip
 80127fe:	460a      	mov	r2, r1
 8012800:	e7d7      	b.n	80127b2 <__b2d+0x4a>
 8012802:	bf00      	nop
 8012804:	3ff00000 	.word	0x3ff00000

08012808 <__d2b>:
 8012808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801280c:	4689      	mov	r9, r1
 801280e:	2101      	movs	r1, #1
 8012810:	ec57 6b10 	vmov	r6, r7, d0
 8012814:	4690      	mov	r8, r2
 8012816:	f7ff fc09 	bl	801202c <_Balloc>
 801281a:	4604      	mov	r4, r0
 801281c:	b930      	cbnz	r0, 801282c <__d2b+0x24>
 801281e:	4602      	mov	r2, r0
 8012820:	4b25      	ldr	r3, [pc, #148]	; (80128b8 <__d2b+0xb0>)
 8012822:	4826      	ldr	r0, [pc, #152]	; (80128bc <__d2b+0xb4>)
 8012824:	f240 310a 	movw	r1, #778	; 0x30a
 8012828:	f001 f8c6 	bl	80139b8 <__assert_func>
 801282c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012834:	bb35      	cbnz	r5, 8012884 <__d2b+0x7c>
 8012836:	2e00      	cmp	r6, #0
 8012838:	9301      	str	r3, [sp, #4]
 801283a:	d028      	beq.n	801288e <__d2b+0x86>
 801283c:	4668      	mov	r0, sp
 801283e:	9600      	str	r6, [sp, #0]
 8012840:	f7ff fd06 	bl	8012250 <__lo0bits>
 8012844:	9900      	ldr	r1, [sp, #0]
 8012846:	b300      	cbz	r0, 801288a <__d2b+0x82>
 8012848:	9a01      	ldr	r2, [sp, #4]
 801284a:	f1c0 0320 	rsb	r3, r0, #32
 801284e:	fa02 f303 	lsl.w	r3, r2, r3
 8012852:	430b      	orrs	r3, r1
 8012854:	40c2      	lsrs	r2, r0
 8012856:	6163      	str	r3, [r4, #20]
 8012858:	9201      	str	r2, [sp, #4]
 801285a:	9b01      	ldr	r3, [sp, #4]
 801285c:	61a3      	str	r3, [r4, #24]
 801285e:	2b00      	cmp	r3, #0
 8012860:	bf14      	ite	ne
 8012862:	2202      	movne	r2, #2
 8012864:	2201      	moveq	r2, #1
 8012866:	6122      	str	r2, [r4, #16]
 8012868:	b1d5      	cbz	r5, 80128a0 <__d2b+0x98>
 801286a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801286e:	4405      	add	r5, r0
 8012870:	f8c9 5000 	str.w	r5, [r9]
 8012874:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012878:	f8c8 0000 	str.w	r0, [r8]
 801287c:	4620      	mov	r0, r4
 801287e:	b003      	add	sp, #12
 8012880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012888:	e7d5      	b.n	8012836 <__d2b+0x2e>
 801288a:	6161      	str	r1, [r4, #20]
 801288c:	e7e5      	b.n	801285a <__d2b+0x52>
 801288e:	a801      	add	r0, sp, #4
 8012890:	f7ff fcde 	bl	8012250 <__lo0bits>
 8012894:	9b01      	ldr	r3, [sp, #4]
 8012896:	6163      	str	r3, [r4, #20]
 8012898:	2201      	movs	r2, #1
 801289a:	6122      	str	r2, [r4, #16]
 801289c:	3020      	adds	r0, #32
 801289e:	e7e3      	b.n	8012868 <__d2b+0x60>
 80128a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80128a8:	f8c9 0000 	str.w	r0, [r9]
 80128ac:	6918      	ldr	r0, [r3, #16]
 80128ae:	f7ff fcaf 	bl	8012210 <__hi0bits>
 80128b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128b6:	e7df      	b.n	8012878 <__d2b+0x70>
 80128b8:	08014a2f 	.word	0x08014a2f
 80128bc:	08014b1c 	.word	0x08014b1c

080128c0 <__ratio>:
 80128c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128c4:	4688      	mov	r8, r1
 80128c6:	4669      	mov	r1, sp
 80128c8:	4681      	mov	r9, r0
 80128ca:	f7ff ff4d 	bl	8012768 <__b2d>
 80128ce:	a901      	add	r1, sp, #4
 80128d0:	4640      	mov	r0, r8
 80128d2:	ec55 4b10 	vmov	r4, r5, d0
 80128d6:	f7ff ff47 	bl	8012768 <__b2d>
 80128da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80128de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80128e2:	eba3 0c02 	sub.w	ip, r3, r2
 80128e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80128ea:	1a9b      	subs	r3, r3, r2
 80128ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80128f0:	ec51 0b10 	vmov	r0, r1, d0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	bfd6      	itet	le
 80128f8:	460a      	movle	r2, r1
 80128fa:	462a      	movgt	r2, r5
 80128fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012900:	468b      	mov	fp, r1
 8012902:	462f      	mov	r7, r5
 8012904:	bfd4      	ite	le
 8012906:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801290a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801290e:	4620      	mov	r0, r4
 8012910:	ee10 2a10 	vmov	r2, s0
 8012914:	465b      	mov	r3, fp
 8012916:	4639      	mov	r1, r7
 8012918:	f7ed ffb8 	bl	800088c <__aeabi_ddiv>
 801291c:	ec41 0b10 	vmov	d0, r0, r1
 8012920:	b003      	add	sp, #12
 8012922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012926 <__copybits>:
 8012926:	3901      	subs	r1, #1
 8012928:	b570      	push	{r4, r5, r6, lr}
 801292a:	1149      	asrs	r1, r1, #5
 801292c:	6914      	ldr	r4, [r2, #16]
 801292e:	3101      	adds	r1, #1
 8012930:	f102 0314 	add.w	r3, r2, #20
 8012934:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012938:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801293c:	1f05      	subs	r5, r0, #4
 801293e:	42a3      	cmp	r3, r4
 8012940:	d30c      	bcc.n	801295c <__copybits+0x36>
 8012942:	1aa3      	subs	r3, r4, r2
 8012944:	3b11      	subs	r3, #17
 8012946:	f023 0303 	bic.w	r3, r3, #3
 801294a:	3211      	adds	r2, #17
 801294c:	42a2      	cmp	r2, r4
 801294e:	bf88      	it	hi
 8012950:	2300      	movhi	r3, #0
 8012952:	4418      	add	r0, r3
 8012954:	2300      	movs	r3, #0
 8012956:	4288      	cmp	r0, r1
 8012958:	d305      	bcc.n	8012966 <__copybits+0x40>
 801295a:	bd70      	pop	{r4, r5, r6, pc}
 801295c:	f853 6b04 	ldr.w	r6, [r3], #4
 8012960:	f845 6f04 	str.w	r6, [r5, #4]!
 8012964:	e7eb      	b.n	801293e <__copybits+0x18>
 8012966:	f840 3b04 	str.w	r3, [r0], #4
 801296a:	e7f4      	b.n	8012956 <__copybits+0x30>

0801296c <__any_on>:
 801296c:	f100 0214 	add.w	r2, r0, #20
 8012970:	6900      	ldr	r0, [r0, #16]
 8012972:	114b      	asrs	r3, r1, #5
 8012974:	4298      	cmp	r0, r3
 8012976:	b510      	push	{r4, lr}
 8012978:	db11      	blt.n	801299e <__any_on+0x32>
 801297a:	dd0a      	ble.n	8012992 <__any_on+0x26>
 801297c:	f011 011f 	ands.w	r1, r1, #31
 8012980:	d007      	beq.n	8012992 <__any_on+0x26>
 8012982:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012986:	fa24 f001 	lsr.w	r0, r4, r1
 801298a:	fa00 f101 	lsl.w	r1, r0, r1
 801298e:	428c      	cmp	r4, r1
 8012990:	d10b      	bne.n	80129aa <__any_on+0x3e>
 8012992:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012996:	4293      	cmp	r3, r2
 8012998:	d803      	bhi.n	80129a2 <__any_on+0x36>
 801299a:	2000      	movs	r0, #0
 801299c:	bd10      	pop	{r4, pc}
 801299e:	4603      	mov	r3, r0
 80129a0:	e7f7      	b.n	8012992 <__any_on+0x26>
 80129a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80129a6:	2900      	cmp	r1, #0
 80129a8:	d0f5      	beq.n	8012996 <__any_on+0x2a>
 80129aa:	2001      	movs	r0, #1
 80129ac:	e7f6      	b.n	801299c <__any_on+0x30>

080129ae <_calloc_r>:
 80129ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129b0:	fba1 2402 	umull	r2, r4, r1, r2
 80129b4:	b94c      	cbnz	r4, 80129ca <_calloc_r+0x1c>
 80129b6:	4611      	mov	r1, r2
 80129b8:	9201      	str	r2, [sp, #4]
 80129ba:	f000 f87b 	bl	8012ab4 <_malloc_r>
 80129be:	9a01      	ldr	r2, [sp, #4]
 80129c0:	4605      	mov	r5, r0
 80129c2:	b930      	cbnz	r0, 80129d2 <_calloc_r+0x24>
 80129c4:	4628      	mov	r0, r5
 80129c6:	b003      	add	sp, #12
 80129c8:	bd30      	pop	{r4, r5, pc}
 80129ca:	220c      	movs	r2, #12
 80129cc:	6002      	str	r2, [r0, #0]
 80129ce:	2500      	movs	r5, #0
 80129d0:	e7f8      	b.n	80129c4 <_calloc_r+0x16>
 80129d2:	4621      	mov	r1, r4
 80129d4:	f7fb ff6e 	bl	800e8b4 <memset>
 80129d8:	e7f4      	b.n	80129c4 <_calloc_r+0x16>
	...

080129dc <_free_r>:
 80129dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129de:	2900      	cmp	r1, #0
 80129e0:	d044      	beq.n	8012a6c <_free_r+0x90>
 80129e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129e6:	9001      	str	r0, [sp, #4]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	f1a1 0404 	sub.w	r4, r1, #4
 80129ee:	bfb8      	it	lt
 80129f0:	18e4      	addlt	r4, r4, r3
 80129f2:	f001 f833 	bl	8013a5c <__malloc_lock>
 80129f6:	4a1e      	ldr	r2, [pc, #120]	; (8012a70 <_free_r+0x94>)
 80129f8:	9801      	ldr	r0, [sp, #4]
 80129fa:	6813      	ldr	r3, [r2, #0]
 80129fc:	b933      	cbnz	r3, 8012a0c <_free_r+0x30>
 80129fe:	6063      	str	r3, [r4, #4]
 8012a00:	6014      	str	r4, [r2, #0]
 8012a02:	b003      	add	sp, #12
 8012a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a08:	f001 b82e 	b.w	8013a68 <__malloc_unlock>
 8012a0c:	42a3      	cmp	r3, r4
 8012a0e:	d908      	bls.n	8012a22 <_free_r+0x46>
 8012a10:	6825      	ldr	r5, [r4, #0]
 8012a12:	1961      	adds	r1, r4, r5
 8012a14:	428b      	cmp	r3, r1
 8012a16:	bf01      	itttt	eq
 8012a18:	6819      	ldreq	r1, [r3, #0]
 8012a1a:	685b      	ldreq	r3, [r3, #4]
 8012a1c:	1949      	addeq	r1, r1, r5
 8012a1e:	6021      	streq	r1, [r4, #0]
 8012a20:	e7ed      	b.n	80129fe <_free_r+0x22>
 8012a22:	461a      	mov	r2, r3
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	b10b      	cbz	r3, 8012a2c <_free_r+0x50>
 8012a28:	42a3      	cmp	r3, r4
 8012a2a:	d9fa      	bls.n	8012a22 <_free_r+0x46>
 8012a2c:	6811      	ldr	r1, [r2, #0]
 8012a2e:	1855      	adds	r5, r2, r1
 8012a30:	42a5      	cmp	r5, r4
 8012a32:	d10b      	bne.n	8012a4c <_free_r+0x70>
 8012a34:	6824      	ldr	r4, [r4, #0]
 8012a36:	4421      	add	r1, r4
 8012a38:	1854      	adds	r4, r2, r1
 8012a3a:	42a3      	cmp	r3, r4
 8012a3c:	6011      	str	r1, [r2, #0]
 8012a3e:	d1e0      	bne.n	8012a02 <_free_r+0x26>
 8012a40:	681c      	ldr	r4, [r3, #0]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	6053      	str	r3, [r2, #4]
 8012a46:	4421      	add	r1, r4
 8012a48:	6011      	str	r1, [r2, #0]
 8012a4a:	e7da      	b.n	8012a02 <_free_r+0x26>
 8012a4c:	d902      	bls.n	8012a54 <_free_r+0x78>
 8012a4e:	230c      	movs	r3, #12
 8012a50:	6003      	str	r3, [r0, #0]
 8012a52:	e7d6      	b.n	8012a02 <_free_r+0x26>
 8012a54:	6825      	ldr	r5, [r4, #0]
 8012a56:	1961      	adds	r1, r4, r5
 8012a58:	428b      	cmp	r3, r1
 8012a5a:	bf04      	itt	eq
 8012a5c:	6819      	ldreq	r1, [r3, #0]
 8012a5e:	685b      	ldreq	r3, [r3, #4]
 8012a60:	6063      	str	r3, [r4, #4]
 8012a62:	bf04      	itt	eq
 8012a64:	1949      	addeq	r1, r1, r5
 8012a66:	6021      	streq	r1, [r4, #0]
 8012a68:	6054      	str	r4, [r2, #4]
 8012a6a:	e7ca      	b.n	8012a02 <_free_r+0x26>
 8012a6c:	b003      	add	sp, #12
 8012a6e:	bd30      	pop	{r4, r5, pc}
 8012a70:	20003144 	.word	0x20003144

08012a74 <sbrk_aligned>:
 8012a74:	b570      	push	{r4, r5, r6, lr}
 8012a76:	4e0e      	ldr	r6, [pc, #56]	; (8012ab0 <sbrk_aligned+0x3c>)
 8012a78:	460c      	mov	r4, r1
 8012a7a:	6831      	ldr	r1, [r6, #0]
 8012a7c:	4605      	mov	r5, r0
 8012a7e:	b911      	cbnz	r1, 8012a86 <sbrk_aligned+0x12>
 8012a80:	f000 fe82 	bl	8013788 <_sbrk_r>
 8012a84:	6030      	str	r0, [r6, #0]
 8012a86:	4621      	mov	r1, r4
 8012a88:	4628      	mov	r0, r5
 8012a8a:	f000 fe7d 	bl	8013788 <_sbrk_r>
 8012a8e:	1c43      	adds	r3, r0, #1
 8012a90:	d00a      	beq.n	8012aa8 <sbrk_aligned+0x34>
 8012a92:	1cc4      	adds	r4, r0, #3
 8012a94:	f024 0403 	bic.w	r4, r4, #3
 8012a98:	42a0      	cmp	r0, r4
 8012a9a:	d007      	beq.n	8012aac <sbrk_aligned+0x38>
 8012a9c:	1a21      	subs	r1, r4, r0
 8012a9e:	4628      	mov	r0, r5
 8012aa0:	f000 fe72 	bl	8013788 <_sbrk_r>
 8012aa4:	3001      	adds	r0, #1
 8012aa6:	d101      	bne.n	8012aac <sbrk_aligned+0x38>
 8012aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8012aac:	4620      	mov	r0, r4
 8012aae:	bd70      	pop	{r4, r5, r6, pc}
 8012ab0:	20003148 	.word	0x20003148

08012ab4 <_malloc_r>:
 8012ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab8:	1ccd      	adds	r5, r1, #3
 8012aba:	f025 0503 	bic.w	r5, r5, #3
 8012abe:	3508      	adds	r5, #8
 8012ac0:	2d0c      	cmp	r5, #12
 8012ac2:	bf38      	it	cc
 8012ac4:	250c      	movcc	r5, #12
 8012ac6:	2d00      	cmp	r5, #0
 8012ac8:	4607      	mov	r7, r0
 8012aca:	db01      	blt.n	8012ad0 <_malloc_r+0x1c>
 8012acc:	42a9      	cmp	r1, r5
 8012ace:	d905      	bls.n	8012adc <_malloc_r+0x28>
 8012ad0:	230c      	movs	r3, #12
 8012ad2:	603b      	str	r3, [r7, #0]
 8012ad4:	2600      	movs	r6, #0
 8012ad6:	4630      	mov	r0, r6
 8012ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012adc:	4e2e      	ldr	r6, [pc, #184]	; (8012b98 <_malloc_r+0xe4>)
 8012ade:	f000 ffbd 	bl	8013a5c <__malloc_lock>
 8012ae2:	6833      	ldr	r3, [r6, #0]
 8012ae4:	461c      	mov	r4, r3
 8012ae6:	bb34      	cbnz	r4, 8012b36 <_malloc_r+0x82>
 8012ae8:	4629      	mov	r1, r5
 8012aea:	4638      	mov	r0, r7
 8012aec:	f7ff ffc2 	bl	8012a74 <sbrk_aligned>
 8012af0:	1c43      	adds	r3, r0, #1
 8012af2:	4604      	mov	r4, r0
 8012af4:	d14d      	bne.n	8012b92 <_malloc_r+0xde>
 8012af6:	6834      	ldr	r4, [r6, #0]
 8012af8:	4626      	mov	r6, r4
 8012afa:	2e00      	cmp	r6, #0
 8012afc:	d140      	bne.n	8012b80 <_malloc_r+0xcc>
 8012afe:	6823      	ldr	r3, [r4, #0]
 8012b00:	4631      	mov	r1, r6
 8012b02:	4638      	mov	r0, r7
 8012b04:	eb04 0803 	add.w	r8, r4, r3
 8012b08:	f000 fe3e 	bl	8013788 <_sbrk_r>
 8012b0c:	4580      	cmp	r8, r0
 8012b0e:	d13a      	bne.n	8012b86 <_malloc_r+0xd2>
 8012b10:	6821      	ldr	r1, [r4, #0]
 8012b12:	3503      	adds	r5, #3
 8012b14:	1a6d      	subs	r5, r5, r1
 8012b16:	f025 0503 	bic.w	r5, r5, #3
 8012b1a:	3508      	adds	r5, #8
 8012b1c:	2d0c      	cmp	r5, #12
 8012b1e:	bf38      	it	cc
 8012b20:	250c      	movcc	r5, #12
 8012b22:	4629      	mov	r1, r5
 8012b24:	4638      	mov	r0, r7
 8012b26:	f7ff ffa5 	bl	8012a74 <sbrk_aligned>
 8012b2a:	3001      	adds	r0, #1
 8012b2c:	d02b      	beq.n	8012b86 <_malloc_r+0xd2>
 8012b2e:	6823      	ldr	r3, [r4, #0]
 8012b30:	442b      	add	r3, r5
 8012b32:	6023      	str	r3, [r4, #0]
 8012b34:	e00e      	b.n	8012b54 <_malloc_r+0xa0>
 8012b36:	6822      	ldr	r2, [r4, #0]
 8012b38:	1b52      	subs	r2, r2, r5
 8012b3a:	d41e      	bmi.n	8012b7a <_malloc_r+0xc6>
 8012b3c:	2a0b      	cmp	r2, #11
 8012b3e:	d916      	bls.n	8012b6e <_malloc_r+0xba>
 8012b40:	1961      	adds	r1, r4, r5
 8012b42:	42a3      	cmp	r3, r4
 8012b44:	6025      	str	r5, [r4, #0]
 8012b46:	bf18      	it	ne
 8012b48:	6059      	strne	r1, [r3, #4]
 8012b4a:	6863      	ldr	r3, [r4, #4]
 8012b4c:	bf08      	it	eq
 8012b4e:	6031      	streq	r1, [r6, #0]
 8012b50:	5162      	str	r2, [r4, r5]
 8012b52:	604b      	str	r3, [r1, #4]
 8012b54:	4638      	mov	r0, r7
 8012b56:	f104 060b 	add.w	r6, r4, #11
 8012b5a:	f000 ff85 	bl	8013a68 <__malloc_unlock>
 8012b5e:	f026 0607 	bic.w	r6, r6, #7
 8012b62:	1d23      	adds	r3, r4, #4
 8012b64:	1af2      	subs	r2, r6, r3
 8012b66:	d0b6      	beq.n	8012ad6 <_malloc_r+0x22>
 8012b68:	1b9b      	subs	r3, r3, r6
 8012b6a:	50a3      	str	r3, [r4, r2]
 8012b6c:	e7b3      	b.n	8012ad6 <_malloc_r+0x22>
 8012b6e:	6862      	ldr	r2, [r4, #4]
 8012b70:	42a3      	cmp	r3, r4
 8012b72:	bf0c      	ite	eq
 8012b74:	6032      	streq	r2, [r6, #0]
 8012b76:	605a      	strne	r2, [r3, #4]
 8012b78:	e7ec      	b.n	8012b54 <_malloc_r+0xa0>
 8012b7a:	4623      	mov	r3, r4
 8012b7c:	6864      	ldr	r4, [r4, #4]
 8012b7e:	e7b2      	b.n	8012ae6 <_malloc_r+0x32>
 8012b80:	4634      	mov	r4, r6
 8012b82:	6876      	ldr	r6, [r6, #4]
 8012b84:	e7b9      	b.n	8012afa <_malloc_r+0x46>
 8012b86:	230c      	movs	r3, #12
 8012b88:	603b      	str	r3, [r7, #0]
 8012b8a:	4638      	mov	r0, r7
 8012b8c:	f000 ff6c 	bl	8013a68 <__malloc_unlock>
 8012b90:	e7a1      	b.n	8012ad6 <_malloc_r+0x22>
 8012b92:	6025      	str	r5, [r4, #0]
 8012b94:	e7de      	b.n	8012b54 <_malloc_r+0xa0>
 8012b96:	bf00      	nop
 8012b98:	20003144 	.word	0x20003144

08012b9c <__ssputs_r>:
 8012b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ba0:	688e      	ldr	r6, [r1, #8]
 8012ba2:	429e      	cmp	r6, r3
 8012ba4:	4682      	mov	sl, r0
 8012ba6:	460c      	mov	r4, r1
 8012ba8:	4690      	mov	r8, r2
 8012baa:	461f      	mov	r7, r3
 8012bac:	d838      	bhi.n	8012c20 <__ssputs_r+0x84>
 8012bae:	898a      	ldrh	r2, [r1, #12]
 8012bb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012bb4:	d032      	beq.n	8012c1c <__ssputs_r+0x80>
 8012bb6:	6825      	ldr	r5, [r4, #0]
 8012bb8:	6909      	ldr	r1, [r1, #16]
 8012bba:	eba5 0901 	sub.w	r9, r5, r1
 8012bbe:	6965      	ldr	r5, [r4, #20]
 8012bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012bc8:	3301      	adds	r3, #1
 8012bca:	444b      	add	r3, r9
 8012bcc:	106d      	asrs	r5, r5, #1
 8012bce:	429d      	cmp	r5, r3
 8012bd0:	bf38      	it	cc
 8012bd2:	461d      	movcc	r5, r3
 8012bd4:	0553      	lsls	r3, r2, #21
 8012bd6:	d531      	bpl.n	8012c3c <__ssputs_r+0xa0>
 8012bd8:	4629      	mov	r1, r5
 8012bda:	f7ff ff6b 	bl	8012ab4 <_malloc_r>
 8012bde:	4606      	mov	r6, r0
 8012be0:	b950      	cbnz	r0, 8012bf8 <__ssputs_r+0x5c>
 8012be2:	230c      	movs	r3, #12
 8012be4:	f8ca 3000 	str.w	r3, [sl]
 8012be8:	89a3      	ldrh	r3, [r4, #12]
 8012bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bee:	81a3      	strh	r3, [r4, #12]
 8012bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bf8:	6921      	ldr	r1, [r4, #16]
 8012bfa:	464a      	mov	r2, r9
 8012bfc:	f7fb fe32 	bl	800e864 <memcpy>
 8012c00:	89a3      	ldrh	r3, [r4, #12]
 8012c02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c0a:	81a3      	strh	r3, [r4, #12]
 8012c0c:	6126      	str	r6, [r4, #16]
 8012c0e:	6165      	str	r5, [r4, #20]
 8012c10:	444e      	add	r6, r9
 8012c12:	eba5 0509 	sub.w	r5, r5, r9
 8012c16:	6026      	str	r6, [r4, #0]
 8012c18:	60a5      	str	r5, [r4, #8]
 8012c1a:	463e      	mov	r6, r7
 8012c1c:	42be      	cmp	r6, r7
 8012c1e:	d900      	bls.n	8012c22 <__ssputs_r+0x86>
 8012c20:	463e      	mov	r6, r7
 8012c22:	6820      	ldr	r0, [r4, #0]
 8012c24:	4632      	mov	r2, r6
 8012c26:	4641      	mov	r1, r8
 8012c28:	f7fb fe2a 	bl	800e880 <memmove>
 8012c2c:	68a3      	ldr	r3, [r4, #8]
 8012c2e:	1b9b      	subs	r3, r3, r6
 8012c30:	60a3      	str	r3, [r4, #8]
 8012c32:	6823      	ldr	r3, [r4, #0]
 8012c34:	4433      	add	r3, r6
 8012c36:	6023      	str	r3, [r4, #0]
 8012c38:	2000      	movs	r0, #0
 8012c3a:	e7db      	b.n	8012bf4 <__ssputs_r+0x58>
 8012c3c:	462a      	mov	r2, r5
 8012c3e:	f000 ff19 	bl	8013a74 <_realloc_r>
 8012c42:	4606      	mov	r6, r0
 8012c44:	2800      	cmp	r0, #0
 8012c46:	d1e1      	bne.n	8012c0c <__ssputs_r+0x70>
 8012c48:	6921      	ldr	r1, [r4, #16]
 8012c4a:	4650      	mov	r0, sl
 8012c4c:	f7ff fec6 	bl	80129dc <_free_r>
 8012c50:	e7c7      	b.n	8012be2 <__ssputs_r+0x46>
	...

08012c54 <_svfiprintf_r>:
 8012c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c58:	4698      	mov	r8, r3
 8012c5a:	898b      	ldrh	r3, [r1, #12]
 8012c5c:	061b      	lsls	r3, r3, #24
 8012c5e:	b09d      	sub	sp, #116	; 0x74
 8012c60:	4607      	mov	r7, r0
 8012c62:	460d      	mov	r5, r1
 8012c64:	4614      	mov	r4, r2
 8012c66:	d50e      	bpl.n	8012c86 <_svfiprintf_r+0x32>
 8012c68:	690b      	ldr	r3, [r1, #16]
 8012c6a:	b963      	cbnz	r3, 8012c86 <_svfiprintf_r+0x32>
 8012c6c:	2140      	movs	r1, #64	; 0x40
 8012c6e:	f7ff ff21 	bl	8012ab4 <_malloc_r>
 8012c72:	6028      	str	r0, [r5, #0]
 8012c74:	6128      	str	r0, [r5, #16]
 8012c76:	b920      	cbnz	r0, 8012c82 <_svfiprintf_r+0x2e>
 8012c78:	230c      	movs	r3, #12
 8012c7a:	603b      	str	r3, [r7, #0]
 8012c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c80:	e0d1      	b.n	8012e26 <_svfiprintf_r+0x1d2>
 8012c82:	2340      	movs	r3, #64	; 0x40
 8012c84:	616b      	str	r3, [r5, #20]
 8012c86:	2300      	movs	r3, #0
 8012c88:	9309      	str	r3, [sp, #36]	; 0x24
 8012c8a:	2320      	movs	r3, #32
 8012c8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c94:	2330      	movs	r3, #48	; 0x30
 8012c96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012e40 <_svfiprintf_r+0x1ec>
 8012c9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c9e:	f04f 0901 	mov.w	r9, #1
 8012ca2:	4623      	mov	r3, r4
 8012ca4:	469a      	mov	sl, r3
 8012ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012caa:	b10a      	cbz	r2, 8012cb0 <_svfiprintf_r+0x5c>
 8012cac:	2a25      	cmp	r2, #37	; 0x25
 8012cae:	d1f9      	bne.n	8012ca4 <_svfiprintf_r+0x50>
 8012cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8012cb4:	d00b      	beq.n	8012cce <_svfiprintf_r+0x7a>
 8012cb6:	465b      	mov	r3, fp
 8012cb8:	4622      	mov	r2, r4
 8012cba:	4629      	mov	r1, r5
 8012cbc:	4638      	mov	r0, r7
 8012cbe:	f7ff ff6d 	bl	8012b9c <__ssputs_r>
 8012cc2:	3001      	adds	r0, #1
 8012cc4:	f000 80aa 	beq.w	8012e1c <_svfiprintf_r+0x1c8>
 8012cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cca:	445a      	add	r2, fp
 8012ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8012cce:	f89a 3000 	ldrb.w	r3, [sl]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	f000 80a2 	beq.w	8012e1c <_svfiprintf_r+0x1c8>
 8012cd8:	2300      	movs	r3, #0
 8012cda:	f04f 32ff 	mov.w	r2, #4294967295
 8012cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ce2:	f10a 0a01 	add.w	sl, sl, #1
 8012ce6:	9304      	str	r3, [sp, #16]
 8012ce8:	9307      	str	r3, [sp, #28]
 8012cea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cee:	931a      	str	r3, [sp, #104]	; 0x68
 8012cf0:	4654      	mov	r4, sl
 8012cf2:	2205      	movs	r2, #5
 8012cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cf8:	4851      	ldr	r0, [pc, #324]	; (8012e40 <_svfiprintf_r+0x1ec>)
 8012cfa:	f7ed fa91 	bl	8000220 <memchr>
 8012cfe:	9a04      	ldr	r2, [sp, #16]
 8012d00:	b9d8      	cbnz	r0, 8012d3a <_svfiprintf_r+0xe6>
 8012d02:	06d0      	lsls	r0, r2, #27
 8012d04:	bf44      	itt	mi
 8012d06:	2320      	movmi	r3, #32
 8012d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d0c:	0711      	lsls	r1, r2, #28
 8012d0e:	bf44      	itt	mi
 8012d10:	232b      	movmi	r3, #43	; 0x2b
 8012d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d16:	f89a 3000 	ldrb.w	r3, [sl]
 8012d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d1c:	d015      	beq.n	8012d4a <_svfiprintf_r+0xf6>
 8012d1e:	9a07      	ldr	r2, [sp, #28]
 8012d20:	4654      	mov	r4, sl
 8012d22:	2000      	movs	r0, #0
 8012d24:	f04f 0c0a 	mov.w	ip, #10
 8012d28:	4621      	mov	r1, r4
 8012d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d2e:	3b30      	subs	r3, #48	; 0x30
 8012d30:	2b09      	cmp	r3, #9
 8012d32:	d94e      	bls.n	8012dd2 <_svfiprintf_r+0x17e>
 8012d34:	b1b0      	cbz	r0, 8012d64 <_svfiprintf_r+0x110>
 8012d36:	9207      	str	r2, [sp, #28]
 8012d38:	e014      	b.n	8012d64 <_svfiprintf_r+0x110>
 8012d3a:	eba0 0308 	sub.w	r3, r0, r8
 8012d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8012d42:	4313      	orrs	r3, r2
 8012d44:	9304      	str	r3, [sp, #16]
 8012d46:	46a2      	mov	sl, r4
 8012d48:	e7d2      	b.n	8012cf0 <_svfiprintf_r+0x9c>
 8012d4a:	9b03      	ldr	r3, [sp, #12]
 8012d4c:	1d19      	adds	r1, r3, #4
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	9103      	str	r1, [sp, #12]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	bfbb      	ittet	lt
 8012d56:	425b      	neglt	r3, r3
 8012d58:	f042 0202 	orrlt.w	r2, r2, #2
 8012d5c:	9307      	strge	r3, [sp, #28]
 8012d5e:	9307      	strlt	r3, [sp, #28]
 8012d60:	bfb8      	it	lt
 8012d62:	9204      	strlt	r2, [sp, #16]
 8012d64:	7823      	ldrb	r3, [r4, #0]
 8012d66:	2b2e      	cmp	r3, #46	; 0x2e
 8012d68:	d10c      	bne.n	8012d84 <_svfiprintf_r+0x130>
 8012d6a:	7863      	ldrb	r3, [r4, #1]
 8012d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8012d6e:	d135      	bne.n	8012ddc <_svfiprintf_r+0x188>
 8012d70:	9b03      	ldr	r3, [sp, #12]
 8012d72:	1d1a      	adds	r2, r3, #4
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	9203      	str	r2, [sp, #12]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	bfb8      	it	lt
 8012d7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d80:	3402      	adds	r4, #2
 8012d82:	9305      	str	r3, [sp, #20]
 8012d84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012e50 <_svfiprintf_r+0x1fc>
 8012d88:	7821      	ldrb	r1, [r4, #0]
 8012d8a:	2203      	movs	r2, #3
 8012d8c:	4650      	mov	r0, sl
 8012d8e:	f7ed fa47 	bl	8000220 <memchr>
 8012d92:	b140      	cbz	r0, 8012da6 <_svfiprintf_r+0x152>
 8012d94:	2340      	movs	r3, #64	; 0x40
 8012d96:	eba0 000a 	sub.w	r0, r0, sl
 8012d9a:	fa03 f000 	lsl.w	r0, r3, r0
 8012d9e:	9b04      	ldr	r3, [sp, #16]
 8012da0:	4303      	orrs	r3, r0
 8012da2:	3401      	adds	r4, #1
 8012da4:	9304      	str	r3, [sp, #16]
 8012da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012daa:	4826      	ldr	r0, [pc, #152]	; (8012e44 <_svfiprintf_r+0x1f0>)
 8012dac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012db0:	2206      	movs	r2, #6
 8012db2:	f7ed fa35 	bl	8000220 <memchr>
 8012db6:	2800      	cmp	r0, #0
 8012db8:	d038      	beq.n	8012e2c <_svfiprintf_r+0x1d8>
 8012dba:	4b23      	ldr	r3, [pc, #140]	; (8012e48 <_svfiprintf_r+0x1f4>)
 8012dbc:	bb1b      	cbnz	r3, 8012e06 <_svfiprintf_r+0x1b2>
 8012dbe:	9b03      	ldr	r3, [sp, #12]
 8012dc0:	3307      	adds	r3, #7
 8012dc2:	f023 0307 	bic.w	r3, r3, #7
 8012dc6:	3308      	adds	r3, #8
 8012dc8:	9303      	str	r3, [sp, #12]
 8012dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dcc:	4433      	add	r3, r6
 8012dce:	9309      	str	r3, [sp, #36]	; 0x24
 8012dd0:	e767      	b.n	8012ca2 <_svfiprintf_r+0x4e>
 8012dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8012dd6:	460c      	mov	r4, r1
 8012dd8:	2001      	movs	r0, #1
 8012dda:	e7a5      	b.n	8012d28 <_svfiprintf_r+0xd4>
 8012ddc:	2300      	movs	r3, #0
 8012dde:	3401      	adds	r4, #1
 8012de0:	9305      	str	r3, [sp, #20]
 8012de2:	4619      	mov	r1, r3
 8012de4:	f04f 0c0a 	mov.w	ip, #10
 8012de8:	4620      	mov	r0, r4
 8012dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dee:	3a30      	subs	r2, #48	; 0x30
 8012df0:	2a09      	cmp	r2, #9
 8012df2:	d903      	bls.n	8012dfc <_svfiprintf_r+0x1a8>
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d0c5      	beq.n	8012d84 <_svfiprintf_r+0x130>
 8012df8:	9105      	str	r1, [sp, #20]
 8012dfa:	e7c3      	b.n	8012d84 <_svfiprintf_r+0x130>
 8012dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e00:	4604      	mov	r4, r0
 8012e02:	2301      	movs	r3, #1
 8012e04:	e7f0      	b.n	8012de8 <_svfiprintf_r+0x194>
 8012e06:	ab03      	add	r3, sp, #12
 8012e08:	9300      	str	r3, [sp, #0]
 8012e0a:	462a      	mov	r2, r5
 8012e0c:	4b0f      	ldr	r3, [pc, #60]	; (8012e4c <_svfiprintf_r+0x1f8>)
 8012e0e:	a904      	add	r1, sp, #16
 8012e10:	4638      	mov	r0, r7
 8012e12:	f7fb fdf7 	bl	800ea04 <_printf_float>
 8012e16:	1c42      	adds	r2, r0, #1
 8012e18:	4606      	mov	r6, r0
 8012e1a:	d1d6      	bne.n	8012dca <_svfiprintf_r+0x176>
 8012e1c:	89ab      	ldrh	r3, [r5, #12]
 8012e1e:	065b      	lsls	r3, r3, #25
 8012e20:	f53f af2c 	bmi.w	8012c7c <_svfiprintf_r+0x28>
 8012e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e26:	b01d      	add	sp, #116	; 0x74
 8012e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e2c:	ab03      	add	r3, sp, #12
 8012e2e:	9300      	str	r3, [sp, #0]
 8012e30:	462a      	mov	r2, r5
 8012e32:	4b06      	ldr	r3, [pc, #24]	; (8012e4c <_svfiprintf_r+0x1f8>)
 8012e34:	a904      	add	r1, sp, #16
 8012e36:	4638      	mov	r0, r7
 8012e38:	f7fc f888 	bl	800ef4c <_printf_i>
 8012e3c:	e7eb      	b.n	8012e16 <_svfiprintf_r+0x1c2>
 8012e3e:	bf00      	nop
 8012e40:	08014c74 	.word	0x08014c74
 8012e44:	08014c7e 	.word	0x08014c7e
 8012e48:	0800ea05 	.word	0x0800ea05
 8012e4c:	08012b9d 	.word	0x08012b9d
 8012e50:	08014c7a 	.word	0x08014c7a

08012e54 <_sungetc_r>:
 8012e54:	b538      	push	{r3, r4, r5, lr}
 8012e56:	1c4b      	adds	r3, r1, #1
 8012e58:	4614      	mov	r4, r2
 8012e5a:	d103      	bne.n	8012e64 <_sungetc_r+0x10>
 8012e5c:	f04f 35ff 	mov.w	r5, #4294967295
 8012e60:	4628      	mov	r0, r5
 8012e62:	bd38      	pop	{r3, r4, r5, pc}
 8012e64:	8993      	ldrh	r3, [r2, #12]
 8012e66:	f023 0320 	bic.w	r3, r3, #32
 8012e6a:	8193      	strh	r3, [r2, #12]
 8012e6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e6e:	6852      	ldr	r2, [r2, #4]
 8012e70:	b2cd      	uxtb	r5, r1
 8012e72:	b18b      	cbz	r3, 8012e98 <_sungetc_r+0x44>
 8012e74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012e76:	4293      	cmp	r3, r2
 8012e78:	dd08      	ble.n	8012e8c <_sungetc_r+0x38>
 8012e7a:	6823      	ldr	r3, [r4, #0]
 8012e7c:	1e5a      	subs	r2, r3, #1
 8012e7e:	6022      	str	r2, [r4, #0]
 8012e80:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012e84:	6863      	ldr	r3, [r4, #4]
 8012e86:	3301      	adds	r3, #1
 8012e88:	6063      	str	r3, [r4, #4]
 8012e8a:	e7e9      	b.n	8012e60 <_sungetc_r+0xc>
 8012e8c:	4621      	mov	r1, r4
 8012e8e:	f000 fd4b 	bl	8013928 <__submore>
 8012e92:	2800      	cmp	r0, #0
 8012e94:	d0f1      	beq.n	8012e7a <_sungetc_r+0x26>
 8012e96:	e7e1      	b.n	8012e5c <_sungetc_r+0x8>
 8012e98:	6921      	ldr	r1, [r4, #16]
 8012e9a:	6823      	ldr	r3, [r4, #0]
 8012e9c:	b151      	cbz	r1, 8012eb4 <_sungetc_r+0x60>
 8012e9e:	4299      	cmp	r1, r3
 8012ea0:	d208      	bcs.n	8012eb4 <_sungetc_r+0x60>
 8012ea2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012ea6:	42a9      	cmp	r1, r5
 8012ea8:	d104      	bne.n	8012eb4 <_sungetc_r+0x60>
 8012eaa:	3b01      	subs	r3, #1
 8012eac:	3201      	adds	r2, #1
 8012eae:	6023      	str	r3, [r4, #0]
 8012eb0:	6062      	str	r2, [r4, #4]
 8012eb2:	e7d5      	b.n	8012e60 <_sungetc_r+0xc>
 8012eb4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ebc:	6363      	str	r3, [r4, #52]	; 0x34
 8012ebe:	2303      	movs	r3, #3
 8012ec0:	63a3      	str	r3, [r4, #56]	; 0x38
 8012ec2:	4623      	mov	r3, r4
 8012ec4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012ec8:	6023      	str	r3, [r4, #0]
 8012eca:	2301      	movs	r3, #1
 8012ecc:	e7dc      	b.n	8012e88 <_sungetc_r+0x34>

08012ece <__ssrefill_r>:
 8012ece:	b510      	push	{r4, lr}
 8012ed0:	460c      	mov	r4, r1
 8012ed2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012ed4:	b169      	cbz	r1, 8012ef2 <__ssrefill_r+0x24>
 8012ed6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012eda:	4299      	cmp	r1, r3
 8012edc:	d001      	beq.n	8012ee2 <__ssrefill_r+0x14>
 8012ede:	f7ff fd7d 	bl	80129dc <_free_r>
 8012ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012ee4:	6063      	str	r3, [r4, #4]
 8012ee6:	2000      	movs	r0, #0
 8012ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8012eea:	b113      	cbz	r3, 8012ef2 <__ssrefill_r+0x24>
 8012eec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012eee:	6023      	str	r3, [r4, #0]
 8012ef0:	bd10      	pop	{r4, pc}
 8012ef2:	6923      	ldr	r3, [r4, #16]
 8012ef4:	6023      	str	r3, [r4, #0]
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	6063      	str	r3, [r4, #4]
 8012efa:	89a3      	ldrh	r3, [r4, #12]
 8012efc:	f043 0320 	orr.w	r3, r3, #32
 8012f00:	81a3      	strh	r3, [r4, #12]
 8012f02:	f04f 30ff 	mov.w	r0, #4294967295
 8012f06:	e7f3      	b.n	8012ef0 <__ssrefill_r+0x22>

08012f08 <__ssvfiscanf_r>:
 8012f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f0c:	460c      	mov	r4, r1
 8012f0e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012f12:	2100      	movs	r1, #0
 8012f14:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012f18:	49a6      	ldr	r1, [pc, #664]	; (80131b4 <__ssvfiscanf_r+0x2ac>)
 8012f1a:	91a0      	str	r1, [sp, #640]	; 0x280
 8012f1c:	f10d 0804 	add.w	r8, sp, #4
 8012f20:	49a5      	ldr	r1, [pc, #660]	; (80131b8 <__ssvfiscanf_r+0x2b0>)
 8012f22:	4fa6      	ldr	r7, [pc, #664]	; (80131bc <__ssvfiscanf_r+0x2b4>)
 8012f24:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80131c0 <__ssvfiscanf_r+0x2b8>
 8012f28:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012f2c:	4606      	mov	r6, r0
 8012f2e:	91a1      	str	r1, [sp, #644]	; 0x284
 8012f30:	9300      	str	r3, [sp, #0]
 8012f32:	7813      	ldrb	r3, [r2, #0]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	f000 815a 	beq.w	80131ee <__ssvfiscanf_r+0x2e6>
 8012f3a:	5dd9      	ldrb	r1, [r3, r7]
 8012f3c:	f011 0108 	ands.w	r1, r1, #8
 8012f40:	f102 0501 	add.w	r5, r2, #1
 8012f44:	d019      	beq.n	8012f7a <__ssvfiscanf_r+0x72>
 8012f46:	6863      	ldr	r3, [r4, #4]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	dd0f      	ble.n	8012f6c <__ssvfiscanf_r+0x64>
 8012f4c:	6823      	ldr	r3, [r4, #0]
 8012f4e:	781a      	ldrb	r2, [r3, #0]
 8012f50:	5cba      	ldrb	r2, [r7, r2]
 8012f52:	0712      	lsls	r2, r2, #28
 8012f54:	d401      	bmi.n	8012f5a <__ssvfiscanf_r+0x52>
 8012f56:	462a      	mov	r2, r5
 8012f58:	e7eb      	b.n	8012f32 <__ssvfiscanf_r+0x2a>
 8012f5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012f5c:	3201      	adds	r2, #1
 8012f5e:	9245      	str	r2, [sp, #276]	; 0x114
 8012f60:	6862      	ldr	r2, [r4, #4]
 8012f62:	3301      	adds	r3, #1
 8012f64:	3a01      	subs	r2, #1
 8012f66:	6062      	str	r2, [r4, #4]
 8012f68:	6023      	str	r3, [r4, #0]
 8012f6a:	e7ec      	b.n	8012f46 <__ssvfiscanf_r+0x3e>
 8012f6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012f6e:	4621      	mov	r1, r4
 8012f70:	4630      	mov	r0, r6
 8012f72:	4798      	blx	r3
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d0e9      	beq.n	8012f4c <__ssvfiscanf_r+0x44>
 8012f78:	e7ed      	b.n	8012f56 <__ssvfiscanf_r+0x4e>
 8012f7a:	2b25      	cmp	r3, #37	; 0x25
 8012f7c:	d012      	beq.n	8012fa4 <__ssvfiscanf_r+0x9c>
 8012f7e:	469a      	mov	sl, r3
 8012f80:	6863      	ldr	r3, [r4, #4]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	f340 8091 	ble.w	80130aa <__ssvfiscanf_r+0x1a2>
 8012f88:	6822      	ldr	r2, [r4, #0]
 8012f8a:	7813      	ldrb	r3, [r2, #0]
 8012f8c:	4553      	cmp	r3, sl
 8012f8e:	f040 812e 	bne.w	80131ee <__ssvfiscanf_r+0x2e6>
 8012f92:	6863      	ldr	r3, [r4, #4]
 8012f94:	3b01      	subs	r3, #1
 8012f96:	6063      	str	r3, [r4, #4]
 8012f98:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012f9a:	3201      	adds	r2, #1
 8012f9c:	3301      	adds	r3, #1
 8012f9e:	6022      	str	r2, [r4, #0]
 8012fa0:	9345      	str	r3, [sp, #276]	; 0x114
 8012fa2:	e7d8      	b.n	8012f56 <__ssvfiscanf_r+0x4e>
 8012fa4:	9141      	str	r1, [sp, #260]	; 0x104
 8012fa6:	9143      	str	r1, [sp, #268]	; 0x10c
 8012fa8:	7853      	ldrb	r3, [r2, #1]
 8012faa:	2b2a      	cmp	r3, #42	; 0x2a
 8012fac:	bf02      	ittt	eq
 8012fae:	2310      	moveq	r3, #16
 8012fb0:	1c95      	addeq	r5, r2, #2
 8012fb2:	9341      	streq	r3, [sp, #260]	; 0x104
 8012fb4:	220a      	movs	r2, #10
 8012fb6:	46aa      	mov	sl, r5
 8012fb8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012fbc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012fc0:	2b09      	cmp	r3, #9
 8012fc2:	d91d      	bls.n	8013000 <__ssvfiscanf_r+0xf8>
 8012fc4:	487e      	ldr	r0, [pc, #504]	; (80131c0 <__ssvfiscanf_r+0x2b8>)
 8012fc6:	2203      	movs	r2, #3
 8012fc8:	f7ed f92a 	bl	8000220 <memchr>
 8012fcc:	b140      	cbz	r0, 8012fe0 <__ssvfiscanf_r+0xd8>
 8012fce:	2301      	movs	r3, #1
 8012fd0:	eba0 0009 	sub.w	r0, r0, r9
 8012fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8012fd8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012fda:	4318      	orrs	r0, r3
 8012fdc:	9041      	str	r0, [sp, #260]	; 0x104
 8012fde:	4655      	mov	r5, sl
 8012fe0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012fe4:	2b78      	cmp	r3, #120	; 0x78
 8012fe6:	d806      	bhi.n	8012ff6 <__ssvfiscanf_r+0xee>
 8012fe8:	2b57      	cmp	r3, #87	; 0x57
 8012fea:	d810      	bhi.n	801300e <__ssvfiscanf_r+0x106>
 8012fec:	2b25      	cmp	r3, #37	; 0x25
 8012fee:	d0c6      	beq.n	8012f7e <__ssvfiscanf_r+0x76>
 8012ff0:	d856      	bhi.n	80130a0 <__ssvfiscanf_r+0x198>
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d064      	beq.n	80130c0 <__ssvfiscanf_r+0x1b8>
 8012ff6:	2303      	movs	r3, #3
 8012ff8:	9347      	str	r3, [sp, #284]	; 0x11c
 8012ffa:	230a      	movs	r3, #10
 8012ffc:	9342      	str	r3, [sp, #264]	; 0x108
 8012ffe:	e071      	b.n	80130e4 <__ssvfiscanf_r+0x1dc>
 8013000:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013002:	fb02 1103 	mla	r1, r2, r3, r1
 8013006:	3930      	subs	r1, #48	; 0x30
 8013008:	9143      	str	r1, [sp, #268]	; 0x10c
 801300a:	4655      	mov	r5, sl
 801300c:	e7d3      	b.n	8012fb6 <__ssvfiscanf_r+0xae>
 801300e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013012:	2a20      	cmp	r2, #32
 8013014:	d8ef      	bhi.n	8012ff6 <__ssvfiscanf_r+0xee>
 8013016:	a101      	add	r1, pc, #4	; (adr r1, 801301c <__ssvfiscanf_r+0x114>)
 8013018:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801301c:	080130cf 	.word	0x080130cf
 8013020:	08012ff7 	.word	0x08012ff7
 8013024:	08012ff7 	.word	0x08012ff7
 8013028:	0801312d 	.word	0x0801312d
 801302c:	08012ff7 	.word	0x08012ff7
 8013030:	08012ff7 	.word	0x08012ff7
 8013034:	08012ff7 	.word	0x08012ff7
 8013038:	08012ff7 	.word	0x08012ff7
 801303c:	08012ff7 	.word	0x08012ff7
 8013040:	08012ff7 	.word	0x08012ff7
 8013044:	08012ff7 	.word	0x08012ff7
 8013048:	08013143 	.word	0x08013143
 801304c:	08013119 	.word	0x08013119
 8013050:	080130a7 	.word	0x080130a7
 8013054:	080130a7 	.word	0x080130a7
 8013058:	080130a7 	.word	0x080130a7
 801305c:	08012ff7 	.word	0x08012ff7
 8013060:	0801311d 	.word	0x0801311d
 8013064:	08012ff7 	.word	0x08012ff7
 8013068:	08012ff7 	.word	0x08012ff7
 801306c:	08012ff7 	.word	0x08012ff7
 8013070:	08012ff7 	.word	0x08012ff7
 8013074:	08013153 	.word	0x08013153
 8013078:	08013125 	.word	0x08013125
 801307c:	080130c7 	.word	0x080130c7
 8013080:	08012ff7 	.word	0x08012ff7
 8013084:	08012ff7 	.word	0x08012ff7
 8013088:	0801314f 	.word	0x0801314f
 801308c:	08012ff7 	.word	0x08012ff7
 8013090:	08013119 	.word	0x08013119
 8013094:	08012ff7 	.word	0x08012ff7
 8013098:	08012ff7 	.word	0x08012ff7
 801309c:	080130cf 	.word	0x080130cf
 80130a0:	3b45      	subs	r3, #69	; 0x45
 80130a2:	2b02      	cmp	r3, #2
 80130a4:	d8a7      	bhi.n	8012ff6 <__ssvfiscanf_r+0xee>
 80130a6:	2305      	movs	r3, #5
 80130a8:	e01b      	b.n	80130e2 <__ssvfiscanf_r+0x1da>
 80130aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80130ac:	4621      	mov	r1, r4
 80130ae:	4630      	mov	r0, r6
 80130b0:	4798      	blx	r3
 80130b2:	2800      	cmp	r0, #0
 80130b4:	f43f af68 	beq.w	8012f88 <__ssvfiscanf_r+0x80>
 80130b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80130ba:	2800      	cmp	r0, #0
 80130bc:	f040 808d 	bne.w	80131da <__ssvfiscanf_r+0x2d2>
 80130c0:	f04f 30ff 	mov.w	r0, #4294967295
 80130c4:	e08f      	b.n	80131e6 <__ssvfiscanf_r+0x2de>
 80130c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80130c8:	f042 0220 	orr.w	r2, r2, #32
 80130cc:	9241      	str	r2, [sp, #260]	; 0x104
 80130ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80130d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80130d4:	9241      	str	r2, [sp, #260]	; 0x104
 80130d6:	2210      	movs	r2, #16
 80130d8:	2b6f      	cmp	r3, #111	; 0x6f
 80130da:	9242      	str	r2, [sp, #264]	; 0x108
 80130dc:	bf34      	ite	cc
 80130de:	2303      	movcc	r3, #3
 80130e0:	2304      	movcs	r3, #4
 80130e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80130e4:	6863      	ldr	r3, [r4, #4]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	dd42      	ble.n	8013170 <__ssvfiscanf_r+0x268>
 80130ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80130ec:	0659      	lsls	r1, r3, #25
 80130ee:	d404      	bmi.n	80130fa <__ssvfiscanf_r+0x1f2>
 80130f0:	6823      	ldr	r3, [r4, #0]
 80130f2:	781a      	ldrb	r2, [r3, #0]
 80130f4:	5cba      	ldrb	r2, [r7, r2]
 80130f6:	0712      	lsls	r2, r2, #28
 80130f8:	d441      	bmi.n	801317e <__ssvfiscanf_r+0x276>
 80130fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80130fc:	2b02      	cmp	r3, #2
 80130fe:	dc50      	bgt.n	80131a2 <__ssvfiscanf_r+0x29a>
 8013100:	466b      	mov	r3, sp
 8013102:	4622      	mov	r2, r4
 8013104:	a941      	add	r1, sp, #260	; 0x104
 8013106:	4630      	mov	r0, r6
 8013108:	f000 f9d0 	bl	80134ac <_scanf_chars>
 801310c:	2801      	cmp	r0, #1
 801310e:	d06e      	beq.n	80131ee <__ssvfiscanf_r+0x2e6>
 8013110:	2802      	cmp	r0, #2
 8013112:	f47f af20 	bne.w	8012f56 <__ssvfiscanf_r+0x4e>
 8013116:	e7cf      	b.n	80130b8 <__ssvfiscanf_r+0x1b0>
 8013118:	220a      	movs	r2, #10
 801311a:	e7dd      	b.n	80130d8 <__ssvfiscanf_r+0x1d0>
 801311c:	2300      	movs	r3, #0
 801311e:	9342      	str	r3, [sp, #264]	; 0x108
 8013120:	2303      	movs	r3, #3
 8013122:	e7de      	b.n	80130e2 <__ssvfiscanf_r+0x1da>
 8013124:	2308      	movs	r3, #8
 8013126:	9342      	str	r3, [sp, #264]	; 0x108
 8013128:	2304      	movs	r3, #4
 801312a:	e7da      	b.n	80130e2 <__ssvfiscanf_r+0x1da>
 801312c:	4629      	mov	r1, r5
 801312e:	4640      	mov	r0, r8
 8013130:	f000 fb3a 	bl	80137a8 <__sccl>
 8013134:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801313a:	9341      	str	r3, [sp, #260]	; 0x104
 801313c:	4605      	mov	r5, r0
 801313e:	2301      	movs	r3, #1
 8013140:	e7cf      	b.n	80130e2 <__ssvfiscanf_r+0x1da>
 8013142:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013148:	9341      	str	r3, [sp, #260]	; 0x104
 801314a:	2300      	movs	r3, #0
 801314c:	e7c9      	b.n	80130e2 <__ssvfiscanf_r+0x1da>
 801314e:	2302      	movs	r3, #2
 8013150:	e7c7      	b.n	80130e2 <__ssvfiscanf_r+0x1da>
 8013152:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013154:	06c3      	lsls	r3, r0, #27
 8013156:	f53f aefe 	bmi.w	8012f56 <__ssvfiscanf_r+0x4e>
 801315a:	9b00      	ldr	r3, [sp, #0]
 801315c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801315e:	1d19      	adds	r1, r3, #4
 8013160:	9100      	str	r1, [sp, #0]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	f010 0f01 	tst.w	r0, #1
 8013168:	bf14      	ite	ne
 801316a:	801a      	strhne	r2, [r3, #0]
 801316c:	601a      	streq	r2, [r3, #0]
 801316e:	e6f2      	b.n	8012f56 <__ssvfiscanf_r+0x4e>
 8013170:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013172:	4621      	mov	r1, r4
 8013174:	4630      	mov	r0, r6
 8013176:	4798      	blx	r3
 8013178:	2800      	cmp	r0, #0
 801317a:	d0b6      	beq.n	80130ea <__ssvfiscanf_r+0x1e2>
 801317c:	e79c      	b.n	80130b8 <__ssvfiscanf_r+0x1b0>
 801317e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013180:	3201      	adds	r2, #1
 8013182:	9245      	str	r2, [sp, #276]	; 0x114
 8013184:	6862      	ldr	r2, [r4, #4]
 8013186:	3a01      	subs	r2, #1
 8013188:	2a00      	cmp	r2, #0
 801318a:	6062      	str	r2, [r4, #4]
 801318c:	dd02      	ble.n	8013194 <__ssvfiscanf_r+0x28c>
 801318e:	3301      	adds	r3, #1
 8013190:	6023      	str	r3, [r4, #0]
 8013192:	e7ad      	b.n	80130f0 <__ssvfiscanf_r+0x1e8>
 8013194:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013196:	4621      	mov	r1, r4
 8013198:	4630      	mov	r0, r6
 801319a:	4798      	blx	r3
 801319c:	2800      	cmp	r0, #0
 801319e:	d0a7      	beq.n	80130f0 <__ssvfiscanf_r+0x1e8>
 80131a0:	e78a      	b.n	80130b8 <__ssvfiscanf_r+0x1b0>
 80131a2:	2b04      	cmp	r3, #4
 80131a4:	dc0e      	bgt.n	80131c4 <__ssvfiscanf_r+0x2bc>
 80131a6:	466b      	mov	r3, sp
 80131a8:	4622      	mov	r2, r4
 80131aa:	a941      	add	r1, sp, #260	; 0x104
 80131ac:	4630      	mov	r0, r6
 80131ae:	f000 f9d7 	bl	8013560 <_scanf_i>
 80131b2:	e7ab      	b.n	801310c <__ssvfiscanf_r+0x204>
 80131b4:	08012e55 	.word	0x08012e55
 80131b8:	08012ecf 	.word	0x08012ecf
 80131bc:	08014821 	.word	0x08014821
 80131c0:	08014c7a 	.word	0x08014c7a
 80131c4:	4b0b      	ldr	r3, [pc, #44]	; (80131f4 <__ssvfiscanf_r+0x2ec>)
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	f43f aec5 	beq.w	8012f56 <__ssvfiscanf_r+0x4e>
 80131cc:	466b      	mov	r3, sp
 80131ce:	4622      	mov	r2, r4
 80131d0:	a941      	add	r1, sp, #260	; 0x104
 80131d2:	4630      	mov	r0, r6
 80131d4:	f7fb ffe0 	bl	800f198 <_scanf_float>
 80131d8:	e798      	b.n	801310c <__ssvfiscanf_r+0x204>
 80131da:	89a3      	ldrh	r3, [r4, #12]
 80131dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80131e0:	bf18      	it	ne
 80131e2:	f04f 30ff 	movne.w	r0, #4294967295
 80131e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80131ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80131f0:	e7f9      	b.n	80131e6 <__ssvfiscanf_r+0x2de>
 80131f2:	bf00      	nop
 80131f4:	0800f199 	.word	0x0800f199

080131f8 <__sfputc_r>:
 80131f8:	6893      	ldr	r3, [r2, #8]
 80131fa:	3b01      	subs	r3, #1
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	b410      	push	{r4}
 8013200:	6093      	str	r3, [r2, #8]
 8013202:	da08      	bge.n	8013216 <__sfputc_r+0x1e>
 8013204:	6994      	ldr	r4, [r2, #24]
 8013206:	42a3      	cmp	r3, r4
 8013208:	db01      	blt.n	801320e <__sfputc_r+0x16>
 801320a:	290a      	cmp	r1, #10
 801320c:	d103      	bne.n	8013216 <__sfputc_r+0x1e>
 801320e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013212:	f7fd b9ed 	b.w	80105f0 <__swbuf_r>
 8013216:	6813      	ldr	r3, [r2, #0]
 8013218:	1c58      	adds	r0, r3, #1
 801321a:	6010      	str	r0, [r2, #0]
 801321c:	7019      	strb	r1, [r3, #0]
 801321e:	4608      	mov	r0, r1
 8013220:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013224:	4770      	bx	lr

08013226 <__sfputs_r>:
 8013226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013228:	4606      	mov	r6, r0
 801322a:	460f      	mov	r7, r1
 801322c:	4614      	mov	r4, r2
 801322e:	18d5      	adds	r5, r2, r3
 8013230:	42ac      	cmp	r4, r5
 8013232:	d101      	bne.n	8013238 <__sfputs_r+0x12>
 8013234:	2000      	movs	r0, #0
 8013236:	e007      	b.n	8013248 <__sfputs_r+0x22>
 8013238:	f814 1b01 	ldrb.w	r1, [r4], #1
 801323c:	463a      	mov	r2, r7
 801323e:	4630      	mov	r0, r6
 8013240:	f7ff ffda 	bl	80131f8 <__sfputc_r>
 8013244:	1c43      	adds	r3, r0, #1
 8013246:	d1f3      	bne.n	8013230 <__sfputs_r+0xa>
 8013248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801324c <_vfiprintf_r>:
 801324c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013250:	460d      	mov	r5, r1
 8013252:	b09d      	sub	sp, #116	; 0x74
 8013254:	4614      	mov	r4, r2
 8013256:	4698      	mov	r8, r3
 8013258:	4606      	mov	r6, r0
 801325a:	b118      	cbz	r0, 8013264 <_vfiprintf_r+0x18>
 801325c:	6983      	ldr	r3, [r0, #24]
 801325e:	b90b      	cbnz	r3, 8013264 <_vfiprintf_r+0x18>
 8013260:	f7fe fa3e 	bl	80116e0 <__sinit>
 8013264:	4b89      	ldr	r3, [pc, #548]	; (801348c <_vfiprintf_r+0x240>)
 8013266:	429d      	cmp	r5, r3
 8013268:	d11b      	bne.n	80132a2 <_vfiprintf_r+0x56>
 801326a:	6875      	ldr	r5, [r6, #4]
 801326c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801326e:	07d9      	lsls	r1, r3, #31
 8013270:	d405      	bmi.n	801327e <_vfiprintf_r+0x32>
 8013272:	89ab      	ldrh	r3, [r5, #12]
 8013274:	059a      	lsls	r2, r3, #22
 8013276:	d402      	bmi.n	801327e <_vfiprintf_r+0x32>
 8013278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801327a:	f7fe fe42 	bl	8011f02 <__retarget_lock_acquire_recursive>
 801327e:	89ab      	ldrh	r3, [r5, #12]
 8013280:	071b      	lsls	r3, r3, #28
 8013282:	d501      	bpl.n	8013288 <_vfiprintf_r+0x3c>
 8013284:	692b      	ldr	r3, [r5, #16]
 8013286:	b9eb      	cbnz	r3, 80132c4 <_vfiprintf_r+0x78>
 8013288:	4629      	mov	r1, r5
 801328a:	4630      	mov	r0, r6
 801328c:	f7fd fa14 	bl	80106b8 <__swsetup_r>
 8013290:	b1c0      	cbz	r0, 80132c4 <_vfiprintf_r+0x78>
 8013292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013294:	07dc      	lsls	r4, r3, #31
 8013296:	d50e      	bpl.n	80132b6 <_vfiprintf_r+0x6a>
 8013298:	f04f 30ff 	mov.w	r0, #4294967295
 801329c:	b01d      	add	sp, #116	; 0x74
 801329e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132a2:	4b7b      	ldr	r3, [pc, #492]	; (8013490 <_vfiprintf_r+0x244>)
 80132a4:	429d      	cmp	r5, r3
 80132a6:	d101      	bne.n	80132ac <_vfiprintf_r+0x60>
 80132a8:	68b5      	ldr	r5, [r6, #8]
 80132aa:	e7df      	b.n	801326c <_vfiprintf_r+0x20>
 80132ac:	4b79      	ldr	r3, [pc, #484]	; (8013494 <_vfiprintf_r+0x248>)
 80132ae:	429d      	cmp	r5, r3
 80132b0:	bf08      	it	eq
 80132b2:	68f5      	ldreq	r5, [r6, #12]
 80132b4:	e7da      	b.n	801326c <_vfiprintf_r+0x20>
 80132b6:	89ab      	ldrh	r3, [r5, #12]
 80132b8:	0598      	lsls	r0, r3, #22
 80132ba:	d4ed      	bmi.n	8013298 <_vfiprintf_r+0x4c>
 80132bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132be:	f7fe fe21 	bl	8011f04 <__retarget_lock_release_recursive>
 80132c2:	e7e9      	b.n	8013298 <_vfiprintf_r+0x4c>
 80132c4:	2300      	movs	r3, #0
 80132c6:	9309      	str	r3, [sp, #36]	; 0x24
 80132c8:	2320      	movs	r3, #32
 80132ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80132ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80132d2:	2330      	movs	r3, #48	; 0x30
 80132d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013498 <_vfiprintf_r+0x24c>
 80132d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80132dc:	f04f 0901 	mov.w	r9, #1
 80132e0:	4623      	mov	r3, r4
 80132e2:	469a      	mov	sl, r3
 80132e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132e8:	b10a      	cbz	r2, 80132ee <_vfiprintf_r+0xa2>
 80132ea:	2a25      	cmp	r2, #37	; 0x25
 80132ec:	d1f9      	bne.n	80132e2 <_vfiprintf_r+0x96>
 80132ee:	ebba 0b04 	subs.w	fp, sl, r4
 80132f2:	d00b      	beq.n	801330c <_vfiprintf_r+0xc0>
 80132f4:	465b      	mov	r3, fp
 80132f6:	4622      	mov	r2, r4
 80132f8:	4629      	mov	r1, r5
 80132fa:	4630      	mov	r0, r6
 80132fc:	f7ff ff93 	bl	8013226 <__sfputs_r>
 8013300:	3001      	adds	r0, #1
 8013302:	f000 80aa 	beq.w	801345a <_vfiprintf_r+0x20e>
 8013306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013308:	445a      	add	r2, fp
 801330a:	9209      	str	r2, [sp, #36]	; 0x24
 801330c:	f89a 3000 	ldrb.w	r3, [sl]
 8013310:	2b00      	cmp	r3, #0
 8013312:	f000 80a2 	beq.w	801345a <_vfiprintf_r+0x20e>
 8013316:	2300      	movs	r3, #0
 8013318:	f04f 32ff 	mov.w	r2, #4294967295
 801331c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013320:	f10a 0a01 	add.w	sl, sl, #1
 8013324:	9304      	str	r3, [sp, #16]
 8013326:	9307      	str	r3, [sp, #28]
 8013328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801332c:	931a      	str	r3, [sp, #104]	; 0x68
 801332e:	4654      	mov	r4, sl
 8013330:	2205      	movs	r2, #5
 8013332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013336:	4858      	ldr	r0, [pc, #352]	; (8013498 <_vfiprintf_r+0x24c>)
 8013338:	f7ec ff72 	bl	8000220 <memchr>
 801333c:	9a04      	ldr	r2, [sp, #16]
 801333e:	b9d8      	cbnz	r0, 8013378 <_vfiprintf_r+0x12c>
 8013340:	06d1      	lsls	r1, r2, #27
 8013342:	bf44      	itt	mi
 8013344:	2320      	movmi	r3, #32
 8013346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801334a:	0713      	lsls	r3, r2, #28
 801334c:	bf44      	itt	mi
 801334e:	232b      	movmi	r3, #43	; 0x2b
 8013350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013354:	f89a 3000 	ldrb.w	r3, [sl]
 8013358:	2b2a      	cmp	r3, #42	; 0x2a
 801335a:	d015      	beq.n	8013388 <_vfiprintf_r+0x13c>
 801335c:	9a07      	ldr	r2, [sp, #28]
 801335e:	4654      	mov	r4, sl
 8013360:	2000      	movs	r0, #0
 8013362:	f04f 0c0a 	mov.w	ip, #10
 8013366:	4621      	mov	r1, r4
 8013368:	f811 3b01 	ldrb.w	r3, [r1], #1
 801336c:	3b30      	subs	r3, #48	; 0x30
 801336e:	2b09      	cmp	r3, #9
 8013370:	d94e      	bls.n	8013410 <_vfiprintf_r+0x1c4>
 8013372:	b1b0      	cbz	r0, 80133a2 <_vfiprintf_r+0x156>
 8013374:	9207      	str	r2, [sp, #28]
 8013376:	e014      	b.n	80133a2 <_vfiprintf_r+0x156>
 8013378:	eba0 0308 	sub.w	r3, r0, r8
 801337c:	fa09 f303 	lsl.w	r3, r9, r3
 8013380:	4313      	orrs	r3, r2
 8013382:	9304      	str	r3, [sp, #16]
 8013384:	46a2      	mov	sl, r4
 8013386:	e7d2      	b.n	801332e <_vfiprintf_r+0xe2>
 8013388:	9b03      	ldr	r3, [sp, #12]
 801338a:	1d19      	adds	r1, r3, #4
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	9103      	str	r1, [sp, #12]
 8013390:	2b00      	cmp	r3, #0
 8013392:	bfbb      	ittet	lt
 8013394:	425b      	neglt	r3, r3
 8013396:	f042 0202 	orrlt.w	r2, r2, #2
 801339a:	9307      	strge	r3, [sp, #28]
 801339c:	9307      	strlt	r3, [sp, #28]
 801339e:	bfb8      	it	lt
 80133a0:	9204      	strlt	r2, [sp, #16]
 80133a2:	7823      	ldrb	r3, [r4, #0]
 80133a4:	2b2e      	cmp	r3, #46	; 0x2e
 80133a6:	d10c      	bne.n	80133c2 <_vfiprintf_r+0x176>
 80133a8:	7863      	ldrb	r3, [r4, #1]
 80133aa:	2b2a      	cmp	r3, #42	; 0x2a
 80133ac:	d135      	bne.n	801341a <_vfiprintf_r+0x1ce>
 80133ae:	9b03      	ldr	r3, [sp, #12]
 80133b0:	1d1a      	adds	r2, r3, #4
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	9203      	str	r2, [sp, #12]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	bfb8      	it	lt
 80133ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80133be:	3402      	adds	r4, #2
 80133c0:	9305      	str	r3, [sp, #20]
 80133c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80134a8 <_vfiprintf_r+0x25c>
 80133c6:	7821      	ldrb	r1, [r4, #0]
 80133c8:	2203      	movs	r2, #3
 80133ca:	4650      	mov	r0, sl
 80133cc:	f7ec ff28 	bl	8000220 <memchr>
 80133d0:	b140      	cbz	r0, 80133e4 <_vfiprintf_r+0x198>
 80133d2:	2340      	movs	r3, #64	; 0x40
 80133d4:	eba0 000a 	sub.w	r0, r0, sl
 80133d8:	fa03 f000 	lsl.w	r0, r3, r0
 80133dc:	9b04      	ldr	r3, [sp, #16]
 80133de:	4303      	orrs	r3, r0
 80133e0:	3401      	adds	r4, #1
 80133e2:	9304      	str	r3, [sp, #16]
 80133e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133e8:	482c      	ldr	r0, [pc, #176]	; (801349c <_vfiprintf_r+0x250>)
 80133ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80133ee:	2206      	movs	r2, #6
 80133f0:	f7ec ff16 	bl	8000220 <memchr>
 80133f4:	2800      	cmp	r0, #0
 80133f6:	d03f      	beq.n	8013478 <_vfiprintf_r+0x22c>
 80133f8:	4b29      	ldr	r3, [pc, #164]	; (80134a0 <_vfiprintf_r+0x254>)
 80133fa:	bb1b      	cbnz	r3, 8013444 <_vfiprintf_r+0x1f8>
 80133fc:	9b03      	ldr	r3, [sp, #12]
 80133fe:	3307      	adds	r3, #7
 8013400:	f023 0307 	bic.w	r3, r3, #7
 8013404:	3308      	adds	r3, #8
 8013406:	9303      	str	r3, [sp, #12]
 8013408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801340a:	443b      	add	r3, r7
 801340c:	9309      	str	r3, [sp, #36]	; 0x24
 801340e:	e767      	b.n	80132e0 <_vfiprintf_r+0x94>
 8013410:	fb0c 3202 	mla	r2, ip, r2, r3
 8013414:	460c      	mov	r4, r1
 8013416:	2001      	movs	r0, #1
 8013418:	e7a5      	b.n	8013366 <_vfiprintf_r+0x11a>
 801341a:	2300      	movs	r3, #0
 801341c:	3401      	adds	r4, #1
 801341e:	9305      	str	r3, [sp, #20]
 8013420:	4619      	mov	r1, r3
 8013422:	f04f 0c0a 	mov.w	ip, #10
 8013426:	4620      	mov	r0, r4
 8013428:	f810 2b01 	ldrb.w	r2, [r0], #1
 801342c:	3a30      	subs	r2, #48	; 0x30
 801342e:	2a09      	cmp	r2, #9
 8013430:	d903      	bls.n	801343a <_vfiprintf_r+0x1ee>
 8013432:	2b00      	cmp	r3, #0
 8013434:	d0c5      	beq.n	80133c2 <_vfiprintf_r+0x176>
 8013436:	9105      	str	r1, [sp, #20]
 8013438:	e7c3      	b.n	80133c2 <_vfiprintf_r+0x176>
 801343a:	fb0c 2101 	mla	r1, ip, r1, r2
 801343e:	4604      	mov	r4, r0
 8013440:	2301      	movs	r3, #1
 8013442:	e7f0      	b.n	8013426 <_vfiprintf_r+0x1da>
 8013444:	ab03      	add	r3, sp, #12
 8013446:	9300      	str	r3, [sp, #0]
 8013448:	462a      	mov	r2, r5
 801344a:	4b16      	ldr	r3, [pc, #88]	; (80134a4 <_vfiprintf_r+0x258>)
 801344c:	a904      	add	r1, sp, #16
 801344e:	4630      	mov	r0, r6
 8013450:	f7fb fad8 	bl	800ea04 <_printf_float>
 8013454:	4607      	mov	r7, r0
 8013456:	1c78      	adds	r0, r7, #1
 8013458:	d1d6      	bne.n	8013408 <_vfiprintf_r+0x1bc>
 801345a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801345c:	07d9      	lsls	r1, r3, #31
 801345e:	d405      	bmi.n	801346c <_vfiprintf_r+0x220>
 8013460:	89ab      	ldrh	r3, [r5, #12]
 8013462:	059a      	lsls	r2, r3, #22
 8013464:	d402      	bmi.n	801346c <_vfiprintf_r+0x220>
 8013466:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013468:	f7fe fd4c 	bl	8011f04 <__retarget_lock_release_recursive>
 801346c:	89ab      	ldrh	r3, [r5, #12]
 801346e:	065b      	lsls	r3, r3, #25
 8013470:	f53f af12 	bmi.w	8013298 <_vfiprintf_r+0x4c>
 8013474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013476:	e711      	b.n	801329c <_vfiprintf_r+0x50>
 8013478:	ab03      	add	r3, sp, #12
 801347a:	9300      	str	r3, [sp, #0]
 801347c:	462a      	mov	r2, r5
 801347e:	4b09      	ldr	r3, [pc, #36]	; (80134a4 <_vfiprintf_r+0x258>)
 8013480:	a904      	add	r1, sp, #16
 8013482:	4630      	mov	r0, r6
 8013484:	f7fb fd62 	bl	800ef4c <_printf_i>
 8013488:	e7e4      	b.n	8013454 <_vfiprintf_r+0x208>
 801348a:	bf00      	nop
 801348c:	08014a60 	.word	0x08014a60
 8013490:	08014a80 	.word	0x08014a80
 8013494:	08014a40 	.word	0x08014a40
 8013498:	08014c74 	.word	0x08014c74
 801349c:	08014c7e 	.word	0x08014c7e
 80134a0:	0800ea05 	.word	0x0800ea05
 80134a4:	08013227 	.word	0x08013227
 80134a8:	08014c7a 	.word	0x08014c7a

080134ac <_scanf_chars>:
 80134ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134b0:	4615      	mov	r5, r2
 80134b2:	688a      	ldr	r2, [r1, #8]
 80134b4:	4680      	mov	r8, r0
 80134b6:	460c      	mov	r4, r1
 80134b8:	b932      	cbnz	r2, 80134c8 <_scanf_chars+0x1c>
 80134ba:	698a      	ldr	r2, [r1, #24]
 80134bc:	2a00      	cmp	r2, #0
 80134be:	bf0c      	ite	eq
 80134c0:	2201      	moveq	r2, #1
 80134c2:	f04f 32ff 	movne.w	r2, #4294967295
 80134c6:	608a      	str	r2, [r1, #8]
 80134c8:	6822      	ldr	r2, [r4, #0]
 80134ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801355c <_scanf_chars+0xb0>
 80134ce:	06d1      	lsls	r1, r2, #27
 80134d0:	bf5f      	itttt	pl
 80134d2:	681a      	ldrpl	r2, [r3, #0]
 80134d4:	1d11      	addpl	r1, r2, #4
 80134d6:	6019      	strpl	r1, [r3, #0]
 80134d8:	6816      	ldrpl	r6, [r2, #0]
 80134da:	2700      	movs	r7, #0
 80134dc:	69a0      	ldr	r0, [r4, #24]
 80134de:	b188      	cbz	r0, 8013504 <_scanf_chars+0x58>
 80134e0:	2801      	cmp	r0, #1
 80134e2:	d107      	bne.n	80134f4 <_scanf_chars+0x48>
 80134e4:	682a      	ldr	r2, [r5, #0]
 80134e6:	7811      	ldrb	r1, [r2, #0]
 80134e8:	6962      	ldr	r2, [r4, #20]
 80134ea:	5c52      	ldrb	r2, [r2, r1]
 80134ec:	b952      	cbnz	r2, 8013504 <_scanf_chars+0x58>
 80134ee:	2f00      	cmp	r7, #0
 80134f0:	d031      	beq.n	8013556 <_scanf_chars+0xaa>
 80134f2:	e022      	b.n	801353a <_scanf_chars+0x8e>
 80134f4:	2802      	cmp	r0, #2
 80134f6:	d120      	bne.n	801353a <_scanf_chars+0x8e>
 80134f8:	682b      	ldr	r3, [r5, #0]
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013500:	071b      	lsls	r3, r3, #28
 8013502:	d41a      	bmi.n	801353a <_scanf_chars+0x8e>
 8013504:	6823      	ldr	r3, [r4, #0]
 8013506:	06da      	lsls	r2, r3, #27
 8013508:	bf5e      	ittt	pl
 801350a:	682b      	ldrpl	r3, [r5, #0]
 801350c:	781b      	ldrbpl	r3, [r3, #0]
 801350e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013512:	682a      	ldr	r2, [r5, #0]
 8013514:	686b      	ldr	r3, [r5, #4]
 8013516:	3201      	adds	r2, #1
 8013518:	602a      	str	r2, [r5, #0]
 801351a:	68a2      	ldr	r2, [r4, #8]
 801351c:	3b01      	subs	r3, #1
 801351e:	3a01      	subs	r2, #1
 8013520:	606b      	str	r3, [r5, #4]
 8013522:	3701      	adds	r7, #1
 8013524:	60a2      	str	r2, [r4, #8]
 8013526:	b142      	cbz	r2, 801353a <_scanf_chars+0x8e>
 8013528:	2b00      	cmp	r3, #0
 801352a:	dcd7      	bgt.n	80134dc <_scanf_chars+0x30>
 801352c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013530:	4629      	mov	r1, r5
 8013532:	4640      	mov	r0, r8
 8013534:	4798      	blx	r3
 8013536:	2800      	cmp	r0, #0
 8013538:	d0d0      	beq.n	80134dc <_scanf_chars+0x30>
 801353a:	6823      	ldr	r3, [r4, #0]
 801353c:	f013 0310 	ands.w	r3, r3, #16
 8013540:	d105      	bne.n	801354e <_scanf_chars+0xa2>
 8013542:	68e2      	ldr	r2, [r4, #12]
 8013544:	3201      	adds	r2, #1
 8013546:	60e2      	str	r2, [r4, #12]
 8013548:	69a2      	ldr	r2, [r4, #24]
 801354a:	b102      	cbz	r2, 801354e <_scanf_chars+0xa2>
 801354c:	7033      	strb	r3, [r6, #0]
 801354e:	6923      	ldr	r3, [r4, #16]
 8013550:	443b      	add	r3, r7
 8013552:	6123      	str	r3, [r4, #16]
 8013554:	2000      	movs	r0, #0
 8013556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801355a:	bf00      	nop
 801355c:	08014821 	.word	0x08014821

08013560 <_scanf_i>:
 8013560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013564:	4698      	mov	r8, r3
 8013566:	4b76      	ldr	r3, [pc, #472]	; (8013740 <_scanf_i+0x1e0>)
 8013568:	460c      	mov	r4, r1
 801356a:	4682      	mov	sl, r0
 801356c:	4616      	mov	r6, r2
 801356e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013572:	b087      	sub	sp, #28
 8013574:	ab03      	add	r3, sp, #12
 8013576:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801357a:	4b72      	ldr	r3, [pc, #456]	; (8013744 <_scanf_i+0x1e4>)
 801357c:	69a1      	ldr	r1, [r4, #24]
 801357e:	4a72      	ldr	r2, [pc, #456]	; (8013748 <_scanf_i+0x1e8>)
 8013580:	2903      	cmp	r1, #3
 8013582:	bf18      	it	ne
 8013584:	461a      	movne	r2, r3
 8013586:	68a3      	ldr	r3, [r4, #8]
 8013588:	9201      	str	r2, [sp, #4]
 801358a:	1e5a      	subs	r2, r3, #1
 801358c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013590:	bf88      	it	hi
 8013592:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013596:	4627      	mov	r7, r4
 8013598:	bf82      	ittt	hi
 801359a:	eb03 0905 	addhi.w	r9, r3, r5
 801359e:	f240 135d 	movwhi	r3, #349	; 0x15d
 80135a2:	60a3      	strhi	r3, [r4, #8]
 80135a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80135a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80135ac:	bf98      	it	ls
 80135ae:	f04f 0900 	movls.w	r9, #0
 80135b2:	6023      	str	r3, [r4, #0]
 80135b4:	463d      	mov	r5, r7
 80135b6:	f04f 0b00 	mov.w	fp, #0
 80135ba:	6831      	ldr	r1, [r6, #0]
 80135bc:	ab03      	add	r3, sp, #12
 80135be:	7809      	ldrb	r1, [r1, #0]
 80135c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80135c4:	2202      	movs	r2, #2
 80135c6:	f7ec fe2b 	bl	8000220 <memchr>
 80135ca:	b328      	cbz	r0, 8013618 <_scanf_i+0xb8>
 80135cc:	f1bb 0f01 	cmp.w	fp, #1
 80135d0:	d159      	bne.n	8013686 <_scanf_i+0x126>
 80135d2:	6862      	ldr	r2, [r4, #4]
 80135d4:	b92a      	cbnz	r2, 80135e2 <_scanf_i+0x82>
 80135d6:	6822      	ldr	r2, [r4, #0]
 80135d8:	2308      	movs	r3, #8
 80135da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80135de:	6063      	str	r3, [r4, #4]
 80135e0:	6022      	str	r2, [r4, #0]
 80135e2:	6822      	ldr	r2, [r4, #0]
 80135e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80135e8:	6022      	str	r2, [r4, #0]
 80135ea:	68a2      	ldr	r2, [r4, #8]
 80135ec:	1e51      	subs	r1, r2, #1
 80135ee:	60a1      	str	r1, [r4, #8]
 80135f0:	b192      	cbz	r2, 8013618 <_scanf_i+0xb8>
 80135f2:	6832      	ldr	r2, [r6, #0]
 80135f4:	1c51      	adds	r1, r2, #1
 80135f6:	6031      	str	r1, [r6, #0]
 80135f8:	7812      	ldrb	r2, [r2, #0]
 80135fa:	f805 2b01 	strb.w	r2, [r5], #1
 80135fe:	6872      	ldr	r2, [r6, #4]
 8013600:	3a01      	subs	r2, #1
 8013602:	2a00      	cmp	r2, #0
 8013604:	6072      	str	r2, [r6, #4]
 8013606:	dc07      	bgt.n	8013618 <_scanf_i+0xb8>
 8013608:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801360c:	4631      	mov	r1, r6
 801360e:	4650      	mov	r0, sl
 8013610:	4790      	blx	r2
 8013612:	2800      	cmp	r0, #0
 8013614:	f040 8085 	bne.w	8013722 <_scanf_i+0x1c2>
 8013618:	f10b 0b01 	add.w	fp, fp, #1
 801361c:	f1bb 0f03 	cmp.w	fp, #3
 8013620:	d1cb      	bne.n	80135ba <_scanf_i+0x5a>
 8013622:	6863      	ldr	r3, [r4, #4]
 8013624:	b90b      	cbnz	r3, 801362a <_scanf_i+0xca>
 8013626:	230a      	movs	r3, #10
 8013628:	6063      	str	r3, [r4, #4]
 801362a:	6863      	ldr	r3, [r4, #4]
 801362c:	4947      	ldr	r1, [pc, #284]	; (801374c <_scanf_i+0x1ec>)
 801362e:	6960      	ldr	r0, [r4, #20]
 8013630:	1ac9      	subs	r1, r1, r3
 8013632:	f000 f8b9 	bl	80137a8 <__sccl>
 8013636:	f04f 0b00 	mov.w	fp, #0
 801363a:	68a3      	ldr	r3, [r4, #8]
 801363c:	6822      	ldr	r2, [r4, #0]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d03d      	beq.n	80136be <_scanf_i+0x15e>
 8013642:	6831      	ldr	r1, [r6, #0]
 8013644:	6960      	ldr	r0, [r4, #20]
 8013646:	f891 c000 	ldrb.w	ip, [r1]
 801364a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801364e:	2800      	cmp	r0, #0
 8013650:	d035      	beq.n	80136be <_scanf_i+0x15e>
 8013652:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013656:	d124      	bne.n	80136a2 <_scanf_i+0x142>
 8013658:	0510      	lsls	r0, r2, #20
 801365a:	d522      	bpl.n	80136a2 <_scanf_i+0x142>
 801365c:	f10b 0b01 	add.w	fp, fp, #1
 8013660:	f1b9 0f00 	cmp.w	r9, #0
 8013664:	d003      	beq.n	801366e <_scanf_i+0x10e>
 8013666:	3301      	adds	r3, #1
 8013668:	f109 39ff 	add.w	r9, r9, #4294967295
 801366c:	60a3      	str	r3, [r4, #8]
 801366e:	6873      	ldr	r3, [r6, #4]
 8013670:	3b01      	subs	r3, #1
 8013672:	2b00      	cmp	r3, #0
 8013674:	6073      	str	r3, [r6, #4]
 8013676:	dd1b      	ble.n	80136b0 <_scanf_i+0x150>
 8013678:	6833      	ldr	r3, [r6, #0]
 801367a:	3301      	adds	r3, #1
 801367c:	6033      	str	r3, [r6, #0]
 801367e:	68a3      	ldr	r3, [r4, #8]
 8013680:	3b01      	subs	r3, #1
 8013682:	60a3      	str	r3, [r4, #8]
 8013684:	e7d9      	b.n	801363a <_scanf_i+0xda>
 8013686:	f1bb 0f02 	cmp.w	fp, #2
 801368a:	d1ae      	bne.n	80135ea <_scanf_i+0x8a>
 801368c:	6822      	ldr	r2, [r4, #0]
 801368e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013692:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013696:	d1bf      	bne.n	8013618 <_scanf_i+0xb8>
 8013698:	2310      	movs	r3, #16
 801369a:	6063      	str	r3, [r4, #4]
 801369c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80136a0:	e7a2      	b.n	80135e8 <_scanf_i+0x88>
 80136a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80136a6:	6022      	str	r2, [r4, #0]
 80136a8:	780b      	ldrb	r3, [r1, #0]
 80136aa:	f805 3b01 	strb.w	r3, [r5], #1
 80136ae:	e7de      	b.n	801366e <_scanf_i+0x10e>
 80136b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80136b4:	4631      	mov	r1, r6
 80136b6:	4650      	mov	r0, sl
 80136b8:	4798      	blx	r3
 80136ba:	2800      	cmp	r0, #0
 80136bc:	d0df      	beq.n	801367e <_scanf_i+0x11e>
 80136be:	6823      	ldr	r3, [r4, #0]
 80136c0:	05db      	lsls	r3, r3, #23
 80136c2:	d50d      	bpl.n	80136e0 <_scanf_i+0x180>
 80136c4:	42bd      	cmp	r5, r7
 80136c6:	d909      	bls.n	80136dc <_scanf_i+0x17c>
 80136c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80136cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80136d0:	4632      	mov	r2, r6
 80136d2:	4650      	mov	r0, sl
 80136d4:	4798      	blx	r3
 80136d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80136da:	464d      	mov	r5, r9
 80136dc:	42bd      	cmp	r5, r7
 80136de:	d02d      	beq.n	801373c <_scanf_i+0x1dc>
 80136e0:	6822      	ldr	r2, [r4, #0]
 80136e2:	f012 0210 	ands.w	r2, r2, #16
 80136e6:	d113      	bne.n	8013710 <_scanf_i+0x1b0>
 80136e8:	702a      	strb	r2, [r5, #0]
 80136ea:	6863      	ldr	r3, [r4, #4]
 80136ec:	9e01      	ldr	r6, [sp, #4]
 80136ee:	4639      	mov	r1, r7
 80136f0:	4650      	mov	r0, sl
 80136f2:	47b0      	blx	r6
 80136f4:	6821      	ldr	r1, [r4, #0]
 80136f6:	f8d8 3000 	ldr.w	r3, [r8]
 80136fa:	f011 0f20 	tst.w	r1, #32
 80136fe:	d013      	beq.n	8013728 <_scanf_i+0x1c8>
 8013700:	1d1a      	adds	r2, r3, #4
 8013702:	f8c8 2000 	str.w	r2, [r8]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	6018      	str	r0, [r3, #0]
 801370a:	68e3      	ldr	r3, [r4, #12]
 801370c:	3301      	adds	r3, #1
 801370e:	60e3      	str	r3, [r4, #12]
 8013710:	1bed      	subs	r5, r5, r7
 8013712:	44ab      	add	fp, r5
 8013714:	6925      	ldr	r5, [r4, #16]
 8013716:	445d      	add	r5, fp
 8013718:	6125      	str	r5, [r4, #16]
 801371a:	2000      	movs	r0, #0
 801371c:	b007      	add	sp, #28
 801371e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013722:	f04f 0b00 	mov.w	fp, #0
 8013726:	e7ca      	b.n	80136be <_scanf_i+0x15e>
 8013728:	1d1a      	adds	r2, r3, #4
 801372a:	f8c8 2000 	str.w	r2, [r8]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	f011 0f01 	tst.w	r1, #1
 8013734:	bf14      	ite	ne
 8013736:	8018      	strhne	r0, [r3, #0]
 8013738:	6018      	streq	r0, [r3, #0]
 801373a:	e7e6      	b.n	801370a <_scanf_i+0x1aa>
 801373c:	2001      	movs	r0, #1
 801373e:	e7ed      	b.n	801371c <_scanf_i+0x1bc>
 8013740:	080147fc 	.word	0x080147fc
 8013744:	08013925 	.word	0x08013925
 8013748:	080105ed 	.word	0x080105ed
 801374c:	08014c9e 	.word	0x08014c9e

08013750 <_read_r>:
 8013750:	b538      	push	{r3, r4, r5, lr}
 8013752:	4d07      	ldr	r5, [pc, #28]	; (8013770 <_read_r+0x20>)
 8013754:	4604      	mov	r4, r0
 8013756:	4608      	mov	r0, r1
 8013758:	4611      	mov	r1, r2
 801375a:	2200      	movs	r2, #0
 801375c:	602a      	str	r2, [r5, #0]
 801375e:	461a      	mov	r2, r3
 8013760:	f7f0 fcfa 	bl	8004158 <_read>
 8013764:	1c43      	adds	r3, r0, #1
 8013766:	d102      	bne.n	801376e <_read_r+0x1e>
 8013768:	682b      	ldr	r3, [r5, #0]
 801376a:	b103      	cbz	r3, 801376e <_read_r+0x1e>
 801376c:	6023      	str	r3, [r4, #0]
 801376e:	bd38      	pop	{r3, r4, r5, pc}
 8013770:	2000314c 	.word	0x2000314c
 8013774:	00000000 	.word	0x00000000

08013778 <nan>:
 8013778:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013780 <nan+0x8>
 801377c:	4770      	bx	lr
 801377e:	bf00      	nop
 8013780:	00000000 	.word	0x00000000
 8013784:	7ff80000 	.word	0x7ff80000

08013788 <_sbrk_r>:
 8013788:	b538      	push	{r3, r4, r5, lr}
 801378a:	4d06      	ldr	r5, [pc, #24]	; (80137a4 <_sbrk_r+0x1c>)
 801378c:	2300      	movs	r3, #0
 801378e:	4604      	mov	r4, r0
 8013790:	4608      	mov	r0, r1
 8013792:	602b      	str	r3, [r5, #0]
 8013794:	f7f0 fd32 	bl	80041fc <_sbrk>
 8013798:	1c43      	adds	r3, r0, #1
 801379a:	d102      	bne.n	80137a2 <_sbrk_r+0x1a>
 801379c:	682b      	ldr	r3, [r5, #0]
 801379e:	b103      	cbz	r3, 80137a2 <_sbrk_r+0x1a>
 80137a0:	6023      	str	r3, [r4, #0]
 80137a2:	bd38      	pop	{r3, r4, r5, pc}
 80137a4:	2000314c 	.word	0x2000314c

080137a8 <__sccl>:
 80137a8:	b570      	push	{r4, r5, r6, lr}
 80137aa:	780b      	ldrb	r3, [r1, #0]
 80137ac:	4604      	mov	r4, r0
 80137ae:	2b5e      	cmp	r3, #94	; 0x5e
 80137b0:	bf0b      	itete	eq
 80137b2:	784b      	ldrbeq	r3, [r1, #1]
 80137b4:	1c48      	addne	r0, r1, #1
 80137b6:	1c88      	addeq	r0, r1, #2
 80137b8:	2200      	movne	r2, #0
 80137ba:	bf08      	it	eq
 80137bc:	2201      	moveq	r2, #1
 80137be:	1e61      	subs	r1, r4, #1
 80137c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80137c4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80137c8:	42a9      	cmp	r1, r5
 80137ca:	d1fb      	bne.n	80137c4 <__sccl+0x1c>
 80137cc:	b90b      	cbnz	r3, 80137d2 <__sccl+0x2a>
 80137ce:	3801      	subs	r0, #1
 80137d0:	bd70      	pop	{r4, r5, r6, pc}
 80137d2:	f082 0201 	eor.w	r2, r2, #1
 80137d6:	54e2      	strb	r2, [r4, r3]
 80137d8:	4605      	mov	r5, r0
 80137da:	4628      	mov	r0, r5
 80137dc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80137e0:	292d      	cmp	r1, #45	; 0x2d
 80137e2:	d006      	beq.n	80137f2 <__sccl+0x4a>
 80137e4:	295d      	cmp	r1, #93	; 0x5d
 80137e6:	d0f3      	beq.n	80137d0 <__sccl+0x28>
 80137e8:	b909      	cbnz	r1, 80137ee <__sccl+0x46>
 80137ea:	4628      	mov	r0, r5
 80137ec:	e7f0      	b.n	80137d0 <__sccl+0x28>
 80137ee:	460b      	mov	r3, r1
 80137f0:	e7f1      	b.n	80137d6 <__sccl+0x2e>
 80137f2:	786e      	ldrb	r6, [r5, #1]
 80137f4:	2e5d      	cmp	r6, #93	; 0x5d
 80137f6:	d0fa      	beq.n	80137ee <__sccl+0x46>
 80137f8:	42b3      	cmp	r3, r6
 80137fa:	dcf8      	bgt.n	80137ee <__sccl+0x46>
 80137fc:	3502      	adds	r5, #2
 80137fe:	4619      	mov	r1, r3
 8013800:	3101      	adds	r1, #1
 8013802:	428e      	cmp	r6, r1
 8013804:	5462      	strb	r2, [r4, r1]
 8013806:	dcfb      	bgt.n	8013800 <__sccl+0x58>
 8013808:	1af1      	subs	r1, r6, r3
 801380a:	3901      	subs	r1, #1
 801380c:	1c58      	adds	r0, r3, #1
 801380e:	42b3      	cmp	r3, r6
 8013810:	bfa8      	it	ge
 8013812:	2100      	movge	r1, #0
 8013814:	1843      	adds	r3, r0, r1
 8013816:	e7e0      	b.n	80137da <__sccl+0x32>

08013818 <strncmp>:
 8013818:	b510      	push	{r4, lr}
 801381a:	b17a      	cbz	r2, 801383c <strncmp+0x24>
 801381c:	4603      	mov	r3, r0
 801381e:	3901      	subs	r1, #1
 8013820:	1884      	adds	r4, r0, r2
 8013822:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013826:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801382a:	4290      	cmp	r0, r2
 801382c:	d101      	bne.n	8013832 <strncmp+0x1a>
 801382e:	42a3      	cmp	r3, r4
 8013830:	d101      	bne.n	8013836 <strncmp+0x1e>
 8013832:	1a80      	subs	r0, r0, r2
 8013834:	bd10      	pop	{r4, pc}
 8013836:	2800      	cmp	r0, #0
 8013838:	d1f3      	bne.n	8013822 <strncmp+0xa>
 801383a:	e7fa      	b.n	8013832 <strncmp+0x1a>
 801383c:	4610      	mov	r0, r2
 801383e:	e7f9      	b.n	8013834 <strncmp+0x1c>

08013840 <_strtoul_l.constprop.0>:
 8013840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013844:	4f36      	ldr	r7, [pc, #216]	; (8013920 <_strtoul_l.constprop.0+0xe0>)
 8013846:	4686      	mov	lr, r0
 8013848:	460d      	mov	r5, r1
 801384a:	4628      	mov	r0, r5
 801384c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013850:	5de6      	ldrb	r6, [r4, r7]
 8013852:	f016 0608 	ands.w	r6, r6, #8
 8013856:	d1f8      	bne.n	801384a <_strtoul_l.constprop.0+0xa>
 8013858:	2c2d      	cmp	r4, #45	; 0x2d
 801385a:	d12f      	bne.n	80138bc <_strtoul_l.constprop.0+0x7c>
 801385c:	782c      	ldrb	r4, [r5, #0]
 801385e:	2601      	movs	r6, #1
 8013860:	1c85      	adds	r5, r0, #2
 8013862:	2b00      	cmp	r3, #0
 8013864:	d057      	beq.n	8013916 <_strtoul_l.constprop.0+0xd6>
 8013866:	2b10      	cmp	r3, #16
 8013868:	d109      	bne.n	801387e <_strtoul_l.constprop.0+0x3e>
 801386a:	2c30      	cmp	r4, #48	; 0x30
 801386c:	d107      	bne.n	801387e <_strtoul_l.constprop.0+0x3e>
 801386e:	7828      	ldrb	r0, [r5, #0]
 8013870:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013874:	2858      	cmp	r0, #88	; 0x58
 8013876:	d149      	bne.n	801390c <_strtoul_l.constprop.0+0xcc>
 8013878:	786c      	ldrb	r4, [r5, #1]
 801387a:	2310      	movs	r3, #16
 801387c:	3502      	adds	r5, #2
 801387e:	f04f 38ff 	mov.w	r8, #4294967295
 8013882:	2700      	movs	r7, #0
 8013884:	fbb8 f8f3 	udiv	r8, r8, r3
 8013888:	fb03 f908 	mul.w	r9, r3, r8
 801388c:	ea6f 0909 	mvn.w	r9, r9
 8013890:	4638      	mov	r0, r7
 8013892:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013896:	f1bc 0f09 	cmp.w	ip, #9
 801389a:	d814      	bhi.n	80138c6 <_strtoul_l.constprop.0+0x86>
 801389c:	4664      	mov	r4, ip
 801389e:	42a3      	cmp	r3, r4
 80138a0:	dd22      	ble.n	80138e8 <_strtoul_l.constprop.0+0xa8>
 80138a2:	2f00      	cmp	r7, #0
 80138a4:	db1d      	blt.n	80138e2 <_strtoul_l.constprop.0+0xa2>
 80138a6:	4580      	cmp	r8, r0
 80138a8:	d31b      	bcc.n	80138e2 <_strtoul_l.constprop.0+0xa2>
 80138aa:	d101      	bne.n	80138b0 <_strtoul_l.constprop.0+0x70>
 80138ac:	45a1      	cmp	r9, r4
 80138ae:	db18      	blt.n	80138e2 <_strtoul_l.constprop.0+0xa2>
 80138b0:	fb00 4003 	mla	r0, r0, r3, r4
 80138b4:	2701      	movs	r7, #1
 80138b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80138ba:	e7ea      	b.n	8013892 <_strtoul_l.constprop.0+0x52>
 80138bc:	2c2b      	cmp	r4, #43	; 0x2b
 80138be:	bf04      	itt	eq
 80138c0:	782c      	ldrbeq	r4, [r5, #0]
 80138c2:	1c85      	addeq	r5, r0, #2
 80138c4:	e7cd      	b.n	8013862 <_strtoul_l.constprop.0+0x22>
 80138c6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80138ca:	f1bc 0f19 	cmp.w	ip, #25
 80138ce:	d801      	bhi.n	80138d4 <_strtoul_l.constprop.0+0x94>
 80138d0:	3c37      	subs	r4, #55	; 0x37
 80138d2:	e7e4      	b.n	801389e <_strtoul_l.constprop.0+0x5e>
 80138d4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80138d8:	f1bc 0f19 	cmp.w	ip, #25
 80138dc:	d804      	bhi.n	80138e8 <_strtoul_l.constprop.0+0xa8>
 80138de:	3c57      	subs	r4, #87	; 0x57
 80138e0:	e7dd      	b.n	801389e <_strtoul_l.constprop.0+0x5e>
 80138e2:	f04f 37ff 	mov.w	r7, #4294967295
 80138e6:	e7e6      	b.n	80138b6 <_strtoul_l.constprop.0+0x76>
 80138e8:	2f00      	cmp	r7, #0
 80138ea:	da07      	bge.n	80138fc <_strtoul_l.constprop.0+0xbc>
 80138ec:	2322      	movs	r3, #34	; 0x22
 80138ee:	f8ce 3000 	str.w	r3, [lr]
 80138f2:	f04f 30ff 	mov.w	r0, #4294967295
 80138f6:	b932      	cbnz	r2, 8013906 <_strtoul_l.constprop.0+0xc6>
 80138f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138fc:	b106      	cbz	r6, 8013900 <_strtoul_l.constprop.0+0xc0>
 80138fe:	4240      	negs	r0, r0
 8013900:	2a00      	cmp	r2, #0
 8013902:	d0f9      	beq.n	80138f8 <_strtoul_l.constprop.0+0xb8>
 8013904:	b107      	cbz	r7, 8013908 <_strtoul_l.constprop.0+0xc8>
 8013906:	1e69      	subs	r1, r5, #1
 8013908:	6011      	str	r1, [r2, #0]
 801390a:	e7f5      	b.n	80138f8 <_strtoul_l.constprop.0+0xb8>
 801390c:	2430      	movs	r4, #48	; 0x30
 801390e:	2b00      	cmp	r3, #0
 8013910:	d1b5      	bne.n	801387e <_strtoul_l.constprop.0+0x3e>
 8013912:	2308      	movs	r3, #8
 8013914:	e7b3      	b.n	801387e <_strtoul_l.constprop.0+0x3e>
 8013916:	2c30      	cmp	r4, #48	; 0x30
 8013918:	d0a9      	beq.n	801386e <_strtoul_l.constprop.0+0x2e>
 801391a:	230a      	movs	r3, #10
 801391c:	e7af      	b.n	801387e <_strtoul_l.constprop.0+0x3e>
 801391e:	bf00      	nop
 8013920:	08014821 	.word	0x08014821

08013924 <_strtoul_r>:
 8013924:	f7ff bf8c 	b.w	8013840 <_strtoul_l.constprop.0>

08013928 <__submore>:
 8013928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801392c:	460c      	mov	r4, r1
 801392e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013934:	4299      	cmp	r1, r3
 8013936:	d11d      	bne.n	8013974 <__submore+0x4c>
 8013938:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801393c:	f7ff f8ba 	bl	8012ab4 <_malloc_r>
 8013940:	b918      	cbnz	r0, 801394a <__submore+0x22>
 8013942:	f04f 30ff 	mov.w	r0, #4294967295
 8013946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801394a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801394e:	63a3      	str	r3, [r4, #56]	; 0x38
 8013950:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013954:	6360      	str	r0, [r4, #52]	; 0x34
 8013956:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801395a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801395e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013962:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013966:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801396a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801396e:	6020      	str	r0, [r4, #0]
 8013970:	2000      	movs	r0, #0
 8013972:	e7e8      	b.n	8013946 <__submore+0x1e>
 8013974:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013976:	0077      	lsls	r7, r6, #1
 8013978:	463a      	mov	r2, r7
 801397a:	f000 f87b 	bl	8013a74 <_realloc_r>
 801397e:	4605      	mov	r5, r0
 8013980:	2800      	cmp	r0, #0
 8013982:	d0de      	beq.n	8013942 <__submore+0x1a>
 8013984:	eb00 0806 	add.w	r8, r0, r6
 8013988:	4601      	mov	r1, r0
 801398a:	4632      	mov	r2, r6
 801398c:	4640      	mov	r0, r8
 801398e:	f7fa ff69 	bl	800e864 <memcpy>
 8013992:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013996:	f8c4 8000 	str.w	r8, [r4]
 801399a:	e7e9      	b.n	8013970 <__submore+0x48>

0801399c <__ascii_wctomb>:
 801399c:	b149      	cbz	r1, 80139b2 <__ascii_wctomb+0x16>
 801399e:	2aff      	cmp	r2, #255	; 0xff
 80139a0:	bf85      	ittet	hi
 80139a2:	238a      	movhi	r3, #138	; 0x8a
 80139a4:	6003      	strhi	r3, [r0, #0]
 80139a6:	700a      	strbls	r2, [r1, #0]
 80139a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80139ac:	bf98      	it	ls
 80139ae:	2001      	movls	r0, #1
 80139b0:	4770      	bx	lr
 80139b2:	4608      	mov	r0, r1
 80139b4:	4770      	bx	lr
	...

080139b8 <__assert_func>:
 80139b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80139ba:	4614      	mov	r4, r2
 80139bc:	461a      	mov	r2, r3
 80139be:	4b09      	ldr	r3, [pc, #36]	; (80139e4 <__assert_func+0x2c>)
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	4605      	mov	r5, r0
 80139c4:	68d8      	ldr	r0, [r3, #12]
 80139c6:	b14c      	cbz	r4, 80139dc <__assert_func+0x24>
 80139c8:	4b07      	ldr	r3, [pc, #28]	; (80139e8 <__assert_func+0x30>)
 80139ca:	9100      	str	r1, [sp, #0]
 80139cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80139d0:	4906      	ldr	r1, [pc, #24]	; (80139ec <__assert_func+0x34>)
 80139d2:	462b      	mov	r3, r5
 80139d4:	f000 f80e 	bl	80139f4 <fiprintf>
 80139d8:	f000 f87b 	bl	8013ad2 <abort>
 80139dc:	4b04      	ldr	r3, [pc, #16]	; (80139f0 <__assert_func+0x38>)
 80139de:	461c      	mov	r4, r3
 80139e0:	e7f3      	b.n	80139ca <__assert_func+0x12>
 80139e2:	bf00      	nop
 80139e4:	20000110 	.word	0x20000110
 80139e8:	08014ca0 	.word	0x08014ca0
 80139ec:	08014cad 	.word	0x08014cad
 80139f0:	08014cdb 	.word	0x08014cdb

080139f4 <fiprintf>:
 80139f4:	b40e      	push	{r1, r2, r3}
 80139f6:	b503      	push	{r0, r1, lr}
 80139f8:	4601      	mov	r1, r0
 80139fa:	ab03      	add	r3, sp, #12
 80139fc:	4805      	ldr	r0, [pc, #20]	; (8013a14 <fiprintf+0x20>)
 80139fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a02:	6800      	ldr	r0, [r0, #0]
 8013a04:	9301      	str	r3, [sp, #4]
 8013a06:	f7ff fc21 	bl	801324c <_vfiprintf_r>
 8013a0a:	b002      	add	sp, #8
 8013a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a10:	b003      	add	sp, #12
 8013a12:	4770      	bx	lr
 8013a14:	20000110 	.word	0x20000110

08013a18 <_fstat_r>:
 8013a18:	b538      	push	{r3, r4, r5, lr}
 8013a1a:	4d07      	ldr	r5, [pc, #28]	; (8013a38 <_fstat_r+0x20>)
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	4604      	mov	r4, r0
 8013a20:	4608      	mov	r0, r1
 8013a22:	4611      	mov	r1, r2
 8013a24:	602b      	str	r3, [r5, #0]
 8013a26:	f7f0 fbc0 	bl	80041aa <_fstat>
 8013a2a:	1c43      	adds	r3, r0, #1
 8013a2c:	d102      	bne.n	8013a34 <_fstat_r+0x1c>
 8013a2e:	682b      	ldr	r3, [r5, #0]
 8013a30:	b103      	cbz	r3, 8013a34 <_fstat_r+0x1c>
 8013a32:	6023      	str	r3, [r4, #0]
 8013a34:	bd38      	pop	{r3, r4, r5, pc}
 8013a36:	bf00      	nop
 8013a38:	2000314c 	.word	0x2000314c

08013a3c <_isatty_r>:
 8013a3c:	b538      	push	{r3, r4, r5, lr}
 8013a3e:	4d06      	ldr	r5, [pc, #24]	; (8013a58 <_isatty_r+0x1c>)
 8013a40:	2300      	movs	r3, #0
 8013a42:	4604      	mov	r4, r0
 8013a44:	4608      	mov	r0, r1
 8013a46:	602b      	str	r3, [r5, #0]
 8013a48:	f7f0 fbbf 	bl	80041ca <_isatty>
 8013a4c:	1c43      	adds	r3, r0, #1
 8013a4e:	d102      	bne.n	8013a56 <_isatty_r+0x1a>
 8013a50:	682b      	ldr	r3, [r5, #0]
 8013a52:	b103      	cbz	r3, 8013a56 <_isatty_r+0x1a>
 8013a54:	6023      	str	r3, [r4, #0]
 8013a56:	bd38      	pop	{r3, r4, r5, pc}
 8013a58:	2000314c 	.word	0x2000314c

08013a5c <__malloc_lock>:
 8013a5c:	4801      	ldr	r0, [pc, #4]	; (8013a64 <__malloc_lock+0x8>)
 8013a5e:	f7fe ba50 	b.w	8011f02 <__retarget_lock_acquire_recursive>
 8013a62:	bf00      	nop
 8013a64:	20003140 	.word	0x20003140

08013a68 <__malloc_unlock>:
 8013a68:	4801      	ldr	r0, [pc, #4]	; (8013a70 <__malloc_unlock+0x8>)
 8013a6a:	f7fe ba4b 	b.w	8011f04 <__retarget_lock_release_recursive>
 8013a6e:	bf00      	nop
 8013a70:	20003140 	.word	0x20003140

08013a74 <_realloc_r>:
 8013a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a78:	4680      	mov	r8, r0
 8013a7a:	4614      	mov	r4, r2
 8013a7c:	460e      	mov	r6, r1
 8013a7e:	b921      	cbnz	r1, 8013a8a <_realloc_r+0x16>
 8013a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a84:	4611      	mov	r1, r2
 8013a86:	f7ff b815 	b.w	8012ab4 <_malloc_r>
 8013a8a:	b92a      	cbnz	r2, 8013a98 <_realloc_r+0x24>
 8013a8c:	f7fe ffa6 	bl	80129dc <_free_r>
 8013a90:	4625      	mov	r5, r4
 8013a92:	4628      	mov	r0, r5
 8013a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a98:	f000 f822 	bl	8013ae0 <_malloc_usable_size_r>
 8013a9c:	4284      	cmp	r4, r0
 8013a9e:	4607      	mov	r7, r0
 8013aa0:	d802      	bhi.n	8013aa8 <_realloc_r+0x34>
 8013aa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013aa6:	d812      	bhi.n	8013ace <_realloc_r+0x5a>
 8013aa8:	4621      	mov	r1, r4
 8013aaa:	4640      	mov	r0, r8
 8013aac:	f7ff f802 	bl	8012ab4 <_malloc_r>
 8013ab0:	4605      	mov	r5, r0
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	d0ed      	beq.n	8013a92 <_realloc_r+0x1e>
 8013ab6:	42bc      	cmp	r4, r7
 8013ab8:	4622      	mov	r2, r4
 8013aba:	4631      	mov	r1, r6
 8013abc:	bf28      	it	cs
 8013abe:	463a      	movcs	r2, r7
 8013ac0:	f7fa fed0 	bl	800e864 <memcpy>
 8013ac4:	4631      	mov	r1, r6
 8013ac6:	4640      	mov	r0, r8
 8013ac8:	f7fe ff88 	bl	80129dc <_free_r>
 8013acc:	e7e1      	b.n	8013a92 <_realloc_r+0x1e>
 8013ace:	4635      	mov	r5, r6
 8013ad0:	e7df      	b.n	8013a92 <_realloc_r+0x1e>

08013ad2 <abort>:
 8013ad2:	b508      	push	{r3, lr}
 8013ad4:	2006      	movs	r0, #6
 8013ad6:	f000 f833 	bl	8013b40 <raise>
 8013ada:	2001      	movs	r0, #1
 8013adc:	f7f0 fb32 	bl	8004144 <_exit>

08013ae0 <_malloc_usable_size_r>:
 8013ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ae4:	1f18      	subs	r0, r3, #4
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	bfbc      	itt	lt
 8013aea:	580b      	ldrlt	r3, [r1, r0]
 8013aec:	18c0      	addlt	r0, r0, r3
 8013aee:	4770      	bx	lr

08013af0 <_raise_r>:
 8013af0:	291f      	cmp	r1, #31
 8013af2:	b538      	push	{r3, r4, r5, lr}
 8013af4:	4604      	mov	r4, r0
 8013af6:	460d      	mov	r5, r1
 8013af8:	d904      	bls.n	8013b04 <_raise_r+0x14>
 8013afa:	2316      	movs	r3, #22
 8013afc:	6003      	str	r3, [r0, #0]
 8013afe:	f04f 30ff 	mov.w	r0, #4294967295
 8013b02:	bd38      	pop	{r3, r4, r5, pc}
 8013b04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b06:	b112      	cbz	r2, 8013b0e <_raise_r+0x1e>
 8013b08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b0c:	b94b      	cbnz	r3, 8013b22 <_raise_r+0x32>
 8013b0e:	4620      	mov	r0, r4
 8013b10:	f000 f830 	bl	8013b74 <_getpid_r>
 8013b14:	462a      	mov	r2, r5
 8013b16:	4601      	mov	r1, r0
 8013b18:	4620      	mov	r0, r4
 8013b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b1e:	f000 b817 	b.w	8013b50 <_kill_r>
 8013b22:	2b01      	cmp	r3, #1
 8013b24:	d00a      	beq.n	8013b3c <_raise_r+0x4c>
 8013b26:	1c59      	adds	r1, r3, #1
 8013b28:	d103      	bne.n	8013b32 <_raise_r+0x42>
 8013b2a:	2316      	movs	r3, #22
 8013b2c:	6003      	str	r3, [r0, #0]
 8013b2e:	2001      	movs	r0, #1
 8013b30:	e7e7      	b.n	8013b02 <_raise_r+0x12>
 8013b32:	2400      	movs	r4, #0
 8013b34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013b38:	4628      	mov	r0, r5
 8013b3a:	4798      	blx	r3
 8013b3c:	2000      	movs	r0, #0
 8013b3e:	e7e0      	b.n	8013b02 <_raise_r+0x12>

08013b40 <raise>:
 8013b40:	4b02      	ldr	r3, [pc, #8]	; (8013b4c <raise+0xc>)
 8013b42:	4601      	mov	r1, r0
 8013b44:	6818      	ldr	r0, [r3, #0]
 8013b46:	f7ff bfd3 	b.w	8013af0 <_raise_r>
 8013b4a:	bf00      	nop
 8013b4c:	20000110 	.word	0x20000110

08013b50 <_kill_r>:
 8013b50:	b538      	push	{r3, r4, r5, lr}
 8013b52:	4d07      	ldr	r5, [pc, #28]	; (8013b70 <_kill_r+0x20>)
 8013b54:	2300      	movs	r3, #0
 8013b56:	4604      	mov	r4, r0
 8013b58:	4608      	mov	r0, r1
 8013b5a:	4611      	mov	r1, r2
 8013b5c:	602b      	str	r3, [r5, #0]
 8013b5e:	f7f0 fae1 	bl	8004124 <_kill>
 8013b62:	1c43      	adds	r3, r0, #1
 8013b64:	d102      	bne.n	8013b6c <_kill_r+0x1c>
 8013b66:	682b      	ldr	r3, [r5, #0]
 8013b68:	b103      	cbz	r3, 8013b6c <_kill_r+0x1c>
 8013b6a:	6023      	str	r3, [r4, #0]
 8013b6c:	bd38      	pop	{r3, r4, r5, pc}
 8013b6e:	bf00      	nop
 8013b70:	2000314c 	.word	0x2000314c

08013b74 <_getpid_r>:
 8013b74:	f7f0 bace 	b.w	8004114 <_getpid>

08013b78 <_init>:
 8013b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b7a:	bf00      	nop
 8013b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b7e:	bc08      	pop	{r3}
 8013b80:	469e      	mov	lr, r3
 8013b82:	4770      	bx	lr

08013b84 <_fini>:
 8013b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b86:	bf00      	nop
 8013b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b8a:	bc08      	pop	{r3}
 8013b8c:	469e      	mov	lr, r3
 8013b8e:	4770      	bx	lr
