
LFDI Tuning Control Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000112c  08014270  08014270  00024270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801539c  0801539c  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801539c  0801539c  0002539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080153a4  080153a4  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080153a4  080153a4  000253a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080153a8  080153a8  000253a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  080153ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302e4  2**0
                  CONTENTS
 10 .bss          00002ef8  200002e8  200002e8  000302e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200031e0  200031e0  000302e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002112c  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dfe  00000000  00000000  00051440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af8  00000000  00000000  00056240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018c8  00000000  00000000  00057d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b363  00000000  00000000  00059600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000240e5  00000000  00000000  00084963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed65e  00000000  00000000  000a8a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001960a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000089d0  00000000  00000000  001960f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014258 	.word	0x08014258

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	08014258 	.word	0x08014258

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <DAC_InitStruct>:
//Max Voltage peak to peak
float REFERENCE_VOLTAGE = 3;


//
void DAC_InitStruct(struct sDAC* s, SPI_HandleTypeDef* hspi){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	
	s->spi = hspi;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	601a      	str	r2, [r3, #0]
	Set_Config(s);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f831 	bl	80010b0 <Set_Config>
	Set_Max_Peak_To_Peak_Voltage(s, 0);
 800104e:	2100      	movs	r1, #0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f999 	bl	8001388 <Set_Max_Peak_To_Peak_Voltage>
	/* USER CODE BEGIN 1 */
	//Set all DAC Channels Up. Should probably be put into TCB init
	for (int i = 0; i < 6; i++){
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e021      	b.n	80010a0 <DAC_InitStruct+0x68>
		s->DAC_Channels[i].DAC_number = i;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3302      	adds	r3, #2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	460a      	mov	r2, r1
 800106c:	721a      	strb	r2, [r3, #8]
		s->DAC_Channels[i].upper_bound = 0xFFFF;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3302      	adds	r3, #2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	809a      	strh	r2, [r3, #4]
		s->DAC_Channels[i].lower_bound = 0x0000;
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3302      	adds	r3, #2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	80da      	strh	r2, [r3, #6]
		s->DAC_Channels[i].enabled = true;
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3302      	adds	r3, #2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	2201      	movs	r2, #1
 8001098:	729a      	strb	r2, [r3, #10]
	for (int i = 0; i < 6; i++){
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	ddda      	ble.n	800105c <DAC_InitStruct+0x24>
	}

}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <Set_Config>:
//@brief: This function will set a configuration value to the configuration register
//@param s: The DAC struct to use
//@return: None
void Set_Config(struct sDAC* s){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	uint8_t Data[3] = {0x00, 0x00, 0x00};
 80010b8:	4a30      	ldr	r2, [pc, #192]	; (800117c <Set_Config+0xcc>)
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	4611      	mov	r1, r2
 80010c2:	8019      	strh	r1, [r3, #0]
 80010c4:	3302      	adds	r3, #2
 80010c6:	0c12      	lsrs	r2, r2, #16
 80010c8:	701a      	strb	r2, [r3, #0]
	uint8_t read_command[3] = {READ|CONFIG, 0x00, 0x00};
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <Set_Config+0xd0>)
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <Set_Config+0xd4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	743b      	strb	r3, [r7, #16]
 80010d8:	2300      	movs	r3, #0
 80010da:	747b      	strb	r3, [r7, #17]
 80010dc:	2300      	movs	r3, #0
 80010de:	74bb      	strb	r3, [r7, #18]
	
	Hardware_Reset(s);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f923 	bl	800132c <Hardware_Reset>
	//Make sure SCE is 0. This will make it so that the DAC will use the Values direclty written to it
	//rather than trying to use the individual offset and gain of each register to re-adjust
	//the value
	//Gain_A = 1 -> gain is set to 4xVref GAIN_A = 0 -> gain is set to 6xVref
	
	uint8_t tx_data[3] = {WRITE|CONFIG, AB, 0x00};
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <Set_Config+0xd8>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <Set_Config+0xd4>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	733b      	strb	r3, [r7, #12]
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <Set_Config+0xdc>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	737b      	strb	r3, [r7, #13]
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f843 	bl	8001190 <Send_Command>
	Send_Command(s, read_command);
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f83d 	bl	8001190 <Send_Command>
	Recieve_Data(s, Data);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f85b 	bl	80011d8 <Recieve_Data>
	
	//if Data is the same as tx_data then the command was successful
	if(Data[1] == tx_data[1] && Data[2] == tx_data[2]){
 8001122:	7d7a      	ldrb	r2, [r7, #21]
 8001124:	7b7b      	ldrb	r3, [r7, #13]
 8001126:	429a      	cmp	r2, r3
 8001128:	d117      	bne.n	800115a <Set_Config+0xaa>
 800112a:	7dba      	ldrb	r2, [r7, #22]
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	429a      	cmp	r2, r3
 8001130:	d113      	bne.n	800115a <Set_Config+0xaa>
		s->config = (Data[1] << 8) | Data[2];
 8001132:	7d7b      	ldrb	r3, [r7, #21]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	7dbb      	ldrb	r3, [r7, #22]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21b      	sxth	r3, r3
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	809a      	strh	r2, [r3, #4]
		s->Configured = true;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	729a      	strb	r2, [r3, #10]
		s->State = DAC_STATE_OK;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2204      	movs	r2, #4
 8001150:	72da      	strb	r2, [r3, #11]
		s->Ready = true;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	731a      	strb	r2, [r3, #12]
 8001158:	e00c      	b.n	8001174 <Set_Config+0xc4>
	}else{
		s->State = DAC_STATE_INITFAILED;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	72da      	strb	r2, [r3, #11]
		s->Ready = false;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	731a      	strb	r2, [r3, #12]
		s->Errors++;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	89db      	ldrh	r3, [r3, #14]
 800116a:	3301      	adds	r3, #1
 800116c:	b29a      	uxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	81da      	strh	r2, [r3, #14]
	}
			

}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	08014270 	.word	0x08014270
 8001180:	20000000 	.word	0x20000000
 8001184:	20000305 	.word	0x20000305
 8001188:	20000304 	.word	0x20000304
 800118c:	20000002 	.word	0x20000002

08001190 <Send_Command>:
//        The second byte is the MSB of the register
//        The third byte is the LSB of the register
//@param: spi: The spi handle to use
//@param: command: The command to send
//@return: none
void Send_Command(struct sDAC* s, uint8_t* Command){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f8aa 	bl	80012f4 <Set_nCS_high>
	hal_status = HAL_SPI_Transmit(s->spi, Command, 3, 1);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	f008 fc1a 	bl	80099e2 <HAL_SPI_Transmit>
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
	while (!(s->spi->Instance->SR & SPI_SR_TXE));
 80011b2:	bf00      	nop
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f7      	beq.n	80011b4 <Send_Command+0x24>
	Set_nCS_high(true);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 f895 	bl	80012f4 <Set_nCS_high>
	Delay_us(10);
 80011ca:	200a      	movs	r0, #10
 80011cc:	f001 ff36 	bl	800303c <Delay_us>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <Recieve_Data>:

//@brief: This function recieves data from the DAC and stores it in the data array
//@param: spi: The spi handle
//@param: Data: buffer to store the data in
//@return: None
void Recieve_Data(struct sDAC* s, uint8_t* Data){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af02      	add	r7, sp, #8
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f886 	bl	80012f4 <Set_nCS_high>
	hal_status = HAL_SPI_TransmitReceive(s->spi,NOP_Send, Data, 3, 100);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2303      	movs	r3, #3
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	490b      	ldr	r1, [pc, #44]	; (8001224 <Recieve_Data+0x4c>)
 80011f6:	f008 fd30 	bl	8009c5a <HAL_SPI_TransmitReceive>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
	while ((s->spi->Instance->SR & SPI_SR_RXNE));
 80011fe:	bf00      	nop
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f7      	bne.n	8001200 <Recieve_Data+0x28>
	Set_nCS_high(true);
 8001210:	2001      	movs	r0, #1
 8001212:	f000 f86f 	bl	80012f4 <Set_nCS_high>
	Delay_us(10);
 8001216:	200a      	movs	r0, #10
 8001218:	f001 ff10 	bl	800303c <Delay_us>

}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000004 	.word	0x20000004

08001228 <Set_DAC_Value>:
//@brief: This function sets the value of the given dac
//@param: DAC_Num: The DAC number to set the offset of
//@param: val: The value to set the dac to
//@param spi: The spi handle to use
//@return: None
void Set_DAC_Value(struct sDAC* s, uint8_t DAC_Num, uint16_t val){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
 8001234:	4613      	mov	r3, r2
 8001236:	803b      	strh	r3, [r7, #0]
	//Make sure DAC is between 0 and 7
	if(DAC_Num > 7){
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	2b07      	cmp	r3, #7
 800123c:	d819      	bhi.n	8001272 <Set_DAC_Value+0x4a>
		return;
	}
	uint8_t DAC_REG = Set_DAC0+DAC_Num;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <Set_DAC_Value+0x54>)
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	4413      	add	r3, r2
 8001246:	73fb      	strb	r3, [r7, #15]
	//Set the DAC to the correct value by adding the DAC number to the Set_DAC0 command
	uint8_t tx_data[3] = {WRITE|DAC_REG, (val >> 8), (val & 0xFF)};
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <Set_DAC_Value+0x58>)
 800124a:	781a      	ldrb	r2, [r3, #0]
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	4313      	orrs	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	733b      	strb	r3, [r7, #12]
 8001254:	883b      	ldrh	r3, [r7, #0]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	b29b      	uxth	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	737b      	strb	r3, [r7, #13]
 800125e:	883b      	ldrh	r3, [r7, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4619      	mov	r1, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff90 	bl	8001190 <Send_Command>
 8001270:	e000      	b.n	8001274 <Set_DAC_Value+0x4c>
		return;
 8001272:	bf00      	nop
	
}
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000001 	.word	0x20000001
 8001280:	20000304 	.word	0x20000304

08001284 <Set_nLDAC_high>:
}

//@brief: This function sets the nLDAC pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nLDAC_high(bool HIGH){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <Set_nLDAC_high+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <Set_nLDAC_high+0x34>)
 800129c:	f003 ff12 	bl	80050c4 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
	}
}
 80012a0:	e005      	b.n	80012ae <Set_nLDAC_high+0x2a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <Set_nLDAC_high+0x34>)
 80012aa:	f003 ff0b 	bl	80050c4 <HAL_GPIO_WritePin>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020c00 	.word	0x40020c00

080012bc <Set_nRST_high>:
}

//@brief: This function sets the nRST pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nRST_high(bool HIGH){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <Set_nRST_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <Set_nRST_high+0x34>)
 80012d4:	f003 fef6 	bl	80050c4 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
	}

}
 80012d8:	e005      	b.n	80012e6 <Set_nRST_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <Set_nRST_high+0x34>)
 80012e2:	f003 feef 	bl	80050c4 <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <Set_nCS_high>:
}

//@brief: This function sets the nCS pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nCS_high(bool HIGH){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <Set_nCS_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130a:	4807      	ldr	r0, [pc, #28]	; (8001328 <Set_nCS_high+0x34>)
 800130c:	f003 feda 	bl	80050c4 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
	}

}
 8001310:	e005      	b.n	800131e <Set_nCS_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <Set_nCS_high+0x34>)
 800131a:	f003 fed3 	bl	80050c4 <HAL_GPIO_WritePin>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000

0800132c <Hardware_Reset>:
	return state;
}


//Reset the DAC Values using the nRST Pin
void Hardware_Reset(struct sDAC* s){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	Set_nRST_high(false);
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ffc1 	bl	80012bc <Set_nRST_high>
	Delay_us(10);
 800133a:	200a      	movs	r0, #10
 800133c:	f001 fe7e 	bl	800303c <Delay_us>
	Set_nRST_high(true);
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff ffbb 	bl	80012bc <Set_nRST_high>
	Delay_us(10);
 8001346:	200a      	movs	r0, #10
 8001348:	f001 fe78 	bl	800303c <Delay_us>
	s->State = DAC_STATE_UNKNOWN;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	72da      	strb	r2, [r3, #11]
	s->Ready= false;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	731a      	strb	r2, [r3, #12]
	s->Errors = 0;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	81da      	strh	r2, [r3, #14]
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <Syncronous_Update>:


//Syncronous Update of LDAC using the nLDAC Pin NOTE: Only Needed if nLDAC is tied High
void Syncronous_Update(void){
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
	Set_nLDAC_high(false);
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff ff8a 	bl	8001284 <Set_nLDAC_high>
	Delay_us(10);
 8001370:	200a      	movs	r0, #10
 8001372:	f001 fe63 	bl	800303c <Delay_us>
	Set_nLDAC_high(true);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ff84 	bl	8001284 <Set_nLDAC_high>
	Delay_us(10);
 800137c:	200a      	movs	r0, #10
 800137e:	f001 fe5d 	bl	800303c <Delay_us>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <Set_Max_Peak_To_Peak_Voltage>:


//@brief: This function calculates the max peak to peak voltage that can be achieved
void Set_Max_Peak_To_Peak_Voltage(struct sDAC* s, bool Gain){
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
	//The max Voltage is 11.2V so we need to scale the voltage to fit in 16 bits
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	if(Gain){
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00a      	beq.n	80013b0 <Set_Max_Peak_To_Peak_Voltage+0x28>
		s->max_peak2peak = REFERENCE_VOLTAGE*4;
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80013a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edc3 7a04 	vstr	s15, [r3, #16]
	}else
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
	return;
 80013ae:	e00a      	b.n	80013c6 <Set_Max_Peak_To_Peak_Voltage+0x3e>
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	edc3 7a04 	vstr	s15, [r3, #16]
	return;
 80013c4:	bf00      	nop
}
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20000008 	.word	0x20000008

080013d4 <Set_Voltage_Peak_to_Peak>:

//@brief: This function sets the upper and lower bounds of a DAC Channel
//@param: s: The DAC Channel to set the bounds of
//@param: voltage: The voltage to set the bounds to
void Set_Voltage_Peak_to_Peak(struct sDAC* sDAC, uint8_t Channel_Number, float* voltage){
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	460b      	mov	r3, r1
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	72fb      	strb	r3, [r7, #11]
	//The max Voltage Peak to Peak is 22.4V so we need to scale the voltage to fit in 16 bits
	//Find the upper and lower bounds of the voltage with Zero Bias
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	float percentage = (*voltage/(float)sDAC->max_peak2peak)/2;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edd3 6a00 	vldr	s13, [r3]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80013ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fa:	edc7 7a05 	vstr	s15, [r7, #20]
	sDAC->DAC_Channels[Channel_Number].upper_bound = 0xFFFF/2 + percentage*0xFFFF;
 80013fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001402:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001464 <Set_Voltage_Peak_to_Peak+0x90>
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001468 <Set_Voltage_Peak_to_Peak+0x94>
 800140e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001412:	7afb      	ldrb	r3, [r7, #11]
 8001414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001418:	ee17 2a90 	vmov	r2, s15
 800141c:	b291      	uxth	r1, r2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	3302      	adds	r3, #2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	460a      	mov	r2, r1
 8001428:	809a      	strh	r2, [r3, #4]
	sDAC->DAC_Channels[Channel_Number].lower_bound = 0xFFFF/2 - percentage*0xFFFF;
 800142a:	edd7 7a05 	vldr	s15, [r7, #20]
 800142e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001464 <Set_Voltage_Peak_to_Peak+0x90>
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001468 <Set_Voltage_Peak_to_Peak+0x94>
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	7afb      	ldrb	r3, [r7, #11]
 8001440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001444:	ee17 2a90 	vmov	r2, s15
 8001448:	b291      	uxth	r1, r2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	3302      	adds	r3, #2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	460a      	mov	r2, r1
 8001454:	80da      	strh	r2, [r3, #6]
	return;
 8001456:	bf00      	nop

}
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	477fff00 	.word	0x477fff00
 8001468:	46fffe00 	.word	0x46fffe00

0800146c <PID_InitStruct>:
 */

#include "pid.h"

void PID_InitStruct(struct sPID* s)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->Config.Kp = 0.0f;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
  s->Config.Ki = 0.0f;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
  s->Config.Kd = 0.0f;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
  s->Config.Li = 1.0f;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800149e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014a2:	601a      	str	r2, [r3, #0]
  s->Config.TargetP = -273.0f;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80014aa:	4a22      	ldr	r2, [pc, #136]	; (8001534 <PID_InitStruct+0xc8>)
 80014ac:	601a      	str	r2, [r3, #0]
  s->Config.Enabled = false;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
  s->Config.History = 16;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2210      	movs	r2, #16
 80014ba:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
  s->DeltaT = 0.013f;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <PID_InitStruct+0xcc>)
 80014c6:	601a      	str	r2, [r3, #0]
  s->IntegratorCount = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  for (i=0;i<255;i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e009      	b.n	80014ea <PID_InitStruct+0x7e>
    s->LastP[i]=0.0f;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
  for (i=0;i<255;i++)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	3301      	adds	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	2bff      	cmp	r3, #255	; 0xff
 80014ee:	d1f2      	bne.n	80014d6 <PID_InitStruct+0x6a>
  s->Effort = 0.0f;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
  s->Ep = 0.0f;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
  s->Ei = 0.0f;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
  s->Ed = 0.0f;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
  s->Config.Frequency = 200;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	22c8      	movs	r2, #200	; 0xc8
 8001524:	f8a3 242e 	strh.w	r2, [r3, #1070]	; 0x42e
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	c3888000 	.word	0xc3888000
 8001538:	3c54fdf4 	.word	0x3c54fdf4

0800153c <PID_SavePoint>:

void PID_SavePoint(struct sPID* s, float p)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	ed87 0a00 	vstr	s0, [r7]
  uint8_t i;
  for (i=(s->Config.History-1); i>0; i--)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 800154e:	3b01      	subs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e00d      	b.n	8001570 <PID_SavePoint+0x34>
    s->LastP[i] = s->LastP[i-1];
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	1e5a      	subs	r2, r3, #1
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	440a      	add	r2, r1
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	601a      	str	r2, [r3, #0]
  for (i=(s->Config.History-1); i>0; i--)
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	3b01      	subs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ee      	bne.n	8001554 <PID_SavePoint+0x18>
  s->LastP[0] = p;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	601a      	str	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <PID_SumError>:

float PID_SumError(struct sPID* s)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->IntegratorCount++;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8001596:	3301      	adds	r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  if (s->IntegratorCount < s->Config.History)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d202      	bcs.n	80015b6 <PID_SumError+0x2e>
    return 0;
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e05b      	b.n	800166e <PID_SumError+0xe6>
  else
    s->IntegratorCount = s->Config.History;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 242d 	ldrb.w	r2, [r3, #1069]	; 0x42d
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  float err = 0;
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e015      	b.n	80015fa <PID_SumError+0x72>
    err += (s->Config.TargetP - s->LastP[i]);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80015d4:	ed93 7a00 	vldr	s14, [r3]
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	edc7 7a02 	vstr	s15, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	3301      	adds	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3e3      	bcc.n	80015ce <PID_SumError+0x46>
  err *= (s->Config.Ki);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ed97 7a02 	vldr	s14, [r7, #8]
 8001614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001618:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err < (-s->Config.Li))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	eef1 7a67 	vneg.f32	s15, s15
 800162a:	ed97 7a02 	vldr	s14, [r7, #8]
 800162e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	d508      	bpl.n	800164a <PID_SumError+0xc2>
    err = -(s->Config.Li);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	eef1 7a67 	vneg.f32	s15, s15
 8001646:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err > s->Config.Li)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ed97 7a02 	vldr	s14, [r7, #8]
 8001658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	dd04      	ble.n	800166c <PID_SumError+0xe4>
    err = s->Config.Li;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	60bb      	str	r3, [r7, #8]
  return err;
 800166c:	68bb      	ldr	r3, [r7, #8]
}
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eeb0 0a67 	vmov.f32	s0, s15
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <PID_Velocity>:


float PID_Velocity(struct sPID* s)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint8_t periods = 4;
 8001688:	2304      	movs	r3, #4
 800168a:	73fb      	strb	r3, [r7, #15]
  if (s->IntegratorCount > periods)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	429a      	cmp	r2, r3
 8001696:	d219      	bcs.n	80016cc <PID_Velocity+0x4c>
    return (s->LastP[0]-s->LastP[periods])/(s->DeltaT*periods);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	ed93 7a00 	vldr	s14, [r3]
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b4:	edd3 6a00 	vldr	s13, [r3]
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016ca:	e001      	b.n	80016d0 <PID_Velocity+0x50>
  else
    return 0;
 80016cc:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016e4 <PID_Velocity+0x64>
}
 80016d0:	eef0 7a66 	vmov.f32	s15, s13
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	00000000 	.word	0x00000000

080016e8 <PID_CalculateEffort>:

// calculate the error and return a value between 0 and 1
float PID_CalculateEffort(struct sPID* s, float p)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	ed87 0a00 	vstr	s0, [r7]
  float eff;
  if ((s->Config.Enabled == false) ||
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 342c 	ldrb.w	r3, [r3, #1068]	; 0x42c
 80016fa:	f083 0301 	eor.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d115      	bne.n	8001730 <PID_CalculateEffort+0x48>
      (s->Config.TargetP < -200) ||
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800170a:	edd3 7a00 	vldr	s15, [r3]
  if ((s->Config.Enabled == false) ||
 800170e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001844 <PID_CalculateEffort+0x15c>
 8001712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	d409      	bmi.n	8001730 <PID_CalculateEffort+0x48>
      (s->DeltaT == 0))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001722:	edd3 7a00 	vldr	s15, [r3]
      (s->Config.TargetP < -200) ||
 8001726:	eef5 7a40 	vcmp.f32	s15, #0.0
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	d117      	bne.n	8001760 <PID_CalculateEffort+0x78>
  {
    s->Ep = -1;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001736:	4a44      	ldr	r2, [pc, #272]	; (8001848 <PID_CalculateEffort+0x160>)
 8001738:	601a      	str	r2, [r3, #0]
    s->Ed = -1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001740:	4a41      	ldr	r2, [pc, #260]	; (8001848 <PID_CalculateEffort+0x160>)
 8001742:	601a      	str	r2, [r3, #0]
    s->Ei = -1;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800174a:	4a3f      	ldr	r2, [pc, #252]	; (8001848 <PID_CalculateEffort+0x160>)
 800174c:	601a      	str	r2, [r3, #0]
    s->Effort = 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
    return 0;
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e069      	b.n	8001834 <PID_CalculateEffort+0x14c>
  }
  s->Ep = (s->Config.TargetP - p) * (s->Config.Kp);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8001766:	ed93 7a00 	vldr	s14, [r3]
 800176a:	edd7 7a00 	vldr	s15, [r7]
 800176e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001786:	edc3 7a00 	vstr	s15, [r3]
  s->Ed = (0 - PID_Velocity(s)) * (s->Config.Kd);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff78 	bl	8001680 <PID_Velocity>
 8001790:	eef0 7a40 	vmov.f32	s15, s0
 8001794:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800184c <PID_CalculateEffort+0x164>
 8001798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017b0:	edc3 7a00 	vstr	s15, [r3]
  s->Ei = PID_SumError(s);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fee7 	bl	8001588 <PID_SumError>
 80017ba:	eef0 7a40 	vmov.f32	s15, s0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017c4:	edc3 7a00 	vstr	s15, [r3]
  eff = s->Ep + s->Ed + s->Ei;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80017ce:	ed93 7a00 	vldr	s14, [r3]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (eff > 1)
 80017f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	dd02      	ble.n	800180a <PID_CalculateEffort+0x122>
    eff = 1;
 8001804:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001808:	60fb      	str	r3, [r7, #12]
  if (eff < 0)
 800180a:	edd7 7a03 	vldr	s15, [r7, #12]
 800180e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	d502      	bpl.n	800181e <PID_CalculateEffort+0x136>
    eff = 0;
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  PID_SavePoint(s, p);
 800181e:	ed97 0a00 	vldr	s0, [r7]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fe8a 	bl	800153c <PID_SavePoint>
  s->Effort = eff;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	601a      	str	r2, [r3, #0]
  return eff;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	c3480000 	.word	0xc3480000
 8001848:	bf800000 	.word	0xbf800000
 800184c:	00000000 	.word	0x00000000

08001850 <TMP117_InitStruct>:
//@param s Pointer to the structure to initialize
//@param interface Pointer to the I2C interface to use
//@param addpin Value of the address pin
//@return None
void TMP117_InitStruct(struct sTMP117* s, I2C_HandleTypeDef* interface, uint8_t addpin)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	4613      	mov	r3, r2
 800185c:	71fb      	strb	r3, [r7, #7]
   * 0x01 V+
   * 0x10 SDA
   * 0x11 SCL
   */
  uint8_t i;
  s->Address = 0b1001000 | addpin;
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8001864:	b2da      	uxtb	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	701a      	strb	r2, [r3, #0]
  s->Interface = interface;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	605a      	str	r2, [r3, #4]
  s->Average = -273;
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	a31f      	add	r3, pc, #124	; (adr r3, 80018f0 <TMP117_InitStruct+0xa0>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
  s->Configured = false;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
  s->SamplesInAverage = 16;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2210      	movs	r2, #16
 8001888:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
  s->Index = 0;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  s->State = TMP117_STATE_UNKNOWN;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  for (i=0;i<64;i++)
 800189c:	2300      	movs	r3, #0
 800189e:	75fb      	strb	r3, [r7, #23]
 80018a0:	e00c      	b.n	80018bc <TMP117_InitStruct+0x6c>
    s->Temperature[i] = -273;
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	18d1      	adds	r1, r2, r3
 80018ac:	a310      	add	r3, pc, #64	; (adr r3, 80018f0 <TMP117_InitStruct+0xa0>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	e9c1 2300 	strd	r2, r3, [r1]
  for (i=0;i<64;i++)
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	3301      	adds	r3, #1
 80018ba:	75fb      	strb	r3, [r7, #23]
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	2b3f      	cmp	r3, #63	; 0x3f
 80018c0:	d9ef      	bls.n	80018a2 <TMP117_InitStruct+0x52>
  s->LastTemperature = -273;
 80018c2:	68f9      	ldr	r1, [r7, #12]
 80018c4:	a30a      	add	r3, pc, #40	; (adr r3, 80018f0 <TMP117_InitStruct+0xa0>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Ready = false;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  s->Errors = 0;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
}
 80018de:	bf00      	nop
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	f3af 8000 	nop.w
 80018f0:	00000000 	.word	0x00000000
 80018f4:	c0711000 	.word	0xc0711000

080018f8 <TMP117_Configure>:

//@brief Configure the TMP117
//@param s Pointer to the structure to configure
//@return None
void TMP117_Configure(struct sTMP117* s)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef res;
  printf("Attempting to init... ");
 8001900:	481c      	ldr	r0, [pc, #112]	; (8001974 <TMP117_Configure+0x7c>)
 8001902:	f00e f9c7 	bl	800fc94 <iprintf>
  uint8_t buffer[3] = {0};
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <TMP117_Configure+0x80>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	81bb      	strh	r3, [r7, #12]
 800190c:	2300      	movs	r3, #0
 800190e:	73bb      	strb	r3, [r7, #14]
  buffer[0] = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	733b      	strb	r3, [r7, #12]
  buffer[2] = 1 << 5;
 8001914:	2320      	movs	r3, #32
 8001916:	73bb      	strb	r3, [r7, #14]
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 3, 10); // 8 samples averaged
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6858      	ldr	r0, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	b299      	uxth	r1, r3
 8001926:	f107 020c 	add.w	r2, r7, #12
 800192a:	230a      	movs	r3, #10
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2303      	movs	r3, #3
 8001930:	f003 fd26 	bl	8005380 <HAL_I2C_Master_Transmit>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
  if (res == HAL_OK)
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d107      	bne.n	800194e <TMP117_Configure+0x56>
  {
    s->Configured = true;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    printf("OK!\n");
 8001946:	480d      	ldr	r0, [pc, #52]	; (800197c <TMP117_Configure+0x84>)
 8001948:	f00e fa2a 	bl	800fda0 <puts>
  {
    s->Errors++;
    s->State = TMP117_STATE_INITFAILED;
    printf("Failed!\n");
  }
}
 800194c:	e00e      	b.n	800196c <TMP117_Configure+0x74>
    s->Errors++;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001954:	3301      	adds	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    s->State = TMP117_STATE_INITFAILED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    printf("Failed!\n");
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <TMP117_Configure+0x88>)
 8001968:	f00e fa1a 	bl	800fda0 <puts>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	08014298 	.word	0x08014298
 8001978:	080142bc 	.word	0x080142bc
 800197c:	080142b0 	.word	0x080142b0
 8001980:	080142b4 	.word	0x080142b4

08001984 <TMP117_GetTemperature>:

//@brief Get the temperature from the TMP117
//@param s Pointer to the structure to get the temperature from
//@return None
void TMP117_GetTemperature(struct sTMP117* s)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af02      	add	r7, sp, #8
 800198a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t u;
  double t = 0;
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9c7 2306 	strd	r2, r3, [r7, #24]
  //setup an empty Buffer to request the temperature
  uint8_t buffer[2] = {0};
 8001998:	2300      	movs	r3, #0
 800199a:	81bb      	strh	r3, [r7, #12]
  uint16_t data = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef res;
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 1, 10); // request temperature
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6858      	ldr	r0, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	b299      	uxth	r1, r3
 80019ae:	f107 020c 	add.w	r2, r7, #12
 80019b2:	230a      	movs	r3, #10
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	f003 fce2 	bl	8005380 <HAL_I2C_Master_Transmit>
 80019bc:	4603      	mov	r3, r0
 80019be:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01a      	beq.n	80019fc <TMP117_GetTemperature+0x78>
  {
    s->State = TMP117_STATE_REQUESTNOACK;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019d4:	3301      	adds	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    //If this temperature sensor gets more than 100 errors in a row, it's probably not connected
    if (s->Errors > 100)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019e4:	2b64      	cmp	r3, #100	; 0x64
 80019e6:	f240 80b3 	bls.w	8001b50 <TMP117_GetTemperature+0x1cc>
    {
      s->Configured = false;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 80019fa:	e0a9      	b.n	8001b50 <TMP117_GetTemperature+0x1cc>
  }

  res = HAL_I2C_Master_Receive(s->Interface, (s->Address << 1), buffer, 2, 10); // receive temperature
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6858      	ldr	r0, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	b299      	uxth	r1, r3
 8001a0a:	f107 020c 	add.w	r2, r7, #12
 8001a0e:	230a      	movs	r3, #10
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2302      	movs	r3, #2
 8001a14:	f003 fdb2 	bl	800557c <HAL_I2C_Master_Receive>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 8001a1c:	7cfb      	ldrb	r3, [r7, #19]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01a      	beq.n	8001a58 <TMP117_GetTemperature+0xd4>
  {
    s->State = TMP117_STATE_RECEIVEFAIL;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a30:	3301      	adds	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    if (s->Errors > 100)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a40:	2b64      	cmp	r3, #100	; 0x64
 8001a42:	f240 8087 	bls.w	8001b54 <TMP117_GetTemperature+0x1d0>
    {
      s->Configured = false;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 8001a56:	e07d      	b.n	8001b54 <TMP117_GetTemperature+0x1d0>
  }

  
  s->State = TMP117_STATE_VALIDTEMP;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  data = (buffer[0] << 8) | buffer[1];
 8001a60:	7b3b      	ldrb	r3, [r7, #12]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	7b7b      	ldrb	r3, [r7, #13]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	817b      	strh	r3, [r7, #10]
  u = *(&(data));
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	823b      	strh	r3, [r7, #16]
  //Conver the Temp as per documentation
  s->Temperature[s->Index] = ((double)u) * 0.0078125;
 8001a76:	8a3b      	ldrh	r3, [r7, #16]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd63 	bl	8000544 <__aeabi_ui2d>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001a84:	461c      	mov	r4, r3
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a8e:	f7fe fdd3 	bl	8000638 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	1c61      	adds	r1, r4, #1
 8001a9a:	00c9      	lsls	r1, r1, #3
 8001a9c:	4401      	add	r1, r0
 8001a9e:	e9c1 2300 	strd	r2, r3, [r1]
  s->LastTemperature = s->Temperature[s->Index];
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4413      	add	r3, r2
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Index++;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  //If we finally have enough Temperatures to average, set the Ready flag
  //if we have engough samples, set the flags
  if (s->Index >= s->SamplesInAverage)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 2211 	ldrb.w	r2, [r3, #529]	; 0x211
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d307      	bcc.n	8001aea <TMP117_GetTemperature+0x166>
  {
    s->Ready = true;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
    s->Index = 0;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  }
  
  //average the Temperatures
  if (s->Ready)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d030      	beq.n	8001b56 <TMP117_GetTemperature+0x1d2>
  {
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e011      	b.n	8001b1e <TMP117_GetTemperature+0x19a>
    {
      t += s->Temperature[i];
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b0c:	f7fe fbde 	bl	80002cc <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b24:	461a      	mov	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	dbe6      	blt.n	8001afa <TMP117_GetTemperature+0x176>
    }
    s->Average = t / s->SamplesInAverage;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd16 	bl	8000564 <__aeabi_i2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b40:	f7fe fea4 	bl	800088c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
 8001b4e:	e002      	b.n	8001b56 <TMP117_GetTemperature+0x1d2>
    return;
 8001b50:	bf00      	nop
 8001b52:	e000      	b.n	8001b56 <TMP117_GetTemperature+0x1d2>
    return;
 8001b54:	bf00      	nop
  }


}
 8001b56:	3724      	adds	r7, #36	; 0x24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}

08001b5c <TCB_InitStruct>:
#include "DAC.h"



//This Will Setup the TCB structer by initiallizing the DAC and the TMP117 and the Controller
void TCB_InitStruct(struct sTuningControlBoard* s, I2C_HandleTypeDef* hi2c, SPI_HandleTypeDef* hspi){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]

    //For each of the Seven Temperature sensors initialize the struct
    for(int i = 0; i < 4; i++){
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e011      	b.n	8001b92 <TCB_InitStruct+0x36>
        TMP117_InitStruct(&s->Sensor[i], hi2c, i);
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f44f 720a 	mov.w	r2, #552	; 0x228
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fe62 	bl	8001850 <TMP117_InitStruct>
    for(int i = 0; i < 4; i++){
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	ddea      	ble.n	8001b6e <TCB_InitStruct+0x12>
    }   
    Controller_InitStruct(&s->Controller,&s->Sensor[0], 0);
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f001 f942 	bl	8002e2c <Controller_InitStruct>
    DAC_InitStruct(&s->DAC8718, hspi);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fa41 	bl	8001038 <DAC_InitStruct>

}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc4:	f3bf 8f4f 	dsb	sy
}
 8001bc8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <__NVIC_SystemReset+0x24>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bd2:	4904      	ldr	r1, [pc, #16]	; (8001be4 <__NVIC_SystemReset+0x24>)
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_SystemReset+0x28>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bda:	f3bf 8f4f 	dsb	sy
}
 8001bde:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <__NVIC_SystemReset+0x20>
 8001be4:	e000ed00 	.word	0xe000ed00
 8001be8:	05fa0004 	.word	0x05fa0004

08001bec <ProcessUserInput>:

//Get the User Input and process it
//@param Controller: pointer to the controller struct
//@param buffer: pointer to the buffer
void ProcessUserInput(struct sController* Controller, uint8_t* buffer)
{
 8001bec:	b5b0      	push	{r4, r5, r7, lr}
 8001bee:	b0ca      	sub	sp, #296	; 0x128
 8001bf0:	af04      	add	r7, sp, #16
 8001bf2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001bf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bfa:	6018      	str	r0, [r3, #0]
 8001bfc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c04:	6019      	str	r1, [r3, #0]
  uint16_t i = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  uint8_t u = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
  char output[250];
  char c;
  float f = 0;
 8001c12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
  for (i=0; buffer[i]; i++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001c26:	e02c      	b.n	8001c82 <ProcessUserInput+0x96>
    buffer[i] = tolower(buffer[i]);
 8001c28:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c2c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001c30:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8001c3e:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <ProcessUserInput+0x70>)
 8001c46:	4413      	add	r3, r2
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d106      	bne.n	8001c60 <ProcessUserInput+0x74>
 8001c52:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001c56:	3320      	adds	r3, #32
 8001c58:	e004      	b.n	8001c64 <ProcessUserInput+0x78>
 8001c5a:	bf00      	nop
 8001c5c:	08014ee0 	.word	0x08014ee0
 8001c60:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001c64:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8001c68:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001c6c:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001c70:	6809      	ldr	r1, [r1, #0]
 8001c72:	440a      	add	r2, r1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	7013      	strb	r3, [r2, #0]
  for (i=0; buffer[i]; i++)
 8001c78:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001c82:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c86:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001c8a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	4413      	add	r3, r2
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1c7      	bne.n	8001c28 <ProcessUserInput+0x3c>
//  printf("String: %s\n", buffer);

  replacestr(buffer, "=", "");
 8001c98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ca0:	4abe      	ldr	r2, [pc, #760]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001ca2:	49bf      	ldr	r1, [pc, #764]	; (8001fa0 <ProcessUserInput+0x3b4>)
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f001 f9ef 	bl	8003088 <replacestr>
  replacestr(buffer, " ", "");
 8001caa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cb2:	4aba      	ldr	r2, [pc, #744]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001cb4:	49bb      	ldr	r1, [pc, #748]	; (8001fa4 <ProcessUserInput+0x3b8>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f001 f9e6 	bl	8003088 <replacestr>
  replacestr(buffer, " ", "");
 8001cbc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cc4:	4ab5      	ldr	r2, [pc, #724]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001cc6:	49b7      	ldr	r1, [pc, #732]	; (8001fa4 <ProcessUserInput+0x3b8>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	f001 f9dd 	bl	8003088 <replacestr>
  replacestr(buffer, " ", "");
 8001cce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cd6:	4ab1      	ldr	r2, [pc, #708]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001cd8:	49b2      	ldr	r1, [pc, #712]	; (8001fa4 <ProcessUserInput+0x3b8>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	f001 f9d4 	bl	8003088 <replacestr>
  replacestr(buffer, " ", "");
 8001ce0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ce4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ce8:	4aac      	ldr	r2, [pc, #688]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001cea:	49ae      	ldr	r1, [pc, #696]	; (8001fa4 <ProcessUserInput+0x3b8>)
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	f001 f9cb 	bl	8003088 <replacestr>
  replacestr(buffer, " ", "");
 8001cf2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cf6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cfa:	4aa8      	ldr	r2, [pc, #672]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001cfc:	49a9      	ldr	r1, [pc, #676]	; (8001fa4 <ProcessUserInput+0x3b8>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	f001 f9c2 	bl	8003088 <replacestr>
  replacestr(buffer, "channel", "c");
 8001d04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d0c:	4aa6      	ldr	r2, [pc, #664]	; (8001fa8 <ProcessUserInput+0x3bc>)
 8001d0e:	49a7      	ldr	r1, [pc, #668]	; (8001fac <ProcessUserInput+0x3c0>)
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	f001 f9b9 	bl	8003088 <replacestr>
//  replacestr(buffer, "controller", "c");
  replacestr(buffer, "chan", "c");
 8001d16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d1a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d1e:	4aa2      	ldr	r2, [pc, #648]	; (8001fa8 <ProcessUserInput+0x3bc>)
 8001d20:	49a3      	ldr	r1, [pc, #652]	; (8001fb0 <ProcessUserInput+0x3c4>)
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	f001 f9b0 	bl	8003088 <replacestr>
//  replacestr(buffer, "con", "c");
  replacestr(buffer, "address", "a");
 8001d28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d30:	4aa0      	ldr	r2, [pc, #640]	; (8001fb4 <ProcessUserInput+0x3c8>)
 8001d32:	49a1      	ldr	r1, [pc, #644]	; (8001fb8 <ProcessUserInput+0x3cc>)
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	f001 f9a7 	bl	8003088 <replacestr>
  replacestr(buffer, "kp", "p");
 8001d3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d42:	4a9e      	ldr	r2, [pc, #632]	; (8001fbc <ProcessUserInput+0x3d0>)
 8001d44:	499e      	ldr	r1, [pc, #632]	; (8001fc0 <ProcessUserInput+0x3d4>)
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	f001 f99e 	bl	8003088 <replacestr>
  replacestr(buffer, "kd", "d");
 8001d4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d54:	4a9b      	ldr	r2, [pc, #620]	; (8001fc4 <ProcessUserInput+0x3d8>)
 8001d56:	499c      	ldr	r1, [pc, #624]	; (8001fc8 <ProcessUserInput+0x3dc>)
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	f001 f995 	bl	8003088 <replacestr>
  replacestr(buffer, "ki", "i");
 8001d5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d62:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d66:	4a99      	ldr	r2, [pc, #612]	; (8001fcc <ProcessUserInput+0x3e0>)
 8001d68:	4999      	ldr	r1, [pc, #612]	; (8001fd0 <ProcessUserInput+0x3e4>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	f001 f98c 	bl	8003088 <replacestr>
  replacestr(buffer, "li", "l");
 8001d70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d78:	4a96      	ldr	r2, [pc, #600]	; (8001fd4 <ProcessUserInput+0x3e8>)
 8001d7a:	4997      	ldr	r1, [pc, #604]	; (8001fd8 <ProcessUserInput+0x3ec>)
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	f001 f983 	bl	8003088 <replacestr>
  replacestr(buffer, "target", "t");
 8001d82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d86:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d8a:	4a94      	ldr	r2, [pc, #592]	; (8001fdc <ProcessUserInput+0x3f0>)
 8001d8c:	4994      	ldr	r1, [pc, #592]	; (8001fe0 <ProcessUserInput+0x3f4>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	f001 f97a 	bl	8003088 <replacestr>
  replacestr(buffer, "temperature", "t");
 8001d94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d9c:	4a8f      	ldr	r2, [pc, #572]	; (8001fdc <ProcessUserInput+0x3f0>)
 8001d9e:	4991      	ldr	r1, [pc, #580]	; (8001fe4 <ProcessUserInput+0x3f8>)
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	f001 f971 	bl	8003088 <replacestr>
  replacestr(buffer, "temp", "t");
 8001da6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001daa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dae:	4a8b      	ldr	r2, [pc, #556]	; (8001fdc <ProcessUserInput+0x3f0>)
 8001db0:	498d      	ldr	r1, [pc, #564]	; (8001fe8 <ProcessUserInput+0x3fc>)
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	f001 f968 	bl	8003088 <replacestr>
  replacestr(buffer, "frequency", "f");
 8001db8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dbc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dc0:	4a8a      	ldr	r2, [pc, #552]	; (8001fec <ProcessUserInput+0x400>)
 8001dc2:	498b      	ldr	r1, [pc, #556]	; (8001ff0 <ProcessUserInput+0x404>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	f001 f95f 	bl	8003088 <replacestr>
  replacestr(buffer, "freq", "f");
 8001dca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dd2:	4a86      	ldr	r2, [pc, #536]	; (8001fec <ProcessUserInput+0x400>)
 8001dd4:	4987      	ldr	r1, [pc, #540]	; (8001ff4 <ProcessUserInput+0x408>)
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	f001 f956 	bl	8003088 <replacestr>
  replacestr(buffer, "enable", "n");
 8001ddc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001de0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001de4:	4a84      	ldr	r2, [pc, #528]	; (8001ff8 <ProcessUserInput+0x40c>)
 8001de6:	4985      	ldr	r1, [pc, #532]	; (8001ffc <ProcessUserInput+0x410>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	f001 f94d 	bl	8003088 <replacestr>
  replacestr(buffer, "disable", "f");
 8001dee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001df2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001df6:	4a7d      	ldr	r2, [pc, #500]	; (8001fec <ProcessUserInput+0x400>)
 8001df8:	4981      	ldr	r1, [pc, #516]	; (8002000 <ProcessUserInput+0x414>)
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	f001 f944 	bl	8003088 <replacestr>
  replacestr(buffer, "save", "s");
 8001e00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e08:	4a7e      	ldr	r2, [pc, #504]	; (8002004 <ProcessUserInput+0x418>)
 8001e0a:	497f      	ldr	r1, [pc, #508]	; (8002008 <ProcessUserInput+0x41c>)
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	f001 f93b 	bl	8003088 <replacestr>
  replacestr(buffer, "load", "l");
 8001e12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e1a:	4a6e      	ldr	r2, [pc, #440]	; (8001fd4 <ProcessUserInput+0x3e8>)
 8001e1c:	497b      	ldr	r1, [pc, #492]	; (800200c <ProcessUserInput+0x420>)
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	f001 f932 	bl	8003088 <replacestr>
  replacestr(buffer, "history", "h");
 8001e24:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e2c:	4a78      	ldr	r2, [pc, #480]	; (8002010 <ProcessUserInput+0x424>)
 8001e2e:	4979      	ldr	r1, [pc, #484]	; (8002014 <ProcessUserInput+0x428>)
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	f001 f929 	bl	8003088 <replacestr>
  replacestr(buffer, "update", "u");
 8001e36:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e3e:	4a76      	ldr	r2, [pc, #472]	; (8002018 <ProcessUserInput+0x42c>)
 8001e40:	4976      	ldr	r1, [pc, #472]	; (800201c <ProcessUserInput+0x430>)
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	f001 f920 	bl	8003088 <replacestr>
  replacestr(buffer, "raw", "r");
 8001e48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e50:	4a73      	ldr	r2, [pc, #460]	; (8002020 <ProcessUserInput+0x434>)
 8001e52:	4974      	ldr	r1, [pc, #464]	; (8002024 <ProcessUserInput+0x438>)
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	f001 f917 	bl	8003088 <replacestr>
  replacestr(buffer, "bounce", "b");
 8001e5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e62:	4a71      	ldr	r2, [pc, #452]	; (8002028 <ProcessUserInput+0x43c>)
 8001e64:	4971      	ldr	r1, [pc, #452]	; (800202c <ProcessUserInput+0x440>)
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	f001 f90e 	bl	8003088 <replacestr>
  replacestr(buffer, "wipe", "w");
 8001e6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e74:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <ProcessUserInput+0x444>)
 8001e76:	496f      	ldr	r1, [pc, #444]	; (8002034 <ProcessUserInput+0x448>)
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	f001 f905 	bl	8003088 <replacestr>

//  printf("New String: %s\n", buffer);

  if ((strcmp((char*) buffer, "?") == 0) || (strcmp((char*) buffer, "help") == 0))
 8001e7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e86:	496c      	ldr	r1, [pc, #432]	; (8002038 <ProcessUserInput+0x44c>)
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	f7fe f9b1 	bl	80001f0 <strcmp>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <ProcessUserInput+0x2be>
 8001e94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e9c:	4967      	ldr	r1, [pc, #412]	; (800203c <ProcessUserInput+0x450>)
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	f7fe f9a6 	bl	80001f0 <strcmp>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d157      	bne.n	8001f5a <ProcessUserInput+0x36e>
  {
    USBSendString("\nLFDI TCB Firmware v1.0\n");
 8001eaa:	4865      	ldr	r0, [pc, #404]	; (8002040 <ProcessUserInput+0x454>)
 8001eac:	f001 f888 	bl	8002fc0 <USBSendString>
    USBSendString("Commands can be upper or lower case. Variables can be set with an equals sign or space or nothing.\n");
 8001eb0:	4864      	ldr	r0, [pc, #400]	; (8002044 <ProcessUserInput+0x458>)
 8001eb2:	f001 f885 	bl	8002fc0 <USBSendString>
    USBSendString("\"channel=1\", \"channel 1\", \"channel1\", \"c1\" are all treated the same.\n");
 8001eb6:	4864      	ldr	r0, [pc, #400]	; (8002048 <ProcessUserInput+0x45c>)
 8001eb8:	f001 f882 	bl	8002fc0 <USBSendString>
    USBSendString("\n");
 8001ebc:	4863      	ldr	r0, [pc, #396]	; (800204c <ProcessUserInput+0x460>)
 8001ebe:	f001 f87f 	bl	8002fc0 <USBSendString>
//    USBSendString("Controller = n  -- chooses which controller to configure\n");
    USBSendString("Channel = n     -- chooses which channel to configure\n");
 8001ec2:	4863      	ldr	r0, [pc, #396]	; (8002050 <ProcessUserInput+0x464>)
 8001ec4:	f001 f87c 	bl	8002fc0 <USBSendString>
    USBSendString("Address = nn    -- sets the address of the temperature sensor (00, 01, 10, or 11)\n");
 8001ec8:	4862      	ldr	r0, [pc, #392]	; (8002054 <ProcessUserInput+0x468>)
 8001eca:	f001 f879 	bl	8002fc0 <USBSendString>
    USBSendString("kP = n.nn       -- sets the proportional gain\n");
 8001ece:	4862      	ldr	r0, [pc, #392]	; (8002058 <ProcessUserInput+0x46c>)
 8001ed0:	f001 f876 	bl	8002fc0 <USBSendString>
    USBSendString("kD = n.nn       -- sets the derivative gain\n");
 8001ed4:	4861      	ldr	r0, [pc, #388]	; (800205c <ProcessUserInput+0x470>)
 8001ed6:	f001 f873 	bl	8002fc0 <USBSendString>
    USBSendString("kI = n.nn       -- sets the integral gain\n");
 8001eda:	4861      	ldr	r0, [pc, #388]	; (8002060 <ProcessUserInput+0x474>)
 8001edc:	f001 f870 	bl	8002fc0 <USBSendString>
    USBSendString("Li = n.nn       -- sets the integral gain limit\n");
 8001ee0:	4860      	ldr	r0, [pc, #384]	; (8002064 <ProcessUserInput+0x478>)
 8001ee2:	f001 f86d 	bl	8002fc0 <USBSendString>
    USBSendString("History = nn    -- sets the number of points used in the integral (1-255)\n");
 8001ee6:	4860      	ldr	r0, [pc, #384]	; (8002068 <ProcessUserInput+0x47c>)
 8001ee8:	f001 f86a 	bl	8002fc0 <USBSendString>
    USBSendString("Target = n      -- sets the target temperature\n");
 8001eec:	485f      	ldr	r0, [pc, #380]	; (800206c <ProcessUserInput+0x480>)
 8001eee:	f001 f867 	bl	8002fc0 <USBSendString>
    USBSendString("Temperature = n -- sets the target temperature\n");
 8001ef2:	485f      	ldr	r0, [pc, #380]	; (8002070 <ProcessUserInput+0x484>)
 8001ef4:	f001 f864 	bl	8002fc0 <USBSendString>
    USBSendString("Freq = n        -- sets the PWM frequency (40 = 1 second)\n");
 8001ef8:	485e      	ldr	r0, [pc, #376]	; (8002074 <ProcessUserInput+0x488>)
 8001efa:	f001 f861 	bl	8002fc0 <USBSendString>
    USBSendString("Enable          -- starts the temperature control loop\n");
 8001efe:	485e      	ldr	r0, [pc, #376]	; (8002078 <ProcessUserInput+0x48c>)
 8001f00:	f001 f85e 	bl	8002fc0 <USBSendString>
    USBSendString("Disable         -- stops the temperature control loop\n");
 8001f04:	485d      	ldr	r0, [pc, #372]	; (800207c <ProcessUserInput+0x490>)
 8001f06:	f001 f85b 	bl	8002fc0 <USBSendString>
    USBSendString("Update          -- shows the status of all of the controllers\n");
 8001f0a:	485d      	ldr	r0, [pc, #372]	; (8002080 <ProcessUserInput+0x494>)
 8001f0c:	f001 f858 	bl	8002fc0 <USBSendString>
    USBSendString("Raw             -- shows an easily parsable version of Update\n");
 8001f10:	485c      	ldr	r0, [pc, #368]	; (8002084 <ProcessUserInput+0x498>)
 8001f12:	f001 f855 	bl	8002fc0 <USBSendString>
    USBSendString("Wipe            -- wipes the existing configuration and load new defaults\n");
 8001f16:	485c      	ldr	r0, [pc, #368]	; (8002088 <ProcessUserInput+0x49c>)
 8001f18:	f001 f852 	bl	8002fc0 <USBSendString>
    USBSendString("Bounce          -- performs a power-cycle / reboot on the system\n");
 8001f1c:	485b      	ldr	r0, [pc, #364]	; (800208c <ProcessUserInput+0x4a0>)
 8001f1e:	f001 f84f 	bl	8002fc0 <USBSendString>
    USBSendString("Load            -- reloads the previously saved values (automatic at power-on)\n");
 8001f22:	485b      	ldr	r0, [pc, #364]	; (8002090 <ProcessUserInput+0x4a4>)
 8001f24:	f001 f84c 	bl	8002fc0 <USBSendString>
    USBSendString("Save            -- saves the currently configured values\n");
 8001f28:	485a      	ldr	r0, [pc, #360]	; (8002094 <ProcessUserInput+0x4a8>)
 8001f2a:	f001 f849 	bl	8002fc0 <USBSendString>
    USBSendString("\n");
 8001f2e:	4847      	ldr	r0, [pc, #284]	; (800204c <ProcessUserInput+0x460>)
 8001f30:	f001 f846 	bl	8002fc0 <USBSendString>
    if (UI_Controller == 9)
 8001f34:	4b58      	ldr	r3, [pc, #352]	; (8002098 <ProcessUserInput+0x4ac>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d104      	bne.n	8001f46 <ProcessUserInput+0x35a>
      USBSendString("No controller selected.\n");
 8001f3c:	4857      	ldr	r0, [pc, #348]	; (800209c <ProcessUserInput+0x4b0>)
 8001f3e:	f001 f83f 	bl	8002fc0 <USBSendString>
      ShowEffort(&TCB.Controller);
      USBSendString("\n");
      */
      ShowAll(Controller, true);
    }
    return;
 8001f42:	f000 bc26 	b.w	8002792 <ProcessUserInput+0xba6>
      ShowAll(Controller, true);
 8001f46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f4e:	2101      	movs	r1, #1
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	f000 fcef 	bl	8002934 <ShowAll>
    return;
 8001f56:	f000 bc1c 	b.w	8002792 <ProcessUserInput+0xba6>
  }

  //Print the Status all the Controllers
  if ((strcmp((char*) buffer, "u") == 0) || (strcmp((char*) buffer, "/") == 0))
 8001f5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f62:	492d      	ldr	r1, [pc, #180]	; (8002018 <ProcessUserInput+0x42c>)
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	f7fe f943 	bl	80001f0 <strcmp>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00b      	beq.n	8001f88 <ProcessUserInput+0x39c>
 8001f70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f78:	4949      	ldr	r1, [pc, #292]	; (80020a0 <ProcessUserInput+0x4b4>)
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	f7fe f938 	bl	80001f0 <strcmp>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 808e 	bne.w	80020a4 <ProcessUserInput+0x4b8>
  {
    ShowAll(Controller, true);
 8001f88:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f90:	2101      	movs	r1, #1
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	f000 fcce 	bl	8002934 <ShowAll>
    return;
 8001f98:	e3fb      	b.n	8002792 <ProcessUserInput+0xba6>
 8001f9a:	bf00      	nop
 8001f9c:	080142c0 	.word	0x080142c0
 8001fa0:	080142c4 	.word	0x080142c4
 8001fa4:	080142c8 	.word	0x080142c8
 8001fa8:	080142cc 	.word	0x080142cc
 8001fac:	080142d0 	.word	0x080142d0
 8001fb0:	080142d8 	.word	0x080142d8
 8001fb4:	080142e0 	.word	0x080142e0
 8001fb8:	080142e4 	.word	0x080142e4
 8001fbc:	080142ec 	.word	0x080142ec
 8001fc0:	080142f0 	.word	0x080142f0
 8001fc4:	080142f4 	.word	0x080142f4
 8001fc8:	080142f8 	.word	0x080142f8
 8001fcc:	080142fc 	.word	0x080142fc
 8001fd0:	08014300 	.word	0x08014300
 8001fd4:	08014304 	.word	0x08014304
 8001fd8:	08014308 	.word	0x08014308
 8001fdc:	0801430c 	.word	0x0801430c
 8001fe0:	08014310 	.word	0x08014310
 8001fe4:	08014318 	.word	0x08014318
 8001fe8:	08014324 	.word	0x08014324
 8001fec:	0801432c 	.word	0x0801432c
 8001ff0:	08014330 	.word	0x08014330
 8001ff4:	0801433c 	.word	0x0801433c
 8001ff8:	08014344 	.word	0x08014344
 8001ffc:	08014348 	.word	0x08014348
 8002000:	08014350 	.word	0x08014350
 8002004:	08014358 	.word	0x08014358
 8002008:	0801435c 	.word	0x0801435c
 800200c:	08014364 	.word	0x08014364
 8002010:	0801436c 	.word	0x0801436c
 8002014:	08014370 	.word	0x08014370
 8002018:	08014378 	.word	0x08014378
 800201c:	0801437c 	.word	0x0801437c
 8002020:	08014384 	.word	0x08014384
 8002024:	08014388 	.word	0x08014388
 8002028:	0801438c 	.word	0x0801438c
 800202c:	08014390 	.word	0x08014390
 8002030:	08014398 	.word	0x08014398
 8002034:	0801439c 	.word	0x0801439c
 8002038:	080143a4 	.word	0x080143a4
 800203c:	080143a8 	.word	0x080143a8
 8002040:	080143b0 	.word	0x080143b0
 8002044:	080143cc 	.word	0x080143cc
 8002048:	08014430 	.word	0x08014430
 800204c:	08014478 	.word	0x08014478
 8002050:	0801447c 	.word	0x0801447c
 8002054:	080144b4 	.word	0x080144b4
 8002058:	08014508 	.word	0x08014508
 800205c:	08014538 	.word	0x08014538
 8002060:	08014568 	.word	0x08014568
 8002064:	08014594 	.word	0x08014594
 8002068:	080145c8 	.word	0x080145c8
 800206c:	08014614 	.word	0x08014614
 8002070:	08014644 	.word	0x08014644
 8002074:	08014674 	.word	0x08014674
 8002078:	080146b0 	.word	0x080146b0
 800207c:	080146e8 	.word	0x080146e8
 8002080:	08014720 	.word	0x08014720
 8002084:	08014760 	.word	0x08014760
 8002088:	080147a0 	.word	0x080147a0
 800208c:	080147ec 	.word	0x080147ec
 8002090:	08014830 	.word	0x08014830
 8002094:	08014880 	.word	0x08014880
 8002098:	2000000c 	.word	0x2000000c
 800209c:	080148bc 	.word	0x080148bc
 80020a0:	080148d8 	.word	0x080148d8
  }
  //Print the Status all the Controllers in non readable format
  if (strcmp((char*) buffer, "r") == 0)
 80020a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020ac:	49c5      	ldr	r1, [pc, #788]	; (80023c4 <ProcessUserInput+0x7d8>)
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	f7fe f89e 	bl	80001f0 <strcmp>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d108      	bne.n	80020cc <ProcessUserInput+0x4e0>
  {
    ShowAll(Controller, false);
 80020ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020c2:	2100      	movs	r1, #0
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	f000 fc35 	bl	8002934 <ShowAll>
    return;
 80020ca:	e362      	b.n	8002792 <ProcessUserInput+0xba6>
  }
  //Save the Configuration of a controller
  if (strcmp((char*) buffer, "s") == 0)
 80020cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020d4:	49bc      	ldr	r1, [pc, #752]	; (80023c8 <ProcessUserInput+0x7dc>)
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	f7fe f88a 	bl	80001f0 <strcmp>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d103      	bne.n	80020ea <ProcessUserInput+0x4fe>
  {

    USBSendString("Cannot Save, No EEPROM.\n");
 80020e2:	48ba      	ldr	r0, [pc, #744]	; (80023cc <ProcessUserInput+0x7e0>)
 80020e4:	f000 ff6c 	bl	8002fc0 <USBSendString>
    return;
 80020e8:	e353      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if (strcmp((char*) buffer, "l") == 0)
 80020ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020ee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020f2:	49b7      	ldr	r1, [pc, #732]	; (80023d0 <ProcessUserInput+0x7e4>)
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	f7fe f87b 	bl	80001f0 <strcmp>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d103      	bne.n	8002108 <ProcessUserInput+0x51c>
  {
    USBSendString("Cannot load Configuration, No EEPROM.\n");
 8002100:	48b4      	ldr	r0, [pc, #720]	; (80023d4 <ProcessUserInput+0x7e8>)
 8002102:	f000 ff5d 	bl	8002fc0 <USBSendString>
    return;
 8002106:	e344      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if (strcmp((char*) buffer, "b") == 0)
 8002108:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800210c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002110:	49b1      	ldr	r1, [pc, #708]	; (80023d8 <ProcessUserInput+0x7ec>)
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	f7fe f86c 	bl	80001f0 <strcmp>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <ProcessUserInput+0x536>
  {
    NVIC_SystemReset();
 800211e:	f7ff fd4f 	bl	8001bc0 <__NVIC_SystemReset>
  }

  if (strcmp((char*) buffer, "w") == 0)
 8002122:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002126:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800212a:	49ac      	ldr	r1, [pc, #688]	; (80023dc <ProcessUserInput+0x7f0>)
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	f7fe f85f 	bl	80001f0 <strcmp>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <ProcessUserInput+0x562>
  {
    Controller_WipeConfig(Controller);
 8002138:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800213c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	f000 fedf 	bl	8002f04 <Controller_WipeConfig>
    USBSendString("Configuration wiped.\n");
 8002146:	48a6      	ldr	r0, [pc, #664]	; (80023e0 <ProcessUserInput+0x7f4>)
 8002148:	f000 ff3a 	bl	8002fc0 <USBSendString>
    return;
 800214c:	e321      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if ((strcmp((char*) buffer, "1") == 0) || (strcmp((char*) buffer, "c1") == 0))
 800214e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002152:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002156:	49a3      	ldr	r1, [pc, #652]	; (80023e4 <ProcessUserInput+0x7f8>)
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	f7fe f849 	bl	80001f0 <strcmp>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <ProcessUserInput+0x58e>
 8002164:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002168:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800216c:	499e      	ldr	r1, [pc, #632]	; (80023e8 <ProcessUserInput+0x7fc>)
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	f7fe f83e 	bl	80001f0 <strcmp>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10a      	bne.n	8002190 <ProcessUserInput+0x5a4>
  {
    UI_Controller = 0;
 800217a:	4b9c      	ldr	r3, [pc, #624]	; (80023ec <ProcessUserInput+0x800>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 8002180:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002184:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	f000 fb09 	bl	80027a0 <ShowControllerConfig>
    return;
 800218e:	e300      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if ((strcmp((char*) buffer, "2") == 0) || (strcmp((char*) buffer, "c2") == 0))
 8002190:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002194:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002198:	4995      	ldr	r1, [pc, #596]	; (80023f0 <ProcessUserInput+0x804>)
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	f7fe f828 	bl	80001f0 <strcmp>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <ProcessUserInput+0x5d0>
 80021a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ae:	4991      	ldr	r1, [pc, #580]	; (80023f4 <ProcessUserInput+0x808>)
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	f7fe f81d 	bl	80001f0 <strcmp>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <ProcessUserInput+0x5e6>
  {
    UI_Controller = 1;
 80021bc:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <ProcessUserInput+0x800>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 80021c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	f000 fae8 	bl	80027a0 <ShowControllerConfig>
    return;
 80021d0:	e2df      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if ((strcmp((char*) buffer, "3") == 0) || (strcmp((char*) buffer, "c3") == 0))
 80021d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021da:	4987      	ldr	r1, [pc, #540]	; (80023f8 <ProcessUserInput+0x80c>)
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	f7fe f807 	bl	80001f0 <strcmp>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <ProcessUserInput+0x612>
 80021e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021f0:	4982      	ldr	r1, [pc, #520]	; (80023fc <ProcessUserInput+0x810>)
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	f7fd fffc 	bl	80001f0 <strcmp>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10a      	bne.n	8002214 <ProcessUserInput+0x628>
  {
    UI_Controller = 2;
 80021fe:	4b7b      	ldr	r3, [pc, #492]	; (80023ec <ProcessUserInput+0x800>)
 8002200:	2202      	movs	r2, #2
 8002202:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 8002204:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002208:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	f000 fac7 	bl	80027a0 <ShowControllerConfig>
    return;
 8002212:	e2be      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if ((strcmp((char*) buffer, "4") == 0) || (strcmp((char*) buffer, "c4") == 0))
 8002214:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002218:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800221c:	4978      	ldr	r1, [pc, #480]	; (8002400 <ProcessUserInput+0x814>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	f7fd ffe6 	bl	80001f0 <strcmp>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <ProcessUserInput+0x654>
 800222a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800222e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002232:	4974      	ldr	r1, [pc, #464]	; (8002404 <ProcessUserInput+0x818>)
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	f7fd ffdb 	bl	80001f0 <strcmp>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <ProcessUserInput+0x66a>
  {
    UI_Controller = 3;
 8002240:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <ProcessUserInput+0x800>)
 8002242:	2203      	movs	r2, #3
 8002244:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 8002246:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800224a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	f000 faa6 	bl	80027a0 <ShowControllerConfig>
    return;
 8002254:	e29d      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if (UI_Controller == 9)
 8002256:	4b65      	ldr	r3, [pc, #404]	; (80023ec <ProcessUserInput+0x800>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b09      	cmp	r3, #9
 800225c:	d103      	bne.n	8002266 <ProcessUserInput+0x67a>
  {
    USBSendString("No controller selected.\n");
 800225e:	486a      	ldr	r0, [pc, #424]	; (8002408 <ProcessUserInput+0x81c>)
 8002260:	f000 feae 	bl	8002fc0 <USBSendString>
    return;
 8002264:	e295      	b.n	8002792 <ProcessUserInput+0xba6>
  }


  if (strcmp((char*) buffer, "e") == 0)
 8002266:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800226a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800226e:	4967      	ldr	r1, [pc, #412]	; (800240c <ProcessUserInput+0x820>)
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	f7fd ffbd 	bl	80001f0 <strcmp>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10b      	bne.n	8002294 <ProcessUserInput+0x6a8>
  {
    USBSendString("Controller enabled.\n");
 800227c:	4864      	ldr	r0, [pc, #400]	; (8002410 <ProcessUserInput+0x824>)
 800227e:	f000 fe9f 	bl	8002fc0 <USBSendString>
    Controller->PID.Config.Enabled = true;
 8002282:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002286:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 8002292:	e27e      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if (strcmp((char*) buffer, "d") == 0)
 8002294:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002298:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800229c:	495d      	ldr	r1, [pc, #372]	; (8002414 <ProcessUserInput+0x828>)
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	f7fd ffa6 	bl	80001f0 <strcmp>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10b      	bne.n	80022c2 <ProcessUserInput+0x6d6>
  {
    USBSendString("Controller disabled.\n");
 80022aa:	485b      	ldr	r0, [pc, #364]	; (8002418 <ProcessUserInput+0x82c>)
 80022ac:	f000 fe88 	bl	8002fc0 <USBSendString>
    Controller->PID.Config.Enabled = false;
 80022b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 80022c0:	e267      	b.n	8002792 <ProcessUserInput+0xba6>
  }

  if (sscanf((char*) buffer, "%c%f", &c, &f) == 2)
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	f107 0217 	add.w	r2, r7, #23
 80022ca:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80022ce:	f5a1 7088 	sub.w	r0, r1, #272	; 0x110
 80022d2:	4952      	ldr	r1, [pc, #328]	; (800241c <ProcessUserInput+0x830>)
 80022d4:	6800      	ldr	r0, [r0, #0]
 80022d6:	f00d fdc5 	bl	800fe64 <siscanf>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b02      	cmp	r3, #2
 80022de:	f040 8234 	bne.w	800274a <ProcessUserInput+0xb5e>
  {
    u = (uint8_t) f;
 80022e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80022f6:	793b      	ldrb	r3, [r7, #4]
 80022f8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    switch (c)
 80022fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002300:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3b61      	subs	r3, #97	; 0x61
 8002308:	2b13      	cmp	r3, #19
 800230a:	f200 823d 	bhi.w	8002788 <ProcessUserInput+0xb9c>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <ProcessUserInput+0x728>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	0800236d 	.word	0x0800236d
 8002318:	08002789 	.word	0x08002789
 800231c:	08002365 	.word	0x08002365
 8002320:	08002543 	.word	0x08002543
 8002324:	08002789 	.word	0x08002789
 8002328:	080025ab 	.word	0x080025ab
 800232c:	08002789 	.word	0x08002789
 8002330:	080026c3 	.word	0x080026c3
 8002334:	080024db 	.word	0x080024db
 8002338:	08002789 	.word	0x08002789
 800233c:	08002789 	.word	0x08002789
 8002340:	0800265b 	.word	0x0800265b
 8002344:	08002789 	.word	0x08002789
 8002348:	08002789 	.word	0x08002789
 800234c:	08002789 	.word	0x08002789
 8002350:	08002473 	.word	0x08002473
 8002354:	08002789 	.word	0x08002789
 8002358:	08002789 	.word	0x08002789
 800235c:	08002789 	.word	0x08002789
 8002360:	08002701 	.word	0x08002701
    {
      case 'c':
        // we shouldn't get here if a valid number was used
        USBSendString("Invalid controller number.\n");
 8002364:	482e      	ldr	r0, [pc, #184]	; (8002420 <ProcessUserInput+0x834>)
 8002366:	f000 fe2b 	bl	8002fc0 <USBSendString>
        return;
 800236a:	e212      	b.n	8002792 <ProcessUserInput+0xba6>
        break;
      case 'a':
        switch (u)
 800236c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002370:	2b0b      	cmp	r3, #11
 8002372:	d87a      	bhi.n	800246a <ProcessUserInput+0x87e>
 8002374:	a201      	add	r2, pc, #4	; (adr r2, 800237c <ProcessUserInput+0x790>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	080023ad 	.word	0x080023ad
 8002380:	0800243f 	.word	0x0800243f
 8002384:	0800246b 	.word	0x0800246b
 8002388:	0800246b 	.word	0x0800246b
 800238c:	0800246b 	.word	0x0800246b
 8002390:	0800246b 	.word	0x0800246b
 8002394:	0800246b 	.word	0x0800246b
 8002398:	0800246b 	.word	0x0800246b
 800239c:	0800246b 	.word	0x0800246b
 80023a0:	0800246b 	.word	0x0800246b
 80023a4:	08002429 	.word	0x08002429
 80023a8:	08002455 	.word	0x08002455
        {
          case 0:
            USBSendString("Address set to 0b 10 01 00 0x.\n");
 80023ac:	481d      	ldr	r0, [pc, #116]	; (8002424 <ProcessUserInput+0x838>)
 80023ae:	f000 fe07 	bl	8002fc0 <USBSendString>
            Controller->Sensor.Address = 0b1001000;
 80023b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2248      	movs	r2, #72	; 0x48
 80023be:	721a      	strb	r2, [r3, #8]
            return;
 80023c0:	e1e7      	b.n	8002792 <ProcessUserInput+0xba6>
 80023c2:	bf00      	nop
 80023c4:	08014384 	.word	0x08014384
 80023c8:	08014358 	.word	0x08014358
 80023cc:	080148dc 	.word	0x080148dc
 80023d0:	08014304 	.word	0x08014304
 80023d4:	080148f8 	.word	0x080148f8
 80023d8:	0801438c 	.word	0x0801438c
 80023dc:	08014398 	.word	0x08014398
 80023e0:	08014920 	.word	0x08014920
 80023e4:	08014938 	.word	0x08014938
 80023e8:	0801493c 	.word	0x0801493c
 80023ec:	2000000c 	.word	0x2000000c
 80023f0:	08014940 	.word	0x08014940
 80023f4:	08014944 	.word	0x08014944
 80023f8:	08014948 	.word	0x08014948
 80023fc:	0801494c 	.word	0x0801494c
 8002400:	08014950 	.word	0x08014950
 8002404:	08014954 	.word	0x08014954
 8002408:	080148bc 	.word	0x080148bc
 800240c:	08014958 	.word	0x08014958
 8002410:	0801495c 	.word	0x0801495c
 8002414:	080142f4 	.word	0x080142f4
 8002418:	08014974 	.word	0x08014974
 800241c:	0801498c 	.word	0x0801498c
 8002420:	08014994 	.word	0x08014994
 8002424:	080149b0 	.word	0x080149b0
            break;
          case 10:
            USBSendString("Address set to 0b 10 01 01 0x.\n");
 8002428:	48c9      	ldr	r0, [pc, #804]	; (8002750 <ProcessUserInput+0xb64>)
 800242a:	f000 fdc9 	bl	8002fc0 <USBSendString>
            Controller->Sensor.Address = 0b1001010;
 800242e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002432:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	224a      	movs	r2, #74	; 0x4a
 800243a:	721a      	strb	r2, [r3, #8]
            return;
 800243c:	e1a9      	b.n	8002792 <ProcessUserInput+0xba6>
            break;
          case 1:
            USBSendString("Address set to 0b 10 01 00 1x.\n");
 800243e:	48c5      	ldr	r0, [pc, #788]	; (8002754 <ProcessUserInput+0xb68>)
 8002440:	f000 fdbe 	bl	8002fc0 <USBSendString>
            Controller->Sensor.Address = 0b1001001;
 8002444:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002448:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2249      	movs	r2, #73	; 0x49
 8002450:	721a      	strb	r2, [r3, #8]
            return;
 8002452:	e19e      	b.n	8002792 <ProcessUserInput+0xba6>
            break;
          case 11:
            USBSendString("Address set to 0b 10 01 01 1x.\n");
 8002454:	48c0      	ldr	r0, [pc, #768]	; (8002758 <ProcessUserInput+0xb6c>)
 8002456:	f000 fdb3 	bl	8002fc0 <USBSendString>
            Controller->Sensor.Address = 0b1001011;
 800245a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800245e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	224b      	movs	r2, #75	; 0x4b
 8002466:	721a      	strb	r2, [r3, #8]
            return;
 8002468:	e193      	b.n	8002792 <ProcessUserInput+0xba6>
            break;
          default:
            USBSendString("Invalid Address.\n");
 800246a:	48bc      	ldr	r0, [pc, #752]	; (800275c <ProcessUserInput+0xb70>)
 800246c:	f000 fda8 	bl	8002fc0 <USBSendString>
            return;
 8002470:	e18f      	b.n	8002792 <ProcessUserInput+0xba6>
        Controller->Sensor.Configured = false;
        Controller->Sensor.State = 0;
        Controller->PID.IntegratorCount = 0;
        break;
      case 'p':
        if (f < 0)
 8002472:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002486:	d503      	bpl.n	8002490 <ProcessUserInput+0x8a4>
          USBSendString("Invalid value.");
 8002488:	48b5      	ldr	r0, [pc, #724]	; (8002760 <ProcessUserInput+0xb74>)
 800248a:	f000 fd99 	bl	8002fc0 <USBSendString>
        {
          snprintf(output, 200, "kp set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Kp = f;
        }
        return;
 800248e:	e180      	b.n	8002792 <ProcessUserInput+0xba6>
          snprintf(output, 200, "kp set to %f.\n", f);
 8002490:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f874 	bl	8000588 <__aeabi_f2d>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	f107 0018 	add.w	r0, r7, #24
 80024a8:	e9cd 2300 	strd	r2, r3, [sp]
 80024ac:	4aad      	ldr	r2, [pc, #692]	; (8002764 <ProcessUserInput+0xb78>)
 80024ae:	21c8      	movs	r1, #200	; 0xc8
 80024b0:	f00d fc84 	bl	800fdbc <sniprintf>
          USBSendString(output);
 80024b4:	f107 0318 	add.w	r3, r7, #24
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fd81 	bl	8002fc0 <USBSendString>
          Controller->PID.Config.Kp = f;
 80024be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 80024d6:	601a      	str	r2, [r3, #0]
        return;
 80024d8:	e15b      	b.n	8002792 <ProcessUserInput+0xba6>
        break;

      case 'i':
        if (f < 0)
 80024da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ee:	d503      	bpl.n	80024f8 <ProcessUserInput+0x90c>
          USBSendString("Invalid value.");
 80024f0:	489b      	ldr	r0, [pc, #620]	; (8002760 <ProcessUserInput+0xb74>)
 80024f2:	f000 fd65 	bl	8002fc0 <USBSendString>
        {
          snprintf(output, 200, "ki set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Ki = f;
        }
        return;
 80024f6:	e14c      	b.n	8002792 <ProcessUserInput+0xba6>
          snprintf(output, 200, "ki set to %f.\n", f);
 80024f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f840 	bl	8000588 <__aeabi_f2d>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	f107 0018 	add.w	r0, r7, #24
 8002510:	e9cd 2300 	strd	r2, r3, [sp]
 8002514:	4a94      	ldr	r2, [pc, #592]	; (8002768 <ProcessUserInput+0xb7c>)
 8002516:	21c8      	movs	r1, #200	; 0xc8
 8002518:	f00d fc50 	bl	800fdbc <sniprintf>
          USBSendString(output);
 800251c:	f107 0318 	add.w	r3, r7, #24
 8002520:	4618      	mov	r0, r3
 8002522:	f000 fd4d 	bl	8002fc0 <USBSendString>
          Controller->PID.Config.Ki = f;
 8002526:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800252a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002534:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800253e:	601a      	str	r2, [r3, #0]
        return;
 8002540:	e127      	b.n	8002792 <ProcessUserInput+0xba6>
        break;

      case 'd':
        if (f < 0)
 8002542:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	d503      	bpl.n	8002560 <ProcessUserInput+0x974>
          USBSendString("Invalid value.");
 8002558:	4881      	ldr	r0, [pc, #516]	; (8002760 <ProcessUserInput+0xb74>)
 800255a:	f000 fd31 	bl	8002fc0 <USBSendString>
        {
          snprintf(output, 200, "kd set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Kd = f;
        }
        return;
 800255e:	e118      	b.n	8002792 <ProcessUserInput+0xba6>
          snprintf(output, 200, "kd set to %f.\n", f);
 8002560:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe f80c 	bl	8000588 <__aeabi_f2d>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	f107 0018 	add.w	r0, r7, #24
 8002578:	e9cd 2300 	strd	r2, r3, [sp]
 800257c:	4a7b      	ldr	r2, [pc, #492]	; (800276c <ProcessUserInput+0xb80>)
 800257e:	21c8      	movs	r1, #200	; 0xc8
 8002580:	f00d fc1c 	bl	800fdbc <sniprintf>
          USBSendString(output);
 8002584:	f107 0318 	add.w	r3, r7, #24
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fd19 	bl	8002fc0 <USBSendString>
          Controller->PID.Config.Kd = f;
 800258e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800259c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80025a6:	601a      	str	r2, [r3, #0]
        return;
 80025a8:	e0f3      	b.n	8002792 <ProcessUserInput+0xba6>
        break;

      case 'f':
        if ((f < 0) || (f > 600))
 80025aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	d40c      	bmi.n	80025da <ProcessUserInput+0x9ee>
 80025c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002770 <ProcessUserInput+0xb84>
 80025d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d8:	dd03      	ble.n	80025e2 <ProcessUserInput+0x9f6>
          USBSendString("Invalid value.");
 80025da:	4861      	ldr	r0, [pc, #388]	; (8002760 <ProcessUserInput+0xb74>)
 80025dc:	f000 fcf0 	bl	8002fc0 <USBSendString>
        {
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
          USBSendString(output);
          Controller->PID.Config.Frequency = f;
        }
        return;
 80025e0:	e0d7      	b.n	8002792 <ProcessUserInput+0xba6>
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
 80025e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffcb 	bl	8000588 <__aeabi_f2d>
 80025f2:	4604      	mov	r4, r0
 80025f4:	460d      	mov	r5, r1
 80025f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002774 <ProcessUserInput+0xb88>
 8002606:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800260a:	ee16 0a90 	vmov	r0, s13
 800260e:	f7fd ffbb 	bl	8000588 <__aeabi_f2d>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	f107 0018 	add.w	r0, r7, #24
 800261a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800261e:	e9cd 4500 	strd	r4, r5, [sp]
 8002622:	4a55      	ldr	r2, [pc, #340]	; (8002778 <ProcessUserInput+0xb8c>)
 8002624:	21c8      	movs	r1, #200	; 0xc8
 8002626:	f00d fbc9 	bl	800fdbc <sniprintf>
          USBSendString(output);
 800262a:	f107 0318 	add.w	r3, r7, #24
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fcc6 	bl	8002fc0 <USBSendString>
          Controller->PID.Config.Frequency = f;
 8002634:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002644:	ee17 3a90 	vmov	r3, s15
 8002648:	b29a      	uxth	r2, r3
 800264a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800264e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8a3 265e 	strh.w	r2, [r3, #1630]	; 0x65e
        return;
 8002658:	e09b      	b.n	8002792 <ProcessUserInput+0xba6>
        break;


      case 'l':
        if (f < 0)
 800265a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800265e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002662:	edd3 7a00 	vldr	s15, [r3]
 8002666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	d503      	bpl.n	8002678 <ProcessUserInput+0xa8c>
          USBSendString("Invalid value.");
 8002670:	483b      	ldr	r0, [pc, #236]	; (8002760 <ProcessUserInput+0xb74>)
 8002672:	f000 fca5 	bl	8002fc0 <USBSendString>
        {
          snprintf(output, 200, "Li set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Li = f;
        }
        return;
 8002676:	e08c      	b.n	8002792 <ProcessUserInput+0xba6>
          snprintf(output, 200, "Li set to %f.\n", f);
 8002678:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800267c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd ff80 	bl	8000588 <__aeabi_f2d>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	f107 0018 	add.w	r0, r7, #24
 8002690:	e9cd 2300 	strd	r2, r3, [sp]
 8002694:	4a39      	ldr	r2, [pc, #228]	; (800277c <ProcessUserInput+0xb90>)
 8002696:	21c8      	movs	r1, #200	; 0xc8
 8002698:	f00d fb90 	bl	800fdbc <sniprintf>
          USBSendString(output);
 800269c:	f107 0318 	add.w	r3, r7, #24
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fc8d 	bl	8002fc0 <USBSendString>
          Controller->PID.Config.Li = f;
 80026a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 80026be:	601a      	str	r2, [r3, #0]
        return;
 80026c0:	e067      	b.n	8002792 <ProcessUserInput+0xba6>
        break;
      case 'h':
        if (u == 0)
 80026c2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <ProcessUserInput+0xae6>
          USBSendString("Invalid value.");
 80026ca:	4825      	ldr	r0, [pc, #148]	; (8002760 <ProcessUserInput+0xb74>)
 80026cc:	f000 fc78 	bl	8002fc0 <USBSendString>
        {
          snprintf(output, 200, "History set to %u.\n", u);
          USBSendString(output);
          Controller->PID.Config.History = u;
        }
        return;
 80026d0:	e05f      	b.n	8002792 <ProcessUserInput+0xba6>
          snprintf(output, 200, "History set to %u.\n", u);
 80026d2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80026d6:	f107 0018 	add.w	r0, r7, #24
 80026da:	4a29      	ldr	r2, [pc, #164]	; (8002780 <ProcessUserInput+0xb94>)
 80026dc:	21c8      	movs	r1, #200	; 0xc8
 80026de:	f00d fb6d 	bl	800fdbc <sniprintf>
          USBSendString(output);
 80026e2:	f107 0318 	add.w	r3, r7, #24
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fc6a 	bl	8002fc0 <USBSendString>
          Controller->PID.Config.History = u;
 80026ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 80026fa:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
        return;
 80026fe:	e048      	b.n	8002792 <ProcessUserInput+0xba6>
        break;

      case 't':
        snprintf(output, 200, "Target temperature set to %f.\n", f);
 8002700:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd ff3c 	bl	8000588 <__aeabi_f2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	f107 0018 	add.w	r0, r7, #24
 8002718:	e9cd 2300 	strd	r2, r3, [sp]
 800271c:	4a19      	ldr	r2, [pc, #100]	; (8002784 <ProcessUserInput+0xb98>)
 800271e:	21c8      	movs	r1, #200	; 0xc8
 8002720:	f00d fb4c 	bl	800fdbc <sniprintf>
        USBSendString(output);
 8002724:	f107 0318 	add.w	r3, r7, #24
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fc49 	bl	8002fc0 <USBSendString>
        Controller->PID.Config.TargetP = f;
 800272e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800273c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002746:	601a      	str	r2, [r3, #0]
        return;
 8002748:	e023      	b.n	8002792 <ProcessUserInput+0xba6>
        break;

      default:
        break;
    }
  }
 800274a:	bf00      	nop
 800274c:	e01d      	b.n	800278a <ProcessUserInput+0xb9e>
 800274e:	bf00      	nop
 8002750:	080149d0 	.word	0x080149d0
 8002754:	080149f0 	.word	0x080149f0
 8002758:	08014a10 	.word	0x08014a10
 800275c:	08014a30 	.word	0x08014a30
 8002760:	08014a44 	.word	0x08014a44
 8002764:	08014a54 	.word	0x08014a54
 8002768:	08014a64 	.word	0x08014a64
 800276c:	08014a74 	.word	0x08014a74
 8002770:	44160000 	.word	0x44160000
 8002774:	42200000 	.word	0x42200000
 8002778:	08014a84 	.word	0x08014a84
 800277c:	08014aa8 	.word	0x08014aa8
 8002780:	08014ab8 	.word	0x08014ab8
 8002784:	08014acc 	.word	0x08014acc
        break;
 8002788:	bf00      	nop
  USBSendString("Unknown command.\n");
 800278a:	4804      	ldr	r0, [pc, #16]	; (800279c <ProcessUserInput+0xbb0>)
 800278c:	f000 fc18 	bl	8002fc0 <USBSendString>
  return;
 8002790:	bf00      	nop
}
 8002792:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002796:	46bd      	mov	sp, r7
 8002798:	bdb0      	pop	{r4, r5, r7, pc}
 800279a:	bf00      	nop
 800279c:	08014aec 	.word	0x08014aec

080027a0 <ShowControllerConfig>:

//Show the Configuration of a Controller
void ShowControllerConfig(struct sController* Controller)
{
 80027a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a4:	b0d1      	sub	sp, #324	; 0x144
 80027a6:	af0c      	add	r7, sp, #48	; 0x30
 80027a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027b0:	6018      	str	r0, [r3, #0]
  char s1[12];
  char buffer[250];
  FormatTemperature(s1, Controller->PID.Config.TargetP);
 80027b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fee0 	bl	8000588 <__aeabi_f2d>
 80027c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80027cc:	ec41 0b10 	vmov	d0, r0, r1
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fb01 	bl	8002dd8 <FormatTemperature>
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80027d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	603b      	str	r3, [r7, #0]
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80027e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 80027f2:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fd fec7 	bl	8000588 <__aeabi_f2d>
 80027fa:	4604      	mov	r4, r0
 80027fc:	460d      	mov	r5, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80027fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002802:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f203 6354 	addw	r3, r3, #1620	; 0x654
 800280c:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd feba 	bl	8000588 <__aeabi_f2d>
 8002814:	4680      	mov	r8, r0
 8002816:	4689      	mov	r9, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002818:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800281c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002826:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fead 	bl	8000588 <__aeabi_f2d>
 800282e:	4682      	mov	sl, r0
 8002830:	468b      	mov	fp, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002832:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002836:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002840:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fea0 	bl	8000588 <__aeabi_f2d>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 800284c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002850:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002854:	6809      	ldr	r1, [r1, #0]
 8002856:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 800285a:	460e      	mov	r6, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 800285c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002860:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002864:	6809      	ldr	r1, [r1, #0]
 8002866:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 800286a:	f107 0008 	add.w	r0, r7, #8
 800286e:	910a      	str	r1, [sp, #40]	; 0x28
 8002870:	9609      	str	r6, [sp, #36]	; 0x24
 8002872:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002876:	9108      	str	r1, [sp, #32]
 8002878:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800287c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002880:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002884:	e9cd 4500 	strd	r4, r5, [sp]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4a23      	ldr	r2, [pc, #140]	; (8002918 <ShowControllerConfig+0x178>)
 800288c:	21c8      	movs	r1, #200	; 0xc8
 800288e:	f00d fa95 	bl	800fdbc <sniprintf>
  USBSendString(buffer);
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fb92 	bl	8002fc0 <USBSendString>
  switch (Controller->Sensor.Address & 0x03)
 800289c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	7a1b      	ldrb	r3, [r3, #8]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d81b      	bhi.n	80028e8 <ShowControllerConfig+0x148>
 80028b0:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <ShowControllerConfig+0x118>)
 80028b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b6:	bf00      	nop
 80028b8:	080028c9 	.word	0x080028c9
 80028bc:	080028d1 	.word	0x080028d1
 80028c0:	080028d9 	.word	0x080028d9
 80028c4:	080028e1 	.word	0x080028e1
  {
    case 0:
      USBSendString("00");
 80028c8:	4814      	ldr	r0, [pc, #80]	; (800291c <ShowControllerConfig+0x17c>)
 80028ca:	f000 fb79 	bl	8002fc0 <USBSendString>
      break;
 80028ce:	e00c      	b.n	80028ea <ShowControllerConfig+0x14a>
    case 1:
      USBSendString("01");
 80028d0:	4813      	ldr	r0, [pc, #76]	; (8002920 <ShowControllerConfig+0x180>)
 80028d2:	f000 fb75 	bl	8002fc0 <USBSendString>
      break;
 80028d6:	e008      	b.n	80028ea <ShowControllerConfig+0x14a>
    case 2:
      USBSendString("10");
 80028d8:	4812      	ldr	r0, [pc, #72]	; (8002924 <ShowControllerConfig+0x184>)
 80028da:	f000 fb71 	bl	8002fc0 <USBSendString>
      break;
 80028de:	e004      	b.n	80028ea <ShowControllerConfig+0x14a>
    case 3:
      USBSendString("11");
 80028e0:	4811      	ldr	r0, [pc, #68]	; (8002928 <ShowControllerConfig+0x188>)
 80028e2:	f000 fb6d 	bl	8002fc0 <USBSendString>
      break;
 80028e6:	e000      	b.n	80028ea <ShowControllerConfig+0x14a>
    default:
      break;
 80028e8:	bf00      	nop
  }
  if (Controller->PID.Config.Enabled)
 80028ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <ShowControllerConfig+0x164>
    USBSendString("  ENABLED\n");
 80028fc:	480b      	ldr	r0, [pc, #44]	; (800292c <ShowControllerConfig+0x18c>)
 80028fe:	f000 fb5f 	bl	8002fc0 <USBSendString>
  else
    USBSendString("  DISABLED\n");
}
 8002902:	e002      	b.n	800290a <ShowControllerConfig+0x16a>
    USBSendString("  DISABLED\n");
 8002904:	480a      	ldr	r0, [pc, #40]	; (8002930 <ShowControllerConfig+0x190>)
 8002906:	f000 fb5b 	bl	8002fc0 <USBSendString>
}
 800290a:	bf00      	nop
 800290c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002910:	46bd      	mov	sp, r7
 8002912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002916:	bf00      	nop
 8002918:	08014b00 	.word	0x08014b00
 800291c:	08014b64 	.word	0x08014b64
 8002920:	08014b68 	.word	0x08014b68
 8002924:	08014b6c 	.word	0x08014b6c
 8002928:	08014b70 	.word	0x08014b70
 800292c:	08014b74 	.word	0x08014b74
 8002930:	08014b80 	.word	0x08014b80

08002934 <ShowAll>:
//Show the Status of a Controller
//@brief Show the Status of a Controller
//@param Controller The Controller to show
//@param readable If true, show the status in human readable form
void ShowAll(struct sController* Controller, bool readable)
{
 8002934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002938:	b0b7      	sub	sp, #220	; 0xdc
 800293a:	af16      	add	r7, sp, #88	; 0x58
 800293c:	6278      	str	r0, [r7, #36]	; 0x24
 800293e:	460b      	mov	r3, r1
 8002940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint32_t ADCVal = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint8_t i;
    char target[12];
    FormatTemperature(target, Controller->PID.Config.TargetP);
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fe19 	bl	8000588 <__aeabi_f2d>
 8002956:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800295a:	ec41 0b10 	vmov	d0, r0, r1
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fa3a 	bl	8002dd8 <FormatTemperature>
    char address[3];
    switch (Controller->Sensor.Address & 0x03)
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	7a1b      	ldrb	r3, [r3, #8]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b03      	cmp	r3, #3
 800296e:	d833      	bhi.n	80029d8 <ShowAll+0xa4>
 8002970:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <ShowAll+0x44>)
 8002972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002976:	bf00      	nop
 8002978:	08002989 	.word	0x08002989
 800297c:	0800299d 	.word	0x0800299d
 8002980:	080029b1 	.word	0x080029b1
 8002984:	080029c5 	.word	0x080029c5
    {
      case 0: strcpy(address, "00"); break;
 8002988:	4aaa      	ldr	r2, [pc, #680]	; (8002c34 <ShowAll+0x300>)
 800298a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	4611      	mov	r1, r2
 8002992:	8019      	strh	r1, [r3, #0]
 8002994:	3302      	adds	r3, #2
 8002996:	0c12      	lsrs	r2, r2, #16
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e01e      	b.n	80029da <ShowAll+0xa6>
      case 1: strcpy(address, "01"); break;
 800299c:	4aa6      	ldr	r2, [pc, #664]	; (8002c38 <ShowAll+0x304>)
 800299e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	4611      	mov	r1, r2
 80029a6:	8019      	strh	r1, [r3, #0]
 80029a8:	3302      	adds	r3, #2
 80029aa:	0c12      	lsrs	r2, r2, #16
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e014      	b.n	80029da <ShowAll+0xa6>
      case 2: strcpy(address, "10"); break;
 80029b0:	4aa2      	ldr	r2, [pc, #648]	; (8002c3c <ShowAll+0x308>)
 80029b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	4611      	mov	r1, r2
 80029ba:	8019      	strh	r1, [r3, #0]
 80029bc:	3302      	adds	r3, #2
 80029be:	0c12      	lsrs	r2, r2, #16
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e00a      	b.n	80029da <ShowAll+0xa6>
      case 3: strcpy(address, "11"); break;
 80029c4:	4a9e      	ldr	r2, [pc, #632]	; (8002c40 <ShowAll+0x30c>)
 80029c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	4611      	mov	r1, r2
 80029ce:	8019      	strh	r1, [r3, #0]
 80029d0:	3302      	adds	r3, #2
 80029d2:	0c12      	lsrs	r2, r2, #16
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e000      	b.n	80029da <ShowAll+0xa6>
      default: break;
 80029d8:	bf00      	nop
    }
    char enabled[10];
    if (Controller->PID.Config.Enabled)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d006      	beq.n	80029f2 <ShowAll+0xbe>
      strcpy(enabled, "ENABLED ");
 80029e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80029e8:	4a96      	ldr	r2, [pc, #600]	; (8002c44 <ShowAll+0x310>)
 80029ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80029ec:	c303      	stmia	r3!, {r0, r1}
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	e005      	b.n	80029fe <ShowAll+0xca>
    else
      strcpy(enabled, "DISABLED");
 80029f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80029f6:	4a94      	ldr	r2, [pc, #592]	; (8002c48 <ShowAll+0x314>)
 80029f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029fa:	c303      	stmia	r3!, {r0, r1}
 80029fc:	701a      	strb	r2, [r3, #0]
    char average[12], last[12], targetp[12];
    FormatTemperature(average, Controller->Sensor.Average);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8002a04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a08:	eeb0 0a47 	vmov.f32	s0, s14
 8002a0c:	eef0 0a67 	vmov.f32	s1, s15
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f9e1 	bl	8002dd8 <FormatTemperature>
    FormatTemperature(last, Controller->Sensor.LastTemperature);
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
 8002a1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a20:	eeb0 0a47 	vmov.f32	s0, s14
 8002a24:	eef0 0a67 	vmov.f32	s1, s15
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f9d5 	bl	8002dd8 <FormatTemperature>
    FormatTemperature(targetp, Controller->PID.Config.TargetP);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fda6 	bl	8000588 <__aeabi_f2d>
 8002a3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a40:	ec41 0b10 	vmov	d0, r0, r1
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f9c7 	bl	8002dd8 <FormatTemperature>

    char sensor[15];
    switch (Controller->Sensor.State)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d839      	bhi.n	8002ac8 <ShowAll+0x194>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <ShowAll+0x128>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a71 	.word	0x08002a71
 8002a60:	08002a81 	.word	0x08002a81
 8002a64:	08002a93 	.word	0x08002a93
 8002a68:	08002aa7 	.word	0x08002aa7
 8002a6c:	08002ab5 	.word	0x08002ab5
    {
      case TMP117_STATE_UNKNOWN:      strcpy(sensor, "Unknown");       break;
 8002a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a74:	4a75      	ldr	r2, [pc, #468]	; (8002c4c <ShowAll+0x318>)
 8002a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a7e:	e024      	b.n	8002aca <ShowAll+0x196>
      case TMP117_STATE_INITFAILED:   strcpy(sensor, "Config failed"); break;
 8002a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a84:	4a72      	ldr	r2, [pc, #456]	; (8002c50 <ShowAll+0x31c>)
 8002a86:	461c      	mov	r4, r3
 8002a88:	4613      	mov	r3, r2
 8002a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a8c:	c407      	stmia	r4!, {r0, r1, r2}
 8002a8e:	8023      	strh	r3, [r4, #0]
 8002a90:	e01b      	b.n	8002aca <ShowAll+0x196>
      case TMP117_STATE_REQUESTNOACK: strcpy(sensor, "Req failed");    break;
 8002a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a96:	4a6f      	ldr	r2, [pc, #444]	; (8002c54 <ShowAll+0x320>)
 8002a98:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a9a:	c303      	stmia	r3!, {r0, r1}
 8002a9c:	801a      	strh	r2, [r3, #0]
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	0c12      	lsrs	r2, r2, #16
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e011      	b.n	8002aca <ShowAll+0x196>
      case TMP117_STATE_RECEIVEFAIL:  strcpy(sensor, "No response");   break;
 8002aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aaa:	4a6b      	ldr	r2, [pc, #428]	; (8002c58 <ShowAll+0x324>)
 8002aac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ab2:	e00a      	b.n	8002aca <ShowAll+0x196>
      case TMP117_STATE_VALIDTEMP:    strcpy(sensor, "OK");            break;
 8002ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab8:	4a68      	ldr	r2, [pc, #416]	; (8002c5c <ShowAll+0x328>)
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	4611      	mov	r1, r2
 8002abe:	8019      	strh	r1, [r3, #0]
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	0c12      	lsrs	r2, r2, #16
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e000      	b.n	8002aca <ShowAll+0x196>
      default: break;
 8002ac8:	bf00      	nop
    }

    static char buffer[250];

    if (readable)
 8002aca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80d2 	beq.w	8002c78 <ShowAll+0x344>
    {
      snprintf(buffer, 200, "C%u: kp=%5.2f   ep=% 7.1f    temp=%8s  freq: %04u  %s\n", Controller->Heater, Controller->PID.Config.Kp, 100 * Controller->PID.Ep, last, Controller->PID.Config.Frequency, enabled);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461e      	mov	r6, r3
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fd50 	bl	8000588 <__aeabi_f2d>
 8002ae8:	4604      	mov	r4, r0
 8002aea:	460d      	mov	r5, r1
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002c74 <ShowAll+0x340>
 8002afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afe:	ee17 0a90 	vmov	r0, s15
 8002b02:	f7fd fd41 	bl	8000588 <__aeabi_f2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0c:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
 8002b10:	4608      	mov	r0, r1
 8002b12:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002b16:	9106      	str	r1, [sp, #24]
 8002b18:	9005      	str	r0, [sp, #20]
 8002b1a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002b1e:	9104      	str	r1, [sp, #16]
 8002b20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b24:	e9cd 4500 	strd	r4, r5, [sp]
 8002b28:	4633      	mov	r3, r6
 8002b2a:	4a4d      	ldr	r2, [pc, #308]	; (8002c60 <ShowAll+0x32c>)
 8002b2c:	21c8      	movs	r1, #200	; 0xc8
 8002b2e:	484d      	ldr	r0, [pc, #308]	; (8002c64 <ShowAll+0x330>)
 8002b30:	f00d f944 	bl	800fdbc <sniprintf>
      USBSendString(buffer);
 8002b34:	484b      	ldr	r0, [pc, #300]	; (8002c64 <ShowAll+0x330>)
 8002b36:	f000 fa43 	bl	8002fc0 <USBSendString>
      snprintf(buffer, 200,  "  : kd=%5.2f   ed=% 7.1f     avg=%8s  i2c: %2s\n", Controller->PID.Config.Kd, 100 * Controller->PID.Ed, average, address);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fd20 	bl	8000588 <__aeabi_f2d>
 8002b48:	4604      	mov	r4, r0
 8002b4a:	460d      	mov	r5, r1
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002c74 <ShowAll+0x340>
 8002b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b5e:	ee17 0a90 	vmov	r0, s15
 8002b62:	f7fd fd11 	bl	8000588 <__aeabi_f2d>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002b6e:	9105      	str	r1, [sp, #20]
 8002b70:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002b74:	9104      	str	r1, [sp, #16]
 8002b76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b7a:	e9cd 4500 	strd	r4, r5, [sp]
 8002b7e:	4a3a      	ldr	r2, [pc, #232]	; (8002c68 <ShowAll+0x334>)
 8002b80:	21c8      	movs	r1, #200	; 0xc8
 8002b82:	4838      	ldr	r0, [pc, #224]	; (8002c64 <ShowAll+0x330>)
 8002b84:	f00d f91a 	bl	800fdbc <sniprintf>
      USBSendString(buffer);
 8002b88:	4836      	ldr	r0, [pc, #216]	; (8002c64 <ShowAll+0x330>)
 8002b8a:	f000 fa19 	bl	8002fc0 <USBSendString>
      snprintf(buffer, 200,  "  : ki=%5.2f   ei=% 7.1f  target=%8s  history=%3u\n", Controller->PID.Config.Ki, 100 * Controller->PID.Ei, target, Controller->PID.Config.History);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fcf6 	bl	8000588 <__aeabi_f2d>
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	460d      	mov	r5, r1
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002c74 <ShowAll+0x340>
 8002bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb2:	ee17 0a90 	vmov	r0, s15
 8002bb6:	f7fd fce7 	bl	8000588 <__aeabi_f2d>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bc0:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
 8002bc4:	9105      	str	r1, [sp, #20]
 8002bc6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002bca:	9104      	str	r1, [sp, #16]
 8002bcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bd0:	e9cd 4500 	strd	r4, r5, [sp]
 8002bd4:	4a25      	ldr	r2, [pc, #148]	; (8002c6c <ShowAll+0x338>)
 8002bd6:	21c8      	movs	r1, #200	; 0xc8
 8002bd8:	4822      	ldr	r0, [pc, #136]	; (8002c64 <ShowAll+0x330>)
 8002bda:	f00d f8ef 	bl	800fdbc <sniprintf>
      USBSendString(buffer);
 8002bde:	4821      	ldr	r0, [pc, #132]	; (8002c64 <ShowAll+0x330>)
 8002be0:	f000 f9ee 	bl	8002fc0 <USBSendString>
      snprintf(buffer, 200,  "  : li=%5.2f  eff=% 7.1f  sensor: %s\n\n", Controller->PID.Config.Li, 100 * Controller->PID.Effort, sensor);
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fccb 	bl	8000588 <__aeabi_f2d>
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	460d      	mov	r5, r1
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002bfc:	edd3 7a00 	vldr	s15, [r3]
 8002c00:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002c74 <ShowAll+0x340>
 8002c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c08:	ee17 0a90 	vmov	r0, s15
 8002c0c:	f7fd fcbc 	bl	8000588 <__aeabi_f2d>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002c18:	9104      	str	r1, [sp, #16]
 8002c1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c1e:	e9cd 4500 	strd	r4, r5, [sp]
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <ShowAll+0x33c>)
 8002c24:	21c8      	movs	r1, #200	; 0xc8
 8002c26:	480f      	ldr	r0, [pc, #60]	; (8002c64 <ShowAll+0x330>)
 8002c28:	f00d f8c8 	bl	800fdbc <sniprintf>
      USBSendString(buffer);
 8002c2c:	480d      	ldr	r0, [pc, #52]	; (8002c64 <ShowAll+0x330>)
 8002c2e:	f000 f9c7 	bl	8002fc0 <USBSendString>
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
      USBSendString(buffer);

//      HAL_Delay(1); // don't butcher our buffer before we're done with it
    }
}
 8002c32:	e0b8      	b.n	8002da6 <ShowAll+0x472>
 8002c34:	08014b64 	.word	0x08014b64
 8002c38:	08014b68 	.word	0x08014b68
 8002c3c:	08014b6c 	.word	0x08014b6c
 8002c40:	08014b70 	.word	0x08014b70
 8002c44:	08014c34 	.word	0x08014c34
 8002c48:	08014c40 	.word	0x08014c40
 8002c4c:	08014c4c 	.word	0x08014c4c
 8002c50:	08014c54 	.word	0x08014c54
 8002c54:	08014c64 	.word	0x08014c64
 8002c58:	08014c70 	.word	0x08014c70
 8002c5c:	08014c7c 	.word	0x08014c7c
 8002c60:	08014c80 	.word	0x08014c80
 8002c64:	20000308 	.word	0x20000308
 8002c68:	08014cb8 	.word	0x08014cb8
 8002c6c:	08014ce8 	.word	0x08014ce8
 8002c70:	08014d1c 	.word	0x08014d1c
 8002c74:	42c80000 	.word	0x42c80000
      if (Controller->Heater == 1)
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <ShowAll+0x350>
        ShowRawHeader();
 8002c80:	f000 f89a 	bl	8002db8 <ShowRawHeader>
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	781b      	ldrb	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t% 7.1f\t% 7.1f\t% 7.1f\t% 7.1f\t%7.3f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002c88:	61fb      	str	r3, [r7, #28]
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002c90:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t% 7.1f\t% 7.1f\t% 7.1f\t% 7.1f\t%7.3f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fc78 	bl	8000588 <__aeabi_f2d>
 8002c98:	4680      	mov	r8, r0
 8002c9a:	4689      	mov	r9, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002ca2:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t% 7.1f\t% 7.1f\t% 7.1f\t% 7.1f\t%7.3f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fc6f 	bl	8000588 <__aeabi_f2d>
 8002caa:	4682      	mov	sl, r0
 8002cac:	468b      	mov	fp, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002cb4:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t% 7.1f\t% 7.1f\t% 7.1f\t% 7.1f\t%7.3f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fc66 	bl	8000588 <__aeabi_f2d>
 8002cbc:	e9c7 0104 	strd	r0, r1, [r7, #16]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8002c74 <ShowAll+0x340>
 8002cce:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t% 7.1f\t% 7.1f\t% 7.1f\t% 7.1f\t%7.3f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002cd2:	ee17 0a90 	vmov	r0, s15
 8002cd6:	f7fd fc57 	bl	8000588 <__aeabi_f2d>
 8002cda:	e9c7 0102 	strd	r0, r1, [r7, #8]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	ed1f 7a1e 	vldr	s14, [pc, #-120]	; 8002c74 <ShowAll+0x340>
 8002cec:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t% 7.1f\t% 7.1f\t% 7.1f\t% 7.1f\t%7.3f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002cf0:	ee17 0a90 	vmov	r0, s15
 8002cf4:	f7fd fc48 	bl	8000588 <__aeabi_f2d>
 8002cf8:	e9c7 0100 	strd	r0, r1, [r7]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	ed1f 7a25 	vldr	s14, [pc, #-148]	; 8002c74 <ShowAll+0x340>
 8002d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t% 7.1f\t% 7.1f\t% 7.1f\t% 7.1f\t%7.3f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d0e:	ee17 0a90 	vmov	r0, s15
 8002d12:	f7fd fc39 	bl	8000588 <__aeabi_f2d>
 8002d16:	4604      	mov	r4, r0
 8002d18:	460d      	mov	r5, r1
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	ed1f 7a2d 	vldr	s14, [pc, #-180]	; 8002c74 <ShowAll+0x340>
 8002d28:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t% 7.1f\t% 7.1f\t% 7.1f\t% 7.1f\t%7.3f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d2c:	ee17 0a90 	vmov	r0, s15
 8002d30:	f7fd fc2a 	bl	8000588 <__aeabi_f2d>
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	f893 365d 	ldrb.w	r3, [r3, #1629]	; 0x65d
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t% 7.1f\t% 7.1f\t% 7.1f\t% 7.1f\t%7.3f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d3a:	461e      	mov	r6, r3
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f8b3 365e 	ldrh.w	r3, [r3, #1630]	; 0x65e
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t% 7.1f\t% 7.1f\t% 7.1f\t% 7.1f\t%7.3f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d42:	461a      	mov	r2, r3
 8002d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d48:	9315      	str	r3, [sp, #84]	; 0x54
 8002d4a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d4e:	9314      	str	r3, [sp, #80]	; 0x50
 8002d50:	9213      	str	r2, [sp, #76]	; 0x4c
 8002d52:	9612      	str	r6, [sp, #72]	; 0x48
 8002d54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d58:	9311      	str	r3, [sp, #68]	; 0x44
 8002d5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d5e:	9310      	str	r3, [sp, #64]	; 0x40
 8002d60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d64:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d6a:	930e      	str	r3, [sp, #56]	; 0x38
 8002d6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002d70:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002d74:	ed97 7b00 	vldr	d7, [r7]
 8002d78:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002d7c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d80:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002d84:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d88:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002d8c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002d90:	e9cd 8900 	strd	r8, r9, [sp]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4a06      	ldr	r2, [pc, #24]	; (8002db0 <ShowAll+0x47c>)
 8002d98:	21c8      	movs	r1, #200	; 0xc8
 8002d9a:	4806      	ldr	r0, [pc, #24]	; (8002db4 <ShowAll+0x480>)
 8002d9c:	f00d f80e 	bl	800fdbc <sniprintf>
      USBSendString(buffer);
 8002da0:	4804      	ldr	r0, [pc, #16]	; (8002db4 <ShowAll+0x480>)
 8002da2:	f000 f90d 	bl	8002fc0 <USBSendString>
}
 8002da6:	bf00      	nop
 8002da8:	3784      	adds	r7, #132	; 0x84
 8002daa:	46bd      	mov	sp, r7
 8002dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db0:	08014d44 	.word	0x08014d44
 8002db4:	20000308 	.word	0x20000308

08002db8 <ShowRawHeader>:


//Prints the header for the raw data
void ShowRawHeader(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  static char buffer[250];
  snprintf(buffer, 200,  "\tkp\tkd\tki\tep\ted\tei\teffort\ttemp\taverage\ttarget\ti2c\thist\tfreq\tenabled\tsensor\n");
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <ShowRawHeader+0x18>)
 8002dbe:	21c8      	movs	r1, #200	; 0xc8
 8002dc0:	4804      	ldr	r0, [pc, #16]	; (8002dd4 <ShowRawHeader+0x1c>)
 8002dc2:	f00c fffb 	bl	800fdbc <sniprintf>
  USBSendString(buffer);
 8002dc6:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <ShowRawHeader+0x1c>)
 8002dc8:	f000 f8fa 	bl	8002fc0 <USBSendString>
//  HAL_Delay(1); // don't butcher our buffer before we're done with it
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	08014da0 	.word	0x08014da0
 8002dd4:	20000404 	.word	0x20000404

08002dd8 <FormatTemperature>:


//Formats the Float to fit into the Temperature Display
void FormatTemperature(char* buffer, double temp)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	ed87 0b00 	vstr	d0, [r7]
  if (temp > -100)
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <FormatTemperature+0x48>)
 8002dea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dee:	f7fd feb3 	bl	8000b58 <__aeabi_dcmpgt>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d009      	beq.n	8002e0c <FormatTemperature+0x34>
    snprintf(buffer, 10, "% 7.3fC", temp);
 8002df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dfc:	e9cd 2300 	strd	r2, r3, [sp]
 8002e00:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <FormatTemperature+0x4c>)
 8002e02:	210a      	movs	r1, #10
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f00c ffd9 	bl	800fdbc <sniprintf>
  else
    snprintf(buffer, 10, "  error ");
}
 8002e0a:	e004      	b.n	8002e16 <FormatTemperature+0x3e>
    snprintf(buffer, 10, "  error ");
 8002e0c:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <FormatTemperature+0x50>)
 8002e0e:	210a      	movs	r1, #10
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f00c ffd3 	bl	800fdbc <sniprintf>
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	c0590000 	.word	0xc0590000
 8002e24:	08014dec 	.word	0x08014dec
 8002e28:	08014df4 	.word	0x08014df4

08002e2c <Controller_InitStruct>:
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002e38:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002e3c:	6018      	str	r0, [r3, #0]
 8002e3e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002e42:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8002e46:	6019      	str	r1, [r3, #0]
 8002e48:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002e4c:	f2a3 4339 	subw	r3, r3, #1081	; 0x439
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	f107 0310 	add.w	r3, r7, #16
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe fb08 	bl	800146c <PID_InitStruct>
 8002e5c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002e60:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002e6a:	f2a2 4239 	subw	r2, r2, #1081	; 0x439
 8002e6e:	7812      	ldrb	r2, [r2, #0]
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002e76:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002e80:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	3308      	adds	r3, #8
 8002e88:	4611      	mov	r1, r2
 8002e8a:	f44f 720a 	mov.w	r2, #552	; 0x228
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f00c f856 	bl	800ef40 <memcpy>
 8002e94:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002e98:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002ea2:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8002ea6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002eaa:	4611      	mov	r1, r2
 8002eac:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f00c f845 	bl	800ef40 <memcpy>
 8002eb6:	bf00      	nop
 8002eb8:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <Controller_SetHeater>:
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	460a      	mov	r2, r1
 8002eca:	71fb      	strb	r3, [r7, #7]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71bb      	strb	r3, [r7, #6]
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <Controller_SetHeater+0x40>)
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	817b      	strh	r3, [r7, #10]
 8002ed8:	79bb      	ldrb	r3, [r7, #6]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <Controller_SetHeater+0x2c>
 8002ede:	897b      	ldrh	r3, [r7, #10]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f002 f8ed 	bl	80050c4 <HAL_GPIO_WritePin>
 8002eea:	e005      	b.n	8002ef8 <Controller_SetHeater+0x38>
 8002eec:	897b      	ldrh	r3, [r7, #10]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f002 f8e6 	bl	80050c4 <HAL_GPIO_WritePin>
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40020800 	.word	0x40020800

08002f04 <Controller_WipeConfig>:
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	2200      	movs	r2, #0
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff89 	bl	8002e2c <Controller_InitStruct>
 8002f1a:	4803      	ldr	r0, [pc, #12]	; (8002f28 <Controller_WipeConfig+0x24>)
 8002f1c:	f00c feba 	bl	800fc94 <iprintf>
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	08014e00 	.word	0x08014e00

08002f2c <Controller_Step>:
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002f42:	f083 0301 	eor.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <Controller_Step+0x28>
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <Controller_Step+0x8c>)
 8002f4e:	2264      	movs	r2, #100	; 0x64
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	e02d      	b.n	8002fb0 <Controller_Step+0x84>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d003      	beq.n	8002f66 <Controller_Step+0x3a>
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <Controller_Step+0x8c>)
 8002f60:	2264      	movs	r2, #100	; 0x64
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e024      	b.n	8002fb0 <Controller_Step+0x84>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7fd fe5a 	bl	8000c28 <__aeabi_d2f>
 8002f74:	4603      	mov	r3, r0
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002f7e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe fbb0 	bl	80016e8 <PID_CalculateEffort>
 8002f88:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f98:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002fbc <Controller_Step+0x90>
 8002f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fa4:	edc7 7a00 	vstr	s15, [r7]
 8002fa8:	783b      	ldrb	r3, [r7, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	4b02      	ldr	r3, [pc, #8]	; (8002fb8 <Controller_Step+0x8c>)
 8002fae:	701a      	strb	r2, [r3, #0]
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000010 	.word	0x20000010
 8002fbc:	42c80000 	.word	0x42c80000

08002fc0 <USBSendString>:
   }
   return --i;
}

void USBSendString(char* buf)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  int i, res;
  for (i=0;i<50; i++)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	e013      	b.n	8002ff6 <USBSendString+0x36>
  {
    res = CDC_Transmit_FS((uint8_t *)buf, strlen(buf));
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd f918 	bl	8000204 <strlen>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f00b fb2a 	bl	800e634 <CDC_Transmit_FS>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	60bb      	str	r3, [r7, #8]
    if (res == USBD_OK)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <USBSendString+0x3e>
      return;

    HAL_Delay(1);
 8002fea:	2001      	movs	r0, #1
 8002fec:	f001 fae6 	bl	80045bc <HAL_Delay>
  for (i=0;i<50; i++)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b31      	cmp	r3, #49	; 0x31
 8002ffa:	dde8      	ble.n	8002fce <USBSendString+0xe>
 8002ffc:	e000      	b.n	8003000 <USBSendString+0x40>
      return;
 8002ffe:	bf00      	nop
  }
}
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <InitDWTTimer>:

void InitDWTTimer(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800300c:	4b09      	ldr	r3, [pc, #36]	; (8003034 <InitDWTTimer+0x2c>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a08      	ldr	r2, [pc, #32]	; (8003034 <InitDWTTimer+0x2c>)
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003016:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 8003018:	4b07      	ldr	r3, [pc, #28]	; (8003038 <InitDWTTimer+0x30>)
 800301a:	2200      	movs	r2, #0
 800301c:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk ; // enable the counter
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <InitDWTTimer+0x30>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <InitDWTTimer+0x30>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6013      	str	r3, [r2, #0]
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000edf0 	.word	0xe000edf0
 8003038:	e0001000 	.word	0xe0001000

0800303c <Delay_us>:

void Delay_us(uint32_t us)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8003044:	4b0d      	ldr	r3, [pc, #52]	; (800307c <Delay_us+0x40>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0d      	ldr	r2, [pc, #52]	; (8003080 <Delay_us+0x44>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	0c9b      	lsrs	r3, r3, #18
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	60fb      	str	r3, [r7, #12]
  volatile uint32_t start = DWT->CYCCNT;
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <Delay_us+0x48>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	60bb      	str	r3, [r7, #8]
  do  {
  } while((DWT->CYCCNT - start) < cycles);
 800305e:	4b09      	ldr	r3, [pc, #36]	; (8003084 <Delay_us+0x48>)
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1ad2      	subs	r2, r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	429a      	cmp	r2, r3
 800306a:	d3f8      	bcc.n	800305e <Delay_us+0x22>
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000014 	.word	0x20000014
 8003080:	431bde83 	.word	0x431bde83
 8003084:	e0001000 	.word	0xe0001000

08003088 <replacestr>:
    return un.u;
}

// in-place string replacement which only works if the new string is smaller than the old string
void replacestr(uint8_t *buffer, const char *search, const char *replace)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
     char *sp;
     char* line = (char*) buffer;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
     if ((sp = strstr(line, search)) == NULL) {
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800309c:	f00c ff53 	bl	800ff46 <strstr>
 80030a0:	6238      	str	r0, [r7, #32]
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d023      	beq.n	80030f0 <replacestr+0x68>
         return;
     }
     int search_len = strlen(search);
 80030a8:	68b8      	ldr	r0, [r7, #8]
 80030aa:	f7fd f8ab 	bl	8000204 <strlen>
 80030ae:	4603      	mov	r3, r0
 80030b0:	61fb      	str	r3, [r7, #28]
     int replace_len = strlen(replace);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fd f8a6 	bl	8000204 <strlen>
 80030b8:	4603      	mov	r3, r0
 80030ba:	61bb      	str	r3, [r7, #24]
     int tail_len = strlen(sp+search_len);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	6a3a      	ldr	r2, [r7, #32]
 80030c0:	4413      	add	r3, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd f89e 	bl	8000204 <strlen>
 80030c8:	4603      	mov	r3, r0
 80030ca:	617b      	str	r3, [r7, #20]

     memmove(sp+replace_len,sp+search_len,tail_len+1);
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	6a3a      	ldr	r2, [r7, #32]
 80030d0:	18d0      	adds	r0, r2, r3
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	6a3a      	ldr	r2, [r7, #32]
 80030d6:	18d1      	adds	r1, r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	3301      	adds	r3, #1
 80030dc:	461a      	mov	r2, r3
 80030de:	f00b ff3d 	bl	800ef5c <memmove>
     memcpy(sp, replace, replace_len);
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	461a      	mov	r2, r3
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	6a38      	ldr	r0, [r7, #32]
 80030ea:	f00b ff29 	bl	800ef40 <memcpy>
 80030ee:	e000      	b.n	80030f2 <replacestr+0x6a>
         return;
 80030f0:	bf00      	nop
}
 80030f2:	3728      	adds	r7, #40	; 0x28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003100:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003104:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003110:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003114:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003118:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003120:	e000      	b.n	8003124 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003122:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003124:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f9      	beq.n	8003122 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800312e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003138:	687b      	ldr	r3, [r7, #4]
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This Intterupot is called every .25ms Will Toggle the State of the Dac Channels
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a6c      	ldr	r2, [pc, #432]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d149      	bne.n	80031ec <HAL_TIM_PeriodElapsedCallback+0xa4>
  {
    //Syncronous Update of the DACs
    for (int i = 0; i < 6; i++){
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	e041      	b.n	80031e2 <HAL_TIM_PeriodElapsedCallback+0x9a>
      if(TCB.DAC8718.DAC_Channels[i].enabled){
 800315e:	4a6a      	ldr	r2, [pc, #424]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	33ce      	adds	r3, #206	; 0xce
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	7a9b      	ldrb	r3, [r3, #10]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d036      	beq.n	80031dc <HAL_TIM_PeriodElapsedCallback+0x94>
        if(TCB.DAC8718.DAC_Channels[i].state_high){
 800316e:	4a66      	ldr	r2, [pc, #408]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	33ce      	adds	r3, #206	; 0xce
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	7a5b      	ldrb	r3, [r3, #9]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d017      	beq.n	80031ae <HAL_TIM_PeriodElapsedCallback+0x66>

          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].lower_bound);
 800317e:	4a62      	ldr	r2, [pc, #392]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	33ce      	adds	r3, #206	; 0xce
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	7a19      	ldrb	r1, [r3, #8]
 800318a:	4a5f      	ldr	r2, [pc, #380]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	33ce      	adds	r3, #206	; 0xce
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	88db      	ldrh	r3, [r3, #6]
 8003196:	461a      	mov	r2, r3
 8003198:	485c      	ldr	r0, [pc, #368]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800319a:	f7fe f845 	bl	8001228 <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = false;
 800319e:	4a5a      	ldr	r2, [pc, #360]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	33ce      	adds	r3, #206	; 0xce
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4413      	add	r3, r2
 80031a8:	2200      	movs	r2, #0
 80031aa:	725a      	strb	r2, [r3, #9]
 80031ac:	e016      	b.n	80031dc <HAL_TIM_PeriodElapsedCallback+0x94>
        }else{
          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].upper_bound);
 80031ae:	4a56      	ldr	r2, [pc, #344]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	33ce      	adds	r3, #206	; 0xce
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	7a19      	ldrb	r1, [r3, #8]
 80031ba:	4a53      	ldr	r2, [pc, #332]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	33ce      	adds	r3, #206	; 0xce
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	889b      	ldrh	r3, [r3, #4]
 80031c6:	461a      	mov	r2, r3
 80031c8:	4850      	ldr	r0, [pc, #320]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80031ca:	f7fe f82d 	bl	8001228 <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = true;
 80031ce:	4a4e      	ldr	r2, [pc, #312]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	33ce      	adds	r3, #206	; 0xce
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	2201      	movs	r2, #1
 80031da:	725a      	strb	r2, [r3, #9]
    for (int i = 0; i < 6; i++){
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3301      	adds	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b05      	cmp	r3, #5
 80031e6:	ddba      	ble.n	800315e <HAL_TIM_PeriodElapsedCallback+0x16>
        }
      }
    

    }
    Syncronous_Update();
 80031e8:	f7fe f8bd 	bl	8001366 <Syncronous_Update>
  }


//--------------------This is from Damons Code-----------------------
  uint8_t i;
  if (htim == &htim6)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a48      	ldr	r2, [pc, #288]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d123      	bne.n	800323c <HAL_TIM_PeriodElapsedCallback+0xf4>
  {
    HeaterSubtick += HeaterFrequency;
 80031f4:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4413      	add	r3, r2
 8003202:	b29a      	uxth	r2, r3
 8003204:	4b44      	ldr	r3, [pc, #272]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003206:	801a      	strh	r2, [r3, #0]
    if (HeaterSubtick > 1000){
 8003208:	4b43      	ldr	r3, [pc, #268]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003212:	d913      	bls.n	800323c <HAL_TIM_PeriodElapsedCallback+0xf4>
        HeaterTick = (HeaterTick + 1) % 200;
 8003214:	4b41      	ldr	r3, [pc, #260]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	3301      	adds	r3, #1
 800321c:	4a40      	ldr	r2, [pc, #256]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800321e:	fb82 1203 	smull	r1, r2, r2, r3
 8003222:	1191      	asrs	r1, r2, #6
 8003224:	17da      	asrs	r2, r3, #31
 8003226:	1a8a      	subs	r2, r1, r2
 8003228:	21c8      	movs	r1, #200	; 0xc8
 800322a:	fb01 f202 	mul.w	r2, r1, r2
 800322e:	1a9a      	subs	r2, r3, r2
 8003230:	b292      	uxth	r2, r2
 8003232:	4b3a      	ldr	r3, [pc, #232]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003234:	801a      	strh	r2, [r3, #0]
        HeaterSubtick = 0;
 8003236:	4b38      	ldr	r3, [pc, #224]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003238:	2200      	movs	r2, #0
 800323a:	801a      	strh	r2, [r3, #0]
    }
  }

  if ((HeaterTick > HeaterDwell)&& (HeaterTick < (200 - HeaterDwell))){
 800323c:	4b39      	ldr	r3, [pc, #228]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	b29a      	uxth	r2, r3
 8003244:	4b35      	ldr	r3, [pc, #212]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	429a      	cmp	r2, r3
 800324c:	d210      	bcs.n	8003270 <HAL_TIM_PeriodElapsedCallback+0x128>
 800324e:	4b33      	ldr	r3, [pc, #204]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	4b33      	ldr	r3, [pc, #204]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8003260:	429a      	cmp	r2, r3
 8003262:	da05      	bge.n	8003270 <HAL_TIM_PeriodElapsedCallback+0x128>
        Controller_SetHeater(i, true);
 8003264:	7afb      	ldrb	r3, [r7, #11]
 8003266:	2101      	movs	r1, #1
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fe29 	bl	8002ec0 <Controller_SetHeater>
 800326e:	e004      	b.n	800327a <HAL_TIM_PeriodElapsedCallback+0x132>
  }else{
        Controller_SetHeater(i, false);
 8003270:	7afb      	ldrb	r3, [r7, #11]
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fe23 	bl	8002ec0 <Controller_SetHeater>
  }

  //Removed ADC stuff

  if (htim == &htim4)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d13c      	bne.n	80032fc <HAL_TIM_PeriodElapsedCallback+0x1b4>
  {
    ClockTick = (ClockTick + 1) % 100;
 8003282:	4b2a      	ldr	r3, [pc, #168]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	3301      	adds	r3, #1
 800328a:	4a25      	ldr	r2, [pc, #148]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800328c:	fb82 1203 	smull	r1, r2, r2, r3
 8003290:	1151      	asrs	r1, r2, #5
 8003292:	17da      	asrs	r2, r3, #31
 8003294:	1a8a      	subs	r2, r1, r2
 8003296:	2164      	movs	r1, #100	; 0x64
 8003298:	fb01 f202 	mul.w	r2, r1, r2
 800329c:	1a9a      	subs	r2, r3, r2
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	4b22      	ldr	r3, [pc, #136]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80032a2:	701a      	strb	r2, [r3, #0]
    // this should be after the ClockTick increment
    if (ClockTick == 0)
 80032a4:	4b21      	ldr	r3, [pc, #132]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_TIM_PeriodElapsedCallback+0x174>
      ElapsedSeconds++;
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80032ba:	801a      	strh	r2, [r3, #0]

    if (++Ticks_TMP117 >= 13)
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	3301      	adds	r3, #1
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80032c8:	4619      	mov	r1, r3
 80032ca:	7011      	strb	r1, [r2, #0]
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	d905      	bls.n	80032dc <HAL_TIM_PeriodElapsedCallback+0x194>
    {
      Ticks_TMP117 = 0;
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
      DoSampleTMP117 = true;
 80032d6:	4b18      	ldr	r3, [pc, #96]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
    }

    if (++Ticks_CalculatePWM >= 100)
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	4a15      	ldr	r2, [pc, #84]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80032e8:	4619      	mov	r1, r3
 80032ea:	7011      	strb	r1, [r2, #0]
 80032ec:	2b63      	cmp	r3, #99	; 0x63
 80032ee:	d905      	bls.n	80032fc <HAL_TIM_PeriodElapsedCallback+0x1b4>
    {
      Ticks_CalculatePWM = 0;
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
      DoCalculatePWM = true;
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
    }

  }

  //--------------------End Damons Code-----------------------
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	200005f4 	.word	0x200005f4
 8003308:	20000720 	.word	0x20000720
 800330c:	20000d80 	.word	0x20000d80
 8003310:	200006cc 	.word	0x200006cc
 8003314:	2000000e 	.word	0x2000000e
 8003318:	20000718 	.word	0x20000718
 800331c:	20000716 	.word	0x20000716
 8003320:	51eb851f 	.word	0x51eb851f
 8003324:	20000010 	.word	0x20000010
 8003328:	20000684 	.word	0x20000684
 800332c:	2000071c 	.word	0x2000071c
 8003330:	2000071e 	.word	0x2000071e
 8003334:	2000071a 	.word	0x2000071a
 8003338:	20000714 	.word	0x20000714
 800333c:	2000071b 	.word	0x2000071b
 8003340:	20000715 	.word	0x20000715
 8003344:	00000000 	.word	0x00000000

08003348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b090      	sub	sp, #64	; 0x40
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800334e:	f001 f8c3 	bl	80044d8 <HAL_Init>
  /* USER CODE BEGIN Init */
  
  //This Should Initialize the TCB 7 TMP117s and the DAC8718
  //New Code

  StringFIFOInit(&USBFIFO);
 8003352:	486d      	ldr	r0, [pc, #436]	; (8003508 <main+0x1c0>)
 8003354:	f000 fe8c 	bl	8004070 <StringFIFOInit>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003358:	f000 f8f4 	bl	8003544 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  InitDWTTimer(); // we need this for delay_us
 800335c:	f7ff fe54 	bl	8003008 <InitDWTTimer>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003360:	f000 fb40 	bl	80039e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003364:	f000 f958 	bl	8003618 <MX_ADC1_Init>
  MX_SPI4_Init();
 8003368:	f000 f9e8 	bl	800373c <MX_SPI4_Init>
  MX_I2C1_Init();
 800336c:	f000 f9a6 	bl	80036bc <MX_I2C1_Init>
  MX_TIM2_Init();
 8003370:	f000 fa1a 	bl	80037a8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8003374:	f00b f894 	bl	800e4a0 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8003378:	f000 fa62 	bl	8003840 <MX_TIM3_Init>
  MX_TIM4_Init();
 800337c:	f000 faae 	bl	80038dc <MX_TIM4_Init>
  MX_TIM6_Init();
 8003380:	f000 fafa 	bl	8003978 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  TCB_InitStruct(&TCB, &hi2c1, &hspi4);
 8003384:	4a61      	ldr	r2, [pc, #388]	; (800350c <main+0x1c4>)
 8003386:	4962      	ldr	r1, [pc, #392]	; (8003510 <main+0x1c8>)
 8003388:	4862      	ldr	r0, [pc, #392]	; (8003514 <main+0x1cc>)
 800338a:	f7fe fbe7 	bl	8001b5c <TCB_InitStruct>
  HAL_Delay(500);
 800338e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003392:	f001 f913 	bl	80045bc <HAL_Delay>
  printf("-- REBOOT --\n");
 8003396:	4860      	ldr	r0, [pc, #384]	; (8003518 <main+0x1d0>)
 8003398:	f00c fd02 	bl	800fda0 <puts>

// if you rearrange the PID.CONFIG struct, you should force rewriting defaults
  // over the EEPROM on next startup. This will *probably* be caught by checking
  // the address of the last controller rather than the first.
  //Welcome to OOP hell
  if (!(TCB.Controller.Sensor.Address & 0b1001000)) // if the stored address is not valid, we probably have invalid data.
 800339c:	4b5d      	ldr	r3, [pc, #372]	; (8003514 <main+0x1cc>)
 800339e:	7a1b      	ldrb	r3, [r3, #8]
 80033a0:	f003 0348 	and.w	r3, r3, #72	; 0x48
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <main+0x66>
  {
    printf("The configuration is invalid. Rewriting defaults.");
 80033a8:	485c      	ldr	r0, [pc, #368]	; (800351c <main+0x1d4>)
 80033aa:	f00c fc73 	bl	800fc94 <iprintf>
  }

  TMP117_Configure(&TCB.Controller.Sensor);
 80033ae:	485c      	ldr	r0, [pc, #368]	; (8003520 <main+0x1d8>)
 80033b0:	f7fe faa2 	bl	80018f8 <TMP117_Configure>
  HAL_TIM_Base_Start_IT(&htim2); //DAC Timer
 80033b4:	485b      	ldr	r0, [pc, #364]	; (8003524 <main+0x1dc>)
 80033b6:	f007 f82b 	bl	800a410 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6); // Heater Timer
 80033ba:	485b      	ldr	r0, [pc, #364]	; (8003528 <main+0x1e0>)
 80033bc:	f007 f828 	bl	800a410 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); // Main Timer
 80033c0:	485a      	ldr	r0, [pc, #360]	; (800352c <main+0x1e4>)
 80033c2:	f007 f825 	bl	800a410 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float voltage = 0;
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	60bb      	str	r3, [r7, #8]
  float voltage2 = 0;
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	607b      	str	r3, [r7, #4]

    /* USER CODE BEGIN 3 */

	  
    //Cycle through the DAC channels and set them to the opposite state and increase and decrease the voltage
    for (voltage = 0; voltage < TCB.DAC8718.max_peak2peak; voltage += 0.1){
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	e044      	b.n	8003464 <main+0x11c>
		  for(uint8_t j = 0; j < 3; j++){
 80033da:	2300      	movs	r3, #0
 80033dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80033e0:	e00c      	b.n	80033fc <main+0xb4>
			  Set_Voltage_Peak_to_Peak(&TCB.DAC8718, j, &voltage);
 80033e2:	f107 0208 	add.w	r2, r7, #8
 80033e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033ea:	4619      	mov	r1, r3
 80033ec:	4850      	ldr	r0, [pc, #320]	; (8003530 <main+0x1e8>)
 80033ee:	f7fd fff1 	bl	80013d4 <Set_Voltage_Peak_to_Peak>
		  for(uint8_t j = 0; j < 3; j++){
 80033f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033f6:	3301      	adds	r3, #1
 80033f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80033fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003400:	2b02      	cmp	r3, #2
 8003402:	d9ee      	bls.n	80033e2 <main+0x9a>
		  }
		  voltage2 = TCB.DAC8718.max_peak2peak - voltage;
 8003404:	4b43      	ldr	r3, [pc, #268]	; (8003514 <main+0x1cc>)
 8003406:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 800340a:	ed93 7a00 	vldr	s14, [r3]
 800340e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003416:	edc7 7a01 	vstr	s15, [r7, #4]
		  for(uint8_t j = 3; j < 6; j++){
 800341a:	2303      	movs	r3, #3
 800341c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003420:	e00b      	b.n	800343a <main+0xf2>
			  Set_Voltage_Peak_to_Peak(&TCB.DAC8718, j, &voltage2);
 8003422:	1d3a      	adds	r2, r7, #4
 8003424:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003428:	4619      	mov	r1, r3
 800342a:	4841      	ldr	r0, [pc, #260]	; (8003530 <main+0x1e8>)
 800342c:	f7fd ffd2 	bl	80013d4 <Set_Voltage_Peak_to_Peak>
		  for(uint8_t j = 3; j < 6; j++){
 8003430:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003434:	3301      	adds	r3, #1
 8003436:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800343a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800343e:	2b05      	cmp	r3, #5
 8003440:	d9ef      	bls.n	8003422 <main+0xda>
    for (voltage = 0; voltage < TCB.DAC8718.max_peak2peak; voltage += 0.1){
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd f89f 	bl	8000588 <__aeabi_f2d>
 800344a:	a32d      	add	r3, pc, #180	; (adr r3, 8003500 <main+0x1b8>)
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f7fc ff3c 	bl	80002cc <__adddf3>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f7fd fbe4 	bl	8000c28 <__aeabi_d2f>
 8003460:	4603      	mov	r3, r0
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	4b2b      	ldr	r3, [pc, #172]	; (8003514 <main+0x1cc>)
 8003466:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 800346a:	ed93 7a00 	vldr	s14, [r3]
 800346e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003472:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	dcae      	bgt.n	80033da <main+0x92>



    //-------- Damons Code ----------------------
    // we keep a global copy of this for the timer interrupt
    HeaterFrequency = TCB.Controller.PID.Config.Frequency;
 800347c:	4b25      	ldr	r3, [pc, #148]	; (8003514 <main+0x1cc>)
 800347e:	f8b3 265e 	ldrh.w	r2, [r3, #1630]	; 0x65e
 8003482:	4b2c      	ldr	r3, [pc, #176]	; (8003534 <main+0x1ec>)
 8003484:	801a      	strh	r2, [r3, #0]

    if (TCB.Controller.Sensor.Errors > 10)
 8003486:	4b23      	ldr	r3, [pc, #140]	; (8003514 <main+0x1cc>)
 8003488:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 800348c:	2b0a      	cmp	r3, #10
 800348e:	d901      	bls.n	8003494 <main+0x14c>
      MX_I2C1_Init();
 8003490:	f000 f914 	bl	80036bc <MX_I2C1_Init>

    if (DoSampleTMP117)
 8003494:	4b28      	ldr	r3, [pc, #160]	; (8003538 <main+0x1f0>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00e      	beq.n	80034bc <main+0x174>
    {
      DoSampleTMP117 = false;
 800349e:	4b26      	ldr	r3, [pc, #152]	; (8003538 <main+0x1f0>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
      if (TCB.Controller.Sensor.Configured){
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <main+0x1cc>)
 80034a6:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <main+0x16e>
          TMP117_GetTemperature(&TCB.Controller.Sensor);
 80034ae:	481c      	ldr	r0, [pc, #112]	; (8003520 <main+0x1d8>)
 80034b0:	f7fe fa68 	bl	8001984 <TMP117_GetTemperature>
 80034b4:	e002      	b.n	80034bc <main+0x174>
      }else{
          TMP117_Configure(&TCB.Controller.Sensor);
 80034b6:	481a      	ldr	r0, [pc, #104]	; (8003520 <main+0x1d8>)
 80034b8:	f7fe fa1e 	bl	80018f8 <TMP117_Configure>
      }
    }


    if (DoCalculatePWM)
 80034bc:	4b1f      	ldr	r3, [pc, #124]	; (800353c <main+0x1f4>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <main+0x18a>
    {
      DoCalculatePWM = false;
 80034c6:	4b1d      	ldr	r3, [pc, #116]	; (800353c <main+0x1f4>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
      Controller_Step(&TCB.Controller);
 80034cc:	4811      	ldr	r0, [pc, #68]	; (8003514 <main+0x1cc>)
 80034ce:	f7ff fd2d 	bl	8002f2c <Controller_Step>
    }

    if (StringFIFORemove(&USBFIFO, buffer) == 0)
 80034d2:	f107 030c 	add.w	r3, r7, #12
 80034d6:	4619      	mov	r1, r3
 80034d8:	480b      	ldr	r0, [pc, #44]	; (8003508 <main+0x1c0>)
 80034da:	f000 fe5d 	bl	8004198 <StringFIFORemove>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f47f af76 	bne.w	80033d2 <main+0x8a>
    {
    	printf("Got Inside");
 80034e6:	4816      	ldr	r0, [pc, #88]	; (8003540 <main+0x1f8>)
 80034e8:	f00c fbd4 	bl	800fc94 <iprintf>
      ProcessUserInput(&TCB.Controller, buffer);
 80034ec:	f107 030c 	add.w	r3, r7, #12
 80034f0:	4619      	mov	r1, r3
 80034f2:	4808      	ldr	r0, [pc, #32]	; (8003514 <main+0x1cc>)
 80034f4:	f7fe fb7a 	bl	8001bec <ProcessUserInput>
    for (voltage = 0; voltage < TCB.DAC8718.max_peak2peak; voltage += 0.1){
 80034f8:	e76b      	b.n	80033d2 <main+0x8a>
 80034fa:	bf00      	nop
 80034fc:	f3af 8000 	nop.w
 8003500:	9999999a 	.word	0x9999999a
 8003504:	3fb99999 	.word	0x3fb99999
 8003508:	20001cf0 	.word	0x20001cf0
 800350c:	2000059c 	.word	0x2000059c
 8003510:	20000548 	.word	0x20000548
 8003514:	20000720 	.word	0x20000720
 8003518:	08014e18 	.word	0x08014e18
 800351c:	08014e28 	.word	0x08014e28
 8003520:	20000728 	.word	0x20000728
 8003524:	200005f4 	.word	0x200005f4
 8003528:	200006cc 	.word	0x200006cc
 800352c:	20000684 	.word	0x20000684
 8003530:	20000d80 	.word	0x20000d80
 8003534:	2000000e 	.word	0x2000000e
 8003538:	20000714 	.word	0x20000714
 800353c:	20000715 	.word	0x20000715
 8003540:	08014e5c 	.word	0x08014e5c

08003544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b094      	sub	sp, #80	; 0x50
 8003548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800354a:	f107 0320 	add.w	r3, r7, #32
 800354e:	2230      	movs	r2, #48	; 0x30
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f00b fd1c 	bl	800ef90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003558:	f107 030c 	add.w	r3, r7, #12
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003568:	2300      	movs	r3, #0
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <SystemClock_Config+0xcc>)
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	4a27      	ldr	r2, [pc, #156]	; (8003610 <SystemClock_Config+0xcc>)
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003576:	6413      	str	r3, [r2, #64]	; 0x40
 8003578:	4b25      	ldr	r3, [pc, #148]	; (8003610 <SystemClock_Config+0xcc>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003584:	2300      	movs	r3, #0
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <SystemClock_Config+0xd0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a21      	ldr	r2, [pc, #132]	; (8003614 <SystemClock_Config+0xd0>)
 800358e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <SystemClock_Config+0xd0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035aa:	2302      	movs	r3, #2
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80035b4:	2304      	movs	r3, #4
 80035b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80035b8:	23a8      	movs	r3, #168	; 0xa8
 80035ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035bc:	2302      	movs	r3, #2
 80035be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80035c0:	2307      	movs	r3, #7
 80035c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035c4:	f107 0320 	add.w	r3, r7, #32
 80035c8:	4618      	mov	r0, r3
 80035ca:	f005 fcfd 	bl	8008fc8 <HAL_RCC_OscConfig>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80035d4:	f000 fb4a 	bl	8003c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035d8:	230f      	movs	r3, #15
 80035da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035dc:	2302      	movs	r3, #2
 80035de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80035ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80035f0:	f107 030c 	add.w	r3, r7, #12
 80035f4:	2105      	movs	r1, #5
 80035f6:	4618      	mov	r0, r3
 80035f8:	f005 ff5e 	bl	80094b8 <HAL_RCC_ClockConfig>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003602:	f000 fb33 	bl	8003c6c <Error_Handler>
  }
}
 8003606:	bf00      	nop
 8003608:	3750      	adds	r7, #80	; 0x50
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	40007000 	.word	0x40007000

08003618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800361e:	463b      	mov	r3, r7
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800362a:	4b21      	ldr	r3, [pc, #132]	; (80036b0 <MX_ADC1_Init+0x98>)
 800362c:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <MX_ADC1_Init+0x9c>)
 800362e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <MX_ADC1_Init+0x98>)
 8003632:	2200      	movs	r2, #0
 8003634:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003636:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <MX_ADC1_Init+0x98>)
 8003638:	2200      	movs	r2, #0
 800363a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800363c:	4b1c      	ldr	r3, [pc, #112]	; (80036b0 <MX_ADC1_Init+0x98>)
 800363e:	2200      	movs	r2, #0
 8003640:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003642:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <MX_ADC1_Init+0x98>)
 8003644:	2200      	movs	r2, #0
 8003646:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <MX_ADC1_Init+0x98>)
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003650:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <MX_ADC1_Init+0x98>)
 8003652:	2200      	movs	r2, #0
 8003654:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003656:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <MX_ADC1_Init+0x98>)
 8003658:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <MX_ADC1_Init+0xa0>)
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800365c:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <MX_ADC1_Init+0x98>)
 800365e:	2200      	movs	r2, #0
 8003660:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003662:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <MX_ADC1_Init+0x98>)
 8003664:	2201      	movs	r2, #1
 8003666:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003668:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <MX_ADC1_Init+0x98>)
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <MX_ADC1_Init+0x98>)
 8003672:	2201      	movs	r2, #1
 8003674:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003676:	480e      	ldr	r0, [pc, #56]	; (80036b0 <MX_ADC1_Init+0x98>)
 8003678:	f000 ffc4 	bl	8004604 <HAL_ADC_Init>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003682:	f000 faf3 	bl	8003c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003686:	230e      	movs	r3, #14
 8003688:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800368a:	2301      	movs	r3, #1
 800368c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003692:	463b      	mov	r3, r7
 8003694:	4619      	mov	r1, r3
 8003696:	4806      	ldr	r0, [pc, #24]	; (80036b0 <MX_ADC1_Init+0x98>)
 8003698:	f000 fff8 	bl	800468c <HAL_ADC_ConfigChannel>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80036a2:	f000 fae3 	bl	8003c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000500 	.word	0x20000500
 80036b4:	40012000 	.word	0x40012000
 80036b8:	0f000001 	.word	0x0f000001

080036bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <MX_I2C1_Init+0x74>)
 80036c2:	4a1c      	ldr	r2, [pc, #112]	; (8003734 <MX_I2C1_Init+0x78>)
 80036c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80036c6:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <MX_I2C1_Init+0x74>)
 80036c8:	4a1b      	ldr	r2, [pc, #108]	; (8003738 <MX_I2C1_Init+0x7c>)
 80036ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036cc:	4b18      	ldr	r3, [pc, #96]	; (8003730 <MX_I2C1_Init+0x74>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80036d2:	4b17      	ldr	r3, [pc, #92]	; (8003730 <MX_I2C1_Init+0x74>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <MX_I2C1_Init+0x74>)
 80036da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <MX_I2C1_Init+0x74>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <MX_I2C1_Init+0x74>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036ec:	4b10      	ldr	r3, [pc, #64]	; (8003730 <MX_I2C1_Init+0x74>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036f2:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <MX_I2C1_Init+0x74>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036f8:	480d      	ldr	r0, [pc, #52]	; (8003730 <MX_I2C1_Init+0x74>)
 80036fa:	f001 fcfd 	bl	80050f8 <HAL_I2C_Init>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003704:	f000 fab2 	bl	8003c6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003708:	2100      	movs	r1, #0
 800370a:	4809      	ldr	r0, [pc, #36]	; (8003730 <MX_I2C1_Init+0x74>)
 800370c:	f004 f964 	bl	80079d8 <HAL_I2CEx_ConfigAnalogFilter>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003716:	f000 faa9 	bl	8003c6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800371a:	2100      	movs	r1, #0
 800371c:	4804      	ldr	r0, [pc, #16]	; (8003730 <MX_I2C1_Init+0x74>)
 800371e:	f004 f997 	bl	8007a50 <HAL_I2CEx_ConfigDigitalFilter>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003728:	f000 faa0 	bl	8003c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000548 	.word	0x20000548
 8003734:	40005400 	.word	0x40005400
 8003738:	000186a0 	.word	0x000186a0

0800373c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <MX_SPI4_Init+0x64>)
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <MX_SPI4_Init+0x68>)
 8003744:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003746:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <MX_SPI4_Init+0x64>)
 8003748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800374c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <MX_SPI4_Init+0x64>)
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003754:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <MX_SPI4_Init+0x64>)
 8003756:	2200      	movs	r2, #0
 8003758:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <MX_SPI4_Init+0x64>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <MX_SPI4_Init+0x64>)
 8003762:	2201      	movs	r2, #1
 8003764:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <MX_SPI4_Init+0x64>)
 8003768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800376c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800376e:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <MX_SPI4_Init+0x64>)
 8003770:	2220      	movs	r2, #32
 8003772:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <MX_SPI4_Init+0x64>)
 8003776:	2200      	movs	r2, #0
 8003778:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <MX_SPI4_Init+0x64>)
 800377c:	2200      	movs	r2, #0
 800377e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <MX_SPI4_Init+0x64>)
 8003782:	2200      	movs	r2, #0
 8003784:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <MX_SPI4_Init+0x64>)
 8003788:	220a      	movs	r2, #10
 800378a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800378c:	4804      	ldr	r0, [pc, #16]	; (80037a0 <MX_SPI4_Init+0x64>)
 800378e:	f006 f89f 	bl	80098d0 <HAL_SPI_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003798:	f000 fa68 	bl	8003c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	2000059c 	.word	0x2000059c
 80037a4:	40013400 	.word	0x40013400

080037a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ae:	f107 0308 	add.w	r3, r7, #8
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037bc:	463b      	mov	r3, r7
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <MX_TIM2_Init+0x94>)
 80037c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420;
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <MX_TIM2_Init+0x94>)
 80037ce:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80037d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <MX_TIM2_Init+0x94>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <MX_TIM2_Init+0x94>)
 80037dc:	2232      	movs	r2, #50	; 0x32
 80037de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e0:	4b16      	ldr	r3, [pc, #88]	; (800383c <MX_TIM2_Init+0x94>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037e6:	4b15      	ldr	r3, [pc, #84]	; (800383c <MX_TIM2_Init+0x94>)
 80037e8:	2280      	movs	r2, #128	; 0x80
 80037ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037ec:	4813      	ldr	r0, [pc, #76]	; (800383c <MX_TIM2_Init+0x94>)
 80037ee:	f006 fdbf 	bl	800a370 <HAL_TIM_Base_Init>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80037f8:	f000 fa38 	bl	8003c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003800:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003802:	f107 0308 	add.w	r3, r7, #8
 8003806:	4619      	mov	r1, r3
 8003808:	480c      	ldr	r0, [pc, #48]	; (800383c <MX_TIM2_Init+0x94>)
 800380a:	f006 ff79 	bl	800a700 <HAL_TIM_ConfigClockSource>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003814:	f000 fa2a 	bl	8003c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003818:	2300      	movs	r3, #0
 800381a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800381c:	2300      	movs	r3, #0
 800381e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003820:	463b      	mov	r3, r7
 8003822:	4619      	mov	r1, r3
 8003824:	4805      	ldr	r0, [pc, #20]	; (800383c <MX_TIM2_Init+0x94>)
 8003826:	f007 f995 	bl	800ab54 <HAL_TIMEx_MasterConfigSynchronization>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003830:	f000 fa1c 	bl	8003c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003834:	bf00      	nop
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	200005f4 	.word	0x200005f4

08003840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	605a      	str	r2, [r3, #4]
 8003850:	609a      	str	r2, [r3, #8]
 8003852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003854:	463b      	mov	r3, r7
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <MX_TIM3_Init+0x94>)
 800385e:	4a1e      	ldr	r2, [pc, #120]	; (80038d8 <MX_TIM3_Init+0x98>)
 8003860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680;
 8003862:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <MX_TIM3_Init+0x94>)
 8003864:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8003868:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800386a:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <MX_TIM3_Init+0x94>)
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003870:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <MX_TIM3_Init+0x94>)
 8003872:	2264      	movs	r2, #100	; 0x64
 8003874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003876:	4b17      	ldr	r3, [pc, #92]	; (80038d4 <MX_TIM3_Init+0x94>)
 8003878:	2200      	movs	r2, #0
 800387a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800387c:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <MX_TIM3_Init+0x94>)
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003882:	4814      	ldr	r0, [pc, #80]	; (80038d4 <MX_TIM3_Init+0x94>)
 8003884:	f006 fd74 	bl	800a370 <HAL_TIM_Base_Init>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800388e:	f000 f9ed 	bl	8003c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003898:	f107 0308 	add.w	r3, r7, #8
 800389c:	4619      	mov	r1, r3
 800389e:	480d      	ldr	r0, [pc, #52]	; (80038d4 <MX_TIM3_Init+0x94>)
 80038a0:	f006 ff2e 	bl	800a700 <HAL_TIM_ConfigClockSource>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80038aa:	f000 f9df 	bl	8003c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038b6:	463b      	mov	r3, r7
 80038b8:	4619      	mov	r1, r3
 80038ba:	4806      	ldr	r0, [pc, #24]	; (80038d4 <MX_TIM3_Init+0x94>)
 80038bc:	f007 f94a 	bl	800ab54 <HAL_TIMEx_MasterConfigSynchronization>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80038c6:	f000 f9d1 	bl	8003c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038ca:	bf00      	nop
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	2000063c 	.word	0x2000063c
 80038d8:	40000400 	.word	0x40000400

080038dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038e2:	f107 0308 	add.w	r3, r7, #8
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f0:	463b      	mov	r3, r7
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <MX_TIM4_Init+0x94>)
 80038fa:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <MX_TIM4_Init+0x98>)
 80038fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4200;
 80038fe:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <MX_TIM4_Init+0x94>)
 8003900:	f241 0268 	movw	r2, #4200	; 0x1068
 8003904:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <MX_TIM4_Init+0x94>)
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800390c:	4b18      	ldr	r3, [pc, #96]	; (8003970 <MX_TIM4_Init+0x94>)
 800390e:	2264      	movs	r2, #100	; 0x64
 8003910:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003912:	4b17      	ldr	r3, [pc, #92]	; (8003970 <MX_TIM4_Init+0x94>)
 8003914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003918:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800391a:	4b15      	ldr	r3, [pc, #84]	; (8003970 <MX_TIM4_Init+0x94>)
 800391c:	2280      	movs	r2, #128	; 0x80
 800391e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003920:	4813      	ldr	r0, [pc, #76]	; (8003970 <MX_TIM4_Init+0x94>)
 8003922:	f006 fd25 	bl	800a370 <HAL_TIM_Base_Init>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800392c:	f000 f99e 	bl	8003c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003934:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003936:	f107 0308 	add.w	r3, r7, #8
 800393a:	4619      	mov	r1, r3
 800393c:	480c      	ldr	r0, [pc, #48]	; (8003970 <MX_TIM4_Init+0x94>)
 800393e:	f006 fedf 	bl	800a700 <HAL_TIM_ConfigClockSource>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003948:	f000 f990 	bl	8003c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800394c:	2300      	movs	r3, #0
 800394e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003950:	2300      	movs	r3, #0
 8003952:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003954:	463b      	mov	r3, r7
 8003956:	4619      	mov	r1, r3
 8003958:	4805      	ldr	r0, [pc, #20]	; (8003970 <MX_TIM4_Init+0x94>)
 800395a:	f007 f8fb 	bl	800ab54 <HAL_TIMEx_MasterConfigSynchronization>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003964:	f000 f982 	bl	8003c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003968:	bf00      	nop
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20000684 	.word	0x20000684
 8003974:	40000800 	.word	0x40000800

08003978 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800397e:	463b      	mov	r3, r7
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <MX_TIM6_Init+0x64>)
 8003988:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <MX_TIM6_Init+0x68>)
 800398a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1680;
 800398c:	4b13      	ldr	r3, [pc, #76]	; (80039dc <MX_TIM6_Init+0x64>)
 800398e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8003992:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003994:	4b11      	ldr	r3, [pc, #68]	; (80039dc <MX_TIM6_Init+0x64>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <MX_TIM6_Init+0x64>)
 800399c:	2264      	movs	r2, #100	; 0x64
 800399e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <MX_TIM6_Init+0x64>)
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80039a6:	480d      	ldr	r0, [pc, #52]	; (80039dc <MX_TIM6_Init+0x64>)
 80039a8:	f006 fce2 	bl	800a370 <HAL_TIM_Base_Init>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80039b2:	f000 f95b 	bl	8003c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80039be:	463b      	mov	r3, r7
 80039c0:	4619      	mov	r1, r3
 80039c2:	4806      	ldr	r0, [pc, #24]	; (80039dc <MX_TIM6_Init+0x64>)
 80039c4:	f007 f8c6 	bl	800ab54 <HAL_TIMEx_MasterConfigSynchronization>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80039ce:	f000 f94d 	bl	8003c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200006cc 	.word	0x200006cc
 80039e0:	40001000 	.word	0x40001000

080039e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08c      	sub	sp, #48	; 0x30
 80039e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ea:	f107 031c 	add.w	r3, r7, #28
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	4b7d      	ldr	r3, [pc, #500]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	4a7c      	ldr	r2, [pc, #496]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a04:	f043 0310 	orr.w	r3, r3, #16
 8003a08:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0a:	4b7a      	ldr	r3, [pc, #488]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	4b76      	ldr	r3, [pc, #472]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	4a75      	ldr	r2, [pc, #468]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a24:	6313      	str	r3, [r2, #48]	; 0x30
 8003a26:	4b73      	ldr	r3, [pc, #460]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4a6e      	ldr	r2, [pc, #440]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6313      	str	r3, [r2, #48]	; 0x30
 8003a42:	4b6c      	ldr	r3, [pc, #432]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	4b68      	ldr	r3, [pc, #416]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	4a67      	ldr	r2, [pc, #412]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5e:	4b65      	ldr	r3, [pc, #404]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a60      	ldr	r2, [pc, #384]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a74:	f043 0308 	orr.w	r3, r3, #8
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7a:	4b5e      	ldr	r3, [pc, #376]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	4b5a      	ldr	r3, [pc, #360]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	4a59      	ldr	r2, [pc, #356]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a90:	f043 0302 	orr.w	r3, r3, #2
 8003a94:	6313      	str	r3, [r2, #48]	; 0x30
 8003a96:	4b57      	ldr	r3, [pc, #348]	; (8003bf4 <MX_GPIO_Init+0x210>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|nWakeUp_Pin, GPIO_PIN_RESET);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f44f 7184 	mov.w	r1, #264	; 0x108
 8003aa8:	4853      	ldr	r0, [pc, #332]	; (8003bf8 <MX_GPIO_Init+0x214>)
 8003aaa:	f001 fb0b 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, GPIO_PIN_RESET);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2120      	movs	r1, #32
 8003ab2:	4852      	ldr	r0, [pc, #328]	; (8003bfc <MX_GPIO_Init+0x218>)
 8003ab4:	f001 fb06 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, nRst_Pin|nClr_Pin|nCS_Pin, GPIO_PIN_SET);
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8003abe:	484e      	ldr	r0, [pc, #312]	; (8003bf8 <MX_GPIO_Init+0x214>)
 8003ac0:	f001 fb00 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLDAC_GPIO_Port, nLDAC_Pin, GPIO_PIN_SET);
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003aca:	484d      	ldr	r0, [pc, #308]	; (8003c00 <MX_GPIO_Init+0x21c>)
 8003acc:	f001 fafa 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	484a      	ldr	r0, [pc, #296]	; (8003c00 <MX_GPIO_Init+0x21c>)
 8003ad6:	f001 faf5 	bl	80050c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ada:	2308      	movs	r3, #8
 8003adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003aea:	f107 031c 	add.w	r3, r7, #28
 8003aee:	4619      	mov	r1, r3
 8003af0:	4841      	ldr	r0, [pc, #260]	; (8003bf8 <MX_GPIO_Init+0x214>)
 8003af2:	f001 f93b 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003af6:	2303      	movs	r3, #3
 8003af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afa:	2302      	movs	r3, #2
 8003afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b02:	2303      	movs	r3, #3
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b06:	2308      	movs	r3, #8
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0a:	f107 031c 	add.w	r3, r7, #28
 8003b0e:	4619      	mov	r1, r3
 8003b10:	483c      	ldr	r0, [pc, #240]	; (8003c04 <MX_GPIO_Init+0x220>)
 8003b12:	f001 f92b 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b16:	23f0      	movs	r3, #240	; 0xf0
 8003b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b22:	2303      	movs	r3, #3
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b26:	2305      	movs	r3, #5
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b2a:	f107 031c 	add.w	r3, r7, #28
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4834      	ldr	r0, [pc, #208]	; (8003c04 <MX_GPIO_Init+0x220>)
 8003b32:	f001 f91b 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Pin */
  GPIO_InitStruct.Pin = Heater_Pin;
 8003b36:	2320      	movs	r3, #32
 8003b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b42:	2300      	movs	r3, #0
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Heater_GPIO_Port, &GPIO_InitStruct);
 8003b46:	f107 031c 	add.w	r3, r7, #28
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	482b      	ldr	r0, [pc, #172]	; (8003bfc <MX_GPIO_Init+0x218>)
 8003b4e:	f001 f90d 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : nWakeUp_Pin nRst_Pin nClr_Pin nCS_Pin */
  GPIO_InitStruct.Pin = nWakeUp_Pin|nRst_Pin|nClr_Pin|nCS_Pin;
 8003b52:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b60:	2302      	movs	r3, #2
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b64:	f107 031c 	add.w	r3, r7, #28
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4823      	ldr	r0, [pc, #140]	; (8003bf8 <MX_GPIO_Init+0x214>)
 8003b6c:	f001 f8fe 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : nLDAC_Pin */
  GPIO_InitStruct.Pin = nLDAC_Pin;
 8003b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b76:	2301      	movs	r3, #1
 8003b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nLDAC_GPIO_Port, &GPIO_InitStruct);
 8003b82:	f107 031c 	add.w	r3, r7, #28
 8003b86:	4619      	mov	r1, r3
 8003b88:	481d      	ldr	r0, [pc, #116]	; (8003c00 <MX_GPIO_Init+0x21c>)
 8003b8a:	f001 f8ef 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003b8e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003b92:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b94:	2302      	movs	r3, #2
 8003b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ba4:	f107 031c 	add.w	r3, r7, #28
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4814      	ldr	r0, [pc, #80]	; (8003bfc <MX_GPIO_Init+0x218>)
 8003bac:	f001 f8de 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bc0:	f107 031c 	add.w	r3, r7, #28
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	480e      	ldr	r0, [pc, #56]	; (8003c00 <MX_GPIO_Init+0x21c>)
 8003bc8:	f001 f8d0 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003bcc:	2304      	movs	r3, #4
 8003bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003bdc:	230c      	movs	r3, #12
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003be0:	f107 031c 	add.w	r3, r7, #28
 8003be4:	4619      	mov	r1, r3
 8003be6:	4806      	ldr	r0, [pc, #24]	; (8003c00 <MX_GPIO_Init+0x21c>)
 8003be8:	f001 f8c0 	bl	8004d6c <HAL_GPIO_Init>

}
 8003bec:	bf00      	nop
 8003bee:	3730      	adds	r7, #48	; 0x30
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40020800 	.word	0x40020800
 8003c00:	40020c00 	.word	0x40020c00
 8003c04:	40020000 	.word	0x40020000

08003c08 <_write>:

/* This allows printf to write to the debugger and USB */
/* USB needs #include "usbd_cdc_if.h" */
/* ITM Stimulus port 0 must be enabled in your trace settings */
int _write(int file, char *ptr, int len)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  int i, res;

  for (i=0;i<20; i++)
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	e00d      	b.n	8003c36 <_write+0x2e>
  {
    res = CDC_Transmit_FS((uint8_t*) ptr, len);  // USB out
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	4619      	mov	r1, r3
 8003c20:	68b8      	ldr	r0, [r7, #8]
 8003c22:	f00a fd07 	bl	800e634 <CDC_Transmit_FS>
 8003c26:	4603      	mov	r3, r0
 8003c28:	617b      	str	r3, [r7, #20]
    if (res == USBD_OK)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d006      	beq.n	8003c3e <_write+0x36>
  for (i=0;i<20; i++)
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	3301      	adds	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	2b13      	cmp	r3, #19
 8003c3a:	ddee      	ble.n	8003c1a <_write+0x12>
 8003c3c:	e000      	b.n	8003c40 <_write+0x38>
      break;
 8003c3e:	bf00      	nop
  }

  for (int i = 0; i < len; i++)
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	e009      	b.n	8003c5a <_write+0x52>
    ITM_SendChar((*ptr++));              // debugger out
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	60ba      	str	r2, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fa52 	bl	80030f8 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	3301      	adds	r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	dbf1      	blt.n	8003c46 <_write+0x3e>
  return len;
 8003c62:	687b      	ldr	r3, [r7, #4]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c70:	b672      	cpsid	i
}
 8003c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c74:	e7fe      	b.n	8003c74 <Error_Handler+0x8>
	...

08003c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <HAL_MspInit+0x4c>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	4a0f      	ldr	r2, [pc, #60]	; (8003cc4 <HAL_MspInit+0x4c>)
 8003c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <HAL_MspInit+0x4c>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c96:	607b      	str	r3, [r7, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <HAL_MspInit+0x4c>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <HAL_MspInit+0x4c>)
 8003ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_MspInit+0x4c>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800

08003cc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	; 0x28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <HAL_ADC_MspInit+0x7c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d127      	bne.n	8003d3a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <HAL_ADC_MspInit+0x80>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <HAL_ADC_MspInit+0x80>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cfa:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <HAL_ADC_MspInit+0x80>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <HAL_ADC_MspInit+0x80>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	4a0e      	ldr	r2, [pc, #56]	; (8003d48 <HAL_ADC_MspInit+0x80>)
 8003d10:	f043 0304 	orr.w	r3, r3, #4
 8003d14:	6313      	str	r3, [r2, #48]	; 0x30
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <HAL_ADC_MspInit+0x80>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003d22:	2310      	movs	r3, #16
 8003d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d26:	2303      	movs	r3, #3
 8003d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d2e:	f107 0314 	add.w	r3, r7, #20
 8003d32:	4619      	mov	r1, r3
 8003d34:	4805      	ldr	r0, [pc, #20]	; (8003d4c <HAL_ADC_MspInit+0x84>)
 8003d36:	f001 f819 	bl	8004d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003d3a:	bf00      	nop
 8003d3c:	3728      	adds	r7, #40	; 0x28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40012000 	.word	0x40012000
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40020800 	.word	0x40020800

08003d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	; 0x28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d58:	f107 0314 	add.w	r3, r7, #20
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a21      	ldr	r2, [pc, #132]	; (8003df4 <HAL_I2C_MspInit+0xa4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d13b      	bne.n	8003dea <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <HAL_I2C_MspInit+0xa8>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <HAL_I2C_MspInit+0xa8>)
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	6313      	str	r3, [r2, #48]	; 0x30
 8003d82:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <HAL_I2C_MspInit+0xa8>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d8e:	23c0      	movs	r3, #192	; 0xc0
 8003d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d92:	2312      	movs	r3, #18
 8003d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d9e:	2304      	movs	r3, #4
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da2:	f107 0314 	add.w	r3, r7, #20
 8003da6:	4619      	mov	r1, r3
 8003da8:	4814      	ldr	r0, [pc, #80]	; (8003dfc <HAL_I2C_MspInit+0xac>)
 8003daa:	f000 ffdf 	bl	8004d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <HAL_I2C_MspInit+0xa8>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	4a10      	ldr	r2, [pc, #64]	; (8003df8 <HAL_I2C_MspInit+0xa8>)
 8003db8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <HAL_I2C_MspInit+0xa8>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2100      	movs	r1, #0
 8003dce:	201f      	movs	r0, #31
 8003dd0:	f000 ff65 	bl	8004c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003dd4:	201f      	movs	r0, #31
 8003dd6:	f000 ff7e 	bl	8004cd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2100      	movs	r1, #0
 8003dde:	2020      	movs	r0, #32
 8003de0:	f000 ff5d 	bl	8004c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003de4:	2020      	movs	r0, #32
 8003de6:	f000 ff76 	bl	8004cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003dea:	bf00      	nop
 8003dec:	3728      	adds	r7, #40	; 0x28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40005400 	.word	0x40005400
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40020400 	.word	0x40020400

08003e00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	; 0x28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e08:	f107 0314 	add.w	r3, r7, #20
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <HAL_SPI_MspInit+0x94>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d134      	bne.n	8003e8c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	4b1c      	ldr	r3, [pc, #112]	; (8003e98 <HAL_SPI_MspInit+0x98>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <HAL_SPI_MspInit+0x98>)
 8003e2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e30:	6453      	str	r3, [r2, #68]	; 0x44
 8003e32:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_SPI_MspInit+0x98>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <HAL_SPI_MspInit+0x98>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <HAL_SPI_MspInit+0x98>)
 8003e48:	f043 0310 	orr.w	r3, r3, #16
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_SPI_MspInit+0x98>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003e5a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e60:	2302      	movs	r3, #2
 8003e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003e6c:	2305      	movs	r3, #5
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e70:	f107 0314 	add.w	r3, r7, #20
 8003e74:	4619      	mov	r1, r3
 8003e76:	4809      	ldr	r0, [pc, #36]	; (8003e9c <HAL_SPI_MspInit+0x9c>)
 8003e78:	f000 ff78 	bl	8004d6c <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2100      	movs	r1, #0
 8003e80:	2054      	movs	r0, #84	; 0x54
 8003e82:	f000 ff0c 	bl	8004c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8003e86:	2054      	movs	r0, #84	; 0x54
 8003e88:	f000 ff25 	bl	8004cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003e8c:	bf00      	nop
 8003e8e:	3728      	adds	r7, #40	; 0x28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40013400 	.word	0x40013400
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d116      	bne.n	8003ee0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	4b32      	ldr	r3, [pc, #200]	; (8003f80 <HAL_TIM_Base_MspInit+0xe0>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	4a31      	ldr	r2, [pc, #196]	; (8003f80 <HAL_TIM_Base_MspInit+0xe0>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec2:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <HAL_TIM_Base_MspInit+0xe0>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	201c      	movs	r0, #28
 8003ed4:	f000 fee3 	bl	8004c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ed8:	201c      	movs	r0, #28
 8003eda:	f000 fefc 	bl	8004cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003ede:	e04a      	b.n	8003f76 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a27      	ldr	r2, [pc, #156]	; (8003f84 <HAL_TIM_Base_MspInit+0xe4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d10e      	bne.n	8003f08 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <HAL_TIM_Base_MspInit+0xe0>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <HAL_TIM_Base_MspInit+0xe0>)
 8003ef4:	f043 0302 	orr.w	r3, r3, #2
 8003ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8003efa:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <HAL_TIM_Base_MspInit+0xe0>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	693b      	ldr	r3, [r7, #16]
}
 8003f06:	e036      	b.n	8003f76 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1e      	ldr	r2, [pc, #120]	; (8003f88 <HAL_TIM_Base_MspInit+0xe8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d116      	bne.n	8003f40 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <HAL_TIM_Base_MspInit+0xe0>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <HAL_TIM_Base_MspInit+0xe0>)
 8003f1c:	f043 0304 	orr.w	r3, r3, #4
 8003f20:	6413      	str	r3, [r2, #64]	; 0x40
 8003f22:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <HAL_TIM_Base_MspInit+0xe0>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2100      	movs	r1, #0
 8003f32:	201e      	movs	r0, #30
 8003f34:	f000 feb3 	bl	8004c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003f38:	201e      	movs	r0, #30
 8003f3a:	f000 fecc 	bl	8004cd6 <HAL_NVIC_EnableIRQ>
}
 8003f3e:	e01a      	b.n	8003f76 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a11      	ldr	r2, [pc, #68]	; (8003f8c <HAL_TIM_Base_MspInit+0xec>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d115      	bne.n	8003f76 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <HAL_TIM_Base_MspInit+0xe0>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <HAL_TIM_Base_MspInit+0xe0>)
 8003f54:	f043 0310 	orr.w	r3, r3, #16
 8003f58:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_TIM_Base_MspInit+0xe0>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003f66:	2200      	movs	r2, #0
 8003f68:	2100      	movs	r1, #0
 8003f6a:	2036      	movs	r0, #54	; 0x36
 8003f6c:	f000 fe97 	bl	8004c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f70:	2036      	movs	r0, #54	; 0x36
 8003f72:	f000 feb0 	bl	8004cd6 <HAL_NVIC_EnableIRQ>
}
 8003f76:	bf00      	nop
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40001000 	.word	0x40001000

08003f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f94:	e7fe      	b.n	8003f94 <NMI_Handler+0x4>

08003f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f96:	b480      	push	{r7}
 8003f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f9a:	e7fe      	b.n	8003f9a <HardFault_Handler+0x4>

08003f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fa0:	e7fe      	b.n	8003fa0 <MemManage_Handler+0x4>

08003fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fa6:	e7fe      	b.n	8003fa6 <BusFault_Handler+0x4>

08003fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fac:	e7fe      	b.n	8003fac <UsageFault_Handler+0x4>

08003fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fdc:	f000 face 	bl	800457c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003fe8:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <TIM2_IRQHandler+0x10>)
 8003fea:	f006 fa81 	bl	800a4f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	200005f4 	.word	0x200005f4

08003ff8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <TIM4_IRQHandler+0x10>)
 8003ffe:	f006 fa77 	bl	800a4f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000684 	.word	0x20000684

0800400c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004010:	4802      	ldr	r0, [pc, #8]	; (800401c <I2C1_EV_IRQHandler+0x10>)
 8004012:	f001 fcd9 	bl	80059c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000548 	.word	0x20000548

08004020 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004024:	4802      	ldr	r0, [pc, #8]	; (8004030 <I2C1_ER_IRQHandler+0x10>)
 8004026:	f001 fe40 	bl	8005caa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000548 	.word	0x20000548

08004034 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <TIM6_DAC_IRQHandler+0x10>)
 800403a:	f006 fa59 	bl	800a4f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	200006cc 	.word	0x200006cc

08004048 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <OTG_FS_IRQHandler+0x10>)
 800404e:	f003 fe8e 	bl	8007d6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20002aa4 	.word	0x20002aa4

0800405c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8004060:	4802      	ldr	r0, [pc, #8]	; (800406c <SPI4_IRQHandler+0x10>)
 8004062:	f005 ff9d 	bl	8009fa0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	2000059c 	.word	0x2000059c

08004070 <StringFIFOInit>:

#include <stringfifo.h>
#include "string.h"

void StringFIFOInit(struct sStringFIFO* fifo)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint16_t i;
  fifo->head = 0;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  fifo->tail = 0;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 8004088:	2300      	movs	r3, #0
 800408a:	81fb      	strh	r3, [r7, #14]
 800408c:	e006      	b.n	800409c <StringFIFOInit+0x2c>
    fifo->buffer[i]=0;
 800408e:	89fb      	ldrh	r3, [r7, #14]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	2100      	movs	r1, #0
 8004094:	54d1      	strb	r1, [r2, r3]
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 8004096:	89fb      	ldrh	r3, [r7, #14]
 8004098:	3301      	adds	r3, #1
 800409a:	81fb      	strh	r3, [r7, #14]
 800409c:	89fb      	ldrh	r3, [r7, #14]
 800409e:	2bf9      	cmp	r3, #249	; 0xf9
 80040a0:	d9f5      	bls.n	800408e <StringFIFOInit+0x1e>
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <StringFIFOUsed>:

uint16_t StringFIFOUsed(struct sStringFIFO* fifo)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  int16_t used = fifo->tail - fifo->head;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80040be:	b29a      	uxth	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	81fb      	strh	r3, [r7, #14]
  if (used < 0)
 80040ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	da03      	bge.n	80040de <StringFIFOUsed+0x2e>
    used += FIFO_BUFFER_SIZE;
 80040d6:	89fb      	ldrh	r3, [r7, #14]
 80040d8:	33fa      	adds	r3, #250	; 0xfa
 80040da:	b29b      	uxth	r3, r3
 80040dc:	81fb      	strh	r3, [r7, #14]
  return (uint16_t) used;
 80040de:	89fb      	ldrh	r3, [r7, #14]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <StringFIFOAvailable>:

uint16_t StringFIFOAvailable(struct sStringFIFO* fifo)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint16_t used = StringFIFOUsed(fifo);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ffdb 	bl	80040b0 <StringFIFOUsed>
 80040fa:	4603      	mov	r3, r0
 80040fc:	81fb      	strh	r3, [r7, #14]
  int16_t available = FIFO_BUFFER_SIZE - used - 1; // don't use the last byte, otherwise we won't know that we're full
 80040fe:	89fb      	ldrh	r3, [r7, #14]
 8004100:	f1c3 03f9 	rsb	r3, r3, #249	; 0xf9
 8004104:	b29b      	uxth	r3, r3
 8004106:	81bb      	strh	r3, [r7, #12]
  return available;
 8004108:	89bb      	ldrh	r3, [r7, #12]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <StringFIFOAdd>:

uint8_t StringFIFOAdd(struct sStringFIFO* fifo, uint8_t* item, size_t size)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  int16_t available = StringFIFOAvailable(fifo);
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f7ff ffe3 	bl	80040ec <StringFIFOAvailable>
 8004126:	4603      	mov	r3, r0
 8004128:	82fb      	strh	r3, [r7, #22]

  if (available == 0)
 800412a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <StringFIFOAdd+0x28>
  {
    printf("Fifo full\n");
 8004132:	4817      	ldr	r0, [pc, #92]	; (8004190 <StringFIFOAdd+0x7c>)
 8004134:	f00b fe34 	bl	800fda0 <puts>
    return 1;
 8004138:	2301      	movs	r3, #1
 800413a:	e025      	b.n	8004188 <StringFIFOAdd+0x74>
  }

  if (size > available)
 800413c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	429a      	cmp	r2, r3
 8004144:	d902      	bls.n	800414c <StringFIFOAdd+0x38>
    size = available;
 8004146:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800414a:	607b      	str	r3, [r7, #4]

  memcpy(&fifo->buffer[fifo->tail], item, size);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004152:	461a      	mov	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	4618      	mov	r0, r3
 800415e:	f00a feef 	bl	800ef40 <memcpy>
  fifo->tail = (fifo->tail + size) % FIFO_BUFFER_SIZE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004168:	461a      	mov	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	441a      	add	r2, r3
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <StringFIFOAdd+0x80>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	21fa      	movs	r1, #250	; 0xfa
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  return 0;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	08014e68 	.word	0x08014e68
 8004194:	10624dd3 	.word	0x10624dd3

08004198 <StringFIFORemove>:

uint8_t StringFIFORemove(struct sStringFIFO* fifo, uint8_t* string)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint16_t i, pos;
  uint16_t used = StringFIFOUsed(fifo);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff ff84 	bl	80040b0 <StringFIFOUsed>
 80041a8:	4603      	mov	r3, r0
 80041aa:	81fb      	strh	r3, [r7, #14]
  uint16_t h_length, t_length;
  int16_t len;

  if (fifo->head == fifo->tail)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 20fa 	ldrb.w	r2, [r3, #250]	; 0xfa
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d101      	bne.n	80041c0 <StringFIFORemove+0x28>
  {
	  //printf("Empty fifo.\n");
    return 3;
 80041bc:	2303      	movs	r3, #3
 80041be:	e09e      	b.n	80042fe <StringFIFORemove+0x166>
  }

  for (i=0; i<used; i++)
 80041c0:	2300      	movs	r3, #0
 80041c2:	82fb      	strh	r3, [r7, #22]
 80041c4:	e095      	b.n	80042f2 <StringFIFORemove+0x15a>
  {
    pos = (fifo->head + i) % FIFO_BUFFER_SIZE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80041cc:	461a      	mov	r2, r3
 80041ce:	8afb      	ldrh	r3, [r7, #22]
 80041d0:	4413      	add	r3, r2
 80041d2:	4a4d      	ldr	r2, [pc, #308]	; (8004308 <StringFIFORemove+0x170>)
 80041d4:	fb82 1203 	smull	r1, r2, r2, r3
 80041d8:	1111      	asrs	r1, r2, #4
 80041da:	17da      	asrs	r2, r3, #31
 80041dc:	1a8a      	subs	r2, r1, r2
 80041de:	21fa      	movs	r1, #250	; 0xfa
 80041e0:	fb01 f202 	mul.w	r2, r1, r2
 80041e4:	1a9a      	subs	r2, r3, r2
 80041e6:	4613      	mov	r3, r2
 80041e8:	81bb      	strh	r3, [r7, #12]
    if ((fifo->buffer[pos] == '\n') || (fifo->buffer[pos] == '\r'))
 80041ea:	89bb      	ldrh	r3, [r7, #12]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	5cd3      	ldrb	r3, [r2, r3]
 80041f0:	2b0a      	cmp	r3, #10
 80041f2:	d004      	beq.n	80041fe <StringFIFORemove+0x66>
 80041f4:	89bb      	ldrh	r3, [r7, #12]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	5cd3      	ldrb	r3, [r2, r3]
 80041fa:	2b0d      	cmp	r3, #13
 80041fc:	d176      	bne.n	80042ec <StringFIFORemove+0x154>
    {
      if (i == 0)
 80041fe:	8afb      	ldrh	r3, [r7, #22]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d116      	bne.n	8004232 <StringFIFORemove+0x9a>
      {
        fifo->head = (fifo->head + 1) % FIFO_BUFFER_SIZE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800420a:	3301      	adds	r3, #1
 800420c:	4a3e      	ldr	r2, [pc, #248]	; (8004308 <StringFIFORemove+0x170>)
 800420e:	fb82 1203 	smull	r1, r2, r2, r3
 8004212:	1111      	asrs	r1, r2, #4
 8004214:	17da      	asrs	r2, r3, #31
 8004216:	1a8a      	subs	r2, r1, r2
 8004218:	21fa      	movs	r1, #250	; 0xfa
 800421a:	fb01 f202 	mul.w	r2, r1, r2
 800421e:	1a9a      	subs	r2, r3, r2
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        string[0] = 0;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]
//        printf("Zero length string in fifo.\n");
        return 1;
 800422e:	2301      	movs	r3, #1
 8004230:	e065      	b.n	80042fe <StringFIFORemove+0x166>
      }
      len = (pos - fifo->head);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004238:	b29b      	uxth	r3, r3
 800423a:	89ba      	ldrh	r2, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	b29b      	uxth	r3, r3
 8004240:	823b      	strh	r3, [r7, #16]
      if (len < 0)
 8004242:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	da03      	bge.n	8004252 <StringFIFORemove+0xba>
        len += FIFO_BUFFER_SIZE;
 800424a:	8a3b      	ldrh	r3, [r7, #16]
 800424c:	33fa      	adds	r3, #250	; 0xfa
 800424e:	b29b      	uxth	r3, r3
 8004250:	823b      	strh	r3, [r7, #16]
      if (len > (FIFO_BUFFER_SIZE - fifo->head))
 8004252:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800425c:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8004260:	429a      	cmp	r2, r3
 8004262:	dd0b      	ble.n	800427c <StringFIFORemove+0xe4>
      {
        h_length = FIFO_BUFFER_SIZE - fifo->head;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800426a:	b29b      	uxth	r3, r3
 800426c:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8004270:	82bb      	strh	r3, [r7, #20]
        t_length = len - h_length;
 8004272:	8a3a      	ldrh	r2, [r7, #16]
 8004274:	8abb      	ldrh	r3, [r7, #20]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	827b      	strh	r3, [r7, #18]
 800427a:	e003      	b.n	8004284 <StringFIFORemove+0xec>
      }
      else
      {
        h_length = len;
 800427c:	8a3b      	ldrh	r3, [r7, #16]
 800427e:	82bb      	strh	r3, [r7, #20]
        t_length = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	827b      	strh	r3, [r7, #18]
      }
      memcpy(string, &fifo->buffer[fifo->head], h_length);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800428a:	461a      	mov	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4413      	add	r3, r2
 8004290:	8aba      	ldrh	r2, [r7, #20]
 8004292:	4619      	mov	r1, r3
 8004294:	6838      	ldr	r0, [r7, #0]
 8004296:	f00a fe53 	bl	800ef40 <memcpy>
      if (t_length)
 800429a:	8a7b      	ldrh	r3, [r7, #18]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <StringFIFORemove+0x118>
        memcpy(&string[h_length], fifo->buffer, t_length);
 80042a0:	8abb      	ldrh	r3, [r7, #20]
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4413      	add	r3, r2
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	8a7a      	ldrh	r2, [r7, #18]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f00a fe48 	bl	800ef40 <memcpy>
      fifo->head = (fifo->head + len + 1) % FIFO_BUFFER_SIZE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80042b6:	461a      	mov	r2, r3
 80042b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042bc:	4413      	add	r3, r2
 80042be:	3301      	adds	r3, #1
 80042c0:	4a11      	ldr	r2, [pc, #68]	; (8004308 <StringFIFORemove+0x170>)
 80042c2:	fb82 1203 	smull	r1, r2, r2, r3
 80042c6:	1111      	asrs	r1, r2, #4
 80042c8:	17da      	asrs	r2, r3, #31
 80042ca:	1a8a      	subs	r2, r1, r2
 80042cc:	21fa      	movs	r1, #250	; 0xfa
 80042ce:	fb01 f202 	mul.w	r2, r1, r2
 80042d2:	1a9a      	subs	r2, r3, r2
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      string[len] = 0;
 80042dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	4413      	add	r3, r2
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
      return 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e008      	b.n	80042fe <StringFIFORemove+0x166>
  for (i=0; i<used; i++)
 80042ec:	8afb      	ldrh	r3, [r7, #22]
 80042ee:	3301      	adds	r3, #1
 80042f0:	82fb      	strh	r3, [r7, #22]
 80042f2:	8afa      	ldrh	r2, [r7, #22]
 80042f4:	89fb      	ldrh	r3, [r7, #14]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	f4ff af65 	bcc.w	80041c6 <StringFIFORemove+0x2e>
    }
  }
//  printf("Fifo has no terminator\n");
  return 2;
 80042fc:	2302      	movs	r3, #2
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	10624dd3 	.word	0x10624dd3

0800430c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
	return 1;
 8004310:	2301      	movs	r3, #1
}
 8004312:	4618      	mov	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <_kill>:

int _kill(int pid, int sig)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004326:	f00a fde1 	bl	800eeec <__errno>
 800432a:	4603      	mov	r3, r0
 800432c:	2216      	movs	r2, #22
 800432e:	601a      	str	r2, [r3, #0]
	return -1;
 8004330:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <_exit>:

void _exit (int status)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004344:	f04f 31ff 	mov.w	r1, #4294967295
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ffe7 	bl	800431c <_kill>
	while (1) {}		/* Make sure we hang here */
 800434e:	e7fe      	b.n	800434e <_exit+0x12>

08004350 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	e00a      	b.n	8004378 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004362:	f3af 8000 	nop.w
 8004366:	4601      	mov	r1, r0
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	60ba      	str	r2, [r7, #8]
 800436e:	b2ca      	uxtb	r2, r1
 8004370:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	3301      	adds	r3, #1
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	dbf0      	blt.n	8004362 <_read+0x12>
	}

return len;
 8004380:	687b      	ldr	r3, [r7, #4]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <_close>:
	}
	return len;
}

int _close(int file)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
	return -1;
 8004392:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043b2:	605a      	str	r2, [r3, #4]
	return 0;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <_isatty>:

int _isatty(int file)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
	return 1;
 80043ca:	2301      	movs	r3, #1
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
	return 0;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043fc:	4a14      	ldr	r2, [pc, #80]	; (8004450 <_sbrk+0x5c>)
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <_sbrk+0x60>)
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <_sbrk+0x64>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004410:	4b11      	ldr	r3, [pc, #68]	; (8004458 <_sbrk+0x64>)
 8004412:	4a12      	ldr	r2, [pc, #72]	; (800445c <_sbrk+0x68>)
 8004414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <_sbrk+0x64>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4413      	add	r3, r2
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	429a      	cmp	r2, r3
 8004422:	d207      	bcs.n	8004434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004424:	f00a fd62 	bl	800eeec <__errno>
 8004428:	4603      	mov	r3, r0
 800442a:	220c      	movs	r2, #12
 800442c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800442e:	f04f 33ff 	mov.w	r3, #4294967295
 8004432:	e009      	b.n	8004448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004434:	4b08      	ldr	r3, [pc, #32]	; (8004458 <_sbrk+0x64>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <_sbrk+0x64>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	4a05      	ldr	r2, [pc, #20]	; (8004458 <_sbrk+0x64>)
 8004444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004446:	68fb      	ldr	r3, [r7, #12]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20030000 	.word	0x20030000
 8004454:	00000400 	.word	0x00000400
 8004458:	20001dec 	.word	0x20001dec
 800445c:	200031e0 	.word	0x200031e0

08004460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <SystemInit+0x20>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	4a05      	ldr	r2, [pc, #20]	; (8004480 <SystemInit+0x20>)
 800446c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004488:	480d      	ldr	r0, [pc, #52]	; (80044c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800448a:	490e      	ldr	r1, [pc, #56]	; (80044c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800448c:	4a0e      	ldr	r2, [pc, #56]	; (80044c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800448e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004490:	e002      	b.n	8004498 <LoopCopyDataInit>

08004492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004496:	3304      	adds	r3, #4

08004498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800449a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800449c:	d3f9      	bcc.n	8004492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800449e:	4a0b      	ldr	r2, [pc, #44]	; (80044cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044a0:	4c0b      	ldr	r4, [pc, #44]	; (80044d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044a4:	e001      	b.n	80044aa <LoopFillZerobss>

080044a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044a8:	3204      	adds	r2, #4

080044aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044ac:	d3fb      	bcc.n	80044a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044ae:	f7ff ffd7 	bl	8004460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044b2:	f00a fd21 	bl	800eef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044b6:	f7fe ff47 	bl	8003348 <main>
  bx  lr    
 80044ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80044bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80044c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044c4:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 80044c8:	080153ac 	.word	0x080153ac
  ldr r2, =_sbss
 80044cc:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 80044d0:	200031e0 	.word	0x200031e0

080044d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044d4:	e7fe      	b.n	80044d4 <ADC_IRQHandler>
	...

080044d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044dc:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <HAL_Init+0x40>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0d      	ldr	r2, [pc, #52]	; (8004518 <HAL_Init+0x40>)
 80044e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_Init+0x40>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <HAL_Init+0x40>)
 80044ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044f4:	4b08      	ldr	r3, [pc, #32]	; (8004518 <HAL_Init+0x40>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a07      	ldr	r2, [pc, #28]	; (8004518 <HAL_Init+0x40>)
 80044fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004500:	2003      	movs	r0, #3
 8004502:	f000 fbc1 	bl	8004c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004506:	200f      	movs	r0, #15
 8004508:	f000 f808 	bl	800451c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800450c:	f7ff fbb4 	bl	8003c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023c00 	.word	0x40023c00

0800451c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004524:	4b12      	ldr	r3, [pc, #72]	; (8004570 <HAL_InitTick+0x54>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_InitTick+0x58>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004532:	fbb3 f3f1 	udiv	r3, r3, r1
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fbd9 	bl	8004cf2 <HAL_SYSTICK_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e00e      	b.n	8004568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b0f      	cmp	r3, #15
 800454e:	d80a      	bhi.n	8004566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004550:	2200      	movs	r2, #0
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	f04f 30ff 	mov.w	r0, #4294967295
 8004558:	f000 fba1 	bl	8004c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800455c:	4a06      	ldr	r2, [pc, #24]	; (8004578 <HAL_InitTick+0x5c>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	e000      	b.n	8004568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000014 	.word	0x20000014
 8004574:	2000001c 	.word	0x2000001c
 8004578:	20000018 	.word	0x20000018

0800457c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <HAL_IncTick+0x20>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_IncTick+0x24>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4413      	add	r3, r2
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <HAL_IncTick+0x24>)
 800458e:	6013      	str	r3, [r2, #0]
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	2000001c 	.word	0x2000001c
 80045a0:	20001df0 	.word	0x20001df0

080045a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return uwTick;
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_GetTick+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20001df0 	.word	0x20001df0

080045bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7ff ffee 	bl	80045a4 <HAL_GetTick>
 80045c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d005      	beq.n	80045e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_Delay+0x44>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045e2:	bf00      	nop
 80045e4:	f7ff ffde 	bl	80045a4 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d8f7      	bhi.n	80045e4 <HAL_Delay+0x28>
  {
  }
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	2000001c 	.word	0x2000001c

08004604 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e033      	b.n	8004682 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff fb50 	bl	8003cc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	d118      	bne.n	8004674 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800464a:	f023 0302 	bic.w	r3, r3, #2
 800464e:	f043 0202 	orr.w	r2, r3, #2
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f94a 	bl	80048f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	f043 0201 	orr.w	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
 8004672:	e001      	b.n	8004678 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x1c>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e113      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x244>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b09      	cmp	r3, #9
 80046b6:	d925      	bls.n	8004704 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68d9      	ldr	r1, [r3, #12]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	4613      	mov	r3, r2
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	4413      	add	r3, r2
 80046cc:	3b1e      	subs	r3, #30
 80046ce:	2207      	movs	r2, #7
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43da      	mvns	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	400a      	ands	r2, r1
 80046dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68d9      	ldr	r1, [r3, #12]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	4618      	mov	r0, r3
 80046f0:	4603      	mov	r3, r0
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	4403      	add	r3, r0
 80046f6:	3b1e      	subs	r3, #30
 80046f8:	409a      	lsls	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	e022      	b.n	800474a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6919      	ldr	r1, [r3, #16]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	4613      	mov	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	2207      	movs	r2, #7
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43da      	mvns	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	400a      	ands	r2, r1
 8004726:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6919      	ldr	r1, [r3, #16]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	b29b      	uxth	r3, r3
 8004738:	4618      	mov	r0, r3
 800473a:	4603      	mov	r3, r0
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4403      	add	r3, r0
 8004740:	409a      	lsls	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b06      	cmp	r3, #6
 8004750:	d824      	bhi.n	800479c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	3b05      	subs	r3, #5
 8004764:	221f      	movs	r2, #31
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43da      	mvns	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	400a      	ands	r2, r1
 8004772:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	4618      	mov	r0, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	3b05      	subs	r3, #5
 800478e:	fa00 f203 	lsl.w	r2, r0, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	635a      	str	r2, [r3, #52]	; 0x34
 800479a:	e04c      	b.n	8004836 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b0c      	cmp	r3, #12
 80047a2:	d824      	bhi.n	80047ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	3b23      	subs	r3, #35	; 0x23
 80047b6:	221f      	movs	r2, #31
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43da      	mvns	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	400a      	ands	r2, r1
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	4618      	mov	r0, r3
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	3b23      	subs	r3, #35	; 0x23
 80047e0:	fa00 f203 	lsl.w	r2, r0, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
 80047ec:	e023      	b.n	8004836 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	3b41      	subs	r3, #65	; 0x41
 8004800:	221f      	movs	r2, #31
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	43da      	mvns	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	400a      	ands	r2, r1
 800480e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	b29b      	uxth	r3, r3
 800481c:	4618      	mov	r0, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	3b41      	subs	r3, #65	; 0x41
 800482a:	fa00 f203 	lsl.w	r2, r0, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004836:	4b29      	ldr	r3, [pc, #164]	; (80048dc <HAL_ADC_ConfigChannel+0x250>)
 8004838:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a28      	ldr	r2, [pc, #160]	; (80048e0 <HAL_ADC_ConfigChannel+0x254>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d10f      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x1d8>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b12      	cmp	r3, #18
 800484a:	d10b      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <HAL_ADC_ConfigChannel+0x254>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d12b      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x23a>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <HAL_ADC_ConfigChannel+0x258>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <HAL_ADC_ConfigChannel+0x1f4>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b11      	cmp	r3, #17
 800487e:	d122      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a11      	ldr	r2, [pc, #68]	; (80048e4 <HAL_ADC_ConfigChannel+0x258>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d111      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048a2:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <HAL_ADC_ConfigChannel+0x25c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a11      	ldr	r2, [pc, #68]	; (80048ec <HAL_ADC_ConfigChannel+0x260>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	0c9a      	lsrs	r2, r3, #18
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048b8:	e002      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	3b01      	subs	r3, #1
 80048be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f9      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	40012300 	.word	0x40012300
 80048e0:	40012000 	.word	0x40012000
 80048e4:	10000012 	.word	0x10000012
 80048e8:	20000014 	.word	0x20000014
 80048ec:	431bde83 	.word	0x431bde83

080048f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048f8:	4b79      	ldr	r3, [pc, #484]	; (8004ae0 <ADC_Init+0x1f0>)
 80048fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	431a      	orrs	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6859      	ldr	r1, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	021a      	lsls	r2, r3, #8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6859      	ldr	r1, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800496a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6899      	ldr	r1, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	4a58      	ldr	r2, [pc, #352]	; (8004ae4 <ADC_Init+0x1f4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d022      	beq.n	80049ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004996:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6899      	ldr	r1, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6899      	ldr	r1, [r3, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	e00f      	b.n	80049ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0202 	bic.w	r2, r2, #2
 80049fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6899      	ldr	r1, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	7e1b      	ldrb	r3, [r3, #24]
 8004a08:	005a      	lsls	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01b      	beq.n	8004a54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6859      	ldr	r1, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	3b01      	subs	r3, #1
 8004a48:	035a      	lsls	r2, r3, #13
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
 8004a52:	e007      	b.n	8004a64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	051a      	lsls	r2, r3, #20
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6899      	ldr	r1, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004aa6:	025a      	lsls	r2, r3, #9
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6899      	ldr	r1, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	029a      	lsls	r2, r3, #10
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	609a      	str	r2, [r3, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	40012300 	.word	0x40012300
 8004ae4:	0f000001 	.word	0x0f000001

08004ae8 <__NVIC_SetPriorityGrouping>:
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <__NVIC_SetPriorityGrouping+0x44>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b04:	4013      	ands	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b1a:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <__NVIC_SetPriorityGrouping+0x44>)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	60d3      	str	r3, [r2, #12]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	e000ed00 	.word	0xe000ed00

08004b30 <__NVIC_GetPriorityGrouping>:
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b34:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <__NVIC_GetPriorityGrouping+0x18>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	0a1b      	lsrs	r3, r3, #8
 8004b3a:	f003 0307 	and.w	r3, r3, #7
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <__NVIC_EnableIRQ>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	db0b      	blt.n	8004b76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	f003 021f 	and.w	r2, r3, #31
 8004b64:	4907      	ldr	r1, [pc, #28]	; (8004b84 <__NVIC_EnableIRQ+0x38>)
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	2001      	movs	r0, #1
 8004b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	e000e100 	.word	0xe000e100

08004b88 <__NVIC_SetPriority>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	db0a      	blt.n	8004bb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	490c      	ldr	r1, [pc, #48]	; (8004bd4 <__NVIC_SetPriority+0x4c>)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	0112      	lsls	r2, r2, #4
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	440b      	add	r3, r1
 8004bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bb0:	e00a      	b.n	8004bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	4908      	ldr	r1, [pc, #32]	; (8004bd8 <__NVIC_SetPriority+0x50>)
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	3b04      	subs	r3, #4
 8004bc0:	0112      	lsls	r2, r2, #4
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	761a      	strb	r2, [r3, #24]
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	e000e100 	.word	0xe000e100
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <NVIC_EncodePriority>:
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b089      	sub	sp, #36	; 0x24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f1c3 0307 	rsb	r3, r3, #7
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	bf28      	it	cs
 8004bfa:	2304      	movcs	r3, #4
 8004bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3304      	adds	r3, #4
 8004c02:	2b06      	cmp	r3, #6
 8004c04:	d902      	bls.n	8004c0c <NVIC_EncodePriority+0x30>
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3b03      	subs	r3, #3
 8004c0a:	e000      	b.n	8004c0e <NVIC_EncodePriority+0x32>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c10:	f04f 32ff 	mov.w	r2, #4294967295
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	43da      	mvns	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	401a      	ands	r2, r3
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c24:	f04f 31ff 	mov.w	r1, #4294967295
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2e:	43d9      	mvns	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c34:	4313      	orrs	r3, r2
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3724      	adds	r7, #36	; 0x24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <SysTick_Config>:
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c54:	d301      	bcc.n	8004c5a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004c56:	2301      	movs	r3, #1
 8004c58:	e00f      	b.n	8004c7a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <SysTick_Config+0x40>)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c62:	210f      	movs	r1, #15
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295
 8004c68:	f7ff ff8e 	bl	8004b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <SysTick_Config+0x40>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c72:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <SysTick_Config+0x40>)
 8004c74:	2207      	movs	r2, #7
 8004c76:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	e000e010 	.word	0xe000e010

08004c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ff29 	bl	8004ae8 <__NVIC_SetPriorityGrouping>
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b086      	sub	sp, #24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cb0:	f7ff ff3e 	bl	8004b30 <__NVIC_GetPriorityGrouping>
 8004cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	6978      	ldr	r0, [r7, #20]
 8004cbc:	f7ff ff8e 	bl	8004bdc <NVIC_EncodePriority>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff ff5d 	bl	8004b88 <__NVIC_SetPriority>
}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	4603      	mov	r3, r0
 8004cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff31 	bl	8004b4c <__NVIC_EnableIRQ>
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ffa2 	bl	8004c44 <SysTick_Config>
 8004d00:	4603      	mov	r3, r0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d004      	beq.n	8004d28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2280      	movs	r2, #128	; 0x80
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e00c      	b.n	8004d42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2205      	movs	r2, #5
 8004d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d5c:	b2db      	uxtb	r3, r3
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b089      	sub	sp, #36	; 0x24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e177      	b.n	8005078 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d88:	2201      	movs	r2, #1
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	f040 8166 	bne.w	8005072 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d005      	beq.n	8004dbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d130      	bne.n	8004e20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	2203      	movs	r2, #3
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004df4:	2201      	movs	r2, #1
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 0201 	and.w	r2, r3, #1
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d017      	beq.n	8004e5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	2203      	movs	r2, #3
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4013      	ands	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d123      	bne.n	8004eb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	08da      	lsrs	r2, r3, #3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3208      	adds	r2, #8
 8004e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	220f      	movs	r2, #15
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	08da      	lsrs	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3208      	adds	r2, #8
 8004eaa:	69b9      	ldr	r1, [r7, #24]
 8004eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	2203      	movs	r2, #3
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f003 0203 	and.w	r2, r3, #3
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80c0 	beq.w	8005072 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	4b66      	ldr	r3, [pc, #408]	; (8005090 <HAL_GPIO_Init+0x324>)
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efa:	4a65      	ldr	r2, [pc, #404]	; (8005090 <HAL_GPIO_Init+0x324>)
 8004efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f00:	6453      	str	r3, [r2, #68]	; 0x44
 8004f02:	4b63      	ldr	r3, [pc, #396]	; (8005090 <HAL_GPIO_Init+0x324>)
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f0e:	4a61      	ldr	r2, [pc, #388]	; (8005094 <HAL_GPIO_Init+0x328>)
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	089b      	lsrs	r3, r3, #2
 8004f14:	3302      	adds	r3, #2
 8004f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	220f      	movs	r2, #15
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a58      	ldr	r2, [pc, #352]	; (8005098 <HAL_GPIO_Init+0x32c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d037      	beq.n	8004faa <HAL_GPIO_Init+0x23e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a57      	ldr	r2, [pc, #348]	; (800509c <HAL_GPIO_Init+0x330>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d031      	beq.n	8004fa6 <HAL_GPIO_Init+0x23a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a56      	ldr	r2, [pc, #344]	; (80050a0 <HAL_GPIO_Init+0x334>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d02b      	beq.n	8004fa2 <HAL_GPIO_Init+0x236>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a55      	ldr	r2, [pc, #340]	; (80050a4 <HAL_GPIO_Init+0x338>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d025      	beq.n	8004f9e <HAL_GPIO_Init+0x232>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a54      	ldr	r2, [pc, #336]	; (80050a8 <HAL_GPIO_Init+0x33c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01f      	beq.n	8004f9a <HAL_GPIO_Init+0x22e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a53      	ldr	r2, [pc, #332]	; (80050ac <HAL_GPIO_Init+0x340>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d019      	beq.n	8004f96 <HAL_GPIO_Init+0x22a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a52      	ldr	r2, [pc, #328]	; (80050b0 <HAL_GPIO_Init+0x344>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <HAL_GPIO_Init+0x226>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a51      	ldr	r2, [pc, #324]	; (80050b4 <HAL_GPIO_Init+0x348>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00d      	beq.n	8004f8e <HAL_GPIO_Init+0x222>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a50      	ldr	r2, [pc, #320]	; (80050b8 <HAL_GPIO_Init+0x34c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d007      	beq.n	8004f8a <HAL_GPIO_Init+0x21e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a4f      	ldr	r2, [pc, #316]	; (80050bc <HAL_GPIO_Init+0x350>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d101      	bne.n	8004f86 <HAL_GPIO_Init+0x21a>
 8004f82:	2309      	movs	r3, #9
 8004f84:	e012      	b.n	8004fac <HAL_GPIO_Init+0x240>
 8004f86:	230a      	movs	r3, #10
 8004f88:	e010      	b.n	8004fac <HAL_GPIO_Init+0x240>
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	e00e      	b.n	8004fac <HAL_GPIO_Init+0x240>
 8004f8e:	2307      	movs	r3, #7
 8004f90:	e00c      	b.n	8004fac <HAL_GPIO_Init+0x240>
 8004f92:	2306      	movs	r3, #6
 8004f94:	e00a      	b.n	8004fac <HAL_GPIO_Init+0x240>
 8004f96:	2305      	movs	r3, #5
 8004f98:	e008      	b.n	8004fac <HAL_GPIO_Init+0x240>
 8004f9a:	2304      	movs	r3, #4
 8004f9c:	e006      	b.n	8004fac <HAL_GPIO_Init+0x240>
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e004      	b.n	8004fac <HAL_GPIO_Init+0x240>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e002      	b.n	8004fac <HAL_GPIO_Init+0x240>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <HAL_GPIO_Init+0x240>
 8004faa:	2300      	movs	r3, #0
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	f002 0203 	and.w	r2, r2, #3
 8004fb2:	0092      	lsls	r2, r2, #2
 8004fb4:	4093      	lsls	r3, r2
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fbc:	4935      	ldr	r1, [pc, #212]	; (8005094 <HAL_GPIO_Init+0x328>)
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	089b      	lsrs	r3, r3, #2
 8004fc2:	3302      	adds	r3, #2
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fca:	4b3d      	ldr	r3, [pc, #244]	; (80050c0 <HAL_GPIO_Init+0x354>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fee:	4a34      	ldr	r2, [pc, #208]	; (80050c0 <HAL_GPIO_Init+0x354>)
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ff4:	4b32      	ldr	r3, [pc, #200]	; (80050c0 <HAL_GPIO_Init+0x354>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4013      	ands	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005018:	4a29      	ldr	r2, [pc, #164]	; (80050c0 <HAL_GPIO_Init+0x354>)
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800501e:	4b28      	ldr	r3, [pc, #160]	; (80050c0 <HAL_GPIO_Init+0x354>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	43db      	mvns	r3, r3
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	4013      	ands	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005042:	4a1f      	ldr	r2, [pc, #124]	; (80050c0 <HAL_GPIO_Init+0x354>)
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005048:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <HAL_GPIO_Init+0x354>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	43db      	mvns	r3, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4013      	ands	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800506c:	4a14      	ldr	r2, [pc, #80]	; (80050c0 <HAL_GPIO_Init+0x354>)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3301      	adds	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b0f      	cmp	r3, #15
 800507c:	f67f ae84 	bls.w	8004d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	3724      	adds	r7, #36	; 0x24
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40023800 	.word	0x40023800
 8005094:	40013800 	.word	0x40013800
 8005098:	40020000 	.word	0x40020000
 800509c:	40020400 	.word	0x40020400
 80050a0:	40020800 	.word	0x40020800
 80050a4:	40020c00 	.word	0x40020c00
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40021400 	.word	0x40021400
 80050b0:	40021800 	.word	0x40021800
 80050b4:	40021c00 	.word	0x40021c00
 80050b8:	40022000 	.word	0x40022000
 80050bc:	40022400 	.word	0x40022400
 80050c0:	40013c00 	.word	0x40013c00

080050c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	807b      	strh	r3, [r7, #2]
 80050d0:	4613      	mov	r3, r2
 80050d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050d4:	787b      	ldrb	r3, [r7, #1]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050da:	887a      	ldrh	r2, [r7, #2]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050e0:	e003      	b.n	80050ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050e2:	887b      	ldrh	r3, [r7, #2]
 80050e4:	041a      	lsls	r2, r3, #16
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	619a      	str	r2, [r3, #24]
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e12b      	b.n	8005362 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fe fe16 	bl	8003d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2224      	movs	r2, #36	; 0x24
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0201 	bic.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800514a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800515a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800515c:	f004 fba4 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8005160:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4a81      	ldr	r2, [pc, #516]	; (800536c <HAL_I2C_Init+0x274>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d807      	bhi.n	800517c <HAL_I2C_Init+0x84>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4a80      	ldr	r2, [pc, #512]	; (8005370 <HAL_I2C_Init+0x278>)
 8005170:	4293      	cmp	r3, r2
 8005172:	bf94      	ite	ls
 8005174:	2301      	movls	r3, #1
 8005176:	2300      	movhi	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	e006      	b.n	800518a <HAL_I2C_Init+0x92>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4a7d      	ldr	r2, [pc, #500]	; (8005374 <HAL_I2C_Init+0x27c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	bf94      	ite	ls
 8005184:	2301      	movls	r3, #1
 8005186:	2300      	movhi	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e0e7      	b.n	8005362 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4a78      	ldr	r2, [pc, #480]	; (8005378 <HAL_I2C_Init+0x280>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	0c9b      	lsrs	r3, r3, #18
 800519c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4a6a      	ldr	r2, [pc, #424]	; (800536c <HAL_I2C_Init+0x274>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d802      	bhi.n	80051cc <HAL_I2C_Init+0xd4>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	3301      	adds	r3, #1
 80051ca:	e009      	b.n	80051e0 <HAL_I2C_Init+0xe8>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	4a69      	ldr	r2, [pc, #420]	; (800537c <HAL_I2C_Init+0x284>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	099b      	lsrs	r3, r3, #6
 80051de:	3301      	adds	r3, #1
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	495c      	ldr	r1, [pc, #368]	; (800536c <HAL_I2C_Init+0x274>)
 80051fc:	428b      	cmp	r3, r1
 80051fe:	d819      	bhi.n	8005234 <HAL_I2C_Init+0x13c>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1e59      	subs	r1, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	fbb1 f3f3 	udiv	r3, r1, r3
 800520e:	1c59      	adds	r1, r3, #1
 8005210:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005214:	400b      	ands	r3, r1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_I2C_Init+0x138>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	1e59      	subs	r1, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	fbb1 f3f3 	udiv	r3, r1, r3
 8005228:	3301      	adds	r3, #1
 800522a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800522e:	e051      	b.n	80052d4 <HAL_I2C_Init+0x1dc>
 8005230:	2304      	movs	r3, #4
 8005232:	e04f      	b.n	80052d4 <HAL_I2C_Init+0x1dc>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d111      	bne.n	8005260 <HAL_I2C_Init+0x168>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1e58      	subs	r0, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6859      	ldr	r1, [r3, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	440b      	add	r3, r1
 800524a:	fbb0 f3f3 	udiv	r3, r0, r3
 800524e:	3301      	adds	r3, #1
 8005250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005254:	2b00      	cmp	r3, #0
 8005256:	bf0c      	ite	eq
 8005258:	2301      	moveq	r3, #1
 800525a:	2300      	movne	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	e012      	b.n	8005286 <HAL_I2C_Init+0x18e>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	1e58      	subs	r0, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6859      	ldr	r1, [r3, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	0099      	lsls	r1, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	fbb0 f3f3 	udiv	r3, r0, r3
 8005276:	3301      	adds	r3, #1
 8005278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_I2C_Init+0x196>
 800528a:	2301      	movs	r3, #1
 800528c:	e022      	b.n	80052d4 <HAL_I2C_Init+0x1dc>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10e      	bne.n	80052b4 <HAL_I2C_Init+0x1bc>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1e58      	subs	r0, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6859      	ldr	r1, [r3, #4]
 800529e:	460b      	mov	r3, r1
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	440b      	add	r3, r1
 80052a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80052a8:	3301      	adds	r3, #1
 80052aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b2:	e00f      	b.n	80052d4 <HAL_I2C_Init+0x1dc>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	1e58      	subs	r0, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6859      	ldr	r1, [r3, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	0099      	lsls	r1, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ca:	3301      	adds	r3, #1
 80052cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	6809      	ldr	r1, [r1, #0]
 80052d8:	4313      	orrs	r3, r2
 80052da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69da      	ldr	r2, [r3, #28]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005302:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6911      	ldr	r1, [r2, #16]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68d2      	ldr	r2, [r2, #12]
 800530e:	4311      	orrs	r1, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	430b      	orrs	r3, r1
 8005316:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	000186a0 	.word	0x000186a0
 8005370:	001e847f 	.word	0x001e847f
 8005374:	003d08ff 	.word	0x003d08ff
 8005378:	431bde83 	.word	0x431bde83
 800537c:	10624dd3 	.word	0x10624dd3

08005380 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af02      	add	r7, sp, #8
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	607a      	str	r2, [r7, #4]
 800538a:	461a      	mov	r2, r3
 800538c:	460b      	mov	r3, r1
 800538e:	817b      	strh	r3, [r7, #10]
 8005390:	4613      	mov	r3, r2
 8005392:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005394:	f7ff f906 	bl	80045a4 <HAL_GetTick>
 8005398:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	f040 80e0 	bne.w	8005568 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	2319      	movs	r3, #25
 80053ae:	2201      	movs	r2, #1
 80053b0:	4970      	ldr	r1, [pc, #448]	; (8005574 <HAL_I2C_Master_Transmit+0x1f4>)
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f002 f8e6 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053be:	2302      	movs	r3, #2
 80053c0:	e0d3      	b.n	800556a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_I2C_Master_Transmit+0x50>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e0cc      	b.n	800556a <HAL_I2C_Master_Transmit+0x1ea>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d007      	beq.n	80053f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005404:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2221      	movs	r2, #33	; 0x21
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2210      	movs	r2, #16
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	893a      	ldrh	r2, [r7, #8]
 8005426:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4a50      	ldr	r2, [pc, #320]	; (8005578 <HAL_I2C_Master_Transmit+0x1f8>)
 8005436:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005438:	8979      	ldrh	r1, [r7, #10]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	6a3a      	ldr	r2, [r7, #32]
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f001 fea8 	bl	8007194 <I2C_MasterRequestWrite>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e08d      	b.n	800556a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005464:	e066      	b.n	8005534 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	6a39      	ldr	r1, [r7, #32]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f002 f960 	bl	8007730 <I2C_WaitOnTXEFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00d      	beq.n	8005492 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	2b04      	cmp	r3, #4
 800547c:	d107      	bne.n	800548e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e06b      	b.n	800556a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d11b      	bne.n	8005508 <HAL_I2C_Master_Transmit+0x188>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d017      	beq.n	8005508 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	781a      	ldrb	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	6a39      	ldr	r1, [r7, #32]
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f002 f950 	bl	80077b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00d      	beq.n	8005534 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	2b04      	cmp	r3, #4
 800551e:	d107      	bne.n	8005530 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e01a      	b.n	800556a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d194      	bne.n	8005466 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	e000      	b.n	800556a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005568:	2302      	movs	r3, #2
  }
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	00100002 	.word	0x00100002
 8005578:	ffff0000 	.word	0xffff0000

0800557c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08c      	sub	sp, #48	; 0x30
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	461a      	mov	r2, r3
 8005588:	460b      	mov	r3, r1
 800558a:	817b      	strh	r3, [r7, #10]
 800558c:	4613      	mov	r3, r2
 800558e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005590:	f7ff f808 	bl	80045a4 <HAL_GetTick>
 8005594:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b20      	cmp	r3, #32
 80055a0:	f040 820b 	bne.w	80059ba <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	2319      	movs	r3, #25
 80055aa:	2201      	movs	r2, #1
 80055ac:	497c      	ldr	r1, [pc, #496]	; (80057a0 <HAL_I2C_Master_Receive+0x224>)
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f001 ffe8 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80055ba:	2302      	movs	r3, #2
 80055bc:	e1fe      	b.n	80059bc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_I2C_Master_Receive+0x50>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e1f7      	b.n	80059bc <HAL_I2C_Master_Receive+0x440>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d007      	beq.n	80055f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0201 	orr.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005600:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2222      	movs	r2, #34	; 0x22
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2210      	movs	r2, #16
 800560e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	893a      	ldrh	r2, [r7, #8]
 8005622:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4a5c      	ldr	r2, [pc, #368]	; (80057a4 <HAL_I2C_Master_Receive+0x228>)
 8005632:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005634:	8979      	ldrh	r1, [r7, #10]
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f001 fe2c 	bl	8007298 <I2C_MasterRequestRead>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e1b8      	b.n	80059bc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564e:	2b00      	cmp	r3, #0
 8005650:	d113      	bne.n	800567a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005652:	2300      	movs	r3, #0
 8005654:	623b      	str	r3, [r7, #32]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	623b      	str	r3, [r7, #32]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	623b      	str	r3, [r7, #32]
 8005666:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e18c      	b.n	8005994 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567e:	2b01      	cmp	r3, #1
 8005680:	d11b      	bne.n	80056ba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005690:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005692:	2300      	movs	r3, #0
 8005694:	61fb      	str	r3, [r7, #28]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	61fb      	str	r3, [r7, #28]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	61fb      	str	r3, [r7, #28]
 80056a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	e16c      	b.n	8005994 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d11b      	bne.n	80056fa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e2:	2300      	movs	r3, #0
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	e14c      	b.n	8005994 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005720:	e138      	b.n	8005994 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005726:	2b03      	cmp	r3, #3
 8005728:	f200 80f1 	bhi.w	800590e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005730:	2b01      	cmp	r3, #1
 8005732:	d123      	bne.n	800577c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f002 f8ad 	bl	8007898 <I2C_WaitOnRXNEFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e139      	b.n	80059bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005770:	b29b      	uxth	r3, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	855a      	strh	r2, [r3, #42]	; 0x2a
 800577a:	e10b      	b.n	8005994 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005780:	2b02      	cmp	r3, #2
 8005782:	d14e      	bne.n	8005822 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	2200      	movs	r2, #0
 800578c:	4906      	ldr	r1, [pc, #24]	; (80057a8 <HAL_I2C_Master_Receive+0x22c>)
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f001 fef8 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e10e      	b.n	80059bc <HAL_I2C_Master_Receive+0x440>
 800579e:	bf00      	nop
 80057a0:	00100002 	.word	0x00100002
 80057a4:	ffff0000 	.word	0xffff0000
 80057a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005820:	e0b8      	b.n	8005994 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	2200      	movs	r2, #0
 800582a:	4966      	ldr	r1, [pc, #408]	; (80059c4 <HAL_I2C_Master_Receive+0x448>)
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f001 fea9 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0bf      	b.n	80059bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	2200      	movs	r2, #0
 8005886:	494f      	ldr	r1, [pc, #316]	; (80059c4 <HAL_I2C_Master_Receive+0x448>)
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f001 fe7b 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e091      	b.n	80059bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800590c:	e042      	b.n	8005994 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f001 ffc0 	bl	8007898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e04c      	b.n	80059bc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b04      	cmp	r3, #4
 8005960:	d118      	bne.n	8005994 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005998:	2b00      	cmp	r3, #0
 800599a:	f47f aec2 	bne.w	8005722 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	e000      	b.n	80059bc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80059ba:	2302      	movs	r3, #2
  }
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3728      	adds	r7, #40	; 0x28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	00010004 	.word	0x00010004

080059c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d003      	beq.n	8005a00 <HAL_I2C_EV_IRQHandler+0x38>
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b40      	cmp	r3, #64	; 0x40
 80059fc:	f040 80c1 	bne.w	8005b82 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10d      	bne.n	8005a36 <HAL_I2C_EV_IRQHandler+0x6e>
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a20:	d003      	beq.n	8005a2a <HAL_I2C_EV_IRQHandler+0x62>
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a28:	d101      	bne.n	8005a2e <HAL_I2C_EV_IRQHandler+0x66>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_I2C_EV_IRQHandler+0x68>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	f000 8132 	beq.w	8005c9a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00c      	beq.n	8005a5a <HAL_I2C_EV_IRQHandler+0x92>
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	0a5b      	lsrs	r3, r3, #9
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d006      	beq.n	8005a5a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 ffa8 	bl	80079a2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fd83 	bl	800655e <I2C_Master_SB>
 8005a58:	e092      	b.n	8005b80 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	08db      	lsrs	r3, r3, #3
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <HAL_I2C_EV_IRQHandler+0xb2>
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	0a5b      	lsrs	r3, r3, #9
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fdf9 	bl	800666a <I2C_Master_ADD10>
 8005a78:	e082      	b.n	8005b80 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <HAL_I2C_EV_IRQHandler+0xd2>
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	0a5b      	lsrs	r3, r3, #9
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fe13 	bl	80066be <I2C_Master_ADDR>
 8005a98:	e072      	b.n	8005b80 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	089b      	lsrs	r3, r3, #2
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d03b      	beq.n	8005b1e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab4:	f000 80f3 	beq.w	8005c9e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	09db      	lsrs	r3, r3, #7
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00f      	beq.n	8005ae4 <HAL_I2C_EV_IRQHandler+0x11c>
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	0a9b      	lsrs	r3, r3, #10
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d009      	beq.n	8005ae4 <HAL_I2C_EV_IRQHandler+0x11c>
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	089b      	lsrs	r3, r3, #2
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d103      	bne.n	8005ae4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f9f3 	bl	8005ec8 <I2C_MasterTransmit_TXE>
 8005ae2:	e04d      	b.n	8005b80 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	089b      	lsrs	r3, r3, #2
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 80d6 	beq.w	8005c9e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	0a5b      	lsrs	r3, r3, #9
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80cf 	beq.w	8005c9e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b00:	7bbb      	ldrb	r3, [r7, #14]
 8005b02:	2b21      	cmp	r3, #33	; 0x21
 8005b04:	d103      	bne.n	8005b0e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fa7a 	bl	8006000 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b0c:	e0c7      	b.n	8005c9e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b40      	cmp	r3, #64	; 0x40
 8005b12:	f040 80c4 	bne.w	8005c9e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fae8 	bl	80060ec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b1c:	e0bf      	b.n	8005c9e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b2c:	f000 80b7 	beq.w	8005c9e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	099b      	lsrs	r3, r3, #6
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00f      	beq.n	8005b5c <HAL_I2C_EV_IRQHandler+0x194>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	0a9b      	lsrs	r3, r3, #10
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d009      	beq.n	8005b5c <HAL_I2C_EV_IRQHandler+0x194>
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	089b      	lsrs	r3, r3, #2
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d103      	bne.n	8005b5c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fb5d 	bl	8006214 <I2C_MasterReceive_RXNE>
 8005b5a:	e011      	b.n	8005b80 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	089b      	lsrs	r3, r3, #2
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 809a 	beq.w	8005c9e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	0a5b      	lsrs	r3, r3, #9
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 8093 	beq.w	8005c9e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fc06 	bl	800638a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b7e:	e08e      	b.n	8005c9e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b80:	e08d      	b.n	8005c9e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	e007      	b.n	8005ba4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	085b      	lsrs	r3, r3, #1
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d012      	beq.n	8005bd6 <HAL_I2C_EV_IRQHandler+0x20e>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	0a5b      	lsrs	r3, r3, #9
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00c      	beq.n	8005bd6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005bcc:	69b9      	ldr	r1, [r7, #24]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 ffc4 	bl	8006b5c <I2C_Slave_ADDR>
 8005bd4:	e066      	b.n	8005ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	091b      	lsrs	r3, r3, #4
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <HAL_I2C_EV_IRQHandler+0x22e>
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	0a5b      	lsrs	r3, r3, #9
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fffe 	bl	8006bf0 <I2C_Slave_STOPF>
 8005bf4:	e056      	b.n	8005ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	2b21      	cmp	r3, #33	; 0x21
 8005bfa:	d002      	beq.n	8005c02 <HAL_I2C_EV_IRQHandler+0x23a>
 8005bfc:	7bbb      	ldrb	r3, [r7, #14]
 8005bfe:	2b29      	cmp	r3, #41	; 0x29
 8005c00:	d125      	bne.n	8005c4e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	09db      	lsrs	r3, r3, #7
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00f      	beq.n	8005c2e <HAL_I2C_EV_IRQHandler+0x266>
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	0a9b      	lsrs	r3, r3, #10
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <HAL_I2C_EV_IRQHandler+0x266>
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	089b      	lsrs	r3, r3, #2
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d103      	bne.n	8005c2e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 feda 	bl	80069e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c2c:	e039      	b.n	8005ca2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	089b      	lsrs	r3, r3, #2
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d033      	beq.n	8005ca2 <HAL_I2C_EV_IRQHandler+0x2da>
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	0a5b      	lsrs	r3, r3, #9
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d02d      	beq.n	8005ca2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 ff07 	bl	8006a5a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c4c:	e029      	b.n	8005ca2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	099b      	lsrs	r3, r3, #6
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00f      	beq.n	8005c7a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	0a9b      	lsrs	r3, r3, #10
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	089b      	lsrs	r3, r3, #2
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 ff12 	bl	8006a9c <I2C_SlaveReceive_RXNE>
 8005c78:	e014      	b.n	8005ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	089b      	lsrs	r3, r3, #2
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00e      	beq.n	8005ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	0a5b      	lsrs	r3, r3, #9
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 ff40 	bl	8006b18 <I2C_SlaveReceive_BTF>
 8005c98:	e004      	b.n	8005ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005c9a:	bf00      	nop
 8005c9c:	e002      	b.n	8005ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c9e:	bf00      	nop
 8005ca0:	e000      	b.n	8005ca4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ca2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b08a      	sub	sp, #40	; 0x28
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ccc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00e      	beq.n	8005cf8 <HAL_I2C_ER_IRQHandler+0x4e>
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	0a1b      	lsrs	r3, r3, #8
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d008      	beq.n	8005cf8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cf6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	0a5b      	lsrs	r3, r3, #9
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00e      	beq.n	8005d22 <HAL_I2C_ER_IRQHandler+0x78>
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	0a1b      	lsrs	r3, r3, #8
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	f043 0302 	orr.w	r3, r3, #2
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005d20:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	0a9b      	lsrs	r3, r3, #10
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d03f      	beq.n	8005dae <HAL_I2C_ER_IRQHandler+0x104>
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	0a1b      	lsrs	r3, r3, #8
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d039      	beq.n	8005dae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005d3a:	7efb      	ldrb	r3, [r7, #27]
 8005d3c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005d54:	7ebb      	ldrb	r3, [r7, #26]
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d112      	bne.n	8005d80 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10f      	bne.n	8005d80 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d60:	7cfb      	ldrb	r3, [r7, #19]
 8005d62:	2b21      	cmp	r3, #33	; 0x21
 8005d64:	d008      	beq.n	8005d78 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005d66:	7cfb      	ldrb	r3, [r7, #19]
 8005d68:	2b29      	cmp	r3, #41	; 0x29
 8005d6a:	d005      	beq.n	8005d78 <HAL_I2C_ER_IRQHandler+0xce>
 8005d6c:	7cfb      	ldrb	r3, [r7, #19]
 8005d6e:	2b28      	cmp	r3, #40	; 0x28
 8005d70:	d106      	bne.n	8005d80 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b21      	cmp	r3, #33	; 0x21
 8005d76:	d103      	bne.n	8005d80 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f001 f869 	bl	8006e50 <I2C_Slave_AF>
 8005d7e:	e016      	b.n	8005dae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d88:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	f043 0304 	orr.w	r3, r3, #4
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d92:	7efb      	ldrb	r3, [r7, #27]
 8005d94:	2b10      	cmp	r3, #16
 8005d96:	d002      	beq.n	8005d9e <HAL_I2C_ER_IRQHandler+0xf4>
 8005d98:	7efb      	ldrb	r3, [r7, #27]
 8005d9a:	2b40      	cmp	r3, #64	; 0x40
 8005d9c:	d107      	bne.n	8005dae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	0adb      	lsrs	r3, r3, #11
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00e      	beq.n	8005dd8 <HAL_I2C_ER_IRQHandler+0x12e>
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	0a1b      	lsrs	r3, r3, #8
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d008      	beq.n	8005dd8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	f043 0308 	orr.w	r3, r3, #8
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005dd6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d008      	beq.n	8005df0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f001 f8a0 	bl	8006f30 <I2C_ITError>
  }
}
 8005df0:	bf00      	nop
 8005df2:	3728      	adds	r7, #40	; 0x28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
 8005e54:	4613      	mov	r3, r2
 8005e56:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ede:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d150      	bne.n	8005f90 <I2C_MasterTransmit_TXE+0xc8>
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
 8005ef0:	2b21      	cmp	r3, #33	; 0x21
 8005ef2:	d14d      	bne.n	8005f90 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d01d      	beq.n	8005f36 <I2C_MasterTransmit_TXE+0x6e>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d01a      	beq.n	8005f36 <I2C_MasterTransmit_TXE+0x6e>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f06:	d016      	beq.n	8005f36 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f16:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2211      	movs	r2, #17
 8005f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff ff62 	bl	8005df8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f34:	e060      	b.n	8005ff8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f44:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f54:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d107      	bne.n	8005f80 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff ff7d 	bl	8005e78 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f7e:	e03b      	b.n	8005ff8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff ff35 	bl	8005df8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f8e:	e033      	b.n	8005ff8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b21      	cmp	r3, #33	; 0x21
 8005f94:	d005      	beq.n	8005fa2 <I2C_MasterTransmit_TXE+0xda>
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	d12d      	bne.n	8005ff8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	2b22      	cmp	r3, #34	; 0x22
 8005fa0:	d12a      	bne.n	8005ff8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d108      	bne.n	8005fbe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005fbc:	e01c      	b.n	8005ff8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b40      	cmp	r3, #64	; 0x40
 8005fc8:	d103      	bne.n	8005fd2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f88e 	bl	80060ec <I2C_MemoryTransmit_TXE_BTF>
}
 8005fd0:	e012      	b.n	8005ff8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	781a      	ldrb	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005ff6:	e7ff      	b.n	8005ff8 <I2C_MasterTransmit_TXE+0x130>
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b21      	cmp	r3, #33	; 0x21
 8006018:	d164      	bne.n	80060e4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d012      	beq.n	800604a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	781a      	ldrb	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006048:	e04c      	b.n	80060e4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b08      	cmp	r3, #8
 800604e:	d01d      	beq.n	800608c <I2C_MasterTransmit_BTF+0x8c>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b20      	cmp	r3, #32
 8006054:	d01a      	beq.n	800608c <I2C_MasterTransmit_BTF+0x8c>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800605c:	d016      	beq.n	800608c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800606c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2211      	movs	r2, #17
 8006072:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff feb7 	bl	8005df8 <HAL_I2C_MasterTxCpltCallback>
}
 800608a:	e02b      	b.n	80060e4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800609a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060aa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b40      	cmp	r3, #64	; 0x40
 80060c4:	d107      	bne.n	80060d6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7ff fed2 	bl	8005e78 <HAL_I2C_MemTxCpltCallback>
}
 80060d4:	e006      	b.n	80060e4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7ff fe8a 	bl	8005df8 <HAL_I2C_MasterTxCpltCallback>
}
 80060e4:	bf00      	nop
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006100:	2b00      	cmp	r3, #0
 8006102:	d11d      	bne.n	8006140 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d10b      	bne.n	8006124 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006110:	b2da      	uxtb	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611c:	1c9a      	adds	r2, r3, #2
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006122:	e073      	b.n	800620c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006128:	b29b      	uxth	r3, r3
 800612a:	121b      	asrs	r3, r3, #8
 800612c:	b2da      	uxtb	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800613e:	e065      	b.n	800620c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10b      	bne.n	8006160 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614c:	b2da      	uxtb	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800615e:	e055      	b.n	800620c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006164:	2b02      	cmp	r3, #2
 8006166:	d151      	bne.n	800620c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	2b22      	cmp	r3, #34	; 0x22
 800616c:	d10d      	bne.n	800618a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800617c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006188:	e040      	b.n	800620c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d015      	beq.n	80061c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	2b21      	cmp	r3, #33	; 0x21
 8006198:	d112      	bne.n	80061c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061be:	e025      	b.n	800620c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d120      	bne.n	800620c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	2b21      	cmp	r3, #33	; 0x21
 80061ce:	d11d      	bne.n	800620c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061de:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fe36 	bl	8005e78 <HAL_I2C_MemTxCpltCallback>
}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b22      	cmp	r3, #34	; 0x22
 8006226:	f040 80ac 	bne.w	8006382 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622e:	b29b      	uxth	r3, r3
 8006230:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b03      	cmp	r3, #3
 8006236:	d921      	bls.n	800627c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b03      	cmp	r3, #3
 8006266:	f040 808c 	bne.w	8006382 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006278:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800627a:	e082      	b.n	8006382 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	2b02      	cmp	r3, #2
 8006282:	d075      	beq.n	8006370 <I2C_MasterReceive_RXNE+0x15c>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d002      	beq.n	8006290 <I2C_MasterReceive_RXNE+0x7c>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d16f      	bne.n	8006370 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 facf 	bl	8007834 <I2C_WaitOnSTOPRequestThroughIT>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d142      	bne.n	8006322 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29a      	uxth	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d10a      	bne.n	800630c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff fdc1 	bl	8005e8c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800630a:	e03a      	b.n	8006382 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2212      	movs	r2, #18
 8006318:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff fd76 	bl	8005e0c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006320:	e02f      	b.n	8006382 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006330:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff fd99 	bl	8005ea0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800636e:	e008      	b.n	8006382 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800637e:	605a      	str	r2, [r3, #4]
}
 8006380:	e7ff      	b.n	8006382 <I2C_MasterReceive_RXNE+0x16e>
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d11b      	bne.n	80063da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80063d8:	e0bd      	b.n	8006556 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d129      	bne.n	8006438 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d00a      	beq.n	8006410 <I2C_MasterReceive_BTF+0x86>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d007      	beq.n	8006410 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800640e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006436:	e08e      	b.n	8006556 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d176      	bne.n	8006530 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d002      	beq.n	800644e <I2C_MasterReceive_BTF+0xc4>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b10      	cmp	r3, #16
 800644c:	d108      	bne.n	8006460 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e019      	b.n	8006494 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b04      	cmp	r3, #4
 8006464:	d002      	beq.n	800646c <I2C_MasterReceive_BTF+0xe2>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d108      	bne.n	800647e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	e00a      	b.n	8006494 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b10      	cmp	r3, #16
 8006482:	d007      	beq.n	8006494 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006492:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80064ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d10a      	bne.n	800651a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff fcba 	bl	8005e8c <HAL_I2C_MemRxCpltCallback>
}
 8006518:	e01d      	b.n	8006556 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2212      	movs	r2, #18
 8006526:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff fc6f 	bl	8005e0c <HAL_I2C_MasterRxCpltCallback>
}
 800652e:	e012      	b.n	8006556 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b40      	cmp	r3, #64	; 0x40
 8006570:	d117      	bne.n	80065a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006576:	2b00      	cmp	r3, #0
 8006578:	d109      	bne.n	800658e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657e:	b2db      	uxtb	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800658a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800658c:	e067      	b.n	800665e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	b2da      	uxtb	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	611a      	str	r2, [r3, #16]
}
 80065a0:	e05d      	b.n	800665e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065aa:	d133      	bne.n	8006614 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b21      	cmp	r3, #33	; 0x21
 80065b6:	d109      	bne.n	80065cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065c8:	611a      	str	r2, [r3, #16]
 80065ca:	e008      	b.n	80065de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f043 0301 	orr.w	r3, r3, #1
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <I2C_Master_SB+0x92>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d108      	bne.n	8006602 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d032      	beq.n	800665e <I2C_Master_SB+0x100>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d02d      	beq.n	800665e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006610:	605a      	str	r2, [r3, #4]
}
 8006612:	e024      	b.n	800665e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10e      	bne.n	800663a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006620:	b29b      	uxth	r3, r3
 8006622:	11db      	asrs	r3, r3, #7
 8006624:	b2db      	uxtb	r3, r3
 8006626:	f003 0306 	and.w	r3, r3, #6
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f063 030f 	orn	r3, r3, #15
 8006630:	b2da      	uxtb	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	611a      	str	r2, [r3, #16]
}
 8006638:	e011      	b.n	800665e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10d      	bne.n	800665e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	b29b      	uxth	r3, r3
 8006648:	11db      	asrs	r3, r3, #7
 800664a:	b2db      	uxtb	r3, r3
 800664c:	f003 0306 	and.w	r3, r3, #6
 8006650:	b2db      	uxtb	r3, r3
 8006652:	f063 030e 	orn	r3, r3, #14
 8006656:	b2da      	uxtb	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	611a      	str	r2, [r3, #16]
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006676:	b2da      	uxtb	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006682:	2b00      	cmp	r3, #0
 8006684:	d004      	beq.n	8006690 <I2C_Master_ADD10+0x26>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d108      	bne.n	80066a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00c      	beq.n	80066b2 <I2C_Master_ADD10+0x48>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d007      	beq.n	80066b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b0:	605a      	str	r2, [r3, #4]
  }
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80066be:	b480      	push	{r7}
 80066c0:	b091      	sub	sp, #68	; 0x44
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b22      	cmp	r3, #34	; 0x22
 80066e6:	f040 8169 	bne.w	80069bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10f      	bne.n	8006712 <I2C_Master_ADDR+0x54>
 80066f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d10b      	bne.n	8006712 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fa:	2300      	movs	r3, #0
 80066fc:	633b      	str	r3, [r7, #48]	; 0x30
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	633b      	str	r3, [r7, #48]	; 0x30
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	633b      	str	r3, [r7, #48]	; 0x30
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	e160      	b.n	80069d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006716:	2b00      	cmp	r3, #0
 8006718:	d11d      	bne.n	8006756 <I2C_Master_ADDR+0x98>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006722:	d118      	bne.n	8006756 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006724:	2300      	movs	r3, #0
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006748:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	651a      	str	r2, [r3, #80]	; 0x50
 8006754:	e13e      	b.n	80069d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675a:	b29b      	uxth	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d113      	bne.n	8006788 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006760:	2300      	movs	r3, #0
 8006762:	62bb      	str	r3, [r7, #40]	; 0x28
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	62bb      	str	r3, [r7, #40]	; 0x28
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	e115      	b.n	80069b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678c:	b29b      	uxth	r3, r3
 800678e:	2b01      	cmp	r3, #1
 8006790:	f040 808a 	bne.w	80068a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800679a:	d137      	bne.n	800680c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ba:	d113      	bne.n	80067e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067cc:	2300      	movs	r3, #0
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	627b      	str	r3, [r7, #36]	; 0x24
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	e0e7      	b.n	80069b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e4:	2300      	movs	r3, #0
 80067e6:	623b      	str	r3, [r7, #32]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	623b      	str	r3, [r7, #32]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	623b      	str	r3, [r7, #32]
 80067f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	e0d3      	b.n	80069b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	2b08      	cmp	r3, #8
 8006810:	d02e      	beq.n	8006870 <I2C_Master_ADDR+0x1b2>
 8006812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006814:	2b20      	cmp	r3, #32
 8006816:	d02b      	beq.n	8006870 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681a:	2b12      	cmp	r3, #18
 800681c:	d102      	bne.n	8006824 <I2C_Master_ADDR+0x166>
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	2b01      	cmp	r3, #1
 8006822:	d125      	bne.n	8006870 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006826:	2b04      	cmp	r3, #4
 8006828:	d00e      	beq.n	8006848 <I2C_Master_ADDR+0x18a>
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	2b02      	cmp	r3, #2
 800682e:	d00b      	beq.n	8006848 <I2C_Master_ADDR+0x18a>
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	2b10      	cmp	r3, #16
 8006834:	d008      	beq.n	8006848 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	e007      	b.n	8006858 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006856:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006858:	2300      	movs	r3, #0
 800685a:	61fb      	str	r3, [r7, #28]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	e0a1      	b.n	80069b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800687e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006880:	2300      	movs	r3, #0
 8006882:	61bb      	str	r3, [r7, #24]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	e085      	b.n	80069b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d14d      	bne.n	800694e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d016      	beq.n	80068e6 <I2C_Master_ADDR+0x228>
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d013      	beq.n	80068e6 <I2C_Master_ADDR+0x228>
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	2b10      	cmp	r3, #16
 80068c2:	d010      	beq.n	80068e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	e007      	b.n	80068f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006904:	d117      	bne.n	8006936 <I2C_Master_ADDR+0x278>
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800690c:	d00b      	beq.n	8006926 <I2C_Master_ADDR+0x268>
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	2b01      	cmp	r3, #1
 8006912:	d008      	beq.n	8006926 <I2C_Master_ADDR+0x268>
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	2b08      	cmp	r3, #8
 8006918:	d005      	beq.n	8006926 <I2C_Master_ADDR+0x268>
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	2b10      	cmp	r3, #16
 800691e:	d002      	beq.n	8006926 <I2C_Master_ADDR+0x268>
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	2b20      	cmp	r3, #32
 8006924:	d107      	bne.n	8006936 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006934:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006936:	2300      	movs	r3, #0
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	617b      	str	r3, [r7, #20]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	e032      	b.n	80069b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800695c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800696c:	d117      	bne.n	800699e <I2C_Master_ADDR+0x2e0>
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006974:	d00b      	beq.n	800698e <I2C_Master_ADDR+0x2d0>
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	2b01      	cmp	r3, #1
 800697a:	d008      	beq.n	800698e <I2C_Master_ADDR+0x2d0>
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	2b08      	cmp	r3, #8
 8006980:	d005      	beq.n	800698e <I2C_Master_ADDR+0x2d0>
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	2b10      	cmp	r3, #16
 8006986:	d002      	beq.n	800698e <I2C_Master_ADDR+0x2d0>
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	2b20      	cmp	r3, #32
 800698c:	d107      	bne.n	800699e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800699c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800699e:	2300      	movs	r3, #0
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	613b      	str	r3, [r7, #16]
 80069b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80069ba:	e00b      	b.n	80069d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]
}
 80069d2:	e7ff      	b.n	80069d4 <I2C_Master_ADDR+0x316>
 80069d4:	bf00      	nop
 80069d6:	3744      	adds	r7, #68	; 0x44
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d02b      	beq.n	8006a52 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	781a      	ldrb	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d114      	bne.n	8006a52 <I2C_SlaveTransmit_TXE+0x72>
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	2b29      	cmp	r3, #41	; 0x29
 8006a2c:	d111      	bne.n	8006a52 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a3c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2221      	movs	r2, #33	; 0x21
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2228      	movs	r2, #40	; 0x28
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff f9e7 	bl	8005e20 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d011      	beq.n	8006a90 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	781a      	ldrb	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aaa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d02c      	beq.n	8006b10 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d114      	bne.n	8006b10 <I2C_SlaveReceive_RXNE+0x74>
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8006aea:	d111      	bne.n	8006b10 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2222      	movs	r2, #34	; 0x22
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2228      	movs	r2, #40	; 0x28
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff f992 	bl	8005e34 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d012      	beq.n	8006b50 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b76:	2b28      	cmp	r3, #40	; 0x28
 8006b78:	d127      	bne.n	8006bca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b88:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	089b      	lsrs	r3, r3, #2
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b96:	2301      	movs	r3, #1
 8006b98:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	09db      	lsrs	r3, r3, #7
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d103      	bne.n	8006bae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	81bb      	strh	r3, [r7, #12]
 8006bac:	e002      	b.n	8006bb4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006bbc:	89ba      	ldrh	r2, [r7, #12]
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff f940 	bl	8005e48 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006bc8:	e00e      	b.n	8006be8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	60bb      	str	r3, [r7, #8]
 8006bde:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c0e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006c10:	2300      	movs	r3, #0
 8006c12:	60bb      	str	r3, [r7, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	60bb      	str	r3, [r7, #8]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c4c:	d172      	bne.n	8006d34 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	2b22      	cmp	r3, #34	; 0x22
 8006c52:	d002      	beq.n	8006c5a <I2C_Slave_STOPF+0x6a>
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	2b2a      	cmp	r3, #42	; 0x2a
 8006c58:	d135      	bne.n	8006cc6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f043 0204 	orr.w	r2, r3, #4
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe f85b 	bl	8004d4e <HAL_DMA_GetState>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d049      	beq.n	8006d32 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	4a69      	ldr	r2, [pc, #420]	; (8006e48 <I2C_Slave_STOPF+0x258>)
 8006ca4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe f82d 	bl	8004d0a <HAL_DMA_Abort_IT>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d03d      	beq.n	8006d32 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cc4:	e035      	b.n	8006d32 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	f043 0204 	orr.w	r2, r3, #4
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cf8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fe f825 	bl	8004d4e <HAL_DMA_GetState>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d014      	beq.n	8006d34 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0e:	4a4e      	ldr	r2, [pc, #312]	; (8006e48 <I2C_Slave_STOPF+0x258>)
 8006d10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fd fff7 	bl	8004d0a <HAL_DMA_Abort_IT>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d008      	beq.n	8006d34 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4798      	blx	r3
 8006d30:	e000      	b.n	8006d34 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d32:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d03e      	beq.n	8006dbc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d112      	bne.n	8006d72 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	691a      	ldr	r2, [r3, #16]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d112      	bne.n	8006da6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691a      	ldr	r2, [r3, #16]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	f043 0204 	orr.w	r2, r3, #4
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f8b3 	bl	8006f30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006dca:	e039      	b.n	8006e40 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd0:	d109      	bne.n	8006de6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2228      	movs	r2, #40	; 0x28
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff f827 	bl	8005e34 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b28      	cmp	r3, #40	; 0x28
 8006df0:	d111      	bne.n	8006e16 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <I2C_Slave_STOPF+0x25c>)
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff f828 	bl	8005e64 <HAL_I2C_ListenCpltCallback>
}
 8006e14:	e014      	b.n	8006e40 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1a:	2b22      	cmp	r3, #34	; 0x22
 8006e1c:	d002      	beq.n	8006e24 <I2C_Slave_STOPF+0x234>
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	2b22      	cmp	r3, #34	; 0x22
 8006e22:	d10d      	bne.n	8006e40 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fe fffa 	bl	8005e34 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	08007435 	.word	0x08007435
 8006e4c:	ffff0000 	.word	0xffff0000

08006e50 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d002      	beq.n	8006e72 <I2C_Slave_AF+0x22>
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b20      	cmp	r3, #32
 8006e70:	d129      	bne.n	8006ec6 <I2C_Slave_AF+0x76>
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	2b28      	cmp	r3, #40	; 0x28
 8006e76:	d126      	bne.n	8006ec6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a2c      	ldr	r2, [pc, #176]	; (8006f2c <I2C_Slave_AF+0xdc>)
 8006e7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e8c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e96:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7fe ffd0 	bl	8005e64 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006ec4:	e02e      	b.n	8006f24 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	2b21      	cmp	r3, #33	; 0x21
 8006eca:	d126      	bne.n	8006f1a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a17      	ldr	r2, [pc, #92]	; (8006f2c <I2C_Slave_AF+0xdc>)
 8006ed0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2221      	movs	r2, #33	; 0x21
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ef6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f00:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f10:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7fe ff84 	bl	8005e20 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f18:	e004      	b.n	8006f24 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f22:	615a      	str	r2, [r3, #20]
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	ffff0000 	.word	0xffff0000

08006f30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	2b10      	cmp	r3, #16
 8006f4c:	d002      	beq.n	8006f54 <I2C_ITError+0x24>
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b40      	cmp	r3, #64	; 0x40
 8006f52:	d10a      	bne.n	8006f6a <I2C_ITError+0x3a>
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	2b22      	cmp	r3, #34	; 0x22
 8006f58:	d107      	bne.n	8006f6a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f68:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
 8006f6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f70:	2b28      	cmp	r3, #40	; 0x28
 8006f72:	d107      	bne.n	8006f84 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2228      	movs	r2, #40	; 0x28
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f82:	e015      	b.n	8006fb0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f92:	d00a      	beq.n	8006faa <I2C_ITError+0x7a>
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	2b60      	cmp	r3, #96	; 0x60
 8006f98:	d007      	beq.n	8006faa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fbe:	d162      	bne.n	8007086 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d020      	beq.n	8007020 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe2:	4a6a      	ldr	r2, [pc, #424]	; (800718c <I2C_ITError+0x25c>)
 8006fe4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fd fe8d 	bl	8004d0a <HAL_DMA_Abort_IT>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8089 	beq.w	800710a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0201 	bic.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800701a:	4610      	mov	r0, r2
 800701c:	4798      	blx	r3
 800701e:	e074      	b.n	800710a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007024:	4a59      	ldr	r2, [pc, #356]	; (800718c <I2C_ITError+0x25c>)
 8007026:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	4618      	mov	r0, r3
 800702e:	f7fd fe6c 	bl	8004d0a <HAL_DMA_Abort_IT>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d068      	beq.n	800710a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007042:	2b40      	cmp	r3, #64	; 0x40
 8007044:	d10b      	bne.n	800705e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0201 	bic.w	r2, r2, #1
 800706c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007080:	4610      	mov	r0, r2
 8007082:	4798      	blx	r3
 8007084:	e041      	b.n	800710a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b60      	cmp	r3, #96	; 0x60
 8007090:	d125      	bne.n	80070de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	2b40      	cmp	r3, #64	; 0x40
 80070ac:	d10b      	bne.n	80070c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0201 	bic.w	r2, r2, #1
 80070d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fe feec 	bl	8005eb4 <HAL_I2C_AbortCpltCallback>
 80070dc:	e015      	b.n	800710a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e8:	2b40      	cmp	r3, #64	; 0x40
 80070ea:	d10b      	bne.n	8007104 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691a      	ldr	r2, [r3, #16]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7fe fecb 	bl	8005ea0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10e      	bne.n	8007138 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007120:	2b00      	cmp	r3, #0
 8007122:	d109      	bne.n	8007138 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800712a:	2b00      	cmp	r3, #0
 800712c:	d104      	bne.n	8007138 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007134:	2b00      	cmp	r3, #0
 8007136:	d007      	beq.n	8007148 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007146:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b04      	cmp	r3, #4
 800715a:	d113      	bne.n	8007184 <I2C_ITError+0x254>
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	2b28      	cmp	r3, #40	; 0x28
 8007160:	d110      	bne.n	8007184 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <I2C_ITError+0x260>)
 8007166:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fe fe70 	bl	8005e64 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	08007435 	.word	0x08007435
 8007190:	ffff0000 	.word	0xffff0000

08007194 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af02      	add	r7, sp, #8
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	607a      	str	r2, [r7, #4]
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	460b      	mov	r3, r1
 80071a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d006      	beq.n	80071be <I2C_MasterRequestWrite+0x2a>
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d003      	beq.n	80071be <I2C_MasterRequestWrite+0x2a>
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071bc:	d108      	bne.n	80071d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	e00b      	b.n	80071e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	2b12      	cmp	r3, #18
 80071d6:	d107      	bne.n	80071e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f9c5 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00d      	beq.n	800721c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720e:	d103      	bne.n	8007218 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007216:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e035      	b.n	8007288 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007224:	d108      	bne.n	8007238 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007226:	897b      	ldrh	r3, [r7, #10]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	461a      	mov	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007234:	611a      	str	r2, [r3, #16]
 8007236:	e01b      	b.n	8007270 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007238:	897b      	ldrh	r3, [r7, #10]
 800723a:	11db      	asrs	r3, r3, #7
 800723c:	b2db      	uxtb	r3, r3
 800723e:	f003 0306 	and.w	r3, r3, #6
 8007242:	b2db      	uxtb	r3, r3
 8007244:	f063 030f 	orn	r3, r3, #15
 8007248:	b2da      	uxtb	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	490e      	ldr	r1, [pc, #56]	; (8007290 <I2C_MasterRequestWrite+0xfc>)
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f9eb 	bl	8007632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e010      	b.n	8007288 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007266:	897b      	ldrh	r3, [r7, #10]
 8007268:	b2da      	uxtb	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4907      	ldr	r1, [pc, #28]	; (8007294 <I2C_MasterRequestWrite+0x100>)
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f9db 	bl	8007632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	00010008 	.word	0x00010008
 8007294:	00010002 	.word	0x00010002

08007298 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af02      	add	r7, sp, #8
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	607a      	str	r2, [r7, #4]
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	460b      	mov	r3, r1
 80072a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d006      	beq.n	80072d2 <I2C_MasterRequestRead+0x3a>
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d003      	beq.n	80072d2 <I2C_MasterRequestRead+0x3a>
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072d0:	d108      	bne.n	80072e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	e00b      	b.n	80072fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e8:	2b11      	cmp	r3, #17
 80072ea:	d107      	bne.n	80072fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f93b 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00d      	beq.n	8007330 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007322:	d103      	bne.n	800732c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800732a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e079      	b.n	8007424 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007338:	d108      	bne.n	800734c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800733a:	897b      	ldrh	r3, [r7, #10]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	f043 0301 	orr.w	r3, r3, #1
 8007342:	b2da      	uxtb	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	611a      	str	r2, [r3, #16]
 800734a:	e05f      	b.n	800740c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800734c:	897b      	ldrh	r3, [r7, #10]
 800734e:	11db      	asrs	r3, r3, #7
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f003 0306 	and.w	r3, r3, #6
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f063 030f 	orn	r3, r3, #15
 800735c:	b2da      	uxtb	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	4930      	ldr	r1, [pc, #192]	; (800742c <I2C_MasterRequestRead+0x194>)
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 f961 	bl	8007632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e054      	b.n	8007424 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800737a:	897b      	ldrh	r3, [r7, #10]
 800737c:	b2da      	uxtb	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	4929      	ldr	r1, [pc, #164]	; (8007430 <I2C_MasterRequestRead+0x198>)
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f951 	bl	8007632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e044      	b.n	8007424 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800739a:	2300      	movs	r3, #0
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	613b      	str	r3, [r7, #16]
 80073ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 f8d9 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00d      	beq.n	80073f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e6:	d103      	bne.n	80073f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e017      	b.n	8007424 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80073f4:	897b      	ldrh	r3, [r7, #10]
 80073f6:	11db      	asrs	r3, r3, #7
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	f003 0306 	and.w	r3, r3, #6
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	f063 030e 	orn	r3, r3, #14
 8007404:	b2da      	uxtb	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	4907      	ldr	r1, [pc, #28]	; (8007430 <I2C_MasterRequestRead+0x198>)
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 f90d 	bl	8007632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	00010008 	.word	0x00010008
 8007430:	00010002 	.word	0x00010002

08007434 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007444:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800744e:	4b4b      	ldr	r3, [pc, #300]	; (800757c <I2C_DMAAbort+0x148>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	08db      	lsrs	r3, r3, #3
 8007454:	4a4a      	ldr	r2, [pc, #296]	; (8007580 <I2C_DMAAbort+0x14c>)
 8007456:	fba2 2303 	umull	r2, r3, r2, r3
 800745a:	0a1a      	lsrs	r2, r3, #8
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	00da      	lsls	r2, r3, #3
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	f043 0220 	orr.w	r2, r3, #32
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800747a:	e00a      	b.n	8007492 <I2C_DMAAbort+0x5e>
    }
    count--;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3b01      	subs	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800748c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007490:	d0ea      	beq.n	8007468 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749e:	2200      	movs	r2, #0
 80074a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ae:	2200      	movs	r2, #0
 80074b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074c0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2200      	movs	r2, #0
 80074c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d4:	2200      	movs	r2, #0
 80074d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e4:	2200      	movs	r2, #0
 80074e6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b60      	cmp	r3, #96	; 0x60
 8007502:	d10e      	bne.n	8007522 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2220      	movs	r2, #32
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2200      	movs	r2, #0
 8007518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800751a:	6978      	ldr	r0, [r7, #20]
 800751c:	f7fe fcca 	bl	8005eb4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007520:	e027      	b.n	8007572 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007522:	7cfb      	ldrb	r3, [r7, #19]
 8007524:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007528:	2b28      	cmp	r3, #40	; 0x28
 800752a:	d117      	bne.n	800755c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0201 	orr.w	r2, r2, #1
 800753a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800754a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2200      	movs	r2, #0
 8007550:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2228      	movs	r2, #40	; 0x28
 8007556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800755a:	e007      	b.n	800756c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2220      	movs	r2, #32
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800756c:	6978      	ldr	r0, [r7, #20]
 800756e:	f7fe fc97 	bl	8005ea0 <HAL_I2C_ErrorCallback>
}
 8007572:	bf00      	nop
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000014 	.word	0x20000014
 8007580:	14f8b589 	.word	0x14f8b589

08007584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	603b      	str	r3, [r7, #0]
 8007590:	4613      	mov	r3, r2
 8007592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007594:	e025      	b.n	80075e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759c:	d021      	beq.n	80075e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800759e:	f7fd f801 	bl	80045a4 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d302      	bcc.n	80075b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d116      	bne.n	80075e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f043 0220 	orr.w	r2, r3, #32
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e023      	b.n	800762a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	0c1b      	lsrs	r3, r3, #16
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d10d      	bne.n	8007608 <I2C_WaitOnFlagUntilTimeout+0x84>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	43da      	mvns	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4013      	ands	r3, r2
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	bf0c      	ite	eq
 80075fe:	2301      	moveq	r3, #1
 8007600:	2300      	movne	r3, #0
 8007602:	b2db      	uxtb	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	e00c      	b.n	8007622 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	43da      	mvns	r2, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	4013      	ands	r3, r2
 8007614:	b29b      	uxth	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	bf0c      	ite	eq
 800761a:	2301      	moveq	r3, #1
 800761c:	2300      	movne	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	429a      	cmp	r2, r3
 8007626:	d0b6      	beq.n	8007596 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007640:	e051      	b.n	80076e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800764c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007650:	d123      	bne.n	800769a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007660:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800766a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2220      	movs	r2, #32
 8007676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	f043 0204 	orr.w	r2, r3, #4
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e046      	b.n	8007728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a0:	d021      	beq.n	80076e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076a2:	f7fc ff7f 	bl	80045a4 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d302      	bcc.n	80076b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d116      	bne.n	80076e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	f043 0220 	orr.w	r2, r3, #32
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e020      	b.n	8007728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	0c1b      	lsrs	r3, r3, #16
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d10c      	bne.n	800770a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	43da      	mvns	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4013      	ands	r3, r2
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bf14      	ite	ne
 8007702:	2301      	movne	r3, #1
 8007704:	2300      	moveq	r3, #0
 8007706:	b2db      	uxtb	r3, r3
 8007708:	e00b      	b.n	8007722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	43da      	mvns	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	4013      	ands	r3, r2
 8007716:	b29b      	uxth	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	bf14      	ite	ne
 800771c:	2301      	movne	r3, #1
 800771e:	2300      	moveq	r3, #0
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d18d      	bne.n	8007642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800773c:	e02d      	b.n	800779a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 f900 	bl	8007944 <I2C_IsAcknowledgeFailed>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e02d      	b.n	80077aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d021      	beq.n	800779a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007756:	f7fc ff25 	bl	80045a4 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	429a      	cmp	r2, r3
 8007764:	d302      	bcc.n	800776c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d116      	bne.n	800779a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2220      	movs	r2, #32
 8007776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	f043 0220 	orr.w	r2, r3, #32
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e007      	b.n	80077aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a4:	2b80      	cmp	r3, #128	; 0x80
 80077a6:	d1ca      	bne.n	800773e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077be:	e02d      	b.n	800781c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f8bf 	bl	8007944 <I2C_IsAcknowledgeFailed>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e02d      	b.n	800782c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d6:	d021      	beq.n	800781c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077d8:	f7fc fee4 	bl	80045a4 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d302      	bcc.n	80077ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d116      	bne.n	800781c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007808:	f043 0220 	orr.w	r2, r3, #32
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e007      	b.n	800782c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b04      	cmp	r3, #4
 8007828:	d1ca      	bne.n	80077c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007840:	4b13      	ldr	r3, [pc, #76]	; (8007890 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	08db      	lsrs	r3, r3, #3
 8007846:	4a13      	ldr	r2, [pc, #76]	; (8007894 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007848:	fba2 2303 	umull	r2, r3, r2, r3
 800784c:	0a1a      	lsrs	r2, r3, #8
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3b01      	subs	r3, #1
 800785a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d107      	bne.n	8007872 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	f043 0220 	orr.w	r2, r3, #32
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e008      	b.n	8007884 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800787c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007880:	d0e9      	beq.n	8007856 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	20000014 	.word	0x20000014
 8007894:	14f8b589 	.word	0x14f8b589

08007898 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078a4:	e042      	b.n	800792c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	f003 0310 	and.w	r3, r3, #16
 80078b0:	2b10      	cmp	r3, #16
 80078b2:	d119      	bne.n	80078e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f06f 0210 	mvn.w	r2, #16
 80078bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e029      	b.n	800793c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078e8:	f7fc fe5c 	bl	80045a4 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d302      	bcc.n	80078fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d116      	bne.n	800792c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007918:	f043 0220 	orr.w	r2, r3, #32
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e007      	b.n	800793c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	d1b5      	bne.n	80078a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800795a:	d11b      	bne.n	8007994 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007964:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	f043 0204 	orr.w	r2, r3, #4
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e000      	b.n	8007996 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80079b2:	d103      	bne.n	80079bc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80079ba:	e007      	b.n	80079cc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80079c4:	d102      	bne.n	80079cc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2208      	movs	r2, #8
 80079ca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d129      	bne.n	8007a42 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2224      	movs	r2, #36	; 0x24
 80079f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0201 	bic.w	r2, r2, #1
 8007a04:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0210 	bic.w	r2, r2, #16
 8007a14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f042 0201 	orr.w	r2, r2, #1
 8007a34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e000      	b.n	8007a44 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007a42:	2302      	movs	r3, #2
  }
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b20      	cmp	r3, #32
 8007a68:	d12a      	bne.n	8007ac0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2224      	movs	r2, #36	; 0x24
 8007a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0201 	bic.w	r2, r2, #1
 8007a80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007a8a:	89fb      	ldrh	r3, [r7, #14]
 8007a8c:	f023 030f 	bic.w	r3, r3, #15
 8007a90:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	89fb      	ldrh	r3, [r7, #14]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	89fa      	ldrh	r2, [r7, #14]
 8007aa2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0201 	orr.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	e000      	b.n	8007ac2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007ac0:	2302      	movs	r3, #2
  }
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007ace:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ad0:	b08f      	sub	sp, #60	; 0x3c
 8007ad2:	af0a      	add	r7, sp, #40	; 0x28
 8007ad4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e10f      	b.n	8007d00 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d106      	bne.n	8007b00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f006 fee2 	bl	800e8c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2203      	movs	r2, #3
 8007b04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d102      	bne.n	8007b1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f003 f9bd 	bl	800ae9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	687e      	ldr	r6, [r7, #4]
 8007b2c:	466d      	mov	r5, sp
 8007b2e:	f106 0410 	add.w	r4, r6, #16
 8007b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b42:	1d33      	adds	r3, r6, #4
 8007b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b46:	6838      	ldr	r0, [r7, #0]
 8007b48:	f003 f894 	bl	800ac74 <USB_CoreInit>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2202      	movs	r2, #2
 8007b56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e0d0      	b.n	8007d00 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2100      	movs	r1, #0
 8007b64:	4618      	mov	r0, r3
 8007b66:	f003 f9ab 	bl	800aec0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]
 8007b6e:	e04a      	b.n	8007c06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007b70:	7bfa      	ldrb	r2, [r7, #15]
 8007b72:	6879      	ldr	r1, [r7, #4]
 8007b74:	4613      	mov	r3, r2
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	4413      	add	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	440b      	add	r3, r1
 8007b7e:	333d      	adds	r3, #61	; 0x3d
 8007b80:	2201      	movs	r2, #1
 8007b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007b84:	7bfa      	ldrb	r2, [r7, #15]
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	440b      	add	r3, r1
 8007b92:	333c      	adds	r3, #60	; 0x3c
 8007b94:	7bfa      	ldrb	r2, [r7, #15]
 8007b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007b98:	7bfa      	ldrb	r2, [r7, #15]
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	b298      	uxth	r0, r3
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	3344      	adds	r3, #68	; 0x44
 8007bac:	4602      	mov	r2, r0
 8007bae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007bb0:	7bfa      	ldrb	r2, [r7, #15]
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	3340      	adds	r3, #64	; 0x40
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007bc4:	7bfa      	ldrb	r2, [r7, #15]
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	4413      	add	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	440b      	add	r3, r1
 8007bd2:	3348      	adds	r3, #72	; 0x48
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007bd8:	7bfa      	ldrb	r2, [r7, #15]
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	334c      	adds	r3, #76	; 0x4c
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007bec:	7bfa      	ldrb	r2, [r7, #15]
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	3354      	adds	r3, #84	; 0x54
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	3301      	adds	r3, #1
 8007c04:	73fb      	strb	r3, [r7, #15]
 8007c06:	7bfa      	ldrb	r2, [r7, #15]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d3af      	bcc.n	8007b70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c10:	2300      	movs	r3, #0
 8007c12:	73fb      	strb	r3, [r7, #15]
 8007c14:	e044      	b.n	8007ca0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007c16:	7bfa      	ldrb	r2, [r7, #15]
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	4413      	add	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	440b      	add	r3, r1
 8007c24:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007c28:	2200      	movs	r2, #0
 8007c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007c2c:	7bfa      	ldrb	r2, [r7, #15]
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	440b      	add	r3, r1
 8007c3a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007c3e:	7bfa      	ldrb	r2, [r7, #15]
 8007c40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007c42:	7bfa      	ldrb	r2, [r7, #15]
 8007c44:	6879      	ldr	r1, [r7, #4]
 8007c46:	4613      	mov	r3, r2
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	440b      	add	r3, r1
 8007c50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007c54:	2200      	movs	r2, #0
 8007c56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007c58:	7bfa      	ldrb	r2, [r7, #15]
 8007c5a:	6879      	ldr	r1, [r7, #4]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007c6e:	7bfa      	ldrb	r2, [r7, #15]
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	00db      	lsls	r3, r3, #3
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007c84:	7bfa      	ldrb	r2, [r7, #15]
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	73fb      	strb	r3, [r7, #15]
 8007ca0:	7bfa      	ldrb	r2, [r7, #15]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d3b5      	bcc.n	8007c16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	687e      	ldr	r6, [r7, #4]
 8007cb2:	466d      	mov	r5, sp
 8007cb4:	f106 0410 	add.w	r4, r6, #16
 8007cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007cc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8007cc8:	1d33      	adds	r3, r6, #4
 8007cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ccc:	6838      	ldr	r0, [r7, #0]
 8007cce:	f003 f943 	bl	800af58 <USB_DevInit>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e00d      	b.n	8007d00 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f004 fa92 	bl	800c222 <USB_DevDisconnect>

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_PCD_Start+0x1c>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e020      	b.n	8007d66 <HAL_PCD_Start+0x5e>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d109      	bne.n	8007d48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d005      	beq.n	8007d48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f003 f895 	bl	800ae7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f004 fa42 	bl	800c1e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007d6e:	b590      	push	{r4, r7, lr}
 8007d70:	b08d      	sub	sp, #52	; 0x34
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f004 fb00 	bl	800c38a <USB_GetMode>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f040 848a 	bne.w	80086a6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f004 fa64 	bl	800c264 <USB_ReadInterrupts>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 8480 	beq.w	80086a4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	0a1b      	lsrs	r3, r3, #8
 8007dae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f004 fa51 	bl	800c264 <USB_ReadInterrupts>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d107      	bne.n	8007ddc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695a      	ldr	r2, [r3, #20]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f002 0202 	and.w	r2, r2, #2
 8007dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f004 fa3f 	bl	800c264 <USB_ReadInterrupts>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f003 0310 	and.w	r3, r3, #16
 8007dec:	2b10      	cmp	r3, #16
 8007dee:	d161      	bne.n	8007eb4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699a      	ldr	r2, [r3, #24]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 0210 	bic.w	r2, r2, #16
 8007dfe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	f003 020f 	and.w	r2, r3, #15
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	00db      	lsls	r3, r3, #3
 8007e10:	4413      	add	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	0c5b      	lsrs	r3, r3, #17
 8007e24:	f003 030f 	and.w	r3, r3, #15
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d124      	bne.n	8007e76 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007e32:	4013      	ands	r3, r2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d035      	beq.n	8007ea4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	091b      	lsrs	r3, r3, #4
 8007e40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6a38      	ldr	r0, [r7, #32]
 8007e4c:	f004 f876 	bl	800bf3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	091b      	lsrs	r3, r3, #4
 8007e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e5c:	441a      	add	r2, r3
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	6a1a      	ldr	r2, [r3, #32]
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	091b      	lsrs	r3, r3, #4
 8007e6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e6e:	441a      	add	r2, r3
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	621a      	str	r2, [r3, #32]
 8007e74:	e016      	b.n	8007ea4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	0c5b      	lsrs	r3, r3, #17
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	2b06      	cmp	r3, #6
 8007e80:	d110      	bne.n	8007ea4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e88:	2208      	movs	r2, #8
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6a38      	ldr	r0, [r7, #32]
 8007e8e:	f004 f855 	bl	800bf3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	6a1a      	ldr	r2, [r3, #32]
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	091b      	lsrs	r3, r3, #4
 8007e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e9e:	441a      	add	r2, r3
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699a      	ldr	r2, [r3, #24]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f042 0210 	orr.w	r2, r2, #16
 8007eb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f004 f9d3 	bl	800c264 <USB_ReadInterrupts>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ec4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ec8:	f040 80a7 	bne.w	800801a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f004 f9d8 	bl	800c28a <USB_ReadDevAllOutEpInterrupt>
 8007eda:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007edc:	e099      	b.n	8008012 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 808e 	beq.w	8008006 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f004 f9fc 	bl	800c2f2 <USB_ReadDevOutEPInterrupt>
 8007efa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00c      	beq.n	8007f20 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f12:	461a      	mov	r2, r3
 8007f14:	2301      	movs	r3, #1
 8007f16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fec2 	bl	8008ca4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f003 0308 	and.w	r3, r3, #8
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00c      	beq.n	8007f44 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f36:	461a      	mov	r2, r3
 8007f38:	2308      	movs	r3, #8
 8007f3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 ff98 	bl	8008e74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f003 0310 	and.w	r3, r3, #16
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d008      	beq.n	8007f60 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d030      	beq.n	8007fcc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f72:	2b80      	cmp	r3, #128	; 0x80
 8007f74:	d109      	bne.n	8007f8a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f88:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	78db      	ldrb	r3, [r3, #3]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d108      	bne.n	8007fba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2200      	movs	r2, #0
 8007fac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f006 fd8b 	bl	800ead0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	2302      	movs	r3, #2
 8007fca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	f003 0320 	and.w	r3, r3, #32
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d008      	beq.n	8007fe8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	2320      	movs	r3, #32
 8007fe6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffe:	461a      	mov	r2, r3
 8008000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008004:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	3301      	adds	r3, #1
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	085b      	lsrs	r3, r3, #1
 8008010:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	2b00      	cmp	r3, #0
 8008016:	f47f af62 	bne.w	8007ede <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f004 f920 	bl	800c264 <USB_ReadInterrupts>
 8008024:	4603      	mov	r3, r0
 8008026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800802a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800802e:	f040 80db 	bne.w	80081e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4618      	mov	r0, r3
 8008038:	f004 f941 	bl	800c2be <USB_ReadDevAllInEpInterrupt>
 800803c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008042:	e0cd      	b.n	80081e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 80c2 	beq.w	80081d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008056:	b2d2      	uxtb	r2, r2
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f004 f967 	bl	800c32e <USB_ReadDevInEPInterrupt>
 8008060:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d057      	beq.n	800811c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	f003 030f 	and.w	r3, r3, #15
 8008072:	2201      	movs	r2, #1
 8008074:	fa02 f303 	lsl.w	r3, r2, r3
 8008078:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	43db      	mvns	r3, r3
 8008086:	69f9      	ldr	r1, [r7, #28]
 8008088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800808c:	4013      	ands	r3, r2
 800808e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809c:	461a      	mov	r2, r3
 800809e:	2301      	movs	r3, #1
 80080a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d132      	bne.n	8008110 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ae:	4613      	mov	r3, r2
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	334c      	adds	r3, #76	; 0x4c
 80080ba:	6819      	ldr	r1, [r3, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c0:	4613      	mov	r3, r2
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4403      	add	r3, r0
 80080ca:	3348      	adds	r3, #72	; 0x48
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4419      	add	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d4:	4613      	mov	r3, r2
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	4413      	add	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4403      	add	r3, r0
 80080de:	334c      	adds	r3, #76	; 0x4c
 80080e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d113      	bne.n	8008110 <HAL_PCD_IRQHandler+0x3a2>
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ec:	4613      	mov	r3, r2
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	440b      	add	r3, r1
 80080f6:	3354      	adds	r3, #84	; 0x54
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d108      	bne.n	8008110 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6818      	ldr	r0, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008108:	461a      	mov	r2, r3
 800810a:	2101      	movs	r1, #1
 800810c:	f004 f96e 	bl	800c3ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	b2db      	uxtb	r3, r3
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f006 fc55 	bl	800e9c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b00      	cmp	r3, #0
 8008124:	d008      	beq.n	8008138 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008132:	461a      	mov	r2, r3
 8008134:	2308      	movs	r3, #8
 8008136:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f003 0310 	and.w	r3, r3, #16
 800813e:	2b00      	cmp	r3, #0
 8008140:	d008      	beq.n	8008154 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	4413      	add	r3, r2
 800814a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814e:	461a      	mov	r2, r3
 8008150:	2310      	movs	r3, #16
 8008152:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d008      	beq.n	8008170 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816a:	461a      	mov	r2, r3
 800816c:	2340      	movs	r3, #64	; 0x40
 800816e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d023      	beq.n	80081c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800817a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800817c:	6a38      	ldr	r0, [r7, #32]
 800817e:	f003 f84f 	bl	800b220 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008184:	4613      	mov	r3, r2
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	3338      	adds	r3, #56	; 0x38
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	3304      	adds	r3, #4
 8008194:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	78db      	ldrb	r3, [r3, #3]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d108      	bne.n	80081b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2200      	movs	r2, #0
 80081a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f006 fca2 	bl	800eaf4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081bc:	461a      	mov	r2, r3
 80081be:	2302      	movs	r3, #2
 80081c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80081cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fcdb 	bl	8008b8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	3301      	adds	r3, #1
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f47f af2e 	bne.w	8008044 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f004 f839 	bl	800c264 <USB_ReadInterrupts>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081fc:	d122      	bne.n	8008244 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800820c:	f023 0301 	bic.w	r3, r3, #1
 8008210:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008218:	2b01      	cmp	r3, #1
 800821a:	d108      	bne.n	800822e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008224:	2100      	movs	r1, #0
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fec2 	bl	8008fb0 <HAL_PCDEx_LPM_Callback>
 800822c:	e002      	b.n	8008234 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f006 fc40 	bl	800eab4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695a      	ldr	r2, [r3, #20]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4618      	mov	r0, r3
 800824a:	f004 f80b 	bl	800c264 <USB_ReadInterrupts>
 800824e:	4603      	mov	r3, r0
 8008250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008258:	d112      	bne.n	8008280 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b01      	cmp	r3, #1
 8008268:	d102      	bne.n	8008270 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f006 fbfc 	bl	800ea68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695a      	ldr	r2, [r3, #20]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800827e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	f003 ffed 	bl	800c264 <USB_ReadInterrupts>
 800828a:	4603      	mov	r3, r0
 800828c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008294:	f040 80b7 	bne.w	8008406 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082a6:	f023 0301 	bic.w	r3, r3, #1
 80082aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2110      	movs	r1, #16
 80082b2:	4618      	mov	r0, r3
 80082b4:	f002 ffb4 	bl	800b220 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082b8:	2300      	movs	r3, #0
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082bc:	e046      	b.n	800834c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ca:	461a      	mov	r2, r3
 80082cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082e2:	0151      	lsls	r1, r2, #5
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	440a      	add	r2, r1
 80082e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fe:	461a      	mov	r2, r3
 8008300:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008304:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	4413      	add	r3, r2
 800830e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008316:	0151      	lsls	r1, r2, #5
 8008318:	69fa      	ldr	r2, [r7, #28]
 800831a:	440a      	add	r2, r1
 800831c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008320:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008324:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	69fa      	ldr	r2, [r7, #28]
 800833a:	440a      	add	r2, r1
 800833c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008340:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008344:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008348:	3301      	adds	r3, #1
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008352:	429a      	cmp	r2, r3
 8008354:	d3b3      	bcc.n	80082be <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008364:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008368:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836e:	2b00      	cmp	r3, #0
 8008370:	d016      	beq.n	80083a0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800837c:	69fa      	ldr	r2, [r7, #28]
 800837e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008382:	f043 030b 	orr.w	r3, r3, #11
 8008386:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008398:	f043 030b 	orr.w	r3, r3, #11
 800839c:	6453      	str	r3, [r2, #68]	; 0x44
 800839e:	e015      	b.n	80083cc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	69fa      	ldr	r2, [r7, #28]
 80083aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80083b2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80083b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	69fa      	ldr	r2, [r7, #28]
 80083c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083c6:	f043 030b 	orr.w	r3, r3, #11
 80083ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80083de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6818      	ldr	r0, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80083f0:	461a      	mov	r2, r3
 80083f2:	f003 fffb 	bl	800c3ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	695a      	ldr	r2, [r3, #20]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008404:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4618      	mov	r0, r3
 800840c:	f003 ff2a 	bl	800c264 <USB_ReadInterrupts>
 8008410:	4603      	mov	r3, r0
 8008412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800841a:	d124      	bne.n	8008466 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4618      	mov	r0, r3
 8008422:	f003 ffc0 	bl	800c3a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4618      	mov	r0, r3
 800842c:	f002 ff75 	bl	800b31a <USB_GetDevSpeed>
 8008430:	4603      	mov	r3, r0
 8008432:	461a      	mov	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681c      	ldr	r4, [r3, #0]
 800843c:	f001 fa28 	bl	8009890 <HAL_RCC_GetHCLKFreq>
 8008440:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008446:	b2db      	uxtb	r3, r3
 8008448:	461a      	mov	r2, r3
 800844a:	4620      	mov	r0, r4
 800844c:	f002 fc74 	bl	800ad38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f006 fae0 	bl	800ea16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	695a      	ldr	r2, [r3, #20]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008464:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4618      	mov	r0, r3
 800846c:	f003 fefa 	bl	800c264 <USB_ReadInterrupts>
 8008470:	4603      	mov	r3, r0
 8008472:	f003 0308 	and.w	r3, r3, #8
 8008476:	2b08      	cmp	r3, #8
 8008478:	d10a      	bne.n	8008490 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f006 fabd 	bl	800e9fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695a      	ldr	r2, [r3, #20]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f002 0208 	and.w	r2, r2, #8
 800848e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4618      	mov	r0, r3
 8008496:	f003 fee5 	bl	800c264 <USB_ReadInterrupts>
 800849a:	4603      	mov	r3, r0
 800849c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a0:	2b80      	cmp	r3, #128	; 0x80
 80084a2:	d122      	bne.n	80084ea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80084b0:	2301      	movs	r3, #1
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
 80084b4:	e014      	b.n	80084e0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80084b6:	6879      	ldr	r1, [r7, #4]
 80084b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ba:	4613      	mov	r3, r2
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	440b      	add	r3, r1
 80084c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d105      	bne.n	80084da <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fb27 	bl	8008b28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	3301      	adds	r3, #1
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d3e5      	bcc.n	80084b6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f003 feb8 	bl	800c264 <USB_ReadInterrupts>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084fe:	d13b      	bne.n	8008578 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008500:	2301      	movs	r3, #1
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
 8008504:	e02b      	b.n	800855e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851a:	4613      	mov	r3, r2
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	440b      	add	r3, r1
 8008524:	3340      	adds	r3, #64	; 0x40
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d115      	bne.n	8008558 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800852c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800852e:	2b00      	cmp	r3, #0
 8008530:	da12      	bge.n	8008558 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008536:	4613      	mov	r3, r2
 8008538:	00db      	lsls	r3, r3, #3
 800853a:	4413      	add	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	440b      	add	r3, r1
 8008540:	333f      	adds	r3, #63	; 0x3f
 8008542:	2201      	movs	r2, #1
 8008544:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	b2db      	uxtb	r3, r3
 800854a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800854e:	b2db      	uxtb	r3, r3
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fae8 	bl	8008b28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	3301      	adds	r3, #1
 800855c:	627b      	str	r3, [r7, #36]	; 0x24
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008564:	429a      	cmp	r2, r3
 8008566:	d3ce      	bcc.n	8008506 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	695a      	ldr	r2, [r3, #20]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4618      	mov	r0, r3
 800857e:	f003 fe71 	bl	800c264 <USB_ReadInterrupts>
 8008582:	4603      	mov	r3, r0
 8008584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800858c:	d155      	bne.n	800863a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800858e:	2301      	movs	r3, #1
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
 8008592:	e045      	b.n	8008620 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80085a4:	6879      	ldr	r1, [r7, #4]
 80085a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a8:	4613      	mov	r3, r2
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d12e      	bne.n	800861a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80085bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80085be:	2b00      	cmp	r3, #0
 80085c0:	da2b      	bge.n	800861a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80085ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d121      	bne.n	800861a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085da:	4613      	mov	r3, r2
 80085dc:	00db      	lsls	r3, r3, #3
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	440b      	add	r3, r1
 80085e4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80085e8:	2201      	movs	r2, #1
 80085ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	69fa      	ldr	r2, [r7, #28]
 800860e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008616:	6053      	str	r3, [r2, #4]
            break;
 8008618:	e007      	b.n	800862a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	3301      	adds	r3, #1
 800861e:	627b      	str	r3, [r7, #36]	; 0x24
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008626:	429a      	cmp	r2, r3
 8008628:	d3b4      	bcc.n	8008594 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	695a      	ldr	r2, [r3, #20]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008638:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f003 fe10 	bl	800c264 <USB_ReadInterrupts>
 8008644:	4603      	mov	r3, r0
 8008646:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800864a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864e:	d10a      	bne.n	8008666 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f006 fa61 	bl	800eb18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	695a      	ldr	r2, [r3, #20]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4618      	mov	r0, r3
 800866c:	f003 fdfa 	bl	800c264 <USB_ReadInterrupts>
 8008670:	4603      	mov	r3, r0
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b04      	cmp	r3, #4
 8008678:	d115      	bne.n	80086a6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f006 fa51 	bl	800eb34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6859      	ldr	r1, [r3, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	430a      	orrs	r2, r1
 80086a0:	605a      	str	r2, [r3, #4]
 80086a2:	e000      	b.n	80086a6 <HAL_PCD_IRQHandler+0x938>
      return;
 80086a4:	bf00      	nop
    }
  }
}
 80086a6:	3734      	adds	r7, #52	; 0x34
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd90      	pop	{r4, r7, pc}

080086ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d101      	bne.n	80086c6 <HAL_PCD_SetAddress+0x1a>
 80086c2:	2302      	movs	r3, #2
 80086c4:	e013      	b.n	80086ee <HAL_PCD_SetAddress+0x42>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	78fa      	ldrb	r2, [r7, #3]
 80086d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	78fa      	ldrb	r2, [r7, #3]
 80086dc:	4611      	mov	r1, r2
 80086de:	4618      	mov	r0, r3
 80086e0:	f003 fd58 	bl	800c194 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b084      	sub	sp, #16
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	4608      	mov	r0, r1
 8008700:	4611      	mov	r1, r2
 8008702:	461a      	mov	r2, r3
 8008704:	4603      	mov	r3, r0
 8008706:	70fb      	strb	r3, [r7, #3]
 8008708:	460b      	mov	r3, r1
 800870a:	803b      	strh	r3, [r7, #0]
 800870c:	4613      	mov	r3, r2
 800870e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008718:	2b00      	cmp	r3, #0
 800871a:	da0f      	bge.n	800873c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	f003 020f 	and.w	r2, r3, #15
 8008722:	4613      	mov	r3, r2
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	4413      	add	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	3338      	adds	r3, #56	; 0x38
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	4413      	add	r3, r2
 8008730:	3304      	adds	r3, #4
 8008732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2201      	movs	r2, #1
 8008738:	705a      	strb	r2, [r3, #1]
 800873a:	e00f      	b.n	800875c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800873c:	78fb      	ldrb	r3, [r7, #3]
 800873e:	f003 020f 	and.w	r2, r3, #15
 8008742:	4613      	mov	r3, r2
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	4413      	add	r3, r2
 8008752:	3304      	adds	r3, #4
 8008754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	f003 030f 	and.w	r3, r3, #15
 8008762:	b2da      	uxtb	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008768:	883a      	ldrh	r2, [r7, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	78ba      	ldrb	r2, [r7, #2]
 8008772:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	b29a      	uxth	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008786:	78bb      	ldrb	r3, [r7, #2]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d102      	bne.n	8008792 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <HAL_PCD_EP_Open+0xaa>
 800879c:	2302      	movs	r3, #2
 800879e:	e00e      	b.n	80087be <HAL_PCD_EP_Open+0xc8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68f9      	ldr	r1, [r7, #12]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f002 fdd8 	bl	800b364 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80087bc:	7afb      	ldrb	r3, [r7, #11]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80087d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	da0f      	bge.n	80087fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087da:	78fb      	ldrb	r3, [r7, #3]
 80087dc:	f003 020f 	and.w	r2, r3, #15
 80087e0:	4613      	mov	r3, r2
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	3338      	adds	r3, #56	; 0x38
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	4413      	add	r3, r2
 80087ee:	3304      	adds	r3, #4
 80087f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2201      	movs	r2, #1
 80087f6:	705a      	strb	r2, [r3, #1]
 80087f8:	e00f      	b.n	800881a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	f003 020f 	and.w	r2, r3, #15
 8008800:	4613      	mov	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	4413      	add	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	4413      	add	r3, r2
 8008810:	3304      	adds	r3, #4
 8008812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	f003 030f 	and.w	r3, r3, #15
 8008820:	b2da      	uxtb	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800882c:	2b01      	cmp	r3, #1
 800882e:	d101      	bne.n	8008834 <HAL_PCD_EP_Close+0x6e>
 8008830:	2302      	movs	r3, #2
 8008832:	e00e      	b.n	8008852 <HAL_PCD_EP_Close+0x8c>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68f9      	ldr	r1, [r7, #12]
 8008842:	4618      	mov	r0, r3
 8008844:	f002 fe16 	bl	800b474 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b086      	sub	sp, #24
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
 8008866:	460b      	mov	r3, r1
 8008868:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800886a:	7afb      	ldrb	r3, [r7, #11]
 800886c:	f003 020f 	and.w	r2, r3, #15
 8008870:	4613      	mov	r3, r2
 8008872:	00db      	lsls	r3, r3, #3
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	3304      	adds	r3, #4
 8008882:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2200      	movs	r2, #0
 8008894:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2200      	movs	r2, #0
 800889a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800889c:	7afb      	ldrb	r3, [r7, #11]
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d102      	bne.n	80088b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80088b6:	7afb      	ldrb	r3, [r7, #11]
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d109      	bne.n	80088d4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	461a      	mov	r2, r3
 80088cc:	6979      	ldr	r1, [r7, #20]
 80088ce:	f003 f8f5 	bl	800babc <USB_EP0StartXfer>
 80088d2:	e008      	b.n	80088e6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	461a      	mov	r2, r3
 80088e0:	6979      	ldr	r1, [r7, #20]
 80088e2:	f002 fea3 	bl	800b62c <USB_EPStartXfer>
  }

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	f003 020f 	and.w	r2, r3, #15
 8008902:	6879      	ldr	r1, [r7, #4]
 8008904:	4613      	mov	r3, r2
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	440b      	add	r3, r1
 800890e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008912:	681b      	ldr	r3, [r3, #0]
}
 8008914:	4618      	mov	r0, r3
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	607a      	str	r2, [r7, #4]
 800892a:	603b      	str	r3, [r7, #0]
 800892c:	460b      	mov	r3, r1
 800892e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008930:	7afb      	ldrb	r3, [r7, #11]
 8008932:	f003 020f 	and.w	r2, r3, #15
 8008936:	4613      	mov	r3, r2
 8008938:	00db      	lsls	r3, r3, #3
 800893a:	4413      	add	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	3338      	adds	r3, #56	; 0x38
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	4413      	add	r3, r2
 8008944:	3304      	adds	r3, #4
 8008946:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2200      	movs	r2, #0
 8008958:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2201      	movs	r2, #1
 800895e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	f003 030f 	and.w	r3, r3, #15
 8008966:	b2da      	uxtb	r2, r3
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d102      	bne.n	800897a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800897a:	7afb      	ldrb	r3, [r7, #11]
 800897c:	f003 030f 	and.w	r3, r3, #15
 8008980:	2b00      	cmp	r3, #0
 8008982:	d109      	bne.n	8008998 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6818      	ldr	r0, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	b2db      	uxtb	r3, r3
 800898e:	461a      	mov	r2, r3
 8008990:	6979      	ldr	r1, [r7, #20]
 8008992:	f003 f893 	bl	800babc <USB_EP0StartXfer>
 8008996:	e008      	b.n	80089aa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	461a      	mov	r2, r3
 80089a4:	6979      	ldr	r1, [r7, #20]
 80089a6:	f002 fe41 	bl	800b62c <USB_EPStartXfer>
  }

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	f003 020f 	and.w	r2, r3, #15
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d901      	bls.n	80089d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e050      	b.n	8008a74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80089d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	da0f      	bge.n	80089fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	f003 020f 	and.w	r2, r3, #15
 80089e0:	4613      	mov	r3, r2
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	3338      	adds	r3, #56	; 0x38
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	4413      	add	r3, r2
 80089ee:	3304      	adds	r3, #4
 80089f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2201      	movs	r2, #1
 80089f6:	705a      	strb	r2, [r3, #1]
 80089f8:	e00d      	b.n	8008a16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	4613      	mov	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a1c:	78fb      	ldrb	r3, [r7, #3]
 8008a1e:	f003 030f 	and.w	r3, r3, #15
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d101      	bne.n	8008a36 <HAL_PCD_EP_SetStall+0x82>
 8008a32:	2302      	movs	r3, #2
 8008a34:	e01e      	b.n	8008a74 <HAL_PCD_EP_SetStall+0xc0>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68f9      	ldr	r1, [r7, #12]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f003 fad1 	bl	800bfec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	f003 030f 	and.w	r3, r3, #15
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10a      	bne.n	8008a6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6818      	ldr	r0, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	b2d9      	uxtb	r1, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a64:	461a      	mov	r2, r3
 8008a66:	f003 fcc1 	bl	800c3ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008a88:	78fb      	ldrb	r3, [r7, #3]
 8008a8a:	f003 020f 	and.w	r2, r3, #15
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d901      	bls.n	8008a9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e042      	b.n	8008b20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da0f      	bge.n	8008ac2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	f003 020f 	and.w	r2, r3, #15
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	3338      	adds	r3, #56	; 0x38
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	705a      	strb	r2, [r3, #1]
 8008ac0:	e00f      	b.n	8008ae2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	f003 020f 	and.w	r2, r3, #15
 8008ac8:	4613      	mov	r3, r2
 8008aca:	00db      	lsls	r3, r3, #3
 8008acc:	4413      	add	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	3304      	adds	r3, #4
 8008ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	f003 030f 	and.w	r3, r3, #15
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d101      	bne.n	8008b02 <HAL_PCD_EP_ClrStall+0x86>
 8008afe:	2302      	movs	r3, #2
 8008b00:	e00e      	b.n	8008b20 <HAL_PCD_EP_ClrStall+0xa4>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68f9      	ldr	r1, [r7, #12]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f003 fad9 	bl	800c0c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	da0c      	bge.n	8008b56 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	f003 020f 	and.w	r2, r3, #15
 8008b42:	4613      	mov	r3, r2
 8008b44:	00db      	lsls	r3, r3, #3
 8008b46:	4413      	add	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	3338      	adds	r3, #56	; 0x38
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	4413      	add	r3, r2
 8008b50:	3304      	adds	r3, #4
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	e00c      	b.n	8008b70 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b56:	78fb      	ldrb	r3, [r7, #3]
 8008b58:	f003 020f 	and.w	r2, r3, #15
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	4413      	add	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68f9      	ldr	r1, [r7, #12]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f003 f8f8 	bl	800bd6c <USB_EPStopXfer>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008b80:	7afb      	ldrb	r3, [r7, #11]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b08a      	sub	sp, #40	; 0x28
 8008b8e:	af02      	add	r7, sp, #8
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	00db      	lsls	r3, r3, #3
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	3338      	adds	r3, #56	; 0x38
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	4413      	add	r3, r2
 8008bae:	3304      	adds	r3, #4
 8008bb0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6a1a      	ldr	r2, [r3, #32]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d901      	bls.n	8008bc2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e06c      	b.n	8008c9c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	699a      	ldr	r2, [r3, #24]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d902      	bls.n	8008bde <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	3303      	adds	r3, #3
 8008be2:	089b      	lsrs	r3, r3, #2
 8008be4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008be6:	e02b      	b.n	8008c40 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	699a      	ldr	r2, [r3, #24]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	69fa      	ldr	r2, [r7, #28]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d902      	bls.n	8008c04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	3303      	adds	r3, #3
 8008c08:	089b      	lsrs	r3, r3, #2
 8008c0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6919      	ldr	r1, [r3, #16]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	4603      	mov	r3, r0
 8008c22:	6978      	ldr	r0, [r7, #20]
 8008c24:	f003 f94c 	bl	800bec0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	691a      	ldr	r2, [r3, #16]
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	441a      	add	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6a1a      	ldr	r2, [r3, #32]
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	441a      	add	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d809      	bhi.n	8008c6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6a1a      	ldr	r2, [r3, #32]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d203      	bcs.n	8008c6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1be      	bne.n	8008be8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	699a      	ldr	r2, [r3, #24]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d811      	bhi.n	8008c9a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	f003 030f 	and.w	r3, r3, #15
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	43db      	mvns	r3, r3
 8008c90:	6939      	ldr	r1, [r7, #16]
 8008c92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c96:	4013      	ands	r3, r2
 8008c98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3720      	adds	r7, #32
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	333c      	adds	r3, #60	; 0x3c
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d17b      	bne.n	8008dd2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f003 0308 	and.w	r3, r3, #8
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d015      	beq.n	8008d10 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	4a61      	ldr	r2, [pc, #388]	; (8008e6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	f240 80b9 	bls.w	8008e60 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 80b3 	beq.w	8008e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d06:	461a      	mov	r2, r3
 8008d08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d0c:	6093      	str	r3, [r2, #8]
 8008d0e:	e0a7      	b.n	8008e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f003 0320 	and.w	r3, r3, #32
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d009      	beq.n	8008d2e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d26:	461a      	mov	r2, r3
 8008d28:	2320      	movs	r3, #32
 8008d2a:	6093      	str	r3, [r2, #8]
 8008d2c:	e098      	b.n	8008e60 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f040 8093 	bne.w	8008e60 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	4a4b      	ldr	r2, [pc, #300]	; (8008e6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d90f      	bls.n	8008d62 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00a      	beq.n	8008d62 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d58:	461a      	mov	r2, r3
 8008d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d5e:	6093      	str	r3, [r2, #8]
 8008d60:	e07e      	b.n	8008e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	4613      	mov	r3, r2
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	4413      	add	r3, r2
 8008d74:	3304      	adds	r3, #4
 8008d76:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	69da      	ldr	r2, [r3, #28]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	0159      	lsls	r1, r3, #5
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	440b      	add	r3, r1
 8008d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d8e:	1ad2      	subs	r2, r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d114      	bne.n	8008dc4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d109      	bne.n	8008db6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008dac:	461a      	mov	r2, r3
 8008dae:	2101      	movs	r1, #1
 8008db0:	f003 fb1c 	bl	800c3ec <USB_EP0_OutStart>
 8008db4:	e006      	b.n	8008dc4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	691a      	ldr	r2, [r3, #16]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	441a      	add	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	4619      	mov	r1, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f005 fde0 	bl	800e990 <HAL_PCD_DataOutStageCallback>
 8008dd0:	e046      	b.n	8008e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	4a26      	ldr	r2, [pc, #152]	; (8008e70 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d124      	bne.n	8008e24 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00a      	beq.n	8008dfa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df0:	461a      	mov	r2, r3
 8008df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008df6:	6093      	str	r3, [r2, #8]
 8008df8:	e032      	b.n	8008e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	f003 0320 	and.w	r3, r3, #32
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d008      	beq.n	8008e16 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e10:	461a      	mov	r2, r3
 8008e12:	2320      	movs	r3, #32
 8008e14:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f005 fdb7 	bl	800e990 <HAL_PCD_DataOutStageCallback>
 8008e22:	e01d      	b.n	8008e60 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d114      	bne.n	8008e54 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008e2a:	6879      	ldr	r1, [r7, #4]
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	00db      	lsls	r3, r3, #3
 8008e32:	4413      	add	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	440b      	add	r3, r1
 8008e38:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d108      	bne.n	8008e54 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6818      	ldr	r0, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	2100      	movs	r1, #0
 8008e50:	f003 facc 	bl	800c3ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f005 fd98 	bl	800e990 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3720      	adds	r7, #32
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	4f54300a 	.word	0x4f54300a
 8008e70:	4f54310a 	.word	0x4f54310a

08008e74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	333c      	adds	r3, #60	; 0x3c
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4a15      	ldr	r2, [pc, #84]	; (8008efc <PCD_EP_OutSetupPacket_int+0x88>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d90e      	bls.n	8008ec8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d009      	beq.n	8008ec8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ec6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f005 fd4f 	bl	800e96c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4a0a      	ldr	r2, [pc, #40]	; (8008efc <PCD_EP_OutSetupPacket_int+0x88>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d90c      	bls.n	8008ef0 <PCD_EP_OutSetupPacket_int+0x7c>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d108      	bne.n	8008ef0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6818      	ldr	r0, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ee8:	461a      	mov	r2, r3
 8008eea:	2101      	movs	r1, #1
 8008eec:	f003 fa7e 	bl	800c3ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	4f54300a 	.word	0x4f54300a

08008f00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008f18:	78fb      	ldrb	r3, [r7, #3]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d107      	bne.n	8008f2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008f1e:	883b      	ldrh	r3, [r7, #0]
 8008f20:	0419      	lsls	r1, r3, #16
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8008f2c:	e028      	b.n	8008f80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f34:	0c1b      	lsrs	r3, r3, #16
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	4413      	add	r3, r2
 8008f3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
 8008f40:	e00d      	b.n	8008f5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	3340      	adds	r3, #64	; 0x40
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	0c1b      	lsrs	r3, r3, #16
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	4413      	add	r3, r2
 8008f56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	73fb      	strb	r3, [r7, #15]
 8008f5e:	7bfa      	ldrb	r2, [r7, #15]
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d3ec      	bcc.n	8008f42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008f68:	883b      	ldrh	r3, [r7, #0]
 8008f6a:	0418      	lsls	r0, r3, #16
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6819      	ldr	r1, [r3, #0]
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	4302      	orrs	r2, r0
 8008f78:	3340      	adds	r3, #64	; 0x40
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	440b      	add	r3, r1
 8008f7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b083      	sub	sp, #12
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	460b      	mov	r3, r1
 8008f98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	887a      	ldrh	r2, [r7, #2]
 8008fa0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e267      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d075      	beq.n	80090d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fe6:	4b88      	ldr	r3, [pc, #544]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f003 030c 	and.w	r3, r3, #12
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d00c      	beq.n	800900c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ff2:	4b85      	ldr	r3, [pc, #532]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ffa:	2b08      	cmp	r3, #8
 8008ffc:	d112      	bne.n	8009024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ffe:	4b82      	ldr	r3, [pc, #520]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800900a:	d10b      	bne.n	8009024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800900c:	4b7e      	ldr	r3, [pc, #504]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d05b      	beq.n	80090d0 <HAL_RCC_OscConfig+0x108>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d157      	bne.n	80090d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e242      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800902c:	d106      	bne.n	800903c <HAL_RCC_OscConfig+0x74>
 800902e:	4b76      	ldr	r3, [pc, #472]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a75      	ldr	r2, [pc, #468]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009038:	6013      	str	r3, [r2, #0]
 800903a:	e01d      	b.n	8009078 <HAL_RCC_OscConfig+0xb0>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009044:	d10c      	bne.n	8009060 <HAL_RCC_OscConfig+0x98>
 8009046:	4b70      	ldr	r3, [pc, #448]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a6f      	ldr	r2, [pc, #444]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800904c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	4b6d      	ldr	r3, [pc, #436]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a6c      	ldr	r2, [pc, #432]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	e00b      	b.n	8009078 <HAL_RCC_OscConfig+0xb0>
 8009060:	4b69      	ldr	r3, [pc, #420]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a68      	ldr	r2, [pc, #416]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	4b66      	ldr	r3, [pc, #408]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a65      	ldr	r2, [pc, #404]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d013      	beq.n	80090a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009080:	f7fb fa90 	bl	80045a4 <HAL_GetTick>
 8009084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009086:	e008      	b.n	800909a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009088:	f7fb fa8c 	bl	80045a4 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b64      	cmp	r3, #100	; 0x64
 8009094:	d901      	bls.n	800909a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e207      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800909a:	4b5b      	ldr	r3, [pc, #364]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0f0      	beq.n	8009088 <HAL_RCC_OscConfig+0xc0>
 80090a6:	e014      	b.n	80090d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090a8:	f7fb fa7c 	bl	80045a4 <HAL_GetTick>
 80090ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090ae:	e008      	b.n	80090c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090b0:	f7fb fa78 	bl	80045a4 <HAL_GetTick>
 80090b4:	4602      	mov	r2, r0
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	2b64      	cmp	r3, #100	; 0x64
 80090bc:	d901      	bls.n	80090c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e1f3      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090c2:	4b51      	ldr	r3, [pc, #324]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1f0      	bne.n	80090b0 <HAL_RCC_OscConfig+0xe8>
 80090ce:	e000      	b.n	80090d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d063      	beq.n	80091a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090de:	4b4a      	ldr	r3, [pc, #296]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f003 030c 	and.w	r3, r3, #12
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00b      	beq.n	8009102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090ea:	4b47      	ldr	r3, [pc, #284]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090f2:	2b08      	cmp	r3, #8
 80090f4:	d11c      	bne.n	8009130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090f6:	4b44      	ldr	r3, [pc, #272]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d116      	bne.n	8009130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009102:	4b41      	ldr	r3, [pc, #260]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0302 	and.w	r3, r3, #2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d005      	beq.n	800911a <HAL_RCC_OscConfig+0x152>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d001      	beq.n	800911a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e1c7      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800911a:	4b3b      	ldr	r3, [pc, #236]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	00db      	lsls	r3, r3, #3
 8009128:	4937      	ldr	r1, [pc, #220]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800912a:	4313      	orrs	r3, r2
 800912c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800912e:	e03a      	b.n	80091a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d020      	beq.n	800917a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009138:	4b34      	ldr	r3, [pc, #208]	; (800920c <HAL_RCC_OscConfig+0x244>)
 800913a:	2201      	movs	r2, #1
 800913c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800913e:	f7fb fa31 	bl	80045a4 <HAL_GetTick>
 8009142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009144:	e008      	b.n	8009158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009146:	f7fb fa2d 	bl	80045a4 <HAL_GetTick>
 800914a:	4602      	mov	r2, r0
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	2b02      	cmp	r3, #2
 8009152:	d901      	bls.n	8009158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009154:	2303      	movs	r3, #3
 8009156:	e1a8      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009158:	4b2b      	ldr	r3, [pc, #172]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0302 	and.w	r3, r3, #2
 8009160:	2b00      	cmp	r3, #0
 8009162:	d0f0      	beq.n	8009146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009164:	4b28      	ldr	r3, [pc, #160]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	4925      	ldr	r1, [pc, #148]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009174:	4313      	orrs	r3, r2
 8009176:	600b      	str	r3, [r1, #0]
 8009178:	e015      	b.n	80091a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800917a:	4b24      	ldr	r3, [pc, #144]	; (800920c <HAL_RCC_OscConfig+0x244>)
 800917c:	2200      	movs	r2, #0
 800917e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009180:	f7fb fa10 	bl	80045a4 <HAL_GetTick>
 8009184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009186:	e008      	b.n	800919a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009188:	f7fb fa0c 	bl	80045a4 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	2b02      	cmp	r3, #2
 8009194:	d901      	bls.n	800919a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	e187      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800919a:	4b1b      	ldr	r3, [pc, #108]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1f0      	bne.n	8009188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0308 	and.w	r3, r3, #8
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d036      	beq.n	8009220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d016      	beq.n	80091e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091ba:	4b15      	ldr	r3, [pc, #84]	; (8009210 <HAL_RCC_OscConfig+0x248>)
 80091bc:	2201      	movs	r2, #1
 80091be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091c0:	f7fb f9f0 	bl	80045a4 <HAL_GetTick>
 80091c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091c6:	e008      	b.n	80091da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091c8:	f7fb f9ec 	bl	80045a4 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d901      	bls.n	80091da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e167      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091da:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 80091dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0f0      	beq.n	80091c8 <HAL_RCC_OscConfig+0x200>
 80091e6:	e01b      	b.n	8009220 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091e8:	4b09      	ldr	r3, [pc, #36]	; (8009210 <HAL_RCC_OscConfig+0x248>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091ee:	f7fb f9d9 	bl	80045a4 <HAL_GetTick>
 80091f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091f4:	e00e      	b.n	8009214 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091f6:	f7fb f9d5 	bl	80045a4 <HAL_GetTick>
 80091fa:	4602      	mov	r2, r0
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	2b02      	cmp	r3, #2
 8009202:	d907      	bls.n	8009214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e150      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
 8009208:	40023800 	.word	0x40023800
 800920c:	42470000 	.word	0x42470000
 8009210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009214:	4b88      	ldr	r3, [pc, #544]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1ea      	bne.n	80091f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 8097 	beq.w	800935c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800922e:	2300      	movs	r3, #0
 8009230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009232:	4b81      	ldr	r3, [pc, #516]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10f      	bne.n	800925e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800923e:	2300      	movs	r3, #0
 8009240:	60bb      	str	r3, [r7, #8]
 8009242:	4b7d      	ldr	r3, [pc, #500]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	4a7c      	ldr	r2, [pc, #496]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800924c:	6413      	str	r3, [r2, #64]	; 0x40
 800924e:	4b7a      	ldr	r3, [pc, #488]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009256:	60bb      	str	r3, [r7, #8]
 8009258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800925a:	2301      	movs	r3, #1
 800925c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800925e:	4b77      	ldr	r3, [pc, #476]	; (800943c <HAL_RCC_OscConfig+0x474>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009266:	2b00      	cmp	r3, #0
 8009268:	d118      	bne.n	800929c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800926a:	4b74      	ldr	r3, [pc, #464]	; (800943c <HAL_RCC_OscConfig+0x474>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a73      	ldr	r2, [pc, #460]	; (800943c <HAL_RCC_OscConfig+0x474>)
 8009270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009276:	f7fb f995 	bl	80045a4 <HAL_GetTick>
 800927a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800927c:	e008      	b.n	8009290 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800927e:	f7fb f991 	bl	80045a4 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d901      	bls.n	8009290 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e10c      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009290:	4b6a      	ldr	r3, [pc, #424]	; (800943c <HAL_RCC_OscConfig+0x474>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0f0      	beq.n	800927e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d106      	bne.n	80092b2 <HAL_RCC_OscConfig+0x2ea>
 80092a4:	4b64      	ldr	r3, [pc, #400]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a8:	4a63      	ldr	r2, [pc, #396]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092aa:	f043 0301 	orr.w	r3, r3, #1
 80092ae:	6713      	str	r3, [r2, #112]	; 0x70
 80092b0:	e01c      	b.n	80092ec <HAL_RCC_OscConfig+0x324>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	2b05      	cmp	r3, #5
 80092b8:	d10c      	bne.n	80092d4 <HAL_RCC_OscConfig+0x30c>
 80092ba:	4b5f      	ldr	r3, [pc, #380]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092be:	4a5e      	ldr	r2, [pc, #376]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092c0:	f043 0304 	orr.w	r3, r3, #4
 80092c4:	6713      	str	r3, [r2, #112]	; 0x70
 80092c6:	4b5c      	ldr	r3, [pc, #368]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ca:	4a5b      	ldr	r2, [pc, #364]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092cc:	f043 0301 	orr.w	r3, r3, #1
 80092d0:	6713      	str	r3, [r2, #112]	; 0x70
 80092d2:	e00b      	b.n	80092ec <HAL_RCC_OscConfig+0x324>
 80092d4:	4b58      	ldr	r3, [pc, #352]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d8:	4a57      	ldr	r2, [pc, #348]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092da:	f023 0301 	bic.w	r3, r3, #1
 80092de:	6713      	str	r3, [r2, #112]	; 0x70
 80092e0:	4b55      	ldr	r3, [pc, #340]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e4:	4a54      	ldr	r2, [pc, #336]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092e6:	f023 0304 	bic.w	r3, r3, #4
 80092ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d015      	beq.n	8009320 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092f4:	f7fb f956 	bl	80045a4 <HAL_GetTick>
 80092f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092fa:	e00a      	b.n	8009312 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092fc:	f7fb f952 	bl	80045a4 <HAL_GetTick>
 8009300:	4602      	mov	r2, r0
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	f241 3288 	movw	r2, #5000	; 0x1388
 800930a:	4293      	cmp	r3, r2
 800930c:	d901      	bls.n	8009312 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e0cb      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009312:	4b49      	ldr	r3, [pc, #292]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0ee      	beq.n	80092fc <HAL_RCC_OscConfig+0x334>
 800931e:	e014      	b.n	800934a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009320:	f7fb f940 	bl	80045a4 <HAL_GetTick>
 8009324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009326:	e00a      	b.n	800933e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009328:	f7fb f93c 	bl	80045a4 <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	f241 3288 	movw	r2, #5000	; 0x1388
 8009336:	4293      	cmp	r3, r2
 8009338:	d901      	bls.n	800933e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e0b5      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800933e:	4b3e      	ldr	r3, [pc, #248]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009342:	f003 0302 	and.w	r3, r3, #2
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1ee      	bne.n	8009328 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800934a:	7dfb      	ldrb	r3, [r7, #23]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d105      	bne.n	800935c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009350:	4b39      	ldr	r3, [pc, #228]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009354:	4a38      	ldr	r2, [pc, #224]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800935a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80a1 	beq.w	80094a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009366:	4b34      	ldr	r3, [pc, #208]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f003 030c 	and.w	r3, r3, #12
 800936e:	2b08      	cmp	r3, #8
 8009370:	d05c      	beq.n	800942c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	2b02      	cmp	r3, #2
 8009378:	d141      	bne.n	80093fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800937a:	4b31      	ldr	r3, [pc, #196]	; (8009440 <HAL_RCC_OscConfig+0x478>)
 800937c:	2200      	movs	r2, #0
 800937e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009380:	f7fb f910 	bl	80045a4 <HAL_GetTick>
 8009384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009386:	e008      	b.n	800939a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009388:	f7fb f90c 	bl	80045a4 <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	2b02      	cmp	r3, #2
 8009394:	d901      	bls.n	800939a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e087      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800939a:	4b27      	ldr	r3, [pc, #156]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1f0      	bne.n	8009388 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	69da      	ldr	r2, [r3, #28]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	431a      	orrs	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	019b      	lsls	r3, r3, #6
 80093b6:	431a      	orrs	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093bc:	085b      	lsrs	r3, r3, #1
 80093be:	3b01      	subs	r3, #1
 80093c0:	041b      	lsls	r3, r3, #16
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	061b      	lsls	r3, r3, #24
 80093ca:	491b      	ldr	r1, [pc, #108]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093d0:	4b1b      	ldr	r3, [pc, #108]	; (8009440 <HAL_RCC_OscConfig+0x478>)
 80093d2:	2201      	movs	r2, #1
 80093d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093d6:	f7fb f8e5 	bl	80045a4 <HAL_GetTick>
 80093da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093dc:	e008      	b.n	80093f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093de:	f7fb f8e1 	bl	80045a4 <HAL_GetTick>
 80093e2:	4602      	mov	r2, r0
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d901      	bls.n	80093f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e05c      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093f0:	4b11      	ldr	r3, [pc, #68]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0f0      	beq.n	80093de <HAL_RCC_OscConfig+0x416>
 80093fc:	e054      	b.n	80094a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093fe:	4b10      	ldr	r3, [pc, #64]	; (8009440 <HAL_RCC_OscConfig+0x478>)
 8009400:	2200      	movs	r2, #0
 8009402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009404:	f7fb f8ce 	bl	80045a4 <HAL_GetTick>
 8009408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800940a:	e008      	b.n	800941e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800940c:	f7fb f8ca 	bl	80045a4 <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	2b02      	cmp	r3, #2
 8009418:	d901      	bls.n	800941e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e045      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800941e:	4b06      	ldr	r3, [pc, #24]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1f0      	bne.n	800940c <HAL_RCC_OscConfig+0x444>
 800942a:	e03d      	b.n	80094a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d107      	bne.n	8009444 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e038      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
 8009438:	40023800 	.word	0x40023800
 800943c:	40007000 	.word	0x40007000
 8009440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009444:	4b1b      	ldr	r3, [pc, #108]	; (80094b4 <HAL_RCC_OscConfig+0x4ec>)
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d028      	beq.n	80094a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800945c:	429a      	cmp	r2, r3
 800945e:	d121      	bne.n	80094a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800946a:	429a      	cmp	r2, r3
 800946c:	d11a      	bne.n	80094a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009474:	4013      	ands	r3, r2
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800947a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800947c:	4293      	cmp	r3, r2
 800947e:	d111      	bne.n	80094a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948a:	085b      	lsrs	r3, r3, #1
 800948c:	3b01      	subs	r3, #1
 800948e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009490:	429a      	cmp	r2, r3
 8009492:	d107      	bne.n	80094a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d001      	beq.n	80094a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e000      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	40023800 	.word	0x40023800

080094b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e0cc      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094cc:	4b68      	ldr	r3, [pc, #416]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 030f 	and.w	r3, r3, #15
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d90c      	bls.n	80094f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094da:	4b65      	ldr	r3, [pc, #404]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	b2d2      	uxtb	r2, r2
 80094e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094e2:	4b63      	ldr	r3, [pc, #396]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 030f 	and.w	r3, r3, #15
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d001      	beq.n	80094f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e0b8      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0302 	and.w	r3, r3, #2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d020      	beq.n	8009542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 0304 	and.w	r3, r3, #4
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800950c:	4b59      	ldr	r3, [pc, #356]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	4a58      	ldr	r2, [pc, #352]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0308 	and.w	r3, r3, #8
 8009520:	2b00      	cmp	r3, #0
 8009522:	d005      	beq.n	8009530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009524:	4b53      	ldr	r3, [pc, #332]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	4a52      	ldr	r2, [pc, #328]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800952a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800952e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009530:	4b50      	ldr	r3, [pc, #320]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	494d      	ldr	r1, [pc, #308]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800953e:	4313      	orrs	r3, r2
 8009540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d044      	beq.n	80095d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d107      	bne.n	8009566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009556:	4b47      	ldr	r3, [pc, #284]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d119      	bne.n	8009596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e07f      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	2b02      	cmp	r3, #2
 800956c:	d003      	beq.n	8009576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009572:	2b03      	cmp	r3, #3
 8009574:	d107      	bne.n	8009586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009576:	4b3f      	ldr	r3, [pc, #252]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d109      	bne.n	8009596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e06f      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009586:	4b3b      	ldr	r3, [pc, #236]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e067      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009596:	4b37      	ldr	r3, [pc, #220]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f023 0203 	bic.w	r2, r3, #3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	4934      	ldr	r1, [pc, #208]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80095a8:	f7fa fffc 	bl	80045a4 <HAL_GetTick>
 80095ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095ae:	e00a      	b.n	80095c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095b0:	f7fa fff8 	bl	80045a4 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80095be:	4293      	cmp	r3, r2
 80095c0:	d901      	bls.n	80095c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e04f      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095c6:	4b2b      	ldr	r3, [pc, #172]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	f003 020c 	and.w	r2, r3, #12
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d1eb      	bne.n	80095b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095d8:	4b25      	ldr	r3, [pc, #148]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 030f 	and.w	r3, r3, #15
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d20c      	bcs.n	8009600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095e6:	4b22      	ldr	r3, [pc, #136]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	b2d2      	uxtb	r2, r2
 80095ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095ee:	4b20      	ldr	r3, [pc, #128]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 030f 	and.w	r3, r3, #15
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d001      	beq.n	8009600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e032      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d008      	beq.n	800961e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800960c:	4b19      	ldr	r3, [pc, #100]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	4916      	ldr	r1, [pc, #88]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800961a:	4313      	orrs	r3, r2
 800961c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 0308 	and.w	r3, r3, #8
 8009626:	2b00      	cmp	r3, #0
 8009628:	d009      	beq.n	800963e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800962a:	4b12      	ldr	r3, [pc, #72]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	490e      	ldr	r1, [pc, #56]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800963a:	4313      	orrs	r3, r2
 800963c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800963e:	f000 f821 	bl	8009684 <HAL_RCC_GetSysClockFreq>
 8009642:	4602      	mov	r2, r0
 8009644:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	091b      	lsrs	r3, r3, #4
 800964a:	f003 030f 	and.w	r3, r3, #15
 800964e:	490a      	ldr	r1, [pc, #40]	; (8009678 <HAL_RCC_ClockConfig+0x1c0>)
 8009650:	5ccb      	ldrb	r3, [r1, r3]
 8009652:	fa22 f303 	lsr.w	r3, r2, r3
 8009656:	4a09      	ldr	r2, [pc, #36]	; (800967c <HAL_RCC_ClockConfig+0x1c4>)
 8009658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800965a:	4b09      	ldr	r3, [pc, #36]	; (8009680 <HAL_RCC_ClockConfig+0x1c8>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4618      	mov	r0, r3
 8009660:	f7fa ff5c 	bl	800451c <HAL_InitTick>

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	40023c00 	.word	0x40023c00
 8009674:	40023800 	.word	0x40023800
 8009678:	08014ec8 	.word	0x08014ec8
 800967c:	20000014 	.word	0x20000014
 8009680:	20000018 	.word	0x20000018

08009684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009688:	b094      	sub	sp, #80	; 0x50
 800968a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	647b      	str	r3, [r7, #68]	; 0x44
 8009690:	2300      	movs	r3, #0
 8009692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009694:	2300      	movs	r3, #0
 8009696:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009698:	2300      	movs	r3, #0
 800969a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800969c:	4b79      	ldr	r3, [pc, #484]	; (8009884 <HAL_RCC_GetSysClockFreq+0x200>)
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f003 030c 	and.w	r3, r3, #12
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	d00d      	beq.n	80096c4 <HAL_RCC_GetSysClockFreq+0x40>
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	f200 80e1 	bhi.w	8009870 <HAL_RCC_GetSysClockFreq+0x1ec>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <HAL_RCC_GetSysClockFreq+0x34>
 80096b2:	2b04      	cmp	r3, #4
 80096b4:	d003      	beq.n	80096be <HAL_RCC_GetSysClockFreq+0x3a>
 80096b6:	e0db      	b.n	8009870 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80096b8:	4b73      	ldr	r3, [pc, #460]	; (8009888 <HAL_RCC_GetSysClockFreq+0x204>)
 80096ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80096bc:	e0db      	b.n	8009876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80096be:	4b73      	ldr	r3, [pc, #460]	; (800988c <HAL_RCC_GetSysClockFreq+0x208>)
 80096c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80096c2:	e0d8      	b.n	8009876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80096c4:	4b6f      	ldr	r3, [pc, #444]	; (8009884 <HAL_RCC_GetSysClockFreq+0x200>)
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80096ce:	4b6d      	ldr	r3, [pc, #436]	; (8009884 <HAL_RCC_GetSysClockFreq+0x200>)
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d063      	beq.n	80097a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096da:	4b6a      	ldr	r3, [pc, #424]	; (8009884 <HAL_RCC_GetSysClockFreq+0x200>)
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	099b      	lsrs	r3, r3, #6
 80096e0:	2200      	movs	r2, #0
 80096e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80096e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ec:	633b      	str	r3, [r7, #48]	; 0x30
 80096ee:	2300      	movs	r3, #0
 80096f0:	637b      	str	r3, [r7, #52]	; 0x34
 80096f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80096f6:	4622      	mov	r2, r4
 80096f8:	462b      	mov	r3, r5
 80096fa:	f04f 0000 	mov.w	r0, #0
 80096fe:	f04f 0100 	mov.w	r1, #0
 8009702:	0159      	lsls	r1, r3, #5
 8009704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009708:	0150      	lsls	r0, r2, #5
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4621      	mov	r1, r4
 8009710:	1a51      	subs	r1, r2, r1
 8009712:	6139      	str	r1, [r7, #16]
 8009714:	4629      	mov	r1, r5
 8009716:	eb63 0301 	sbc.w	r3, r3, r1
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	f04f 0200 	mov.w	r2, #0
 8009720:	f04f 0300 	mov.w	r3, #0
 8009724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009728:	4659      	mov	r1, fp
 800972a:	018b      	lsls	r3, r1, #6
 800972c:	4651      	mov	r1, sl
 800972e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009732:	4651      	mov	r1, sl
 8009734:	018a      	lsls	r2, r1, #6
 8009736:	4651      	mov	r1, sl
 8009738:	ebb2 0801 	subs.w	r8, r2, r1
 800973c:	4659      	mov	r1, fp
 800973e:	eb63 0901 	sbc.w	r9, r3, r1
 8009742:	f04f 0200 	mov.w	r2, #0
 8009746:	f04f 0300 	mov.w	r3, #0
 800974a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800974e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009756:	4690      	mov	r8, r2
 8009758:	4699      	mov	r9, r3
 800975a:	4623      	mov	r3, r4
 800975c:	eb18 0303 	adds.w	r3, r8, r3
 8009760:	60bb      	str	r3, [r7, #8]
 8009762:	462b      	mov	r3, r5
 8009764:	eb49 0303 	adc.w	r3, r9, r3
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	f04f 0200 	mov.w	r2, #0
 800976e:	f04f 0300 	mov.w	r3, #0
 8009772:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009776:	4629      	mov	r1, r5
 8009778:	024b      	lsls	r3, r1, #9
 800977a:	4621      	mov	r1, r4
 800977c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009780:	4621      	mov	r1, r4
 8009782:	024a      	lsls	r2, r1, #9
 8009784:	4610      	mov	r0, r2
 8009786:	4619      	mov	r1, r3
 8009788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800978a:	2200      	movs	r2, #0
 800978c:	62bb      	str	r3, [r7, #40]	; 0x28
 800978e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009794:	f7f7 fa98 	bl	8000cc8 <__aeabi_uldivmod>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4613      	mov	r3, r2
 800979e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097a0:	e058      	b.n	8009854 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097a2:	4b38      	ldr	r3, [pc, #224]	; (8009884 <HAL_RCC_GetSysClockFreq+0x200>)
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	099b      	lsrs	r3, r3, #6
 80097a8:	2200      	movs	r2, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	4611      	mov	r1, r2
 80097ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80097b2:	623b      	str	r3, [r7, #32]
 80097b4:	2300      	movs	r3, #0
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
 80097b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80097bc:	4642      	mov	r2, r8
 80097be:	464b      	mov	r3, r9
 80097c0:	f04f 0000 	mov.w	r0, #0
 80097c4:	f04f 0100 	mov.w	r1, #0
 80097c8:	0159      	lsls	r1, r3, #5
 80097ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80097ce:	0150      	lsls	r0, r2, #5
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	4641      	mov	r1, r8
 80097d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80097da:	4649      	mov	r1, r9
 80097dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80097e0:	f04f 0200 	mov.w	r2, #0
 80097e4:	f04f 0300 	mov.w	r3, #0
 80097e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80097ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80097f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80097f4:	ebb2 040a 	subs.w	r4, r2, sl
 80097f8:	eb63 050b 	sbc.w	r5, r3, fp
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	f04f 0300 	mov.w	r3, #0
 8009804:	00eb      	lsls	r3, r5, #3
 8009806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800980a:	00e2      	lsls	r2, r4, #3
 800980c:	4614      	mov	r4, r2
 800980e:	461d      	mov	r5, r3
 8009810:	4643      	mov	r3, r8
 8009812:	18e3      	adds	r3, r4, r3
 8009814:	603b      	str	r3, [r7, #0]
 8009816:	464b      	mov	r3, r9
 8009818:	eb45 0303 	adc.w	r3, r5, r3
 800981c:	607b      	str	r3, [r7, #4]
 800981e:	f04f 0200 	mov.w	r2, #0
 8009822:	f04f 0300 	mov.w	r3, #0
 8009826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800982a:	4629      	mov	r1, r5
 800982c:	028b      	lsls	r3, r1, #10
 800982e:	4621      	mov	r1, r4
 8009830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009834:	4621      	mov	r1, r4
 8009836:	028a      	lsls	r2, r1, #10
 8009838:	4610      	mov	r0, r2
 800983a:	4619      	mov	r1, r3
 800983c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800983e:	2200      	movs	r2, #0
 8009840:	61bb      	str	r3, [r7, #24]
 8009842:	61fa      	str	r2, [r7, #28]
 8009844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009848:	f7f7 fa3e 	bl	8000cc8 <__aeabi_uldivmod>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4613      	mov	r3, r2
 8009852:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009854:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <HAL_RCC_GetSysClockFreq+0x200>)
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	0c1b      	lsrs	r3, r3, #16
 800985a:	f003 0303 	and.w	r3, r3, #3
 800985e:	3301      	adds	r3, #1
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009868:	fbb2 f3f3 	udiv	r3, r2, r3
 800986c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800986e:	e002      	b.n	8009876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009870:	4b05      	ldr	r3, [pc, #20]	; (8009888 <HAL_RCC_GetSysClockFreq+0x204>)
 8009872:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009878:	4618      	mov	r0, r3
 800987a:	3750      	adds	r7, #80	; 0x50
 800987c:	46bd      	mov	sp, r7
 800987e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009882:	bf00      	nop
 8009884:	40023800 	.word	0x40023800
 8009888:	00f42400 	.word	0x00f42400
 800988c:	007a1200 	.word	0x007a1200

08009890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009890:	b480      	push	{r7}
 8009892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009894:	4b03      	ldr	r3, [pc, #12]	; (80098a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009896:	681b      	ldr	r3, [r3, #0]
}
 8009898:	4618      	mov	r0, r3
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000014 	.word	0x20000014

080098a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80098ac:	f7ff fff0 	bl	8009890 <HAL_RCC_GetHCLKFreq>
 80098b0:	4602      	mov	r2, r0
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	0a9b      	lsrs	r3, r3, #10
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	4903      	ldr	r1, [pc, #12]	; (80098cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80098be:	5ccb      	ldrb	r3, [r1, r3]
 80098c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	40023800 	.word	0x40023800
 80098cc:	08014ed8 	.word	0x08014ed8

080098d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e07b      	b.n	80099da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d108      	bne.n	80098fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098f2:	d009      	beq.n	8009908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	61da      	str	r2, [r3, #28]
 80098fa:	e005      	b.n	8009908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d106      	bne.n	8009928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7fa fa6c 	bl	8003e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800993e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009950:	431a      	orrs	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800995a:	431a      	orrs	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	f003 0302 	and.w	r3, r3, #2
 8009964:	431a      	orrs	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	431a      	orrs	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009978:	431a      	orrs	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009982:	431a      	orrs	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a1b      	ldr	r3, [r3, #32]
 8009988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800998c:	ea42 0103 	orr.w	r1, r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009994:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	0c1b      	lsrs	r3, r3, #16
 80099a6:	f003 0104 	and.w	r1, r3, #4
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ae:	f003 0210 	and.w	r2, r3, #16
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	69da      	ldr	r2, [r3, #28]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b088      	sub	sp, #32
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	60f8      	str	r0, [r7, #12]
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	603b      	str	r3, [r7, #0]
 80099ee:	4613      	mov	r3, r2
 80099f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d101      	bne.n	8009a04 <HAL_SPI_Transmit+0x22>
 8009a00:	2302      	movs	r3, #2
 8009a02:	e126      	b.n	8009c52 <HAL_SPI_Transmit+0x270>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a0c:	f7fa fdca 	bl	80045a4 <HAL_GetTick>
 8009a10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009a12:	88fb      	ldrh	r3, [r7, #6]
 8009a14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d002      	beq.n	8009a28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009a22:	2302      	movs	r3, #2
 8009a24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a26:	e10b      	b.n	8009c40 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <HAL_SPI_Transmit+0x52>
 8009a2e:	88fb      	ldrh	r3, [r7, #6]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d102      	bne.n	8009a3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a38:	e102      	b.n	8009c40 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2203      	movs	r2, #3
 8009a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	88fa      	ldrh	r2, [r7, #6]
 8009a52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	88fa      	ldrh	r2, [r7, #6]
 8009a58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a80:	d10f      	bne.n	8009aa2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009aa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aac:	2b40      	cmp	r3, #64	; 0x40
 8009aae:	d007      	beq.n	8009ac0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009abe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ac8:	d14b      	bne.n	8009b62 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d002      	beq.n	8009ad8 <HAL_SPI_Transmit+0xf6>
 8009ad2:	8afb      	ldrh	r3, [r7, #22]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d13e      	bne.n	8009b56 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009adc:	881a      	ldrh	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae8:	1c9a      	adds	r2, r3, #2
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	3b01      	subs	r3, #1
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009afc:	e02b      	b.n	8009b56 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f003 0302 	and.w	r3, r3, #2
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d112      	bne.n	8009b32 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b10:	881a      	ldrh	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1c:	1c9a      	adds	r2, r3, #2
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009b30:	e011      	b.n	8009b56 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b32:	f7fa fd37 	bl	80045a4 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d803      	bhi.n	8009b4a <HAL_SPI_Transmit+0x168>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b48:	d102      	bne.n	8009b50 <HAL_SPI_Transmit+0x16e>
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d102      	bne.n	8009b56 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009b54:	e074      	b.n	8009c40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1ce      	bne.n	8009afe <HAL_SPI_Transmit+0x11c>
 8009b60:	e04c      	b.n	8009bfc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d002      	beq.n	8009b70 <HAL_SPI_Transmit+0x18e>
 8009b6a:	8afb      	ldrh	r3, [r7, #22]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d140      	bne.n	8009bf2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	330c      	adds	r3, #12
 8009b7a:	7812      	ldrb	r2, [r2, #0]
 8009b7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009b96:	e02c      	b.n	8009bf2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d113      	bne.n	8009bce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	330c      	adds	r3, #12
 8009bb0:	7812      	ldrb	r2, [r2, #0]
 8009bb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	86da      	strh	r2, [r3, #54]	; 0x36
 8009bcc:	e011      	b.n	8009bf2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bce:	f7fa fce9 	bl	80045a4 <HAL_GetTick>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d803      	bhi.n	8009be6 <HAL_SPI_Transmit+0x204>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be4:	d102      	bne.n	8009bec <HAL_SPI_Transmit+0x20a>
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d102      	bne.n	8009bf2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009bec:	2303      	movs	r3, #3
 8009bee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009bf0:	e026      	b.n	8009c40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1cd      	bne.n	8009b98 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bfc:	69ba      	ldr	r2, [r7, #24]
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 fb73 	bl	800a2ec <SPI_EndRxTxTransaction>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2220      	movs	r2, #32
 8009c10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10a      	bne.n	8009c30 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	613b      	str	r3, [r7, #16]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	613b      	str	r3, [r7, #16]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	613b      	str	r3, [r7, #16]
 8009c2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	77fb      	strb	r3, [r7, #31]
 8009c3c:	e000      	b.n	8009c40 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009c3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c50:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3720      	adds	r7, #32
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b08c      	sub	sp, #48	; 0x30
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
 8009c66:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d101      	bne.n	8009c80 <HAL_SPI_TransmitReceive+0x26>
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	e18a      	b.n	8009f96 <HAL_SPI_TransmitReceive+0x33c>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c88:	f7fa fc8c 	bl	80045a4 <HAL_GetTick>
 8009c8c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009c9e:	887b      	ldrh	r3, [r7, #2]
 8009ca0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d00f      	beq.n	8009cca <HAL_SPI_TransmitReceive+0x70>
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cb0:	d107      	bne.n	8009cc2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d103      	bne.n	8009cc2 <HAL_SPI_TransmitReceive+0x68>
 8009cba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cbe:	2b04      	cmp	r3, #4
 8009cc0:	d003      	beq.n	8009cca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009cc2:	2302      	movs	r3, #2
 8009cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009cc8:	e15b      	b.n	8009f82 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d005      	beq.n	8009cdc <HAL_SPI_TransmitReceive+0x82>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <HAL_SPI_TransmitReceive+0x82>
 8009cd6:	887b      	ldrh	r3, [r7, #2]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d103      	bne.n	8009ce4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009ce2:	e14e      	b.n	8009f82 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	d003      	beq.n	8009cf8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2205      	movs	r2, #5
 8009cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	887a      	ldrh	r2, [r7, #2]
 8009d08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	887a      	ldrh	r2, [r7, #2]
 8009d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	887a      	ldrh	r2, [r7, #2]
 8009d1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	887a      	ldrh	r2, [r7, #2]
 8009d20:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d38:	2b40      	cmp	r3, #64	; 0x40
 8009d3a:	d007      	beq.n	8009d4c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d54:	d178      	bne.n	8009e48 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <HAL_SPI_TransmitReceive+0x10a>
 8009d5e:	8b7b      	ldrh	r3, [r7, #26]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d166      	bne.n	8009e32 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d68:	881a      	ldrh	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d74:	1c9a      	adds	r2, r3, #2
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	3b01      	subs	r3, #1
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d88:	e053      	b.n	8009e32 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f003 0302 	and.w	r3, r3, #2
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d11b      	bne.n	8009dd0 <HAL_SPI_TransmitReceive+0x176>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d016      	beq.n	8009dd0 <HAL_SPI_TransmitReceive+0x176>
 8009da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d113      	bne.n	8009dd0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dac:	881a      	ldrh	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db8:	1c9a      	adds	r2, r3, #2
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d119      	bne.n	8009e12 <HAL_SPI_TransmitReceive+0x1b8>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d014      	beq.n	8009e12 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68da      	ldr	r2, [r3, #12]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df2:	b292      	uxth	r2, r2
 8009df4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfa:	1c9a      	adds	r2, r3, #2
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	3b01      	subs	r3, #1
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e12:	f7fa fbc7 	bl	80045a4 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d807      	bhi.n	8009e32 <HAL_SPI_TransmitReceive+0x1d8>
 8009e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e28:	d003      	beq.n	8009e32 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009e30:	e0a7      	b.n	8009f82 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1a6      	bne.n	8009d8a <HAL_SPI_TransmitReceive+0x130>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1a1      	bne.n	8009d8a <HAL_SPI_TransmitReceive+0x130>
 8009e46:	e07c      	b.n	8009f42 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <HAL_SPI_TransmitReceive+0x1fc>
 8009e50:	8b7b      	ldrh	r3, [r7, #26]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d16b      	bne.n	8009f2e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	330c      	adds	r3, #12
 8009e60:	7812      	ldrb	r2, [r2, #0]
 8009e62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e68:	1c5a      	adds	r2, r3, #1
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	3b01      	subs	r3, #1
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e7c:	e057      	b.n	8009f2e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	f003 0302 	and.w	r3, r3, #2
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d11c      	bne.n	8009ec6 <HAL_SPI_TransmitReceive+0x26c>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d017      	beq.n	8009ec6 <HAL_SPI_TransmitReceive+0x26c>
 8009e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d114      	bne.n	8009ec6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	330c      	adds	r3, #12
 8009ea6:	7812      	ldrb	r2, [r2, #0]
 8009ea8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d119      	bne.n	8009f08 <HAL_SPI_TransmitReceive+0x2ae>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d014      	beq.n	8009f08 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68da      	ldr	r2, [r3, #12]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee8:	b2d2      	uxtb	r2, r2
 8009eea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	3b01      	subs	r3, #1
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f04:	2301      	movs	r3, #1
 8009f06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f08:	f7fa fb4c 	bl	80045a4 <HAL_GetTick>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d803      	bhi.n	8009f20 <HAL_SPI_TransmitReceive+0x2c6>
 8009f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1e:	d102      	bne.n	8009f26 <HAL_SPI_TransmitReceive+0x2cc>
 8009f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d103      	bne.n	8009f2e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009f2c:	e029      	b.n	8009f82 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1a2      	bne.n	8009e7e <HAL_SPI_TransmitReceive+0x224>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d19d      	bne.n	8009e7e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f000 f9d0 	bl	800a2ec <SPI_EndRxTxTransaction>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d006      	beq.n	8009f60 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009f5e:	e010      	b.n	8009f82 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10b      	bne.n	8009f80 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f68:	2300      	movs	r3, #0
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	617b      	str	r3, [r7, #20]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	617b      	str	r3, [r7, #20]
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	e000      	b.n	8009f82 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009f80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3730      	adds	r7, #48	; 0x30
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
	...

08009fa0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b088      	sub	sp, #32
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	099b      	lsrs	r3, r3, #6
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10f      	bne.n	8009fe4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00a      	beq.n	8009fe4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	099b      	lsrs	r3, r3, #6
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d004      	beq.n	8009fe4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	4798      	blx	r3
    return;
 8009fe2:	e0d7      	b.n	800a194 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	085b      	lsrs	r3, r3, #1
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00a      	beq.n	800a006 <HAL_SPI_IRQHandler+0x66>
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	09db      	lsrs	r3, r3, #7
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
    return;
 800a004:	e0c6      	b.n	800a194 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	095b      	lsrs	r3, r3, #5
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10c      	bne.n	800a02c <HAL_SPI_IRQHandler+0x8c>
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	099b      	lsrs	r3, r3, #6
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d106      	bne.n	800a02c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	0a1b      	lsrs	r3, r3, #8
 800a022:	f003 0301 	and.w	r3, r3, #1
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 80b4 	beq.w	800a194 <HAL_SPI_IRQHandler+0x1f4>
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	095b      	lsrs	r3, r3, #5
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 80ad 	beq.w	800a194 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	099b      	lsrs	r3, r3, #6
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	2b00      	cmp	r3, #0
 800a044:	d023      	beq.n	800a08e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	2b03      	cmp	r3, #3
 800a050:	d011      	beq.n	800a076 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a056:	f043 0204 	orr.w	r2, r3, #4
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a05e:	2300      	movs	r3, #0
 800a060:	617b      	str	r3, [r7, #20]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	617b      	str	r3, [r7, #20]
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	e00b      	b.n	800a08e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a076:	2300      	movs	r3, #0
 800a078:	613b      	str	r3, [r7, #16]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	613b      	str	r3, [r7, #16]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	613b      	str	r3, [r7, #16]
 800a08a:	693b      	ldr	r3, [r7, #16]
        return;
 800a08c:	e082      	b.n	800a194 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	095b      	lsrs	r3, r3, #5
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b00      	cmp	r3, #0
 800a098:	d014      	beq.n	800a0c4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a09e:	f043 0201 	orr.w	r2, r3, #1
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	60fb      	str	r3, [r7, #12]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0c0:	601a      	str	r2, [r3, #0]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	0a1b      	lsrs	r3, r3, #8
 800a0c8:	f003 0301 	and.w	r3, r3, #1
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00c      	beq.n	800a0ea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0d4:	f043 0208 	orr.w	r2, r3, #8
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a0dc:	2300      	movs	r3, #0
 800a0de:	60bb      	str	r3, [r7, #8]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	60bb      	str	r3, [r7, #8]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d04f      	beq.n	800a192 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a100:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	f003 0302 	and.w	r3, r3, #2
 800a110:	2b00      	cmp	r3, #0
 800a112:	d104      	bne.n	800a11e <HAL_SPI_IRQHandler+0x17e>
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	f003 0301 	and.w	r3, r3, #1
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d034      	beq.n	800a188 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f022 0203 	bic.w	r2, r2, #3
 800a12c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a132:	2b00      	cmp	r3, #0
 800a134:	d011      	beq.n	800a15a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a13a:	4a18      	ldr	r2, [pc, #96]	; (800a19c <HAL_SPI_IRQHandler+0x1fc>)
 800a13c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a142:	4618      	mov	r0, r3
 800a144:	f7fa fde1 	bl	8004d0a <HAL_DMA_Abort_IT>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d005      	beq.n	800a15a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a152:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d016      	beq.n	800a190 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a166:	4a0d      	ldr	r2, [pc, #52]	; (800a19c <HAL_SPI_IRQHandler+0x1fc>)
 800a168:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fa fdcb 	bl	8004d0a <HAL_DMA_Abort_IT>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a17e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a186:	e003      	b.n	800a190 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f809 	bl	800a1a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a18e:	e000      	b.n	800a192 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a190:	bf00      	nop
    return;
 800a192:	bf00      	nop
  }
}
 800a194:	3720      	adds	r7, #32
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	0800a1b5 	.word	0x0800a1b5

0800a1a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff ffe6 	bl	800a1a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a1d4:	bf00      	nop
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b088      	sub	sp, #32
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	603b      	str	r3, [r7, #0]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a1ec:	f7fa f9da 	bl	80045a4 <HAL_GetTick>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f4:	1a9b      	subs	r3, r3, r2
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a1fc:	f7fa f9d2 	bl	80045a4 <HAL_GetTick>
 800a200:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a202:	4b39      	ldr	r3, [pc, #228]	; (800a2e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	015b      	lsls	r3, r3, #5
 800a208:	0d1b      	lsrs	r3, r3, #20
 800a20a:	69fa      	ldr	r2, [r7, #28]
 800a20c:	fb02 f303 	mul.w	r3, r2, r3
 800a210:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a212:	e054      	b.n	800a2be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21a:	d050      	beq.n	800a2be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a21c:	f7fa f9c2 	bl	80045a4 <HAL_GetTick>
 800a220:	4602      	mov	r2, r0
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	69fa      	ldr	r2, [r7, #28]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d902      	bls.n	800a232 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d13d      	bne.n	800a2ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a240:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a24a:	d111      	bne.n	800a270 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a254:	d004      	beq.n	800a260 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a25e:	d107      	bne.n	800a270 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a26e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a278:	d10f      	bne.n	800a29a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a298:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e017      	b.n	800a2de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	689a      	ldr	r2, [r3, #8]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	bf0c      	ite	eq
 800a2ce:	2301      	moveq	r3, #1
 800a2d0:	2300      	movne	r3, #0
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	79fb      	ldrb	r3, [r7, #7]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d19b      	bne.n	800a214 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3720      	adds	r7, #32
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000014 	.word	0x20000014

0800a2ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b088      	sub	sp, #32
 800a2f0:	af02      	add	r7, sp, #8
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a2f8:	4b1b      	ldr	r3, [pc, #108]	; (800a368 <SPI_EndRxTxTransaction+0x7c>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a1b      	ldr	r2, [pc, #108]	; (800a36c <SPI_EndRxTxTransaction+0x80>)
 800a2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a302:	0d5b      	lsrs	r3, r3, #21
 800a304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a308:	fb02 f303 	mul.w	r3, r2, r3
 800a30c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a316:	d112      	bne.n	800a33e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	2200      	movs	r2, #0
 800a320:	2180      	movs	r1, #128	; 0x80
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f7ff ff5a 	bl	800a1dc <SPI_WaitFlagStateUntilTimeout>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d016      	beq.n	800a35c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a332:	f043 0220 	orr.w	r2, r3, #32
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e00f      	b.n	800a35e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00a      	beq.n	800a35a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	3b01      	subs	r3, #1
 800a348:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a354:	2b80      	cmp	r3, #128	; 0x80
 800a356:	d0f2      	beq.n	800a33e <SPI_EndRxTxTransaction+0x52>
 800a358:	e000      	b.n	800a35c <SPI_EndRxTxTransaction+0x70>
        break;
 800a35a:	bf00      	nop
  }

  return HAL_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20000014 	.word	0x20000014
 800a36c:	165e9f81 	.word	0x165e9f81

0800a370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d101      	bne.n	800a382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e041      	b.n	800a406 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d106      	bne.n	800a39c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7f9 fd82 	bl	8003ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	f000 fa96 	bl	800a8e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b01      	cmp	r3, #1
 800a422:	d001      	beq.n	800a428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e04e      	b.n	800a4c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2202      	movs	r2, #2
 800a42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f042 0201 	orr.w	r2, r2, #1
 800a43e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a23      	ldr	r2, [pc, #140]	; (800a4d4 <HAL_TIM_Base_Start_IT+0xc4>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d022      	beq.n	800a490 <HAL_TIM_Base_Start_IT+0x80>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a452:	d01d      	beq.n	800a490 <HAL_TIM_Base_Start_IT+0x80>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a1f      	ldr	r2, [pc, #124]	; (800a4d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d018      	beq.n	800a490 <HAL_TIM_Base_Start_IT+0x80>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a1e      	ldr	r2, [pc, #120]	; (800a4dc <HAL_TIM_Base_Start_IT+0xcc>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d013      	beq.n	800a490 <HAL_TIM_Base_Start_IT+0x80>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a1c      	ldr	r2, [pc, #112]	; (800a4e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d00e      	beq.n	800a490 <HAL_TIM_Base_Start_IT+0x80>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a1b      	ldr	r2, [pc, #108]	; (800a4e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d009      	beq.n	800a490 <HAL_TIM_Base_Start_IT+0x80>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a19      	ldr	r2, [pc, #100]	; (800a4e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d004      	beq.n	800a490 <HAL_TIM_Base_Start_IT+0x80>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a18      	ldr	r2, [pc, #96]	; (800a4ec <HAL_TIM_Base_Start_IT+0xdc>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d111      	bne.n	800a4b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f003 0307 	and.w	r3, r3, #7
 800a49a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b06      	cmp	r3, #6
 800a4a0:	d010      	beq.n	800a4c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f042 0201 	orr.w	r2, r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b2:	e007      	b.n	800a4c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f042 0201 	orr.w	r2, r2, #1
 800a4c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	40010000 	.word	0x40010000
 800a4d8:	40000400 	.word	0x40000400
 800a4dc:	40000800 	.word	0x40000800
 800a4e0:	40000c00 	.word	0x40000c00
 800a4e4:	40010400 	.word	0x40010400
 800a4e8:	40014000 	.word	0x40014000
 800a4ec:	40001800 	.word	0x40001800

0800a4f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	f003 0302 	and.w	r3, r3, #2
 800a502:	2b02      	cmp	r3, #2
 800a504:	d122      	bne.n	800a54c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f003 0302 	and.w	r3, r3, #2
 800a510:	2b02      	cmp	r3, #2
 800a512:	d11b      	bne.n	800a54c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f06f 0202 	mvn.w	r2, #2
 800a51c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	f003 0303 	and.w	r3, r3, #3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d003      	beq.n	800a53a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f9b5 	bl	800a8a2 <HAL_TIM_IC_CaptureCallback>
 800a538:	e005      	b.n	800a546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f9a7 	bl	800a88e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f9b8 	bl	800a8b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	f003 0304 	and.w	r3, r3, #4
 800a556:	2b04      	cmp	r3, #4
 800a558:	d122      	bne.n	800a5a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f003 0304 	and.w	r3, r3, #4
 800a564:	2b04      	cmp	r3, #4
 800a566:	d11b      	bne.n	800a5a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f06f 0204 	mvn.w	r2, #4
 800a570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2202      	movs	r2, #2
 800a576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a582:	2b00      	cmp	r3, #0
 800a584:	d003      	beq.n	800a58e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f98b 	bl	800a8a2 <HAL_TIM_IC_CaptureCallback>
 800a58c:	e005      	b.n	800a59a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f97d 	bl	800a88e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f98e 	bl	800a8b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	f003 0308 	and.w	r3, r3, #8
 800a5aa:	2b08      	cmp	r3, #8
 800a5ac:	d122      	bne.n	800a5f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	f003 0308 	and.w	r3, r3, #8
 800a5b8:	2b08      	cmp	r3, #8
 800a5ba:	d11b      	bne.n	800a5f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f06f 0208 	mvn.w	r2, #8
 800a5c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2204      	movs	r2, #4
 800a5ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	69db      	ldr	r3, [r3, #28]
 800a5d2:	f003 0303 	and.w	r3, r3, #3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d003      	beq.n	800a5e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 f961 	bl	800a8a2 <HAL_TIM_IC_CaptureCallback>
 800a5e0:	e005      	b.n	800a5ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f953 	bl	800a88e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f964 	bl	800a8b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	f003 0310 	and.w	r3, r3, #16
 800a5fe:	2b10      	cmp	r3, #16
 800a600:	d122      	bne.n	800a648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	f003 0310 	and.w	r3, r3, #16
 800a60c:	2b10      	cmp	r3, #16
 800a60e:	d11b      	bne.n	800a648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f06f 0210 	mvn.w	r2, #16
 800a618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2208      	movs	r2, #8
 800a61e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d003      	beq.n	800a636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f937 	bl	800a8a2 <HAL_TIM_IC_CaptureCallback>
 800a634:	e005      	b.n	800a642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f929 	bl	800a88e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f93a 	bl	800a8b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	2b01      	cmp	r3, #1
 800a654:	d10e      	bne.n	800a674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b01      	cmp	r3, #1
 800a662:	d107      	bne.n	800a674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f06f 0201 	mvn.w	r2, #1
 800a66c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7f8 fd6a 	bl	8003148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a67e:	2b80      	cmp	r3, #128	; 0x80
 800a680:	d10e      	bne.n	800a6a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a68c:	2b80      	cmp	r3, #128	; 0x80
 800a68e:	d107      	bne.n	800a6a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fae0 	bl	800ac60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6aa:	2b40      	cmp	r3, #64	; 0x40
 800a6ac:	d10e      	bne.n	800a6cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b8:	2b40      	cmp	r3, #64	; 0x40
 800a6ba:	d107      	bne.n	800a6cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f8ff 	bl	800a8ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	f003 0320 	and.w	r3, r3, #32
 800a6d6:	2b20      	cmp	r3, #32
 800a6d8:	d10e      	bne.n	800a6f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b20      	cmp	r3, #32
 800a6e6:	d107      	bne.n	800a6f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f06f 0220 	mvn.w	r2, #32
 800a6f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 faaa 	bl	800ac4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a714:	2b01      	cmp	r3, #1
 800a716:	d101      	bne.n	800a71c <HAL_TIM_ConfigClockSource+0x1c>
 800a718:	2302      	movs	r3, #2
 800a71a:	e0b4      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x186>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2202      	movs	r2, #2
 800a728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a73a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a754:	d03e      	beq.n	800a7d4 <HAL_TIM_ConfigClockSource+0xd4>
 800a756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a75a:	f200 8087 	bhi.w	800a86c <HAL_TIM_ConfigClockSource+0x16c>
 800a75e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a762:	f000 8086 	beq.w	800a872 <HAL_TIM_ConfigClockSource+0x172>
 800a766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a76a:	d87f      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x16c>
 800a76c:	2b70      	cmp	r3, #112	; 0x70
 800a76e:	d01a      	beq.n	800a7a6 <HAL_TIM_ConfigClockSource+0xa6>
 800a770:	2b70      	cmp	r3, #112	; 0x70
 800a772:	d87b      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x16c>
 800a774:	2b60      	cmp	r3, #96	; 0x60
 800a776:	d050      	beq.n	800a81a <HAL_TIM_ConfigClockSource+0x11a>
 800a778:	2b60      	cmp	r3, #96	; 0x60
 800a77a:	d877      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x16c>
 800a77c:	2b50      	cmp	r3, #80	; 0x50
 800a77e:	d03c      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0xfa>
 800a780:	2b50      	cmp	r3, #80	; 0x50
 800a782:	d873      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x16c>
 800a784:	2b40      	cmp	r3, #64	; 0x40
 800a786:	d058      	beq.n	800a83a <HAL_TIM_ConfigClockSource+0x13a>
 800a788:	2b40      	cmp	r3, #64	; 0x40
 800a78a:	d86f      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x16c>
 800a78c:	2b30      	cmp	r3, #48	; 0x30
 800a78e:	d064      	beq.n	800a85a <HAL_TIM_ConfigClockSource+0x15a>
 800a790:	2b30      	cmp	r3, #48	; 0x30
 800a792:	d86b      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x16c>
 800a794:	2b20      	cmp	r3, #32
 800a796:	d060      	beq.n	800a85a <HAL_TIM_ConfigClockSource+0x15a>
 800a798:	2b20      	cmp	r3, #32
 800a79a:	d867      	bhi.n	800a86c <HAL_TIM_ConfigClockSource+0x16c>
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d05c      	beq.n	800a85a <HAL_TIM_ConfigClockSource+0x15a>
 800a7a0:	2b10      	cmp	r3, #16
 800a7a2:	d05a      	beq.n	800a85a <HAL_TIM_ConfigClockSource+0x15a>
 800a7a4:	e062      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6818      	ldr	r0, [r3, #0]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	6899      	ldr	r1, [r3, #8]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	f000 f9ad 	bl	800ab14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	609a      	str	r2, [r3, #8]
      break;
 800a7d2:	e04f      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	6899      	ldr	r1, [r3, #8]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f000 f996 	bl	800ab14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	689a      	ldr	r2, [r3, #8]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7f6:	609a      	str	r2, [r3, #8]
      break;
 800a7f8:	e03c      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6818      	ldr	r0, [r3, #0]
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	6859      	ldr	r1, [r3, #4]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	461a      	mov	r2, r3
 800a808:	f000 f90a 	bl	800aa20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2150      	movs	r1, #80	; 0x50
 800a812:	4618      	mov	r0, r3
 800a814:	f000 f963 	bl	800aade <TIM_ITRx_SetConfig>
      break;
 800a818:	e02c      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	6859      	ldr	r1, [r3, #4]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	461a      	mov	r2, r3
 800a828:	f000 f929 	bl	800aa7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2160      	movs	r1, #96	; 0x60
 800a832:	4618      	mov	r0, r3
 800a834:	f000 f953 	bl	800aade <TIM_ITRx_SetConfig>
      break;
 800a838:	e01c      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6818      	ldr	r0, [r3, #0]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	6859      	ldr	r1, [r3, #4]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	461a      	mov	r2, r3
 800a848:	f000 f8ea 	bl	800aa20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2140      	movs	r1, #64	; 0x40
 800a852:	4618      	mov	r0, r3
 800a854:	f000 f943 	bl	800aade <TIM_ITRx_SetConfig>
      break;
 800a858:	e00c      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4619      	mov	r1, r3
 800a864:	4610      	mov	r0, r2
 800a866:	f000 f93a 	bl	800aade <TIM_ITRx_SetConfig>
      break;
 800a86a:	e003      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	73fb      	strb	r3, [r7, #15]
      break;
 800a870:	e000      	b.n	800a874 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a884:	7bfb      	ldrb	r3, [r7, #15]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a88e:	b480      	push	{r7}
 800a890:	b083      	sub	sp, #12
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a896:	bf00      	nop
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b083      	sub	sp, #12
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8aa:	bf00      	nop
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b083      	sub	sp, #12
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8be:	bf00      	nop
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b083      	sub	sp, #12
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8d2:	bf00      	nop
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
	...

0800a8e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a40      	ldr	r2, [pc, #256]	; (800a9f4 <TIM_Base_SetConfig+0x114>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d013      	beq.n	800a920 <TIM_Base_SetConfig+0x40>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8fe:	d00f      	beq.n	800a920 <TIM_Base_SetConfig+0x40>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a3d      	ldr	r2, [pc, #244]	; (800a9f8 <TIM_Base_SetConfig+0x118>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d00b      	beq.n	800a920 <TIM_Base_SetConfig+0x40>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a3c      	ldr	r2, [pc, #240]	; (800a9fc <TIM_Base_SetConfig+0x11c>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d007      	beq.n	800a920 <TIM_Base_SetConfig+0x40>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a3b      	ldr	r2, [pc, #236]	; (800aa00 <TIM_Base_SetConfig+0x120>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d003      	beq.n	800a920 <TIM_Base_SetConfig+0x40>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a3a      	ldr	r2, [pc, #232]	; (800aa04 <TIM_Base_SetConfig+0x124>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d108      	bne.n	800a932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	4313      	orrs	r3, r2
 800a930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a2f      	ldr	r2, [pc, #188]	; (800a9f4 <TIM_Base_SetConfig+0x114>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d02b      	beq.n	800a992 <TIM_Base_SetConfig+0xb2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a940:	d027      	beq.n	800a992 <TIM_Base_SetConfig+0xb2>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a2c      	ldr	r2, [pc, #176]	; (800a9f8 <TIM_Base_SetConfig+0x118>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d023      	beq.n	800a992 <TIM_Base_SetConfig+0xb2>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a2b      	ldr	r2, [pc, #172]	; (800a9fc <TIM_Base_SetConfig+0x11c>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d01f      	beq.n	800a992 <TIM_Base_SetConfig+0xb2>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a2a      	ldr	r2, [pc, #168]	; (800aa00 <TIM_Base_SetConfig+0x120>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d01b      	beq.n	800a992 <TIM_Base_SetConfig+0xb2>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a29      	ldr	r2, [pc, #164]	; (800aa04 <TIM_Base_SetConfig+0x124>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d017      	beq.n	800a992 <TIM_Base_SetConfig+0xb2>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a28      	ldr	r2, [pc, #160]	; (800aa08 <TIM_Base_SetConfig+0x128>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d013      	beq.n	800a992 <TIM_Base_SetConfig+0xb2>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a27      	ldr	r2, [pc, #156]	; (800aa0c <TIM_Base_SetConfig+0x12c>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d00f      	beq.n	800a992 <TIM_Base_SetConfig+0xb2>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a26      	ldr	r2, [pc, #152]	; (800aa10 <TIM_Base_SetConfig+0x130>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00b      	beq.n	800a992 <TIM_Base_SetConfig+0xb2>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a25      	ldr	r2, [pc, #148]	; (800aa14 <TIM_Base_SetConfig+0x134>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d007      	beq.n	800a992 <TIM_Base_SetConfig+0xb2>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a24      	ldr	r2, [pc, #144]	; (800aa18 <TIM_Base_SetConfig+0x138>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d003      	beq.n	800a992 <TIM_Base_SetConfig+0xb2>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a23      	ldr	r2, [pc, #140]	; (800aa1c <TIM_Base_SetConfig+0x13c>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d108      	bne.n	800a9a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	689a      	ldr	r2, [r3, #8]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a0a      	ldr	r2, [pc, #40]	; (800a9f4 <TIM_Base_SetConfig+0x114>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d003      	beq.n	800a9d8 <TIM_Base_SetConfig+0xf8>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a0c      	ldr	r2, [pc, #48]	; (800aa04 <TIM_Base_SetConfig+0x124>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d103      	bne.n	800a9e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	691a      	ldr	r2, [r3, #16]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	615a      	str	r2, [r3, #20]
}
 800a9e6:	bf00      	nop
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	40010000 	.word	0x40010000
 800a9f8:	40000400 	.word	0x40000400
 800a9fc:	40000800 	.word	0x40000800
 800aa00:	40000c00 	.word	0x40000c00
 800aa04:	40010400 	.word	0x40010400
 800aa08:	40014000 	.word	0x40014000
 800aa0c:	40014400 	.word	0x40014400
 800aa10:	40014800 	.word	0x40014800
 800aa14:	40001800 	.word	0x40001800
 800aa18:	40001c00 	.word	0x40001c00
 800aa1c:	40002000 	.word	0x40002000

0800aa20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6a1b      	ldr	r3, [r3, #32]
 800aa30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	f023 0201 	bic.w	r2, r3, #1
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	011b      	lsls	r3, r3, #4
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f023 030a 	bic.w	r3, r3, #10
 800aa5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	621a      	str	r2, [r3, #32]
}
 800aa72:	bf00      	nop
 800aa74:	371c      	adds	r7, #28
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b087      	sub	sp, #28
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	60f8      	str	r0, [r7, #12]
 800aa86:	60b9      	str	r1, [r7, #8]
 800aa88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	f023 0210 	bic.w	r2, r3, #16
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6a1b      	ldr	r3, [r3, #32]
 800aaa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aaa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	031b      	lsls	r3, r3, #12
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aaba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	011b      	lsls	r3, r3, #4
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	621a      	str	r2, [r3, #32]
}
 800aad2:	bf00      	nop
 800aad4:	371c      	adds	r7, #28
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aade:	b480      	push	{r7}
 800aae0:	b085      	sub	sp, #20
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	f043 0307 	orr.w	r3, r3, #7
 800ab00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	609a      	str	r2, [r3, #8]
}
 800ab08:	bf00      	nop
 800ab0a:	3714      	adds	r7, #20
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b087      	sub	sp, #28
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	021a      	lsls	r2, r3, #8
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	431a      	orrs	r2, r3
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	609a      	str	r2, [r3, #8]
}
 800ab48:	bf00      	nop
 800ab4a:	371c      	adds	r7, #28
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d101      	bne.n	800ab6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab68:	2302      	movs	r3, #2
 800ab6a:	e05a      	b.n	800ac22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2202      	movs	r2, #2
 800ab78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a21      	ldr	r2, [pc, #132]	; (800ac30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d022      	beq.n	800abf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abb8:	d01d      	beq.n	800abf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a1d      	ldr	r2, [pc, #116]	; (800ac34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d018      	beq.n	800abf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a1b      	ldr	r2, [pc, #108]	; (800ac38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d013      	beq.n	800abf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a1a      	ldr	r2, [pc, #104]	; (800ac3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d00e      	beq.n	800abf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a18      	ldr	r2, [pc, #96]	; (800ac40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d009      	beq.n	800abf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a17      	ldr	r2, [pc, #92]	; (800ac44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d004      	beq.n	800abf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a15      	ldr	r2, [pc, #84]	; (800ac48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d10c      	bne.n	800ac10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68ba      	ldr	r2, [r7, #8]
 800ac0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	40010000 	.word	0x40010000
 800ac34:	40000400 	.word	0x40000400
 800ac38:	40000800 	.word	0x40000800
 800ac3c:	40000c00 	.word	0x40000c00
 800ac40:	40010400 	.word	0x40010400
 800ac44:	40014000 	.word	0x40014000
 800ac48:	40001800 	.word	0x40001800

0800ac4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac74:	b084      	sub	sp, #16
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b084      	sub	sp, #16
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	f107 001c 	add.w	r0, r7, #28
 800ac82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d122      	bne.n	800acd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800aca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800acb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d105      	bne.n	800acc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f001 fbee 	bl	800c4a8 <USB_CoreReset>
 800accc:	4603      	mov	r3, r0
 800acce:	73fb      	strb	r3, [r7, #15]
 800acd0:	e01a      	b.n	800ad08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f001 fbe2 	bl	800c4a8 <USB_CoreReset>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ace8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acea:	2b00      	cmp	r3, #0
 800acec:	d106      	bne.n	800acfc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	639a      	str	r2, [r3, #56]	; 0x38
 800acfa:	e005      	b.n	800ad08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d10b      	bne.n	800ad26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	f043 0206 	orr.w	r2, r3, #6
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	f043 0220 	orr.w	r2, r3, #32
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad32:	b004      	add	sp, #16
 800ad34:	4770      	bx	lr
	...

0800ad38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	4613      	mov	r3, r2
 800ad44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ad46:	79fb      	ldrb	r3, [r7, #7]
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d165      	bne.n	800ae18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	4a41      	ldr	r2, [pc, #260]	; (800ae54 <USB_SetTurnaroundTime+0x11c>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d906      	bls.n	800ad62 <USB_SetTurnaroundTime+0x2a>
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	4a40      	ldr	r2, [pc, #256]	; (800ae58 <USB_SetTurnaroundTime+0x120>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d202      	bcs.n	800ad62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ad5c:	230f      	movs	r3, #15
 800ad5e:	617b      	str	r3, [r7, #20]
 800ad60:	e062      	b.n	800ae28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	4a3c      	ldr	r2, [pc, #240]	; (800ae58 <USB_SetTurnaroundTime+0x120>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d306      	bcc.n	800ad78 <USB_SetTurnaroundTime+0x40>
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	4a3b      	ldr	r2, [pc, #236]	; (800ae5c <USB_SetTurnaroundTime+0x124>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d202      	bcs.n	800ad78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ad72:	230e      	movs	r3, #14
 800ad74:	617b      	str	r3, [r7, #20]
 800ad76:	e057      	b.n	800ae28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	4a38      	ldr	r2, [pc, #224]	; (800ae5c <USB_SetTurnaroundTime+0x124>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d306      	bcc.n	800ad8e <USB_SetTurnaroundTime+0x56>
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	4a37      	ldr	r2, [pc, #220]	; (800ae60 <USB_SetTurnaroundTime+0x128>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d202      	bcs.n	800ad8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ad88:	230d      	movs	r3, #13
 800ad8a:	617b      	str	r3, [r7, #20]
 800ad8c:	e04c      	b.n	800ae28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	4a33      	ldr	r2, [pc, #204]	; (800ae60 <USB_SetTurnaroundTime+0x128>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d306      	bcc.n	800ada4 <USB_SetTurnaroundTime+0x6c>
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	4a32      	ldr	r2, [pc, #200]	; (800ae64 <USB_SetTurnaroundTime+0x12c>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d802      	bhi.n	800ada4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ad9e:	230c      	movs	r3, #12
 800ada0:	617b      	str	r3, [r7, #20]
 800ada2:	e041      	b.n	800ae28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	4a2f      	ldr	r2, [pc, #188]	; (800ae64 <USB_SetTurnaroundTime+0x12c>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d906      	bls.n	800adba <USB_SetTurnaroundTime+0x82>
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	4a2e      	ldr	r2, [pc, #184]	; (800ae68 <USB_SetTurnaroundTime+0x130>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d802      	bhi.n	800adba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800adb4:	230b      	movs	r3, #11
 800adb6:	617b      	str	r3, [r7, #20]
 800adb8:	e036      	b.n	800ae28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	4a2a      	ldr	r2, [pc, #168]	; (800ae68 <USB_SetTurnaroundTime+0x130>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d906      	bls.n	800add0 <USB_SetTurnaroundTime+0x98>
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	4a29      	ldr	r2, [pc, #164]	; (800ae6c <USB_SetTurnaroundTime+0x134>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d802      	bhi.n	800add0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800adca:	230a      	movs	r3, #10
 800adcc:	617b      	str	r3, [r7, #20]
 800adce:	e02b      	b.n	800ae28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	4a26      	ldr	r2, [pc, #152]	; (800ae6c <USB_SetTurnaroundTime+0x134>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d906      	bls.n	800ade6 <USB_SetTurnaroundTime+0xae>
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	4a25      	ldr	r2, [pc, #148]	; (800ae70 <USB_SetTurnaroundTime+0x138>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d202      	bcs.n	800ade6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ade0:	2309      	movs	r3, #9
 800ade2:	617b      	str	r3, [r7, #20]
 800ade4:	e020      	b.n	800ae28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	4a21      	ldr	r2, [pc, #132]	; (800ae70 <USB_SetTurnaroundTime+0x138>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d306      	bcc.n	800adfc <USB_SetTurnaroundTime+0xc4>
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	4a20      	ldr	r2, [pc, #128]	; (800ae74 <USB_SetTurnaroundTime+0x13c>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d802      	bhi.n	800adfc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800adf6:	2308      	movs	r3, #8
 800adf8:	617b      	str	r3, [r7, #20]
 800adfa:	e015      	b.n	800ae28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	4a1d      	ldr	r2, [pc, #116]	; (800ae74 <USB_SetTurnaroundTime+0x13c>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d906      	bls.n	800ae12 <USB_SetTurnaroundTime+0xda>
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	4a1c      	ldr	r2, [pc, #112]	; (800ae78 <USB_SetTurnaroundTime+0x140>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d202      	bcs.n	800ae12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ae0c:	2307      	movs	r3, #7
 800ae0e:	617b      	str	r3, [r7, #20]
 800ae10:	e00a      	b.n	800ae28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ae12:	2306      	movs	r3, #6
 800ae14:	617b      	str	r3, [r7, #20]
 800ae16:	e007      	b.n	800ae28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ae18:	79fb      	ldrb	r3, [r7, #7]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d102      	bne.n	800ae24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ae1e:	2309      	movs	r3, #9
 800ae20:	617b      	str	r3, [r7, #20]
 800ae22:	e001      	b.n	800ae28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ae24:	2309      	movs	r3, #9
 800ae26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	68da      	ldr	r2, [r3, #12]
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	029b      	lsls	r3, r3, #10
 800ae3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ae40:	431a      	orrs	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	371c      	adds	r7, #28
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	00d8acbf 	.word	0x00d8acbf
 800ae58:	00e4e1c0 	.word	0x00e4e1c0
 800ae5c:	00f42400 	.word	0x00f42400
 800ae60:	01067380 	.word	0x01067380
 800ae64:	011a499f 	.word	0x011a499f
 800ae68:	01312cff 	.word	0x01312cff
 800ae6c:	014ca43f 	.word	0x014ca43f
 800ae70:	016e3600 	.word	0x016e3600
 800ae74:	01a6ab1f 	.word	0x01a6ab1f
 800ae78:	01e84800 	.word	0x01e84800

0800ae7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	f043 0201 	orr.w	r2, r3, #1
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae9e:	b480      	push	{r7}
 800aea0:	b083      	sub	sp, #12
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	f023 0201 	bic.w	r2, r3, #1
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aecc:	2300      	movs	r3, #0
 800aece:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aedc:	78fb      	ldrb	r3, [r7, #3]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d115      	bne.n	800af0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aeee:	2001      	movs	r0, #1
 800aef0:	f7f9 fb64 	bl	80045bc <HAL_Delay>
      ms++;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3301      	adds	r3, #1
 800aef8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f001 fa45 	bl	800c38a <USB_GetMode>
 800af00:	4603      	mov	r3, r0
 800af02:	2b01      	cmp	r3, #1
 800af04:	d01e      	beq.n	800af44 <USB_SetCurrentMode+0x84>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2b31      	cmp	r3, #49	; 0x31
 800af0a:	d9f0      	bls.n	800aeee <USB_SetCurrentMode+0x2e>
 800af0c:	e01a      	b.n	800af44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af0e:	78fb      	ldrb	r3, [r7, #3]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d115      	bne.n	800af40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af20:	2001      	movs	r0, #1
 800af22:	f7f9 fb4b 	bl	80045bc <HAL_Delay>
      ms++;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	3301      	adds	r3, #1
 800af2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f001 fa2c 	bl	800c38a <USB_GetMode>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d005      	beq.n	800af44 <USB_SetCurrentMode+0x84>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2b31      	cmp	r3, #49	; 0x31
 800af3c:	d9f0      	bls.n	800af20 <USB_SetCurrentMode+0x60>
 800af3e:	e001      	b.n	800af44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e005      	b.n	800af50 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b32      	cmp	r3, #50	; 0x32
 800af48:	d101      	bne.n	800af4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	e000      	b.n	800af50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af58:	b084      	sub	sp, #16
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b086      	sub	sp, #24
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800af66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800af72:	2300      	movs	r3, #0
 800af74:	613b      	str	r3, [r7, #16]
 800af76:	e009      	b.n	800af8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	3340      	adds	r3, #64	; 0x40
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4413      	add	r3, r2
 800af82:	2200      	movs	r2, #0
 800af84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	3301      	adds	r3, #1
 800af8a:	613b      	str	r3, [r7, #16]
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	2b0e      	cmp	r3, #14
 800af90:	d9f2      	bls.n	800af78 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800af92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af94:	2b00      	cmp	r3, #0
 800af96:	d11c      	bne.n	800afd2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afa6:	f043 0302 	orr.w	r3, r3, #2
 800afaa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afbc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	639a      	str	r2, [r3, #56]	; 0x38
 800afd0:	e00b      	b.n	800afea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aff0:	461a      	mov	r2, r3
 800aff2:	2300      	movs	r3, #0
 800aff4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800affc:	4619      	mov	r1, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b004:	461a      	mov	r2, r3
 800b006:	680b      	ldr	r3, [r1, #0]
 800b008:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d10c      	bne.n	800b02a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b012:	2b00      	cmp	r3, #0
 800b014:	d104      	bne.n	800b020 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b016:	2100      	movs	r1, #0
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 f965 	bl	800b2e8 <USB_SetDevSpeed>
 800b01e:	e008      	b.n	800b032 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b020:	2101      	movs	r1, #1
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f960 	bl	800b2e8 <USB_SetDevSpeed>
 800b028:	e003      	b.n	800b032 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b02a:	2103      	movs	r1, #3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f95b 	bl	800b2e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b032:	2110      	movs	r1, #16
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f8f3 	bl	800b220 <USB_FlushTxFifo>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f91f 	bl	800b288 <USB_FlushRxFifo>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b05a:	461a      	mov	r2, r3
 800b05c:	2300      	movs	r3, #0
 800b05e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b066:	461a      	mov	r2, r3
 800b068:	2300      	movs	r3, #0
 800b06a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b072:	461a      	mov	r2, r3
 800b074:	2300      	movs	r3, #0
 800b076:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b078:	2300      	movs	r3, #0
 800b07a:	613b      	str	r3, [r7, #16]
 800b07c:	e043      	b.n	800b106 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	015a      	lsls	r2, r3, #5
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	4413      	add	r3, r2
 800b086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b094:	d118      	bne.n	800b0c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	015a      	lsls	r2, r3, #5
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b0ae:	6013      	str	r3, [r2, #0]
 800b0b0:	e013      	b.n	800b0da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	015a      	lsls	r2, r3, #5
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0be:	461a      	mov	r2, r3
 800b0c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b0c4:	6013      	str	r3, [r2, #0]
 800b0c6:	e008      	b.n	800b0da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	015a      	lsls	r2, r3, #5
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	015a      	lsls	r2, r3, #5
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	015a      	lsls	r2, r3, #5
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b0fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	3301      	adds	r3, #1
 800b104:	613b      	str	r3, [r7, #16]
 800b106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d3b7      	bcc.n	800b07e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b10e:	2300      	movs	r3, #0
 800b110:	613b      	str	r3, [r7, #16]
 800b112:	e043      	b.n	800b19c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b12a:	d118      	bne.n	800b15e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10a      	bne.n	800b148 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	015a      	lsls	r2, r3, #5
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	4413      	add	r3, r2
 800b13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b13e:	461a      	mov	r2, r3
 800b140:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	e013      	b.n	800b170 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	015a      	lsls	r2, r3, #5
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4413      	add	r3, r2
 800b150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b154:	461a      	mov	r2, r3
 800b156:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b15a:	6013      	str	r3, [r2, #0]
 800b15c:	e008      	b.n	800b170 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b16a:	461a      	mov	r2, r3
 800b16c:	2300      	movs	r3, #0
 800b16e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	4413      	add	r3, r2
 800b178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b17c:	461a      	mov	r2, r3
 800b17e:	2300      	movs	r3, #0
 800b180:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	015a      	lsls	r2, r3, #5
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	4413      	add	r3, r2
 800b18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b18e:	461a      	mov	r2, r3
 800b190:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b194:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	3301      	adds	r3, #1
 800b19a:	613b      	str	r3, [r7, #16]
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d3b7      	bcc.n	800b114 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b1c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d105      	bne.n	800b1d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	f043 0210 	orr.w	r2, r3, #16
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	699a      	ldr	r2, [r3, #24]
 800b1dc:	4b0f      	ldr	r3, [pc, #60]	; (800b21c <USB_DevInit+0x2c4>)
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d005      	beq.n	800b1f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	f043 0208 	orr.w	r2, r3, #8
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d107      	bne.n	800b20c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b204:	f043 0304 	orr.w	r3, r3, #4
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b218:	b004      	add	sp, #16
 800b21a:	4770      	bx	lr
 800b21c:	803c3800 	.word	0x803c3800

0800b220 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	3301      	adds	r3, #1
 800b232:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	4a13      	ldr	r2, [pc, #76]	; (800b284 <USB_FlushTxFifo+0x64>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d901      	bls.n	800b240 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b23c:	2303      	movs	r3, #3
 800b23e:	e01b      	b.n	800b278 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	daf2      	bge.n	800b22e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b248:	2300      	movs	r3, #0
 800b24a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	019b      	lsls	r3, r3, #6
 800b250:	f043 0220 	orr.w	r2, r3, #32
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	3301      	adds	r3, #1
 800b25c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	4a08      	ldr	r2, [pc, #32]	; (800b284 <USB_FlushTxFifo+0x64>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d901      	bls.n	800b26a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e006      	b.n	800b278 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	f003 0320 	and.w	r3, r3, #32
 800b272:	2b20      	cmp	r3, #32
 800b274:	d0f0      	beq.n	800b258 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3714      	adds	r7, #20
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	00030d40 	.word	0x00030d40

0800b288 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3301      	adds	r3, #1
 800b298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	4a11      	ldr	r2, [pc, #68]	; (800b2e4 <USB_FlushRxFifo+0x5c>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d901      	bls.n	800b2a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e018      	b.n	800b2d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	daf2      	bge.n	800b294 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2210      	movs	r2, #16
 800b2b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	4a08      	ldr	r2, [pc, #32]	; (800b2e4 <USB_FlushRxFifo+0x5c>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d901      	bls.n	800b2ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e006      	b.n	800b2d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	f003 0310 	and.w	r3, r3, #16
 800b2d2:	2b10      	cmp	r3, #16
 800b2d4:	d0f0      	beq.n	800b2b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	00030d40 	.word	0x00030d40

0800b2e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	78fb      	ldrb	r3, [r7, #3]
 800b302:	68f9      	ldr	r1, [r7, #12]
 800b304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b308:	4313      	orrs	r3, r2
 800b30a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b087      	sub	sp, #28
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f003 0306 	and.w	r3, r3, #6
 800b332:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d102      	bne.n	800b340 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b33a:	2300      	movs	r3, #0
 800b33c:	75fb      	strb	r3, [r7, #23]
 800b33e:	e00a      	b.n	800b356 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b02      	cmp	r3, #2
 800b344:	d002      	beq.n	800b34c <USB_GetDevSpeed+0x32>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2b06      	cmp	r3, #6
 800b34a:	d102      	bne.n	800b352 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b34c:	2302      	movs	r3, #2
 800b34e:	75fb      	strb	r3, [r7, #23]
 800b350:	e001      	b.n	800b356 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b352:	230f      	movs	r3, #15
 800b354:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b356:	7dfb      	ldrb	r3, [r7, #23]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	371c      	adds	r7, #28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	785b      	ldrb	r3, [r3, #1]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d13a      	bne.n	800b3f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b386:	69da      	ldr	r2, [r3, #28]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	f003 030f 	and.w	r3, r3, #15
 800b390:	2101      	movs	r1, #1
 800b392:	fa01 f303 	lsl.w	r3, r1, r3
 800b396:	b29b      	uxth	r3, r3
 800b398:	68f9      	ldr	r1, [r7, #12]
 800b39a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	015a      	lsls	r2, r3, #5
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d155      	bne.n	800b464 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	791b      	ldrb	r3, [r3, #4]
 800b3d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	059b      	lsls	r3, r3, #22
 800b3da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	0151      	lsls	r1, r2, #5
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	440a      	add	r2, r1
 800b3e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3f2:	6013      	str	r3, [r2, #0]
 800b3f4:	e036      	b.n	800b464 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3fc:	69da      	ldr	r2, [r3, #28]
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	f003 030f 	and.w	r3, r3, #15
 800b406:	2101      	movs	r1, #1
 800b408:	fa01 f303 	lsl.w	r3, r1, r3
 800b40c:	041b      	lsls	r3, r3, #16
 800b40e:	68f9      	ldr	r1, [r7, #12]
 800b410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b414:	4313      	orrs	r3, r2
 800b416:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	015a      	lsls	r2, r3, #5
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4413      	add	r3, r2
 800b420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d11a      	bne.n	800b464 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	015a      	lsls	r2, r3, #5
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	4413      	add	r3, r2
 800b436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	791b      	ldrb	r3, [r3, #4]
 800b448:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b44a:	430b      	orrs	r3, r1
 800b44c:	4313      	orrs	r3, r2
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	0151      	lsls	r1, r2, #5
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	440a      	add	r2, r1
 800b456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b45a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b45e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b462:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
	...

0800b474 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	785b      	ldrb	r3, [r3, #1]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d161      	bne.n	800b554 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	015a      	lsls	r2, r3, #5
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	4413      	add	r3, r2
 800b498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4a6:	d11f      	bne.n	800b4e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	015a      	lsls	r2, r3, #5
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	0151      	lsls	r1, r2, #5
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	440a      	add	r2, r1
 800b4be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	0151      	lsls	r1, r2, #5
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	440a      	add	r2, r1
 800b4de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	f003 030f 	and.w	r3, r3, #15
 800b4f8:	2101      	movs	r1, #1
 800b4fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	43db      	mvns	r3, r3
 800b502:	68f9      	ldr	r1, [r7, #12]
 800b504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b508:	4013      	ands	r3, r2
 800b50a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b512:	69da      	ldr	r2, [r3, #28]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	f003 030f 	and.w	r3, r3, #15
 800b51c:	2101      	movs	r1, #1
 800b51e:	fa01 f303 	lsl.w	r3, r1, r3
 800b522:	b29b      	uxth	r3, r3
 800b524:	43db      	mvns	r3, r3
 800b526:	68f9      	ldr	r1, [r7, #12]
 800b528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b52c:	4013      	ands	r3, r2
 800b52e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	015a      	lsls	r2, r3, #5
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	4413      	add	r3, r2
 800b538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	0159      	lsls	r1, r3, #5
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	440b      	add	r3, r1
 800b546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b54a:	4619      	mov	r1, r3
 800b54c:	4b35      	ldr	r3, [pc, #212]	; (800b624 <USB_DeactivateEndpoint+0x1b0>)
 800b54e:	4013      	ands	r3, r2
 800b550:	600b      	str	r3, [r1, #0]
 800b552:	e060      	b.n	800b616 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	015a      	lsls	r2, r3, #5
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	4413      	add	r3, r2
 800b55c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b56a:	d11f      	bne.n	800b5ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	015a      	lsls	r2, r3, #5
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	4413      	add	r3, r2
 800b574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	0151      	lsls	r1, r2, #5
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	440a      	add	r2, r1
 800b582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b586:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b58a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	0151      	lsls	r1, r2, #5
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	440a      	add	r2, r1
 800b5a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	f003 030f 	and.w	r3, r3, #15
 800b5bc:	2101      	movs	r1, #1
 800b5be:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c2:	041b      	lsls	r3, r3, #16
 800b5c4:	43db      	mvns	r3, r3
 800b5c6:	68f9      	ldr	r1, [r7, #12]
 800b5c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5d6:	69da      	ldr	r2, [r3, #28]
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	f003 030f 	and.w	r3, r3, #15
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b5e6:	041b      	lsls	r3, r3, #16
 800b5e8:	43db      	mvns	r3, r3
 800b5ea:	68f9      	ldr	r1, [r7, #12]
 800b5ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	015a      	lsls	r2, r3, #5
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	0159      	lsls	r1, r3, #5
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	440b      	add	r3, r1
 800b60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60e:	4619      	mov	r1, r3
 800b610:	4b05      	ldr	r3, [pc, #20]	; (800b628 <USB_DeactivateEndpoint+0x1b4>)
 800b612:	4013      	ands	r3, r2
 800b614:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	ec337800 	.word	0xec337800
 800b628:	eff37800 	.word	0xeff37800

0800b62c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b08a      	sub	sp, #40	; 0x28
 800b630:	af02      	add	r7, sp, #8
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	4613      	mov	r3, r2
 800b638:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	785b      	ldrb	r3, [r3, #1]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	f040 815c 	bne.w	800b906 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	699b      	ldr	r3, [r3, #24]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d132      	bne.n	800b6bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	015a      	lsls	r2, r3, #5
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	4413      	add	r3, r2
 800b65e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	69ba      	ldr	r2, [r7, #24]
 800b666:	0151      	lsls	r1, r2, #5
 800b668:	69fa      	ldr	r2, [r7, #28]
 800b66a:	440a      	add	r2, r1
 800b66c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b670:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b674:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	4413      	add	r3, r2
 800b682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	69ba      	ldr	r2, [r7, #24]
 800b68a:	0151      	lsls	r1, r2, #5
 800b68c:	69fa      	ldr	r2, [r7, #28]
 800b68e:	440a      	add	r2, r1
 800b690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b698:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	015a      	lsls	r2, r3, #5
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	69ba      	ldr	r2, [r7, #24]
 800b6aa:	0151      	lsls	r1, r2, #5
 800b6ac:	69fa      	ldr	r2, [r7, #28]
 800b6ae:	440a      	add	r2, r1
 800b6b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6b4:	0cdb      	lsrs	r3, r3, #19
 800b6b6:	04db      	lsls	r3, r3, #19
 800b6b8:	6113      	str	r3, [r2, #16]
 800b6ba:	e074      	b.n	800b7a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	015a      	lsls	r2, r3, #5
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c8:	691b      	ldr	r3, [r3, #16]
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	0151      	lsls	r1, r2, #5
 800b6ce:	69fa      	ldr	r2, [r7, #28]
 800b6d0:	440a      	add	r2, r1
 800b6d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6d6:	0cdb      	lsrs	r3, r3, #19
 800b6d8:	04db      	lsls	r3, r3, #19
 800b6da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	015a      	lsls	r2, r3, #5
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	69ba      	ldr	r2, [r7, #24]
 800b6ec:	0151      	lsls	r1, r2, #5
 800b6ee:	69fa      	ldr	r2, [r7, #28]
 800b6f0:	440a      	add	r2, r1
 800b6f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b6fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b6fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	015a      	lsls	r2, r3, #5
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	4413      	add	r3, r2
 800b708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b70c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	6999      	ldr	r1, [r3, #24]
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	440b      	add	r3, r1
 800b718:	1e59      	subs	r1, r3, #1
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b722:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b724:	4b9d      	ldr	r3, [pc, #628]	; (800b99c <USB_EPStartXfer+0x370>)
 800b726:	400b      	ands	r3, r1
 800b728:	69b9      	ldr	r1, [r7, #24]
 800b72a:	0148      	lsls	r0, r1, #5
 800b72c:	69f9      	ldr	r1, [r7, #28]
 800b72e:	4401      	add	r1, r0
 800b730:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b734:	4313      	orrs	r3, r2
 800b736:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	015a      	lsls	r2, r3, #5
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	4413      	add	r3, r2
 800b740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b744:	691a      	ldr	r2, [r3, #16]
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b74e:	69b9      	ldr	r1, [r7, #24]
 800b750:	0148      	lsls	r0, r1, #5
 800b752:	69f9      	ldr	r1, [r7, #28]
 800b754:	4401      	add	r1, r0
 800b756:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b75a:	4313      	orrs	r3, r2
 800b75c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	791b      	ldrb	r3, [r3, #4]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d11f      	bne.n	800b7a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	015a      	lsls	r2, r3, #5
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	4413      	add	r3, r2
 800b76e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	0151      	lsls	r1, r2, #5
 800b778:	69fa      	ldr	r2, [r7, #28]
 800b77a:	440a      	add	r2, r1
 800b77c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b780:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b784:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	015a      	lsls	r2, r3, #5
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	4413      	add	r3, r2
 800b78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	69ba      	ldr	r2, [r7, #24]
 800b796:	0151      	lsls	r1, r2, #5
 800b798:	69fa      	ldr	r2, [r7, #28]
 800b79a:	440a      	add	r2, r1
 800b79c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b7a6:	79fb      	ldrb	r3, [r7, #7]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d14b      	bne.n	800b844 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d009      	beq.n	800b7c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	695b      	ldr	r3, [r3, #20]
 800b7c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	791b      	ldrb	r3, [r3, #4]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d128      	bne.n	800b822 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d110      	bne.n	800b802 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	015a      	lsls	r2, r3, #5
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	69ba      	ldr	r2, [r7, #24]
 800b7f0:	0151      	lsls	r1, r2, #5
 800b7f2:	69fa      	ldr	r2, [r7, #28]
 800b7f4:	440a      	add	r2, r1
 800b7f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	e00f      	b.n	800b822 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	015a      	lsls	r2, r3, #5
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	4413      	add	r3, r2
 800b80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	69ba      	ldr	r2, [r7, #24]
 800b812:	0151      	lsls	r1, r2, #5
 800b814:	69fa      	ldr	r2, [r7, #28]
 800b816:	440a      	add	r2, r1
 800b818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b81c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b820:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	015a      	lsls	r2, r3, #5
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	4413      	add	r3, r2
 800b82a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	69ba      	ldr	r2, [r7, #24]
 800b832:	0151      	lsls	r1, r2, #5
 800b834:	69fa      	ldr	r2, [r7, #28]
 800b836:	440a      	add	r2, r1
 800b838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b83c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b840:	6013      	str	r3, [r2, #0]
 800b842:	e133      	b.n	800baac <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	015a      	lsls	r2, r3, #5
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	4413      	add	r3, r2
 800b84c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	69ba      	ldr	r2, [r7, #24]
 800b854:	0151      	lsls	r1, r2, #5
 800b856:	69fa      	ldr	r2, [r7, #28]
 800b858:	440a      	add	r2, r1
 800b85a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b85e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b862:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	791b      	ldrb	r3, [r3, #4]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d015      	beq.n	800b898 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	2b00      	cmp	r3, #0
 800b872:	f000 811b 	beq.w	800baac <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b87c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	f003 030f 	and.w	r3, r3, #15
 800b886:	2101      	movs	r1, #1
 800b888:	fa01 f303 	lsl.w	r3, r1, r3
 800b88c:	69f9      	ldr	r1, [r7, #28]
 800b88e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b892:	4313      	orrs	r3, r2
 800b894:	634b      	str	r3, [r1, #52]	; 0x34
 800b896:	e109      	b.n	800baac <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d110      	bne.n	800b8ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	015a      	lsls	r2, r3, #5
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	69ba      	ldr	r2, [r7, #24]
 800b8b8:	0151      	lsls	r1, r2, #5
 800b8ba:	69fa      	ldr	r2, [r7, #28]
 800b8bc:	440a      	add	r2, r1
 800b8be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	e00f      	b.n	800b8ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	015a      	lsls	r2, r3, #5
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	69ba      	ldr	r2, [r7, #24]
 800b8da:	0151      	lsls	r1, r2, #5
 800b8dc:	69fa      	ldr	r2, [r7, #28]
 800b8de:	440a      	add	r2, r1
 800b8e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	6919      	ldr	r1, [r3, #16]
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	781a      	ldrb	r2, [r3, #0]
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	b298      	uxth	r0, r3
 800b8f8:	79fb      	ldrb	r3, [r7, #7]
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 fade 	bl	800bec0 <USB_WritePacket>
 800b904:	e0d2      	b.n	800baac <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	015a      	lsls	r2, r3, #5
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	4413      	add	r3, r2
 800b90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	69ba      	ldr	r2, [r7, #24]
 800b916:	0151      	lsls	r1, r2, #5
 800b918:	69fa      	ldr	r2, [r7, #28]
 800b91a:	440a      	add	r2, r1
 800b91c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b920:	0cdb      	lsrs	r3, r3, #19
 800b922:	04db      	lsls	r3, r3, #19
 800b924:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	015a      	lsls	r2, r3, #5
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	4413      	add	r3, r2
 800b92e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	69ba      	ldr	r2, [r7, #24]
 800b936:	0151      	lsls	r1, r2, #5
 800b938:	69fa      	ldr	r2, [r7, #28]
 800b93a:	440a      	add	r2, r1
 800b93c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b940:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b944:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b948:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d126      	bne.n	800b9a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	015a      	lsls	r2, r3, #5
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	4413      	add	r3, r2
 800b95a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b95e:	691a      	ldr	r2, [r3, #16]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b968:	69b9      	ldr	r1, [r7, #24]
 800b96a:	0148      	lsls	r0, r1, #5
 800b96c:	69f9      	ldr	r1, [r7, #28]
 800b96e:	4401      	add	r1, r0
 800b970:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b974:	4313      	orrs	r3, r2
 800b976:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	015a      	lsls	r2, r3, #5
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	4413      	add	r3, r2
 800b980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	69ba      	ldr	r2, [r7, #24]
 800b988:	0151      	lsls	r1, r2, #5
 800b98a:	69fa      	ldr	r2, [r7, #28]
 800b98c:	440a      	add	r2, r1
 800b98e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b992:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b996:	6113      	str	r3, [r2, #16]
 800b998:	e03a      	b.n	800ba10 <USB_EPStartXfer+0x3e4>
 800b99a:	bf00      	nop
 800b99c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	699a      	ldr	r2, [r3, #24]
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	1e5a      	subs	r2, r3, #1
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9b4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	8afa      	ldrh	r2, [r7, #22]
 800b9bc:	fb03 f202 	mul.w	r2, r3, r2
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d0:	691a      	ldr	r2, [r3, #16]
 800b9d2:	8afb      	ldrh	r3, [r7, #22]
 800b9d4:	04d9      	lsls	r1, r3, #19
 800b9d6:	4b38      	ldr	r3, [pc, #224]	; (800bab8 <USB_EPStartXfer+0x48c>)
 800b9d8:	400b      	ands	r3, r1
 800b9da:	69b9      	ldr	r1, [r7, #24]
 800b9dc:	0148      	lsls	r0, r1, #5
 800b9de:	69f9      	ldr	r1, [r7, #28]
 800b9e0:	4401      	add	r1, r0
 800b9e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	015a      	lsls	r2, r3, #5
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9f6:	691a      	ldr	r2, [r3, #16]
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	69db      	ldr	r3, [r3, #28]
 800b9fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba00:	69b9      	ldr	r1, [r7, #24]
 800ba02:	0148      	lsls	r0, r1, #5
 800ba04:	69f9      	ldr	r1, [r7, #28]
 800ba06:	4401      	add	r1, r0
 800ba08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ba10:	79fb      	ldrb	r3, [r7, #7]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d10d      	bne.n	800ba32 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d009      	beq.n	800ba32 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	6919      	ldr	r1, [r3, #16]
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	015a      	lsls	r2, r3, #5
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	4413      	add	r3, r2
 800ba2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba2e:	460a      	mov	r2, r1
 800ba30:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	791b      	ldrb	r3, [r3, #4]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d128      	bne.n	800ba8c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d110      	bne.n	800ba6c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	015a      	lsls	r2, r3, #5
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	4413      	add	r3, r2
 800ba52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	69ba      	ldr	r2, [r7, #24]
 800ba5a:	0151      	lsls	r1, r2, #5
 800ba5c:	69fa      	ldr	r2, [r7, #28]
 800ba5e:	440a      	add	r2, r1
 800ba60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba68:	6013      	str	r3, [r2, #0]
 800ba6a:	e00f      	b.n	800ba8c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	015a      	lsls	r2, r3, #5
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	4413      	add	r3, r2
 800ba74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	69ba      	ldr	r2, [r7, #24]
 800ba7c:	0151      	lsls	r1, r2, #5
 800ba7e:	69fa      	ldr	r2, [r7, #28]
 800ba80:	440a      	add	r2, r1
 800ba82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	015a      	lsls	r2, r3, #5
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	4413      	add	r3, r2
 800ba94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	69ba      	ldr	r2, [r7, #24]
 800ba9c:	0151      	lsls	r1, r2, #5
 800ba9e:	69fa      	ldr	r2, [r7, #28]
 800baa0:	440a      	add	r2, r1
 800baa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800baaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3720      	adds	r7, #32
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	1ff80000 	.word	0x1ff80000

0800babc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800babc:	b480      	push	{r7}
 800babe:	b087      	sub	sp, #28
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	4613      	mov	r3, r2
 800bac8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	785b      	ldrb	r3, [r3, #1]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	f040 80ce 	bne.w	800bc7a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	699b      	ldr	r3, [r3, #24]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d132      	bne.n	800bb4c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	015a      	lsls	r2, r3, #5
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	4413      	add	r3, r2
 800baee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	0151      	lsls	r1, r2, #5
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	440a      	add	r2, r1
 800bafc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	015a      	lsls	r2, r3, #5
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	4413      	add	r3, r2
 800bb12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	0151      	lsls	r1, r2, #5
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	440a      	add	r2, r1
 800bb20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	015a      	lsls	r2, r3, #5
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	4413      	add	r3, r2
 800bb32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	693a      	ldr	r2, [r7, #16]
 800bb3a:	0151      	lsls	r1, r2, #5
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	440a      	add	r2, r1
 800bb40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb44:	0cdb      	lsrs	r3, r3, #19
 800bb46:	04db      	lsls	r3, r3, #19
 800bb48:	6113      	str	r3, [r2, #16]
 800bb4a:	e04e      	b.n	800bbea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	015a      	lsls	r2, r3, #5
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	693a      	ldr	r2, [r7, #16]
 800bb5c:	0151      	lsls	r1, r2, #5
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	440a      	add	r2, r1
 800bb62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb66:	0cdb      	lsrs	r3, r3, #19
 800bb68:	04db      	lsls	r3, r3, #19
 800bb6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	015a      	lsls	r2, r3, #5
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	4413      	add	r3, r2
 800bb74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	0151      	lsls	r1, r2, #5
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	440a      	add	r2, r1
 800bb82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb8e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	699a      	ldr	r2, [r3, #24]
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d903      	bls.n	800bba4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	68da      	ldr	r2, [r3, #12]
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	015a      	lsls	r2, r3, #5
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	4413      	add	r3, r2
 800bbac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbb0:	691b      	ldr	r3, [r3, #16]
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	0151      	lsls	r1, r2, #5
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	440a      	add	r2, r1
 800bbba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	015a      	lsls	r2, r3, #5
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	4413      	add	r3, r2
 800bbcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbd0:	691a      	ldr	r2, [r3, #16]
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbda:	6939      	ldr	r1, [r7, #16]
 800bbdc:	0148      	lsls	r0, r1, #5
 800bbde:	6979      	ldr	r1, [r7, #20]
 800bbe0:	4401      	add	r1, r0
 800bbe2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bbea:	79fb      	ldrb	r3, [r7, #7]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d11e      	bne.n	800bc2e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	695b      	ldr	r3, [r3, #20]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d009      	beq.n	800bc0c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	015a      	lsls	r2, r3, #5
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	4413      	add	r3, r2
 800bc00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc04:	461a      	mov	r2, r3
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	015a      	lsls	r2, r3, #5
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	4413      	add	r3, r2
 800bc14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	693a      	ldr	r2, [r7, #16]
 800bc1c:	0151      	lsls	r1, r2, #5
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	440a      	add	r2, r1
 800bc22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc2a:	6013      	str	r3, [r2, #0]
 800bc2c:	e097      	b.n	800bd5e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	015a      	lsls	r2, r3, #5
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	4413      	add	r3, r2
 800bc36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	0151      	lsls	r1, r2, #5
 800bc40:	697a      	ldr	r2, [r7, #20]
 800bc42:	440a      	add	r2, r1
 800bc44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc4c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f000 8083 	beq.w	800bd5e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	f003 030f 	and.w	r3, r3, #15
 800bc68:	2101      	movs	r1, #1
 800bc6a:	fa01 f303 	lsl.w	r3, r1, r3
 800bc6e:	6979      	ldr	r1, [r7, #20]
 800bc70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc74:	4313      	orrs	r3, r2
 800bc76:	634b      	str	r3, [r1, #52]	; 0x34
 800bc78:	e071      	b.n	800bd5e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	015a      	lsls	r2, r3, #5
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	4413      	add	r3, r2
 800bc82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	693a      	ldr	r2, [r7, #16]
 800bc8a:	0151      	lsls	r1, r2, #5
 800bc8c:	697a      	ldr	r2, [r7, #20]
 800bc8e:	440a      	add	r2, r1
 800bc90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc94:	0cdb      	lsrs	r3, r3, #19
 800bc96:	04db      	lsls	r3, r3, #19
 800bc98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	015a      	lsls	r2, r3, #5
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	4413      	add	r3, r2
 800bca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	0151      	lsls	r1, r2, #5
 800bcac:	697a      	ldr	r2, [r7, #20]
 800bcae:	440a      	add	r2, r1
 800bcb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bcb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bcbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d003      	beq.n	800bcce <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	68da      	ldr	r2, [r3, #12]
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	68da      	ldr	r2, [r3, #12]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	015a      	lsls	r2, r3, #5
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	4413      	add	r3, r2
 800bcde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	0151      	lsls	r1, r2, #5
 800bce8:	697a      	ldr	r2, [r7, #20]
 800bcea:	440a      	add	r2, r1
 800bcec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	015a      	lsls	r2, r3, #5
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd02:	691a      	ldr	r2, [r3, #16]
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	69db      	ldr	r3, [r3, #28]
 800bd08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd0c:	6939      	ldr	r1, [r7, #16]
 800bd0e:	0148      	lsls	r0, r1, #5
 800bd10:	6979      	ldr	r1, [r7, #20]
 800bd12:	4401      	add	r1, r0
 800bd14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bd1c:	79fb      	ldrb	r3, [r7, #7]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d10d      	bne.n	800bd3e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d009      	beq.n	800bd3e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	6919      	ldr	r1, [r3, #16]
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	015a      	lsls	r2, r3, #5
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	4413      	add	r3, r2
 800bd36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd3a:	460a      	mov	r2, r1
 800bd3c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	015a      	lsls	r2, r3, #5
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	4413      	add	r3, r2
 800bd46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	693a      	ldr	r2, [r7, #16]
 800bd4e:	0151      	lsls	r1, r2, #5
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	440a      	add	r2, r1
 800bd54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	371c      	adds	r7, #28
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b087      	sub	sp, #28
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd76:	2300      	movs	r3, #0
 800bd78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	785b      	ldrb	r3, [r3, #1]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d14a      	bne.n	800be20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	015a      	lsls	r2, r3, #5
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	4413      	add	r3, r2
 800bd94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bda2:	f040 8086 	bne.w	800beb2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	015a      	lsls	r2, r3, #5
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	4413      	add	r3, r2
 800bdb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	7812      	ldrb	r2, [r2, #0]
 800bdba:	0151      	lsls	r1, r2, #5
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	440a      	add	r2, r1
 800bdc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bdc8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	015a      	lsls	r2, r3, #5
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	7812      	ldrb	r2, [r2, #0]
 800bdde:	0151      	lsls	r1, r2, #5
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	440a      	add	r2, r1
 800bde4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bde8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bdec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f242 7210 	movw	r2, #10000	; 0x2710
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d902      	bls.n	800be04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bdfe:	2301      	movs	r3, #1
 800be00:	75fb      	strb	r3, [r7, #23]
          break;
 800be02:	e056      	b.n	800beb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	015a      	lsls	r2, r3, #5
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	4413      	add	r3, r2
 800be0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be1c:	d0e7      	beq.n	800bdee <USB_EPStopXfer+0x82>
 800be1e:	e048      	b.n	800beb2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	015a      	lsls	r2, r3, #5
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	4413      	add	r3, r2
 800be2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be38:	d13b      	bne.n	800beb2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	015a      	lsls	r2, r3, #5
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	4413      	add	r3, r2
 800be44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	7812      	ldrb	r2, [r2, #0]
 800be4e:	0151      	lsls	r1, r2, #5
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	440a      	add	r2, r1
 800be54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	015a      	lsls	r2, r3, #5
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	4413      	add	r3, r2
 800be68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	7812      	ldrb	r2, [r2, #0]
 800be72:	0151      	lsls	r1, r2, #5
 800be74:	693a      	ldr	r2, [r7, #16]
 800be76:	440a      	add	r2, r1
 800be78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3301      	adds	r3, #1
 800be86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f242 7210 	movw	r2, #10000	; 0x2710
 800be8e:	4293      	cmp	r3, r2
 800be90:	d902      	bls.n	800be98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800be92:	2301      	movs	r3, #1
 800be94:	75fb      	strb	r3, [r7, #23]
          break;
 800be96:	e00c      	b.n	800beb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	015a      	lsls	r2, r3, #5
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	4413      	add	r3, r2
 800bea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800beac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800beb0:	d0e7      	beq.n	800be82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800beb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	371c      	adds	r7, #28
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b089      	sub	sp, #36	; 0x24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	4611      	mov	r1, r2
 800becc:	461a      	mov	r2, r3
 800bece:	460b      	mov	r3, r1
 800bed0:	71fb      	strb	r3, [r7, #7]
 800bed2:	4613      	mov	r3, r2
 800bed4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bede:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d123      	bne.n	800bf2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bee6:	88bb      	ldrh	r3, [r7, #4]
 800bee8:	3303      	adds	r3, #3
 800beea:	089b      	lsrs	r3, r3, #2
 800beec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800beee:	2300      	movs	r3, #0
 800bef0:	61bb      	str	r3, [r7, #24]
 800bef2:	e018      	b.n	800bf26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bef4:	79fb      	ldrb	r3, [r7, #7]
 800bef6:	031a      	lsls	r2, r3, #12
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	4413      	add	r3, r2
 800befc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf00:	461a      	mov	r2, r3
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	3301      	adds	r3, #1
 800bf12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	3301      	adds	r3, #1
 800bf18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	3301      	adds	r3, #1
 800bf24:	61bb      	str	r3, [r7, #24]
 800bf26:	69ba      	ldr	r2, [r7, #24]
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d3e2      	bcc.n	800bef4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bf2e:	2300      	movs	r3, #0
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3724      	adds	r7, #36	; 0x24
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b08b      	sub	sp, #44	; 0x2c
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	4613      	mov	r3, r2
 800bf48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bf52:	88fb      	ldrh	r3, [r7, #6]
 800bf54:	089b      	lsrs	r3, r3, #2
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bf5a:	88fb      	ldrh	r3, [r7, #6]
 800bf5c:	f003 0303 	and.w	r3, r3, #3
 800bf60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bf62:	2300      	movs	r3, #0
 800bf64:	623b      	str	r3, [r7, #32]
 800bf66:	e014      	b.n	800bf92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf72:	601a      	str	r2, [r3, #0]
    pDest++;
 800bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf76:	3301      	adds	r3, #1
 800bf78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf82:	3301      	adds	r3, #1
 800bf84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	3301      	adds	r3, #1
 800bf8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bf8c:	6a3b      	ldr	r3, [r7, #32]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	623b      	str	r3, [r7, #32]
 800bf92:	6a3a      	ldr	r2, [r7, #32]
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d3e6      	bcc.n	800bf68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bf9a:	8bfb      	ldrh	r3, [r7, #30]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d01e      	beq.n	800bfde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfaa:	461a      	mov	r2, r3
 800bfac:	f107 0310 	add.w	r3, r7, #16
 800bfb0:	6812      	ldr	r2, [r2, #0]
 800bfb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bfb4:	693a      	ldr	r2, [r7, #16]
 800bfb6:	6a3b      	ldr	r3, [r7, #32]
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	00db      	lsls	r3, r3, #3
 800bfbc:	fa22 f303 	lsr.w	r3, r2, r3
 800bfc0:	b2da      	uxtb	r2, r3
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc4:	701a      	strb	r2, [r3, #0]
      i++;
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	623b      	str	r3, [r7, #32]
      pDest++;
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	3301      	adds	r3, #1
 800bfd0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bfd2:	8bfb      	ldrh	r3, [r7, #30]
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bfd8:	8bfb      	ldrh	r3, [r7, #30]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1ea      	bne.n	800bfb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	372c      	adds	r7, #44	; 0x2c
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	785b      	ldrb	r3, [r3, #1]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d12c      	bne.n	800c062 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	015a      	lsls	r2, r3, #5
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4413      	add	r3, r2
 800c010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	db12      	blt.n	800c040 <USB_EPSetStall+0x54>
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00f      	beq.n	800c040 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	015a      	lsls	r2, r3, #5
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	4413      	add	r3, r2
 800c028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	68ba      	ldr	r2, [r7, #8]
 800c030:	0151      	lsls	r1, r2, #5
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	440a      	add	r2, r1
 800c036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c03a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c03e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	015a      	lsls	r2, r3, #5
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	4413      	add	r3, r2
 800c048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68ba      	ldr	r2, [r7, #8]
 800c050:	0151      	lsls	r1, r2, #5
 800c052:	68fa      	ldr	r2, [r7, #12]
 800c054:	440a      	add	r2, r1
 800c056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c05a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c05e:	6013      	str	r3, [r2, #0]
 800c060:	e02b      	b.n	800c0ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	015a      	lsls	r2, r3, #5
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	4413      	add	r3, r2
 800c06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	db12      	blt.n	800c09a <USB_EPSetStall+0xae>
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00f      	beq.n	800c09a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	015a      	lsls	r2, r3, #5
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	4413      	add	r3, r2
 800c082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	0151      	lsls	r1, r2, #5
 800c08c:	68fa      	ldr	r2, [r7, #12]
 800c08e:	440a      	add	r2, r1
 800c090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c094:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c098:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	015a      	lsls	r2, r3, #5
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68ba      	ldr	r2, [r7, #8]
 800c0aa:	0151      	lsls	r1, r2, #5
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	440a      	add	r2, r1
 800c0b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c0b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3714      	adds	r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	785b      	ldrb	r3, [r3, #1]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d128      	bne.n	800c136 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	015a      	lsls	r2, r3, #5
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	0151      	lsls	r1, r2, #5
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	440a      	add	r2, r1
 800c0fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c102:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	791b      	ldrb	r3, [r3, #4]
 800c108:	2b03      	cmp	r3, #3
 800c10a:	d003      	beq.n	800c114 <USB_EPClearStall+0x4c>
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	791b      	ldrb	r3, [r3, #4]
 800c110:	2b02      	cmp	r3, #2
 800c112:	d138      	bne.n	800c186 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	015a      	lsls	r2, r3, #5
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	4413      	add	r3, r2
 800c11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68ba      	ldr	r2, [r7, #8]
 800c124:	0151      	lsls	r1, r2, #5
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	440a      	add	r2, r1
 800c12a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c12e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c132:	6013      	str	r3, [r2, #0]
 800c134:	e027      	b.n	800c186 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	015a      	lsls	r2, r3, #5
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	4413      	add	r3, r2
 800c13e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	68ba      	ldr	r2, [r7, #8]
 800c146:	0151      	lsls	r1, r2, #5
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	440a      	add	r2, r1
 800c14c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c150:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c154:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	791b      	ldrb	r3, [r3, #4]
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	d003      	beq.n	800c166 <USB_EPClearStall+0x9e>
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	791b      	ldrb	r3, [r3, #4]
 800c162:	2b02      	cmp	r3, #2
 800c164:	d10f      	bne.n	800c186 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	015a      	lsls	r2, r3, #5
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	4413      	add	r3, r2
 800c16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	68ba      	ldr	r2, [r7, #8]
 800c176:	0151      	lsls	r1, r2, #5
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	440a      	add	r2, r1
 800c17c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c184:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3714      	adds	r7, #20
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	460b      	mov	r3, r1
 800c19e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c1b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	78fb      	ldrb	r3, [r7, #3]
 800c1c2:	011b      	lsls	r3, r3, #4
 800c1c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c1c8:	68f9      	ldr	r1, [r7, #12]
 800c1ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c1d2:	2300      	movs	r3, #0
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3714      	adds	r7, #20
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1fa:	f023 0303 	bic.w	r3, r3, #3
 800c1fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c20e:	f023 0302 	bic.w	r3, r3, #2
 800c212:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c214:	2300      	movs	r3, #0
}
 800c216:	4618      	mov	r0, r3
 800c218:	3714      	adds	r7, #20
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c222:	b480      	push	{r7}
 800c224:	b085      	sub	sp, #20
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c23c:	f023 0303 	bic.w	r3, r3, #3
 800c240:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c250:	f043 0302 	orr.w	r3, r3, #2
 800c254:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3714      	adds	r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	695b      	ldr	r3, [r3, #20]
 800c270:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	4013      	ands	r3, r2
 800c27a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c27c:	68fb      	ldr	r3, [r7, #12]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3714      	adds	r7, #20
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr

0800c28a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c28a:	b480      	push	{r7}
 800c28c:	b085      	sub	sp, #20
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c29c:	699b      	ldr	r3, [r3, #24]
 800c29e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2a6:	69db      	ldr	r3, [r3, #28]
 800c2a8:	68ba      	ldr	r2, [r7, #8]
 800c2aa:	4013      	ands	r3, r2
 800c2ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	0c1b      	lsrs	r3, r3, #16
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3714      	adds	r7, #20
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr

0800c2be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c2be:	b480      	push	{r7}
 800c2c0:	b085      	sub	sp, #20
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2da:	69db      	ldr	r3, [r3, #28]
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	4013      	ands	r3, r2
 800c2e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	b29b      	uxth	r3, r3
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3714      	adds	r7, #20
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr

0800c2f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c2f2:	b480      	push	{r7}
 800c2f4:	b085      	sub	sp, #20
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c302:	78fb      	ldrb	r3, [r7, #3]
 800c304:	015a      	lsls	r2, r3, #5
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	4413      	add	r3, r2
 800c30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c318:	695b      	ldr	r3, [r3, #20]
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	4013      	ands	r3, r2
 800c31e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c320:	68bb      	ldr	r3, [r7, #8]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c32e:	b480      	push	{r7}
 800c330:	b087      	sub	sp, #28
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	460b      	mov	r3, r1
 800c338:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c350:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c352:	78fb      	ldrb	r3, [r7, #3]
 800c354:	f003 030f 	and.w	r3, r3, #15
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	fa22 f303 	lsr.w	r3, r2, r3
 800c35e:	01db      	lsls	r3, r3, #7
 800c360:	b2db      	uxtb	r3, r3
 800c362:	693a      	ldr	r2, [r7, #16]
 800c364:	4313      	orrs	r3, r2
 800c366:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c368:	78fb      	ldrb	r3, [r7, #3]
 800c36a:	015a      	lsls	r2, r3, #5
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	4413      	add	r3, r2
 800c370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	4013      	ands	r3, r2
 800c37a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c37c:	68bb      	ldr	r3, [r7, #8]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	371c      	adds	r7, #28
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c38a:	b480      	push	{r7}
 800c38c:	b083      	sub	sp, #12
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	695b      	ldr	r3, [r3, #20]
 800c396:	f003 0301 	and.w	r3, r3, #1
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	370c      	adds	r7, #12
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr

0800c3a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c3a6:	b480      	push	{r7}
 800c3a8:	b085      	sub	sp, #20
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c3c4:	f023 0307 	bic.w	r3, r3, #7
 800c3c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b087      	sub	sp, #28
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	607a      	str	r2, [r7, #4]
 800c3f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	333c      	adds	r3, #60	; 0x3c
 800c402:	3304      	adds	r3, #4
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	4a26      	ldr	r2, [pc, #152]	; (800c4a4 <USB_EP0_OutStart+0xb8>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d90a      	bls.n	800c426 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c41c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c420:	d101      	bne.n	800c426 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c422:	2300      	movs	r3, #0
 800c424:	e037      	b.n	800c496 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c42c:	461a      	mov	r2, r3
 800c42e:	2300      	movs	r3, #0
 800c430:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	697a      	ldr	r2, [r7, #20]
 800c43c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c444:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c454:	f043 0318 	orr.w	r3, r3, #24
 800c458:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	697a      	ldr	r2, [r7, #20]
 800c464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c468:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c46c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c46e:	7afb      	ldrb	r3, [r7, #11]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d10f      	bne.n	800c494 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c47a:	461a      	mov	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	697a      	ldr	r2, [r7, #20]
 800c48a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c48e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c492:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	371c      	adds	r7, #28
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	4f54300a 	.word	0x4f54300a

0800c4a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	4a13      	ldr	r2, [pc, #76]	; (800c50c <USB_CoreReset+0x64>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d901      	bls.n	800c4c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	e01b      	b.n	800c4fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	daf2      	bge.n	800c4b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	f043 0201 	orr.w	r2, r3, #1
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	4a09      	ldr	r2, [pc, #36]	; (800c50c <USB_CoreReset+0x64>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d901      	bls.n	800c4f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e006      	b.n	800c4fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	f003 0301 	and.w	r3, r3, #1
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d0f0      	beq.n	800c4de <USB_CoreReset+0x36>

  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3714      	adds	r7, #20
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	00030d40 	.word	0x00030d40

0800c510 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	460b      	mov	r3, r1
 800c51a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c51c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c520:	f002 fca0 	bl	800ee64 <USBD_static_malloc>
 800c524:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d109      	bne.n	800c540 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	32b0      	adds	r2, #176	; 0xb0
 800c536:	2100      	movs	r1, #0
 800c538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c53c:	2302      	movs	r3, #2
 800c53e:	e0d4      	b.n	800c6ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c540:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c544:	2100      	movs	r1, #0
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f002 fd22 	bl	800ef90 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	32b0      	adds	r2, #176	; 0xb0
 800c556:	68f9      	ldr	r1, [r7, #12]
 800c558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	32b0      	adds	r2, #176	; 0xb0
 800c566:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	7c1b      	ldrb	r3, [r3, #16]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d138      	bne.n	800c5ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c578:	4b5e      	ldr	r3, [pc, #376]	; (800c6f4 <USBD_CDC_Init+0x1e4>)
 800c57a:	7819      	ldrb	r1, [r3, #0]
 800c57c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c580:	2202      	movs	r2, #2
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f002 fb4b 	bl	800ec1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c588:	4b5a      	ldr	r3, [pc, #360]	; (800c6f4 <USBD_CDC_Init+0x1e4>)
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	f003 020f 	and.w	r2, r3, #15
 800c590:	6879      	ldr	r1, [r7, #4]
 800c592:	4613      	mov	r3, r2
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	4413      	add	r3, r2
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	440b      	add	r3, r1
 800c59c:	3324      	adds	r3, #36	; 0x24
 800c59e:	2201      	movs	r2, #1
 800c5a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c5a2:	4b55      	ldr	r3, [pc, #340]	; (800c6f8 <USBD_CDC_Init+0x1e8>)
 800c5a4:	7819      	ldrb	r1, [r3, #0]
 800c5a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5aa:	2202      	movs	r2, #2
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f002 fb36 	bl	800ec1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c5b2:	4b51      	ldr	r3, [pc, #324]	; (800c6f8 <USBD_CDC_Init+0x1e8>)
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	f003 020f 	and.w	r2, r3, #15
 800c5ba:	6879      	ldr	r1, [r7, #4]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	440b      	add	r3, r1
 800c5c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c5ce:	4b4b      	ldr	r3, [pc, #300]	; (800c6fc <USBD_CDC_Init+0x1ec>)
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	f003 020f 	and.w	r2, r3, #15
 800c5d6:	6879      	ldr	r1, [r7, #4]
 800c5d8:	4613      	mov	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	4413      	add	r3, r2
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	440b      	add	r3, r1
 800c5e2:	3326      	adds	r3, #38	; 0x26
 800c5e4:	2210      	movs	r2, #16
 800c5e6:	801a      	strh	r2, [r3, #0]
 800c5e8:	e035      	b.n	800c656 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c5ea:	4b42      	ldr	r3, [pc, #264]	; (800c6f4 <USBD_CDC_Init+0x1e4>)
 800c5ec:	7819      	ldrb	r1, [r3, #0]
 800c5ee:	2340      	movs	r3, #64	; 0x40
 800c5f0:	2202      	movs	r2, #2
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f002 fb13 	bl	800ec1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c5f8:	4b3e      	ldr	r3, [pc, #248]	; (800c6f4 <USBD_CDC_Init+0x1e4>)
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	f003 020f 	and.w	r2, r3, #15
 800c600:	6879      	ldr	r1, [r7, #4]
 800c602:	4613      	mov	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4413      	add	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	440b      	add	r3, r1
 800c60c:	3324      	adds	r3, #36	; 0x24
 800c60e:	2201      	movs	r2, #1
 800c610:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c612:	4b39      	ldr	r3, [pc, #228]	; (800c6f8 <USBD_CDC_Init+0x1e8>)
 800c614:	7819      	ldrb	r1, [r3, #0]
 800c616:	2340      	movs	r3, #64	; 0x40
 800c618:	2202      	movs	r2, #2
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f002 faff 	bl	800ec1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c620:	4b35      	ldr	r3, [pc, #212]	; (800c6f8 <USBD_CDC_Init+0x1e8>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	f003 020f 	and.w	r2, r3, #15
 800c628:	6879      	ldr	r1, [r7, #4]
 800c62a:	4613      	mov	r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4413      	add	r3, r2
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	440b      	add	r3, r1
 800c634:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c638:	2201      	movs	r2, #1
 800c63a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c63c:	4b2f      	ldr	r3, [pc, #188]	; (800c6fc <USBD_CDC_Init+0x1ec>)
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	f003 020f 	and.w	r2, r3, #15
 800c644:	6879      	ldr	r1, [r7, #4]
 800c646:	4613      	mov	r3, r2
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	4413      	add	r3, r2
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	440b      	add	r3, r1
 800c650:	3326      	adds	r3, #38	; 0x26
 800c652:	2210      	movs	r2, #16
 800c654:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c656:	4b29      	ldr	r3, [pc, #164]	; (800c6fc <USBD_CDC_Init+0x1ec>)
 800c658:	7819      	ldrb	r1, [r3, #0]
 800c65a:	2308      	movs	r3, #8
 800c65c:	2203      	movs	r2, #3
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f002 fadd 	bl	800ec1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c664:	4b25      	ldr	r3, [pc, #148]	; (800c6fc <USBD_CDC_Init+0x1ec>)
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	f003 020f 	and.w	r2, r3, #15
 800c66c:	6879      	ldr	r1, [r7, #4]
 800c66e:	4613      	mov	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	440b      	add	r3, r1
 800c678:	3324      	adds	r3, #36	; 0x24
 800c67a:	2201      	movs	r2, #1
 800c67c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2200      	movs	r2, #0
 800c682:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	33b0      	adds	r3, #176	; 0xb0
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d101      	bne.n	800c6b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c6b4:	2302      	movs	r3, #2
 800c6b6:	e018      	b.n	800c6ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	7c1b      	ldrb	r3, [r3, #16]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d10a      	bne.n	800c6d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6c0:	4b0d      	ldr	r3, [pc, #52]	; (800c6f8 <USBD_CDC_Init+0x1e8>)
 800c6c2:	7819      	ldrb	r1, [r3, #0]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f002 fb94 	bl	800edfc <USBD_LL_PrepareReceive>
 800c6d4:	e008      	b.n	800c6e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6d6:	4b08      	ldr	r3, [pc, #32]	; (800c6f8 <USBD_CDC_Init+0x1e8>)
 800c6d8:	7819      	ldrb	r1, [r3, #0]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6e0:	2340      	movs	r3, #64	; 0x40
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f002 fb8a 	bl	800edfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	200000a7 	.word	0x200000a7
 800c6f8:	200000a8 	.word	0x200000a8
 800c6fc:	200000a9 	.word	0x200000a9

0800c700 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	460b      	mov	r3, r1
 800c70a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c70c:	4b3a      	ldr	r3, [pc, #232]	; (800c7f8 <USBD_CDC_DeInit+0xf8>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	4619      	mov	r1, r3
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f002 faa9 	bl	800ec6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c718:	4b37      	ldr	r3, [pc, #220]	; (800c7f8 <USBD_CDC_DeInit+0xf8>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	f003 020f 	and.w	r2, r3, #15
 800c720:	6879      	ldr	r1, [r7, #4]
 800c722:	4613      	mov	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4413      	add	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	440b      	add	r3, r1
 800c72c:	3324      	adds	r3, #36	; 0x24
 800c72e:	2200      	movs	r2, #0
 800c730:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c732:	4b32      	ldr	r3, [pc, #200]	; (800c7fc <USBD_CDC_DeInit+0xfc>)
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	4619      	mov	r1, r3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f002 fa96 	bl	800ec6a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c73e:	4b2f      	ldr	r3, [pc, #188]	; (800c7fc <USBD_CDC_DeInit+0xfc>)
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	f003 020f 	and.w	r2, r3, #15
 800c746:	6879      	ldr	r1, [r7, #4]
 800c748:	4613      	mov	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4413      	add	r3, r2
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	440b      	add	r3, r1
 800c752:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c756:	2200      	movs	r2, #0
 800c758:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c75a:	4b29      	ldr	r3, [pc, #164]	; (800c800 <USBD_CDC_DeInit+0x100>)
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	4619      	mov	r1, r3
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f002 fa82 	bl	800ec6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c766:	4b26      	ldr	r3, [pc, #152]	; (800c800 <USBD_CDC_DeInit+0x100>)
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	f003 020f 	and.w	r2, r3, #15
 800c76e:	6879      	ldr	r1, [r7, #4]
 800c770:	4613      	mov	r3, r2
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	4413      	add	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	440b      	add	r3, r1
 800c77a:	3324      	adds	r3, #36	; 0x24
 800c77c:	2200      	movs	r2, #0
 800c77e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c780:	4b1f      	ldr	r3, [pc, #124]	; (800c800 <USBD_CDC_DeInit+0x100>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	f003 020f 	and.w	r2, r3, #15
 800c788:	6879      	ldr	r1, [r7, #4]
 800c78a:	4613      	mov	r3, r2
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	4413      	add	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	440b      	add	r3, r1
 800c794:	3326      	adds	r3, #38	; 0x26
 800c796:	2200      	movs	r2, #0
 800c798:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	32b0      	adds	r2, #176	; 0xb0
 800c7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d01f      	beq.n	800c7ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	33b0      	adds	r3, #176	; 0xb0
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	4413      	add	r3, r2
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	32b0      	adds	r2, #176	; 0xb0
 800c7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f002 fb56 	bl	800ee80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	32b0      	adds	r2, #176	; 0xb0
 800c7de:	2100      	movs	r1, #0
 800c7e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	200000a7 	.word	0x200000a7
 800c7fc:	200000a8 	.word	0x200000a8
 800c800:	200000a9 	.word	0x200000a9

0800c804 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b086      	sub	sp, #24
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	32b0      	adds	r2, #176	; 0xb0
 800c818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c81c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c81e:	2300      	movs	r3, #0
 800c820:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c822:	2300      	movs	r3, #0
 800c824:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c826:	2300      	movs	r3, #0
 800c828:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c830:	2303      	movs	r3, #3
 800c832:	e0bf      	b.n	800c9b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d050      	beq.n	800c8e2 <USBD_CDC_Setup+0xde>
 800c840:	2b20      	cmp	r3, #32
 800c842:	f040 80af 	bne.w	800c9a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	88db      	ldrh	r3, [r3, #6]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d03a      	beq.n	800c8c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	b25b      	sxtb	r3, r3
 800c854:	2b00      	cmp	r3, #0
 800c856:	da1b      	bge.n	800c890 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	33b0      	adds	r3, #176	; 0xb0
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	4413      	add	r3, r2
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c86e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c870:	683a      	ldr	r2, [r7, #0]
 800c872:	88d2      	ldrh	r2, [r2, #6]
 800c874:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	88db      	ldrh	r3, [r3, #6]
 800c87a:	2b07      	cmp	r3, #7
 800c87c:	bf28      	it	cs
 800c87e:	2307      	movcs	r3, #7
 800c880:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	89fa      	ldrh	r2, [r7, #14]
 800c886:	4619      	mov	r1, r3
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f001 fd89 	bl	800e3a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c88e:	e090      	b.n	800c9b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	785a      	ldrb	r2, [r3, #1]
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	88db      	ldrh	r3, [r3, #6]
 800c89e:	2b3f      	cmp	r3, #63	; 0x3f
 800c8a0:	d803      	bhi.n	800c8aa <USBD_CDC_Setup+0xa6>
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	88db      	ldrh	r3, [r3, #6]
 800c8a6:	b2da      	uxtb	r2, r3
 800c8a8:	e000      	b.n	800c8ac <USBD_CDC_Setup+0xa8>
 800c8aa:	2240      	movs	r2, #64	; 0x40
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c8b2:	6939      	ldr	r1, [r7, #16]
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f001 fd9b 	bl	800e3f8 <USBD_CtlPrepareRx>
      break;
 800c8c2:	e076      	b.n	800c9b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	33b0      	adds	r3, #176	; 0xb0
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4413      	add	r3, r2
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	683a      	ldr	r2, [r7, #0]
 800c8d8:	7850      	ldrb	r0, [r2, #1]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	6839      	ldr	r1, [r7, #0]
 800c8de:	4798      	blx	r3
      break;
 800c8e0:	e067      	b.n	800c9b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	785b      	ldrb	r3, [r3, #1]
 800c8e6:	2b0b      	cmp	r3, #11
 800c8e8:	d851      	bhi.n	800c98e <USBD_CDC_Setup+0x18a>
 800c8ea:	a201      	add	r2, pc, #4	; (adr r2, 800c8f0 <USBD_CDC_Setup+0xec>)
 800c8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f0:	0800c921 	.word	0x0800c921
 800c8f4:	0800c99d 	.word	0x0800c99d
 800c8f8:	0800c98f 	.word	0x0800c98f
 800c8fc:	0800c98f 	.word	0x0800c98f
 800c900:	0800c98f 	.word	0x0800c98f
 800c904:	0800c98f 	.word	0x0800c98f
 800c908:	0800c98f 	.word	0x0800c98f
 800c90c:	0800c98f 	.word	0x0800c98f
 800c910:	0800c98f 	.word	0x0800c98f
 800c914:	0800c98f 	.word	0x0800c98f
 800c918:	0800c94b 	.word	0x0800c94b
 800c91c:	0800c975 	.word	0x0800c975
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c926:	b2db      	uxtb	r3, r3
 800c928:	2b03      	cmp	r3, #3
 800c92a:	d107      	bne.n	800c93c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c92c:	f107 030a 	add.w	r3, r7, #10
 800c930:	2202      	movs	r2, #2
 800c932:	4619      	mov	r1, r3
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f001 fd33 	bl	800e3a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c93a:	e032      	b.n	800c9a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c93c:	6839      	ldr	r1, [r7, #0]
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f001 fcbd 	bl	800e2be <USBD_CtlError>
            ret = USBD_FAIL;
 800c944:	2303      	movs	r3, #3
 800c946:	75fb      	strb	r3, [r7, #23]
          break;
 800c948:	e02b      	b.n	800c9a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b03      	cmp	r3, #3
 800c954:	d107      	bne.n	800c966 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c956:	f107 030d 	add.w	r3, r7, #13
 800c95a:	2201      	movs	r2, #1
 800c95c:	4619      	mov	r1, r3
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f001 fd1e 	bl	800e3a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c964:	e01d      	b.n	800c9a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f001 fca8 	bl	800e2be <USBD_CtlError>
            ret = USBD_FAIL;
 800c96e:	2303      	movs	r3, #3
 800c970:	75fb      	strb	r3, [r7, #23]
          break;
 800c972:	e016      	b.n	800c9a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b03      	cmp	r3, #3
 800c97e:	d00f      	beq.n	800c9a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f001 fc9b 	bl	800e2be <USBD_CtlError>
            ret = USBD_FAIL;
 800c988:	2303      	movs	r3, #3
 800c98a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c98c:	e008      	b.n	800c9a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c98e:	6839      	ldr	r1, [r7, #0]
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f001 fc94 	bl	800e2be <USBD_CtlError>
          ret = USBD_FAIL;
 800c996:	2303      	movs	r3, #3
 800c998:	75fb      	strb	r3, [r7, #23]
          break;
 800c99a:	e002      	b.n	800c9a2 <USBD_CDC_Setup+0x19e>
          break;
 800c99c:	bf00      	nop
 800c99e:	e008      	b.n	800c9b2 <USBD_CDC_Setup+0x1ae>
          break;
 800c9a0:	bf00      	nop
      }
      break;
 800c9a2:	e006      	b.n	800c9b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c9a4:	6839      	ldr	r1, [r7, #0]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f001 fc89 	bl	800e2be <USBD_CtlError>
      ret = USBD_FAIL;
 800c9ac:	2303      	movs	r3, #3
 800c9ae:	75fb      	strb	r3, [r7, #23]
      break;
 800c9b0:	bf00      	nop
  }

  return (uint8_t)ret;
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c9ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	32b0      	adds	r2, #176	; 0xb0
 800c9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c9e2:	2303      	movs	r3, #3
 800c9e4:	e065      	b.n	800cab2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	32b0      	adds	r2, #176	; 0xb0
 800c9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c9f6:	78fb      	ldrb	r3, [r7, #3]
 800c9f8:	f003 020f 	and.w	r2, r3, #15
 800c9fc:	6879      	ldr	r1, [r7, #4]
 800c9fe:	4613      	mov	r3, r2
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	4413      	add	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	440b      	add	r3, r1
 800ca08:	3318      	adds	r3, #24
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d02f      	beq.n	800ca70 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ca10:	78fb      	ldrb	r3, [r7, #3]
 800ca12:	f003 020f 	and.w	r2, r3, #15
 800ca16:	6879      	ldr	r1, [r7, #4]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	4413      	add	r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	440b      	add	r3, r1
 800ca22:	3318      	adds	r3, #24
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	78fb      	ldrb	r3, [r7, #3]
 800ca28:	f003 010f 	and.w	r1, r3, #15
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	460b      	mov	r3, r1
 800ca30:	00db      	lsls	r3, r3, #3
 800ca32:	440b      	add	r3, r1
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4403      	add	r3, r0
 800ca38:	3348      	adds	r3, #72	; 0x48
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ca40:	fb01 f303 	mul.w	r3, r1, r3
 800ca44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d112      	bne.n	800ca70 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ca4a:	78fb      	ldrb	r3, [r7, #3]
 800ca4c:	f003 020f 	and.w	r2, r3, #15
 800ca50:	6879      	ldr	r1, [r7, #4]
 800ca52:	4613      	mov	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	4413      	add	r3, r2
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	440b      	add	r3, r1
 800ca5c:	3318      	adds	r3, #24
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ca62:	78f9      	ldrb	r1, [r7, #3]
 800ca64:	2300      	movs	r3, #0
 800ca66:	2200      	movs	r2, #0
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f002 f9a6 	bl	800edba <USBD_LL_Transmit>
 800ca6e:	e01f      	b.n	800cab0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	33b0      	adds	r3, #176	; 0xb0
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4413      	add	r3, r2
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d010      	beq.n	800cab0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	33b0      	adds	r3, #176	; 0xb0
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	4413      	add	r3, r2
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	691b      	ldr	r3, [r3, #16]
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800caa6:	68ba      	ldr	r2, [r7, #8]
 800caa8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800caac:	78fa      	ldrb	r2, [r7, #3]
 800caae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	460b      	mov	r3, r1
 800cac4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	32b0      	adds	r2, #176	; 0xb0
 800cad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cad4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	32b0      	adds	r2, #176	; 0xb0
 800cae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d101      	bne.n	800caec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cae8:	2303      	movs	r3, #3
 800caea:	e01a      	b.n	800cb22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800caec:	78fb      	ldrb	r3, [r7, #3]
 800caee:	4619      	mov	r1, r3
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f002 f9a4 	bl	800ee3e <USBD_LL_GetRxDataSize>
 800caf6:	4602      	mov	r2, r0
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	33b0      	adds	r3, #176	; 0xb0
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	4413      	add	r3, r2
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cb1c:	4611      	mov	r1, r2
 800cb1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b084      	sub	sp, #16
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	32b0      	adds	r2, #176	; 0xb0
 800cb3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d101      	bne.n	800cb4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb48:	2303      	movs	r3, #3
 800cb4a:	e025      	b.n	800cb98 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	33b0      	adds	r3, #176	; 0xb0
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4413      	add	r3, r2
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d01a      	beq.n	800cb96 <USBD_CDC_EP0_RxReady+0x6c>
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cb66:	2bff      	cmp	r3, #255	; 0xff
 800cb68:	d015      	beq.n	800cb96 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	33b0      	adds	r3, #176	; 0xb0
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	68fa      	ldr	r2, [r7, #12]
 800cb7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cb82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cb8a:	b292      	uxth	r2, r2
 800cb8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	22ff      	movs	r2, #255	; 0xff
 800cb92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cb96:	2300      	movs	r3, #0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b086      	sub	sp, #24
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cba8:	2182      	movs	r1, #130	; 0x82
 800cbaa:	4818      	ldr	r0, [pc, #96]	; (800cc0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cbac:	f000 fd4f 	bl	800d64e <USBD_GetEpDesc>
 800cbb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cbb2:	2101      	movs	r1, #1
 800cbb4:	4815      	ldr	r0, [pc, #84]	; (800cc0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cbb6:	f000 fd4a 	bl	800d64e <USBD_GetEpDesc>
 800cbba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cbbc:	2181      	movs	r1, #129	; 0x81
 800cbbe:	4813      	ldr	r0, [pc, #76]	; (800cc0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cbc0:	f000 fd45 	bl	800d64e <USBD_GetEpDesc>
 800cbc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	2210      	movs	r2, #16
 800cbd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d006      	beq.n	800cbe6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbe0:	711a      	strb	r2, [r3, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d006      	beq.n	800cbfa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbf4:	711a      	strb	r2, [r3, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2243      	movs	r2, #67	; 0x43
 800cbfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cc00:	4b02      	ldr	r3, [pc, #8]	; (800cc0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3718      	adds	r7, #24
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20000064 	.word	0x20000064

0800cc10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cc18:	2182      	movs	r1, #130	; 0x82
 800cc1a:	4818      	ldr	r0, [pc, #96]	; (800cc7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cc1c:	f000 fd17 	bl	800d64e <USBD_GetEpDesc>
 800cc20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cc22:	2101      	movs	r1, #1
 800cc24:	4815      	ldr	r0, [pc, #84]	; (800cc7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cc26:	f000 fd12 	bl	800d64e <USBD_GetEpDesc>
 800cc2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cc2c:	2181      	movs	r1, #129	; 0x81
 800cc2e:	4813      	ldr	r0, [pc, #76]	; (800cc7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cc30:	f000 fd0d 	bl	800d64e <USBD_GetEpDesc>
 800cc34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	2210      	movs	r2, #16
 800cc40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d006      	beq.n	800cc56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	711a      	strb	r2, [r3, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f042 0202 	orr.w	r2, r2, #2
 800cc54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d006      	beq.n	800cc6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	711a      	strb	r2, [r3, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f042 0202 	orr.w	r2, r2, #2
 800cc68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2243      	movs	r2, #67	; 0x43
 800cc6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cc70:	4b02      	ldr	r3, [pc, #8]	; (800cc7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3718      	adds	r7, #24
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	20000064 	.word	0x20000064

0800cc80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b086      	sub	sp, #24
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cc88:	2182      	movs	r1, #130	; 0x82
 800cc8a:	4818      	ldr	r0, [pc, #96]	; (800ccec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cc8c:	f000 fcdf 	bl	800d64e <USBD_GetEpDesc>
 800cc90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cc92:	2101      	movs	r1, #1
 800cc94:	4815      	ldr	r0, [pc, #84]	; (800ccec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cc96:	f000 fcda 	bl	800d64e <USBD_GetEpDesc>
 800cc9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cc9c:	2181      	movs	r1, #129	; 0x81
 800cc9e:	4813      	ldr	r0, [pc, #76]	; (800ccec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cca0:	f000 fcd5 	bl	800d64e <USBD_GetEpDesc>
 800cca4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d002      	beq.n	800ccb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	2210      	movs	r2, #16
 800ccb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d006      	beq.n	800ccc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccc0:	711a      	strb	r2, [r3, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d006      	beq.n	800ccda <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccd4:	711a      	strb	r2, [r3, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2243      	movs	r2, #67	; 0x43
 800ccde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cce0:	4b02      	ldr	r3, [pc, #8]	; (800ccec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3718      	adds	r7, #24
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	20000064 	.word	0x20000064

0800ccf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	220a      	movs	r2, #10
 800ccfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ccfe:	4b03      	ldr	r3, [pc, #12]	; (800cd0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	20000020 	.word	0x20000020

0800cd10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d101      	bne.n	800cd24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cd20:	2303      	movs	r3, #3
 800cd22:	e009      	b.n	800cd38 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	33b0      	adds	r3, #176	; 0xb0
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4413      	add	r3, r2
 800cd32:	683a      	ldr	r2, [r7, #0]
 800cd34:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b087      	sub	sp, #28
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	32b0      	adds	r2, #176	; 0xb0
 800cd5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd5e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cd66:	2303      	movs	r3, #3
 800cd68:	e008      	b.n	800cd7c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	68ba      	ldr	r2, [r7, #8]
 800cd6e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	371c      	adds	r7, #28
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	32b0      	adds	r2, #176	; 0xb0
 800cd9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cda0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d101      	bne.n	800cdac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e004      	b.n	800cdb6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	683a      	ldr	r2, [r7, #0]
 800cdb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3714      	adds	r7, #20
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
	...

0800cdc4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	32b0      	adds	r2, #176	; 0xb0
 800cdd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdda:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cddc:	2301      	movs	r3, #1
 800cdde:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	32b0      	adds	r2, #176	; 0xb0
 800cdea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d101      	bne.n	800cdf6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cdf2:	2303      	movs	r3, #3
 800cdf4:	e025      	b.n	800ce42 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d11f      	bne.n	800ce40 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ce08:	4b10      	ldr	r3, [pc, #64]	; (800ce4c <USBD_CDC_TransmitPacket+0x88>)
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	f003 020f 	and.w	r2, r3, #15
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	4413      	add	r3, r2
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	4403      	add	r3, r0
 800ce22:	3318      	adds	r3, #24
 800ce24:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ce26:	4b09      	ldr	r3, [pc, #36]	; (800ce4c <USBD_CDC_TransmitPacket+0x88>)
 800ce28:	7819      	ldrb	r1, [r3, #0]
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f001 ffbf 	bl	800edba <USBD_LL_Transmit>

    ret = USBD_OK;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ce40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	200000a7 	.word	0x200000a7

0800ce50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	32b0      	adds	r2, #176	; 0xb0
 800ce62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce66:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	32b0      	adds	r2, #176	; 0xb0
 800ce72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d101      	bne.n	800ce7e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	e018      	b.n	800ceb0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	7c1b      	ldrb	r3, [r3, #16]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d10a      	bne.n	800ce9c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce86:	4b0c      	ldr	r3, [pc, #48]	; (800ceb8 <USBD_CDC_ReceivePacket+0x68>)
 800ce88:	7819      	ldrb	r1, [r3, #0]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f001 ffb1 	bl	800edfc <USBD_LL_PrepareReceive>
 800ce9a:	e008      	b.n	800ceae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce9c:	4b06      	ldr	r3, [pc, #24]	; (800ceb8 <USBD_CDC_ReceivePacket+0x68>)
 800ce9e:	7819      	ldrb	r1, [r3, #0]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cea6:	2340      	movs	r3, #64	; 0x40
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f001 ffa7 	bl	800edfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ceae:	2300      	movs	r3, #0
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	200000a8 	.word	0x200000a8

0800cebc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	4613      	mov	r3, r2
 800cec8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ced0:	2303      	movs	r3, #3
 800ced2:	e01f      	b.n	800cf14 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2200      	movs	r2, #0
 800ced8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d003      	beq.n	800cefa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2201      	movs	r2, #1
 800cefe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	79fa      	ldrb	r2, [r7, #7]
 800cf06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cf08:	68f8      	ldr	r0, [r7, #12]
 800cf0a:	f001 fe21 	bl	800eb50 <USBD_LL_Init>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cf12:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3718      	adds	r7, #24
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf26:	2300      	movs	r3, #0
 800cf28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cf30:	2303      	movs	r3, #3
 800cf32:	e025      	b.n	800cf80 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	683a      	ldr	r2, [r7, #0]
 800cf38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	32ae      	adds	r2, #174	; 0xae
 800cf46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00f      	beq.n	800cf70 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	32ae      	adds	r2, #174	; 0xae
 800cf5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf60:	f107 020e 	add.w	r2, r7, #14
 800cf64:	4610      	mov	r0, r2
 800cf66:	4798      	blx	r3
 800cf68:	4602      	mov	r2, r0
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cf76:	1c5a      	adds	r2, r3, #1
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f001 fe29 	bl	800ebe8 <USBD_LL_Start>
 800cf96:	4603      	mov	r3, r0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cfa8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	370c      	adds	r7, #12
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr

0800cfb6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b084      	sub	sp, #16
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d009      	beq.n	800cfe4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	78fa      	ldrb	r2, [r7, #3]
 800cfda:	4611      	mov	r1, r2
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	4798      	blx	r3
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cfe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b084      	sub	sp, #16
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
 800cff6:	460b      	mov	r3, r1
 800cff8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cffa:	2300      	movs	r3, #0
 800cffc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	78fa      	ldrb	r2, [r7, #3]
 800d008:	4611      	mov	r1, r2
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	4798      	blx	r3
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d014:	2303      	movs	r3, #3
 800d016:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d018:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d022:	b580      	push	{r7, lr}
 800d024:	b084      	sub	sp, #16
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
 800d02a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	4618      	mov	r0, r3
 800d036:	f001 f908 	bl	800e24a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d048:	461a      	mov	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d056:	f003 031f 	and.w	r3, r3, #31
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d01a      	beq.n	800d094 <USBD_LL_SetupStage+0x72>
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d822      	bhi.n	800d0a8 <USBD_LL_SetupStage+0x86>
 800d062:	2b00      	cmp	r3, #0
 800d064:	d002      	beq.n	800d06c <USBD_LL_SetupStage+0x4a>
 800d066:	2b01      	cmp	r3, #1
 800d068:	d00a      	beq.n	800d080 <USBD_LL_SetupStage+0x5e>
 800d06a:	e01d      	b.n	800d0a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d072:	4619      	mov	r1, r3
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 fb5f 	bl	800d738 <USBD_StdDevReq>
 800d07a:	4603      	mov	r3, r0
 800d07c:	73fb      	strb	r3, [r7, #15]
      break;
 800d07e:	e020      	b.n	800d0c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d086:	4619      	mov	r1, r3
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 fbc7 	bl	800d81c <USBD_StdItfReq>
 800d08e:	4603      	mov	r3, r0
 800d090:	73fb      	strb	r3, [r7, #15]
      break;
 800d092:	e016      	b.n	800d0c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d09a:	4619      	mov	r1, r3
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 fc29 	bl	800d8f4 <USBD_StdEPReq>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	73fb      	strb	r3, [r7, #15]
      break;
 800d0a6:	e00c      	b.n	800d0c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d0ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f001 fdf6 	bl	800eca8 <USBD_LL_StallEP>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	73fb      	strb	r3, [r7, #15]
      break;
 800d0c0:	bf00      	nop
  }

  return ret;
 800d0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b086      	sub	sp, #24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	607a      	str	r2, [r7, #4]
 800d0d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d0de:	7afb      	ldrb	r3, [r7, #11]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d16e      	bne.n	800d1c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d0ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0f2:	2b03      	cmp	r3, #3
 800d0f4:	f040 8098 	bne.w	800d228 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	689a      	ldr	r2, [r3, #8]
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	429a      	cmp	r2, r3
 800d102:	d913      	bls.n	800d12c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	689a      	ldr	r2, [r3, #8]
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	1ad2      	subs	r2, r2, r3
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	68da      	ldr	r2, [r3, #12]
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	4293      	cmp	r3, r2
 800d11c:	bf28      	it	cs
 800d11e:	4613      	movcs	r3, r2
 800d120:	461a      	mov	r2, r3
 800d122:	6879      	ldr	r1, [r7, #4]
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	f001 f984 	bl	800e432 <USBD_CtlContinueRx>
 800d12a:	e07d      	b.n	800d228 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d132:	f003 031f 	and.w	r3, r3, #31
 800d136:	2b02      	cmp	r3, #2
 800d138:	d014      	beq.n	800d164 <USBD_LL_DataOutStage+0x98>
 800d13a:	2b02      	cmp	r3, #2
 800d13c:	d81d      	bhi.n	800d17a <USBD_LL_DataOutStage+0xae>
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d002      	beq.n	800d148 <USBD_LL_DataOutStage+0x7c>
 800d142:	2b01      	cmp	r3, #1
 800d144:	d003      	beq.n	800d14e <USBD_LL_DataOutStage+0x82>
 800d146:	e018      	b.n	800d17a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d148:	2300      	movs	r3, #0
 800d14a:	75bb      	strb	r3, [r7, #22]
            break;
 800d14c:	e018      	b.n	800d180 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d154:	b2db      	uxtb	r3, r3
 800d156:	4619      	mov	r1, r3
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f000 fa5e 	bl	800d61a <USBD_CoreFindIF>
 800d15e:	4603      	mov	r3, r0
 800d160:	75bb      	strb	r3, [r7, #22]
            break;
 800d162:	e00d      	b.n	800d180 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	4619      	mov	r1, r3
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f000 fa60 	bl	800d634 <USBD_CoreFindEP>
 800d174:	4603      	mov	r3, r0
 800d176:	75bb      	strb	r3, [r7, #22]
            break;
 800d178:	e002      	b.n	800d180 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d17a:	2300      	movs	r3, #0
 800d17c:	75bb      	strb	r3, [r7, #22]
            break;
 800d17e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d180:	7dbb      	ldrb	r3, [r7, #22]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d119      	bne.n	800d1ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	2b03      	cmp	r3, #3
 800d190:	d113      	bne.n	800d1ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d192:	7dba      	ldrb	r2, [r7, #22]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	32ae      	adds	r2, #174	; 0xae
 800d198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d00b      	beq.n	800d1ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d1a2:	7dba      	ldrb	r2, [r7, #22]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d1aa:	7dba      	ldrb	r2, [r7, #22]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	32ae      	adds	r2, #174	; 0xae
 800d1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f001 f94a 	bl	800e454 <USBD_CtlSendStatus>
 800d1c0:	e032      	b.n	800d228 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d1c2:	7afb      	ldrb	r3, [r7, #11]
 800d1c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f000 fa31 	bl	800d634 <USBD_CoreFindEP>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1d6:	7dbb      	ldrb	r3, [r7, #22]
 800d1d8:	2bff      	cmp	r3, #255	; 0xff
 800d1da:	d025      	beq.n	800d228 <USBD_LL_DataOutStage+0x15c>
 800d1dc:	7dbb      	ldrb	r3, [r7, #22]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d122      	bne.n	800d228 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	2b03      	cmp	r3, #3
 800d1ec:	d117      	bne.n	800d21e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d1ee:	7dba      	ldrb	r2, [r7, #22]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	32ae      	adds	r2, #174	; 0xae
 800d1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f8:	699b      	ldr	r3, [r3, #24]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00f      	beq.n	800d21e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d1fe:	7dba      	ldrb	r2, [r7, #22]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d206:	7dba      	ldrb	r2, [r7, #22]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	32ae      	adds	r2, #174	; 0xae
 800d20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d210:	699b      	ldr	r3, [r3, #24]
 800d212:	7afa      	ldrb	r2, [r7, #11]
 800d214:	4611      	mov	r1, r2
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	4798      	blx	r3
 800d21a:	4603      	mov	r3, r0
 800d21c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d21e:	7dfb      	ldrb	r3, [r7, #23]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d001      	beq.n	800d228 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d224:	7dfb      	ldrb	r3, [r7, #23]
 800d226:	e000      	b.n	800d22a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3718      	adds	r7, #24
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b086      	sub	sp, #24
 800d236:	af00      	add	r7, sp, #0
 800d238:	60f8      	str	r0, [r7, #12]
 800d23a:	460b      	mov	r3, r1
 800d23c:	607a      	str	r2, [r7, #4]
 800d23e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d240:	7afb      	ldrb	r3, [r7, #11]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d16f      	bne.n	800d326 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	3314      	adds	r3, #20
 800d24a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d252:	2b02      	cmp	r3, #2
 800d254:	d15a      	bne.n	800d30c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	689a      	ldr	r2, [r3, #8]
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d914      	bls.n	800d28c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	689a      	ldr	r2, [r3, #8]
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	1ad2      	subs	r2, r2, r3
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	461a      	mov	r2, r3
 800d276:	6879      	ldr	r1, [r7, #4]
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f001 f8ac 	bl	800e3d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d27e:	2300      	movs	r3, #0
 800d280:	2200      	movs	r2, #0
 800d282:	2100      	movs	r1, #0
 800d284:	68f8      	ldr	r0, [r7, #12]
 800d286:	f001 fdb9 	bl	800edfc <USBD_LL_PrepareReceive>
 800d28a:	e03f      	b.n	800d30c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	68da      	ldr	r2, [r3, #12]
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	429a      	cmp	r2, r3
 800d296:	d11c      	bne.n	800d2d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	685a      	ldr	r2, [r3, #4]
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d316      	bcc.n	800d2d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	685a      	ldr	r2, [r3, #4]
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d20f      	bcs.n	800d2d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f001 f88d 	bl	800e3d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f001 fd96 	bl	800edfc <USBD_LL_PrepareReceive>
 800d2d0:	e01c      	b.n	800d30c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d10f      	bne.n	800d2fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d009      	beq.n	800d2fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2fe:	2180      	movs	r1, #128	; 0x80
 800d300:	68f8      	ldr	r0, [r7, #12]
 800d302:	f001 fcd1 	bl	800eca8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f001 f8b7 	bl	800e47a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d03a      	beq.n	800d38c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d316:	68f8      	ldr	r0, [r7, #12]
 800d318:	f7ff fe42 	bl	800cfa0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2200      	movs	r2, #0
 800d320:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d324:	e032      	b.n	800d38c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d326:	7afb      	ldrb	r3, [r7, #11]
 800d328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	4619      	mov	r1, r3
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f000 f97f 	bl	800d634 <USBD_CoreFindEP>
 800d336:	4603      	mov	r3, r0
 800d338:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d33a:	7dfb      	ldrb	r3, [r7, #23]
 800d33c:	2bff      	cmp	r3, #255	; 0xff
 800d33e:	d025      	beq.n	800d38c <USBD_LL_DataInStage+0x15a>
 800d340:	7dfb      	ldrb	r3, [r7, #23]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d122      	bne.n	800d38c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	2b03      	cmp	r3, #3
 800d350:	d11c      	bne.n	800d38c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d352:	7dfa      	ldrb	r2, [r7, #23]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	32ae      	adds	r2, #174	; 0xae
 800d358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d35c:	695b      	ldr	r3, [r3, #20]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d014      	beq.n	800d38c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d362:	7dfa      	ldrb	r2, [r7, #23]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d36a:	7dfa      	ldrb	r2, [r7, #23]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	32ae      	adds	r2, #174	; 0xae
 800d370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d374:	695b      	ldr	r3, [r3, #20]
 800d376:	7afa      	ldrb	r2, [r7, #11]
 800d378:	4611      	mov	r1, r2
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	4798      	blx	r3
 800d37e:	4603      	mov	r3, r0
 800d380:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d382:	7dbb      	ldrb	r3, [r7, #22]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d001      	beq.n	800d38c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d388:	7dbb      	ldrb	r3, [r7, #22]
 800d38a:	e000      	b.n	800d38e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d38c:	2300      	movs	r3, #0
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3718      	adds	r7, #24
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b084      	sub	sp, #16
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d014      	beq.n	800d3fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d00e      	beq.n	800d3fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	6852      	ldr	r2, [r2, #4]
 800d3ea:	b2d2      	uxtb	r2, r2
 800d3ec:	4611      	mov	r1, r2
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	4798      	blx	r3
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d001      	beq.n	800d3fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d3fc:	2340      	movs	r3, #64	; 0x40
 800d3fe:	2200      	movs	r2, #0
 800d400:	2100      	movs	r1, #0
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f001 fc0b 	bl	800ec1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2240      	movs	r2, #64	; 0x40
 800d414:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d418:	2340      	movs	r3, #64	; 0x40
 800d41a:	2200      	movs	r2, #0
 800d41c:	2180      	movs	r1, #128	; 0x80
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f001 fbfd 	bl	800ec1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2201      	movs	r2, #1
 800d428:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2240      	movs	r2, #64	; 0x40
 800d42e:	621a      	str	r2, [r3, #32]

  return ret;
 800d430:	7bfb      	ldrb	r3, [r7, #15]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d43a:	b480      	push	{r7}
 800d43c:	b083      	sub	sp, #12
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
 800d442:	460b      	mov	r3, r1
 800d444:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	78fa      	ldrb	r2, [r7, #3]
 800d44a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d44c:	2300      	movs	r3, #0
}
 800d44e:	4618      	mov	r0, r3
 800d450:	370c      	adds	r7, #12
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr

0800d45a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d45a:	b480      	push	{r7}
 800d45c:	b083      	sub	sp, #12
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d468:	b2da      	uxtb	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2204      	movs	r2, #4
 800d474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d478:	2300      	movs	r3, #0
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	370c      	adds	r7, #12
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d486:	b480      	push	{r7}
 800d488:	b083      	sub	sp, #12
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b04      	cmp	r3, #4
 800d498:	d106      	bne.n	800d4a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	370c      	adds	r7, #12
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr

0800d4b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b082      	sub	sp, #8
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	d110      	bne.n	800d4ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00b      	beq.n	800d4ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4da:	69db      	ldr	r3, [r3, #28]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d005      	beq.n	800d4ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4e6:	69db      	ldr	r3, [r3, #28]
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3708      	adds	r7, #8
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b082      	sub	sp, #8
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
 800d4fe:	460b      	mov	r3, r1
 800d500:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	32ae      	adds	r2, #174	; 0xae
 800d50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d101      	bne.n	800d518 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d514:	2303      	movs	r3, #3
 800d516:	e01c      	b.n	800d552 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	2b03      	cmp	r3, #3
 800d522:	d115      	bne.n	800d550 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	32ae      	adds	r2, #174	; 0xae
 800d52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d532:	6a1b      	ldr	r3, [r3, #32]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00b      	beq.n	800d550 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	32ae      	adds	r2, #174	; 0xae
 800d542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d546:	6a1b      	ldr	r3, [r3, #32]
 800d548:	78fa      	ldrb	r2, [r7, #3]
 800d54a:	4611      	mov	r1, r2
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b082      	sub	sp, #8
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
 800d562:	460b      	mov	r3, r1
 800d564:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	32ae      	adds	r2, #174	; 0xae
 800d570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d101      	bne.n	800d57c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d578:	2303      	movs	r3, #3
 800d57a:	e01c      	b.n	800d5b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d582:	b2db      	uxtb	r3, r3
 800d584:	2b03      	cmp	r3, #3
 800d586:	d115      	bne.n	800d5b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	32ae      	adds	r2, #174	; 0xae
 800d592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00b      	beq.n	800d5b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	32ae      	adds	r2, #174	; 0xae
 800d5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ac:	78fa      	ldrb	r2, [r7, #3]
 800d5ae:	4611      	mov	r1, r2
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d5be:	b480      	push	{r7}
 800d5c0:	b083      	sub	sp, #12
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	370c      	adds	r7, #12
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00e      	beq.n	800d610 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	6852      	ldr	r2, [r2, #4]
 800d5fe:	b2d2      	uxtb	r2, r2
 800d600:	4611      	mov	r1, r2
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	4798      	blx	r3
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d001      	beq.n	800d610 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d60c:	2303      	movs	r3, #3
 800d60e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d610:	7bfb      	ldrb	r3, [r7, #15]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d61a:	b480      	push	{r7}
 800d61c:	b083      	sub	sp, #12
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	460b      	mov	r3, r1
 800d624:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d626:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d628:	4618      	mov	r0, r3
 800d62a:	370c      	adds	r7, #12
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr

0800d634 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	460b      	mov	r3, r1
 800d63e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d640:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d642:	4618      	mov	r0, r3
 800d644:	370c      	adds	r7, #12
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr

0800d64e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b086      	sub	sp, #24
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	460b      	mov	r3, r1
 800d658:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d662:	2300      	movs	r3, #0
 800d664:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	885b      	ldrh	r3, [r3, #2]
 800d66a:	b29a      	uxth	r2, r3
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	b29b      	uxth	r3, r3
 800d672:	429a      	cmp	r2, r3
 800d674:	d920      	bls.n	800d6b8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d67e:	e013      	b.n	800d6a8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d680:	f107 030a 	add.w	r3, r7, #10
 800d684:	4619      	mov	r1, r3
 800d686:	6978      	ldr	r0, [r7, #20]
 800d688:	f000 f81b 	bl	800d6c2 <USBD_GetNextDesc>
 800d68c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	785b      	ldrb	r3, [r3, #1]
 800d692:	2b05      	cmp	r3, #5
 800d694:	d108      	bne.n	800d6a8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	789b      	ldrb	r3, [r3, #2]
 800d69e:	78fa      	ldrb	r2, [r7, #3]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d008      	beq.n	800d6b6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	885b      	ldrh	r3, [r3, #2]
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	897b      	ldrh	r3, [r7, #10]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d8e5      	bhi.n	800d680 <USBD_GetEpDesc+0x32>
 800d6b4:	e000      	b.n	800d6b8 <USBD_GetEpDesc+0x6a>
          break;
 800d6b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d6b8:	693b      	ldr	r3, [r7, #16]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3718      	adds	r7, #24
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d6c2:	b480      	push	{r7}
 800d6c4:	b085      	sub	sp, #20
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
 800d6ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	881a      	ldrh	r2, [r3, #0]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	4413      	add	r3, r2
 800d6dc:	b29a      	uxth	r2, r3
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3714      	adds	r7, #20
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr

0800d6fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b087      	sub	sp, #28
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	3301      	adds	r3, #1
 800d712:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d71a:	8a3b      	ldrh	r3, [r7, #16]
 800d71c:	021b      	lsls	r3, r3, #8
 800d71e:	b21a      	sxth	r2, r3
 800d720:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d724:	4313      	orrs	r3, r2
 800d726:	b21b      	sxth	r3, r3
 800d728:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d72a:	89fb      	ldrh	r3, [r7, #14]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	371c      	adds	r7, #28
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d742:	2300      	movs	r3, #0
 800d744:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d74e:	2b40      	cmp	r3, #64	; 0x40
 800d750:	d005      	beq.n	800d75e <USBD_StdDevReq+0x26>
 800d752:	2b40      	cmp	r3, #64	; 0x40
 800d754:	d857      	bhi.n	800d806 <USBD_StdDevReq+0xce>
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00f      	beq.n	800d77a <USBD_StdDevReq+0x42>
 800d75a:	2b20      	cmp	r3, #32
 800d75c:	d153      	bne.n	800d806 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	32ae      	adds	r2, #174	; 0xae
 800d768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	6839      	ldr	r1, [r7, #0]
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	4798      	blx	r3
 800d774:	4603      	mov	r3, r0
 800d776:	73fb      	strb	r3, [r7, #15]
      break;
 800d778:	e04a      	b.n	800d810 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	785b      	ldrb	r3, [r3, #1]
 800d77e:	2b09      	cmp	r3, #9
 800d780:	d83b      	bhi.n	800d7fa <USBD_StdDevReq+0xc2>
 800d782:	a201      	add	r2, pc, #4	; (adr r2, 800d788 <USBD_StdDevReq+0x50>)
 800d784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d788:	0800d7dd 	.word	0x0800d7dd
 800d78c:	0800d7f1 	.word	0x0800d7f1
 800d790:	0800d7fb 	.word	0x0800d7fb
 800d794:	0800d7e7 	.word	0x0800d7e7
 800d798:	0800d7fb 	.word	0x0800d7fb
 800d79c:	0800d7bb 	.word	0x0800d7bb
 800d7a0:	0800d7b1 	.word	0x0800d7b1
 800d7a4:	0800d7fb 	.word	0x0800d7fb
 800d7a8:	0800d7d3 	.word	0x0800d7d3
 800d7ac:	0800d7c5 	.word	0x0800d7c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d7b0:	6839      	ldr	r1, [r7, #0]
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fa3c 	bl	800dc30 <USBD_GetDescriptor>
          break;
 800d7b8:	e024      	b.n	800d804 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d7ba:	6839      	ldr	r1, [r7, #0]
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 fba1 	bl	800df04 <USBD_SetAddress>
          break;
 800d7c2:	e01f      	b.n	800d804 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d7c4:	6839      	ldr	r1, [r7, #0]
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 fbe0 	bl	800df8c <USBD_SetConfig>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	73fb      	strb	r3, [r7, #15]
          break;
 800d7d0:	e018      	b.n	800d804 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d7d2:	6839      	ldr	r1, [r7, #0]
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fc83 	bl	800e0e0 <USBD_GetConfig>
          break;
 800d7da:	e013      	b.n	800d804 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 fcb4 	bl	800e14c <USBD_GetStatus>
          break;
 800d7e4:	e00e      	b.n	800d804 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 fce3 	bl	800e1b4 <USBD_SetFeature>
          break;
 800d7ee:	e009      	b.n	800d804 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d7f0:	6839      	ldr	r1, [r7, #0]
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 fd07 	bl	800e206 <USBD_ClrFeature>
          break;
 800d7f8:	e004      	b.n	800d804 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d7fa:	6839      	ldr	r1, [r7, #0]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 fd5e 	bl	800e2be <USBD_CtlError>
          break;
 800d802:	bf00      	nop
      }
      break;
 800d804:	e004      	b.n	800d810 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 fd58 	bl	800e2be <USBD_CtlError>
      break;
 800d80e:	bf00      	nop
  }

  return ret;
 800d810:	7bfb      	ldrb	r3, [r7, #15]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop

0800d81c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d832:	2b40      	cmp	r3, #64	; 0x40
 800d834:	d005      	beq.n	800d842 <USBD_StdItfReq+0x26>
 800d836:	2b40      	cmp	r3, #64	; 0x40
 800d838:	d852      	bhi.n	800d8e0 <USBD_StdItfReq+0xc4>
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d001      	beq.n	800d842 <USBD_StdItfReq+0x26>
 800d83e:	2b20      	cmp	r3, #32
 800d840:	d14e      	bne.n	800d8e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	3b01      	subs	r3, #1
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d840      	bhi.n	800d8d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	889b      	ldrh	r3, [r3, #4]
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b01      	cmp	r3, #1
 800d858:	d836      	bhi.n	800d8c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	889b      	ldrh	r3, [r3, #4]
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	4619      	mov	r1, r3
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7ff fed9 	bl	800d61a <USBD_CoreFindIF>
 800d868:	4603      	mov	r3, r0
 800d86a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d86c:	7bbb      	ldrb	r3, [r7, #14]
 800d86e:	2bff      	cmp	r3, #255	; 0xff
 800d870:	d01d      	beq.n	800d8ae <USBD_StdItfReq+0x92>
 800d872:	7bbb      	ldrb	r3, [r7, #14]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d11a      	bne.n	800d8ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d878:	7bba      	ldrb	r2, [r7, #14]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	32ae      	adds	r2, #174	; 0xae
 800d87e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00f      	beq.n	800d8a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d888:	7bba      	ldrb	r2, [r7, #14]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d890:	7bba      	ldrb	r2, [r7, #14]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	32ae      	adds	r2, #174	; 0xae
 800d896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	6839      	ldr	r1, [r7, #0]
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	4798      	blx	r3
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d8a6:	e004      	b.n	800d8b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d8ac:	e001      	b.n	800d8b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d8ae:	2303      	movs	r3, #3
 800d8b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	88db      	ldrh	r3, [r3, #6]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d110      	bne.n	800d8dc <USBD_StdItfReq+0xc0>
 800d8ba:	7bfb      	ldrb	r3, [r7, #15]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d10d      	bne.n	800d8dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 fdc7 	bl	800e454 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d8c6:	e009      	b.n	800d8dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d8c8:	6839      	ldr	r1, [r7, #0]
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 fcf7 	bl	800e2be <USBD_CtlError>
          break;
 800d8d0:	e004      	b.n	800d8dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d8d2:	6839      	ldr	r1, [r7, #0]
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 fcf2 	bl	800e2be <USBD_CtlError>
          break;
 800d8da:	e000      	b.n	800d8de <USBD_StdItfReq+0xc2>
          break;
 800d8dc:	bf00      	nop
      }
      break;
 800d8de:	e004      	b.n	800d8ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d8e0:	6839      	ldr	r1, [r7, #0]
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 fceb 	bl	800e2be <USBD_CtlError>
      break;
 800d8e8:	bf00      	nop
  }

  return ret;
 800d8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d8fe:	2300      	movs	r3, #0
 800d900:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	889b      	ldrh	r3, [r3, #4]
 800d906:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d910:	2b40      	cmp	r3, #64	; 0x40
 800d912:	d007      	beq.n	800d924 <USBD_StdEPReq+0x30>
 800d914:	2b40      	cmp	r3, #64	; 0x40
 800d916:	f200 817f 	bhi.w	800dc18 <USBD_StdEPReq+0x324>
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d02a      	beq.n	800d974 <USBD_StdEPReq+0x80>
 800d91e:	2b20      	cmp	r3, #32
 800d920:	f040 817a 	bne.w	800dc18 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d924:	7bbb      	ldrb	r3, [r7, #14]
 800d926:	4619      	mov	r1, r3
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f7ff fe83 	bl	800d634 <USBD_CoreFindEP>
 800d92e:	4603      	mov	r3, r0
 800d930:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d932:	7b7b      	ldrb	r3, [r7, #13]
 800d934:	2bff      	cmp	r3, #255	; 0xff
 800d936:	f000 8174 	beq.w	800dc22 <USBD_StdEPReq+0x32e>
 800d93a:	7b7b      	ldrb	r3, [r7, #13]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f040 8170 	bne.w	800dc22 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d942:	7b7a      	ldrb	r2, [r7, #13]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d94a:	7b7a      	ldrb	r2, [r7, #13]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	32ae      	adds	r2, #174	; 0xae
 800d950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 8163 	beq.w	800dc22 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d95c:	7b7a      	ldrb	r2, [r7, #13]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	32ae      	adds	r2, #174	; 0xae
 800d962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	6839      	ldr	r1, [r7, #0]
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	4798      	blx	r3
 800d96e:	4603      	mov	r3, r0
 800d970:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d972:	e156      	b.n	800dc22 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	785b      	ldrb	r3, [r3, #1]
 800d978:	2b03      	cmp	r3, #3
 800d97a:	d008      	beq.n	800d98e <USBD_StdEPReq+0x9a>
 800d97c:	2b03      	cmp	r3, #3
 800d97e:	f300 8145 	bgt.w	800dc0c <USBD_StdEPReq+0x318>
 800d982:	2b00      	cmp	r3, #0
 800d984:	f000 809b 	beq.w	800dabe <USBD_StdEPReq+0x1ca>
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d03c      	beq.n	800da06 <USBD_StdEPReq+0x112>
 800d98c:	e13e      	b.n	800dc0c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d994:	b2db      	uxtb	r3, r3
 800d996:	2b02      	cmp	r3, #2
 800d998:	d002      	beq.n	800d9a0 <USBD_StdEPReq+0xac>
 800d99a:	2b03      	cmp	r3, #3
 800d99c:	d016      	beq.n	800d9cc <USBD_StdEPReq+0xd8>
 800d99e:	e02c      	b.n	800d9fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9a0:	7bbb      	ldrb	r3, [r7, #14]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00d      	beq.n	800d9c2 <USBD_StdEPReq+0xce>
 800d9a6:	7bbb      	ldrb	r3, [r7, #14]
 800d9a8:	2b80      	cmp	r3, #128	; 0x80
 800d9aa:	d00a      	beq.n	800d9c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9ac:	7bbb      	ldrb	r3, [r7, #14]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f001 f979 	bl	800eca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9b6:	2180      	movs	r1, #128	; 0x80
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f001 f975 	bl	800eca8 <USBD_LL_StallEP>
 800d9be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d9c0:	e020      	b.n	800da04 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d9c2:	6839      	ldr	r1, [r7, #0]
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 fc7a 	bl	800e2be <USBD_CtlError>
              break;
 800d9ca:	e01b      	b.n	800da04 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	885b      	ldrh	r3, [r3, #2]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d10e      	bne.n	800d9f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d9d4:	7bbb      	ldrb	r3, [r7, #14]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00b      	beq.n	800d9f2 <USBD_StdEPReq+0xfe>
 800d9da:	7bbb      	ldrb	r3, [r7, #14]
 800d9dc:	2b80      	cmp	r3, #128	; 0x80
 800d9de:	d008      	beq.n	800d9f2 <USBD_StdEPReq+0xfe>
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	88db      	ldrh	r3, [r3, #6]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d104      	bne.n	800d9f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9e8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f001 f95b 	bl	800eca8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fd2e 	bl	800e454 <USBD_CtlSendStatus>

              break;
 800d9f8:	e004      	b.n	800da04 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d9fa:	6839      	ldr	r1, [r7, #0]
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 fc5e 	bl	800e2be <USBD_CtlError>
              break;
 800da02:	bf00      	nop
          }
          break;
 800da04:	e107      	b.n	800dc16 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	2b02      	cmp	r3, #2
 800da10:	d002      	beq.n	800da18 <USBD_StdEPReq+0x124>
 800da12:	2b03      	cmp	r3, #3
 800da14:	d016      	beq.n	800da44 <USBD_StdEPReq+0x150>
 800da16:	e04b      	b.n	800dab0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da18:	7bbb      	ldrb	r3, [r7, #14]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00d      	beq.n	800da3a <USBD_StdEPReq+0x146>
 800da1e:	7bbb      	ldrb	r3, [r7, #14]
 800da20:	2b80      	cmp	r3, #128	; 0x80
 800da22:	d00a      	beq.n	800da3a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da24:	7bbb      	ldrb	r3, [r7, #14]
 800da26:	4619      	mov	r1, r3
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f001 f93d 	bl	800eca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da2e:	2180      	movs	r1, #128	; 0x80
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f001 f939 	bl	800eca8 <USBD_LL_StallEP>
 800da36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da38:	e040      	b.n	800dabc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800da3a:	6839      	ldr	r1, [r7, #0]
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 fc3e 	bl	800e2be <USBD_CtlError>
              break;
 800da42:	e03b      	b.n	800dabc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	885b      	ldrh	r3, [r3, #2]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d136      	bne.n	800daba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800da4c:	7bbb      	ldrb	r3, [r7, #14]
 800da4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da52:	2b00      	cmp	r3, #0
 800da54:	d004      	beq.n	800da60 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800da56:	7bbb      	ldrb	r3, [r7, #14]
 800da58:	4619      	mov	r1, r3
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f001 f943 	bl	800ece6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 fcf7 	bl	800e454 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800da66:	7bbb      	ldrb	r3, [r7, #14]
 800da68:	4619      	mov	r1, r3
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f7ff fde2 	bl	800d634 <USBD_CoreFindEP>
 800da70:	4603      	mov	r3, r0
 800da72:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da74:	7b7b      	ldrb	r3, [r7, #13]
 800da76:	2bff      	cmp	r3, #255	; 0xff
 800da78:	d01f      	beq.n	800daba <USBD_StdEPReq+0x1c6>
 800da7a:	7b7b      	ldrb	r3, [r7, #13]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d11c      	bne.n	800daba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800da80:	7b7a      	ldrb	r2, [r7, #13]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800da88:	7b7a      	ldrb	r2, [r7, #13]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	32ae      	adds	r2, #174	; 0xae
 800da8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d010      	beq.n	800daba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800da98:	7b7a      	ldrb	r2, [r7, #13]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	32ae      	adds	r2, #174	; 0xae
 800da9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	6839      	ldr	r1, [r7, #0]
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	4798      	blx	r3
 800daaa:	4603      	mov	r3, r0
 800daac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800daae:	e004      	b.n	800daba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 fc03 	bl	800e2be <USBD_CtlError>
              break;
 800dab8:	e000      	b.n	800dabc <USBD_StdEPReq+0x1c8>
              break;
 800daba:	bf00      	nop
          }
          break;
 800dabc:	e0ab      	b.n	800dc16 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	d002      	beq.n	800dad0 <USBD_StdEPReq+0x1dc>
 800daca:	2b03      	cmp	r3, #3
 800dacc:	d032      	beq.n	800db34 <USBD_StdEPReq+0x240>
 800dace:	e097      	b.n	800dc00 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dad0:	7bbb      	ldrb	r3, [r7, #14]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d007      	beq.n	800dae6 <USBD_StdEPReq+0x1f2>
 800dad6:	7bbb      	ldrb	r3, [r7, #14]
 800dad8:	2b80      	cmp	r3, #128	; 0x80
 800dada:	d004      	beq.n	800dae6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dadc:	6839      	ldr	r1, [r7, #0]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 fbed 	bl	800e2be <USBD_CtlError>
                break;
 800dae4:	e091      	b.n	800dc0a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800daea:	2b00      	cmp	r3, #0
 800daec:	da0b      	bge.n	800db06 <USBD_StdEPReq+0x212>
 800daee:	7bbb      	ldrb	r3, [r7, #14]
 800daf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800daf4:	4613      	mov	r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	4413      	add	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	3310      	adds	r3, #16
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	4413      	add	r3, r2
 800db02:	3304      	adds	r3, #4
 800db04:	e00b      	b.n	800db1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db06:	7bbb      	ldrb	r3, [r7, #14]
 800db08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db0c:	4613      	mov	r3, r2
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	4413      	add	r3, r2
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	4413      	add	r3, r2
 800db1c:	3304      	adds	r3, #4
 800db1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	2200      	movs	r2, #0
 800db24:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	2202      	movs	r2, #2
 800db2a:	4619      	mov	r1, r3
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f000 fc37 	bl	800e3a0 <USBD_CtlSendData>
              break;
 800db32:	e06a      	b.n	800dc0a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800db34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	da11      	bge.n	800db60 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800db3c:	7bbb      	ldrb	r3, [r7, #14]
 800db3e:	f003 020f 	and.w	r2, r3, #15
 800db42:	6879      	ldr	r1, [r7, #4]
 800db44:	4613      	mov	r3, r2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	4413      	add	r3, r2
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	440b      	add	r3, r1
 800db4e:	3324      	adds	r3, #36	; 0x24
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d117      	bne.n	800db86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800db56:	6839      	ldr	r1, [r7, #0]
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 fbb0 	bl	800e2be <USBD_CtlError>
                  break;
 800db5e:	e054      	b.n	800dc0a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800db60:	7bbb      	ldrb	r3, [r7, #14]
 800db62:	f003 020f 	and.w	r2, r3, #15
 800db66:	6879      	ldr	r1, [r7, #4]
 800db68:	4613      	mov	r3, r2
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	4413      	add	r3, r2
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	440b      	add	r3, r1
 800db72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d104      	bne.n	800db86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800db7c:	6839      	ldr	r1, [r7, #0]
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 fb9d 	bl	800e2be <USBD_CtlError>
                  break;
 800db84:	e041      	b.n	800dc0a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	da0b      	bge.n	800dba6 <USBD_StdEPReq+0x2b2>
 800db8e:	7bbb      	ldrb	r3, [r7, #14]
 800db90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db94:	4613      	mov	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	4413      	add	r3, r2
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	3310      	adds	r3, #16
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	4413      	add	r3, r2
 800dba2:	3304      	adds	r3, #4
 800dba4:	e00b      	b.n	800dbbe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dba6:	7bbb      	ldrb	r3, [r7, #14]
 800dba8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbac:	4613      	mov	r3, r2
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	4413      	add	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	4413      	add	r3, r2
 800dbbc:	3304      	adds	r3, #4
 800dbbe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dbc0:	7bbb      	ldrb	r3, [r7, #14]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d002      	beq.n	800dbcc <USBD_StdEPReq+0x2d8>
 800dbc6:	7bbb      	ldrb	r3, [r7, #14]
 800dbc8:	2b80      	cmp	r3, #128	; 0x80
 800dbca:	d103      	bne.n	800dbd4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	601a      	str	r2, [r3, #0]
 800dbd2:	e00e      	b.n	800dbf2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dbd4:	7bbb      	ldrb	r3, [r7, #14]
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f001 f8a3 	bl	800ed24 <USBD_LL_IsStallEP>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d003      	beq.n	800dbec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	601a      	str	r2, [r3, #0]
 800dbea:	e002      	b.n	800dbf2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	2202      	movs	r2, #2
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 fbd1 	bl	800e3a0 <USBD_CtlSendData>
              break;
 800dbfe:	e004      	b.n	800dc0a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fb5b 	bl	800e2be <USBD_CtlError>
              break;
 800dc08:	bf00      	nop
          }
          break;
 800dc0a:	e004      	b.n	800dc16 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dc0c:	6839      	ldr	r1, [r7, #0]
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 fb55 	bl	800e2be <USBD_CtlError>
          break;
 800dc14:	bf00      	nop
      }
      break;
 800dc16:	e005      	b.n	800dc24 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dc18:	6839      	ldr	r1, [r7, #0]
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 fb4f 	bl	800e2be <USBD_CtlError>
      break;
 800dc20:	e000      	b.n	800dc24 <USBD_StdEPReq+0x330>
      break;
 800dc22:	bf00      	nop
  }

  return ret;
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3710      	adds	r7, #16
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
	...

0800dc30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dc42:	2300      	movs	r3, #0
 800dc44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	885b      	ldrh	r3, [r3, #2]
 800dc4a:	0a1b      	lsrs	r3, r3, #8
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	2b06      	cmp	r3, #6
 800dc52:	f200 8128 	bhi.w	800dea6 <USBD_GetDescriptor+0x276>
 800dc56:	a201      	add	r2, pc, #4	; (adr r2, 800dc5c <USBD_GetDescriptor+0x2c>)
 800dc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5c:	0800dc79 	.word	0x0800dc79
 800dc60:	0800dc91 	.word	0x0800dc91
 800dc64:	0800dcd1 	.word	0x0800dcd1
 800dc68:	0800dea7 	.word	0x0800dea7
 800dc6c:	0800dea7 	.word	0x0800dea7
 800dc70:	0800de47 	.word	0x0800de47
 800dc74:	0800de73 	.word	0x0800de73
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	7c12      	ldrb	r2, [r2, #16]
 800dc84:	f107 0108 	add.w	r1, r7, #8
 800dc88:	4610      	mov	r0, r2
 800dc8a:	4798      	blx	r3
 800dc8c:	60f8      	str	r0, [r7, #12]
      break;
 800dc8e:	e112      	b.n	800deb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	7c1b      	ldrb	r3, [r3, #16]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d10d      	bne.n	800dcb4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca0:	f107 0208 	add.w	r2, r7, #8
 800dca4:	4610      	mov	r0, r2
 800dca6:	4798      	blx	r3
 800dca8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	3301      	adds	r3, #1
 800dcae:	2202      	movs	r2, #2
 800dcb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dcb2:	e100      	b.n	800deb6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcbc:	f107 0208 	add.w	r2, r7, #8
 800dcc0:	4610      	mov	r0, r2
 800dcc2:	4798      	blx	r3
 800dcc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	2202      	movs	r2, #2
 800dccc:	701a      	strb	r2, [r3, #0]
      break;
 800dcce:	e0f2      	b.n	800deb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	885b      	ldrh	r3, [r3, #2]
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	2b05      	cmp	r3, #5
 800dcd8:	f200 80ac 	bhi.w	800de34 <USBD_GetDescriptor+0x204>
 800dcdc:	a201      	add	r2, pc, #4	; (adr r2, 800dce4 <USBD_GetDescriptor+0xb4>)
 800dcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce2:	bf00      	nop
 800dce4:	0800dcfd 	.word	0x0800dcfd
 800dce8:	0800dd31 	.word	0x0800dd31
 800dcec:	0800dd65 	.word	0x0800dd65
 800dcf0:	0800dd99 	.word	0x0800dd99
 800dcf4:	0800ddcd 	.word	0x0800ddcd
 800dcf8:	0800de01 	.word	0x0800de01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d00b      	beq.n	800dd20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	7c12      	ldrb	r2, [r2, #16]
 800dd14:	f107 0108 	add.w	r1, r7, #8
 800dd18:	4610      	mov	r0, r2
 800dd1a:	4798      	blx	r3
 800dd1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd1e:	e091      	b.n	800de44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd20:	6839      	ldr	r1, [r7, #0]
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 facb 	bl	800e2be <USBD_CtlError>
            err++;
 800dd28:	7afb      	ldrb	r3, [r7, #11]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	72fb      	strb	r3, [r7, #11]
          break;
 800dd2e:	e089      	b.n	800de44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00b      	beq.n	800dd54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	7c12      	ldrb	r2, [r2, #16]
 800dd48:	f107 0108 	add.w	r1, r7, #8
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	4798      	blx	r3
 800dd50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd52:	e077      	b.n	800de44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd54:	6839      	ldr	r1, [r7, #0]
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fab1 	bl	800e2be <USBD_CtlError>
            err++;
 800dd5c:	7afb      	ldrb	r3, [r7, #11]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	72fb      	strb	r3, [r7, #11]
          break;
 800dd62:	e06f      	b.n	800de44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00b      	beq.n	800dd88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	7c12      	ldrb	r2, [r2, #16]
 800dd7c:	f107 0108 	add.w	r1, r7, #8
 800dd80:	4610      	mov	r0, r2
 800dd82:	4798      	blx	r3
 800dd84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd86:	e05d      	b.n	800de44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd88:	6839      	ldr	r1, [r7, #0]
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 fa97 	bl	800e2be <USBD_CtlError>
            err++;
 800dd90:	7afb      	ldrb	r3, [r7, #11]
 800dd92:	3301      	adds	r3, #1
 800dd94:	72fb      	strb	r3, [r7, #11]
          break;
 800dd96:	e055      	b.n	800de44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd9e:	691b      	ldr	r3, [r3, #16]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d00b      	beq.n	800ddbc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddaa:	691b      	ldr	r3, [r3, #16]
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	7c12      	ldrb	r2, [r2, #16]
 800ddb0:	f107 0108 	add.w	r1, r7, #8
 800ddb4:	4610      	mov	r0, r2
 800ddb6:	4798      	blx	r3
 800ddb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddba:	e043      	b.n	800de44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddbc:	6839      	ldr	r1, [r7, #0]
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 fa7d 	bl	800e2be <USBD_CtlError>
            err++;
 800ddc4:	7afb      	ldrb	r3, [r7, #11]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	72fb      	strb	r3, [r7, #11]
          break;
 800ddca:	e03b      	b.n	800de44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddd2:	695b      	ldr	r3, [r3, #20]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00b      	beq.n	800ddf0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddde:	695b      	ldr	r3, [r3, #20]
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	7c12      	ldrb	r2, [r2, #16]
 800dde4:	f107 0108 	add.w	r1, r7, #8
 800dde8:	4610      	mov	r0, r2
 800ddea:	4798      	blx	r3
 800ddec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddee:	e029      	b.n	800de44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddf0:	6839      	ldr	r1, [r7, #0]
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 fa63 	bl	800e2be <USBD_CtlError>
            err++;
 800ddf8:	7afb      	ldrb	r3, [r7, #11]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	72fb      	strb	r3, [r7, #11]
          break;
 800ddfe:	e021      	b.n	800de44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de06:	699b      	ldr	r3, [r3, #24]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d00b      	beq.n	800de24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de12:	699b      	ldr	r3, [r3, #24]
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	7c12      	ldrb	r2, [r2, #16]
 800de18:	f107 0108 	add.w	r1, r7, #8
 800de1c:	4610      	mov	r0, r2
 800de1e:	4798      	blx	r3
 800de20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de22:	e00f      	b.n	800de44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de24:	6839      	ldr	r1, [r7, #0]
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 fa49 	bl	800e2be <USBD_CtlError>
            err++;
 800de2c:	7afb      	ldrb	r3, [r7, #11]
 800de2e:	3301      	adds	r3, #1
 800de30:	72fb      	strb	r3, [r7, #11]
          break;
 800de32:	e007      	b.n	800de44 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800de34:	6839      	ldr	r1, [r7, #0]
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 fa41 	bl	800e2be <USBD_CtlError>
          err++;
 800de3c:	7afb      	ldrb	r3, [r7, #11]
 800de3e:	3301      	adds	r3, #1
 800de40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800de42:	bf00      	nop
      }
      break;
 800de44:	e037      	b.n	800deb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	7c1b      	ldrb	r3, [r3, #16]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d109      	bne.n	800de62 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de56:	f107 0208 	add.w	r2, r7, #8
 800de5a:	4610      	mov	r0, r2
 800de5c:	4798      	blx	r3
 800de5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de60:	e029      	b.n	800deb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800de62:	6839      	ldr	r1, [r7, #0]
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 fa2a 	bl	800e2be <USBD_CtlError>
        err++;
 800de6a:	7afb      	ldrb	r3, [r7, #11]
 800de6c:	3301      	adds	r3, #1
 800de6e:	72fb      	strb	r3, [r7, #11]
      break;
 800de70:	e021      	b.n	800deb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	7c1b      	ldrb	r3, [r3, #16]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d10d      	bne.n	800de96 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de82:	f107 0208 	add.w	r2, r7, #8
 800de86:	4610      	mov	r0, r2
 800de88:	4798      	blx	r3
 800de8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	3301      	adds	r3, #1
 800de90:	2207      	movs	r2, #7
 800de92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de94:	e00f      	b.n	800deb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800de96:	6839      	ldr	r1, [r7, #0]
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 fa10 	bl	800e2be <USBD_CtlError>
        err++;
 800de9e:	7afb      	ldrb	r3, [r7, #11]
 800dea0:	3301      	adds	r3, #1
 800dea2:	72fb      	strb	r3, [r7, #11]
      break;
 800dea4:	e007      	b.n	800deb6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800dea6:	6839      	ldr	r1, [r7, #0]
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 fa08 	bl	800e2be <USBD_CtlError>
      err++;
 800deae:	7afb      	ldrb	r3, [r7, #11]
 800deb0:	3301      	adds	r3, #1
 800deb2:	72fb      	strb	r3, [r7, #11]
      break;
 800deb4:	bf00      	nop
  }

  if (err != 0U)
 800deb6:	7afb      	ldrb	r3, [r7, #11]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d11e      	bne.n	800defa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	88db      	ldrh	r3, [r3, #6]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d016      	beq.n	800def2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800dec4:	893b      	ldrh	r3, [r7, #8]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00e      	beq.n	800dee8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	88da      	ldrh	r2, [r3, #6]
 800dece:	893b      	ldrh	r3, [r7, #8]
 800ded0:	4293      	cmp	r3, r2
 800ded2:	bf28      	it	cs
 800ded4:	4613      	movcs	r3, r2
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800deda:	893b      	ldrh	r3, [r7, #8]
 800dedc:	461a      	mov	r2, r3
 800dede:	68f9      	ldr	r1, [r7, #12]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 fa5d 	bl	800e3a0 <USBD_CtlSendData>
 800dee6:	e009      	b.n	800defc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dee8:	6839      	ldr	r1, [r7, #0]
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 f9e7 	bl	800e2be <USBD_CtlError>
 800def0:	e004      	b.n	800defc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 faae 	bl	800e454 <USBD_CtlSendStatus>
 800def8:	e000      	b.n	800defc <USBD_GetDescriptor+0x2cc>
    return;
 800defa:	bf00      	nop
  }
}
 800defc:	3710      	adds	r7, #16
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop

0800df04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	889b      	ldrh	r3, [r3, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d131      	bne.n	800df7a <USBD_SetAddress+0x76>
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	88db      	ldrh	r3, [r3, #6]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d12d      	bne.n	800df7a <USBD_SetAddress+0x76>
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	885b      	ldrh	r3, [r3, #2]
 800df22:	2b7f      	cmp	r3, #127	; 0x7f
 800df24:	d829      	bhi.n	800df7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	885b      	ldrh	r3, [r3, #2]
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	2b03      	cmp	r3, #3
 800df3c:	d104      	bne.n	800df48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 f9bc 	bl	800e2be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df46:	e01d      	b.n	800df84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	7bfa      	ldrb	r2, [r7, #15]
 800df4c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800df50:	7bfb      	ldrb	r3, [r7, #15]
 800df52:	4619      	mov	r1, r3
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 ff11 	bl	800ed7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f000 fa7a 	bl	800e454 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800df60:	7bfb      	ldrb	r3, [r7, #15]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d004      	beq.n	800df70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2202      	movs	r2, #2
 800df6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df6e:	e009      	b.n	800df84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2201      	movs	r2, #1
 800df74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df78:	e004      	b.n	800df84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800df7a:	6839      	ldr	r1, [r7, #0]
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 f99e 	bl	800e2be <USBD_CtlError>
  }
}
 800df82:	bf00      	nop
 800df84:	bf00      	nop
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df96:	2300      	movs	r3, #0
 800df98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	885b      	ldrh	r3, [r3, #2]
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	4b4e      	ldr	r3, [pc, #312]	; (800e0dc <USBD_SetConfig+0x150>)
 800dfa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dfa4:	4b4d      	ldr	r3, [pc, #308]	; (800e0dc <USBD_SetConfig+0x150>)
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d905      	bls.n	800dfb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dfac:	6839      	ldr	r1, [r7, #0]
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 f985 	bl	800e2be <USBD_CtlError>
    return USBD_FAIL;
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	e08c      	b.n	800e0d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	2b02      	cmp	r3, #2
 800dfc2:	d002      	beq.n	800dfca <USBD_SetConfig+0x3e>
 800dfc4:	2b03      	cmp	r3, #3
 800dfc6:	d029      	beq.n	800e01c <USBD_SetConfig+0x90>
 800dfc8:	e075      	b.n	800e0b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dfca:	4b44      	ldr	r3, [pc, #272]	; (800e0dc <USBD_SetConfig+0x150>)
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d020      	beq.n	800e014 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800dfd2:	4b42      	ldr	r3, [pc, #264]	; (800e0dc <USBD_SetConfig+0x150>)
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dfdc:	4b3f      	ldr	r3, [pc, #252]	; (800e0dc <USBD_SetConfig+0x150>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f7fe ffe7 	bl	800cfb6 <USBD_SetClassConfig>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dfec:	7bfb      	ldrb	r3, [r7, #15]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d008      	beq.n	800e004 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800dff2:	6839      	ldr	r1, [r7, #0]
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 f962 	bl	800e2be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2202      	movs	r2, #2
 800dffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e002:	e065      	b.n	800e0d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f000 fa25 	bl	800e454 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2203      	movs	r2, #3
 800e00e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e012:	e05d      	b.n	800e0d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 fa1d 	bl	800e454 <USBD_CtlSendStatus>
      break;
 800e01a:	e059      	b.n	800e0d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e01c:	4b2f      	ldr	r3, [pc, #188]	; (800e0dc <USBD_SetConfig+0x150>)
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d112      	bne.n	800e04a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2202      	movs	r2, #2
 800e028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e02c:	4b2b      	ldr	r3, [pc, #172]	; (800e0dc <USBD_SetConfig+0x150>)
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	461a      	mov	r2, r3
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e036:	4b29      	ldr	r3, [pc, #164]	; (800e0dc <USBD_SetConfig+0x150>)
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	4619      	mov	r1, r3
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f7fe ffd6 	bl	800cfee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 fa06 	bl	800e454 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e048:	e042      	b.n	800e0d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e04a:	4b24      	ldr	r3, [pc, #144]	; (800e0dc <USBD_SetConfig+0x150>)
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	461a      	mov	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	429a      	cmp	r2, r3
 800e056:	d02a      	beq.n	800e0ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	4619      	mov	r1, r3
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7fe ffc4 	bl	800cfee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e066:	4b1d      	ldr	r3, [pc, #116]	; (800e0dc <USBD_SetConfig+0x150>)
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	461a      	mov	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e070:	4b1a      	ldr	r3, [pc, #104]	; (800e0dc <USBD_SetConfig+0x150>)
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	4619      	mov	r1, r3
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7fe ff9d 	bl	800cfb6 <USBD_SetClassConfig>
 800e07c:	4603      	mov	r3, r0
 800e07e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e080:	7bfb      	ldrb	r3, [r7, #15]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00f      	beq.n	800e0a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e086:	6839      	ldr	r1, [r7, #0]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 f918 	bl	800e2be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	b2db      	uxtb	r3, r3
 800e094:	4619      	mov	r1, r3
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7fe ffa9 	bl	800cfee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2202      	movs	r2, #2
 800e0a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e0a4:	e014      	b.n	800e0d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 f9d4 	bl	800e454 <USBD_CtlSendStatus>
      break;
 800e0ac:	e010      	b.n	800e0d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 f9d0 	bl	800e454 <USBD_CtlSendStatus>
      break;
 800e0b4:	e00c      	b.n	800e0d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e0b6:	6839      	ldr	r1, [r7, #0]
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f000 f900 	bl	800e2be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e0be:	4b07      	ldr	r3, [pc, #28]	; (800e0dc <USBD_SetConfig+0x150>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7fe ff92 	bl	800cfee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e0ca:	2303      	movs	r3, #3
 800e0cc:	73fb      	strb	r3, [r7, #15]
      break;
 800e0ce:	bf00      	nop
  }

  return ret;
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	20001df4 	.word	0x20001df4

0800e0e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	88db      	ldrh	r3, [r3, #6]
 800e0ee:	2b01      	cmp	r3, #1
 800e0f0:	d004      	beq.n	800e0fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e0f2:	6839      	ldr	r1, [r7, #0]
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f000 f8e2 	bl	800e2be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e0fa:	e023      	b.n	800e144 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e102:	b2db      	uxtb	r3, r3
 800e104:	2b02      	cmp	r3, #2
 800e106:	dc02      	bgt.n	800e10e <USBD_GetConfig+0x2e>
 800e108:	2b00      	cmp	r3, #0
 800e10a:	dc03      	bgt.n	800e114 <USBD_GetConfig+0x34>
 800e10c:	e015      	b.n	800e13a <USBD_GetConfig+0x5a>
 800e10e:	2b03      	cmp	r3, #3
 800e110:	d00b      	beq.n	800e12a <USBD_GetConfig+0x4a>
 800e112:	e012      	b.n	800e13a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	3308      	adds	r3, #8
 800e11e:	2201      	movs	r2, #1
 800e120:	4619      	mov	r1, r3
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 f93c 	bl	800e3a0 <USBD_CtlSendData>
        break;
 800e128:	e00c      	b.n	800e144 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	3304      	adds	r3, #4
 800e12e:	2201      	movs	r2, #1
 800e130:	4619      	mov	r1, r3
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f934 	bl	800e3a0 <USBD_CtlSendData>
        break;
 800e138:	e004      	b.n	800e144 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 f8be 	bl	800e2be <USBD_CtlError>
        break;
 800e142:	bf00      	nop
}
 800e144:	bf00      	nop
 800e146:	3708      	adds	r7, #8
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	3b01      	subs	r3, #1
 800e160:	2b02      	cmp	r3, #2
 800e162:	d81e      	bhi.n	800e1a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	88db      	ldrh	r3, [r3, #6]
 800e168:	2b02      	cmp	r3, #2
 800e16a:	d004      	beq.n	800e176 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e16c:	6839      	ldr	r1, [r7, #0]
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 f8a5 	bl	800e2be <USBD_CtlError>
        break;
 800e174:	e01a      	b.n	800e1ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e182:	2b00      	cmp	r3, #0
 800e184:	d005      	beq.n	800e192 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	f043 0202 	orr.w	r2, r3, #2
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	330c      	adds	r3, #12
 800e196:	2202      	movs	r2, #2
 800e198:	4619      	mov	r1, r3
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 f900 	bl	800e3a0 <USBD_CtlSendData>
      break;
 800e1a0:	e004      	b.n	800e1ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e1a2:	6839      	ldr	r1, [r7, #0]
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 f88a 	bl	800e2be <USBD_CtlError>
      break;
 800e1aa:	bf00      	nop
  }
}
 800e1ac:	bf00      	nop
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	885b      	ldrh	r3, [r3, #2]
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d107      	bne.n	800e1d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 f940 	bl	800e454 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e1d4:	e013      	b.n	800e1fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	885b      	ldrh	r3, [r3, #2]
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	d10b      	bne.n	800e1f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	889b      	ldrh	r3, [r3, #4]
 800e1e2:	0a1b      	lsrs	r3, r3, #8
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	b2da      	uxtb	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 f930 	bl	800e454 <USBD_CtlSendStatus>
}
 800e1f4:	e003      	b.n	800e1fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e1f6:	6839      	ldr	r1, [r7, #0]
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f000 f860 	bl	800e2be <USBD_CtlError>
}
 800e1fe:	bf00      	nop
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e206:	b580      	push	{r7, lr}
 800e208:	b082      	sub	sp, #8
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
 800e20e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e216:	b2db      	uxtb	r3, r3
 800e218:	3b01      	subs	r3, #1
 800e21a:	2b02      	cmp	r3, #2
 800e21c:	d80b      	bhi.n	800e236 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	885b      	ldrh	r3, [r3, #2]
 800e222:	2b01      	cmp	r3, #1
 800e224:	d10c      	bne.n	800e240 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f910 	bl	800e454 <USBD_CtlSendStatus>
      }
      break;
 800e234:	e004      	b.n	800e240 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e236:	6839      	ldr	r1, [r7, #0]
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 f840 	bl	800e2be <USBD_CtlError>
      break;
 800e23e:	e000      	b.n	800e242 <USBD_ClrFeature+0x3c>
      break;
 800e240:	bf00      	nop
  }
}
 800e242:	bf00      	nop
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}

0800e24a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b084      	sub	sp, #16
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
 800e252:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	781a      	ldrb	r2, [r3, #0]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	3301      	adds	r3, #1
 800e264:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	781a      	ldrb	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	3301      	adds	r3, #1
 800e272:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f7ff fa41 	bl	800d6fc <SWAPBYTE>
 800e27a:	4603      	mov	r3, r0
 800e27c:	461a      	mov	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	3301      	adds	r3, #1
 800e286:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	3301      	adds	r3, #1
 800e28c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e28e:	68f8      	ldr	r0, [r7, #12]
 800e290:	f7ff fa34 	bl	800d6fc <SWAPBYTE>
 800e294:	4603      	mov	r3, r0
 800e296:	461a      	mov	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f7ff fa27 	bl	800d6fc <SWAPBYTE>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	80da      	strh	r2, [r3, #6]
}
 800e2b6:	bf00      	nop
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b082      	sub	sp, #8
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
 800e2c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2c8:	2180      	movs	r1, #128	; 0x80
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 fcec 	bl	800eca8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fce8 	bl	800eca8 <USBD_LL_StallEP>
}
 800e2d8:	bf00      	nop
 800e2da:	3708      	adds	r7, #8
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b086      	sub	sp, #24
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d036      	beq.n	800e364 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e2fa:	6938      	ldr	r0, [r7, #16]
 800e2fc:	f000 f836 	bl	800e36c <USBD_GetLen>
 800e300:	4603      	mov	r3, r0
 800e302:	3301      	adds	r3, #1
 800e304:	b29b      	uxth	r3, r3
 800e306:	005b      	lsls	r3, r3, #1
 800e308:	b29a      	uxth	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e30e:	7dfb      	ldrb	r3, [r7, #23]
 800e310:	68ba      	ldr	r2, [r7, #8]
 800e312:	4413      	add	r3, r2
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	7812      	ldrb	r2, [r2, #0]
 800e318:	701a      	strb	r2, [r3, #0]
  idx++;
 800e31a:	7dfb      	ldrb	r3, [r7, #23]
 800e31c:	3301      	adds	r3, #1
 800e31e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e320:	7dfb      	ldrb	r3, [r7, #23]
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	4413      	add	r3, r2
 800e326:	2203      	movs	r2, #3
 800e328:	701a      	strb	r2, [r3, #0]
  idx++;
 800e32a:	7dfb      	ldrb	r3, [r7, #23]
 800e32c:	3301      	adds	r3, #1
 800e32e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e330:	e013      	b.n	800e35a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e332:	7dfb      	ldrb	r3, [r7, #23]
 800e334:	68ba      	ldr	r2, [r7, #8]
 800e336:	4413      	add	r3, r2
 800e338:	693a      	ldr	r2, [r7, #16]
 800e33a:	7812      	ldrb	r2, [r2, #0]
 800e33c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	3301      	adds	r3, #1
 800e342:	613b      	str	r3, [r7, #16]
    idx++;
 800e344:	7dfb      	ldrb	r3, [r7, #23]
 800e346:	3301      	adds	r3, #1
 800e348:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	4413      	add	r3, r2
 800e350:	2200      	movs	r2, #0
 800e352:	701a      	strb	r2, [r3, #0]
    idx++;
 800e354:	7dfb      	ldrb	r3, [r7, #23]
 800e356:	3301      	adds	r3, #1
 800e358:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d1e7      	bne.n	800e332 <USBD_GetString+0x52>
 800e362:	e000      	b.n	800e366 <USBD_GetString+0x86>
    return;
 800e364:	bf00      	nop
  }
}
 800e366:	3718      	adds	r7, #24
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b085      	sub	sp, #20
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e374:	2300      	movs	r3, #0
 800e376:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e37c:	e005      	b.n	800e38a <USBD_GetLen+0x1e>
  {
    len++;
 800e37e:	7bfb      	ldrb	r3, [r7, #15]
 800e380:	3301      	adds	r3, #1
 800e382:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	3301      	adds	r3, #1
 800e388:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d1f5      	bne.n	800e37e <USBD_GetLen+0x12>
  }

  return len;
 800e392:	7bfb      	ldrb	r3, [r7, #15]
}
 800e394:	4618      	mov	r0, r3
 800e396:	3714      	adds	r7, #20
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr

0800e3a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2202      	movs	r2, #2
 800e3b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	68ba      	ldr	r2, [r7, #8]
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f000 fcf7 	bl	800edba <USBD_LL_Transmit>

  return USBD_OK;
 800e3cc:	2300      	movs	r3, #0
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3710      	adds	r7, #16
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b084      	sub	sp, #16
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	60f8      	str	r0, [r7, #12]
 800e3de:	60b9      	str	r1, [r7, #8]
 800e3e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f000 fce6 	bl	800edba <USBD_LL_Transmit>

  return USBD_OK;
 800e3ee:	2300      	movs	r3, #0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3710      	adds	r7, #16
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2203      	movs	r2, #3
 800e408:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	68ba      	ldr	r2, [r7, #8]
 800e420:	2100      	movs	r1, #0
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f000 fcea 	bl	800edfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b084      	sub	sp, #16
 800e436:	af00      	add	r7, sp, #0
 800e438:	60f8      	str	r0, [r7, #12]
 800e43a:	60b9      	str	r1, [r7, #8]
 800e43c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	68ba      	ldr	r2, [r7, #8]
 800e442:	2100      	movs	r1, #0
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f000 fcd9 	bl	800edfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3710      	adds	r7, #16
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2204      	movs	r2, #4
 800e460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e464:	2300      	movs	r3, #0
 800e466:	2200      	movs	r2, #0
 800e468:	2100      	movs	r1, #0
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 fca5 	bl	800edba <USBD_LL_Transmit>

  return USBD_OK;
 800e470:	2300      	movs	r3, #0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3708      	adds	r7, #8
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b082      	sub	sp, #8
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2205      	movs	r2, #5
 800e486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e48a:	2300      	movs	r3, #0
 800e48c:	2200      	movs	r2, #0
 800e48e:	2100      	movs	r1, #0
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 fcb3 	bl	800edfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e496:	2300      	movs	r3, #0
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	4912      	ldr	r1, [pc, #72]	; (800e4f0 <MX_USB_DEVICE_Init+0x50>)
 800e4a8:	4812      	ldr	r0, [pc, #72]	; (800e4f4 <MX_USB_DEVICE_Init+0x54>)
 800e4aa:	f7fe fd07 	bl	800cebc <USBD_Init>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d001      	beq.n	800e4b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e4b4:	f7f5 fbda 	bl	8003c6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e4b8:	490f      	ldr	r1, [pc, #60]	; (800e4f8 <MX_USB_DEVICE_Init+0x58>)
 800e4ba:	480e      	ldr	r0, [pc, #56]	; (800e4f4 <MX_USB_DEVICE_Init+0x54>)
 800e4bc:	f7fe fd2e 	bl	800cf1c <USBD_RegisterClass>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d001      	beq.n	800e4ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e4c6:	f7f5 fbd1 	bl	8003c6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e4ca:	490c      	ldr	r1, [pc, #48]	; (800e4fc <MX_USB_DEVICE_Init+0x5c>)
 800e4cc:	4809      	ldr	r0, [pc, #36]	; (800e4f4 <MX_USB_DEVICE_Init+0x54>)
 800e4ce:	f7fe fc1f 	bl	800cd10 <USBD_CDC_RegisterInterface>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d001      	beq.n	800e4dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e4d8:	f7f5 fbc8 	bl	8003c6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e4dc:	4805      	ldr	r0, [pc, #20]	; (800e4f4 <MX_USB_DEVICE_Init+0x54>)
 800e4de:	f7fe fd53 	bl	800cf88 <USBD_Start>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d001      	beq.n	800e4ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e4e8:	f7f5 fbc0 	bl	8003c6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e4ec:	bf00      	nop
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	200000c0 	.word	0x200000c0
 800e4f4:	20001df8 	.word	0x20001df8
 800e4f8:	2000002c 	.word	0x2000002c
 800e4fc:	200000ac 	.word	0x200000ac

0800e500 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e504:	2200      	movs	r2, #0
 800e506:	4905      	ldr	r1, [pc, #20]	; (800e51c <CDC_Init_FS+0x1c>)
 800e508:	4805      	ldr	r0, [pc, #20]	; (800e520 <CDC_Init_FS+0x20>)
 800e50a:	f7fe fc1b 	bl	800cd44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e50e:	4905      	ldr	r1, [pc, #20]	; (800e524 <CDC_Init_FS+0x24>)
 800e510:	4803      	ldr	r0, [pc, #12]	; (800e520 <CDC_Init_FS+0x20>)
 800e512:	f7fe fc39 	bl	800cd88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e516:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e518:	4618      	mov	r0, r3
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	200024bc 	.word	0x200024bc
 800e520:	20001df8 	.word	0x20001df8
 800e524:	200020d4 	.word	0x200020d4

0800e528 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e528:	b480      	push	{r7}
 800e52a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e52c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e52e:	4618      	mov	r0, r3
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	4603      	mov	r3, r0
 800e540:	6039      	str	r1, [r7, #0]
 800e542:	71fb      	strb	r3, [r7, #7]
 800e544:	4613      	mov	r3, r2
 800e546:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e548:	79fb      	ldrb	r3, [r7, #7]
 800e54a:	2b23      	cmp	r3, #35	; 0x23
 800e54c:	d84a      	bhi.n	800e5e4 <CDC_Control_FS+0xac>
 800e54e:	a201      	add	r2, pc, #4	; (adr r2, 800e554 <CDC_Control_FS+0x1c>)
 800e550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e554:	0800e5e5 	.word	0x0800e5e5
 800e558:	0800e5e5 	.word	0x0800e5e5
 800e55c:	0800e5e5 	.word	0x0800e5e5
 800e560:	0800e5e5 	.word	0x0800e5e5
 800e564:	0800e5e5 	.word	0x0800e5e5
 800e568:	0800e5e5 	.word	0x0800e5e5
 800e56c:	0800e5e5 	.word	0x0800e5e5
 800e570:	0800e5e5 	.word	0x0800e5e5
 800e574:	0800e5e5 	.word	0x0800e5e5
 800e578:	0800e5e5 	.word	0x0800e5e5
 800e57c:	0800e5e5 	.word	0x0800e5e5
 800e580:	0800e5e5 	.word	0x0800e5e5
 800e584:	0800e5e5 	.word	0x0800e5e5
 800e588:	0800e5e5 	.word	0x0800e5e5
 800e58c:	0800e5e5 	.word	0x0800e5e5
 800e590:	0800e5e5 	.word	0x0800e5e5
 800e594:	0800e5e5 	.word	0x0800e5e5
 800e598:	0800e5e5 	.word	0x0800e5e5
 800e59c:	0800e5e5 	.word	0x0800e5e5
 800e5a0:	0800e5e5 	.word	0x0800e5e5
 800e5a4:	0800e5e5 	.word	0x0800e5e5
 800e5a8:	0800e5e5 	.word	0x0800e5e5
 800e5ac:	0800e5e5 	.word	0x0800e5e5
 800e5b0:	0800e5e5 	.word	0x0800e5e5
 800e5b4:	0800e5e5 	.word	0x0800e5e5
 800e5b8:	0800e5e5 	.word	0x0800e5e5
 800e5bc:	0800e5e5 	.word	0x0800e5e5
 800e5c0:	0800e5e5 	.word	0x0800e5e5
 800e5c4:	0800e5e5 	.word	0x0800e5e5
 800e5c8:	0800e5e5 	.word	0x0800e5e5
 800e5cc:	0800e5e5 	.word	0x0800e5e5
 800e5d0:	0800e5e5 	.word	0x0800e5e5
 800e5d4:	0800e5e5 	.word	0x0800e5e5
 800e5d8:	0800e5e5 	.word	0x0800e5e5
 800e5dc:	0800e5e5 	.word	0x0800e5e5
 800e5e0:	0800e5e5 	.word	0x0800e5e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e5e4:	bf00      	nop
  }

  return (USBD_OK);
 800e5e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint16_t len = (uint8_t) *Len;
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	b2db      	uxtb	r3, r3
 800e604:	81fb      	strh	r3, [r7, #14]
  StringFIFOAdd(&USBFIFO, Buf, len);
 800e606:	89fb      	ldrh	r3, [r7, #14]
 800e608:	461a      	mov	r2, r3
 800e60a:	6879      	ldr	r1, [r7, #4]
 800e60c:	4807      	ldr	r0, [pc, #28]	; (800e62c <CDC_Receive_FS+0x38>)
 800e60e:	f7f5 fd81 	bl	8004114 <StringFIFOAdd>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e612:	6879      	ldr	r1, [r7, #4]
 800e614:	4806      	ldr	r0, [pc, #24]	; (800e630 <CDC_Receive_FS+0x3c>)
 800e616:	f7fe fbb7 	bl	800cd88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e61a:	4805      	ldr	r0, [pc, #20]	; (800e630 <CDC_Receive_FS+0x3c>)
 800e61c:	f7fe fc18 	bl	800ce50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e620:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e622:	4618      	mov	r0, r3
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	20001cf0 	.word	0x20001cf0
 800e630:	20001df8 	.word	0x20001df8

0800e634 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	460b      	mov	r3, r1
 800e63e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e640:	2300      	movs	r3, #0
 800e642:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e644:	4b0d      	ldr	r3, [pc, #52]	; (800e67c <CDC_Transmit_FS+0x48>)
 800e646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e64a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e652:	2b00      	cmp	r3, #0
 800e654:	d001      	beq.n	800e65a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e656:	2301      	movs	r3, #1
 800e658:	e00b      	b.n	800e672 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e65a:	887b      	ldrh	r3, [r7, #2]
 800e65c:	461a      	mov	r2, r3
 800e65e:	6879      	ldr	r1, [r7, #4]
 800e660:	4806      	ldr	r0, [pc, #24]	; (800e67c <CDC_Transmit_FS+0x48>)
 800e662:	f7fe fb6f 	bl	800cd44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e666:	4805      	ldr	r0, [pc, #20]	; (800e67c <CDC_Transmit_FS+0x48>)
 800e668:	f7fe fbac 	bl	800cdc4 <USBD_CDC_TransmitPacket>
 800e66c:	4603      	mov	r3, r0
 800e66e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e670:	7bfb      	ldrb	r3, [r7, #15]
}
 800e672:	4618      	mov	r0, r3
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20001df8 	.word	0x20001df8

0800e680 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e680:	b480      	push	{r7}
 800e682:	b087      	sub	sp, #28
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	4613      	mov	r3, r2
 800e68c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e68e:	2300      	movs	r3, #0
 800e690:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e696:	4618      	mov	r0, r3
 800e698:	371c      	adds	r7, #28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
	...

0800e6a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	6039      	str	r1, [r7, #0]
 800e6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	2212      	movs	r2, #18
 800e6b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e6b6:	4b03      	ldr	r3, [pc, #12]	; (800e6c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr
 800e6c4:	200000dc 	.word	0x200000dc

0800e6c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	6039      	str	r1, [r7, #0]
 800e6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	2204      	movs	r2, #4
 800e6d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e6da:	4b03      	ldr	r3, [pc, #12]	; (800e6e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	370c      	adds	r7, #12
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	200000f0 	.word	0x200000f0

0800e6ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	6039      	str	r1, [r7, #0]
 800e6f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d105      	bne.n	800e70a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6fe:	683a      	ldr	r2, [r7, #0]
 800e700:	4907      	ldr	r1, [pc, #28]	; (800e720 <USBD_FS_ProductStrDescriptor+0x34>)
 800e702:	4808      	ldr	r0, [pc, #32]	; (800e724 <USBD_FS_ProductStrDescriptor+0x38>)
 800e704:	f7ff fdec 	bl	800e2e0 <USBD_GetString>
 800e708:	e004      	b.n	800e714 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	4904      	ldr	r1, [pc, #16]	; (800e720 <USBD_FS_ProductStrDescriptor+0x34>)
 800e70e:	4805      	ldr	r0, [pc, #20]	; (800e724 <USBD_FS_ProductStrDescriptor+0x38>)
 800e710:	f7ff fde6 	bl	800e2e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e714:	4b02      	ldr	r3, [pc, #8]	; (800e720 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e716:	4618      	mov	r0, r3
 800e718:	3708      	adds	r7, #8
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	200028a4 	.word	0x200028a4
 800e724:	08014e74 	.word	0x08014e74

0800e728 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	4603      	mov	r3, r0
 800e730:	6039      	str	r1, [r7, #0]
 800e732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e734:	683a      	ldr	r2, [r7, #0]
 800e736:	4904      	ldr	r1, [pc, #16]	; (800e748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e738:	4804      	ldr	r0, [pc, #16]	; (800e74c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e73a:	f7ff fdd1 	bl	800e2e0 <USBD_GetString>
  return USBD_StrDesc;
 800e73e:	4b02      	ldr	r3, [pc, #8]	; (800e748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e740:	4618      	mov	r0, r3
 800e742:	3708      	adds	r7, #8
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	200028a4 	.word	0x200028a4
 800e74c:	08014e8c 	.word	0x08014e8c

0800e750 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	6039      	str	r1, [r7, #0]
 800e75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	221a      	movs	r2, #26
 800e760:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e762:	f000 f843 	bl	800e7ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e766:	4b02      	ldr	r3, [pc, #8]	; (800e770 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3708      	adds	r7, #8
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	200000f4 	.word	0x200000f4

0800e774 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	4603      	mov	r3, r0
 800e77c:	6039      	str	r1, [r7, #0]
 800e77e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e780:	79fb      	ldrb	r3, [r7, #7]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d105      	bne.n	800e792 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e786:	683a      	ldr	r2, [r7, #0]
 800e788:	4907      	ldr	r1, [pc, #28]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e78a:	4808      	ldr	r0, [pc, #32]	; (800e7ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800e78c:	f7ff fda8 	bl	800e2e0 <USBD_GetString>
 800e790:	e004      	b.n	800e79c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e792:	683a      	ldr	r2, [r7, #0]
 800e794:	4904      	ldr	r1, [pc, #16]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e796:	4805      	ldr	r0, [pc, #20]	; (800e7ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800e798:	f7ff fda2 	bl	800e2e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e79c:	4b02      	ldr	r3, [pc, #8]	; (800e7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3708      	adds	r7, #8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	200028a4 	.word	0x200028a4
 800e7ac:	08014ea0 	.word	0x08014ea0

0800e7b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	6039      	str	r1, [r7, #0]
 800e7ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d105      	bne.n	800e7ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7c2:	683a      	ldr	r2, [r7, #0]
 800e7c4:	4907      	ldr	r1, [pc, #28]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7c6:	4808      	ldr	r0, [pc, #32]	; (800e7e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7c8:	f7ff fd8a 	bl	800e2e0 <USBD_GetString>
 800e7cc:	e004      	b.n	800e7d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e7ce:	683a      	ldr	r2, [r7, #0]
 800e7d0:	4904      	ldr	r1, [pc, #16]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e7d2:	4805      	ldr	r0, [pc, #20]	; (800e7e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e7d4:	f7ff fd84 	bl	800e2e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7d8:	4b02      	ldr	r3, [pc, #8]	; (800e7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	200028a4 	.word	0x200028a4
 800e7e8:	08014eac 	.word	0x08014eac

0800e7ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e7f2:	4b0f      	ldr	r3, [pc, #60]	; (800e830 <Get_SerialNum+0x44>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e7f8:	4b0e      	ldr	r3, [pc, #56]	; (800e834 <Get_SerialNum+0x48>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e7fe:	4b0e      	ldr	r3, [pc, #56]	; (800e838 <Get_SerialNum+0x4c>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4413      	add	r3, r2
 800e80a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d009      	beq.n	800e826 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e812:	2208      	movs	r2, #8
 800e814:	4909      	ldr	r1, [pc, #36]	; (800e83c <Get_SerialNum+0x50>)
 800e816:	68f8      	ldr	r0, [r7, #12]
 800e818:	f000 f814 	bl	800e844 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e81c:	2204      	movs	r2, #4
 800e81e:	4908      	ldr	r1, [pc, #32]	; (800e840 <Get_SerialNum+0x54>)
 800e820:	68b8      	ldr	r0, [r7, #8]
 800e822:	f000 f80f 	bl	800e844 <IntToUnicode>
  }
}
 800e826:	bf00      	nop
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	1fff7a10 	.word	0x1fff7a10
 800e834:	1fff7a14 	.word	0x1fff7a14
 800e838:	1fff7a18 	.word	0x1fff7a18
 800e83c:	200000f6 	.word	0x200000f6
 800e840:	20000106 	.word	0x20000106

0800e844 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e844:	b480      	push	{r7}
 800e846:	b087      	sub	sp, #28
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	4613      	mov	r3, r2
 800e850:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e852:	2300      	movs	r3, #0
 800e854:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e856:	2300      	movs	r3, #0
 800e858:	75fb      	strb	r3, [r7, #23]
 800e85a:	e027      	b.n	800e8ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	0f1b      	lsrs	r3, r3, #28
 800e860:	2b09      	cmp	r3, #9
 800e862:	d80b      	bhi.n	800e87c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	0f1b      	lsrs	r3, r3, #28
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	7dfb      	ldrb	r3, [r7, #23]
 800e86c:	005b      	lsls	r3, r3, #1
 800e86e:	4619      	mov	r1, r3
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	440b      	add	r3, r1
 800e874:	3230      	adds	r2, #48	; 0x30
 800e876:	b2d2      	uxtb	r2, r2
 800e878:	701a      	strb	r2, [r3, #0]
 800e87a:	e00a      	b.n	800e892 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	0f1b      	lsrs	r3, r3, #28
 800e880:	b2da      	uxtb	r2, r3
 800e882:	7dfb      	ldrb	r3, [r7, #23]
 800e884:	005b      	lsls	r3, r3, #1
 800e886:	4619      	mov	r1, r3
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	440b      	add	r3, r1
 800e88c:	3237      	adds	r2, #55	; 0x37
 800e88e:	b2d2      	uxtb	r2, r2
 800e890:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	011b      	lsls	r3, r3, #4
 800e896:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e898:	7dfb      	ldrb	r3, [r7, #23]
 800e89a:	005b      	lsls	r3, r3, #1
 800e89c:	3301      	adds	r3, #1
 800e89e:	68ba      	ldr	r2, [r7, #8]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e8a6:	7dfb      	ldrb	r3, [r7, #23]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	75fb      	strb	r3, [r7, #23]
 800e8ac:	7dfa      	ldrb	r2, [r7, #23]
 800e8ae:	79fb      	ldrb	r3, [r7, #7]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d3d3      	bcc.n	800e85c <IntToUnicode+0x18>
  }
}
 800e8b4:	bf00      	nop
 800e8b6:	bf00      	nop
 800e8b8:	371c      	adds	r7, #28
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr
	...

0800e8c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b08a      	sub	sp, #40	; 0x28
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8cc:	f107 0314 	add.w	r3, r7, #20
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	601a      	str	r2, [r3, #0]
 800e8d4:	605a      	str	r2, [r3, #4]
 800e8d6:	609a      	str	r2, [r3, #8]
 800e8d8:	60da      	str	r2, [r3, #12]
 800e8da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8e4:	d13a      	bne.n	800e95c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	613b      	str	r3, [r7, #16]
 800e8ea:	4b1e      	ldr	r3, [pc, #120]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ee:	4a1d      	ldr	r2, [pc, #116]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e8f0:	f043 0301 	orr.w	r3, r3, #1
 800e8f4:	6313      	str	r3, [r2, #48]	; 0x30
 800e8f6:	4b1b      	ldr	r3, [pc, #108]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8fa:	f003 0301 	and.w	r3, r3, #1
 800e8fe:	613b      	str	r3, [r7, #16]
 800e900:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800e902:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800e906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e908:	2302      	movs	r3, #2
 800e90a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e90c:	2300      	movs	r3, #0
 800e90e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e910:	2303      	movs	r3, #3
 800e912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e914:	230a      	movs	r3, #10
 800e916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e918:	f107 0314 	add.w	r3, r7, #20
 800e91c:	4619      	mov	r1, r3
 800e91e:	4812      	ldr	r0, [pc, #72]	; (800e968 <HAL_PCD_MspInit+0xa4>)
 800e920:	f7f6 fa24 	bl	8004d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e924:	4b0f      	ldr	r3, [pc, #60]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e928:	4a0e      	ldr	r2, [pc, #56]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e92a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e92e:	6353      	str	r3, [r2, #52]	; 0x34
 800e930:	2300      	movs	r3, #0
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	4b0b      	ldr	r3, [pc, #44]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e938:	4a0a      	ldr	r2, [pc, #40]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e93a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e93e:	6453      	str	r3, [r2, #68]	; 0x44
 800e940:	4b08      	ldr	r3, [pc, #32]	; (800e964 <HAL_PCD_MspInit+0xa0>)
 800e942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e948:	60fb      	str	r3, [r7, #12]
 800e94a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e94c:	2200      	movs	r2, #0
 800e94e:	2100      	movs	r1, #0
 800e950:	2043      	movs	r0, #67	; 0x43
 800e952:	f7f6 f9a4 	bl	8004c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e956:	2043      	movs	r0, #67	; 0x43
 800e958:	f7f6 f9bd 	bl	8004cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e95c:	bf00      	nop
 800e95e:	3728      	adds	r7, #40	; 0x28
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	40023800 	.word	0x40023800
 800e968:	40020000 	.word	0x40020000

0800e96c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e980:	4619      	mov	r1, r3
 800e982:	4610      	mov	r0, r2
 800e984:	f7fe fb4d 	bl	800d022 <USBD_LL_SetupStage>
}
 800e988:	bf00      	nop
 800e98a:	3708      	adds	r7, #8
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	460b      	mov	r3, r1
 800e99a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e9a2:	78fa      	ldrb	r2, [r7, #3]
 800e9a4:	6879      	ldr	r1, [r7, #4]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	00db      	lsls	r3, r3, #3
 800e9aa:	4413      	add	r3, r2
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	440b      	add	r3, r1
 800e9b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	78fb      	ldrb	r3, [r7, #3]
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	f7fe fb87 	bl	800d0cc <USBD_LL_DataOutStage>
}
 800e9be:	bf00      	nop
 800e9c0:	3708      	adds	r7, #8
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b082      	sub	sp, #8
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
 800e9ce:	460b      	mov	r3, r1
 800e9d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e9d8:	78fa      	ldrb	r2, [r7, #3]
 800e9da:	6879      	ldr	r1, [r7, #4]
 800e9dc:	4613      	mov	r3, r2
 800e9de:	00db      	lsls	r3, r3, #3
 800e9e0:	4413      	add	r3, r2
 800e9e2:	009b      	lsls	r3, r3, #2
 800e9e4:	440b      	add	r3, r1
 800e9e6:	334c      	adds	r3, #76	; 0x4c
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	78fb      	ldrb	r3, [r7, #3]
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	f7fe fc20 	bl	800d232 <USBD_LL_DataInStage>
}
 800e9f2:	bf00      	nop
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b082      	sub	sp, #8
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7fe fd54 	bl	800d4b6 <USBD_LL_SOF>
}
 800ea0e:	bf00      	nop
 800ea10:	3708      	adds	r7, #8
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}

0800ea16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b084      	sub	sp, #16
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d102      	bne.n	800ea30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	73fb      	strb	r3, [r7, #15]
 800ea2e:	e008      	b.n	800ea42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	2b02      	cmp	r3, #2
 800ea36:	d102      	bne.n	800ea3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	73fb      	strb	r3, [r7, #15]
 800ea3c:	e001      	b.n	800ea42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ea3e:	f7f5 f915 	bl	8003c6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea48:	7bfa      	ldrb	r2, [r7, #15]
 800ea4a:	4611      	mov	r1, r2
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7fe fcf4 	bl	800d43a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fe fc9c 	bl	800d396 <USBD_LL_Reset>
}
 800ea5e:	bf00      	nop
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
	...

0800ea68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fe fcef 	bl	800d45a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	6812      	ldr	r2, [r2, #0]
 800ea8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea8e:	f043 0301 	orr.w	r3, r3, #1
 800ea92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6a1b      	ldr	r3, [r3, #32]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d005      	beq.n	800eaa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea9c:	4b04      	ldr	r3, [pc, #16]	; (800eab0 <HAL_PCD_SuspendCallback+0x48>)
 800ea9e:	691b      	ldr	r3, [r3, #16]
 800eaa0:	4a03      	ldr	r2, [pc, #12]	; (800eab0 <HAL_PCD_SuspendCallback+0x48>)
 800eaa2:	f043 0306 	orr.w	r3, r3, #6
 800eaa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eaa8:	bf00      	nop
 800eaaa:	3708      	adds	r7, #8
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	e000ed00 	.word	0xe000ed00

0800eab4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fe fcdf 	bl	800d486 <USBD_LL_Resume>
}
 800eac8:	bf00      	nop
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	460b      	mov	r3, r1
 800eada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eae2:	78fa      	ldrb	r2, [r7, #3]
 800eae4:	4611      	mov	r1, r2
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7fe fd37 	bl	800d55a <USBD_LL_IsoOUTIncomplete>
}
 800eaec:	bf00      	nop
 800eaee:	3708      	adds	r7, #8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	460b      	mov	r3, r1
 800eafe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb06:	78fa      	ldrb	r2, [r7, #3]
 800eb08:	4611      	mov	r1, r2
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fe fcf3 	bl	800d4f6 <USBD_LL_IsoINIncomplete>
}
 800eb10:	bf00      	nop
 800eb12:	3708      	adds	r7, #8
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7fe fd49 	bl	800d5be <USBD_LL_DevConnected>
}
 800eb2c:	bf00      	nop
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fe fd46 	bl	800d5d4 <USBD_LL_DevDisconnected>
}
 800eb48:	bf00      	nop
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d13c      	bne.n	800ebda <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eb60:	4a20      	ldr	r2, [pc, #128]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4a1e      	ldr	r2, [pc, #120]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb6c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb70:	4b1c      	ldr	r3, [pc, #112]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eb76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800eb78:	4b1a      	ldr	r3, [pc, #104]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb7a:	2204      	movs	r2, #4
 800eb7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eb7e:	4b19      	ldr	r3, [pc, #100]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb80:	2202      	movs	r2, #2
 800eb82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb84:	4b17      	ldr	r3, [pc, #92]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb8a:	4b16      	ldr	r3, [pc, #88]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb8c:	2202      	movs	r2, #2
 800eb8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800eb90:	4b14      	ldr	r3, [pc, #80]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb92:	2201      	movs	r2, #1
 800eb94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eb96:	4b13      	ldr	r3, [pc, #76]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eb9c:	4b11      	ldr	r3, [pc, #68]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eb9e:	2200      	movs	r2, #0
 800eba0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eba2:	4b10      	ldr	r3, [pc, #64]	; (800ebe4 <USBD_LL_Init+0x94>)
 800eba4:	2200      	movs	r2, #0
 800eba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eba8:	4b0e      	ldr	r3, [pc, #56]	; (800ebe4 <USBD_LL_Init+0x94>)
 800ebaa:	2200      	movs	r2, #0
 800ebac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ebae:	480d      	ldr	r0, [pc, #52]	; (800ebe4 <USBD_LL_Init+0x94>)
 800ebb0:	f7f8 ff8d 	bl	8007ace <HAL_PCD_Init>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d001      	beq.n	800ebbe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ebba:	f7f5 f857 	bl	8003c6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ebbe:	2180      	movs	r1, #128	; 0x80
 800ebc0:	4808      	ldr	r0, [pc, #32]	; (800ebe4 <USBD_LL_Init+0x94>)
 800ebc2:	f7fa f9e4 	bl	8008f8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ebc6:	2240      	movs	r2, #64	; 0x40
 800ebc8:	2100      	movs	r1, #0
 800ebca:	4806      	ldr	r0, [pc, #24]	; (800ebe4 <USBD_LL_Init+0x94>)
 800ebcc:	f7fa f998 	bl	8008f00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ebd0:	2280      	movs	r2, #128	; 0x80
 800ebd2:	2101      	movs	r1, #1
 800ebd4:	4803      	ldr	r0, [pc, #12]	; (800ebe4 <USBD_LL_Init+0x94>)
 800ebd6:	f7fa f993 	bl	8008f00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ebda:	2300      	movs	r3, #0
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	20002aa4 	.word	0x20002aa4

0800ebe8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7f9 f882 	bl	8007d08 <HAL_PCD_Start>
 800ec04:	4603      	mov	r3, r0
 800ec06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec08:	7bfb      	ldrb	r3, [r7, #15]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f000 f942 	bl	800ee94 <USBD_Get_USB_Status>
 800ec10:	4603      	mov	r3, r0
 800ec12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec14:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b084      	sub	sp, #16
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
 800ec26:	4608      	mov	r0, r1
 800ec28:	4611      	mov	r1, r2
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	70fb      	strb	r3, [r7, #3]
 800ec30:	460b      	mov	r3, r1
 800ec32:	70bb      	strb	r3, [r7, #2]
 800ec34:	4613      	mov	r3, r2
 800ec36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec46:	78bb      	ldrb	r3, [r7, #2]
 800ec48:	883a      	ldrh	r2, [r7, #0]
 800ec4a:	78f9      	ldrb	r1, [r7, #3]
 800ec4c:	f7f9 fd53 	bl	80086f6 <HAL_PCD_EP_Open>
 800ec50:	4603      	mov	r3, r0
 800ec52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec54:	7bfb      	ldrb	r3, [r7, #15]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f000 f91c 	bl	800ee94 <USBD_Get_USB_Status>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec60:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3710      	adds	r7, #16
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b084      	sub	sp, #16
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
 800ec72:	460b      	mov	r3, r1
 800ec74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec76:	2300      	movs	r3, #0
 800ec78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec84:	78fa      	ldrb	r2, [r7, #3]
 800ec86:	4611      	mov	r1, r2
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7f9 fd9c 	bl	80087c6 <HAL_PCD_EP_Close>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec92:	7bfb      	ldrb	r3, [r7, #15]
 800ec94:	4618      	mov	r0, r3
 800ec96:	f000 f8fd 	bl	800ee94 <USBD_Get_USB_Status>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecc2:	78fa      	ldrb	r2, [r7, #3]
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7f9 fe74 	bl	80089b4 <HAL_PCD_EP_SetStall>
 800eccc:	4603      	mov	r3, r0
 800ecce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecd0:	7bfb      	ldrb	r3, [r7, #15]
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f000 f8de 	bl	800ee94 <USBD_Get_USB_Status>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3710      	adds	r7, #16
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b084      	sub	sp, #16
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
 800ecee:	460b      	mov	r3, r1
 800ecf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed00:	78fa      	ldrb	r2, [r7, #3]
 800ed02:	4611      	mov	r1, r2
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7f9 feb9 	bl	8008a7c <HAL_PCD_EP_ClrStall>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed0e:	7bfb      	ldrb	r3, [r7, #15]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f000 f8bf 	bl	800ee94 <USBD_Get_USB_Status>
 800ed16:	4603      	mov	r3, r0
 800ed18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3710      	adds	r7, #16
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b085      	sub	sp, #20
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	da0b      	bge.n	800ed58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed40:	78fb      	ldrb	r3, [r7, #3]
 800ed42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed46:	68f9      	ldr	r1, [r7, #12]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	00db      	lsls	r3, r3, #3
 800ed4c:	4413      	add	r3, r2
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	440b      	add	r3, r1
 800ed52:	333e      	adds	r3, #62	; 0x3e
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	e00b      	b.n	800ed70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed58:	78fb      	ldrb	r3, [r7, #3]
 800ed5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed5e:	68f9      	ldr	r1, [r7, #12]
 800ed60:	4613      	mov	r3, r2
 800ed62:	00db      	lsls	r3, r3, #3
 800ed64:	4413      	add	r3, r2
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	440b      	add	r3, r1
 800ed6a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ed6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3714      	adds	r7, #20
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	460b      	mov	r3, r1
 800ed86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed96:	78fa      	ldrb	r2, [r7, #3]
 800ed98:	4611      	mov	r1, r2
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7f9 fc86 	bl	80086ac <HAL_PCD_SetAddress>
 800eda0:	4603      	mov	r3, r0
 800eda2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eda4:	7bfb      	ldrb	r3, [r7, #15]
 800eda6:	4618      	mov	r0, r3
 800eda8:	f000 f874 	bl	800ee94 <USBD_Get_USB_Status>
 800edac:	4603      	mov	r3, r0
 800edae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b086      	sub	sp, #24
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	60f8      	str	r0, [r7, #12]
 800edc2:	607a      	str	r2, [r7, #4]
 800edc4:	603b      	str	r3, [r7, #0]
 800edc6:	460b      	mov	r3, r1
 800edc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edca:	2300      	movs	r3, #0
 800edcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edce:	2300      	movs	r3, #0
 800edd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800edd8:	7af9      	ldrb	r1, [r7, #11]
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	f7f9 fd9f 	bl	8008920 <HAL_PCD_EP_Transmit>
 800ede2:	4603      	mov	r3, r0
 800ede4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ede6:	7dfb      	ldrb	r3, [r7, #23]
 800ede8:	4618      	mov	r0, r3
 800edea:	f000 f853 	bl	800ee94 <USBD_Get_USB_Status>
 800edee:	4603      	mov	r3, r0
 800edf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800edf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3718      	adds	r7, #24
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	607a      	str	r2, [r7, #4]
 800ee06:	603b      	str	r3, [r7, #0]
 800ee08:	460b      	mov	r3, r1
 800ee0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee10:	2300      	movs	r3, #0
 800ee12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ee1a:	7af9      	ldrb	r1, [r7, #11]
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	f7f9 fd1b 	bl	800885a <HAL_PCD_EP_Receive>
 800ee24:	4603      	mov	r3, r0
 800ee26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee28:	7dfb      	ldrb	r3, [r7, #23]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f000 f832 	bl	800ee94 <USBD_Get_USB_Status>
 800ee30:	4603      	mov	r3, r0
 800ee32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee34:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3718      	adds	r7, #24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b082      	sub	sp, #8
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	460b      	mov	r3, r1
 800ee48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee50:	78fa      	ldrb	r2, [r7, #3]
 800ee52:	4611      	mov	r1, r2
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7f9 fd4b 	bl	80088f0 <HAL_PCD_EP_GetRxCount>
 800ee5a:	4603      	mov	r3, r0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee6c:	4b03      	ldr	r3, [pc, #12]	; (800ee7c <USBD_static_malloc+0x18>)
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	370c      	adds	r7, #12
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	20002fb0 	.word	0x20002fb0

0800ee80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]

}
 800ee88:	bf00      	nop
 800ee8a:	370c      	adds	r7, #12
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b085      	sub	sp, #20
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eea2:	79fb      	ldrb	r3, [r7, #7]
 800eea4:	2b03      	cmp	r3, #3
 800eea6:	d817      	bhi.n	800eed8 <USBD_Get_USB_Status+0x44>
 800eea8:	a201      	add	r2, pc, #4	; (adr r2, 800eeb0 <USBD_Get_USB_Status+0x1c>)
 800eeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeae:	bf00      	nop
 800eeb0:	0800eec1 	.word	0x0800eec1
 800eeb4:	0800eec7 	.word	0x0800eec7
 800eeb8:	0800eecd 	.word	0x0800eecd
 800eebc:	0800eed3 	.word	0x0800eed3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eec0:	2300      	movs	r3, #0
 800eec2:	73fb      	strb	r3, [r7, #15]
    break;
 800eec4:	e00b      	b.n	800eede <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eec6:	2303      	movs	r3, #3
 800eec8:	73fb      	strb	r3, [r7, #15]
    break;
 800eeca:	e008      	b.n	800eede <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eecc:	2301      	movs	r3, #1
 800eece:	73fb      	strb	r3, [r7, #15]
    break;
 800eed0:	e005      	b.n	800eede <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eed2:	2303      	movs	r3, #3
 800eed4:	73fb      	strb	r3, [r7, #15]
    break;
 800eed6:	e002      	b.n	800eede <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eed8:	2303      	movs	r3, #3
 800eeda:	73fb      	strb	r3, [r7, #15]
    break;
 800eedc:	bf00      	nop
  }
  return usb_status;
 800eede:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3714      	adds	r7, #20
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <__errno>:
 800eeec:	4b01      	ldr	r3, [pc, #4]	; (800eef4 <__errno+0x8>)
 800eeee:	6818      	ldr	r0, [r3, #0]
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	20000110 	.word	0x20000110

0800eef8 <__libc_init_array>:
 800eef8:	b570      	push	{r4, r5, r6, lr}
 800eefa:	4d0d      	ldr	r5, [pc, #52]	; (800ef30 <__libc_init_array+0x38>)
 800eefc:	4c0d      	ldr	r4, [pc, #52]	; (800ef34 <__libc_init_array+0x3c>)
 800eefe:	1b64      	subs	r4, r4, r5
 800ef00:	10a4      	asrs	r4, r4, #2
 800ef02:	2600      	movs	r6, #0
 800ef04:	42a6      	cmp	r6, r4
 800ef06:	d109      	bne.n	800ef1c <__libc_init_array+0x24>
 800ef08:	4d0b      	ldr	r5, [pc, #44]	; (800ef38 <__libc_init_array+0x40>)
 800ef0a:	4c0c      	ldr	r4, [pc, #48]	; (800ef3c <__libc_init_array+0x44>)
 800ef0c:	f005 f9a4 	bl	8014258 <_init>
 800ef10:	1b64      	subs	r4, r4, r5
 800ef12:	10a4      	asrs	r4, r4, #2
 800ef14:	2600      	movs	r6, #0
 800ef16:	42a6      	cmp	r6, r4
 800ef18:	d105      	bne.n	800ef26 <__libc_init_array+0x2e>
 800ef1a:	bd70      	pop	{r4, r5, r6, pc}
 800ef1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef20:	4798      	blx	r3
 800ef22:	3601      	adds	r6, #1
 800ef24:	e7ee      	b.n	800ef04 <__libc_init_array+0xc>
 800ef26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef2a:	4798      	blx	r3
 800ef2c:	3601      	adds	r6, #1
 800ef2e:	e7f2      	b.n	800ef16 <__libc_init_array+0x1e>
 800ef30:	080153a4 	.word	0x080153a4
 800ef34:	080153a4 	.word	0x080153a4
 800ef38:	080153a4 	.word	0x080153a4
 800ef3c:	080153a8 	.word	0x080153a8

0800ef40 <memcpy>:
 800ef40:	440a      	add	r2, r1
 800ef42:	4291      	cmp	r1, r2
 800ef44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef48:	d100      	bne.n	800ef4c <memcpy+0xc>
 800ef4a:	4770      	bx	lr
 800ef4c:	b510      	push	{r4, lr}
 800ef4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef56:	4291      	cmp	r1, r2
 800ef58:	d1f9      	bne.n	800ef4e <memcpy+0xe>
 800ef5a:	bd10      	pop	{r4, pc}

0800ef5c <memmove>:
 800ef5c:	4288      	cmp	r0, r1
 800ef5e:	b510      	push	{r4, lr}
 800ef60:	eb01 0402 	add.w	r4, r1, r2
 800ef64:	d902      	bls.n	800ef6c <memmove+0x10>
 800ef66:	4284      	cmp	r4, r0
 800ef68:	4623      	mov	r3, r4
 800ef6a:	d807      	bhi.n	800ef7c <memmove+0x20>
 800ef6c:	1e43      	subs	r3, r0, #1
 800ef6e:	42a1      	cmp	r1, r4
 800ef70:	d008      	beq.n	800ef84 <memmove+0x28>
 800ef72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef7a:	e7f8      	b.n	800ef6e <memmove+0x12>
 800ef7c:	4402      	add	r2, r0
 800ef7e:	4601      	mov	r1, r0
 800ef80:	428a      	cmp	r2, r1
 800ef82:	d100      	bne.n	800ef86 <memmove+0x2a>
 800ef84:	bd10      	pop	{r4, pc}
 800ef86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef8e:	e7f7      	b.n	800ef80 <memmove+0x24>

0800ef90 <memset>:
 800ef90:	4402      	add	r2, r0
 800ef92:	4603      	mov	r3, r0
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d100      	bne.n	800ef9a <memset+0xa>
 800ef98:	4770      	bx	lr
 800ef9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ef9e:	e7f9      	b.n	800ef94 <memset+0x4>

0800efa0 <__cvt>:
 800efa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efa4:	ec55 4b10 	vmov	r4, r5, d0
 800efa8:	2d00      	cmp	r5, #0
 800efaa:	460e      	mov	r6, r1
 800efac:	4619      	mov	r1, r3
 800efae:	462b      	mov	r3, r5
 800efb0:	bfbb      	ittet	lt
 800efb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800efb6:	461d      	movlt	r5, r3
 800efb8:	2300      	movge	r3, #0
 800efba:	232d      	movlt	r3, #45	; 0x2d
 800efbc:	700b      	strb	r3, [r1, #0]
 800efbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800efc4:	4691      	mov	r9, r2
 800efc6:	f023 0820 	bic.w	r8, r3, #32
 800efca:	bfbc      	itt	lt
 800efcc:	4622      	movlt	r2, r4
 800efce:	4614      	movlt	r4, r2
 800efd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800efd4:	d005      	beq.n	800efe2 <__cvt+0x42>
 800efd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800efda:	d100      	bne.n	800efde <__cvt+0x3e>
 800efdc:	3601      	adds	r6, #1
 800efde:	2102      	movs	r1, #2
 800efe0:	e000      	b.n	800efe4 <__cvt+0x44>
 800efe2:	2103      	movs	r1, #3
 800efe4:	ab03      	add	r3, sp, #12
 800efe6:	9301      	str	r3, [sp, #4]
 800efe8:	ab02      	add	r3, sp, #8
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	ec45 4b10 	vmov	d0, r4, r5
 800eff0:	4653      	mov	r3, sl
 800eff2:	4632      	mov	r2, r6
 800eff4:	f001 ffdc 	bl	8010fb0 <_dtoa_r>
 800eff8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800effc:	4607      	mov	r7, r0
 800effe:	d102      	bne.n	800f006 <__cvt+0x66>
 800f000:	f019 0f01 	tst.w	r9, #1
 800f004:	d022      	beq.n	800f04c <__cvt+0xac>
 800f006:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f00a:	eb07 0906 	add.w	r9, r7, r6
 800f00e:	d110      	bne.n	800f032 <__cvt+0x92>
 800f010:	783b      	ldrb	r3, [r7, #0]
 800f012:	2b30      	cmp	r3, #48	; 0x30
 800f014:	d10a      	bne.n	800f02c <__cvt+0x8c>
 800f016:	2200      	movs	r2, #0
 800f018:	2300      	movs	r3, #0
 800f01a:	4620      	mov	r0, r4
 800f01c:	4629      	mov	r1, r5
 800f01e:	f7f1 fd73 	bl	8000b08 <__aeabi_dcmpeq>
 800f022:	b918      	cbnz	r0, 800f02c <__cvt+0x8c>
 800f024:	f1c6 0601 	rsb	r6, r6, #1
 800f028:	f8ca 6000 	str.w	r6, [sl]
 800f02c:	f8da 3000 	ldr.w	r3, [sl]
 800f030:	4499      	add	r9, r3
 800f032:	2200      	movs	r2, #0
 800f034:	2300      	movs	r3, #0
 800f036:	4620      	mov	r0, r4
 800f038:	4629      	mov	r1, r5
 800f03a:	f7f1 fd65 	bl	8000b08 <__aeabi_dcmpeq>
 800f03e:	b108      	cbz	r0, 800f044 <__cvt+0xa4>
 800f040:	f8cd 900c 	str.w	r9, [sp, #12]
 800f044:	2230      	movs	r2, #48	; 0x30
 800f046:	9b03      	ldr	r3, [sp, #12]
 800f048:	454b      	cmp	r3, r9
 800f04a:	d307      	bcc.n	800f05c <__cvt+0xbc>
 800f04c:	9b03      	ldr	r3, [sp, #12]
 800f04e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f050:	1bdb      	subs	r3, r3, r7
 800f052:	4638      	mov	r0, r7
 800f054:	6013      	str	r3, [r2, #0]
 800f056:	b004      	add	sp, #16
 800f058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f05c:	1c59      	adds	r1, r3, #1
 800f05e:	9103      	str	r1, [sp, #12]
 800f060:	701a      	strb	r2, [r3, #0]
 800f062:	e7f0      	b.n	800f046 <__cvt+0xa6>

0800f064 <__exponent>:
 800f064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f066:	4603      	mov	r3, r0
 800f068:	2900      	cmp	r1, #0
 800f06a:	bfb8      	it	lt
 800f06c:	4249      	neglt	r1, r1
 800f06e:	f803 2b02 	strb.w	r2, [r3], #2
 800f072:	bfb4      	ite	lt
 800f074:	222d      	movlt	r2, #45	; 0x2d
 800f076:	222b      	movge	r2, #43	; 0x2b
 800f078:	2909      	cmp	r1, #9
 800f07a:	7042      	strb	r2, [r0, #1]
 800f07c:	dd2a      	ble.n	800f0d4 <__exponent+0x70>
 800f07e:	f10d 0407 	add.w	r4, sp, #7
 800f082:	46a4      	mov	ip, r4
 800f084:	270a      	movs	r7, #10
 800f086:	46a6      	mov	lr, r4
 800f088:	460a      	mov	r2, r1
 800f08a:	fb91 f6f7 	sdiv	r6, r1, r7
 800f08e:	fb07 1516 	mls	r5, r7, r6, r1
 800f092:	3530      	adds	r5, #48	; 0x30
 800f094:	2a63      	cmp	r2, #99	; 0x63
 800f096:	f104 34ff 	add.w	r4, r4, #4294967295
 800f09a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f09e:	4631      	mov	r1, r6
 800f0a0:	dcf1      	bgt.n	800f086 <__exponent+0x22>
 800f0a2:	3130      	adds	r1, #48	; 0x30
 800f0a4:	f1ae 0502 	sub.w	r5, lr, #2
 800f0a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f0ac:	1c44      	adds	r4, r0, #1
 800f0ae:	4629      	mov	r1, r5
 800f0b0:	4561      	cmp	r1, ip
 800f0b2:	d30a      	bcc.n	800f0ca <__exponent+0x66>
 800f0b4:	f10d 0209 	add.w	r2, sp, #9
 800f0b8:	eba2 020e 	sub.w	r2, r2, lr
 800f0bc:	4565      	cmp	r5, ip
 800f0be:	bf88      	it	hi
 800f0c0:	2200      	movhi	r2, #0
 800f0c2:	4413      	add	r3, r2
 800f0c4:	1a18      	subs	r0, r3, r0
 800f0c6:	b003      	add	sp, #12
 800f0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f0d2:	e7ed      	b.n	800f0b0 <__exponent+0x4c>
 800f0d4:	2330      	movs	r3, #48	; 0x30
 800f0d6:	3130      	adds	r1, #48	; 0x30
 800f0d8:	7083      	strb	r3, [r0, #2]
 800f0da:	70c1      	strb	r1, [r0, #3]
 800f0dc:	1d03      	adds	r3, r0, #4
 800f0de:	e7f1      	b.n	800f0c4 <__exponent+0x60>

0800f0e0 <_printf_float>:
 800f0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e4:	ed2d 8b02 	vpush	{d8}
 800f0e8:	b08d      	sub	sp, #52	; 0x34
 800f0ea:	460c      	mov	r4, r1
 800f0ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f0f0:	4616      	mov	r6, r2
 800f0f2:	461f      	mov	r7, r3
 800f0f4:	4605      	mov	r5, r0
 800f0f6:	f003 fa6f 	bl	80125d8 <_localeconv_r>
 800f0fa:	f8d0 a000 	ldr.w	sl, [r0]
 800f0fe:	4650      	mov	r0, sl
 800f100:	f7f1 f880 	bl	8000204 <strlen>
 800f104:	2300      	movs	r3, #0
 800f106:	930a      	str	r3, [sp, #40]	; 0x28
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	9305      	str	r3, [sp, #20]
 800f10c:	f8d8 3000 	ldr.w	r3, [r8]
 800f110:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f114:	3307      	adds	r3, #7
 800f116:	f023 0307 	bic.w	r3, r3, #7
 800f11a:	f103 0208 	add.w	r2, r3, #8
 800f11e:	f8c8 2000 	str.w	r2, [r8]
 800f122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f126:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f12a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f12e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f132:	9307      	str	r3, [sp, #28]
 800f134:	f8cd 8018 	str.w	r8, [sp, #24]
 800f138:	ee08 0a10 	vmov	s16, r0
 800f13c:	4b9f      	ldr	r3, [pc, #636]	; (800f3bc <_printf_float+0x2dc>)
 800f13e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f142:	f04f 32ff 	mov.w	r2, #4294967295
 800f146:	f7f1 fd11 	bl	8000b6c <__aeabi_dcmpun>
 800f14a:	bb88      	cbnz	r0, 800f1b0 <_printf_float+0xd0>
 800f14c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f150:	4b9a      	ldr	r3, [pc, #616]	; (800f3bc <_printf_float+0x2dc>)
 800f152:	f04f 32ff 	mov.w	r2, #4294967295
 800f156:	f7f1 fceb 	bl	8000b30 <__aeabi_dcmple>
 800f15a:	bb48      	cbnz	r0, 800f1b0 <_printf_float+0xd0>
 800f15c:	2200      	movs	r2, #0
 800f15e:	2300      	movs	r3, #0
 800f160:	4640      	mov	r0, r8
 800f162:	4649      	mov	r1, r9
 800f164:	f7f1 fcda 	bl	8000b1c <__aeabi_dcmplt>
 800f168:	b110      	cbz	r0, 800f170 <_printf_float+0x90>
 800f16a:	232d      	movs	r3, #45	; 0x2d
 800f16c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f170:	4b93      	ldr	r3, [pc, #588]	; (800f3c0 <_printf_float+0x2e0>)
 800f172:	4894      	ldr	r0, [pc, #592]	; (800f3c4 <_printf_float+0x2e4>)
 800f174:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f178:	bf94      	ite	ls
 800f17a:	4698      	movls	r8, r3
 800f17c:	4680      	movhi	r8, r0
 800f17e:	2303      	movs	r3, #3
 800f180:	6123      	str	r3, [r4, #16]
 800f182:	9b05      	ldr	r3, [sp, #20]
 800f184:	f023 0204 	bic.w	r2, r3, #4
 800f188:	6022      	str	r2, [r4, #0]
 800f18a:	f04f 0900 	mov.w	r9, #0
 800f18e:	9700      	str	r7, [sp, #0]
 800f190:	4633      	mov	r3, r6
 800f192:	aa0b      	add	r2, sp, #44	; 0x2c
 800f194:	4621      	mov	r1, r4
 800f196:	4628      	mov	r0, r5
 800f198:	f000 f9d8 	bl	800f54c <_printf_common>
 800f19c:	3001      	adds	r0, #1
 800f19e:	f040 8090 	bne.w	800f2c2 <_printf_float+0x1e2>
 800f1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a6:	b00d      	add	sp, #52	; 0x34
 800f1a8:	ecbd 8b02 	vpop	{d8}
 800f1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b0:	4642      	mov	r2, r8
 800f1b2:	464b      	mov	r3, r9
 800f1b4:	4640      	mov	r0, r8
 800f1b6:	4649      	mov	r1, r9
 800f1b8:	f7f1 fcd8 	bl	8000b6c <__aeabi_dcmpun>
 800f1bc:	b140      	cbz	r0, 800f1d0 <_printf_float+0xf0>
 800f1be:	464b      	mov	r3, r9
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	bfbc      	itt	lt
 800f1c4:	232d      	movlt	r3, #45	; 0x2d
 800f1c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f1ca:	487f      	ldr	r0, [pc, #508]	; (800f3c8 <_printf_float+0x2e8>)
 800f1cc:	4b7f      	ldr	r3, [pc, #508]	; (800f3cc <_printf_float+0x2ec>)
 800f1ce:	e7d1      	b.n	800f174 <_printf_float+0x94>
 800f1d0:	6863      	ldr	r3, [r4, #4]
 800f1d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f1d6:	9206      	str	r2, [sp, #24]
 800f1d8:	1c5a      	adds	r2, r3, #1
 800f1da:	d13f      	bne.n	800f25c <_printf_float+0x17c>
 800f1dc:	2306      	movs	r3, #6
 800f1de:	6063      	str	r3, [r4, #4]
 800f1e0:	9b05      	ldr	r3, [sp, #20]
 800f1e2:	6861      	ldr	r1, [r4, #4]
 800f1e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	9303      	str	r3, [sp, #12]
 800f1ec:	ab0a      	add	r3, sp, #40	; 0x28
 800f1ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f1f2:	ab09      	add	r3, sp, #36	; 0x24
 800f1f4:	ec49 8b10 	vmov	d0, r8, r9
 800f1f8:	9300      	str	r3, [sp, #0]
 800f1fa:	6022      	str	r2, [r4, #0]
 800f1fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f200:	4628      	mov	r0, r5
 800f202:	f7ff fecd 	bl	800efa0 <__cvt>
 800f206:	9b06      	ldr	r3, [sp, #24]
 800f208:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f20a:	2b47      	cmp	r3, #71	; 0x47
 800f20c:	4680      	mov	r8, r0
 800f20e:	d108      	bne.n	800f222 <_printf_float+0x142>
 800f210:	1cc8      	adds	r0, r1, #3
 800f212:	db02      	blt.n	800f21a <_printf_float+0x13a>
 800f214:	6863      	ldr	r3, [r4, #4]
 800f216:	4299      	cmp	r1, r3
 800f218:	dd41      	ble.n	800f29e <_printf_float+0x1be>
 800f21a:	f1ab 0b02 	sub.w	fp, fp, #2
 800f21e:	fa5f fb8b 	uxtb.w	fp, fp
 800f222:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f226:	d820      	bhi.n	800f26a <_printf_float+0x18a>
 800f228:	3901      	subs	r1, #1
 800f22a:	465a      	mov	r2, fp
 800f22c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f230:	9109      	str	r1, [sp, #36]	; 0x24
 800f232:	f7ff ff17 	bl	800f064 <__exponent>
 800f236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f238:	1813      	adds	r3, r2, r0
 800f23a:	2a01      	cmp	r2, #1
 800f23c:	4681      	mov	r9, r0
 800f23e:	6123      	str	r3, [r4, #16]
 800f240:	dc02      	bgt.n	800f248 <_printf_float+0x168>
 800f242:	6822      	ldr	r2, [r4, #0]
 800f244:	07d2      	lsls	r2, r2, #31
 800f246:	d501      	bpl.n	800f24c <_printf_float+0x16c>
 800f248:	3301      	adds	r3, #1
 800f24a:	6123      	str	r3, [r4, #16]
 800f24c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f250:	2b00      	cmp	r3, #0
 800f252:	d09c      	beq.n	800f18e <_printf_float+0xae>
 800f254:	232d      	movs	r3, #45	; 0x2d
 800f256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f25a:	e798      	b.n	800f18e <_printf_float+0xae>
 800f25c:	9a06      	ldr	r2, [sp, #24]
 800f25e:	2a47      	cmp	r2, #71	; 0x47
 800f260:	d1be      	bne.n	800f1e0 <_printf_float+0x100>
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1bc      	bne.n	800f1e0 <_printf_float+0x100>
 800f266:	2301      	movs	r3, #1
 800f268:	e7b9      	b.n	800f1de <_printf_float+0xfe>
 800f26a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f26e:	d118      	bne.n	800f2a2 <_printf_float+0x1c2>
 800f270:	2900      	cmp	r1, #0
 800f272:	6863      	ldr	r3, [r4, #4]
 800f274:	dd0b      	ble.n	800f28e <_printf_float+0x1ae>
 800f276:	6121      	str	r1, [r4, #16]
 800f278:	b913      	cbnz	r3, 800f280 <_printf_float+0x1a0>
 800f27a:	6822      	ldr	r2, [r4, #0]
 800f27c:	07d0      	lsls	r0, r2, #31
 800f27e:	d502      	bpl.n	800f286 <_printf_float+0x1a6>
 800f280:	3301      	adds	r3, #1
 800f282:	440b      	add	r3, r1
 800f284:	6123      	str	r3, [r4, #16]
 800f286:	65a1      	str	r1, [r4, #88]	; 0x58
 800f288:	f04f 0900 	mov.w	r9, #0
 800f28c:	e7de      	b.n	800f24c <_printf_float+0x16c>
 800f28e:	b913      	cbnz	r3, 800f296 <_printf_float+0x1b6>
 800f290:	6822      	ldr	r2, [r4, #0]
 800f292:	07d2      	lsls	r2, r2, #31
 800f294:	d501      	bpl.n	800f29a <_printf_float+0x1ba>
 800f296:	3302      	adds	r3, #2
 800f298:	e7f4      	b.n	800f284 <_printf_float+0x1a4>
 800f29a:	2301      	movs	r3, #1
 800f29c:	e7f2      	b.n	800f284 <_printf_float+0x1a4>
 800f29e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2a4:	4299      	cmp	r1, r3
 800f2a6:	db05      	blt.n	800f2b4 <_printf_float+0x1d4>
 800f2a8:	6823      	ldr	r3, [r4, #0]
 800f2aa:	6121      	str	r1, [r4, #16]
 800f2ac:	07d8      	lsls	r0, r3, #31
 800f2ae:	d5ea      	bpl.n	800f286 <_printf_float+0x1a6>
 800f2b0:	1c4b      	adds	r3, r1, #1
 800f2b2:	e7e7      	b.n	800f284 <_printf_float+0x1a4>
 800f2b4:	2900      	cmp	r1, #0
 800f2b6:	bfd4      	ite	le
 800f2b8:	f1c1 0202 	rsble	r2, r1, #2
 800f2bc:	2201      	movgt	r2, #1
 800f2be:	4413      	add	r3, r2
 800f2c0:	e7e0      	b.n	800f284 <_printf_float+0x1a4>
 800f2c2:	6823      	ldr	r3, [r4, #0]
 800f2c4:	055a      	lsls	r2, r3, #21
 800f2c6:	d407      	bmi.n	800f2d8 <_printf_float+0x1f8>
 800f2c8:	6923      	ldr	r3, [r4, #16]
 800f2ca:	4642      	mov	r2, r8
 800f2cc:	4631      	mov	r1, r6
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	47b8      	blx	r7
 800f2d2:	3001      	adds	r0, #1
 800f2d4:	d12c      	bne.n	800f330 <_printf_float+0x250>
 800f2d6:	e764      	b.n	800f1a2 <_printf_float+0xc2>
 800f2d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2dc:	f240 80e0 	bls.w	800f4a0 <_printf_float+0x3c0>
 800f2e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	f7f1 fc0e 	bl	8000b08 <__aeabi_dcmpeq>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d034      	beq.n	800f35a <_printf_float+0x27a>
 800f2f0:	4a37      	ldr	r2, [pc, #220]	; (800f3d0 <_printf_float+0x2f0>)
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	4631      	mov	r1, r6
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	47b8      	blx	r7
 800f2fa:	3001      	adds	r0, #1
 800f2fc:	f43f af51 	beq.w	800f1a2 <_printf_float+0xc2>
 800f300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f304:	429a      	cmp	r2, r3
 800f306:	db02      	blt.n	800f30e <_printf_float+0x22e>
 800f308:	6823      	ldr	r3, [r4, #0]
 800f30a:	07d8      	lsls	r0, r3, #31
 800f30c:	d510      	bpl.n	800f330 <_printf_float+0x250>
 800f30e:	ee18 3a10 	vmov	r3, s16
 800f312:	4652      	mov	r2, sl
 800f314:	4631      	mov	r1, r6
 800f316:	4628      	mov	r0, r5
 800f318:	47b8      	blx	r7
 800f31a:	3001      	adds	r0, #1
 800f31c:	f43f af41 	beq.w	800f1a2 <_printf_float+0xc2>
 800f320:	f04f 0800 	mov.w	r8, #0
 800f324:	f104 091a 	add.w	r9, r4, #26
 800f328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f32a:	3b01      	subs	r3, #1
 800f32c:	4543      	cmp	r3, r8
 800f32e:	dc09      	bgt.n	800f344 <_printf_float+0x264>
 800f330:	6823      	ldr	r3, [r4, #0]
 800f332:	079b      	lsls	r3, r3, #30
 800f334:	f100 8105 	bmi.w	800f542 <_printf_float+0x462>
 800f338:	68e0      	ldr	r0, [r4, #12]
 800f33a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f33c:	4298      	cmp	r0, r3
 800f33e:	bfb8      	it	lt
 800f340:	4618      	movlt	r0, r3
 800f342:	e730      	b.n	800f1a6 <_printf_float+0xc6>
 800f344:	2301      	movs	r3, #1
 800f346:	464a      	mov	r2, r9
 800f348:	4631      	mov	r1, r6
 800f34a:	4628      	mov	r0, r5
 800f34c:	47b8      	blx	r7
 800f34e:	3001      	adds	r0, #1
 800f350:	f43f af27 	beq.w	800f1a2 <_printf_float+0xc2>
 800f354:	f108 0801 	add.w	r8, r8, #1
 800f358:	e7e6      	b.n	800f328 <_printf_float+0x248>
 800f35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	dc39      	bgt.n	800f3d4 <_printf_float+0x2f4>
 800f360:	4a1b      	ldr	r2, [pc, #108]	; (800f3d0 <_printf_float+0x2f0>)
 800f362:	2301      	movs	r3, #1
 800f364:	4631      	mov	r1, r6
 800f366:	4628      	mov	r0, r5
 800f368:	47b8      	blx	r7
 800f36a:	3001      	adds	r0, #1
 800f36c:	f43f af19 	beq.w	800f1a2 <_printf_float+0xc2>
 800f370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f374:	4313      	orrs	r3, r2
 800f376:	d102      	bne.n	800f37e <_printf_float+0x29e>
 800f378:	6823      	ldr	r3, [r4, #0]
 800f37a:	07d9      	lsls	r1, r3, #31
 800f37c:	d5d8      	bpl.n	800f330 <_printf_float+0x250>
 800f37e:	ee18 3a10 	vmov	r3, s16
 800f382:	4652      	mov	r2, sl
 800f384:	4631      	mov	r1, r6
 800f386:	4628      	mov	r0, r5
 800f388:	47b8      	blx	r7
 800f38a:	3001      	adds	r0, #1
 800f38c:	f43f af09 	beq.w	800f1a2 <_printf_float+0xc2>
 800f390:	f04f 0900 	mov.w	r9, #0
 800f394:	f104 0a1a 	add.w	sl, r4, #26
 800f398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f39a:	425b      	negs	r3, r3
 800f39c:	454b      	cmp	r3, r9
 800f39e:	dc01      	bgt.n	800f3a4 <_printf_float+0x2c4>
 800f3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3a2:	e792      	b.n	800f2ca <_printf_float+0x1ea>
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	4652      	mov	r2, sl
 800f3a8:	4631      	mov	r1, r6
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	47b8      	blx	r7
 800f3ae:	3001      	adds	r0, #1
 800f3b0:	f43f aef7 	beq.w	800f1a2 <_printf_float+0xc2>
 800f3b4:	f109 0901 	add.w	r9, r9, #1
 800f3b8:	e7ee      	b.n	800f398 <_printf_float+0x2b8>
 800f3ba:	bf00      	nop
 800f3bc:	7fefffff 	.word	0x7fefffff
 800f3c0:	08014fe8 	.word	0x08014fe8
 800f3c4:	08014fec 	.word	0x08014fec
 800f3c8:	08014ff4 	.word	0x08014ff4
 800f3cc:	08014ff0 	.word	0x08014ff0
 800f3d0:	08015349 	.word	0x08015349
 800f3d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	bfa8      	it	ge
 800f3dc:	461a      	movge	r2, r3
 800f3de:	2a00      	cmp	r2, #0
 800f3e0:	4691      	mov	r9, r2
 800f3e2:	dc37      	bgt.n	800f454 <_printf_float+0x374>
 800f3e4:	f04f 0b00 	mov.w	fp, #0
 800f3e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f3ec:	f104 021a 	add.w	r2, r4, #26
 800f3f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f3f2:	9305      	str	r3, [sp, #20]
 800f3f4:	eba3 0309 	sub.w	r3, r3, r9
 800f3f8:	455b      	cmp	r3, fp
 800f3fa:	dc33      	bgt.n	800f464 <_printf_float+0x384>
 800f3fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f400:	429a      	cmp	r2, r3
 800f402:	db3b      	blt.n	800f47c <_printf_float+0x39c>
 800f404:	6823      	ldr	r3, [r4, #0]
 800f406:	07da      	lsls	r2, r3, #31
 800f408:	d438      	bmi.n	800f47c <_printf_float+0x39c>
 800f40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f40c:	9a05      	ldr	r2, [sp, #20]
 800f40e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f410:	1a9a      	subs	r2, r3, r2
 800f412:	eba3 0901 	sub.w	r9, r3, r1
 800f416:	4591      	cmp	r9, r2
 800f418:	bfa8      	it	ge
 800f41a:	4691      	movge	r9, r2
 800f41c:	f1b9 0f00 	cmp.w	r9, #0
 800f420:	dc35      	bgt.n	800f48e <_printf_float+0x3ae>
 800f422:	f04f 0800 	mov.w	r8, #0
 800f426:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f42a:	f104 0a1a 	add.w	sl, r4, #26
 800f42e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f432:	1a9b      	subs	r3, r3, r2
 800f434:	eba3 0309 	sub.w	r3, r3, r9
 800f438:	4543      	cmp	r3, r8
 800f43a:	f77f af79 	ble.w	800f330 <_printf_float+0x250>
 800f43e:	2301      	movs	r3, #1
 800f440:	4652      	mov	r2, sl
 800f442:	4631      	mov	r1, r6
 800f444:	4628      	mov	r0, r5
 800f446:	47b8      	blx	r7
 800f448:	3001      	adds	r0, #1
 800f44a:	f43f aeaa 	beq.w	800f1a2 <_printf_float+0xc2>
 800f44e:	f108 0801 	add.w	r8, r8, #1
 800f452:	e7ec      	b.n	800f42e <_printf_float+0x34e>
 800f454:	4613      	mov	r3, r2
 800f456:	4631      	mov	r1, r6
 800f458:	4642      	mov	r2, r8
 800f45a:	4628      	mov	r0, r5
 800f45c:	47b8      	blx	r7
 800f45e:	3001      	adds	r0, #1
 800f460:	d1c0      	bne.n	800f3e4 <_printf_float+0x304>
 800f462:	e69e      	b.n	800f1a2 <_printf_float+0xc2>
 800f464:	2301      	movs	r3, #1
 800f466:	4631      	mov	r1, r6
 800f468:	4628      	mov	r0, r5
 800f46a:	9205      	str	r2, [sp, #20]
 800f46c:	47b8      	blx	r7
 800f46e:	3001      	adds	r0, #1
 800f470:	f43f ae97 	beq.w	800f1a2 <_printf_float+0xc2>
 800f474:	9a05      	ldr	r2, [sp, #20]
 800f476:	f10b 0b01 	add.w	fp, fp, #1
 800f47a:	e7b9      	b.n	800f3f0 <_printf_float+0x310>
 800f47c:	ee18 3a10 	vmov	r3, s16
 800f480:	4652      	mov	r2, sl
 800f482:	4631      	mov	r1, r6
 800f484:	4628      	mov	r0, r5
 800f486:	47b8      	blx	r7
 800f488:	3001      	adds	r0, #1
 800f48a:	d1be      	bne.n	800f40a <_printf_float+0x32a>
 800f48c:	e689      	b.n	800f1a2 <_printf_float+0xc2>
 800f48e:	9a05      	ldr	r2, [sp, #20]
 800f490:	464b      	mov	r3, r9
 800f492:	4442      	add	r2, r8
 800f494:	4631      	mov	r1, r6
 800f496:	4628      	mov	r0, r5
 800f498:	47b8      	blx	r7
 800f49a:	3001      	adds	r0, #1
 800f49c:	d1c1      	bne.n	800f422 <_printf_float+0x342>
 800f49e:	e680      	b.n	800f1a2 <_printf_float+0xc2>
 800f4a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4a2:	2a01      	cmp	r2, #1
 800f4a4:	dc01      	bgt.n	800f4aa <_printf_float+0x3ca>
 800f4a6:	07db      	lsls	r3, r3, #31
 800f4a8:	d538      	bpl.n	800f51c <_printf_float+0x43c>
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	4642      	mov	r2, r8
 800f4ae:	4631      	mov	r1, r6
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	47b8      	blx	r7
 800f4b4:	3001      	adds	r0, #1
 800f4b6:	f43f ae74 	beq.w	800f1a2 <_printf_float+0xc2>
 800f4ba:	ee18 3a10 	vmov	r3, s16
 800f4be:	4652      	mov	r2, sl
 800f4c0:	4631      	mov	r1, r6
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	47b8      	blx	r7
 800f4c6:	3001      	adds	r0, #1
 800f4c8:	f43f ae6b 	beq.w	800f1a2 <_printf_float+0xc2>
 800f4cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	f7f1 fb18 	bl	8000b08 <__aeabi_dcmpeq>
 800f4d8:	b9d8      	cbnz	r0, 800f512 <_printf_float+0x432>
 800f4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4dc:	f108 0201 	add.w	r2, r8, #1
 800f4e0:	3b01      	subs	r3, #1
 800f4e2:	4631      	mov	r1, r6
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	47b8      	blx	r7
 800f4e8:	3001      	adds	r0, #1
 800f4ea:	d10e      	bne.n	800f50a <_printf_float+0x42a>
 800f4ec:	e659      	b.n	800f1a2 <_printf_float+0xc2>
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	4652      	mov	r2, sl
 800f4f2:	4631      	mov	r1, r6
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	47b8      	blx	r7
 800f4f8:	3001      	adds	r0, #1
 800f4fa:	f43f ae52 	beq.w	800f1a2 <_printf_float+0xc2>
 800f4fe:	f108 0801 	add.w	r8, r8, #1
 800f502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f504:	3b01      	subs	r3, #1
 800f506:	4543      	cmp	r3, r8
 800f508:	dcf1      	bgt.n	800f4ee <_printf_float+0x40e>
 800f50a:	464b      	mov	r3, r9
 800f50c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f510:	e6dc      	b.n	800f2cc <_printf_float+0x1ec>
 800f512:	f04f 0800 	mov.w	r8, #0
 800f516:	f104 0a1a 	add.w	sl, r4, #26
 800f51a:	e7f2      	b.n	800f502 <_printf_float+0x422>
 800f51c:	2301      	movs	r3, #1
 800f51e:	4642      	mov	r2, r8
 800f520:	e7df      	b.n	800f4e2 <_printf_float+0x402>
 800f522:	2301      	movs	r3, #1
 800f524:	464a      	mov	r2, r9
 800f526:	4631      	mov	r1, r6
 800f528:	4628      	mov	r0, r5
 800f52a:	47b8      	blx	r7
 800f52c:	3001      	adds	r0, #1
 800f52e:	f43f ae38 	beq.w	800f1a2 <_printf_float+0xc2>
 800f532:	f108 0801 	add.w	r8, r8, #1
 800f536:	68e3      	ldr	r3, [r4, #12]
 800f538:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f53a:	1a5b      	subs	r3, r3, r1
 800f53c:	4543      	cmp	r3, r8
 800f53e:	dcf0      	bgt.n	800f522 <_printf_float+0x442>
 800f540:	e6fa      	b.n	800f338 <_printf_float+0x258>
 800f542:	f04f 0800 	mov.w	r8, #0
 800f546:	f104 0919 	add.w	r9, r4, #25
 800f54a:	e7f4      	b.n	800f536 <_printf_float+0x456>

0800f54c <_printf_common>:
 800f54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f550:	4616      	mov	r6, r2
 800f552:	4699      	mov	r9, r3
 800f554:	688a      	ldr	r2, [r1, #8]
 800f556:	690b      	ldr	r3, [r1, #16]
 800f558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f55c:	4293      	cmp	r3, r2
 800f55e:	bfb8      	it	lt
 800f560:	4613      	movlt	r3, r2
 800f562:	6033      	str	r3, [r6, #0]
 800f564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f568:	4607      	mov	r7, r0
 800f56a:	460c      	mov	r4, r1
 800f56c:	b10a      	cbz	r2, 800f572 <_printf_common+0x26>
 800f56e:	3301      	adds	r3, #1
 800f570:	6033      	str	r3, [r6, #0]
 800f572:	6823      	ldr	r3, [r4, #0]
 800f574:	0699      	lsls	r1, r3, #26
 800f576:	bf42      	ittt	mi
 800f578:	6833      	ldrmi	r3, [r6, #0]
 800f57a:	3302      	addmi	r3, #2
 800f57c:	6033      	strmi	r3, [r6, #0]
 800f57e:	6825      	ldr	r5, [r4, #0]
 800f580:	f015 0506 	ands.w	r5, r5, #6
 800f584:	d106      	bne.n	800f594 <_printf_common+0x48>
 800f586:	f104 0a19 	add.w	sl, r4, #25
 800f58a:	68e3      	ldr	r3, [r4, #12]
 800f58c:	6832      	ldr	r2, [r6, #0]
 800f58e:	1a9b      	subs	r3, r3, r2
 800f590:	42ab      	cmp	r3, r5
 800f592:	dc26      	bgt.n	800f5e2 <_printf_common+0x96>
 800f594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f598:	1e13      	subs	r3, r2, #0
 800f59a:	6822      	ldr	r2, [r4, #0]
 800f59c:	bf18      	it	ne
 800f59e:	2301      	movne	r3, #1
 800f5a0:	0692      	lsls	r2, r2, #26
 800f5a2:	d42b      	bmi.n	800f5fc <_printf_common+0xb0>
 800f5a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5a8:	4649      	mov	r1, r9
 800f5aa:	4638      	mov	r0, r7
 800f5ac:	47c0      	blx	r8
 800f5ae:	3001      	adds	r0, #1
 800f5b0:	d01e      	beq.n	800f5f0 <_printf_common+0xa4>
 800f5b2:	6823      	ldr	r3, [r4, #0]
 800f5b4:	68e5      	ldr	r5, [r4, #12]
 800f5b6:	6832      	ldr	r2, [r6, #0]
 800f5b8:	f003 0306 	and.w	r3, r3, #6
 800f5bc:	2b04      	cmp	r3, #4
 800f5be:	bf08      	it	eq
 800f5c0:	1aad      	subeq	r5, r5, r2
 800f5c2:	68a3      	ldr	r3, [r4, #8]
 800f5c4:	6922      	ldr	r2, [r4, #16]
 800f5c6:	bf0c      	ite	eq
 800f5c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5cc:	2500      	movne	r5, #0
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	bfc4      	itt	gt
 800f5d2:	1a9b      	subgt	r3, r3, r2
 800f5d4:	18ed      	addgt	r5, r5, r3
 800f5d6:	2600      	movs	r6, #0
 800f5d8:	341a      	adds	r4, #26
 800f5da:	42b5      	cmp	r5, r6
 800f5dc:	d11a      	bne.n	800f614 <_printf_common+0xc8>
 800f5de:	2000      	movs	r0, #0
 800f5e0:	e008      	b.n	800f5f4 <_printf_common+0xa8>
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	4652      	mov	r2, sl
 800f5e6:	4649      	mov	r1, r9
 800f5e8:	4638      	mov	r0, r7
 800f5ea:	47c0      	blx	r8
 800f5ec:	3001      	adds	r0, #1
 800f5ee:	d103      	bne.n	800f5f8 <_printf_common+0xac>
 800f5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5f8:	3501      	adds	r5, #1
 800f5fa:	e7c6      	b.n	800f58a <_printf_common+0x3e>
 800f5fc:	18e1      	adds	r1, r4, r3
 800f5fe:	1c5a      	adds	r2, r3, #1
 800f600:	2030      	movs	r0, #48	; 0x30
 800f602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f606:	4422      	add	r2, r4
 800f608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f60c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f610:	3302      	adds	r3, #2
 800f612:	e7c7      	b.n	800f5a4 <_printf_common+0x58>
 800f614:	2301      	movs	r3, #1
 800f616:	4622      	mov	r2, r4
 800f618:	4649      	mov	r1, r9
 800f61a:	4638      	mov	r0, r7
 800f61c:	47c0      	blx	r8
 800f61e:	3001      	adds	r0, #1
 800f620:	d0e6      	beq.n	800f5f0 <_printf_common+0xa4>
 800f622:	3601      	adds	r6, #1
 800f624:	e7d9      	b.n	800f5da <_printf_common+0x8e>
	...

0800f628 <_printf_i>:
 800f628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f62c:	7e0f      	ldrb	r7, [r1, #24]
 800f62e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f630:	2f78      	cmp	r7, #120	; 0x78
 800f632:	4691      	mov	r9, r2
 800f634:	4680      	mov	r8, r0
 800f636:	460c      	mov	r4, r1
 800f638:	469a      	mov	sl, r3
 800f63a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f63e:	d807      	bhi.n	800f650 <_printf_i+0x28>
 800f640:	2f62      	cmp	r7, #98	; 0x62
 800f642:	d80a      	bhi.n	800f65a <_printf_i+0x32>
 800f644:	2f00      	cmp	r7, #0
 800f646:	f000 80d8 	beq.w	800f7fa <_printf_i+0x1d2>
 800f64a:	2f58      	cmp	r7, #88	; 0x58
 800f64c:	f000 80a3 	beq.w	800f796 <_printf_i+0x16e>
 800f650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f658:	e03a      	b.n	800f6d0 <_printf_i+0xa8>
 800f65a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f65e:	2b15      	cmp	r3, #21
 800f660:	d8f6      	bhi.n	800f650 <_printf_i+0x28>
 800f662:	a101      	add	r1, pc, #4	; (adr r1, 800f668 <_printf_i+0x40>)
 800f664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f668:	0800f6c1 	.word	0x0800f6c1
 800f66c:	0800f6d5 	.word	0x0800f6d5
 800f670:	0800f651 	.word	0x0800f651
 800f674:	0800f651 	.word	0x0800f651
 800f678:	0800f651 	.word	0x0800f651
 800f67c:	0800f651 	.word	0x0800f651
 800f680:	0800f6d5 	.word	0x0800f6d5
 800f684:	0800f651 	.word	0x0800f651
 800f688:	0800f651 	.word	0x0800f651
 800f68c:	0800f651 	.word	0x0800f651
 800f690:	0800f651 	.word	0x0800f651
 800f694:	0800f7e1 	.word	0x0800f7e1
 800f698:	0800f705 	.word	0x0800f705
 800f69c:	0800f7c3 	.word	0x0800f7c3
 800f6a0:	0800f651 	.word	0x0800f651
 800f6a4:	0800f651 	.word	0x0800f651
 800f6a8:	0800f803 	.word	0x0800f803
 800f6ac:	0800f651 	.word	0x0800f651
 800f6b0:	0800f705 	.word	0x0800f705
 800f6b4:	0800f651 	.word	0x0800f651
 800f6b8:	0800f651 	.word	0x0800f651
 800f6bc:	0800f7cb 	.word	0x0800f7cb
 800f6c0:	682b      	ldr	r3, [r5, #0]
 800f6c2:	1d1a      	adds	r2, r3, #4
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	602a      	str	r2, [r5, #0]
 800f6c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e0a3      	b.n	800f81c <_printf_i+0x1f4>
 800f6d4:	6820      	ldr	r0, [r4, #0]
 800f6d6:	6829      	ldr	r1, [r5, #0]
 800f6d8:	0606      	lsls	r6, r0, #24
 800f6da:	f101 0304 	add.w	r3, r1, #4
 800f6de:	d50a      	bpl.n	800f6f6 <_printf_i+0xce>
 800f6e0:	680e      	ldr	r6, [r1, #0]
 800f6e2:	602b      	str	r3, [r5, #0]
 800f6e4:	2e00      	cmp	r6, #0
 800f6e6:	da03      	bge.n	800f6f0 <_printf_i+0xc8>
 800f6e8:	232d      	movs	r3, #45	; 0x2d
 800f6ea:	4276      	negs	r6, r6
 800f6ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6f0:	485e      	ldr	r0, [pc, #376]	; (800f86c <_printf_i+0x244>)
 800f6f2:	230a      	movs	r3, #10
 800f6f4:	e019      	b.n	800f72a <_printf_i+0x102>
 800f6f6:	680e      	ldr	r6, [r1, #0]
 800f6f8:	602b      	str	r3, [r5, #0]
 800f6fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f6fe:	bf18      	it	ne
 800f700:	b236      	sxthne	r6, r6
 800f702:	e7ef      	b.n	800f6e4 <_printf_i+0xbc>
 800f704:	682b      	ldr	r3, [r5, #0]
 800f706:	6820      	ldr	r0, [r4, #0]
 800f708:	1d19      	adds	r1, r3, #4
 800f70a:	6029      	str	r1, [r5, #0]
 800f70c:	0601      	lsls	r1, r0, #24
 800f70e:	d501      	bpl.n	800f714 <_printf_i+0xec>
 800f710:	681e      	ldr	r6, [r3, #0]
 800f712:	e002      	b.n	800f71a <_printf_i+0xf2>
 800f714:	0646      	lsls	r6, r0, #25
 800f716:	d5fb      	bpl.n	800f710 <_printf_i+0xe8>
 800f718:	881e      	ldrh	r6, [r3, #0]
 800f71a:	4854      	ldr	r0, [pc, #336]	; (800f86c <_printf_i+0x244>)
 800f71c:	2f6f      	cmp	r7, #111	; 0x6f
 800f71e:	bf0c      	ite	eq
 800f720:	2308      	moveq	r3, #8
 800f722:	230a      	movne	r3, #10
 800f724:	2100      	movs	r1, #0
 800f726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f72a:	6865      	ldr	r5, [r4, #4]
 800f72c:	60a5      	str	r5, [r4, #8]
 800f72e:	2d00      	cmp	r5, #0
 800f730:	bfa2      	ittt	ge
 800f732:	6821      	ldrge	r1, [r4, #0]
 800f734:	f021 0104 	bicge.w	r1, r1, #4
 800f738:	6021      	strge	r1, [r4, #0]
 800f73a:	b90e      	cbnz	r6, 800f740 <_printf_i+0x118>
 800f73c:	2d00      	cmp	r5, #0
 800f73e:	d04d      	beq.n	800f7dc <_printf_i+0x1b4>
 800f740:	4615      	mov	r5, r2
 800f742:	fbb6 f1f3 	udiv	r1, r6, r3
 800f746:	fb03 6711 	mls	r7, r3, r1, r6
 800f74a:	5dc7      	ldrb	r7, [r0, r7]
 800f74c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f750:	4637      	mov	r7, r6
 800f752:	42bb      	cmp	r3, r7
 800f754:	460e      	mov	r6, r1
 800f756:	d9f4      	bls.n	800f742 <_printf_i+0x11a>
 800f758:	2b08      	cmp	r3, #8
 800f75a:	d10b      	bne.n	800f774 <_printf_i+0x14c>
 800f75c:	6823      	ldr	r3, [r4, #0]
 800f75e:	07de      	lsls	r6, r3, #31
 800f760:	d508      	bpl.n	800f774 <_printf_i+0x14c>
 800f762:	6923      	ldr	r3, [r4, #16]
 800f764:	6861      	ldr	r1, [r4, #4]
 800f766:	4299      	cmp	r1, r3
 800f768:	bfde      	ittt	le
 800f76a:	2330      	movle	r3, #48	; 0x30
 800f76c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f770:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f774:	1b52      	subs	r2, r2, r5
 800f776:	6122      	str	r2, [r4, #16]
 800f778:	f8cd a000 	str.w	sl, [sp]
 800f77c:	464b      	mov	r3, r9
 800f77e:	aa03      	add	r2, sp, #12
 800f780:	4621      	mov	r1, r4
 800f782:	4640      	mov	r0, r8
 800f784:	f7ff fee2 	bl	800f54c <_printf_common>
 800f788:	3001      	adds	r0, #1
 800f78a:	d14c      	bne.n	800f826 <_printf_i+0x1fe>
 800f78c:	f04f 30ff 	mov.w	r0, #4294967295
 800f790:	b004      	add	sp, #16
 800f792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f796:	4835      	ldr	r0, [pc, #212]	; (800f86c <_printf_i+0x244>)
 800f798:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f79c:	6829      	ldr	r1, [r5, #0]
 800f79e:	6823      	ldr	r3, [r4, #0]
 800f7a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f7a4:	6029      	str	r1, [r5, #0]
 800f7a6:	061d      	lsls	r5, r3, #24
 800f7a8:	d514      	bpl.n	800f7d4 <_printf_i+0x1ac>
 800f7aa:	07df      	lsls	r7, r3, #31
 800f7ac:	bf44      	itt	mi
 800f7ae:	f043 0320 	orrmi.w	r3, r3, #32
 800f7b2:	6023      	strmi	r3, [r4, #0]
 800f7b4:	b91e      	cbnz	r6, 800f7be <_printf_i+0x196>
 800f7b6:	6823      	ldr	r3, [r4, #0]
 800f7b8:	f023 0320 	bic.w	r3, r3, #32
 800f7bc:	6023      	str	r3, [r4, #0]
 800f7be:	2310      	movs	r3, #16
 800f7c0:	e7b0      	b.n	800f724 <_printf_i+0xfc>
 800f7c2:	6823      	ldr	r3, [r4, #0]
 800f7c4:	f043 0320 	orr.w	r3, r3, #32
 800f7c8:	6023      	str	r3, [r4, #0]
 800f7ca:	2378      	movs	r3, #120	; 0x78
 800f7cc:	4828      	ldr	r0, [pc, #160]	; (800f870 <_printf_i+0x248>)
 800f7ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f7d2:	e7e3      	b.n	800f79c <_printf_i+0x174>
 800f7d4:	0659      	lsls	r1, r3, #25
 800f7d6:	bf48      	it	mi
 800f7d8:	b2b6      	uxthmi	r6, r6
 800f7da:	e7e6      	b.n	800f7aa <_printf_i+0x182>
 800f7dc:	4615      	mov	r5, r2
 800f7de:	e7bb      	b.n	800f758 <_printf_i+0x130>
 800f7e0:	682b      	ldr	r3, [r5, #0]
 800f7e2:	6826      	ldr	r6, [r4, #0]
 800f7e4:	6961      	ldr	r1, [r4, #20]
 800f7e6:	1d18      	adds	r0, r3, #4
 800f7e8:	6028      	str	r0, [r5, #0]
 800f7ea:	0635      	lsls	r5, r6, #24
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	d501      	bpl.n	800f7f4 <_printf_i+0x1cc>
 800f7f0:	6019      	str	r1, [r3, #0]
 800f7f2:	e002      	b.n	800f7fa <_printf_i+0x1d2>
 800f7f4:	0670      	lsls	r0, r6, #25
 800f7f6:	d5fb      	bpl.n	800f7f0 <_printf_i+0x1c8>
 800f7f8:	8019      	strh	r1, [r3, #0]
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	6123      	str	r3, [r4, #16]
 800f7fe:	4615      	mov	r5, r2
 800f800:	e7ba      	b.n	800f778 <_printf_i+0x150>
 800f802:	682b      	ldr	r3, [r5, #0]
 800f804:	1d1a      	adds	r2, r3, #4
 800f806:	602a      	str	r2, [r5, #0]
 800f808:	681d      	ldr	r5, [r3, #0]
 800f80a:	6862      	ldr	r2, [r4, #4]
 800f80c:	2100      	movs	r1, #0
 800f80e:	4628      	mov	r0, r5
 800f810:	f7f0 fd06 	bl	8000220 <memchr>
 800f814:	b108      	cbz	r0, 800f81a <_printf_i+0x1f2>
 800f816:	1b40      	subs	r0, r0, r5
 800f818:	6060      	str	r0, [r4, #4]
 800f81a:	6863      	ldr	r3, [r4, #4]
 800f81c:	6123      	str	r3, [r4, #16]
 800f81e:	2300      	movs	r3, #0
 800f820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f824:	e7a8      	b.n	800f778 <_printf_i+0x150>
 800f826:	6923      	ldr	r3, [r4, #16]
 800f828:	462a      	mov	r2, r5
 800f82a:	4649      	mov	r1, r9
 800f82c:	4640      	mov	r0, r8
 800f82e:	47d0      	blx	sl
 800f830:	3001      	adds	r0, #1
 800f832:	d0ab      	beq.n	800f78c <_printf_i+0x164>
 800f834:	6823      	ldr	r3, [r4, #0]
 800f836:	079b      	lsls	r3, r3, #30
 800f838:	d413      	bmi.n	800f862 <_printf_i+0x23a>
 800f83a:	68e0      	ldr	r0, [r4, #12]
 800f83c:	9b03      	ldr	r3, [sp, #12]
 800f83e:	4298      	cmp	r0, r3
 800f840:	bfb8      	it	lt
 800f842:	4618      	movlt	r0, r3
 800f844:	e7a4      	b.n	800f790 <_printf_i+0x168>
 800f846:	2301      	movs	r3, #1
 800f848:	4632      	mov	r2, r6
 800f84a:	4649      	mov	r1, r9
 800f84c:	4640      	mov	r0, r8
 800f84e:	47d0      	blx	sl
 800f850:	3001      	adds	r0, #1
 800f852:	d09b      	beq.n	800f78c <_printf_i+0x164>
 800f854:	3501      	adds	r5, #1
 800f856:	68e3      	ldr	r3, [r4, #12]
 800f858:	9903      	ldr	r1, [sp, #12]
 800f85a:	1a5b      	subs	r3, r3, r1
 800f85c:	42ab      	cmp	r3, r5
 800f85e:	dcf2      	bgt.n	800f846 <_printf_i+0x21e>
 800f860:	e7eb      	b.n	800f83a <_printf_i+0x212>
 800f862:	2500      	movs	r5, #0
 800f864:	f104 0619 	add.w	r6, r4, #25
 800f868:	e7f5      	b.n	800f856 <_printf_i+0x22e>
 800f86a:	bf00      	nop
 800f86c:	08014ff8 	.word	0x08014ff8
 800f870:	08015009 	.word	0x08015009

0800f874 <_scanf_float>:
 800f874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f878:	b087      	sub	sp, #28
 800f87a:	4617      	mov	r7, r2
 800f87c:	9303      	str	r3, [sp, #12]
 800f87e:	688b      	ldr	r3, [r1, #8]
 800f880:	1e5a      	subs	r2, r3, #1
 800f882:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f886:	bf83      	ittte	hi
 800f888:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f88c:	195b      	addhi	r3, r3, r5
 800f88e:	9302      	strhi	r3, [sp, #8]
 800f890:	2300      	movls	r3, #0
 800f892:	bf86      	itte	hi
 800f894:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f898:	608b      	strhi	r3, [r1, #8]
 800f89a:	9302      	strls	r3, [sp, #8]
 800f89c:	680b      	ldr	r3, [r1, #0]
 800f89e:	468b      	mov	fp, r1
 800f8a0:	2500      	movs	r5, #0
 800f8a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f8a6:	f84b 3b1c 	str.w	r3, [fp], #28
 800f8aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f8ae:	4680      	mov	r8, r0
 800f8b0:	460c      	mov	r4, r1
 800f8b2:	465e      	mov	r6, fp
 800f8b4:	46aa      	mov	sl, r5
 800f8b6:	46a9      	mov	r9, r5
 800f8b8:	9501      	str	r5, [sp, #4]
 800f8ba:	68a2      	ldr	r2, [r4, #8]
 800f8bc:	b152      	cbz	r2, 800f8d4 <_scanf_float+0x60>
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	2b4e      	cmp	r3, #78	; 0x4e
 800f8c4:	d864      	bhi.n	800f990 <_scanf_float+0x11c>
 800f8c6:	2b40      	cmp	r3, #64	; 0x40
 800f8c8:	d83c      	bhi.n	800f944 <_scanf_float+0xd0>
 800f8ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f8ce:	b2c8      	uxtb	r0, r1
 800f8d0:	280e      	cmp	r0, #14
 800f8d2:	d93a      	bls.n	800f94a <_scanf_float+0xd6>
 800f8d4:	f1b9 0f00 	cmp.w	r9, #0
 800f8d8:	d003      	beq.n	800f8e2 <_scanf_float+0x6e>
 800f8da:	6823      	ldr	r3, [r4, #0]
 800f8dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8e0:	6023      	str	r3, [r4, #0]
 800f8e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8e6:	f1ba 0f01 	cmp.w	sl, #1
 800f8ea:	f200 8113 	bhi.w	800fb14 <_scanf_float+0x2a0>
 800f8ee:	455e      	cmp	r6, fp
 800f8f0:	f200 8105 	bhi.w	800fafe <_scanf_float+0x28a>
 800f8f4:	2501      	movs	r5, #1
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	b007      	add	sp, #28
 800f8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f902:	2a0d      	cmp	r2, #13
 800f904:	d8e6      	bhi.n	800f8d4 <_scanf_float+0x60>
 800f906:	a101      	add	r1, pc, #4	; (adr r1, 800f90c <_scanf_float+0x98>)
 800f908:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f90c:	0800fa4b 	.word	0x0800fa4b
 800f910:	0800f8d5 	.word	0x0800f8d5
 800f914:	0800f8d5 	.word	0x0800f8d5
 800f918:	0800f8d5 	.word	0x0800f8d5
 800f91c:	0800faab 	.word	0x0800faab
 800f920:	0800fa83 	.word	0x0800fa83
 800f924:	0800f8d5 	.word	0x0800f8d5
 800f928:	0800f8d5 	.word	0x0800f8d5
 800f92c:	0800fa59 	.word	0x0800fa59
 800f930:	0800f8d5 	.word	0x0800f8d5
 800f934:	0800f8d5 	.word	0x0800f8d5
 800f938:	0800f8d5 	.word	0x0800f8d5
 800f93c:	0800f8d5 	.word	0x0800f8d5
 800f940:	0800fa11 	.word	0x0800fa11
 800f944:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f948:	e7db      	b.n	800f902 <_scanf_float+0x8e>
 800f94a:	290e      	cmp	r1, #14
 800f94c:	d8c2      	bhi.n	800f8d4 <_scanf_float+0x60>
 800f94e:	a001      	add	r0, pc, #4	; (adr r0, 800f954 <_scanf_float+0xe0>)
 800f950:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f954:	0800fa03 	.word	0x0800fa03
 800f958:	0800f8d5 	.word	0x0800f8d5
 800f95c:	0800fa03 	.word	0x0800fa03
 800f960:	0800fa97 	.word	0x0800fa97
 800f964:	0800f8d5 	.word	0x0800f8d5
 800f968:	0800f9b1 	.word	0x0800f9b1
 800f96c:	0800f9ed 	.word	0x0800f9ed
 800f970:	0800f9ed 	.word	0x0800f9ed
 800f974:	0800f9ed 	.word	0x0800f9ed
 800f978:	0800f9ed 	.word	0x0800f9ed
 800f97c:	0800f9ed 	.word	0x0800f9ed
 800f980:	0800f9ed 	.word	0x0800f9ed
 800f984:	0800f9ed 	.word	0x0800f9ed
 800f988:	0800f9ed 	.word	0x0800f9ed
 800f98c:	0800f9ed 	.word	0x0800f9ed
 800f990:	2b6e      	cmp	r3, #110	; 0x6e
 800f992:	d809      	bhi.n	800f9a8 <_scanf_float+0x134>
 800f994:	2b60      	cmp	r3, #96	; 0x60
 800f996:	d8b2      	bhi.n	800f8fe <_scanf_float+0x8a>
 800f998:	2b54      	cmp	r3, #84	; 0x54
 800f99a:	d077      	beq.n	800fa8c <_scanf_float+0x218>
 800f99c:	2b59      	cmp	r3, #89	; 0x59
 800f99e:	d199      	bne.n	800f8d4 <_scanf_float+0x60>
 800f9a0:	2d07      	cmp	r5, #7
 800f9a2:	d197      	bne.n	800f8d4 <_scanf_float+0x60>
 800f9a4:	2508      	movs	r5, #8
 800f9a6:	e029      	b.n	800f9fc <_scanf_float+0x188>
 800f9a8:	2b74      	cmp	r3, #116	; 0x74
 800f9aa:	d06f      	beq.n	800fa8c <_scanf_float+0x218>
 800f9ac:	2b79      	cmp	r3, #121	; 0x79
 800f9ae:	e7f6      	b.n	800f99e <_scanf_float+0x12a>
 800f9b0:	6821      	ldr	r1, [r4, #0]
 800f9b2:	05c8      	lsls	r0, r1, #23
 800f9b4:	d51a      	bpl.n	800f9ec <_scanf_float+0x178>
 800f9b6:	9b02      	ldr	r3, [sp, #8]
 800f9b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f9bc:	6021      	str	r1, [r4, #0]
 800f9be:	f109 0901 	add.w	r9, r9, #1
 800f9c2:	b11b      	cbz	r3, 800f9cc <_scanf_float+0x158>
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	3201      	adds	r2, #1
 800f9c8:	9302      	str	r3, [sp, #8]
 800f9ca:	60a2      	str	r2, [r4, #8]
 800f9cc:	68a3      	ldr	r3, [r4, #8]
 800f9ce:	3b01      	subs	r3, #1
 800f9d0:	60a3      	str	r3, [r4, #8]
 800f9d2:	6923      	ldr	r3, [r4, #16]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	6123      	str	r3, [r4, #16]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	3b01      	subs	r3, #1
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	607b      	str	r3, [r7, #4]
 800f9e0:	f340 8084 	ble.w	800faec <_scanf_float+0x278>
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	603b      	str	r3, [r7, #0]
 800f9ea:	e766      	b.n	800f8ba <_scanf_float+0x46>
 800f9ec:	eb1a 0f05 	cmn.w	sl, r5
 800f9f0:	f47f af70 	bne.w	800f8d4 <_scanf_float+0x60>
 800f9f4:	6822      	ldr	r2, [r4, #0]
 800f9f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f9fa:	6022      	str	r2, [r4, #0]
 800f9fc:	f806 3b01 	strb.w	r3, [r6], #1
 800fa00:	e7e4      	b.n	800f9cc <_scanf_float+0x158>
 800fa02:	6822      	ldr	r2, [r4, #0]
 800fa04:	0610      	lsls	r0, r2, #24
 800fa06:	f57f af65 	bpl.w	800f8d4 <_scanf_float+0x60>
 800fa0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fa0e:	e7f4      	b.n	800f9fa <_scanf_float+0x186>
 800fa10:	f1ba 0f00 	cmp.w	sl, #0
 800fa14:	d10e      	bne.n	800fa34 <_scanf_float+0x1c0>
 800fa16:	f1b9 0f00 	cmp.w	r9, #0
 800fa1a:	d10e      	bne.n	800fa3a <_scanf_float+0x1c6>
 800fa1c:	6822      	ldr	r2, [r4, #0]
 800fa1e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fa22:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fa26:	d108      	bne.n	800fa3a <_scanf_float+0x1c6>
 800fa28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fa2c:	6022      	str	r2, [r4, #0]
 800fa2e:	f04f 0a01 	mov.w	sl, #1
 800fa32:	e7e3      	b.n	800f9fc <_scanf_float+0x188>
 800fa34:	f1ba 0f02 	cmp.w	sl, #2
 800fa38:	d055      	beq.n	800fae6 <_scanf_float+0x272>
 800fa3a:	2d01      	cmp	r5, #1
 800fa3c:	d002      	beq.n	800fa44 <_scanf_float+0x1d0>
 800fa3e:	2d04      	cmp	r5, #4
 800fa40:	f47f af48 	bne.w	800f8d4 <_scanf_float+0x60>
 800fa44:	3501      	adds	r5, #1
 800fa46:	b2ed      	uxtb	r5, r5
 800fa48:	e7d8      	b.n	800f9fc <_scanf_float+0x188>
 800fa4a:	f1ba 0f01 	cmp.w	sl, #1
 800fa4e:	f47f af41 	bne.w	800f8d4 <_scanf_float+0x60>
 800fa52:	f04f 0a02 	mov.w	sl, #2
 800fa56:	e7d1      	b.n	800f9fc <_scanf_float+0x188>
 800fa58:	b97d      	cbnz	r5, 800fa7a <_scanf_float+0x206>
 800fa5a:	f1b9 0f00 	cmp.w	r9, #0
 800fa5e:	f47f af3c 	bne.w	800f8da <_scanf_float+0x66>
 800fa62:	6822      	ldr	r2, [r4, #0]
 800fa64:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fa68:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fa6c:	f47f af39 	bne.w	800f8e2 <_scanf_float+0x6e>
 800fa70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fa74:	6022      	str	r2, [r4, #0]
 800fa76:	2501      	movs	r5, #1
 800fa78:	e7c0      	b.n	800f9fc <_scanf_float+0x188>
 800fa7a:	2d03      	cmp	r5, #3
 800fa7c:	d0e2      	beq.n	800fa44 <_scanf_float+0x1d0>
 800fa7e:	2d05      	cmp	r5, #5
 800fa80:	e7de      	b.n	800fa40 <_scanf_float+0x1cc>
 800fa82:	2d02      	cmp	r5, #2
 800fa84:	f47f af26 	bne.w	800f8d4 <_scanf_float+0x60>
 800fa88:	2503      	movs	r5, #3
 800fa8a:	e7b7      	b.n	800f9fc <_scanf_float+0x188>
 800fa8c:	2d06      	cmp	r5, #6
 800fa8e:	f47f af21 	bne.w	800f8d4 <_scanf_float+0x60>
 800fa92:	2507      	movs	r5, #7
 800fa94:	e7b2      	b.n	800f9fc <_scanf_float+0x188>
 800fa96:	6822      	ldr	r2, [r4, #0]
 800fa98:	0591      	lsls	r1, r2, #22
 800fa9a:	f57f af1b 	bpl.w	800f8d4 <_scanf_float+0x60>
 800fa9e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800faa2:	6022      	str	r2, [r4, #0]
 800faa4:	f8cd 9004 	str.w	r9, [sp, #4]
 800faa8:	e7a8      	b.n	800f9fc <_scanf_float+0x188>
 800faaa:	6822      	ldr	r2, [r4, #0]
 800faac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fab0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fab4:	d006      	beq.n	800fac4 <_scanf_float+0x250>
 800fab6:	0550      	lsls	r0, r2, #21
 800fab8:	f57f af0c 	bpl.w	800f8d4 <_scanf_float+0x60>
 800fabc:	f1b9 0f00 	cmp.w	r9, #0
 800fac0:	f43f af0f 	beq.w	800f8e2 <_scanf_float+0x6e>
 800fac4:	0591      	lsls	r1, r2, #22
 800fac6:	bf58      	it	pl
 800fac8:	9901      	ldrpl	r1, [sp, #4]
 800faca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800face:	bf58      	it	pl
 800fad0:	eba9 0101 	subpl.w	r1, r9, r1
 800fad4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fad8:	bf58      	it	pl
 800fada:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fade:	6022      	str	r2, [r4, #0]
 800fae0:	f04f 0900 	mov.w	r9, #0
 800fae4:	e78a      	b.n	800f9fc <_scanf_float+0x188>
 800fae6:	f04f 0a03 	mov.w	sl, #3
 800faea:	e787      	b.n	800f9fc <_scanf_float+0x188>
 800faec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800faf0:	4639      	mov	r1, r7
 800faf2:	4640      	mov	r0, r8
 800faf4:	4798      	blx	r3
 800faf6:	2800      	cmp	r0, #0
 800faf8:	f43f aedf 	beq.w	800f8ba <_scanf_float+0x46>
 800fafc:	e6ea      	b.n	800f8d4 <_scanf_float+0x60>
 800fafe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb06:	463a      	mov	r2, r7
 800fb08:	4640      	mov	r0, r8
 800fb0a:	4798      	blx	r3
 800fb0c:	6923      	ldr	r3, [r4, #16]
 800fb0e:	3b01      	subs	r3, #1
 800fb10:	6123      	str	r3, [r4, #16]
 800fb12:	e6ec      	b.n	800f8ee <_scanf_float+0x7a>
 800fb14:	1e6b      	subs	r3, r5, #1
 800fb16:	2b06      	cmp	r3, #6
 800fb18:	d825      	bhi.n	800fb66 <_scanf_float+0x2f2>
 800fb1a:	2d02      	cmp	r5, #2
 800fb1c:	d836      	bhi.n	800fb8c <_scanf_float+0x318>
 800fb1e:	455e      	cmp	r6, fp
 800fb20:	f67f aee8 	bls.w	800f8f4 <_scanf_float+0x80>
 800fb24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb2c:	463a      	mov	r2, r7
 800fb2e:	4640      	mov	r0, r8
 800fb30:	4798      	blx	r3
 800fb32:	6923      	ldr	r3, [r4, #16]
 800fb34:	3b01      	subs	r3, #1
 800fb36:	6123      	str	r3, [r4, #16]
 800fb38:	e7f1      	b.n	800fb1e <_scanf_float+0x2aa>
 800fb3a:	9802      	ldr	r0, [sp, #8]
 800fb3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fb44:	9002      	str	r0, [sp, #8]
 800fb46:	463a      	mov	r2, r7
 800fb48:	4640      	mov	r0, r8
 800fb4a:	4798      	blx	r3
 800fb4c:	6923      	ldr	r3, [r4, #16]
 800fb4e:	3b01      	subs	r3, #1
 800fb50:	6123      	str	r3, [r4, #16]
 800fb52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb56:	fa5f fa8a 	uxtb.w	sl, sl
 800fb5a:	f1ba 0f02 	cmp.w	sl, #2
 800fb5e:	d1ec      	bne.n	800fb3a <_scanf_float+0x2c6>
 800fb60:	3d03      	subs	r5, #3
 800fb62:	b2ed      	uxtb	r5, r5
 800fb64:	1b76      	subs	r6, r6, r5
 800fb66:	6823      	ldr	r3, [r4, #0]
 800fb68:	05da      	lsls	r2, r3, #23
 800fb6a:	d52f      	bpl.n	800fbcc <_scanf_float+0x358>
 800fb6c:	055b      	lsls	r3, r3, #21
 800fb6e:	d510      	bpl.n	800fb92 <_scanf_float+0x31e>
 800fb70:	455e      	cmp	r6, fp
 800fb72:	f67f aebf 	bls.w	800f8f4 <_scanf_float+0x80>
 800fb76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb7e:	463a      	mov	r2, r7
 800fb80:	4640      	mov	r0, r8
 800fb82:	4798      	blx	r3
 800fb84:	6923      	ldr	r3, [r4, #16]
 800fb86:	3b01      	subs	r3, #1
 800fb88:	6123      	str	r3, [r4, #16]
 800fb8a:	e7f1      	b.n	800fb70 <_scanf_float+0x2fc>
 800fb8c:	46aa      	mov	sl, r5
 800fb8e:	9602      	str	r6, [sp, #8]
 800fb90:	e7df      	b.n	800fb52 <_scanf_float+0x2de>
 800fb92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fb96:	6923      	ldr	r3, [r4, #16]
 800fb98:	2965      	cmp	r1, #101	; 0x65
 800fb9a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb9e:	f106 35ff 	add.w	r5, r6, #4294967295
 800fba2:	6123      	str	r3, [r4, #16]
 800fba4:	d00c      	beq.n	800fbc0 <_scanf_float+0x34c>
 800fba6:	2945      	cmp	r1, #69	; 0x45
 800fba8:	d00a      	beq.n	800fbc0 <_scanf_float+0x34c>
 800fbaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbae:	463a      	mov	r2, r7
 800fbb0:	4640      	mov	r0, r8
 800fbb2:	4798      	blx	r3
 800fbb4:	6923      	ldr	r3, [r4, #16]
 800fbb6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fbba:	3b01      	subs	r3, #1
 800fbbc:	1eb5      	subs	r5, r6, #2
 800fbbe:	6123      	str	r3, [r4, #16]
 800fbc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbc4:	463a      	mov	r2, r7
 800fbc6:	4640      	mov	r0, r8
 800fbc8:	4798      	blx	r3
 800fbca:	462e      	mov	r6, r5
 800fbcc:	6825      	ldr	r5, [r4, #0]
 800fbce:	f015 0510 	ands.w	r5, r5, #16
 800fbd2:	d159      	bne.n	800fc88 <_scanf_float+0x414>
 800fbd4:	7035      	strb	r5, [r6, #0]
 800fbd6:	6823      	ldr	r3, [r4, #0]
 800fbd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fbdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbe0:	d11b      	bne.n	800fc1a <_scanf_float+0x3a6>
 800fbe2:	9b01      	ldr	r3, [sp, #4]
 800fbe4:	454b      	cmp	r3, r9
 800fbe6:	eba3 0209 	sub.w	r2, r3, r9
 800fbea:	d123      	bne.n	800fc34 <_scanf_float+0x3c0>
 800fbec:	2200      	movs	r2, #0
 800fbee:	4659      	mov	r1, fp
 800fbf0:	4640      	mov	r0, r8
 800fbf2:	f000 ffe3 	bl	8010bbc <_strtod_r>
 800fbf6:	6822      	ldr	r2, [r4, #0]
 800fbf8:	9b03      	ldr	r3, [sp, #12]
 800fbfa:	f012 0f02 	tst.w	r2, #2
 800fbfe:	ec57 6b10 	vmov	r6, r7, d0
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	d021      	beq.n	800fc4a <_scanf_float+0x3d6>
 800fc06:	9903      	ldr	r1, [sp, #12]
 800fc08:	1d1a      	adds	r2, r3, #4
 800fc0a:	600a      	str	r2, [r1, #0]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	e9c3 6700 	strd	r6, r7, [r3]
 800fc12:	68e3      	ldr	r3, [r4, #12]
 800fc14:	3301      	adds	r3, #1
 800fc16:	60e3      	str	r3, [r4, #12]
 800fc18:	e66d      	b.n	800f8f6 <_scanf_float+0x82>
 800fc1a:	9b04      	ldr	r3, [sp, #16]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d0e5      	beq.n	800fbec <_scanf_float+0x378>
 800fc20:	9905      	ldr	r1, [sp, #20]
 800fc22:	230a      	movs	r3, #10
 800fc24:	462a      	mov	r2, r5
 800fc26:	3101      	adds	r1, #1
 800fc28:	4640      	mov	r0, r8
 800fc2a:	f001 f84f 	bl	8010ccc <_strtol_r>
 800fc2e:	9b04      	ldr	r3, [sp, #16]
 800fc30:	9e05      	ldr	r6, [sp, #20]
 800fc32:	1ac2      	subs	r2, r0, r3
 800fc34:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fc38:	429e      	cmp	r6, r3
 800fc3a:	bf28      	it	cs
 800fc3c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fc40:	4912      	ldr	r1, [pc, #72]	; (800fc8c <_scanf_float+0x418>)
 800fc42:	4630      	mov	r0, r6
 800fc44:	f000 f8ee 	bl	800fe24 <siprintf>
 800fc48:	e7d0      	b.n	800fbec <_scanf_float+0x378>
 800fc4a:	9903      	ldr	r1, [sp, #12]
 800fc4c:	f012 0f04 	tst.w	r2, #4
 800fc50:	f103 0204 	add.w	r2, r3, #4
 800fc54:	600a      	str	r2, [r1, #0]
 800fc56:	d1d9      	bne.n	800fc0c <_scanf_float+0x398>
 800fc58:	f8d3 8000 	ldr.w	r8, [r3]
 800fc5c:	ee10 2a10 	vmov	r2, s0
 800fc60:	ee10 0a10 	vmov	r0, s0
 800fc64:	463b      	mov	r3, r7
 800fc66:	4639      	mov	r1, r7
 800fc68:	f7f0 ff80 	bl	8000b6c <__aeabi_dcmpun>
 800fc6c:	b128      	cbz	r0, 800fc7a <_scanf_float+0x406>
 800fc6e:	4808      	ldr	r0, [pc, #32]	; (800fc90 <_scanf_float+0x41c>)
 800fc70:	f000 f89e 	bl	800fdb0 <nanf>
 800fc74:	ed88 0a00 	vstr	s0, [r8]
 800fc78:	e7cb      	b.n	800fc12 <_scanf_float+0x39e>
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	4639      	mov	r1, r7
 800fc7e:	f7f0 ffd3 	bl	8000c28 <__aeabi_d2f>
 800fc82:	f8c8 0000 	str.w	r0, [r8]
 800fc86:	e7c4      	b.n	800fc12 <_scanf_float+0x39e>
 800fc88:	2500      	movs	r5, #0
 800fc8a:	e634      	b.n	800f8f6 <_scanf_float+0x82>
 800fc8c:	0801501a 	.word	0x0801501a
 800fc90:	0801539b 	.word	0x0801539b

0800fc94 <iprintf>:
 800fc94:	b40f      	push	{r0, r1, r2, r3}
 800fc96:	4b0a      	ldr	r3, [pc, #40]	; (800fcc0 <iprintf+0x2c>)
 800fc98:	b513      	push	{r0, r1, r4, lr}
 800fc9a:	681c      	ldr	r4, [r3, #0]
 800fc9c:	b124      	cbz	r4, 800fca8 <iprintf+0x14>
 800fc9e:	69a3      	ldr	r3, [r4, #24]
 800fca0:	b913      	cbnz	r3, 800fca8 <iprintf+0x14>
 800fca2:	4620      	mov	r0, r4
 800fca4:	f002 f88c 	bl	8011dc0 <__sinit>
 800fca8:	ab05      	add	r3, sp, #20
 800fcaa:	9a04      	ldr	r2, [sp, #16]
 800fcac:	68a1      	ldr	r1, [r4, #8]
 800fcae:	9301      	str	r3, [sp, #4]
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	f003 fe3b 	bl	801392c <_vfiprintf_r>
 800fcb6:	b002      	add	sp, #8
 800fcb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcbc:	b004      	add	sp, #16
 800fcbe:	4770      	bx	lr
 800fcc0:	20000110 	.word	0x20000110

0800fcc4 <_puts_r>:
 800fcc4:	b570      	push	{r4, r5, r6, lr}
 800fcc6:	460e      	mov	r6, r1
 800fcc8:	4605      	mov	r5, r0
 800fcca:	b118      	cbz	r0, 800fcd4 <_puts_r+0x10>
 800fccc:	6983      	ldr	r3, [r0, #24]
 800fcce:	b90b      	cbnz	r3, 800fcd4 <_puts_r+0x10>
 800fcd0:	f002 f876 	bl	8011dc0 <__sinit>
 800fcd4:	69ab      	ldr	r3, [r5, #24]
 800fcd6:	68ac      	ldr	r4, [r5, #8]
 800fcd8:	b913      	cbnz	r3, 800fce0 <_puts_r+0x1c>
 800fcda:	4628      	mov	r0, r5
 800fcdc:	f002 f870 	bl	8011dc0 <__sinit>
 800fce0:	4b2c      	ldr	r3, [pc, #176]	; (800fd94 <_puts_r+0xd0>)
 800fce2:	429c      	cmp	r4, r3
 800fce4:	d120      	bne.n	800fd28 <_puts_r+0x64>
 800fce6:	686c      	ldr	r4, [r5, #4]
 800fce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcea:	07db      	lsls	r3, r3, #31
 800fcec:	d405      	bmi.n	800fcfa <_puts_r+0x36>
 800fcee:	89a3      	ldrh	r3, [r4, #12]
 800fcf0:	0598      	lsls	r0, r3, #22
 800fcf2:	d402      	bmi.n	800fcfa <_puts_r+0x36>
 800fcf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcf6:	f002 fc74 	bl	80125e2 <__retarget_lock_acquire_recursive>
 800fcfa:	89a3      	ldrh	r3, [r4, #12]
 800fcfc:	0719      	lsls	r1, r3, #28
 800fcfe:	d51d      	bpl.n	800fd3c <_puts_r+0x78>
 800fd00:	6923      	ldr	r3, [r4, #16]
 800fd02:	b1db      	cbz	r3, 800fd3c <_puts_r+0x78>
 800fd04:	3e01      	subs	r6, #1
 800fd06:	68a3      	ldr	r3, [r4, #8]
 800fd08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fd0c:	3b01      	subs	r3, #1
 800fd0e:	60a3      	str	r3, [r4, #8]
 800fd10:	bb39      	cbnz	r1, 800fd62 <_puts_r+0x9e>
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	da38      	bge.n	800fd88 <_puts_r+0xc4>
 800fd16:	4622      	mov	r2, r4
 800fd18:	210a      	movs	r1, #10
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	f000 ffd8 	bl	8010cd0 <__swbuf_r>
 800fd20:	3001      	adds	r0, #1
 800fd22:	d011      	beq.n	800fd48 <_puts_r+0x84>
 800fd24:	250a      	movs	r5, #10
 800fd26:	e011      	b.n	800fd4c <_puts_r+0x88>
 800fd28:	4b1b      	ldr	r3, [pc, #108]	; (800fd98 <_puts_r+0xd4>)
 800fd2a:	429c      	cmp	r4, r3
 800fd2c:	d101      	bne.n	800fd32 <_puts_r+0x6e>
 800fd2e:	68ac      	ldr	r4, [r5, #8]
 800fd30:	e7da      	b.n	800fce8 <_puts_r+0x24>
 800fd32:	4b1a      	ldr	r3, [pc, #104]	; (800fd9c <_puts_r+0xd8>)
 800fd34:	429c      	cmp	r4, r3
 800fd36:	bf08      	it	eq
 800fd38:	68ec      	ldreq	r4, [r5, #12]
 800fd3a:	e7d5      	b.n	800fce8 <_puts_r+0x24>
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	4628      	mov	r0, r5
 800fd40:	f001 f82a 	bl	8010d98 <__swsetup_r>
 800fd44:	2800      	cmp	r0, #0
 800fd46:	d0dd      	beq.n	800fd04 <_puts_r+0x40>
 800fd48:	f04f 35ff 	mov.w	r5, #4294967295
 800fd4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd4e:	07da      	lsls	r2, r3, #31
 800fd50:	d405      	bmi.n	800fd5e <_puts_r+0x9a>
 800fd52:	89a3      	ldrh	r3, [r4, #12]
 800fd54:	059b      	lsls	r3, r3, #22
 800fd56:	d402      	bmi.n	800fd5e <_puts_r+0x9a>
 800fd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd5a:	f002 fc43 	bl	80125e4 <__retarget_lock_release_recursive>
 800fd5e:	4628      	mov	r0, r5
 800fd60:	bd70      	pop	{r4, r5, r6, pc}
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	da04      	bge.n	800fd70 <_puts_r+0xac>
 800fd66:	69a2      	ldr	r2, [r4, #24]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	dc06      	bgt.n	800fd7a <_puts_r+0xb6>
 800fd6c:	290a      	cmp	r1, #10
 800fd6e:	d004      	beq.n	800fd7a <_puts_r+0xb6>
 800fd70:	6823      	ldr	r3, [r4, #0]
 800fd72:	1c5a      	adds	r2, r3, #1
 800fd74:	6022      	str	r2, [r4, #0]
 800fd76:	7019      	strb	r1, [r3, #0]
 800fd78:	e7c5      	b.n	800fd06 <_puts_r+0x42>
 800fd7a:	4622      	mov	r2, r4
 800fd7c:	4628      	mov	r0, r5
 800fd7e:	f000 ffa7 	bl	8010cd0 <__swbuf_r>
 800fd82:	3001      	adds	r0, #1
 800fd84:	d1bf      	bne.n	800fd06 <_puts_r+0x42>
 800fd86:	e7df      	b.n	800fd48 <_puts_r+0x84>
 800fd88:	6823      	ldr	r3, [r4, #0]
 800fd8a:	250a      	movs	r5, #10
 800fd8c:	1c5a      	adds	r2, r3, #1
 800fd8e:	6022      	str	r2, [r4, #0]
 800fd90:	701d      	strb	r5, [r3, #0]
 800fd92:	e7db      	b.n	800fd4c <_puts_r+0x88>
 800fd94:	08015120 	.word	0x08015120
 800fd98:	08015140 	.word	0x08015140
 800fd9c:	08015100 	.word	0x08015100

0800fda0 <puts>:
 800fda0:	4b02      	ldr	r3, [pc, #8]	; (800fdac <puts+0xc>)
 800fda2:	4601      	mov	r1, r0
 800fda4:	6818      	ldr	r0, [r3, #0]
 800fda6:	f7ff bf8d 	b.w	800fcc4 <_puts_r>
 800fdaa:	bf00      	nop
 800fdac:	20000110 	.word	0x20000110

0800fdb0 <nanf>:
 800fdb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fdb8 <nanf+0x8>
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop
 800fdb8:	7fc00000 	.word	0x7fc00000

0800fdbc <sniprintf>:
 800fdbc:	b40c      	push	{r2, r3}
 800fdbe:	b530      	push	{r4, r5, lr}
 800fdc0:	4b17      	ldr	r3, [pc, #92]	; (800fe20 <sniprintf+0x64>)
 800fdc2:	1e0c      	subs	r4, r1, #0
 800fdc4:	681d      	ldr	r5, [r3, #0]
 800fdc6:	b09d      	sub	sp, #116	; 0x74
 800fdc8:	da08      	bge.n	800fddc <sniprintf+0x20>
 800fdca:	238b      	movs	r3, #139	; 0x8b
 800fdcc:	602b      	str	r3, [r5, #0]
 800fdce:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd2:	b01d      	add	sp, #116	; 0x74
 800fdd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fdd8:	b002      	add	sp, #8
 800fdda:	4770      	bx	lr
 800fddc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fde0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fde4:	bf14      	ite	ne
 800fde6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fdea:	4623      	moveq	r3, r4
 800fdec:	9304      	str	r3, [sp, #16]
 800fdee:	9307      	str	r3, [sp, #28]
 800fdf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdf4:	9002      	str	r0, [sp, #8]
 800fdf6:	9006      	str	r0, [sp, #24]
 800fdf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fdfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fdfe:	ab21      	add	r3, sp, #132	; 0x84
 800fe00:	a902      	add	r1, sp, #8
 800fe02:	4628      	mov	r0, r5
 800fe04:	9301      	str	r3, [sp, #4]
 800fe06:	f003 fa95 	bl	8013334 <_svfiprintf_r>
 800fe0a:	1c43      	adds	r3, r0, #1
 800fe0c:	bfbc      	itt	lt
 800fe0e:	238b      	movlt	r3, #139	; 0x8b
 800fe10:	602b      	strlt	r3, [r5, #0]
 800fe12:	2c00      	cmp	r4, #0
 800fe14:	d0dd      	beq.n	800fdd2 <sniprintf+0x16>
 800fe16:	9b02      	ldr	r3, [sp, #8]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	701a      	strb	r2, [r3, #0]
 800fe1c:	e7d9      	b.n	800fdd2 <sniprintf+0x16>
 800fe1e:	bf00      	nop
 800fe20:	20000110 	.word	0x20000110

0800fe24 <siprintf>:
 800fe24:	b40e      	push	{r1, r2, r3}
 800fe26:	b500      	push	{lr}
 800fe28:	b09c      	sub	sp, #112	; 0x70
 800fe2a:	ab1d      	add	r3, sp, #116	; 0x74
 800fe2c:	9002      	str	r0, [sp, #8]
 800fe2e:	9006      	str	r0, [sp, #24]
 800fe30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fe34:	4809      	ldr	r0, [pc, #36]	; (800fe5c <siprintf+0x38>)
 800fe36:	9107      	str	r1, [sp, #28]
 800fe38:	9104      	str	r1, [sp, #16]
 800fe3a:	4909      	ldr	r1, [pc, #36]	; (800fe60 <siprintf+0x3c>)
 800fe3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe40:	9105      	str	r1, [sp, #20]
 800fe42:	6800      	ldr	r0, [r0, #0]
 800fe44:	9301      	str	r3, [sp, #4]
 800fe46:	a902      	add	r1, sp, #8
 800fe48:	f003 fa74 	bl	8013334 <_svfiprintf_r>
 800fe4c:	9b02      	ldr	r3, [sp, #8]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	701a      	strb	r2, [r3, #0]
 800fe52:	b01c      	add	sp, #112	; 0x70
 800fe54:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe58:	b003      	add	sp, #12
 800fe5a:	4770      	bx	lr
 800fe5c:	20000110 	.word	0x20000110
 800fe60:	ffff0208 	.word	0xffff0208

0800fe64 <siscanf>:
 800fe64:	b40e      	push	{r1, r2, r3}
 800fe66:	b510      	push	{r4, lr}
 800fe68:	b09f      	sub	sp, #124	; 0x7c
 800fe6a:	ac21      	add	r4, sp, #132	; 0x84
 800fe6c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800fe70:	f854 2b04 	ldr.w	r2, [r4], #4
 800fe74:	9201      	str	r2, [sp, #4]
 800fe76:	f8ad 101c 	strh.w	r1, [sp, #28]
 800fe7a:	9004      	str	r0, [sp, #16]
 800fe7c:	9008      	str	r0, [sp, #32]
 800fe7e:	f7f0 f9c1 	bl	8000204 <strlen>
 800fe82:	4b0c      	ldr	r3, [pc, #48]	; (800feb4 <siscanf+0x50>)
 800fe84:	9005      	str	r0, [sp, #20]
 800fe86:	9009      	str	r0, [sp, #36]	; 0x24
 800fe88:	930d      	str	r3, [sp, #52]	; 0x34
 800fe8a:	480b      	ldr	r0, [pc, #44]	; (800feb8 <siscanf+0x54>)
 800fe8c:	9a01      	ldr	r2, [sp, #4]
 800fe8e:	6800      	ldr	r0, [r0, #0]
 800fe90:	9403      	str	r4, [sp, #12]
 800fe92:	2300      	movs	r3, #0
 800fe94:	9311      	str	r3, [sp, #68]	; 0x44
 800fe96:	9316      	str	r3, [sp, #88]	; 0x58
 800fe98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fea0:	a904      	add	r1, sp, #16
 800fea2:	4623      	mov	r3, r4
 800fea4:	f003 fba0 	bl	80135e8 <__ssvfiscanf_r>
 800fea8:	b01f      	add	sp, #124	; 0x7c
 800feaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800feae:	b003      	add	sp, #12
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	0800fedf 	.word	0x0800fedf
 800feb8:	20000110 	.word	0x20000110

0800febc <__sread>:
 800febc:	b510      	push	{r4, lr}
 800febe:	460c      	mov	r4, r1
 800fec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fec4:	f003 ffb4 	bl	8013e30 <_read_r>
 800fec8:	2800      	cmp	r0, #0
 800feca:	bfab      	itete	ge
 800fecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fece:	89a3      	ldrhlt	r3, [r4, #12]
 800fed0:	181b      	addge	r3, r3, r0
 800fed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fed6:	bfac      	ite	ge
 800fed8:	6563      	strge	r3, [r4, #84]	; 0x54
 800feda:	81a3      	strhlt	r3, [r4, #12]
 800fedc:	bd10      	pop	{r4, pc}

0800fede <__seofread>:
 800fede:	2000      	movs	r0, #0
 800fee0:	4770      	bx	lr

0800fee2 <__swrite>:
 800fee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee6:	461f      	mov	r7, r3
 800fee8:	898b      	ldrh	r3, [r1, #12]
 800feea:	05db      	lsls	r3, r3, #23
 800feec:	4605      	mov	r5, r0
 800feee:	460c      	mov	r4, r1
 800fef0:	4616      	mov	r6, r2
 800fef2:	d505      	bpl.n	800ff00 <__swrite+0x1e>
 800fef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fef8:	2302      	movs	r3, #2
 800fefa:	2200      	movs	r2, #0
 800fefc:	f002 fb74 	bl	80125e8 <_lseek_r>
 800ff00:	89a3      	ldrh	r3, [r4, #12]
 800ff02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff0a:	81a3      	strh	r3, [r4, #12]
 800ff0c:	4632      	mov	r2, r6
 800ff0e:	463b      	mov	r3, r7
 800ff10:	4628      	mov	r0, r5
 800ff12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff16:	f000 bf2d 	b.w	8010d74 <_write_r>

0800ff1a <__sseek>:
 800ff1a:	b510      	push	{r4, lr}
 800ff1c:	460c      	mov	r4, r1
 800ff1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff22:	f002 fb61 	bl	80125e8 <_lseek_r>
 800ff26:	1c43      	adds	r3, r0, #1
 800ff28:	89a3      	ldrh	r3, [r4, #12]
 800ff2a:	bf15      	itete	ne
 800ff2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ff2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ff32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ff36:	81a3      	strheq	r3, [r4, #12]
 800ff38:	bf18      	it	ne
 800ff3a:	81a3      	strhne	r3, [r4, #12]
 800ff3c:	bd10      	pop	{r4, pc}

0800ff3e <__sclose>:
 800ff3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff42:	f000 bf97 	b.w	8010e74 <_close_r>

0800ff46 <strstr>:
 800ff46:	780a      	ldrb	r2, [r1, #0]
 800ff48:	b570      	push	{r4, r5, r6, lr}
 800ff4a:	b96a      	cbnz	r2, 800ff68 <strstr+0x22>
 800ff4c:	bd70      	pop	{r4, r5, r6, pc}
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d109      	bne.n	800ff66 <strstr+0x20>
 800ff52:	460c      	mov	r4, r1
 800ff54:	4605      	mov	r5, r0
 800ff56:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d0f6      	beq.n	800ff4c <strstr+0x6>
 800ff5e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ff62:	429e      	cmp	r6, r3
 800ff64:	d0f7      	beq.n	800ff56 <strstr+0x10>
 800ff66:	3001      	adds	r0, #1
 800ff68:	7803      	ldrb	r3, [r0, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d1ef      	bne.n	800ff4e <strstr+0x8>
 800ff6e:	4618      	mov	r0, r3
 800ff70:	e7ec      	b.n	800ff4c <strstr+0x6>

0800ff72 <sulp>:
 800ff72:	b570      	push	{r4, r5, r6, lr}
 800ff74:	4604      	mov	r4, r0
 800ff76:	460d      	mov	r5, r1
 800ff78:	ec45 4b10 	vmov	d0, r4, r5
 800ff7c:	4616      	mov	r6, r2
 800ff7e:	f002 ff37 	bl	8012df0 <__ulp>
 800ff82:	ec51 0b10 	vmov	r0, r1, d0
 800ff86:	b17e      	cbz	r6, 800ffa8 <sulp+0x36>
 800ff88:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ff8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	dd09      	ble.n	800ffa8 <sulp+0x36>
 800ff94:	051b      	lsls	r3, r3, #20
 800ff96:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ff9a:	2400      	movs	r4, #0
 800ff9c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ffa0:	4622      	mov	r2, r4
 800ffa2:	462b      	mov	r3, r5
 800ffa4:	f7f0 fb48 	bl	8000638 <__aeabi_dmul>
 800ffa8:	bd70      	pop	{r4, r5, r6, pc}
 800ffaa:	0000      	movs	r0, r0
 800ffac:	0000      	movs	r0, r0
	...

0800ffb0 <_strtod_l>:
 800ffb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb4:	ed2d 8b02 	vpush	{d8}
 800ffb8:	b09d      	sub	sp, #116	; 0x74
 800ffba:	461f      	mov	r7, r3
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	9318      	str	r3, [sp, #96]	; 0x60
 800ffc0:	4ba2      	ldr	r3, [pc, #648]	; (801024c <_strtod_l+0x29c>)
 800ffc2:	9213      	str	r2, [sp, #76]	; 0x4c
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	9305      	str	r3, [sp, #20]
 800ffc8:	4604      	mov	r4, r0
 800ffca:	4618      	mov	r0, r3
 800ffcc:	4688      	mov	r8, r1
 800ffce:	f7f0 f919 	bl	8000204 <strlen>
 800ffd2:	f04f 0a00 	mov.w	sl, #0
 800ffd6:	4605      	mov	r5, r0
 800ffd8:	f04f 0b00 	mov.w	fp, #0
 800ffdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ffe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ffe2:	781a      	ldrb	r2, [r3, #0]
 800ffe4:	2a2b      	cmp	r2, #43	; 0x2b
 800ffe6:	d04e      	beq.n	8010086 <_strtod_l+0xd6>
 800ffe8:	d83b      	bhi.n	8010062 <_strtod_l+0xb2>
 800ffea:	2a0d      	cmp	r2, #13
 800ffec:	d834      	bhi.n	8010058 <_strtod_l+0xa8>
 800ffee:	2a08      	cmp	r2, #8
 800fff0:	d834      	bhi.n	801005c <_strtod_l+0xac>
 800fff2:	2a00      	cmp	r2, #0
 800fff4:	d03e      	beq.n	8010074 <_strtod_l+0xc4>
 800fff6:	2300      	movs	r3, #0
 800fff8:	930a      	str	r3, [sp, #40]	; 0x28
 800fffa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fffc:	7833      	ldrb	r3, [r6, #0]
 800fffe:	2b30      	cmp	r3, #48	; 0x30
 8010000:	f040 80b0 	bne.w	8010164 <_strtod_l+0x1b4>
 8010004:	7873      	ldrb	r3, [r6, #1]
 8010006:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801000a:	2b58      	cmp	r3, #88	; 0x58
 801000c:	d168      	bne.n	80100e0 <_strtod_l+0x130>
 801000e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010010:	9301      	str	r3, [sp, #4]
 8010012:	ab18      	add	r3, sp, #96	; 0x60
 8010014:	9702      	str	r7, [sp, #8]
 8010016:	9300      	str	r3, [sp, #0]
 8010018:	4a8d      	ldr	r2, [pc, #564]	; (8010250 <_strtod_l+0x2a0>)
 801001a:	ab19      	add	r3, sp, #100	; 0x64
 801001c:	a917      	add	r1, sp, #92	; 0x5c
 801001e:	4620      	mov	r0, r4
 8010020:	f001 ffd2 	bl	8011fc8 <__gethex>
 8010024:	f010 0707 	ands.w	r7, r0, #7
 8010028:	4605      	mov	r5, r0
 801002a:	d005      	beq.n	8010038 <_strtod_l+0x88>
 801002c:	2f06      	cmp	r7, #6
 801002e:	d12c      	bne.n	801008a <_strtod_l+0xda>
 8010030:	3601      	adds	r6, #1
 8010032:	2300      	movs	r3, #0
 8010034:	9617      	str	r6, [sp, #92]	; 0x5c
 8010036:	930a      	str	r3, [sp, #40]	; 0x28
 8010038:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801003a:	2b00      	cmp	r3, #0
 801003c:	f040 8590 	bne.w	8010b60 <_strtod_l+0xbb0>
 8010040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010042:	b1eb      	cbz	r3, 8010080 <_strtod_l+0xd0>
 8010044:	4652      	mov	r2, sl
 8010046:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801004a:	ec43 2b10 	vmov	d0, r2, r3
 801004e:	b01d      	add	sp, #116	; 0x74
 8010050:	ecbd 8b02 	vpop	{d8}
 8010054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010058:	2a20      	cmp	r2, #32
 801005a:	d1cc      	bne.n	800fff6 <_strtod_l+0x46>
 801005c:	3301      	adds	r3, #1
 801005e:	9317      	str	r3, [sp, #92]	; 0x5c
 8010060:	e7be      	b.n	800ffe0 <_strtod_l+0x30>
 8010062:	2a2d      	cmp	r2, #45	; 0x2d
 8010064:	d1c7      	bne.n	800fff6 <_strtod_l+0x46>
 8010066:	2201      	movs	r2, #1
 8010068:	920a      	str	r2, [sp, #40]	; 0x28
 801006a:	1c5a      	adds	r2, r3, #1
 801006c:	9217      	str	r2, [sp, #92]	; 0x5c
 801006e:	785b      	ldrb	r3, [r3, #1]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d1c2      	bne.n	800fffa <_strtod_l+0x4a>
 8010074:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010076:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801007a:	2b00      	cmp	r3, #0
 801007c:	f040 856e 	bne.w	8010b5c <_strtod_l+0xbac>
 8010080:	4652      	mov	r2, sl
 8010082:	465b      	mov	r3, fp
 8010084:	e7e1      	b.n	801004a <_strtod_l+0x9a>
 8010086:	2200      	movs	r2, #0
 8010088:	e7ee      	b.n	8010068 <_strtod_l+0xb8>
 801008a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801008c:	b13a      	cbz	r2, 801009e <_strtod_l+0xee>
 801008e:	2135      	movs	r1, #53	; 0x35
 8010090:	a81a      	add	r0, sp, #104	; 0x68
 8010092:	f002 ffb8 	bl	8013006 <__copybits>
 8010096:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010098:	4620      	mov	r0, r4
 801009a:	f002 fb77 	bl	801278c <_Bfree>
 801009e:	3f01      	subs	r7, #1
 80100a0:	2f04      	cmp	r7, #4
 80100a2:	d806      	bhi.n	80100b2 <_strtod_l+0x102>
 80100a4:	e8df f007 	tbb	[pc, r7]
 80100a8:	1714030a 	.word	0x1714030a
 80100ac:	0a          	.byte	0x0a
 80100ad:	00          	.byte	0x00
 80100ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80100b2:	0728      	lsls	r0, r5, #28
 80100b4:	d5c0      	bpl.n	8010038 <_strtod_l+0x88>
 80100b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80100ba:	e7bd      	b.n	8010038 <_strtod_l+0x88>
 80100bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80100c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80100c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80100c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80100ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80100ce:	e7f0      	b.n	80100b2 <_strtod_l+0x102>
 80100d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010254 <_strtod_l+0x2a4>
 80100d4:	e7ed      	b.n	80100b2 <_strtod_l+0x102>
 80100d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80100da:	f04f 3aff 	mov.w	sl, #4294967295
 80100de:	e7e8      	b.n	80100b2 <_strtod_l+0x102>
 80100e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80100e2:	1c5a      	adds	r2, r3, #1
 80100e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80100e6:	785b      	ldrb	r3, [r3, #1]
 80100e8:	2b30      	cmp	r3, #48	; 0x30
 80100ea:	d0f9      	beq.n	80100e0 <_strtod_l+0x130>
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d0a3      	beq.n	8010038 <_strtod_l+0x88>
 80100f0:	2301      	movs	r3, #1
 80100f2:	f04f 0900 	mov.w	r9, #0
 80100f6:	9304      	str	r3, [sp, #16]
 80100f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80100fa:	9308      	str	r3, [sp, #32]
 80100fc:	f8cd 901c 	str.w	r9, [sp, #28]
 8010100:	464f      	mov	r7, r9
 8010102:	220a      	movs	r2, #10
 8010104:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010106:	7806      	ldrb	r6, [r0, #0]
 8010108:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801010c:	b2d9      	uxtb	r1, r3
 801010e:	2909      	cmp	r1, #9
 8010110:	d92a      	bls.n	8010168 <_strtod_l+0x1b8>
 8010112:	9905      	ldr	r1, [sp, #20]
 8010114:	462a      	mov	r2, r5
 8010116:	f003 feef 	bl	8013ef8 <strncmp>
 801011a:	b398      	cbz	r0, 8010184 <_strtod_l+0x1d4>
 801011c:	2000      	movs	r0, #0
 801011e:	4632      	mov	r2, r6
 8010120:	463d      	mov	r5, r7
 8010122:	9005      	str	r0, [sp, #20]
 8010124:	4603      	mov	r3, r0
 8010126:	2a65      	cmp	r2, #101	; 0x65
 8010128:	d001      	beq.n	801012e <_strtod_l+0x17e>
 801012a:	2a45      	cmp	r2, #69	; 0x45
 801012c:	d118      	bne.n	8010160 <_strtod_l+0x1b0>
 801012e:	b91d      	cbnz	r5, 8010138 <_strtod_l+0x188>
 8010130:	9a04      	ldr	r2, [sp, #16]
 8010132:	4302      	orrs	r2, r0
 8010134:	d09e      	beq.n	8010074 <_strtod_l+0xc4>
 8010136:	2500      	movs	r5, #0
 8010138:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801013c:	f108 0201 	add.w	r2, r8, #1
 8010140:	9217      	str	r2, [sp, #92]	; 0x5c
 8010142:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010146:	2a2b      	cmp	r2, #43	; 0x2b
 8010148:	d075      	beq.n	8010236 <_strtod_l+0x286>
 801014a:	2a2d      	cmp	r2, #45	; 0x2d
 801014c:	d07b      	beq.n	8010246 <_strtod_l+0x296>
 801014e:	f04f 0c00 	mov.w	ip, #0
 8010152:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010156:	2909      	cmp	r1, #9
 8010158:	f240 8082 	bls.w	8010260 <_strtod_l+0x2b0>
 801015c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010160:	2600      	movs	r6, #0
 8010162:	e09d      	b.n	80102a0 <_strtod_l+0x2f0>
 8010164:	2300      	movs	r3, #0
 8010166:	e7c4      	b.n	80100f2 <_strtod_l+0x142>
 8010168:	2f08      	cmp	r7, #8
 801016a:	bfd8      	it	le
 801016c:	9907      	ldrle	r1, [sp, #28]
 801016e:	f100 0001 	add.w	r0, r0, #1
 8010172:	bfda      	itte	le
 8010174:	fb02 3301 	mlale	r3, r2, r1, r3
 8010178:	9307      	strle	r3, [sp, #28]
 801017a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801017e:	3701      	adds	r7, #1
 8010180:	9017      	str	r0, [sp, #92]	; 0x5c
 8010182:	e7bf      	b.n	8010104 <_strtod_l+0x154>
 8010184:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010186:	195a      	adds	r2, r3, r5
 8010188:	9217      	str	r2, [sp, #92]	; 0x5c
 801018a:	5d5a      	ldrb	r2, [r3, r5]
 801018c:	2f00      	cmp	r7, #0
 801018e:	d037      	beq.n	8010200 <_strtod_l+0x250>
 8010190:	9005      	str	r0, [sp, #20]
 8010192:	463d      	mov	r5, r7
 8010194:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010198:	2b09      	cmp	r3, #9
 801019a:	d912      	bls.n	80101c2 <_strtod_l+0x212>
 801019c:	2301      	movs	r3, #1
 801019e:	e7c2      	b.n	8010126 <_strtod_l+0x176>
 80101a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80101a2:	1c5a      	adds	r2, r3, #1
 80101a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80101a6:	785a      	ldrb	r2, [r3, #1]
 80101a8:	3001      	adds	r0, #1
 80101aa:	2a30      	cmp	r2, #48	; 0x30
 80101ac:	d0f8      	beq.n	80101a0 <_strtod_l+0x1f0>
 80101ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80101b2:	2b08      	cmp	r3, #8
 80101b4:	f200 84d9 	bhi.w	8010b6a <_strtod_l+0xbba>
 80101b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80101ba:	9005      	str	r0, [sp, #20]
 80101bc:	2000      	movs	r0, #0
 80101be:	9308      	str	r3, [sp, #32]
 80101c0:	4605      	mov	r5, r0
 80101c2:	3a30      	subs	r2, #48	; 0x30
 80101c4:	f100 0301 	add.w	r3, r0, #1
 80101c8:	d014      	beq.n	80101f4 <_strtod_l+0x244>
 80101ca:	9905      	ldr	r1, [sp, #20]
 80101cc:	4419      	add	r1, r3
 80101ce:	9105      	str	r1, [sp, #20]
 80101d0:	462b      	mov	r3, r5
 80101d2:	eb00 0e05 	add.w	lr, r0, r5
 80101d6:	210a      	movs	r1, #10
 80101d8:	4573      	cmp	r3, lr
 80101da:	d113      	bne.n	8010204 <_strtod_l+0x254>
 80101dc:	182b      	adds	r3, r5, r0
 80101de:	2b08      	cmp	r3, #8
 80101e0:	f105 0501 	add.w	r5, r5, #1
 80101e4:	4405      	add	r5, r0
 80101e6:	dc1c      	bgt.n	8010222 <_strtod_l+0x272>
 80101e8:	9907      	ldr	r1, [sp, #28]
 80101ea:	230a      	movs	r3, #10
 80101ec:	fb03 2301 	mla	r3, r3, r1, r2
 80101f0:	9307      	str	r3, [sp, #28]
 80101f2:	2300      	movs	r3, #0
 80101f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80101f6:	1c51      	adds	r1, r2, #1
 80101f8:	9117      	str	r1, [sp, #92]	; 0x5c
 80101fa:	7852      	ldrb	r2, [r2, #1]
 80101fc:	4618      	mov	r0, r3
 80101fe:	e7c9      	b.n	8010194 <_strtod_l+0x1e4>
 8010200:	4638      	mov	r0, r7
 8010202:	e7d2      	b.n	80101aa <_strtod_l+0x1fa>
 8010204:	2b08      	cmp	r3, #8
 8010206:	dc04      	bgt.n	8010212 <_strtod_l+0x262>
 8010208:	9e07      	ldr	r6, [sp, #28]
 801020a:	434e      	muls	r6, r1
 801020c:	9607      	str	r6, [sp, #28]
 801020e:	3301      	adds	r3, #1
 8010210:	e7e2      	b.n	80101d8 <_strtod_l+0x228>
 8010212:	f103 0c01 	add.w	ip, r3, #1
 8010216:	f1bc 0f10 	cmp.w	ip, #16
 801021a:	bfd8      	it	le
 801021c:	fb01 f909 	mulle.w	r9, r1, r9
 8010220:	e7f5      	b.n	801020e <_strtod_l+0x25e>
 8010222:	2d10      	cmp	r5, #16
 8010224:	bfdc      	itt	le
 8010226:	230a      	movle	r3, #10
 8010228:	fb03 2909 	mlale	r9, r3, r9, r2
 801022c:	e7e1      	b.n	80101f2 <_strtod_l+0x242>
 801022e:	2300      	movs	r3, #0
 8010230:	9305      	str	r3, [sp, #20]
 8010232:	2301      	movs	r3, #1
 8010234:	e77c      	b.n	8010130 <_strtod_l+0x180>
 8010236:	f04f 0c00 	mov.w	ip, #0
 801023a:	f108 0202 	add.w	r2, r8, #2
 801023e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010240:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010244:	e785      	b.n	8010152 <_strtod_l+0x1a2>
 8010246:	f04f 0c01 	mov.w	ip, #1
 801024a:	e7f6      	b.n	801023a <_strtod_l+0x28a>
 801024c:	080151c8 	.word	0x080151c8
 8010250:	08015020 	.word	0x08015020
 8010254:	7ff00000 	.word	0x7ff00000
 8010258:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801025a:	1c51      	adds	r1, r2, #1
 801025c:	9117      	str	r1, [sp, #92]	; 0x5c
 801025e:	7852      	ldrb	r2, [r2, #1]
 8010260:	2a30      	cmp	r2, #48	; 0x30
 8010262:	d0f9      	beq.n	8010258 <_strtod_l+0x2a8>
 8010264:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010268:	2908      	cmp	r1, #8
 801026a:	f63f af79 	bhi.w	8010160 <_strtod_l+0x1b0>
 801026e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010272:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010274:	9206      	str	r2, [sp, #24]
 8010276:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010278:	1c51      	adds	r1, r2, #1
 801027a:	9117      	str	r1, [sp, #92]	; 0x5c
 801027c:	7852      	ldrb	r2, [r2, #1]
 801027e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010282:	2e09      	cmp	r6, #9
 8010284:	d937      	bls.n	80102f6 <_strtod_l+0x346>
 8010286:	9e06      	ldr	r6, [sp, #24]
 8010288:	1b89      	subs	r1, r1, r6
 801028a:	2908      	cmp	r1, #8
 801028c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010290:	dc02      	bgt.n	8010298 <_strtod_l+0x2e8>
 8010292:	4576      	cmp	r6, lr
 8010294:	bfa8      	it	ge
 8010296:	4676      	movge	r6, lr
 8010298:	f1bc 0f00 	cmp.w	ip, #0
 801029c:	d000      	beq.n	80102a0 <_strtod_l+0x2f0>
 801029e:	4276      	negs	r6, r6
 80102a0:	2d00      	cmp	r5, #0
 80102a2:	d14d      	bne.n	8010340 <_strtod_l+0x390>
 80102a4:	9904      	ldr	r1, [sp, #16]
 80102a6:	4301      	orrs	r1, r0
 80102a8:	f47f aec6 	bne.w	8010038 <_strtod_l+0x88>
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	f47f aee1 	bne.w	8010074 <_strtod_l+0xc4>
 80102b2:	2a69      	cmp	r2, #105	; 0x69
 80102b4:	d027      	beq.n	8010306 <_strtod_l+0x356>
 80102b6:	dc24      	bgt.n	8010302 <_strtod_l+0x352>
 80102b8:	2a49      	cmp	r2, #73	; 0x49
 80102ba:	d024      	beq.n	8010306 <_strtod_l+0x356>
 80102bc:	2a4e      	cmp	r2, #78	; 0x4e
 80102be:	f47f aed9 	bne.w	8010074 <_strtod_l+0xc4>
 80102c2:	499f      	ldr	r1, [pc, #636]	; (8010540 <_strtod_l+0x590>)
 80102c4:	a817      	add	r0, sp, #92	; 0x5c
 80102c6:	f002 f8d7 	bl	8012478 <__match>
 80102ca:	2800      	cmp	r0, #0
 80102cc:	f43f aed2 	beq.w	8010074 <_strtod_l+0xc4>
 80102d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	2b28      	cmp	r3, #40	; 0x28
 80102d6:	d12d      	bne.n	8010334 <_strtod_l+0x384>
 80102d8:	499a      	ldr	r1, [pc, #616]	; (8010544 <_strtod_l+0x594>)
 80102da:	aa1a      	add	r2, sp, #104	; 0x68
 80102dc:	a817      	add	r0, sp, #92	; 0x5c
 80102de:	f002 f8df 	bl	80124a0 <__hexnan>
 80102e2:	2805      	cmp	r0, #5
 80102e4:	d126      	bne.n	8010334 <_strtod_l+0x384>
 80102e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80102e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80102ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80102f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80102f4:	e6a0      	b.n	8010038 <_strtod_l+0x88>
 80102f6:	210a      	movs	r1, #10
 80102f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80102fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010300:	e7b9      	b.n	8010276 <_strtod_l+0x2c6>
 8010302:	2a6e      	cmp	r2, #110	; 0x6e
 8010304:	e7db      	b.n	80102be <_strtod_l+0x30e>
 8010306:	4990      	ldr	r1, [pc, #576]	; (8010548 <_strtod_l+0x598>)
 8010308:	a817      	add	r0, sp, #92	; 0x5c
 801030a:	f002 f8b5 	bl	8012478 <__match>
 801030e:	2800      	cmp	r0, #0
 8010310:	f43f aeb0 	beq.w	8010074 <_strtod_l+0xc4>
 8010314:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010316:	498d      	ldr	r1, [pc, #564]	; (801054c <_strtod_l+0x59c>)
 8010318:	3b01      	subs	r3, #1
 801031a:	a817      	add	r0, sp, #92	; 0x5c
 801031c:	9317      	str	r3, [sp, #92]	; 0x5c
 801031e:	f002 f8ab 	bl	8012478 <__match>
 8010322:	b910      	cbnz	r0, 801032a <_strtod_l+0x37a>
 8010324:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010326:	3301      	adds	r3, #1
 8010328:	9317      	str	r3, [sp, #92]	; 0x5c
 801032a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801055c <_strtod_l+0x5ac>
 801032e:	f04f 0a00 	mov.w	sl, #0
 8010332:	e681      	b.n	8010038 <_strtod_l+0x88>
 8010334:	4886      	ldr	r0, [pc, #536]	; (8010550 <_strtod_l+0x5a0>)
 8010336:	f003 fd8f 	bl	8013e58 <nan>
 801033a:	ec5b ab10 	vmov	sl, fp, d0
 801033e:	e67b      	b.n	8010038 <_strtod_l+0x88>
 8010340:	9b05      	ldr	r3, [sp, #20]
 8010342:	9807      	ldr	r0, [sp, #28]
 8010344:	1af3      	subs	r3, r6, r3
 8010346:	2f00      	cmp	r7, #0
 8010348:	bf08      	it	eq
 801034a:	462f      	moveq	r7, r5
 801034c:	2d10      	cmp	r5, #16
 801034e:	9306      	str	r3, [sp, #24]
 8010350:	46a8      	mov	r8, r5
 8010352:	bfa8      	it	ge
 8010354:	f04f 0810 	movge.w	r8, #16
 8010358:	f7f0 f8f4 	bl	8000544 <__aeabi_ui2d>
 801035c:	2d09      	cmp	r5, #9
 801035e:	4682      	mov	sl, r0
 8010360:	468b      	mov	fp, r1
 8010362:	dd13      	ble.n	801038c <_strtod_l+0x3dc>
 8010364:	4b7b      	ldr	r3, [pc, #492]	; (8010554 <_strtod_l+0x5a4>)
 8010366:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801036a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801036e:	f7f0 f963 	bl	8000638 <__aeabi_dmul>
 8010372:	4682      	mov	sl, r0
 8010374:	4648      	mov	r0, r9
 8010376:	468b      	mov	fp, r1
 8010378:	f7f0 f8e4 	bl	8000544 <__aeabi_ui2d>
 801037c:	4602      	mov	r2, r0
 801037e:	460b      	mov	r3, r1
 8010380:	4650      	mov	r0, sl
 8010382:	4659      	mov	r1, fp
 8010384:	f7ef ffa2 	bl	80002cc <__adddf3>
 8010388:	4682      	mov	sl, r0
 801038a:	468b      	mov	fp, r1
 801038c:	2d0f      	cmp	r5, #15
 801038e:	dc38      	bgt.n	8010402 <_strtod_l+0x452>
 8010390:	9b06      	ldr	r3, [sp, #24]
 8010392:	2b00      	cmp	r3, #0
 8010394:	f43f ae50 	beq.w	8010038 <_strtod_l+0x88>
 8010398:	dd24      	ble.n	80103e4 <_strtod_l+0x434>
 801039a:	2b16      	cmp	r3, #22
 801039c:	dc0b      	bgt.n	80103b6 <_strtod_l+0x406>
 801039e:	496d      	ldr	r1, [pc, #436]	; (8010554 <_strtod_l+0x5a4>)
 80103a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80103a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103a8:	4652      	mov	r2, sl
 80103aa:	465b      	mov	r3, fp
 80103ac:	f7f0 f944 	bl	8000638 <__aeabi_dmul>
 80103b0:	4682      	mov	sl, r0
 80103b2:	468b      	mov	fp, r1
 80103b4:	e640      	b.n	8010038 <_strtod_l+0x88>
 80103b6:	9a06      	ldr	r2, [sp, #24]
 80103b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80103bc:	4293      	cmp	r3, r2
 80103be:	db20      	blt.n	8010402 <_strtod_l+0x452>
 80103c0:	4c64      	ldr	r4, [pc, #400]	; (8010554 <_strtod_l+0x5a4>)
 80103c2:	f1c5 050f 	rsb	r5, r5, #15
 80103c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80103ca:	4652      	mov	r2, sl
 80103cc:	465b      	mov	r3, fp
 80103ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103d2:	f7f0 f931 	bl	8000638 <__aeabi_dmul>
 80103d6:	9b06      	ldr	r3, [sp, #24]
 80103d8:	1b5d      	subs	r5, r3, r5
 80103da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80103de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80103e2:	e7e3      	b.n	80103ac <_strtod_l+0x3fc>
 80103e4:	9b06      	ldr	r3, [sp, #24]
 80103e6:	3316      	adds	r3, #22
 80103e8:	db0b      	blt.n	8010402 <_strtod_l+0x452>
 80103ea:	9b05      	ldr	r3, [sp, #20]
 80103ec:	1b9e      	subs	r6, r3, r6
 80103ee:	4b59      	ldr	r3, [pc, #356]	; (8010554 <_strtod_l+0x5a4>)
 80103f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80103f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80103f8:	4650      	mov	r0, sl
 80103fa:	4659      	mov	r1, fp
 80103fc:	f7f0 fa46 	bl	800088c <__aeabi_ddiv>
 8010400:	e7d6      	b.n	80103b0 <_strtod_l+0x400>
 8010402:	9b06      	ldr	r3, [sp, #24]
 8010404:	eba5 0808 	sub.w	r8, r5, r8
 8010408:	4498      	add	r8, r3
 801040a:	f1b8 0f00 	cmp.w	r8, #0
 801040e:	dd74      	ble.n	80104fa <_strtod_l+0x54a>
 8010410:	f018 030f 	ands.w	r3, r8, #15
 8010414:	d00a      	beq.n	801042c <_strtod_l+0x47c>
 8010416:	494f      	ldr	r1, [pc, #316]	; (8010554 <_strtod_l+0x5a4>)
 8010418:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801041c:	4652      	mov	r2, sl
 801041e:	465b      	mov	r3, fp
 8010420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010424:	f7f0 f908 	bl	8000638 <__aeabi_dmul>
 8010428:	4682      	mov	sl, r0
 801042a:	468b      	mov	fp, r1
 801042c:	f038 080f 	bics.w	r8, r8, #15
 8010430:	d04f      	beq.n	80104d2 <_strtod_l+0x522>
 8010432:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010436:	dd22      	ble.n	801047e <_strtod_l+0x4ce>
 8010438:	2500      	movs	r5, #0
 801043a:	462e      	mov	r6, r5
 801043c:	9507      	str	r5, [sp, #28]
 801043e:	9505      	str	r5, [sp, #20]
 8010440:	2322      	movs	r3, #34	; 0x22
 8010442:	f8df b118 	ldr.w	fp, [pc, #280]	; 801055c <_strtod_l+0x5ac>
 8010446:	6023      	str	r3, [r4, #0]
 8010448:	f04f 0a00 	mov.w	sl, #0
 801044c:	9b07      	ldr	r3, [sp, #28]
 801044e:	2b00      	cmp	r3, #0
 8010450:	f43f adf2 	beq.w	8010038 <_strtod_l+0x88>
 8010454:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010456:	4620      	mov	r0, r4
 8010458:	f002 f998 	bl	801278c <_Bfree>
 801045c:	9905      	ldr	r1, [sp, #20]
 801045e:	4620      	mov	r0, r4
 8010460:	f002 f994 	bl	801278c <_Bfree>
 8010464:	4631      	mov	r1, r6
 8010466:	4620      	mov	r0, r4
 8010468:	f002 f990 	bl	801278c <_Bfree>
 801046c:	9907      	ldr	r1, [sp, #28]
 801046e:	4620      	mov	r0, r4
 8010470:	f002 f98c 	bl	801278c <_Bfree>
 8010474:	4629      	mov	r1, r5
 8010476:	4620      	mov	r0, r4
 8010478:	f002 f988 	bl	801278c <_Bfree>
 801047c:	e5dc      	b.n	8010038 <_strtod_l+0x88>
 801047e:	4b36      	ldr	r3, [pc, #216]	; (8010558 <_strtod_l+0x5a8>)
 8010480:	9304      	str	r3, [sp, #16]
 8010482:	2300      	movs	r3, #0
 8010484:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010488:	4650      	mov	r0, sl
 801048a:	4659      	mov	r1, fp
 801048c:	4699      	mov	r9, r3
 801048e:	f1b8 0f01 	cmp.w	r8, #1
 8010492:	dc21      	bgt.n	80104d8 <_strtod_l+0x528>
 8010494:	b10b      	cbz	r3, 801049a <_strtod_l+0x4ea>
 8010496:	4682      	mov	sl, r0
 8010498:	468b      	mov	fp, r1
 801049a:	4b2f      	ldr	r3, [pc, #188]	; (8010558 <_strtod_l+0x5a8>)
 801049c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80104a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80104a4:	4652      	mov	r2, sl
 80104a6:	465b      	mov	r3, fp
 80104a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80104ac:	f7f0 f8c4 	bl	8000638 <__aeabi_dmul>
 80104b0:	4b2a      	ldr	r3, [pc, #168]	; (801055c <_strtod_l+0x5ac>)
 80104b2:	460a      	mov	r2, r1
 80104b4:	400b      	ands	r3, r1
 80104b6:	492a      	ldr	r1, [pc, #168]	; (8010560 <_strtod_l+0x5b0>)
 80104b8:	428b      	cmp	r3, r1
 80104ba:	4682      	mov	sl, r0
 80104bc:	d8bc      	bhi.n	8010438 <_strtod_l+0x488>
 80104be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80104c2:	428b      	cmp	r3, r1
 80104c4:	bf86      	itte	hi
 80104c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010564 <_strtod_l+0x5b4>
 80104ca:	f04f 3aff 	movhi.w	sl, #4294967295
 80104ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80104d2:	2300      	movs	r3, #0
 80104d4:	9304      	str	r3, [sp, #16]
 80104d6:	e084      	b.n	80105e2 <_strtod_l+0x632>
 80104d8:	f018 0f01 	tst.w	r8, #1
 80104dc:	d005      	beq.n	80104ea <_strtod_l+0x53a>
 80104de:	9b04      	ldr	r3, [sp, #16]
 80104e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e4:	f7f0 f8a8 	bl	8000638 <__aeabi_dmul>
 80104e8:	2301      	movs	r3, #1
 80104ea:	9a04      	ldr	r2, [sp, #16]
 80104ec:	3208      	adds	r2, #8
 80104ee:	f109 0901 	add.w	r9, r9, #1
 80104f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80104f6:	9204      	str	r2, [sp, #16]
 80104f8:	e7c9      	b.n	801048e <_strtod_l+0x4de>
 80104fa:	d0ea      	beq.n	80104d2 <_strtod_l+0x522>
 80104fc:	f1c8 0800 	rsb	r8, r8, #0
 8010500:	f018 020f 	ands.w	r2, r8, #15
 8010504:	d00a      	beq.n	801051c <_strtod_l+0x56c>
 8010506:	4b13      	ldr	r3, [pc, #76]	; (8010554 <_strtod_l+0x5a4>)
 8010508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801050c:	4650      	mov	r0, sl
 801050e:	4659      	mov	r1, fp
 8010510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010514:	f7f0 f9ba 	bl	800088c <__aeabi_ddiv>
 8010518:	4682      	mov	sl, r0
 801051a:	468b      	mov	fp, r1
 801051c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010520:	d0d7      	beq.n	80104d2 <_strtod_l+0x522>
 8010522:	f1b8 0f1f 	cmp.w	r8, #31
 8010526:	dd1f      	ble.n	8010568 <_strtod_l+0x5b8>
 8010528:	2500      	movs	r5, #0
 801052a:	462e      	mov	r6, r5
 801052c:	9507      	str	r5, [sp, #28]
 801052e:	9505      	str	r5, [sp, #20]
 8010530:	2322      	movs	r3, #34	; 0x22
 8010532:	f04f 0a00 	mov.w	sl, #0
 8010536:	f04f 0b00 	mov.w	fp, #0
 801053a:	6023      	str	r3, [r4, #0]
 801053c:	e786      	b.n	801044c <_strtod_l+0x49c>
 801053e:	bf00      	nop
 8010540:	08014ff5 	.word	0x08014ff5
 8010544:	08015034 	.word	0x08015034
 8010548:	08014fed 	.word	0x08014fed
 801054c:	08015073 	.word	0x08015073
 8010550:	0801539b 	.word	0x0801539b
 8010554:	08015260 	.word	0x08015260
 8010558:	08015238 	.word	0x08015238
 801055c:	7ff00000 	.word	0x7ff00000
 8010560:	7ca00000 	.word	0x7ca00000
 8010564:	7fefffff 	.word	0x7fefffff
 8010568:	f018 0310 	ands.w	r3, r8, #16
 801056c:	bf18      	it	ne
 801056e:	236a      	movne	r3, #106	; 0x6a
 8010570:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010920 <_strtod_l+0x970>
 8010574:	9304      	str	r3, [sp, #16]
 8010576:	4650      	mov	r0, sl
 8010578:	4659      	mov	r1, fp
 801057a:	2300      	movs	r3, #0
 801057c:	f018 0f01 	tst.w	r8, #1
 8010580:	d004      	beq.n	801058c <_strtod_l+0x5dc>
 8010582:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010586:	f7f0 f857 	bl	8000638 <__aeabi_dmul>
 801058a:	2301      	movs	r3, #1
 801058c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010590:	f109 0908 	add.w	r9, r9, #8
 8010594:	d1f2      	bne.n	801057c <_strtod_l+0x5cc>
 8010596:	b10b      	cbz	r3, 801059c <_strtod_l+0x5ec>
 8010598:	4682      	mov	sl, r0
 801059a:	468b      	mov	fp, r1
 801059c:	9b04      	ldr	r3, [sp, #16]
 801059e:	b1c3      	cbz	r3, 80105d2 <_strtod_l+0x622>
 80105a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80105a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	4659      	mov	r1, fp
 80105ac:	dd11      	ble.n	80105d2 <_strtod_l+0x622>
 80105ae:	2b1f      	cmp	r3, #31
 80105b0:	f340 8124 	ble.w	80107fc <_strtod_l+0x84c>
 80105b4:	2b34      	cmp	r3, #52	; 0x34
 80105b6:	bfde      	ittt	le
 80105b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80105bc:	f04f 33ff 	movle.w	r3, #4294967295
 80105c0:	fa03 f202 	lslle.w	r2, r3, r2
 80105c4:	f04f 0a00 	mov.w	sl, #0
 80105c8:	bfcc      	ite	gt
 80105ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80105ce:	ea02 0b01 	andle.w	fp, r2, r1
 80105d2:	2200      	movs	r2, #0
 80105d4:	2300      	movs	r3, #0
 80105d6:	4650      	mov	r0, sl
 80105d8:	4659      	mov	r1, fp
 80105da:	f7f0 fa95 	bl	8000b08 <__aeabi_dcmpeq>
 80105de:	2800      	cmp	r0, #0
 80105e0:	d1a2      	bne.n	8010528 <_strtod_l+0x578>
 80105e2:	9b07      	ldr	r3, [sp, #28]
 80105e4:	9300      	str	r3, [sp, #0]
 80105e6:	9908      	ldr	r1, [sp, #32]
 80105e8:	462b      	mov	r3, r5
 80105ea:	463a      	mov	r2, r7
 80105ec:	4620      	mov	r0, r4
 80105ee:	f002 f935 	bl	801285c <__s2b>
 80105f2:	9007      	str	r0, [sp, #28]
 80105f4:	2800      	cmp	r0, #0
 80105f6:	f43f af1f 	beq.w	8010438 <_strtod_l+0x488>
 80105fa:	9b05      	ldr	r3, [sp, #20]
 80105fc:	1b9e      	subs	r6, r3, r6
 80105fe:	9b06      	ldr	r3, [sp, #24]
 8010600:	2b00      	cmp	r3, #0
 8010602:	bfb4      	ite	lt
 8010604:	4633      	movlt	r3, r6
 8010606:	2300      	movge	r3, #0
 8010608:	930c      	str	r3, [sp, #48]	; 0x30
 801060a:	9b06      	ldr	r3, [sp, #24]
 801060c:	2500      	movs	r5, #0
 801060e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010612:	9312      	str	r3, [sp, #72]	; 0x48
 8010614:	462e      	mov	r6, r5
 8010616:	9b07      	ldr	r3, [sp, #28]
 8010618:	4620      	mov	r0, r4
 801061a:	6859      	ldr	r1, [r3, #4]
 801061c:	f002 f876 	bl	801270c <_Balloc>
 8010620:	9005      	str	r0, [sp, #20]
 8010622:	2800      	cmp	r0, #0
 8010624:	f43f af0c 	beq.w	8010440 <_strtod_l+0x490>
 8010628:	9b07      	ldr	r3, [sp, #28]
 801062a:	691a      	ldr	r2, [r3, #16]
 801062c:	3202      	adds	r2, #2
 801062e:	f103 010c 	add.w	r1, r3, #12
 8010632:	0092      	lsls	r2, r2, #2
 8010634:	300c      	adds	r0, #12
 8010636:	f7fe fc83 	bl	800ef40 <memcpy>
 801063a:	ec4b ab10 	vmov	d0, sl, fp
 801063e:	aa1a      	add	r2, sp, #104	; 0x68
 8010640:	a919      	add	r1, sp, #100	; 0x64
 8010642:	4620      	mov	r0, r4
 8010644:	f002 fc50 	bl	8012ee8 <__d2b>
 8010648:	ec4b ab18 	vmov	d8, sl, fp
 801064c:	9018      	str	r0, [sp, #96]	; 0x60
 801064e:	2800      	cmp	r0, #0
 8010650:	f43f aef6 	beq.w	8010440 <_strtod_l+0x490>
 8010654:	2101      	movs	r1, #1
 8010656:	4620      	mov	r0, r4
 8010658:	f002 f99a 	bl	8012990 <__i2b>
 801065c:	4606      	mov	r6, r0
 801065e:	2800      	cmp	r0, #0
 8010660:	f43f aeee 	beq.w	8010440 <_strtod_l+0x490>
 8010664:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010666:	9904      	ldr	r1, [sp, #16]
 8010668:	2b00      	cmp	r3, #0
 801066a:	bfab      	itete	ge
 801066c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801066e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010670:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010672:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010676:	bfac      	ite	ge
 8010678:	eb03 0902 	addge.w	r9, r3, r2
 801067c:	1ad7      	sublt	r7, r2, r3
 801067e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010680:	eba3 0801 	sub.w	r8, r3, r1
 8010684:	4490      	add	r8, r2
 8010686:	4ba1      	ldr	r3, [pc, #644]	; (801090c <_strtod_l+0x95c>)
 8010688:	f108 38ff 	add.w	r8, r8, #4294967295
 801068c:	4598      	cmp	r8, r3
 801068e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010692:	f280 80c7 	bge.w	8010824 <_strtod_l+0x874>
 8010696:	eba3 0308 	sub.w	r3, r3, r8
 801069a:	2b1f      	cmp	r3, #31
 801069c:	eba2 0203 	sub.w	r2, r2, r3
 80106a0:	f04f 0101 	mov.w	r1, #1
 80106a4:	f300 80b1 	bgt.w	801080a <_strtod_l+0x85a>
 80106a8:	fa01 f303 	lsl.w	r3, r1, r3
 80106ac:	930d      	str	r3, [sp, #52]	; 0x34
 80106ae:	2300      	movs	r3, #0
 80106b0:	9308      	str	r3, [sp, #32]
 80106b2:	eb09 0802 	add.w	r8, r9, r2
 80106b6:	9b04      	ldr	r3, [sp, #16]
 80106b8:	45c1      	cmp	r9, r8
 80106ba:	4417      	add	r7, r2
 80106bc:	441f      	add	r7, r3
 80106be:	464b      	mov	r3, r9
 80106c0:	bfa8      	it	ge
 80106c2:	4643      	movge	r3, r8
 80106c4:	42bb      	cmp	r3, r7
 80106c6:	bfa8      	it	ge
 80106c8:	463b      	movge	r3, r7
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	bfc2      	ittt	gt
 80106ce:	eba8 0803 	subgt.w	r8, r8, r3
 80106d2:	1aff      	subgt	r7, r7, r3
 80106d4:	eba9 0903 	subgt.w	r9, r9, r3
 80106d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106da:	2b00      	cmp	r3, #0
 80106dc:	dd17      	ble.n	801070e <_strtod_l+0x75e>
 80106de:	4631      	mov	r1, r6
 80106e0:	461a      	mov	r2, r3
 80106e2:	4620      	mov	r0, r4
 80106e4:	f002 fa14 	bl	8012b10 <__pow5mult>
 80106e8:	4606      	mov	r6, r0
 80106ea:	2800      	cmp	r0, #0
 80106ec:	f43f aea8 	beq.w	8010440 <_strtod_l+0x490>
 80106f0:	4601      	mov	r1, r0
 80106f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80106f4:	4620      	mov	r0, r4
 80106f6:	f002 f961 	bl	80129bc <__multiply>
 80106fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80106fc:	2800      	cmp	r0, #0
 80106fe:	f43f ae9f 	beq.w	8010440 <_strtod_l+0x490>
 8010702:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010704:	4620      	mov	r0, r4
 8010706:	f002 f841 	bl	801278c <_Bfree>
 801070a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801070c:	9318      	str	r3, [sp, #96]	; 0x60
 801070e:	f1b8 0f00 	cmp.w	r8, #0
 8010712:	f300 808c 	bgt.w	801082e <_strtod_l+0x87e>
 8010716:	9b06      	ldr	r3, [sp, #24]
 8010718:	2b00      	cmp	r3, #0
 801071a:	dd08      	ble.n	801072e <_strtod_l+0x77e>
 801071c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801071e:	9905      	ldr	r1, [sp, #20]
 8010720:	4620      	mov	r0, r4
 8010722:	f002 f9f5 	bl	8012b10 <__pow5mult>
 8010726:	9005      	str	r0, [sp, #20]
 8010728:	2800      	cmp	r0, #0
 801072a:	f43f ae89 	beq.w	8010440 <_strtod_l+0x490>
 801072e:	2f00      	cmp	r7, #0
 8010730:	dd08      	ble.n	8010744 <_strtod_l+0x794>
 8010732:	9905      	ldr	r1, [sp, #20]
 8010734:	463a      	mov	r2, r7
 8010736:	4620      	mov	r0, r4
 8010738:	f002 fa44 	bl	8012bc4 <__lshift>
 801073c:	9005      	str	r0, [sp, #20]
 801073e:	2800      	cmp	r0, #0
 8010740:	f43f ae7e 	beq.w	8010440 <_strtod_l+0x490>
 8010744:	f1b9 0f00 	cmp.w	r9, #0
 8010748:	dd08      	ble.n	801075c <_strtod_l+0x7ac>
 801074a:	4631      	mov	r1, r6
 801074c:	464a      	mov	r2, r9
 801074e:	4620      	mov	r0, r4
 8010750:	f002 fa38 	bl	8012bc4 <__lshift>
 8010754:	4606      	mov	r6, r0
 8010756:	2800      	cmp	r0, #0
 8010758:	f43f ae72 	beq.w	8010440 <_strtod_l+0x490>
 801075c:	9a05      	ldr	r2, [sp, #20]
 801075e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010760:	4620      	mov	r0, r4
 8010762:	f002 fabb 	bl	8012cdc <__mdiff>
 8010766:	4605      	mov	r5, r0
 8010768:	2800      	cmp	r0, #0
 801076a:	f43f ae69 	beq.w	8010440 <_strtod_l+0x490>
 801076e:	68c3      	ldr	r3, [r0, #12]
 8010770:	930b      	str	r3, [sp, #44]	; 0x2c
 8010772:	2300      	movs	r3, #0
 8010774:	60c3      	str	r3, [r0, #12]
 8010776:	4631      	mov	r1, r6
 8010778:	f002 fa94 	bl	8012ca4 <__mcmp>
 801077c:	2800      	cmp	r0, #0
 801077e:	da60      	bge.n	8010842 <_strtod_l+0x892>
 8010780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010782:	ea53 030a 	orrs.w	r3, r3, sl
 8010786:	f040 8082 	bne.w	801088e <_strtod_l+0x8de>
 801078a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801078e:	2b00      	cmp	r3, #0
 8010790:	d17d      	bne.n	801088e <_strtod_l+0x8de>
 8010792:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010796:	0d1b      	lsrs	r3, r3, #20
 8010798:	051b      	lsls	r3, r3, #20
 801079a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801079e:	d976      	bls.n	801088e <_strtod_l+0x8de>
 80107a0:	696b      	ldr	r3, [r5, #20]
 80107a2:	b913      	cbnz	r3, 80107aa <_strtod_l+0x7fa>
 80107a4:	692b      	ldr	r3, [r5, #16]
 80107a6:	2b01      	cmp	r3, #1
 80107a8:	dd71      	ble.n	801088e <_strtod_l+0x8de>
 80107aa:	4629      	mov	r1, r5
 80107ac:	2201      	movs	r2, #1
 80107ae:	4620      	mov	r0, r4
 80107b0:	f002 fa08 	bl	8012bc4 <__lshift>
 80107b4:	4631      	mov	r1, r6
 80107b6:	4605      	mov	r5, r0
 80107b8:	f002 fa74 	bl	8012ca4 <__mcmp>
 80107bc:	2800      	cmp	r0, #0
 80107be:	dd66      	ble.n	801088e <_strtod_l+0x8de>
 80107c0:	9904      	ldr	r1, [sp, #16]
 80107c2:	4a53      	ldr	r2, [pc, #332]	; (8010910 <_strtod_l+0x960>)
 80107c4:	465b      	mov	r3, fp
 80107c6:	2900      	cmp	r1, #0
 80107c8:	f000 8081 	beq.w	80108ce <_strtod_l+0x91e>
 80107cc:	ea02 010b 	and.w	r1, r2, fp
 80107d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80107d4:	dc7b      	bgt.n	80108ce <_strtod_l+0x91e>
 80107d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80107da:	f77f aea9 	ble.w	8010530 <_strtod_l+0x580>
 80107de:	4b4d      	ldr	r3, [pc, #308]	; (8010914 <_strtod_l+0x964>)
 80107e0:	4650      	mov	r0, sl
 80107e2:	4659      	mov	r1, fp
 80107e4:	2200      	movs	r2, #0
 80107e6:	f7ef ff27 	bl	8000638 <__aeabi_dmul>
 80107ea:	460b      	mov	r3, r1
 80107ec:	4303      	orrs	r3, r0
 80107ee:	bf08      	it	eq
 80107f0:	2322      	moveq	r3, #34	; 0x22
 80107f2:	4682      	mov	sl, r0
 80107f4:	468b      	mov	fp, r1
 80107f6:	bf08      	it	eq
 80107f8:	6023      	streq	r3, [r4, #0]
 80107fa:	e62b      	b.n	8010454 <_strtod_l+0x4a4>
 80107fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010800:	fa02 f303 	lsl.w	r3, r2, r3
 8010804:	ea03 0a0a 	and.w	sl, r3, sl
 8010808:	e6e3      	b.n	80105d2 <_strtod_l+0x622>
 801080a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801080e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010812:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010816:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801081a:	fa01 f308 	lsl.w	r3, r1, r8
 801081e:	9308      	str	r3, [sp, #32]
 8010820:	910d      	str	r1, [sp, #52]	; 0x34
 8010822:	e746      	b.n	80106b2 <_strtod_l+0x702>
 8010824:	2300      	movs	r3, #0
 8010826:	9308      	str	r3, [sp, #32]
 8010828:	2301      	movs	r3, #1
 801082a:	930d      	str	r3, [sp, #52]	; 0x34
 801082c:	e741      	b.n	80106b2 <_strtod_l+0x702>
 801082e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010830:	4642      	mov	r2, r8
 8010832:	4620      	mov	r0, r4
 8010834:	f002 f9c6 	bl	8012bc4 <__lshift>
 8010838:	9018      	str	r0, [sp, #96]	; 0x60
 801083a:	2800      	cmp	r0, #0
 801083c:	f47f af6b 	bne.w	8010716 <_strtod_l+0x766>
 8010840:	e5fe      	b.n	8010440 <_strtod_l+0x490>
 8010842:	465f      	mov	r7, fp
 8010844:	d16e      	bne.n	8010924 <_strtod_l+0x974>
 8010846:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010848:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801084c:	b342      	cbz	r2, 80108a0 <_strtod_l+0x8f0>
 801084e:	4a32      	ldr	r2, [pc, #200]	; (8010918 <_strtod_l+0x968>)
 8010850:	4293      	cmp	r3, r2
 8010852:	d128      	bne.n	80108a6 <_strtod_l+0x8f6>
 8010854:	9b04      	ldr	r3, [sp, #16]
 8010856:	4651      	mov	r1, sl
 8010858:	b1eb      	cbz	r3, 8010896 <_strtod_l+0x8e6>
 801085a:	4b2d      	ldr	r3, [pc, #180]	; (8010910 <_strtod_l+0x960>)
 801085c:	403b      	ands	r3, r7
 801085e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010862:	f04f 32ff 	mov.w	r2, #4294967295
 8010866:	d819      	bhi.n	801089c <_strtod_l+0x8ec>
 8010868:	0d1b      	lsrs	r3, r3, #20
 801086a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801086e:	fa02 f303 	lsl.w	r3, r2, r3
 8010872:	4299      	cmp	r1, r3
 8010874:	d117      	bne.n	80108a6 <_strtod_l+0x8f6>
 8010876:	4b29      	ldr	r3, [pc, #164]	; (801091c <_strtod_l+0x96c>)
 8010878:	429f      	cmp	r7, r3
 801087a:	d102      	bne.n	8010882 <_strtod_l+0x8d2>
 801087c:	3101      	adds	r1, #1
 801087e:	f43f addf 	beq.w	8010440 <_strtod_l+0x490>
 8010882:	4b23      	ldr	r3, [pc, #140]	; (8010910 <_strtod_l+0x960>)
 8010884:	403b      	ands	r3, r7
 8010886:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801088a:	f04f 0a00 	mov.w	sl, #0
 801088e:	9b04      	ldr	r3, [sp, #16]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d1a4      	bne.n	80107de <_strtod_l+0x82e>
 8010894:	e5de      	b.n	8010454 <_strtod_l+0x4a4>
 8010896:	f04f 33ff 	mov.w	r3, #4294967295
 801089a:	e7ea      	b.n	8010872 <_strtod_l+0x8c2>
 801089c:	4613      	mov	r3, r2
 801089e:	e7e8      	b.n	8010872 <_strtod_l+0x8c2>
 80108a0:	ea53 030a 	orrs.w	r3, r3, sl
 80108a4:	d08c      	beq.n	80107c0 <_strtod_l+0x810>
 80108a6:	9b08      	ldr	r3, [sp, #32]
 80108a8:	b1db      	cbz	r3, 80108e2 <_strtod_l+0x932>
 80108aa:	423b      	tst	r3, r7
 80108ac:	d0ef      	beq.n	801088e <_strtod_l+0x8de>
 80108ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108b0:	9a04      	ldr	r2, [sp, #16]
 80108b2:	4650      	mov	r0, sl
 80108b4:	4659      	mov	r1, fp
 80108b6:	b1c3      	cbz	r3, 80108ea <_strtod_l+0x93a>
 80108b8:	f7ff fb5b 	bl	800ff72 <sulp>
 80108bc:	4602      	mov	r2, r0
 80108be:	460b      	mov	r3, r1
 80108c0:	ec51 0b18 	vmov	r0, r1, d8
 80108c4:	f7ef fd02 	bl	80002cc <__adddf3>
 80108c8:	4682      	mov	sl, r0
 80108ca:	468b      	mov	fp, r1
 80108cc:	e7df      	b.n	801088e <_strtod_l+0x8de>
 80108ce:	4013      	ands	r3, r2
 80108d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80108d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80108d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80108dc:	f04f 3aff 	mov.w	sl, #4294967295
 80108e0:	e7d5      	b.n	801088e <_strtod_l+0x8de>
 80108e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108e4:	ea13 0f0a 	tst.w	r3, sl
 80108e8:	e7e0      	b.n	80108ac <_strtod_l+0x8fc>
 80108ea:	f7ff fb42 	bl	800ff72 <sulp>
 80108ee:	4602      	mov	r2, r0
 80108f0:	460b      	mov	r3, r1
 80108f2:	ec51 0b18 	vmov	r0, r1, d8
 80108f6:	f7ef fce7 	bl	80002c8 <__aeabi_dsub>
 80108fa:	2200      	movs	r2, #0
 80108fc:	2300      	movs	r3, #0
 80108fe:	4682      	mov	sl, r0
 8010900:	468b      	mov	fp, r1
 8010902:	f7f0 f901 	bl	8000b08 <__aeabi_dcmpeq>
 8010906:	2800      	cmp	r0, #0
 8010908:	d0c1      	beq.n	801088e <_strtod_l+0x8de>
 801090a:	e611      	b.n	8010530 <_strtod_l+0x580>
 801090c:	fffffc02 	.word	0xfffffc02
 8010910:	7ff00000 	.word	0x7ff00000
 8010914:	39500000 	.word	0x39500000
 8010918:	000fffff 	.word	0x000fffff
 801091c:	7fefffff 	.word	0x7fefffff
 8010920:	08015048 	.word	0x08015048
 8010924:	4631      	mov	r1, r6
 8010926:	4628      	mov	r0, r5
 8010928:	f002 fb3a 	bl	8012fa0 <__ratio>
 801092c:	ec59 8b10 	vmov	r8, r9, d0
 8010930:	ee10 0a10 	vmov	r0, s0
 8010934:	2200      	movs	r2, #0
 8010936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801093a:	4649      	mov	r1, r9
 801093c:	f7f0 f8f8 	bl	8000b30 <__aeabi_dcmple>
 8010940:	2800      	cmp	r0, #0
 8010942:	d07a      	beq.n	8010a3a <_strtod_l+0xa8a>
 8010944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010946:	2b00      	cmp	r3, #0
 8010948:	d04a      	beq.n	80109e0 <_strtod_l+0xa30>
 801094a:	4b95      	ldr	r3, [pc, #596]	; (8010ba0 <_strtod_l+0xbf0>)
 801094c:	2200      	movs	r2, #0
 801094e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010952:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010ba0 <_strtod_l+0xbf0>
 8010956:	f04f 0800 	mov.w	r8, #0
 801095a:	4b92      	ldr	r3, [pc, #584]	; (8010ba4 <_strtod_l+0xbf4>)
 801095c:	403b      	ands	r3, r7
 801095e:	930d      	str	r3, [sp, #52]	; 0x34
 8010960:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010962:	4b91      	ldr	r3, [pc, #580]	; (8010ba8 <_strtod_l+0xbf8>)
 8010964:	429a      	cmp	r2, r3
 8010966:	f040 80b0 	bne.w	8010aca <_strtod_l+0xb1a>
 801096a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801096e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010972:	ec4b ab10 	vmov	d0, sl, fp
 8010976:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801097a:	f002 fa39 	bl	8012df0 <__ulp>
 801097e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010982:	ec53 2b10 	vmov	r2, r3, d0
 8010986:	f7ef fe57 	bl	8000638 <__aeabi_dmul>
 801098a:	4652      	mov	r2, sl
 801098c:	465b      	mov	r3, fp
 801098e:	f7ef fc9d 	bl	80002cc <__adddf3>
 8010992:	460b      	mov	r3, r1
 8010994:	4983      	ldr	r1, [pc, #524]	; (8010ba4 <_strtod_l+0xbf4>)
 8010996:	4a85      	ldr	r2, [pc, #532]	; (8010bac <_strtod_l+0xbfc>)
 8010998:	4019      	ands	r1, r3
 801099a:	4291      	cmp	r1, r2
 801099c:	4682      	mov	sl, r0
 801099e:	d960      	bls.n	8010a62 <_strtod_l+0xab2>
 80109a0:	ee18 3a90 	vmov	r3, s17
 80109a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80109a8:	4293      	cmp	r3, r2
 80109aa:	d104      	bne.n	80109b6 <_strtod_l+0xa06>
 80109ac:	ee18 3a10 	vmov	r3, s16
 80109b0:	3301      	adds	r3, #1
 80109b2:	f43f ad45 	beq.w	8010440 <_strtod_l+0x490>
 80109b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010bb8 <_strtod_l+0xc08>
 80109ba:	f04f 3aff 	mov.w	sl, #4294967295
 80109be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80109c0:	4620      	mov	r0, r4
 80109c2:	f001 fee3 	bl	801278c <_Bfree>
 80109c6:	9905      	ldr	r1, [sp, #20]
 80109c8:	4620      	mov	r0, r4
 80109ca:	f001 fedf 	bl	801278c <_Bfree>
 80109ce:	4631      	mov	r1, r6
 80109d0:	4620      	mov	r0, r4
 80109d2:	f001 fedb 	bl	801278c <_Bfree>
 80109d6:	4629      	mov	r1, r5
 80109d8:	4620      	mov	r0, r4
 80109da:	f001 fed7 	bl	801278c <_Bfree>
 80109de:	e61a      	b.n	8010616 <_strtod_l+0x666>
 80109e0:	f1ba 0f00 	cmp.w	sl, #0
 80109e4:	d11b      	bne.n	8010a1e <_strtod_l+0xa6e>
 80109e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80109ea:	b9f3      	cbnz	r3, 8010a2a <_strtod_l+0xa7a>
 80109ec:	4b6c      	ldr	r3, [pc, #432]	; (8010ba0 <_strtod_l+0xbf0>)
 80109ee:	2200      	movs	r2, #0
 80109f0:	4640      	mov	r0, r8
 80109f2:	4649      	mov	r1, r9
 80109f4:	f7f0 f892 	bl	8000b1c <__aeabi_dcmplt>
 80109f8:	b9d0      	cbnz	r0, 8010a30 <_strtod_l+0xa80>
 80109fa:	4640      	mov	r0, r8
 80109fc:	4649      	mov	r1, r9
 80109fe:	4b6c      	ldr	r3, [pc, #432]	; (8010bb0 <_strtod_l+0xc00>)
 8010a00:	2200      	movs	r2, #0
 8010a02:	f7ef fe19 	bl	8000638 <__aeabi_dmul>
 8010a06:	4680      	mov	r8, r0
 8010a08:	4689      	mov	r9, r1
 8010a0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010a0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010a12:	9315      	str	r3, [sp, #84]	; 0x54
 8010a14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010a18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010a1c:	e79d      	b.n	801095a <_strtod_l+0x9aa>
 8010a1e:	f1ba 0f01 	cmp.w	sl, #1
 8010a22:	d102      	bne.n	8010a2a <_strtod_l+0xa7a>
 8010a24:	2f00      	cmp	r7, #0
 8010a26:	f43f ad83 	beq.w	8010530 <_strtod_l+0x580>
 8010a2a:	4b62      	ldr	r3, [pc, #392]	; (8010bb4 <_strtod_l+0xc04>)
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	e78e      	b.n	801094e <_strtod_l+0x99e>
 8010a30:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010bb0 <_strtod_l+0xc00>
 8010a34:	f04f 0800 	mov.w	r8, #0
 8010a38:	e7e7      	b.n	8010a0a <_strtod_l+0xa5a>
 8010a3a:	4b5d      	ldr	r3, [pc, #372]	; (8010bb0 <_strtod_l+0xc00>)
 8010a3c:	4640      	mov	r0, r8
 8010a3e:	4649      	mov	r1, r9
 8010a40:	2200      	movs	r2, #0
 8010a42:	f7ef fdf9 	bl	8000638 <__aeabi_dmul>
 8010a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a48:	4680      	mov	r8, r0
 8010a4a:	4689      	mov	r9, r1
 8010a4c:	b933      	cbnz	r3, 8010a5c <_strtod_l+0xaac>
 8010a4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a52:	900e      	str	r0, [sp, #56]	; 0x38
 8010a54:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010a5a:	e7dd      	b.n	8010a18 <_strtod_l+0xa68>
 8010a5c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010a60:	e7f9      	b.n	8010a56 <_strtod_l+0xaa6>
 8010a62:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010a66:	9b04      	ldr	r3, [sp, #16]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d1a8      	bne.n	80109be <_strtod_l+0xa0e>
 8010a6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010a70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a72:	0d1b      	lsrs	r3, r3, #20
 8010a74:	051b      	lsls	r3, r3, #20
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d1a1      	bne.n	80109be <_strtod_l+0xa0e>
 8010a7a:	4640      	mov	r0, r8
 8010a7c:	4649      	mov	r1, r9
 8010a7e:	f7f0 f93b 	bl	8000cf8 <__aeabi_d2lz>
 8010a82:	f7ef fdab 	bl	80005dc <__aeabi_l2d>
 8010a86:	4602      	mov	r2, r0
 8010a88:	460b      	mov	r3, r1
 8010a8a:	4640      	mov	r0, r8
 8010a8c:	4649      	mov	r1, r9
 8010a8e:	f7ef fc1b 	bl	80002c8 <__aeabi_dsub>
 8010a92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a98:	ea43 030a 	orr.w	r3, r3, sl
 8010a9c:	4313      	orrs	r3, r2
 8010a9e:	4680      	mov	r8, r0
 8010aa0:	4689      	mov	r9, r1
 8010aa2:	d055      	beq.n	8010b50 <_strtod_l+0xba0>
 8010aa4:	a336      	add	r3, pc, #216	; (adr r3, 8010b80 <_strtod_l+0xbd0>)
 8010aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aaa:	f7f0 f837 	bl	8000b1c <__aeabi_dcmplt>
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	f47f acd0 	bne.w	8010454 <_strtod_l+0x4a4>
 8010ab4:	a334      	add	r3, pc, #208	; (adr r3, 8010b88 <_strtod_l+0xbd8>)
 8010ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aba:	4640      	mov	r0, r8
 8010abc:	4649      	mov	r1, r9
 8010abe:	f7f0 f84b 	bl	8000b58 <__aeabi_dcmpgt>
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	f43f af7b 	beq.w	80109be <_strtod_l+0xa0e>
 8010ac8:	e4c4      	b.n	8010454 <_strtod_l+0x4a4>
 8010aca:	9b04      	ldr	r3, [sp, #16]
 8010acc:	b333      	cbz	r3, 8010b1c <_strtod_l+0xb6c>
 8010ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ad0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010ad4:	d822      	bhi.n	8010b1c <_strtod_l+0xb6c>
 8010ad6:	a32e      	add	r3, pc, #184	; (adr r3, 8010b90 <_strtod_l+0xbe0>)
 8010ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010adc:	4640      	mov	r0, r8
 8010ade:	4649      	mov	r1, r9
 8010ae0:	f7f0 f826 	bl	8000b30 <__aeabi_dcmple>
 8010ae4:	b1a0      	cbz	r0, 8010b10 <_strtod_l+0xb60>
 8010ae6:	4649      	mov	r1, r9
 8010ae8:	4640      	mov	r0, r8
 8010aea:	f7f0 f87d 	bl	8000be8 <__aeabi_d2uiz>
 8010aee:	2801      	cmp	r0, #1
 8010af0:	bf38      	it	cc
 8010af2:	2001      	movcc	r0, #1
 8010af4:	f7ef fd26 	bl	8000544 <__aeabi_ui2d>
 8010af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010afa:	4680      	mov	r8, r0
 8010afc:	4689      	mov	r9, r1
 8010afe:	bb23      	cbnz	r3, 8010b4a <_strtod_l+0xb9a>
 8010b00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b04:	9010      	str	r0, [sp, #64]	; 0x40
 8010b06:	9311      	str	r3, [sp, #68]	; 0x44
 8010b08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010b0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010b14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010b18:	1a9b      	subs	r3, r3, r2
 8010b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8010b1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010b20:	eeb0 0a48 	vmov.f32	s0, s16
 8010b24:	eef0 0a68 	vmov.f32	s1, s17
 8010b28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010b2c:	f002 f960 	bl	8012df0 <__ulp>
 8010b30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010b34:	ec53 2b10 	vmov	r2, r3, d0
 8010b38:	f7ef fd7e 	bl	8000638 <__aeabi_dmul>
 8010b3c:	ec53 2b18 	vmov	r2, r3, d8
 8010b40:	f7ef fbc4 	bl	80002cc <__adddf3>
 8010b44:	4682      	mov	sl, r0
 8010b46:	468b      	mov	fp, r1
 8010b48:	e78d      	b.n	8010a66 <_strtod_l+0xab6>
 8010b4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010b4e:	e7db      	b.n	8010b08 <_strtod_l+0xb58>
 8010b50:	a311      	add	r3, pc, #68	; (adr r3, 8010b98 <_strtod_l+0xbe8>)
 8010b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b56:	f7ef ffe1 	bl	8000b1c <__aeabi_dcmplt>
 8010b5a:	e7b2      	b.n	8010ac2 <_strtod_l+0xb12>
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8010b60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010b62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b64:	6013      	str	r3, [r2, #0]
 8010b66:	f7ff ba6b 	b.w	8010040 <_strtod_l+0x90>
 8010b6a:	2a65      	cmp	r2, #101	; 0x65
 8010b6c:	f43f ab5f 	beq.w	801022e <_strtod_l+0x27e>
 8010b70:	2a45      	cmp	r2, #69	; 0x45
 8010b72:	f43f ab5c 	beq.w	801022e <_strtod_l+0x27e>
 8010b76:	2301      	movs	r3, #1
 8010b78:	f7ff bb94 	b.w	80102a4 <_strtod_l+0x2f4>
 8010b7c:	f3af 8000 	nop.w
 8010b80:	94a03595 	.word	0x94a03595
 8010b84:	3fdfffff 	.word	0x3fdfffff
 8010b88:	35afe535 	.word	0x35afe535
 8010b8c:	3fe00000 	.word	0x3fe00000
 8010b90:	ffc00000 	.word	0xffc00000
 8010b94:	41dfffff 	.word	0x41dfffff
 8010b98:	94a03595 	.word	0x94a03595
 8010b9c:	3fcfffff 	.word	0x3fcfffff
 8010ba0:	3ff00000 	.word	0x3ff00000
 8010ba4:	7ff00000 	.word	0x7ff00000
 8010ba8:	7fe00000 	.word	0x7fe00000
 8010bac:	7c9fffff 	.word	0x7c9fffff
 8010bb0:	3fe00000 	.word	0x3fe00000
 8010bb4:	bff00000 	.word	0xbff00000
 8010bb8:	7fefffff 	.word	0x7fefffff

08010bbc <_strtod_r>:
 8010bbc:	4b01      	ldr	r3, [pc, #4]	; (8010bc4 <_strtod_r+0x8>)
 8010bbe:	f7ff b9f7 	b.w	800ffb0 <_strtod_l>
 8010bc2:	bf00      	nop
 8010bc4:	20000178 	.word	0x20000178

08010bc8 <_strtol_l.constprop.0>:
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bce:	d001      	beq.n	8010bd4 <_strtol_l.constprop.0+0xc>
 8010bd0:	2b24      	cmp	r3, #36	; 0x24
 8010bd2:	d906      	bls.n	8010be2 <_strtol_l.constprop.0+0x1a>
 8010bd4:	f7fe f98a 	bl	800eeec <__errno>
 8010bd8:	2316      	movs	r3, #22
 8010bda:	6003      	str	r3, [r0, #0]
 8010bdc:	2000      	movs	r0, #0
 8010bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010be2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010cc8 <_strtol_l.constprop.0+0x100>
 8010be6:	460d      	mov	r5, r1
 8010be8:	462e      	mov	r6, r5
 8010bea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bee:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010bf2:	f017 0708 	ands.w	r7, r7, #8
 8010bf6:	d1f7      	bne.n	8010be8 <_strtol_l.constprop.0+0x20>
 8010bf8:	2c2d      	cmp	r4, #45	; 0x2d
 8010bfa:	d132      	bne.n	8010c62 <_strtol_l.constprop.0+0x9a>
 8010bfc:	782c      	ldrb	r4, [r5, #0]
 8010bfe:	2701      	movs	r7, #1
 8010c00:	1cb5      	adds	r5, r6, #2
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d05b      	beq.n	8010cbe <_strtol_l.constprop.0+0xf6>
 8010c06:	2b10      	cmp	r3, #16
 8010c08:	d109      	bne.n	8010c1e <_strtol_l.constprop.0+0x56>
 8010c0a:	2c30      	cmp	r4, #48	; 0x30
 8010c0c:	d107      	bne.n	8010c1e <_strtol_l.constprop.0+0x56>
 8010c0e:	782c      	ldrb	r4, [r5, #0]
 8010c10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010c14:	2c58      	cmp	r4, #88	; 0x58
 8010c16:	d14d      	bne.n	8010cb4 <_strtol_l.constprop.0+0xec>
 8010c18:	786c      	ldrb	r4, [r5, #1]
 8010c1a:	2310      	movs	r3, #16
 8010c1c:	3502      	adds	r5, #2
 8010c1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010c22:	f108 38ff 	add.w	r8, r8, #4294967295
 8010c26:	f04f 0c00 	mov.w	ip, #0
 8010c2a:	fbb8 f9f3 	udiv	r9, r8, r3
 8010c2e:	4666      	mov	r6, ip
 8010c30:	fb03 8a19 	mls	sl, r3, r9, r8
 8010c34:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010c38:	f1be 0f09 	cmp.w	lr, #9
 8010c3c:	d816      	bhi.n	8010c6c <_strtol_l.constprop.0+0xa4>
 8010c3e:	4674      	mov	r4, lr
 8010c40:	42a3      	cmp	r3, r4
 8010c42:	dd24      	ble.n	8010c8e <_strtol_l.constprop.0+0xc6>
 8010c44:	f1bc 0f00 	cmp.w	ip, #0
 8010c48:	db1e      	blt.n	8010c88 <_strtol_l.constprop.0+0xc0>
 8010c4a:	45b1      	cmp	r9, r6
 8010c4c:	d31c      	bcc.n	8010c88 <_strtol_l.constprop.0+0xc0>
 8010c4e:	d101      	bne.n	8010c54 <_strtol_l.constprop.0+0x8c>
 8010c50:	45a2      	cmp	sl, r4
 8010c52:	db19      	blt.n	8010c88 <_strtol_l.constprop.0+0xc0>
 8010c54:	fb06 4603 	mla	r6, r6, r3, r4
 8010c58:	f04f 0c01 	mov.w	ip, #1
 8010c5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c60:	e7e8      	b.n	8010c34 <_strtol_l.constprop.0+0x6c>
 8010c62:	2c2b      	cmp	r4, #43	; 0x2b
 8010c64:	bf04      	itt	eq
 8010c66:	782c      	ldrbeq	r4, [r5, #0]
 8010c68:	1cb5      	addeq	r5, r6, #2
 8010c6a:	e7ca      	b.n	8010c02 <_strtol_l.constprop.0+0x3a>
 8010c6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010c70:	f1be 0f19 	cmp.w	lr, #25
 8010c74:	d801      	bhi.n	8010c7a <_strtol_l.constprop.0+0xb2>
 8010c76:	3c37      	subs	r4, #55	; 0x37
 8010c78:	e7e2      	b.n	8010c40 <_strtol_l.constprop.0+0x78>
 8010c7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010c7e:	f1be 0f19 	cmp.w	lr, #25
 8010c82:	d804      	bhi.n	8010c8e <_strtol_l.constprop.0+0xc6>
 8010c84:	3c57      	subs	r4, #87	; 0x57
 8010c86:	e7db      	b.n	8010c40 <_strtol_l.constprop.0+0x78>
 8010c88:	f04f 3cff 	mov.w	ip, #4294967295
 8010c8c:	e7e6      	b.n	8010c5c <_strtol_l.constprop.0+0x94>
 8010c8e:	f1bc 0f00 	cmp.w	ip, #0
 8010c92:	da05      	bge.n	8010ca0 <_strtol_l.constprop.0+0xd8>
 8010c94:	2322      	movs	r3, #34	; 0x22
 8010c96:	6003      	str	r3, [r0, #0]
 8010c98:	4646      	mov	r6, r8
 8010c9a:	b942      	cbnz	r2, 8010cae <_strtol_l.constprop.0+0xe6>
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	e79e      	b.n	8010bde <_strtol_l.constprop.0+0x16>
 8010ca0:	b107      	cbz	r7, 8010ca4 <_strtol_l.constprop.0+0xdc>
 8010ca2:	4276      	negs	r6, r6
 8010ca4:	2a00      	cmp	r2, #0
 8010ca6:	d0f9      	beq.n	8010c9c <_strtol_l.constprop.0+0xd4>
 8010ca8:	f1bc 0f00 	cmp.w	ip, #0
 8010cac:	d000      	beq.n	8010cb0 <_strtol_l.constprop.0+0xe8>
 8010cae:	1e69      	subs	r1, r5, #1
 8010cb0:	6011      	str	r1, [r2, #0]
 8010cb2:	e7f3      	b.n	8010c9c <_strtol_l.constprop.0+0xd4>
 8010cb4:	2430      	movs	r4, #48	; 0x30
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d1b1      	bne.n	8010c1e <_strtol_l.constprop.0+0x56>
 8010cba:	2308      	movs	r3, #8
 8010cbc:	e7af      	b.n	8010c1e <_strtol_l.constprop.0+0x56>
 8010cbe:	2c30      	cmp	r4, #48	; 0x30
 8010cc0:	d0a5      	beq.n	8010c0e <_strtol_l.constprop.0+0x46>
 8010cc2:	230a      	movs	r3, #10
 8010cc4:	e7ab      	b.n	8010c1e <_strtol_l.constprop.0+0x56>
 8010cc6:	bf00      	nop
 8010cc8:	08014ee1 	.word	0x08014ee1

08010ccc <_strtol_r>:
 8010ccc:	f7ff bf7c 	b.w	8010bc8 <_strtol_l.constprop.0>

08010cd0 <__swbuf_r>:
 8010cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cd2:	460e      	mov	r6, r1
 8010cd4:	4614      	mov	r4, r2
 8010cd6:	4605      	mov	r5, r0
 8010cd8:	b118      	cbz	r0, 8010ce2 <__swbuf_r+0x12>
 8010cda:	6983      	ldr	r3, [r0, #24]
 8010cdc:	b90b      	cbnz	r3, 8010ce2 <__swbuf_r+0x12>
 8010cde:	f001 f86f 	bl	8011dc0 <__sinit>
 8010ce2:	4b21      	ldr	r3, [pc, #132]	; (8010d68 <__swbuf_r+0x98>)
 8010ce4:	429c      	cmp	r4, r3
 8010ce6:	d12b      	bne.n	8010d40 <__swbuf_r+0x70>
 8010ce8:	686c      	ldr	r4, [r5, #4]
 8010cea:	69a3      	ldr	r3, [r4, #24]
 8010cec:	60a3      	str	r3, [r4, #8]
 8010cee:	89a3      	ldrh	r3, [r4, #12]
 8010cf0:	071a      	lsls	r2, r3, #28
 8010cf2:	d52f      	bpl.n	8010d54 <__swbuf_r+0x84>
 8010cf4:	6923      	ldr	r3, [r4, #16]
 8010cf6:	b36b      	cbz	r3, 8010d54 <__swbuf_r+0x84>
 8010cf8:	6923      	ldr	r3, [r4, #16]
 8010cfa:	6820      	ldr	r0, [r4, #0]
 8010cfc:	1ac0      	subs	r0, r0, r3
 8010cfe:	6963      	ldr	r3, [r4, #20]
 8010d00:	b2f6      	uxtb	r6, r6
 8010d02:	4283      	cmp	r3, r0
 8010d04:	4637      	mov	r7, r6
 8010d06:	dc04      	bgt.n	8010d12 <__swbuf_r+0x42>
 8010d08:	4621      	mov	r1, r4
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	f000 ffc4 	bl	8011c98 <_fflush_r>
 8010d10:	bb30      	cbnz	r0, 8010d60 <__swbuf_r+0x90>
 8010d12:	68a3      	ldr	r3, [r4, #8]
 8010d14:	3b01      	subs	r3, #1
 8010d16:	60a3      	str	r3, [r4, #8]
 8010d18:	6823      	ldr	r3, [r4, #0]
 8010d1a:	1c5a      	adds	r2, r3, #1
 8010d1c:	6022      	str	r2, [r4, #0]
 8010d1e:	701e      	strb	r6, [r3, #0]
 8010d20:	6963      	ldr	r3, [r4, #20]
 8010d22:	3001      	adds	r0, #1
 8010d24:	4283      	cmp	r3, r0
 8010d26:	d004      	beq.n	8010d32 <__swbuf_r+0x62>
 8010d28:	89a3      	ldrh	r3, [r4, #12]
 8010d2a:	07db      	lsls	r3, r3, #31
 8010d2c:	d506      	bpl.n	8010d3c <__swbuf_r+0x6c>
 8010d2e:	2e0a      	cmp	r6, #10
 8010d30:	d104      	bne.n	8010d3c <__swbuf_r+0x6c>
 8010d32:	4621      	mov	r1, r4
 8010d34:	4628      	mov	r0, r5
 8010d36:	f000 ffaf 	bl	8011c98 <_fflush_r>
 8010d3a:	b988      	cbnz	r0, 8010d60 <__swbuf_r+0x90>
 8010d3c:	4638      	mov	r0, r7
 8010d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d40:	4b0a      	ldr	r3, [pc, #40]	; (8010d6c <__swbuf_r+0x9c>)
 8010d42:	429c      	cmp	r4, r3
 8010d44:	d101      	bne.n	8010d4a <__swbuf_r+0x7a>
 8010d46:	68ac      	ldr	r4, [r5, #8]
 8010d48:	e7cf      	b.n	8010cea <__swbuf_r+0x1a>
 8010d4a:	4b09      	ldr	r3, [pc, #36]	; (8010d70 <__swbuf_r+0xa0>)
 8010d4c:	429c      	cmp	r4, r3
 8010d4e:	bf08      	it	eq
 8010d50:	68ec      	ldreq	r4, [r5, #12]
 8010d52:	e7ca      	b.n	8010cea <__swbuf_r+0x1a>
 8010d54:	4621      	mov	r1, r4
 8010d56:	4628      	mov	r0, r5
 8010d58:	f000 f81e 	bl	8010d98 <__swsetup_r>
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	d0cb      	beq.n	8010cf8 <__swbuf_r+0x28>
 8010d60:	f04f 37ff 	mov.w	r7, #4294967295
 8010d64:	e7ea      	b.n	8010d3c <__swbuf_r+0x6c>
 8010d66:	bf00      	nop
 8010d68:	08015120 	.word	0x08015120
 8010d6c:	08015140 	.word	0x08015140
 8010d70:	08015100 	.word	0x08015100

08010d74 <_write_r>:
 8010d74:	b538      	push	{r3, r4, r5, lr}
 8010d76:	4d07      	ldr	r5, [pc, #28]	; (8010d94 <_write_r+0x20>)
 8010d78:	4604      	mov	r4, r0
 8010d7a:	4608      	mov	r0, r1
 8010d7c:	4611      	mov	r1, r2
 8010d7e:	2200      	movs	r2, #0
 8010d80:	602a      	str	r2, [r5, #0]
 8010d82:	461a      	mov	r2, r3
 8010d84:	f7f2 ff40 	bl	8003c08 <_write>
 8010d88:	1c43      	adds	r3, r0, #1
 8010d8a:	d102      	bne.n	8010d92 <_write_r+0x1e>
 8010d8c:	682b      	ldr	r3, [r5, #0]
 8010d8e:	b103      	cbz	r3, 8010d92 <_write_r+0x1e>
 8010d90:	6023      	str	r3, [r4, #0]
 8010d92:	bd38      	pop	{r3, r4, r5, pc}
 8010d94:	200031dc 	.word	0x200031dc

08010d98 <__swsetup_r>:
 8010d98:	4b32      	ldr	r3, [pc, #200]	; (8010e64 <__swsetup_r+0xcc>)
 8010d9a:	b570      	push	{r4, r5, r6, lr}
 8010d9c:	681d      	ldr	r5, [r3, #0]
 8010d9e:	4606      	mov	r6, r0
 8010da0:	460c      	mov	r4, r1
 8010da2:	b125      	cbz	r5, 8010dae <__swsetup_r+0x16>
 8010da4:	69ab      	ldr	r3, [r5, #24]
 8010da6:	b913      	cbnz	r3, 8010dae <__swsetup_r+0x16>
 8010da8:	4628      	mov	r0, r5
 8010daa:	f001 f809 	bl	8011dc0 <__sinit>
 8010dae:	4b2e      	ldr	r3, [pc, #184]	; (8010e68 <__swsetup_r+0xd0>)
 8010db0:	429c      	cmp	r4, r3
 8010db2:	d10f      	bne.n	8010dd4 <__swsetup_r+0x3c>
 8010db4:	686c      	ldr	r4, [r5, #4]
 8010db6:	89a3      	ldrh	r3, [r4, #12]
 8010db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010dbc:	0719      	lsls	r1, r3, #28
 8010dbe:	d42c      	bmi.n	8010e1a <__swsetup_r+0x82>
 8010dc0:	06dd      	lsls	r5, r3, #27
 8010dc2:	d411      	bmi.n	8010de8 <__swsetup_r+0x50>
 8010dc4:	2309      	movs	r3, #9
 8010dc6:	6033      	str	r3, [r6, #0]
 8010dc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010dcc:	81a3      	strh	r3, [r4, #12]
 8010dce:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd2:	e03e      	b.n	8010e52 <__swsetup_r+0xba>
 8010dd4:	4b25      	ldr	r3, [pc, #148]	; (8010e6c <__swsetup_r+0xd4>)
 8010dd6:	429c      	cmp	r4, r3
 8010dd8:	d101      	bne.n	8010dde <__swsetup_r+0x46>
 8010dda:	68ac      	ldr	r4, [r5, #8]
 8010ddc:	e7eb      	b.n	8010db6 <__swsetup_r+0x1e>
 8010dde:	4b24      	ldr	r3, [pc, #144]	; (8010e70 <__swsetup_r+0xd8>)
 8010de0:	429c      	cmp	r4, r3
 8010de2:	bf08      	it	eq
 8010de4:	68ec      	ldreq	r4, [r5, #12]
 8010de6:	e7e6      	b.n	8010db6 <__swsetup_r+0x1e>
 8010de8:	0758      	lsls	r0, r3, #29
 8010dea:	d512      	bpl.n	8010e12 <__swsetup_r+0x7a>
 8010dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010dee:	b141      	cbz	r1, 8010e02 <__swsetup_r+0x6a>
 8010df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010df4:	4299      	cmp	r1, r3
 8010df6:	d002      	beq.n	8010dfe <__swsetup_r+0x66>
 8010df8:	4630      	mov	r0, r6
 8010dfa:	f002 f95f 	bl	80130bc <_free_r>
 8010dfe:	2300      	movs	r3, #0
 8010e00:	6363      	str	r3, [r4, #52]	; 0x34
 8010e02:	89a3      	ldrh	r3, [r4, #12]
 8010e04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010e08:	81a3      	strh	r3, [r4, #12]
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	6063      	str	r3, [r4, #4]
 8010e0e:	6923      	ldr	r3, [r4, #16]
 8010e10:	6023      	str	r3, [r4, #0]
 8010e12:	89a3      	ldrh	r3, [r4, #12]
 8010e14:	f043 0308 	orr.w	r3, r3, #8
 8010e18:	81a3      	strh	r3, [r4, #12]
 8010e1a:	6923      	ldr	r3, [r4, #16]
 8010e1c:	b94b      	cbnz	r3, 8010e32 <__swsetup_r+0x9a>
 8010e1e:	89a3      	ldrh	r3, [r4, #12]
 8010e20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e28:	d003      	beq.n	8010e32 <__swsetup_r+0x9a>
 8010e2a:	4621      	mov	r1, r4
 8010e2c:	4630      	mov	r0, r6
 8010e2e:	f001 fc13 	bl	8012658 <__smakebuf_r>
 8010e32:	89a0      	ldrh	r0, [r4, #12]
 8010e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e38:	f010 0301 	ands.w	r3, r0, #1
 8010e3c:	d00a      	beq.n	8010e54 <__swsetup_r+0xbc>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	60a3      	str	r3, [r4, #8]
 8010e42:	6963      	ldr	r3, [r4, #20]
 8010e44:	425b      	negs	r3, r3
 8010e46:	61a3      	str	r3, [r4, #24]
 8010e48:	6923      	ldr	r3, [r4, #16]
 8010e4a:	b943      	cbnz	r3, 8010e5e <__swsetup_r+0xc6>
 8010e4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010e50:	d1ba      	bne.n	8010dc8 <__swsetup_r+0x30>
 8010e52:	bd70      	pop	{r4, r5, r6, pc}
 8010e54:	0781      	lsls	r1, r0, #30
 8010e56:	bf58      	it	pl
 8010e58:	6963      	ldrpl	r3, [r4, #20]
 8010e5a:	60a3      	str	r3, [r4, #8]
 8010e5c:	e7f4      	b.n	8010e48 <__swsetup_r+0xb0>
 8010e5e:	2000      	movs	r0, #0
 8010e60:	e7f7      	b.n	8010e52 <__swsetup_r+0xba>
 8010e62:	bf00      	nop
 8010e64:	20000110 	.word	0x20000110
 8010e68:	08015120 	.word	0x08015120
 8010e6c:	08015140 	.word	0x08015140
 8010e70:	08015100 	.word	0x08015100

08010e74 <_close_r>:
 8010e74:	b538      	push	{r3, r4, r5, lr}
 8010e76:	4d06      	ldr	r5, [pc, #24]	; (8010e90 <_close_r+0x1c>)
 8010e78:	2300      	movs	r3, #0
 8010e7a:	4604      	mov	r4, r0
 8010e7c:	4608      	mov	r0, r1
 8010e7e:	602b      	str	r3, [r5, #0]
 8010e80:	f7f3 fa83 	bl	800438a <_close>
 8010e84:	1c43      	adds	r3, r0, #1
 8010e86:	d102      	bne.n	8010e8e <_close_r+0x1a>
 8010e88:	682b      	ldr	r3, [r5, #0]
 8010e8a:	b103      	cbz	r3, 8010e8e <_close_r+0x1a>
 8010e8c:	6023      	str	r3, [r4, #0]
 8010e8e:	bd38      	pop	{r3, r4, r5, pc}
 8010e90:	200031dc 	.word	0x200031dc

08010e94 <quorem>:
 8010e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e98:	6903      	ldr	r3, [r0, #16]
 8010e9a:	690c      	ldr	r4, [r1, #16]
 8010e9c:	42a3      	cmp	r3, r4
 8010e9e:	4607      	mov	r7, r0
 8010ea0:	f2c0 8081 	blt.w	8010fa6 <quorem+0x112>
 8010ea4:	3c01      	subs	r4, #1
 8010ea6:	f101 0814 	add.w	r8, r1, #20
 8010eaa:	f100 0514 	add.w	r5, r0, #20
 8010eae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010eb2:	9301      	str	r3, [sp, #4]
 8010eb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010eb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010ec4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010ec8:	fbb2 f6f3 	udiv	r6, r2, r3
 8010ecc:	d331      	bcc.n	8010f32 <quorem+0x9e>
 8010ece:	f04f 0e00 	mov.w	lr, #0
 8010ed2:	4640      	mov	r0, r8
 8010ed4:	46ac      	mov	ip, r5
 8010ed6:	46f2      	mov	sl, lr
 8010ed8:	f850 2b04 	ldr.w	r2, [r0], #4
 8010edc:	b293      	uxth	r3, r2
 8010ede:	fb06 e303 	mla	r3, r6, r3, lr
 8010ee2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	ebaa 0303 	sub.w	r3, sl, r3
 8010eec:	f8dc a000 	ldr.w	sl, [ip]
 8010ef0:	0c12      	lsrs	r2, r2, #16
 8010ef2:	fa13 f38a 	uxtah	r3, r3, sl
 8010ef6:	fb06 e202 	mla	r2, r6, r2, lr
 8010efa:	9300      	str	r3, [sp, #0]
 8010efc:	9b00      	ldr	r3, [sp, #0]
 8010efe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010f02:	b292      	uxth	r2, r2
 8010f04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010f0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010f10:	4581      	cmp	r9, r0
 8010f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f16:	f84c 3b04 	str.w	r3, [ip], #4
 8010f1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010f1e:	d2db      	bcs.n	8010ed8 <quorem+0x44>
 8010f20:	f855 300b 	ldr.w	r3, [r5, fp]
 8010f24:	b92b      	cbnz	r3, 8010f32 <quorem+0x9e>
 8010f26:	9b01      	ldr	r3, [sp, #4]
 8010f28:	3b04      	subs	r3, #4
 8010f2a:	429d      	cmp	r5, r3
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	d32e      	bcc.n	8010f8e <quorem+0xfa>
 8010f30:	613c      	str	r4, [r7, #16]
 8010f32:	4638      	mov	r0, r7
 8010f34:	f001 feb6 	bl	8012ca4 <__mcmp>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	db24      	blt.n	8010f86 <quorem+0xf2>
 8010f3c:	3601      	adds	r6, #1
 8010f3e:	4628      	mov	r0, r5
 8010f40:	f04f 0c00 	mov.w	ip, #0
 8010f44:	f858 2b04 	ldr.w	r2, [r8], #4
 8010f48:	f8d0 e000 	ldr.w	lr, [r0]
 8010f4c:	b293      	uxth	r3, r2
 8010f4e:	ebac 0303 	sub.w	r3, ip, r3
 8010f52:	0c12      	lsrs	r2, r2, #16
 8010f54:	fa13 f38e 	uxtah	r3, r3, lr
 8010f58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010f5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f66:	45c1      	cmp	r9, r8
 8010f68:	f840 3b04 	str.w	r3, [r0], #4
 8010f6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010f70:	d2e8      	bcs.n	8010f44 <quorem+0xb0>
 8010f72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f7a:	b922      	cbnz	r2, 8010f86 <quorem+0xf2>
 8010f7c:	3b04      	subs	r3, #4
 8010f7e:	429d      	cmp	r5, r3
 8010f80:	461a      	mov	r2, r3
 8010f82:	d30a      	bcc.n	8010f9a <quorem+0x106>
 8010f84:	613c      	str	r4, [r7, #16]
 8010f86:	4630      	mov	r0, r6
 8010f88:	b003      	add	sp, #12
 8010f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f8e:	6812      	ldr	r2, [r2, #0]
 8010f90:	3b04      	subs	r3, #4
 8010f92:	2a00      	cmp	r2, #0
 8010f94:	d1cc      	bne.n	8010f30 <quorem+0x9c>
 8010f96:	3c01      	subs	r4, #1
 8010f98:	e7c7      	b.n	8010f2a <quorem+0x96>
 8010f9a:	6812      	ldr	r2, [r2, #0]
 8010f9c:	3b04      	subs	r3, #4
 8010f9e:	2a00      	cmp	r2, #0
 8010fa0:	d1f0      	bne.n	8010f84 <quorem+0xf0>
 8010fa2:	3c01      	subs	r4, #1
 8010fa4:	e7eb      	b.n	8010f7e <quorem+0xea>
 8010fa6:	2000      	movs	r0, #0
 8010fa8:	e7ee      	b.n	8010f88 <quorem+0xf4>
 8010faa:	0000      	movs	r0, r0
 8010fac:	0000      	movs	r0, r0
	...

08010fb0 <_dtoa_r>:
 8010fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb4:	ed2d 8b04 	vpush	{d8-d9}
 8010fb8:	ec57 6b10 	vmov	r6, r7, d0
 8010fbc:	b093      	sub	sp, #76	; 0x4c
 8010fbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010fc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010fc4:	9106      	str	r1, [sp, #24]
 8010fc6:	ee10 aa10 	vmov	sl, s0
 8010fca:	4604      	mov	r4, r0
 8010fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8010fce:	930c      	str	r3, [sp, #48]	; 0x30
 8010fd0:	46bb      	mov	fp, r7
 8010fd2:	b975      	cbnz	r5, 8010ff2 <_dtoa_r+0x42>
 8010fd4:	2010      	movs	r0, #16
 8010fd6:	f001 fb7f 	bl	80126d8 <malloc>
 8010fda:	4602      	mov	r2, r0
 8010fdc:	6260      	str	r0, [r4, #36]	; 0x24
 8010fde:	b920      	cbnz	r0, 8010fea <_dtoa_r+0x3a>
 8010fe0:	4ba7      	ldr	r3, [pc, #668]	; (8011280 <_dtoa_r+0x2d0>)
 8010fe2:	21ea      	movs	r1, #234	; 0xea
 8010fe4:	48a7      	ldr	r0, [pc, #668]	; (8011284 <_dtoa_r+0x2d4>)
 8010fe6:	f003 f857 	bl	8014098 <__assert_func>
 8010fea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010fee:	6005      	str	r5, [r0, #0]
 8010ff0:	60c5      	str	r5, [r0, #12]
 8010ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ff4:	6819      	ldr	r1, [r3, #0]
 8010ff6:	b151      	cbz	r1, 801100e <_dtoa_r+0x5e>
 8010ff8:	685a      	ldr	r2, [r3, #4]
 8010ffa:	604a      	str	r2, [r1, #4]
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	4093      	lsls	r3, r2
 8011000:	608b      	str	r3, [r1, #8]
 8011002:	4620      	mov	r0, r4
 8011004:	f001 fbc2 	bl	801278c <_Bfree>
 8011008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801100a:	2200      	movs	r2, #0
 801100c:	601a      	str	r2, [r3, #0]
 801100e:	1e3b      	subs	r3, r7, #0
 8011010:	bfaa      	itet	ge
 8011012:	2300      	movge	r3, #0
 8011014:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011018:	f8c8 3000 	strge.w	r3, [r8]
 801101c:	4b9a      	ldr	r3, [pc, #616]	; (8011288 <_dtoa_r+0x2d8>)
 801101e:	bfbc      	itt	lt
 8011020:	2201      	movlt	r2, #1
 8011022:	f8c8 2000 	strlt.w	r2, [r8]
 8011026:	ea33 030b 	bics.w	r3, r3, fp
 801102a:	d11b      	bne.n	8011064 <_dtoa_r+0xb4>
 801102c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801102e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011032:	6013      	str	r3, [r2, #0]
 8011034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011038:	4333      	orrs	r3, r6
 801103a:	f000 8592 	beq.w	8011b62 <_dtoa_r+0xbb2>
 801103e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011040:	b963      	cbnz	r3, 801105c <_dtoa_r+0xac>
 8011042:	4b92      	ldr	r3, [pc, #584]	; (801128c <_dtoa_r+0x2dc>)
 8011044:	e022      	b.n	801108c <_dtoa_r+0xdc>
 8011046:	4b92      	ldr	r3, [pc, #584]	; (8011290 <_dtoa_r+0x2e0>)
 8011048:	9301      	str	r3, [sp, #4]
 801104a:	3308      	adds	r3, #8
 801104c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801104e:	6013      	str	r3, [r2, #0]
 8011050:	9801      	ldr	r0, [sp, #4]
 8011052:	b013      	add	sp, #76	; 0x4c
 8011054:	ecbd 8b04 	vpop	{d8-d9}
 8011058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801105c:	4b8b      	ldr	r3, [pc, #556]	; (801128c <_dtoa_r+0x2dc>)
 801105e:	9301      	str	r3, [sp, #4]
 8011060:	3303      	adds	r3, #3
 8011062:	e7f3      	b.n	801104c <_dtoa_r+0x9c>
 8011064:	2200      	movs	r2, #0
 8011066:	2300      	movs	r3, #0
 8011068:	4650      	mov	r0, sl
 801106a:	4659      	mov	r1, fp
 801106c:	f7ef fd4c 	bl	8000b08 <__aeabi_dcmpeq>
 8011070:	ec4b ab19 	vmov	d9, sl, fp
 8011074:	4680      	mov	r8, r0
 8011076:	b158      	cbz	r0, 8011090 <_dtoa_r+0xe0>
 8011078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801107a:	2301      	movs	r3, #1
 801107c:	6013      	str	r3, [r2, #0]
 801107e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011080:	2b00      	cmp	r3, #0
 8011082:	f000 856b 	beq.w	8011b5c <_dtoa_r+0xbac>
 8011086:	4883      	ldr	r0, [pc, #524]	; (8011294 <_dtoa_r+0x2e4>)
 8011088:	6018      	str	r0, [r3, #0]
 801108a:	1e43      	subs	r3, r0, #1
 801108c:	9301      	str	r3, [sp, #4]
 801108e:	e7df      	b.n	8011050 <_dtoa_r+0xa0>
 8011090:	ec4b ab10 	vmov	d0, sl, fp
 8011094:	aa10      	add	r2, sp, #64	; 0x40
 8011096:	a911      	add	r1, sp, #68	; 0x44
 8011098:	4620      	mov	r0, r4
 801109a:	f001 ff25 	bl	8012ee8 <__d2b>
 801109e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80110a2:	ee08 0a10 	vmov	s16, r0
 80110a6:	2d00      	cmp	r5, #0
 80110a8:	f000 8084 	beq.w	80111b4 <_dtoa_r+0x204>
 80110ac:	ee19 3a90 	vmov	r3, s19
 80110b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80110b8:	4656      	mov	r6, sl
 80110ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80110be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80110c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80110c6:	4b74      	ldr	r3, [pc, #464]	; (8011298 <_dtoa_r+0x2e8>)
 80110c8:	2200      	movs	r2, #0
 80110ca:	4630      	mov	r0, r6
 80110cc:	4639      	mov	r1, r7
 80110ce:	f7ef f8fb 	bl	80002c8 <__aeabi_dsub>
 80110d2:	a365      	add	r3, pc, #404	; (adr r3, 8011268 <_dtoa_r+0x2b8>)
 80110d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d8:	f7ef faae 	bl	8000638 <__aeabi_dmul>
 80110dc:	a364      	add	r3, pc, #400	; (adr r3, 8011270 <_dtoa_r+0x2c0>)
 80110de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e2:	f7ef f8f3 	bl	80002cc <__adddf3>
 80110e6:	4606      	mov	r6, r0
 80110e8:	4628      	mov	r0, r5
 80110ea:	460f      	mov	r7, r1
 80110ec:	f7ef fa3a 	bl	8000564 <__aeabi_i2d>
 80110f0:	a361      	add	r3, pc, #388	; (adr r3, 8011278 <_dtoa_r+0x2c8>)
 80110f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f6:	f7ef fa9f 	bl	8000638 <__aeabi_dmul>
 80110fa:	4602      	mov	r2, r0
 80110fc:	460b      	mov	r3, r1
 80110fe:	4630      	mov	r0, r6
 8011100:	4639      	mov	r1, r7
 8011102:	f7ef f8e3 	bl	80002cc <__adddf3>
 8011106:	4606      	mov	r6, r0
 8011108:	460f      	mov	r7, r1
 801110a:	f7ef fd45 	bl	8000b98 <__aeabi_d2iz>
 801110e:	2200      	movs	r2, #0
 8011110:	9000      	str	r0, [sp, #0]
 8011112:	2300      	movs	r3, #0
 8011114:	4630      	mov	r0, r6
 8011116:	4639      	mov	r1, r7
 8011118:	f7ef fd00 	bl	8000b1c <__aeabi_dcmplt>
 801111c:	b150      	cbz	r0, 8011134 <_dtoa_r+0x184>
 801111e:	9800      	ldr	r0, [sp, #0]
 8011120:	f7ef fa20 	bl	8000564 <__aeabi_i2d>
 8011124:	4632      	mov	r2, r6
 8011126:	463b      	mov	r3, r7
 8011128:	f7ef fcee 	bl	8000b08 <__aeabi_dcmpeq>
 801112c:	b910      	cbnz	r0, 8011134 <_dtoa_r+0x184>
 801112e:	9b00      	ldr	r3, [sp, #0]
 8011130:	3b01      	subs	r3, #1
 8011132:	9300      	str	r3, [sp, #0]
 8011134:	9b00      	ldr	r3, [sp, #0]
 8011136:	2b16      	cmp	r3, #22
 8011138:	d85a      	bhi.n	80111f0 <_dtoa_r+0x240>
 801113a:	9a00      	ldr	r2, [sp, #0]
 801113c:	4b57      	ldr	r3, [pc, #348]	; (801129c <_dtoa_r+0x2ec>)
 801113e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011146:	ec51 0b19 	vmov	r0, r1, d9
 801114a:	f7ef fce7 	bl	8000b1c <__aeabi_dcmplt>
 801114e:	2800      	cmp	r0, #0
 8011150:	d050      	beq.n	80111f4 <_dtoa_r+0x244>
 8011152:	9b00      	ldr	r3, [sp, #0]
 8011154:	3b01      	subs	r3, #1
 8011156:	9300      	str	r3, [sp, #0]
 8011158:	2300      	movs	r3, #0
 801115a:	930b      	str	r3, [sp, #44]	; 0x2c
 801115c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801115e:	1b5d      	subs	r5, r3, r5
 8011160:	1e6b      	subs	r3, r5, #1
 8011162:	9305      	str	r3, [sp, #20]
 8011164:	bf45      	ittet	mi
 8011166:	f1c5 0301 	rsbmi	r3, r5, #1
 801116a:	9304      	strmi	r3, [sp, #16]
 801116c:	2300      	movpl	r3, #0
 801116e:	2300      	movmi	r3, #0
 8011170:	bf4c      	ite	mi
 8011172:	9305      	strmi	r3, [sp, #20]
 8011174:	9304      	strpl	r3, [sp, #16]
 8011176:	9b00      	ldr	r3, [sp, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	db3d      	blt.n	80111f8 <_dtoa_r+0x248>
 801117c:	9b05      	ldr	r3, [sp, #20]
 801117e:	9a00      	ldr	r2, [sp, #0]
 8011180:	920a      	str	r2, [sp, #40]	; 0x28
 8011182:	4413      	add	r3, r2
 8011184:	9305      	str	r3, [sp, #20]
 8011186:	2300      	movs	r3, #0
 8011188:	9307      	str	r3, [sp, #28]
 801118a:	9b06      	ldr	r3, [sp, #24]
 801118c:	2b09      	cmp	r3, #9
 801118e:	f200 8089 	bhi.w	80112a4 <_dtoa_r+0x2f4>
 8011192:	2b05      	cmp	r3, #5
 8011194:	bfc4      	itt	gt
 8011196:	3b04      	subgt	r3, #4
 8011198:	9306      	strgt	r3, [sp, #24]
 801119a:	9b06      	ldr	r3, [sp, #24]
 801119c:	f1a3 0302 	sub.w	r3, r3, #2
 80111a0:	bfcc      	ite	gt
 80111a2:	2500      	movgt	r5, #0
 80111a4:	2501      	movle	r5, #1
 80111a6:	2b03      	cmp	r3, #3
 80111a8:	f200 8087 	bhi.w	80112ba <_dtoa_r+0x30a>
 80111ac:	e8df f003 	tbb	[pc, r3]
 80111b0:	59383a2d 	.word	0x59383a2d
 80111b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80111b8:	441d      	add	r5, r3
 80111ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80111be:	2b20      	cmp	r3, #32
 80111c0:	bfc1      	itttt	gt
 80111c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80111c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80111ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80111ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80111d2:	bfda      	itte	le
 80111d4:	f1c3 0320 	rsble	r3, r3, #32
 80111d8:	fa06 f003 	lslle.w	r0, r6, r3
 80111dc:	4318      	orrgt	r0, r3
 80111de:	f7ef f9b1 	bl	8000544 <__aeabi_ui2d>
 80111e2:	2301      	movs	r3, #1
 80111e4:	4606      	mov	r6, r0
 80111e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80111ea:	3d01      	subs	r5, #1
 80111ec:	930e      	str	r3, [sp, #56]	; 0x38
 80111ee:	e76a      	b.n	80110c6 <_dtoa_r+0x116>
 80111f0:	2301      	movs	r3, #1
 80111f2:	e7b2      	b.n	801115a <_dtoa_r+0x1aa>
 80111f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80111f6:	e7b1      	b.n	801115c <_dtoa_r+0x1ac>
 80111f8:	9b04      	ldr	r3, [sp, #16]
 80111fa:	9a00      	ldr	r2, [sp, #0]
 80111fc:	1a9b      	subs	r3, r3, r2
 80111fe:	9304      	str	r3, [sp, #16]
 8011200:	4253      	negs	r3, r2
 8011202:	9307      	str	r3, [sp, #28]
 8011204:	2300      	movs	r3, #0
 8011206:	930a      	str	r3, [sp, #40]	; 0x28
 8011208:	e7bf      	b.n	801118a <_dtoa_r+0x1da>
 801120a:	2300      	movs	r3, #0
 801120c:	9308      	str	r3, [sp, #32]
 801120e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011210:	2b00      	cmp	r3, #0
 8011212:	dc55      	bgt.n	80112c0 <_dtoa_r+0x310>
 8011214:	2301      	movs	r3, #1
 8011216:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801121a:	461a      	mov	r2, r3
 801121c:	9209      	str	r2, [sp, #36]	; 0x24
 801121e:	e00c      	b.n	801123a <_dtoa_r+0x28a>
 8011220:	2301      	movs	r3, #1
 8011222:	e7f3      	b.n	801120c <_dtoa_r+0x25c>
 8011224:	2300      	movs	r3, #0
 8011226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011228:	9308      	str	r3, [sp, #32]
 801122a:	9b00      	ldr	r3, [sp, #0]
 801122c:	4413      	add	r3, r2
 801122e:	9302      	str	r3, [sp, #8]
 8011230:	3301      	adds	r3, #1
 8011232:	2b01      	cmp	r3, #1
 8011234:	9303      	str	r3, [sp, #12]
 8011236:	bfb8      	it	lt
 8011238:	2301      	movlt	r3, #1
 801123a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801123c:	2200      	movs	r2, #0
 801123e:	6042      	str	r2, [r0, #4]
 8011240:	2204      	movs	r2, #4
 8011242:	f102 0614 	add.w	r6, r2, #20
 8011246:	429e      	cmp	r6, r3
 8011248:	6841      	ldr	r1, [r0, #4]
 801124a:	d93d      	bls.n	80112c8 <_dtoa_r+0x318>
 801124c:	4620      	mov	r0, r4
 801124e:	f001 fa5d 	bl	801270c <_Balloc>
 8011252:	9001      	str	r0, [sp, #4]
 8011254:	2800      	cmp	r0, #0
 8011256:	d13b      	bne.n	80112d0 <_dtoa_r+0x320>
 8011258:	4b11      	ldr	r3, [pc, #68]	; (80112a0 <_dtoa_r+0x2f0>)
 801125a:	4602      	mov	r2, r0
 801125c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011260:	e6c0      	b.n	8010fe4 <_dtoa_r+0x34>
 8011262:	2301      	movs	r3, #1
 8011264:	e7df      	b.n	8011226 <_dtoa_r+0x276>
 8011266:	bf00      	nop
 8011268:	636f4361 	.word	0x636f4361
 801126c:	3fd287a7 	.word	0x3fd287a7
 8011270:	8b60c8b3 	.word	0x8b60c8b3
 8011274:	3fc68a28 	.word	0x3fc68a28
 8011278:	509f79fb 	.word	0x509f79fb
 801127c:	3fd34413 	.word	0x3fd34413
 8011280:	0801507d 	.word	0x0801507d
 8011284:	08015094 	.word	0x08015094
 8011288:	7ff00000 	.word	0x7ff00000
 801128c:	08015079 	.word	0x08015079
 8011290:	08015070 	.word	0x08015070
 8011294:	0801534a 	.word	0x0801534a
 8011298:	3ff80000 	.word	0x3ff80000
 801129c:	08015260 	.word	0x08015260
 80112a0:	080150ef 	.word	0x080150ef
 80112a4:	2501      	movs	r5, #1
 80112a6:	2300      	movs	r3, #0
 80112a8:	9306      	str	r3, [sp, #24]
 80112aa:	9508      	str	r5, [sp, #32]
 80112ac:	f04f 33ff 	mov.w	r3, #4294967295
 80112b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80112b4:	2200      	movs	r2, #0
 80112b6:	2312      	movs	r3, #18
 80112b8:	e7b0      	b.n	801121c <_dtoa_r+0x26c>
 80112ba:	2301      	movs	r3, #1
 80112bc:	9308      	str	r3, [sp, #32]
 80112be:	e7f5      	b.n	80112ac <_dtoa_r+0x2fc>
 80112c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80112c6:	e7b8      	b.n	801123a <_dtoa_r+0x28a>
 80112c8:	3101      	adds	r1, #1
 80112ca:	6041      	str	r1, [r0, #4]
 80112cc:	0052      	lsls	r2, r2, #1
 80112ce:	e7b8      	b.n	8011242 <_dtoa_r+0x292>
 80112d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112d2:	9a01      	ldr	r2, [sp, #4]
 80112d4:	601a      	str	r2, [r3, #0]
 80112d6:	9b03      	ldr	r3, [sp, #12]
 80112d8:	2b0e      	cmp	r3, #14
 80112da:	f200 809d 	bhi.w	8011418 <_dtoa_r+0x468>
 80112de:	2d00      	cmp	r5, #0
 80112e0:	f000 809a 	beq.w	8011418 <_dtoa_r+0x468>
 80112e4:	9b00      	ldr	r3, [sp, #0]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	dd32      	ble.n	8011350 <_dtoa_r+0x3a0>
 80112ea:	4ab7      	ldr	r2, [pc, #732]	; (80115c8 <_dtoa_r+0x618>)
 80112ec:	f003 030f 	and.w	r3, r3, #15
 80112f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80112f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80112f8:	9b00      	ldr	r3, [sp, #0]
 80112fa:	05d8      	lsls	r0, r3, #23
 80112fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011300:	d516      	bpl.n	8011330 <_dtoa_r+0x380>
 8011302:	4bb2      	ldr	r3, [pc, #712]	; (80115cc <_dtoa_r+0x61c>)
 8011304:	ec51 0b19 	vmov	r0, r1, d9
 8011308:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801130c:	f7ef fabe 	bl	800088c <__aeabi_ddiv>
 8011310:	f007 070f 	and.w	r7, r7, #15
 8011314:	4682      	mov	sl, r0
 8011316:	468b      	mov	fp, r1
 8011318:	2503      	movs	r5, #3
 801131a:	4eac      	ldr	r6, [pc, #688]	; (80115cc <_dtoa_r+0x61c>)
 801131c:	b957      	cbnz	r7, 8011334 <_dtoa_r+0x384>
 801131e:	4642      	mov	r2, r8
 8011320:	464b      	mov	r3, r9
 8011322:	4650      	mov	r0, sl
 8011324:	4659      	mov	r1, fp
 8011326:	f7ef fab1 	bl	800088c <__aeabi_ddiv>
 801132a:	4682      	mov	sl, r0
 801132c:	468b      	mov	fp, r1
 801132e:	e028      	b.n	8011382 <_dtoa_r+0x3d2>
 8011330:	2502      	movs	r5, #2
 8011332:	e7f2      	b.n	801131a <_dtoa_r+0x36a>
 8011334:	07f9      	lsls	r1, r7, #31
 8011336:	d508      	bpl.n	801134a <_dtoa_r+0x39a>
 8011338:	4640      	mov	r0, r8
 801133a:	4649      	mov	r1, r9
 801133c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011340:	f7ef f97a 	bl	8000638 <__aeabi_dmul>
 8011344:	3501      	adds	r5, #1
 8011346:	4680      	mov	r8, r0
 8011348:	4689      	mov	r9, r1
 801134a:	107f      	asrs	r7, r7, #1
 801134c:	3608      	adds	r6, #8
 801134e:	e7e5      	b.n	801131c <_dtoa_r+0x36c>
 8011350:	f000 809b 	beq.w	801148a <_dtoa_r+0x4da>
 8011354:	9b00      	ldr	r3, [sp, #0]
 8011356:	4f9d      	ldr	r7, [pc, #628]	; (80115cc <_dtoa_r+0x61c>)
 8011358:	425e      	negs	r6, r3
 801135a:	4b9b      	ldr	r3, [pc, #620]	; (80115c8 <_dtoa_r+0x618>)
 801135c:	f006 020f 	and.w	r2, r6, #15
 8011360:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011368:	ec51 0b19 	vmov	r0, r1, d9
 801136c:	f7ef f964 	bl	8000638 <__aeabi_dmul>
 8011370:	1136      	asrs	r6, r6, #4
 8011372:	4682      	mov	sl, r0
 8011374:	468b      	mov	fp, r1
 8011376:	2300      	movs	r3, #0
 8011378:	2502      	movs	r5, #2
 801137a:	2e00      	cmp	r6, #0
 801137c:	d17a      	bne.n	8011474 <_dtoa_r+0x4c4>
 801137e:	2b00      	cmp	r3, #0
 8011380:	d1d3      	bne.n	801132a <_dtoa_r+0x37a>
 8011382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011384:	2b00      	cmp	r3, #0
 8011386:	f000 8082 	beq.w	801148e <_dtoa_r+0x4de>
 801138a:	4b91      	ldr	r3, [pc, #580]	; (80115d0 <_dtoa_r+0x620>)
 801138c:	2200      	movs	r2, #0
 801138e:	4650      	mov	r0, sl
 8011390:	4659      	mov	r1, fp
 8011392:	f7ef fbc3 	bl	8000b1c <__aeabi_dcmplt>
 8011396:	2800      	cmp	r0, #0
 8011398:	d079      	beq.n	801148e <_dtoa_r+0x4de>
 801139a:	9b03      	ldr	r3, [sp, #12]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d076      	beq.n	801148e <_dtoa_r+0x4de>
 80113a0:	9b02      	ldr	r3, [sp, #8]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	dd36      	ble.n	8011414 <_dtoa_r+0x464>
 80113a6:	9b00      	ldr	r3, [sp, #0]
 80113a8:	4650      	mov	r0, sl
 80113aa:	4659      	mov	r1, fp
 80113ac:	1e5f      	subs	r7, r3, #1
 80113ae:	2200      	movs	r2, #0
 80113b0:	4b88      	ldr	r3, [pc, #544]	; (80115d4 <_dtoa_r+0x624>)
 80113b2:	f7ef f941 	bl	8000638 <__aeabi_dmul>
 80113b6:	9e02      	ldr	r6, [sp, #8]
 80113b8:	4682      	mov	sl, r0
 80113ba:	468b      	mov	fp, r1
 80113bc:	3501      	adds	r5, #1
 80113be:	4628      	mov	r0, r5
 80113c0:	f7ef f8d0 	bl	8000564 <__aeabi_i2d>
 80113c4:	4652      	mov	r2, sl
 80113c6:	465b      	mov	r3, fp
 80113c8:	f7ef f936 	bl	8000638 <__aeabi_dmul>
 80113cc:	4b82      	ldr	r3, [pc, #520]	; (80115d8 <_dtoa_r+0x628>)
 80113ce:	2200      	movs	r2, #0
 80113d0:	f7ee ff7c 	bl	80002cc <__adddf3>
 80113d4:	46d0      	mov	r8, sl
 80113d6:	46d9      	mov	r9, fp
 80113d8:	4682      	mov	sl, r0
 80113da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80113de:	2e00      	cmp	r6, #0
 80113e0:	d158      	bne.n	8011494 <_dtoa_r+0x4e4>
 80113e2:	4b7e      	ldr	r3, [pc, #504]	; (80115dc <_dtoa_r+0x62c>)
 80113e4:	2200      	movs	r2, #0
 80113e6:	4640      	mov	r0, r8
 80113e8:	4649      	mov	r1, r9
 80113ea:	f7ee ff6d 	bl	80002c8 <__aeabi_dsub>
 80113ee:	4652      	mov	r2, sl
 80113f0:	465b      	mov	r3, fp
 80113f2:	4680      	mov	r8, r0
 80113f4:	4689      	mov	r9, r1
 80113f6:	f7ef fbaf 	bl	8000b58 <__aeabi_dcmpgt>
 80113fa:	2800      	cmp	r0, #0
 80113fc:	f040 8295 	bne.w	801192a <_dtoa_r+0x97a>
 8011400:	4652      	mov	r2, sl
 8011402:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011406:	4640      	mov	r0, r8
 8011408:	4649      	mov	r1, r9
 801140a:	f7ef fb87 	bl	8000b1c <__aeabi_dcmplt>
 801140e:	2800      	cmp	r0, #0
 8011410:	f040 8289 	bne.w	8011926 <_dtoa_r+0x976>
 8011414:	ec5b ab19 	vmov	sl, fp, d9
 8011418:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801141a:	2b00      	cmp	r3, #0
 801141c:	f2c0 8148 	blt.w	80116b0 <_dtoa_r+0x700>
 8011420:	9a00      	ldr	r2, [sp, #0]
 8011422:	2a0e      	cmp	r2, #14
 8011424:	f300 8144 	bgt.w	80116b0 <_dtoa_r+0x700>
 8011428:	4b67      	ldr	r3, [pc, #412]	; (80115c8 <_dtoa_r+0x618>)
 801142a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801142e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011434:	2b00      	cmp	r3, #0
 8011436:	f280 80d5 	bge.w	80115e4 <_dtoa_r+0x634>
 801143a:	9b03      	ldr	r3, [sp, #12]
 801143c:	2b00      	cmp	r3, #0
 801143e:	f300 80d1 	bgt.w	80115e4 <_dtoa_r+0x634>
 8011442:	f040 826f 	bne.w	8011924 <_dtoa_r+0x974>
 8011446:	4b65      	ldr	r3, [pc, #404]	; (80115dc <_dtoa_r+0x62c>)
 8011448:	2200      	movs	r2, #0
 801144a:	4640      	mov	r0, r8
 801144c:	4649      	mov	r1, r9
 801144e:	f7ef f8f3 	bl	8000638 <__aeabi_dmul>
 8011452:	4652      	mov	r2, sl
 8011454:	465b      	mov	r3, fp
 8011456:	f7ef fb75 	bl	8000b44 <__aeabi_dcmpge>
 801145a:	9e03      	ldr	r6, [sp, #12]
 801145c:	4637      	mov	r7, r6
 801145e:	2800      	cmp	r0, #0
 8011460:	f040 8245 	bne.w	80118ee <_dtoa_r+0x93e>
 8011464:	9d01      	ldr	r5, [sp, #4]
 8011466:	2331      	movs	r3, #49	; 0x31
 8011468:	f805 3b01 	strb.w	r3, [r5], #1
 801146c:	9b00      	ldr	r3, [sp, #0]
 801146e:	3301      	adds	r3, #1
 8011470:	9300      	str	r3, [sp, #0]
 8011472:	e240      	b.n	80118f6 <_dtoa_r+0x946>
 8011474:	07f2      	lsls	r2, r6, #31
 8011476:	d505      	bpl.n	8011484 <_dtoa_r+0x4d4>
 8011478:	e9d7 2300 	ldrd	r2, r3, [r7]
 801147c:	f7ef f8dc 	bl	8000638 <__aeabi_dmul>
 8011480:	3501      	adds	r5, #1
 8011482:	2301      	movs	r3, #1
 8011484:	1076      	asrs	r6, r6, #1
 8011486:	3708      	adds	r7, #8
 8011488:	e777      	b.n	801137a <_dtoa_r+0x3ca>
 801148a:	2502      	movs	r5, #2
 801148c:	e779      	b.n	8011382 <_dtoa_r+0x3d2>
 801148e:	9f00      	ldr	r7, [sp, #0]
 8011490:	9e03      	ldr	r6, [sp, #12]
 8011492:	e794      	b.n	80113be <_dtoa_r+0x40e>
 8011494:	9901      	ldr	r1, [sp, #4]
 8011496:	4b4c      	ldr	r3, [pc, #304]	; (80115c8 <_dtoa_r+0x618>)
 8011498:	4431      	add	r1, r6
 801149a:	910d      	str	r1, [sp, #52]	; 0x34
 801149c:	9908      	ldr	r1, [sp, #32]
 801149e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80114a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80114a6:	2900      	cmp	r1, #0
 80114a8:	d043      	beq.n	8011532 <_dtoa_r+0x582>
 80114aa:	494d      	ldr	r1, [pc, #308]	; (80115e0 <_dtoa_r+0x630>)
 80114ac:	2000      	movs	r0, #0
 80114ae:	f7ef f9ed 	bl	800088c <__aeabi_ddiv>
 80114b2:	4652      	mov	r2, sl
 80114b4:	465b      	mov	r3, fp
 80114b6:	f7ee ff07 	bl	80002c8 <__aeabi_dsub>
 80114ba:	9d01      	ldr	r5, [sp, #4]
 80114bc:	4682      	mov	sl, r0
 80114be:	468b      	mov	fp, r1
 80114c0:	4649      	mov	r1, r9
 80114c2:	4640      	mov	r0, r8
 80114c4:	f7ef fb68 	bl	8000b98 <__aeabi_d2iz>
 80114c8:	4606      	mov	r6, r0
 80114ca:	f7ef f84b 	bl	8000564 <__aeabi_i2d>
 80114ce:	4602      	mov	r2, r0
 80114d0:	460b      	mov	r3, r1
 80114d2:	4640      	mov	r0, r8
 80114d4:	4649      	mov	r1, r9
 80114d6:	f7ee fef7 	bl	80002c8 <__aeabi_dsub>
 80114da:	3630      	adds	r6, #48	; 0x30
 80114dc:	f805 6b01 	strb.w	r6, [r5], #1
 80114e0:	4652      	mov	r2, sl
 80114e2:	465b      	mov	r3, fp
 80114e4:	4680      	mov	r8, r0
 80114e6:	4689      	mov	r9, r1
 80114e8:	f7ef fb18 	bl	8000b1c <__aeabi_dcmplt>
 80114ec:	2800      	cmp	r0, #0
 80114ee:	d163      	bne.n	80115b8 <_dtoa_r+0x608>
 80114f0:	4642      	mov	r2, r8
 80114f2:	464b      	mov	r3, r9
 80114f4:	4936      	ldr	r1, [pc, #216]	; (80115d0 <_dtoa_r+0x620>)
 80114f6:	2000      	movs	r0, #0
 80114f8:	f7ee fee6 	bl	80002c8 <__aeabi_dsub>
 80114fc:	4652      	mov	r2, sl
 80114fe:	465b      	mov	r3, fp
 8011500:	f7ef fb0c 	bl	8000b1c <__aeabi_dcmplt>
 8011504:	2800      	cmp	r0, #0
 8011506:	f040 80b5 	bne.w	8011674 <_dtoa_r+0x6c4>
 801150a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801150c:	429d      	cmp	r5, r3
 801150e:	d081      	beq.n	8011414 <_dtoa_r+0x464>
 8011510:	4b30      	ldr	r3, [pc, #192]	; (80115d4 <_dtoa_r+0x624>)
 8011512:	2200      	movs	r2, #0
 8011514:	4650      	mov	r0, sl
 8011516:	4659      	mov	r1, fp
 8011518:	f7ef f88e 	bl	8000638 <__aeabi_dmul>
 801151c:	4b2d      	ldr	r3, [pc, #180]	; (80115d4 <_dtoa_r+0x624>)
 801151e:	4682      	mov	sl, r0
 8011520:	468b      	mov	fp, r1
 8011522:	4640      	mov	r0, r8
 8011524:	4649      	mov	r1, r9
 8011526:	2200      	movs	r2, #0
 8011528:	f7ef f886 	bl	8000638 <__aeabi_dmul>
 801152c:	4680      	mov	r8, r0
 801152e:	4689      	mov	r9, r1
 8011530:	e7c6      	b.n	80114c0 <_dtoa_r+0x510>
 8011532:	4650      	mov	r0, sl
 8011534:	4659      	mov	r1, fp
 8011536:	f7ef f87f 	bl	8000638 <__aeabi_dmul>
 801153a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801153c:	9d01      	ldr	r5, [sp, #4]
 801153e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011540:	4682      	mov	sl, r0
 8011542:	468b      	mov	fp, r1
 8011544:	4649      	mov	r1, r9
 8011546:	4640      	mov	r0, r8
 8011548:	f7ef fb26 	bl	8000b98 <__aeabi_d2iz>
 801154c:	4606      	mov	r6, r0
 801154e:	f7ef f809 	bl	8000564 <__aeabi_i2d>
 8011552:	3630      	adds	r6, #48	; 0x30
 8011554:	4602      	mov	r2, r0
 8011556:	460b      	mov	r3, r1
 8011558:	4640      	mov	r0, r8
 801155a:	4649      	mov	r1, r9
 801155c:	f7ee feb4 	bl	80002c8 <__aeabi_dsub>
 8011560:	f805 6b01 	strb.w	r6, [r5], #1
 8011564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011566:	429d      	cmp	r5, r3
 8011568:	4680      	mov	r8, r0
 801156a:	4689      	mov	r9, r1
 801156c:	f04f 0200 	mov.w	r2, #0
 8011570:	d124      	bne.n	80115bc <_dtoa_r+0x60c>
 8011572:	4b1b      	ldr	r3, [pc, #108]	; (80115e0 <_dtoa_r+0x630>)
 8011574:	4650      	mov	r0, sl
 8011576:	4659      	mov	r1, fp
 8011578:	f7ee fea8 	bl	80002cc <__adddf3>
 801157c:	4602      	mov	r2, r0
 801157e:	460b      	mov	r3, r1
 8011580:	4640      	mov	r0, r8
 8011582:	4649      	mov	r1, r9
 8011584:	f7ef fae8 	bl	8000b58 <__aeabi_dcmpgt>
 8011588:	2800      	cmp	r0, #0
 801158a:	d173      	bne.n	8011674 <_dtoa_r+0x6c4>
 801158c:	4652      	mov	r2, sl
 801158e:	465b      	mov	r3, fp
 8011590:	4913      	ldr	r1, [pc, #76]	; (80115e0 <_dtoa_r+0x630>)
 8011592:	2000      	movs	r0, #0
 8011594:	f7ee fe98 	bl	80002c8 <__aeabi_dsub>
 8011598:	4602      	mov	r2, r0
 801159a:	460b      	mov	r3, r1
 801159c:	4640      	mov	r0, r8
 801159e:	4649      	mov	r1, r9
 80115a0:	f7ef fabc 	bl	8000b1c <__aeabi_dcmplt>
 80115a4:	2800      	cmp	r0, #0
 80115a6:	f43f af35 	beq.w	8011414 <_dtoa_r+0x464>
 80115aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80115ac:	1e6b      	subs	r3, r5, #1
 80115ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80115b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80115b4:	2b30      	cmp	r3, #48	; 0x30
 80115b6:	d0f8      	beq.n	80115aa <_dtoa_r+0x5fa>
 80115b8:	9700      	str	r7, [sp, #0]
 80115ba:	e049      	b.n	8011650 <_dtoa_r+0x6a0>
 80115bc:	4b05      	ldr	r3, [pc, #20]	; (80115d4 <_dtoa_r+0x624>)
 80115be:	f7ef f83b 	bl	8000638 <__aeabi_dmul>
 80115c2:	4680      	mov	r8, r0
 80115c4:	4689      	mov	r9, r1
 80115c6:	e7bd      	b.n	8011544 <_dtoa_r+0x594>
 80115c8:	08015260 	.word	0x08015260
 80115cc:	08015238 	.word	0x08015238
 80115d0:	3ff00000 	.word	0x3ff00000
 80115d4:	40240000 	.word	0x40240000
 80115d8:	401c0000 	.word	0x401c0000
 80115dc:	40140000 	.word	0x40140000
 80115e0:	3fe00000 	.word	0x3fe00000
 80115e4:	9d01      	ldr	r5, [sp, #4]
 80115e6:	4656      	mov	r6, sl
 80115e8:	465f      	mov	r7, fp
 80115ea:	4642      	mov	r2, r8
 80115ec:	464b      	mov	r3, r9
 80115ee:	4630      	mov	r0, r6
 80115f0:	4639      	mov	r1, r7
 80115f2:	f7ef f94b 	bl	800088c <__aeabi_ddiv>
 80115f6:	f7ef facf 	bl	8000b98 <__aeabi_d2iz>
 80115fa:	4682      	mov	sl, r0
 80115fc:	f7ee ffb2 	bl	8000564 <__aeabi_i2d>
 8011600:	4642      	mov	r2, r8
 8011602:	464b      	mov	r3, r9
 8011604:	f7ef f818 	bl	8000638 <__aeabi_dmul>
 8011608:	4602      	mov	r2, r0
 801160a:	460b      	mov	r3, r1
 801160c:	4630      	mov	r0, r6
 801160e:	4639      	mov	r1, r7
 8011610:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011614:	f7ee fe58 	bl	80002c8 <__aeabi_dsub>
 8011618:	f805 6b01 	strb.w	r6, [r5], #1
 801161c:	9e01      	ldr	r6, [sp, #4]
 801161e:	9f03      	ldr	r7, [sp, #12]
 8011620:	1bae      	subs	r6, r5, r6
 8011622:	42b7      	cmp	r7, r6
 8011624:	4602      	mov	r2, r0
 8011626:	460b      	mov	r3, r1
 8011628:	d135      	bne.n	8011696 <_dtoa_r+0x6e6>
 801162a:	f7ee fe4f 	bl	80002cc <__adddf3>
 801162e:	4642      	mov	r2, r8
 8011630:	464b      	mov	r3, r9
 8011632:	4606      	mov	r6, r0
 8011634:	460f      	mov	r7, r1
 8011636:	f7ef fa8f 	bl	8000b58 <__aeabi_dcmpgt>
 801163a:	b9d0      	cbnz	r0, 8011672 <_dtoa_r+0x6c2>
 801163c:	4642      	mov	r2, r8
 801163e:	464b      	mov	r3, r9
 8011640:	4630      	mov	r0, r6
 8011642:	4639      	mov	r1, r7
 8011644:	f7ef fa60 	bl	8000b08 <__aeabi_dcmpeq>
 8011648:	b110      	cbz	r0, 8011650 <_dtoa_r+0x6a0>
 801164a:	f01a 0f01 	tst.w	sl, #1
 801164e:	d110      	bne.n	8011672 <_dtoa_r+0x6c2>
 8011650:	4620      	mov	r0, r4
 8011652:	ee18 1a10 	vmov	r1, s16
 8011656:	f001 f899 	bl	801278c <_Bfree>
 801165a:	2300      	movs	r3, #0
 801165c:	9800      	ldr	r0, [sp, #0]
 801165e:	702b      	strb	r3, [r5, #0]
 8011660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011662:	3001      	adds	r0, #1
 8011664:	6018      	str	r0, [r3, #0]
 8011666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011668:	2b00      	cmp	r3, #0
 801166a:	f43f acf1 	beq.w	8011050 <_dtoa_r+0xa0>
 801166e:	601d      	str	r5, [r3, #0]
 8011670:	e4ee      	b.n	8011050 <_dtoa_r+0xa0>
 8011672:	9f00      	ldr	r7, [sp, #0]
 8011674:	462b      	mov	r3, r5
 8011676:	461d      	mov	r5, r3
 8011678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801167c:	2a39      	cmp	r2, #57	; 0x39
 801167e:	d106      	bne.n	801168e <_dtoa_r+0x6de>
 8011680:	9a01      	ldr	r2, [sp, #4]
 8011682:	429a      	cmp	r2, r3
 8011684:	d1f7      	bne.n	8011676 <_dtoa_r+0x6c6>
 8011686:	9901      	ldr	r1, [sp, #4]
 8011688:	2230      	movs	r2, #48	; 0x30
 801168a:	3701      	adds	r7, #1
 801168c:	700a      	strb	r2, [r1, #0]
 801168e:	781a      	ldrb	r2, [r3, #0]
 8011690:	3201      	adds	r2, #1
 8011692:	701a      	strb	r2, [r3, #0]
 8011694:	e790      	b.n	80115b8 <_dtoa_r+0x608>
 8011696:	4ba6      	ldr	r3, [pc, #664]	; (8011930 <_dtoa_r+0x980>)
 8011698:	2200      	movs	r2, #0
 801169a:	f7ee ffcd 	bl	8000638 <__aeabi_dmul>
 801169e:	2200      	movs	r2, #0
 80116a0:	2300      	movs	r3, #0
 80116a2:	4606      	mov	r6, r0
 80116a4:	460f      	mov	r7, r1
 80116a6:	f7ef fa2f 	bl	8000b08 <__aeabi_dcmpeq>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	d09d      	beq.n	80115ea <_dtoa_r+0x63a>
 80116ae:	e7cf      	b.n	8011650 <_dtoa_r+0x6a0>
 80116b0:	9a08      	ldr	r2, [sp, #32]
 80116b2:	2a00      	cmp	r2, #0
 80116b4:	f000 80d7 	beq.w	8011866 <_dtoa_r+0x8b6>
 80116b8:	9a06      	ldr	r2, [sp, #24]
 80116ba:	2a01      	cmp	r2, #1
 80116bc:	f300 80ba 	bgt.w	8011834 <_dtoa_r+0x884>
 80116c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80116c2:	2a00      	cmp	r2, #0
 80116c4:	f000 80b2 	beq.w	801182c <_dtoa_r+0x87c>
 80116c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80116cc:	9e07      	ldr	r6, [sp, #28]
 80116ce:	9d04      	ldr	r5, [sp, #16]
 80116d0:	9a04      	ldr	r2, [sp, #16]
 80116d2:	441a      	add	r2, r3
 80116d4:	9204      	str	r2, [sp, #16]
 80116d6:	9a05      	ldr	r2, [sp, #20]
 80116d8:	2101      	movs	r1, #1
 80116da:	441a      	add	r2, r3
 80116dc:	4620      	mov	r0, r4
 80116de:	9205      	str	r2, [sp, #20]
 80116e0:	f001 f956 	bl	8012990 <__i2b>
 80116e4:	4607      	mov	r7, r0
 80116e6:	2d00      	cmp	r5, #0
 80116e8:	dd0c      	ble.n	8011704 <_dtoa_r+0x754>
 80116ea:	9b05      	ldr	r3, [sp, #20]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	dd09      	ble.n	8011704 <_dtoa_r+0x754>
 80116f0:	42ab      	cmp	r3, r5
 80116f2:	9a04      	ldr	r2, [sp, #16]
 80116f4:	bfa8      	it	ge
 80116f6:	462b      	movge	r3, r5
 80116f8:	1ad2      	subs	r2, r2, r3
 80116fa:	9204      	str	r2, [sp, #16]
 80116fc:	9a05      	ldr	r2, [sp, #20]
 80116fe:	1aed      	subs	r5, r5, r3
 8011700:	1ad3      	subs	r3, r2, r3
 8011702:	9305      	str	r3, [sp, #20]
 8011704:	9b07      	ldr	r3, [sp, #28]
 8011706:	b31b      	cbz	r3, 8011750 <_dtoa_r+0x7a0>
 8011708:	9b08      	ldr	r3, [sp, #32]
 801170a:	2b00      	cmp	r3, #0
 801170c:	f000 80af 	beq.w	801186e <_dtoa_r+0x8be>
 8011710:	2e00      	cmp	r6, #0
 8011712:	dd13      	ble.n	801173c <_dtoa_r+0x78c>
 8011714:	4639      	mov	r1, r7
 8011716:	4632      	mov	r2, r6
 8011718:	4620      	mov	r0, r4
 801171a:	f001 f9f9 	bl	8012b10 <__pow5mult>
 801171e:	ee18 2a10 	vmov	r2, s16
 8011722:	4601      	mov	r1, r0
 8011724:	4607      	mov	r7, r0
 8011726:	4620      	mov	r0, r4
 8011728:	f001 f948 	bl	80129bc <__multiply>
 801172c:	ee18 1a10 	vmov	r1, s16
 8011730:	4680      	mov	r8, r0
 8011732:	4620      	mov	r0, r4
 8011734:	f001 f82a 	bl	801278c <_Bfree>
 8011738:	ee08 8a10 	vmov	s16, r8
 801173c:	9b07      	ldr	r3, [sp, #28]
 801173e:	1b9a      	subs	r2, r3, r6
 8011740:	d006      	beq.n	8011750 <_dtoa_r+0x7a0>
 8011742:	ee18 1a10 	vmov	r1, s16
 8011746:	4620      	mov	r0, r4
 8011748:	f001 f9e2 	bl	8012b10 <__pow5mult>
 801174c:	ee08 0a10 	vmov	s16, r0
 8011750:	2101      	movs	r1, #1
 8011752:	4620      	mov	r0, r4
 8011754:	f001 f91c 	bl	8012990 <__i2b>
 8011758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801175a:	2b00      	cmp	r3, #0
 801175c:	4606      	mov	r6, r0
 801175e:	f340 8088 	ble.w	8011872 <_dtoa_r+0x8c2>
 8011762:	461a      	mov	r2, r3
 8011764:	4601      	mov	r1, r0
 8011766:	4620      	mov	r0, r4
 8011768:	f001 f9d2 	bl	8012b10 <__pow5mult>
 801176c:	9b06      	ldr	r3, [sp, #24]
 801176e:	2b01      	cmp	r3, #1
 8011770:	4606      	mov	r6, r0
 8011772:	f340 8081 	ble.w	8011878 <_dtoa_r+0x8c8>
 8011776:	f04f 0800 	mov.w	r8, #0
 801177a:	6933      	ldr	r3, [r6, #16]
 801177c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011780:	6918      	ldr	r0, [r3, #16]
 8011782:	f001 f8b5 	bl	80128f0 <__hi0bits>
 8011786:	f1c0 0020 	rsb	r0, r0, #32
 801178a:	9b05      	ldr	r3, [sp, #20]
 801178c:	4418      	add	r0, r3
 801178e:	f010 001f 	ands.w	r0, r0, #31
 8011792:	f000 8092 	beq.w	80118ba <_dtoa_r+0x90a>
 8011796:	f1c0 0320 	rsb	r3, r0, #32
 801179a:	2b04      	cmp	r3, #4
 801179c:	f340 808a 	ble.w	80118b4 <_dtoa_r+0x904>
 80117a0:	f1c0 001c 	rsb	r0, r0, #28
 80117a4:	9b04      	ldr	r3, [sp, #16]
 80117a6:	4403      	add	r3, r0
 80117a8:	9304      	str	r3, [sp, #16]
 80117aa:	9b05      	ldr	r3, [sp, #20]
 80117ac:	4403      	add	r3, r0
 80117ae:	4405      	add	r5, r0
 80117b0:	9305      	str	r3, [sp, #20]
 80117b2:	9b04      	ldr	r3, [sp, #16]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	dd07      	ble.n	80117c8 <_dtoa_r+0x818>
 80117b8:	ee18 1a10 	vmov	r1, s16
 80117bc:	461a      	mov	r2, r3
 80117be:	4620      	mov	r0, r4
 80117c0:	f001 fa00 	bl	8012bc4 <__lshift>
 80117c4:	ee08 0a10 	vmov	s16, r0
 80117c8:	9b05      	ldr	r3, [sp, #20]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	dd05      	ble.n	80117da <_dtoa_r+0x82a>
 80117ce:	4631      	mov	r1, r6
 80117d0:	461a      	mov	r2, r3
 80117d2:	4620      	mov	r0, r4
 80117d4:	f001 f9f6 	bl	8012bc4 <__lshift>
 80117d8:	4606      	mov	r6, r0
 80117da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d06e      	beq.n	80118be <_dtoa_r+0x90e>
 80117e0:	ee18 0a10 	vmov	r0, s16
 80117e4:	4631      	mov	r1, r6
 80117e6:	f001 fa5d 	bl	8012ca4 <__mcmp>
 80117ea:	2800      	cmp	r0, #0
 80117ec:	da67      	bge.n	80118be <_dtoa_r+0x90e>
 80117ee:	9b00      	ldr	r3, [sp, #0]
 80117f0:	3b01      	subs	r3, #1
 80117f2:	ee18 1a10 	vmov	r1, s16
 80117f6:	9300      	str	r3, [sp, #0]
 80117f8:	220a      	movs	r2, #10
 80117fa:	2300      	movs	r3, #0
 80117fc:	4620      	mov	r0, r4
 80117fe:	f000 ffe7 	bl	80127d0 <__multadd>
 8011802:	9b08      	ldr	r3, [sp, #32]
 8011804:	ee08 0a10 	vmov	s16, r0
 8011808:	2b00      	cmp	r3, #0
 801180a:	f000 81b1 	beq.w	8011b70 <_dtoa_r+0xbc0>
 801180e:	2300      	movs	r3, #0
 8011810:	4639      	mov	r1, r7
 8011812:	220a      	movs	r2, #10
 8011814:	4620      	mov	r0, r4
 8011816:	f000 ffdb 	bl	80127d0 <__multadd>
 801181a:	9b02      	ldr	r3, [sp, #8]
 801181c:	2b00      	cmp	r3, #0
 801181e:	4607      	mov	r7, r0
 8011820:	f300 808e 	bgt.w	8011940 <_dtoa_r+0x990>
 8011824:	9b06      	ldr	r3, [sp, #24]
 8011826:	2b02      	cmp	r3, #2
 8011828:	dc51      	bgt.n	80118ce <_dtoa_r+0x91e>
 801182a:	e089      	b.n	8011940 <_dtoa_r+0x990>
 801182c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801182e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011832:	e74b      	b.n	80116cc <_dtoa_r+0x71c>
 8011834:	9b03      	ldr	r3, [sp, #12]
 8011836:	1e5e      	subs	r6, r3, #1
 8011838:	9b07      	ldr	r3, [sp, #28]
 801183a:	42b3      	cmp	r3, r6
 801183c:	bfbf      	itttt	lt
 801183e:	9b07      	ldrlt	r3, [sp, #28]
 8011840:	9607      	strlt	r6, [sp, #28]
 8011842:	1af2      	sublt	r2, r6, r3
 8011844:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011846:	bfb6      	itet	lt
 8011848:	189b      	addlt	r3, r3, r2
 801184a:	1b9e      	subge	r6, r3, r6
 801184c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801184e:	9b03      	ldr	r3, [sp, #12]
 8011850:	bfb8      	it	lt
 8011852:	2600      	movlt	r6, #0
 8011854:	2b00      	cmp	r3, #0
 8011856:	bfb7      	itett	lt
 8011858:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801185c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011860:	1a9d      	sublt	r5, r3, r2
 8011862:	2300      	movlt	r3, #0
 8011864:	e734      	b.n	80116d0 <_dtoa_r+0x720>
 8011866:	9e07      	ldr	r6, [sp, #28]
 8011868:	9d04      	ldr	r5, [sp, #16]
 801186a:	9f08      	ldr	r7, [sp, #32]
 801186c:	e73b      	b.n	80116e6 <_dtoa_r+0x736>
 801186e:	9a07      	ldr	r2, [sp, #28]
 8011870:	e767      	b.n	8011742 <_dtoa_r+0x792>
 8011872:	9b06      	ldr	r3, [sp, #24]
 8011874:	2b01      	cmp	r3, #1
 8011876:	dc18      	bgt.n	80118aa <_dtoa_r+0x8fa>
 8011878:	f1ba 0f00 	cmp.w	sl, #0
 801187c:	d115      	bne.n	80118aa <_dtoa_r+0x8fa>
 801187e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011882:	b993      	cbnz	r3, 80118aa <_dtoa_r+0x8fa>
 8011884:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011888:	0d1b      	lsrs	r3, r3, #20
 801188a:	051b      	lsls	r3, r3, #20
 801188c:	b183      	cbz	r3, 80118b0 <_dtoa_r+0x900>
 801188e:	9b04      	ldr	r3, [sp, #16]
 8011890:	3301      	adds	r3, #1
 8011892:	9304      	str	r3, [sp, #16]
 8011894:	9b05      	ldr	r3, [sp, #20]
 8011896:	3301      	adds	r3, #1
 8011898:	9305      	str	r3, [sp, #20]
 801189a:	f04f 0801 	mov.w	r8, #1
 801189e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	f47f af6a 	bne.w	801177a <_dtoa_r+0x7ca>
 80118a6:	2001      	movs	r0, #1
 80118a8:	e76f      	b.n	801178a <_dtoa_r+0x7da>
 80118aa:	f04f 0800 	mov.w	r8, #0
 80118ae:	e7f6      	b.n	801189e <_dtoa_r+0x8ee>
 80118b0:	4698      	mov	r8, r3
 80118b2:	e7f4      	b.n	801189e <_dtoa_r+0x8ee>
 80118b4:	f43f af7d 	beq.w	80117b2 <_dtoa_r+0x802>
 80118b8:	4618      	mov	r0, r3
 80118ba:	301c      	adds	r0, #28
 80118bc:	e772      	b.n	80117a4 <_dtoa_r+0x7f4>
 80118be:	9b03      	ldr	r3, [sp, #12]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	dc37      	bgt.n	8011934 <_dtoa_r+0x984>
 80118c4:	9b06      	ldr	r3, [sp, #24]
 80118c6:	2b02      	cmp	r3, #2
 80118c8:	dd34      	ble.n	8011934 <_dtoa_r+0x984>
 80118ca:	9b03      	ldr	r3, [sp, #12]
 80118cc:	9302      	str	r3, [sp, #8]
 80118ce:	9b02      	ldr	r3, [sp, #8]
 80118d0:	b96b      	cbnz	r3, 80118ee <_dtoa_r+0x93e>
 80118d2:	4631      	mov	r1, r6
 80118d4:	2205      	movs	r2, #5
 80118d6:	4620      	mov	r0, r4
 80118d8:	f000 ff7a 	bl	80127d0 <__multadd>
 80118dc:	4601      	mov	r1, r0
 80118de:	4606      	mov	r6, r0
 80118e0:	ee18 0a10 	vmov	r0, s16
 80118e4:	f001 f9de 	bl	8012ca4 <__mcmp>
 80118e8:	2800      	cmp	r0, #0
 80118ea:	f73f adbb 	bgt.w	8011464 <_dtoa_r+0x4b4>
 80118ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118f0:	9d01      	ldr	r5, [sp, #4]
 80118f2:	43db      	mvns	r3, r3
 80118f4:	9300      	str	r3, [sp, #0]
 80118f6:	f04f 0800 	mov.w	r8, #0
 80118fa:	4631      	mov	r1, r6
 80118fc:	4620      	mov	r0, r4
 80118fe:	f000 ff45 	bl	801278c <_Bfree>
 8011902:	2f00      	cmp	r7, #0
 8011904:	f43f aea4 	beq.w	8011650 <_dtoa_r+0x6a0>
 8011908:	f1b8 0f00 	cmp.w	r8, #0
 801190c:	d005      	beq.n	801191a <_dtoa_r+0x96a>
 801190e:	45b8      	cmp	r8, r7
 8011910:	d003      	beq.n	801191a <_dtoa_r+0x96a>
 8011912:	4641      	mov	r1, r8
 8011914:	4620      	mov	r0, r4
 8011916:	f000 ff39 	bl	801278c <_Bfree>
 801191a:	4639      	mov	r1, r7
 801191c:	4620      	mov	r0, r4
 801191e:	f000 ff35 	bl	801278c <_Bfree>
 8011922:	e695      	b.n	8011650 <_dtoa_r+0x6a0>
 8011924:	2600      	movs	r6, #0
 8011926:	4637      	mov	r7, r6
 8011928:	e7e1      	b.n	80118ee <_dtoa_r+0x93e>
 801192a:	9700      	str	r7, [sp, #0]
 801192c:	4637      	mov	r7, r6
 801192e:	e599      	b.n	8011464 <_dtoa_r+0x4b4>
 8011930:	40240000 	.word	0x40240000
 8011934:	9b08      	ldr	r3, [sp, #32]
 8011936:	2b00      	cmp	r3, #0
 8011938:	f000 80ca 	beq.w	8011ad0 <_dtoa_r+0xb20>
 801193c:	9b03      	ldr	r3, [sp, #12]
 801193e:	9302      	str	r3, [sp, #8]
 8011940:	2d00      	cmp	r5, #0
 8011942:	dd05      	ble.n	8011950 <_dtoa_r+0x9a0>
 8011944:	4639      	mov	r1, r7
 8011946:	462a      	mov	r2, r5
 8011948:	4620      	mov	r0, r4
 801194a:	f001 f93b 	bl	8012bc4 <__lshift>
 801194e:	4607      	mov	r7, r0
 8011950:	f1b8 0f00 	cmp.w	r8, #0
 8011954:	d05b      	beq.n	8011a0e <_dtoa_r+0xa5e>
 8011956:	6879      	ldr	r1, [r7, #4]
 8011958:	4620      	mov	r0, r4
 801195a:	f000 fed7 	bl	801270c <_Balloc>
 801195e:	4605      	mov	r5, r0
 8011960:	b928      	cbnz	r0, 801196e <_dtoa_r+0x9be>
 8011962:	4b87      	ldr	r3, [pc, #540]	; (8011b80 <_dtoa_r+0xbd0>)
 8011964:	4602      	mov	r2, r0
 8011966:	f240 21ea 	movw	r1, #746	; 0x2ea
 801196a:	f7ff bb3b 	b.w	8010fe4 <_dtoa_r+0x34>
 801196e:	693a      	ldr	r2, [r7, #16]
 8011970:	3202      	adds	r2, #2
 8011972:	0092      	lsls	r2, r2, #2
 8011974:	f107 010c 	add.w	r1, r7, #12
 8011978:	300c      	adds	r0, #12
 801197a:	f7fd fae1 	bl	800ef40 <memcpy>
 801197e:	2201      	movs	r2, #1
 8011980:	4629      	mov	r1, r5
 8011982:	4620      	mov	r0, r4
 8011984:	f001 f91e 	bl	8012bc4 <__lshift>
 8011988:	9b01      	ldr	r3, [sp, #4]
 801198a:	f103 0901 	add.w	r9, r3, #1
 801198e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011992:	4413      	add	r3, r2
 8011994:	9305      	str	r3, [sp, #20]
 8011996:	f00a 0301 	and.w	r3, sl, #1
 801199a:	46b8      	mov	r8, r7
 801199c:	9304      	str	r3, [sp, #16]
 801199e:	4607      	mov	r7, r0
 80119a0:	4631      	mov	r1, r6
 80119a2:	ee18 0a10 	vmov	r0, s16
 80119a6:	f7ff fa75 	bl	8010e94 <quorem>
 80119aa:	4641      	mov	r1, r8
 80119ac:	9002      	str	r0, [sp, #8]
 80119ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80119b2:	ee18 0a10 	vmov	r0, s16
 80119b6:	f001 f975 	bl	8012ca4 <__mcmp>
 80119ba:	463a      	mov	r2, r7
 80119bc:	9003      	str	r0, [sp, #12]
 80119be:	4631      	mov	r1, r6
 80119c0:	4620      	mov	r0, r4
 80119c2:	f001 f98b 	bl	8012cdc <__mdiff>
 80119c6:	68c2      	ldr	r2, [r0, #12]
 80119c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80119cc:	4605      	mov	r5, r0
 80119ce:	bb02      	cbnz	r2, 8011a12 <_dtoa_r+0xa62>
 80119d0:	4601      	mov	r1, r0
 80119d2:	ee18 0a10 	vmov	r0, s16
 80119d6:	f001 f965 	bl	8012ca4 <__mcmp>
 80119da:	4602      	mov	r2, r0
 80119dc:	4629      	mov	r1, r5
 80119de:	4620      	mov	r0, r4
 80119e0:	9207      	str	r2, [sp, #28]
 80119e2:	f000 fed3 	bl	801278c <_Bfree>
 80119e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80119ea:	ea43 0102 	orr.w	r1, r3, r2
 80119ee:	9b04      	ldr	r3, [sp, #16]
 80119f0:	430b      	orrs	r3, r1
 80119f2:	464d      	mov	r5, r9
 80119f4:	d10f      	bne.n	8011a16 <_dtoa_r+0xa66>
 80119f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80119fa:	d02a      	beq.n	8011a52 <_dtoa_r+0xaa2>
 80119fc:	9b03      	ldr	r3, [sp, #12]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	dd02      	ble.n	8011a08 <_dtoa_r+0xa58>
 8011a02:	9b02      	ldr	r3, [sp, #8]
 8011a04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011a08:	f88b a000 	strb.w	sl, [fp]
 8011a0c:	e775      	b.n	80118fa <_dtoa_r+0x94a>
 8011a0e:	4638      	mov	r0, r7
 8011a10:	e7ba      	b.n	8011988 <_dtoa_r+0x9d8>
 8011a12:	2201      	movs	r2, #1
 8011a14:	e7e2      	b.n	80119dc <_dtoa_r+0xa2c>
 8011a16:	9b03      	ldr	r3, [sp, #12]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	db04      	blt.n	8011a26 <_dtoa_r+0xa76>
 8011a1c:	9906      	ldr	r1, [sp, #24]
 8011a1e:	430b      	orrs	r3, r1
 8011a20:	9904      	ldr	r1, [sp, #16]
 8011a22:	430b      	orrs	r3, r1
 8011a24:	d122      	bne.n	8011a6c <_dtoa_r+0xabc>
 8011a26:	2a00      	cmp	r2, #0
 8011a28:	ddee      	ble.n	8011a08 <_dtoa_r+0xa58>
 8011a2a:	ee18 1a10 	vmov	r1, s16
 8011a2e:	2201      	movs	r2, #1
 8011a30:	4620      	mov	r0, r4
 8011a32:	f001 f8c7 	bl	8012bc4 <__lshift>
 8011a36:	4631      	mov	r1, r6
 8011a38:	ee08 0a10 	vmov	s16, r0
 8011a3c:	f001 f932 	bl	8012ca4 <__mcmp>
 8011a40:	2800      	cmp	r0, #0
 8011a42:	dc03      	bgt.n	8011a4c <_dtoa_r+0xa9c>
 8011a44:	d1e0      	bne.n	8011a08 <_dtoa_r+0xa58>
 8011a46:	f01a 0f01 	tst.w	sl, #1
 8011a4a:	d0dd      	beq.n	8011a08 <_dtoa_r+0xa58>
 8011a4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011a50:	d1d7      	bne.n	8011a02 <_dtoa_r+0xa52>
 8011a52:	2339      	movs	r3, #57	; 0x39
 8011a54:	f88b 3000 	strb.w	r3, [fp]
 8011a58:	462b      	mov	r3, r5
 8011a5a:	461d      	mov	r5, r3
 8011a5c:	3b01      	subs	r3, #1
 8011a5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011a62:	2a39      	cmp	r2, #57	; 0x39
 8011a64:	d071      	beq.n	8011b4a <_dtoa_r+0xb9a>
 8011a66:	3201      	adds	r2, #1
 8011a68:	701a      	strb	r2, [r3, #0]
 8011a6a:	e746      	b.n	80118fa <_dtoa_r+0x94a>
 8011a6c:	2a00      	cmp	r2, #0
 8011a6e:	dd07      	ble.n	8011a80 <_dtoa_r+0xad0>
 8011a70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011a74:	d0ed      	beq.n	8011a52 <_dtoa_r+0xaa2>
 8011a76:	f10a 0301 	add.w	r3, sl, #1
 8011a7a:	f88b 3000 	strb.w	r3, [fp]
 8011a7e:	e73c      	b.n	80118fa <_dtoa_r+0x94a>
 8011a80:	9b05      	ldr	r3, [sp, #20]
 8011a82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011a86:	4599      	cmp	r9, r3
 8011a88:	d047      	beq.n	8011b1a <_dtoa_r+0xb6a>
 8011a8a:	ee18 1a10 	vmov	r1, s16
 8011a8e:	2300      	movs	r3, #0
 8011a90:	220a      	movs	r2, #10
 8011a92:	4620      	mov	r0, r4
 8011a94:	f000 fe9c 	bl	80127d0 <__multadd>
 8011a98:	45b8      	cmp	r8, r7
 8011a9a:	ee08 0a10 	vmov	s16, r0
 8011a9e:	f04f 0300 	mov.w	r3, #0
 8011aa2:	f04f 020a 	mov.w	r2, #10
 8011aa6:	4641      	mov	r1, r8
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	d106      	bne.n	8011aba <_dtoa_r+0xb0a>
 8011aac:	f000 fe90 	bl	80127d0 <__multadd>
 8011ab0:	4680      	mov	r8, r0
 8011ab2:	4607      	mov	r7, r0
 8011ab4:	f109 0901 	add.w	r9, r9, #1
 8011ab8:	e772      	b.n	80119a0 <_dtoa_r+0x9f0>
 8011aba:	f000 fe89 	bl	80127d0 <__multadd>
 8011abe:	4639      	mov	r1, r7
 8011ac0:	4680      	mov	r8, r0
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	220a      	movs	r2, #10
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	f000 fe82 	bl	80127d0 <__multadd>
 8011acc:	4607      	mov	r7, r0
 8011ace:	e7f1      	b.n	8011ab4 <_dtoa_r+0xb04>
 8011ad0:	9b03      	ldr	r3, [sp, #12]
 8011ad2:	9302      	str	r3, [sp, #8]
 8011ad4:	9d01      	ldr	r5, [sp, #4]
 8011ad6:	ee18 0a10 	vmov	r0, s16
 8011ada:	4631      	mov	r1, r6
 8011adc:	f7ff f9da 	bl	8010e94 <quorem>
 8011ae0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011ae4:	9b01      	ldr	r3, [sp, #4]
 8011ae6:	f805 ab01 	strb.w	sl, [r5], #1
 8011aea:	1aea      	subs	r2, r5, r3
 8011aec:	9b02      	ldr	r3, [sp, #8]
 8011aee:	4293      	cmp	r3, r2
 8011af0:	dd09      	ble.n	8011b06 <_dtoa_r+0xb56>
 8011af2:	ee18 1a10 	vmov	r1, s16
 8011af6:	2300      	movs	r3, #0
 8011af8:	220a      	movs	r2, #10
 8011afa:	4620      	mov	r0, r4
 8011afc:	f000 fe68 	bl	80127d0 <__multadd>
 8011b00:	ee08 0a10 	vmov	s16, r0
 8011b04:	e7e7      	b.n	8011ad6 <_dtoa_r+0xb26>
 8011b06:	9b02      	ldr	r3, [sp, #8]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	bfc8      	it	gt
 8011b0c:	461d      	movgt	r5, r3
 8011b0e:	9b01      	ldr	r3, [sp, #4]
 8011b10:	bfd8      	it	le
 8011b12:	2501      	movle	r5, #1
 8011b14:	441d      	add	r5, r3
 8011b16:	f04f 0800 	mov.w	r8, #0
 8011b1a:	ee18 1a10 	vmov	r1, s16
 8011b1e:	2201      	movs	r2, #1
 8011b20:	4620      	mov	r0, r4
 8011b22:	f001 f84f 	bl	8012bc4 <__lshift>
 8011b26:	4631      	mov	r1, r6
 8011b28:	ee08 0a10 	vmov	s16, r0
 8011b2c:	f001 f8ba 	bl	8012ca4 <__mcmp>
 8011b30:	2800      	cmp	r0, #0
 8011b32:	dc91      	bgt.n	8011a58 <_dtoa_r+0xaa8>
 8011b34:	d102      	bne.n	8011b3c <_dtoa_r+0xb8c>
 8011b36:	f01a 0f01 	tst.w	sl, #1
 8011b3a:	d18d      	bne.n	8011a58 <_dtoa_r+0xaa8>
 8011b3c:	462b      	mov	r3, r5
 8011b3e:	461d      	mov	r5, r3
 8011b40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011b44:	2a30      	cmp	r2, #48	; 0x30
 8011b46:	d0fa      	beq.n	8011b3e <_dtoa_r+0xb8e>
 8011b48:	e6d7      	b.n	80118fa <_dtoa_r+0x94a>
 8011b4a:	9a01      	ldr	r2, [sp, #4]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d184      	bne.n	8011a5a <_dtoa_r+0xaaa>
 8011b50:	9b00      	ldr	r3, [sp, #0]
 8011b52:	3301      	adds	r3, #1
 8011b54:	9300      	str	r3, [sp, #0]
 8011b56:	2331      	movs	r3, #49	; 0x31
 8011b58:	7013      	strb	r3, [r2, #0]
 8011b5a:	e6ce      	b.n	80118fa <_dtoa_r+0x94a>
 8011b5c:	4b09      	ldr	r3, [pc, #36]	; (8011b84 <_dtoa_r+0xbd4>)
 8011b5e:	f7ff ba95 	b.w	801108c <_dtoa_r+0xdc>
 8011b62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	f47f aa6e 	bne.w	8011046 <_dtoa_r+0x96>
 8011b6a:	4b07      	ldr	r3, [pc, #28]	; (8011b88 <_dtoa_r+0xbd8>)
 8011b6c:	f7ff ba8e 	b.w	801108c <_dtoa_r+0xdc>
 8011b70:	9b02      	ldr	r3, [sp, #8]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	dcae      	bgt.n	8011ad4 <_dtoa_r+0xb24>
 8011b76:	9b06      	ldr	r3, [sp, #24]
 8011b78:	2b02      	cmp	r3, #2
 8011b7a:	f73f aea8 	bgt.w	80118ce <_dtoa_r+0x91e>
 8011b7e:	e7a9      	b.n	8011ad4 <_dtoa_r+0xb24>
 8011b80:	080150ef 	.word	0x080150ef
 8011b84:	08015349 	.word	0x08015349
 8011b88:	08015070 	.word	0x08015070

08011b8c <__sflush_r>:
 8011b8c:	898a      	ldrh	r2, [r1, #12]
 8011b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b92:	4605      	mov	r5, r0
 8011b94:	0710      	lsls	r0, r2, #28
 8011b96:	460c      	mov	r4, r1
 8011b98:	d458      	bmi.n	8011c4c <__sflush_r+0xc0>
 8011b9a:	684b      	ldr	r3, [r1, #4]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	dc05      	bgt.n	8011bac <__sflush_r+0x20>
 8011ba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	dc02      	bgt.n	8011bac <__sflush_r+0x20>
 8011ba6:	2000      	movs	r0, #0
 8011ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bae:	2e00      	cmp	r6, #0
 8011bb0:	d0f9      	beq.n	8011ba6 <__sflush_r+0x1a>
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bb8:	682f      	ldr	r7, [r5, #0]
 8011bba:	602b      	str	r3, [r5, #0]
 8011bbc:	d032      	beq.n	8011c24 <__sflush_r+0x98>
 8011bbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011bc0:	89a3      	ldrh	r3, [r4, #12]
 8011bc2:	075a      	lsls	r2, r3, #29
 8011bc4:	d505      	bpl.n	8011bd2 <__sflush_r+0x46>
 8011bc6:	6863      	ldr	r3, [r4, #4]
 8011bc8:	1ac0      	subs	r0, r0, r3
 8011bca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bcc:	b10b      	cbz	r3, 8011bd2 <__sflush_r+0x46>
 8011bce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011bd0:	1ac0      	subs	r0, r0, r3
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bd8:	6a21      	ldr	r1, [r4, #32]
 8011bda:	4628      	mov	r0, r5
 8011bdc:	47b0      	blx	r6
 8011bde:	1c43      	adds	r3, r0, #1
 8011be0:	89a3      	ldrh	r3, [r4, #12]
 8011be2:	d106      	bne.n	8011bf2 <__sflush_r+0x66>
 8011be4:	6829      	ldr	r1, [r5, #0]
 8011be6:	291d      	cmp	r1, #29
 8011be8:	d82c      	bhi.n	8011c44 <__sflush_r+0xb8>
 8011bea:	4a2a      	ldr	r2, [pc, #168]	; (8011c94 <__sflush_r+0x108>)
 8011bec:	40ca      	lsrs	r2, r1
 8011bee:	07d6      	lsls	r6, r2, #31
 8011bf0:	d528      	bpl.n	8011c44 <__sflush_r+0xb8>
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	6062      	str	r2, [r4, #4]
 8011bf6:	04d9      	lsls	r1, r3, #19
 8011bf8:	6922      	ldr	r2, [r4, #16]
 8011bfa:	6022      	str	r2, [r4, #0]
 8011bfc:	d504      	bpl.n	8011c08 <__sflush_r+0x7c>
 8011bfe:	1c42      	adds	r2, r0, #1
 8011c00:	d101      	bne.n	8011c06 <__sflush_r+0x7a>
 8011c02:	682b      	ldr	r3, [r5, #0]
 8011c04:	b903      	cbnz	r3, 8011c08 <__sflush_r+0x7c>
 8011c06:	6560      	str	r0, [r4, #84]	; 0x54
 8011c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c0a:	602f      	str	r7, [r5, #0]
 8011c0c:	2900      	cmp	r1, #0
 8011c0e:	d0ca      	beq.n	8011ba6 <__sflush_r+0x1a>
 8011c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c14:	4299      	cmp	r1, r3
 8011c16:	d002      	beq.n	8011c1e <__sflush_r+0x92>
 8011c18:	4628      	mov	r0, r5
 8011c1a:	f001 fa4f 	bl	80130bc <_free_r>
 8011c1e:	2000      	movs	r0, #0
 8011c20:	6360      	str	r0, [r4, #52]	; 0x34
 8011c22:	e7c1      	b.n	8011ba8 <__sflush_r+0x1c>
 8011c24:	6a21      	ldr	r1, [r4, #32]
 8011c26:	2301      	movs	r3, #1
 8011c28:	4628      	mov	r0, r5
 8011c2a:	47b0      	blx	r6
 8011c2c:	1c41      	adds	r1, r0, #1
 8011c2e:	d1c7      	bne.n	8011bc0 <__sflush_r+0x34>
 8011c30:	682b      	ldr	r3, [r5, #0]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d0c4      	beq.n	8011bc0 <__sflush_r+0x34>
 8011c36:	2b1d      	cmp	r3, #29
 8011c38:	d001      	beq.n	8011c3e <__sflush_r+0xb2>
 8011c3a:	2b16      	cmp	r3, #22
 8011c3c:	d101      	bne.n	8011c42 <__sflush_r+0xb6>
 8011c3e:	602f      	str	r7, [r5, #0]
 8011c40:	e7b1      	b.n	8011ba6 <__sflush_r+0x1a>
 8011c42:	89a3      	ldrh	r3, [r4, #12]
 8011c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c48:	81a3      	strh	r3, [r4, #12]
 8011c4a:	e7ad      	b.n	8011ba8 <__sflush_r+0x1c>
 8011c4c:	690f      	ldr	r7, [r1, #16]
 8011c4e:	2f00      	cmp	r7, #0
 8011c50:	d0a9      	beq.n	8011ba6 <__sflush_r+0x1a>
 8011c52:	0793      	lsls	r3, r2, #30
 8011c54:	680e      	ldr	r6, [r1, #0]
 8011c56:	bf08      	it	eq
 8011c58:	694b      	ldreq	r3, [r1, #20]
 8011c5a:	600f      	str	r7, [r1, #0]
 8011c5c:	bf18      	it	ne
 8011c5e:	2300      	movne	r3, #0
 8011c60:	eba6 0807 	sub.w	r8, r6, r7
 8011c64:	608b      	str	r3, [r1, #8]
 8011c66:	f1b8 0f00 	cmp.w	r8, #0
 8011c6a:	dd9c      	ble.n	8011ba6 <__sflush_r+0x1a>
 8011c6c:	6a21      	ldr	r1, [r4, #32]
 8011c6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c70:	4643      	mov	r3, r8
 8011c72:	463a      	mov	r2, r7
 8011c74:	4628      	mov	r0, r5
 8011c76:	47b0      	blx	r6
 8011c78:	2800      	cmp	r0, #0
 8011c7a:	dc06      	bgt.n	8011c8a <__sflush_r+0xfe>
 8011c7c:	89a3      	ldrh	r3, [r4, #12]
 8011c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c82:	81a3      	strh	r3, [r4, #12]
 8011c84:	f04f 30ff 	mov.w	r0, #4294967295
 8011c88:	e78e      	b.n	8011ba8 <__sflush_r+0x1c>
 8011c8a:	4407      	add	r7, r0
 8011c8c:	eba8 0800 	sub.w	r8, r8, r0
 8011c90:	e7e9      	b.n	8011c66 <__sflush_r+0xda>
 8011c92:	bf00      	nop
 8011c94:	20400001 	.word	0x20400001

08011c98 <_fflush_r>:
 8011c98:	b538      	push	{r3, r4, r5, lr}
 8011c9a:	690b      	ldr	r3, [r1, #16]
 8011c9c:	4605      	mov	r5, r0
 8011c9e:	460c      	mov	r4, r1
 8011ca0:	b913      	cbnz	r3, 8011ca8 <_fflush_r+0x10>
 8011ca2:	2500      	movs	r5, #0
 8011ca4:	4628      	mov	r0, r5
 8011ca6:	bd38      	pop	{r3, r4, r5, pc}
 8011ca8:	b118      	cbz	r0, 8011cb2 <_fflush_r+0x1a>
 8011caa:	6983      	ldr	r3, [r0, #24]
 8011cac:	b90b      	cbnz	r3, 8011cb2 <_fflush_r+0x1a>
 8011cae:	f000 f887 	bl	8011dc0 <__sinit>
 8011cb2:	4b14      	ldr	r3, [pc, #80]	; (8011d04 <_fflush_r+0x6c>)
 8011cb4:	429c      	cmp	r4, r3
 8011cb6:	d11b      	bne.n	8011cf0 <_fflush_r+0x58>
 8011cb8:	686c      	ldr	r4, [r5, #4]
 8011cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d0ef      	beq.n	8011ca2 <_fflush_r+0xa>
 8011cc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011cc4:	07d0      	lsls	r0, r2, #31
 8011cc6:	d404      	bmi.n	8011cd2 <_fflush_r+0x3a>
 8011cc8:	0599      	lsls	r1, r3, #22
 8011cca:	d402      	bmi.n	8011cd2 <_fflush_r+0x3a>
 8011ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cce:	f000 fc88 	bl	80125e2 <__retarget_lock_acquire_recursive>
 8011cd2:	4628      	mov	r0, r5
 8011cd4:	4621      	mov	r1, r4
 8011cd6:	f7ff ff59 	bl	8011b8c <__sflush_r>
 8011cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011cdc:	07da      	lsls	r2, r3, #31
 8011cde:	4605      	mov	r5, r0
 8011ce0:	d4e0      	bmi.n	8011ca4 <_fflush_r+0xc>
 8011ce2:	89a3      	ldrh	r3, [r4, #12]
 8011ce4:	059b      	lsls	r3, r3, #22
 8011ce6:	d4dd      	bmi.n	8011ca4 <_fflush_r+0xc>
 8011ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cea:	f000 fc7b 	bl	80125e4 <__retarget_lock_release_recursive>
 8011cee:	e7d9      	b.n	8011ca4 <_fflush_r+0xc>
 8011cf0:	4b05      	ldr	r3, [pc, #20]	; (8011d08 <_fflush_r+0x70>)
 8011cf2:	429c      	cmp	r4, r3
 8011cf4:	d101      	bne.n	8011cfa <_fflush_r+0x62>
 8011cf6:	68ac      	ldr	r4, [r5, #8]
 8011cf8:	e7df      	b.n	8011cba <_fflush_r+0x22>
 8011cfa:	4b04      	ldr	r3, [pc, #16]	; (8011d0c <_fflush_r+0x74>)
 8011cfc:	429c      	cmp	r4, r3
 8011cfe:	bf08      	it	eq
 8011d00:	68ec      	ldreq	r4, [r5, #12]
 8011d02:	e7da      	b.n	8011cba <_fflush_r+0x22>
 8011d04:	08015120 	.word	0x08015120
 8011d08:	08015140 	.word	0x08015140
 8011d0c:	08015100 	.word	0x08015100

08011d10 <std>:
 8011d10:	2300      	movs	r3, #0
 8011d12:	b510      	push	{r4, lr}
 8011d14:	4604      	mov	r4, r0
 8011d16:	e9c0 3300 	strd	r3, r3, [r0]
 8011d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d1e:	6083      	str	r3, [r0, #8]
 8011d20:	8181      	strh	r1, [r0, #12]
 8011d22:	6643      	str	r3, [r0, #100]	; 0x64
 8011d24:	81c2      	strh	r2, [r0, #14]
 8011d26:	6183      	str	r3, [r0, #24]
 8011d28:	4619      	mov	r1, r3
 8011d2a:	2208      	movs	r2, #8
 8011d2c:	305c      	adds	r0, #92	; 0x5c
 8011d2e:	f7fd f92f 	bl	800ef90 <memset>
 8011d32:	4b05      	ldr	r3, [pc, #20]	; (8011d48 <std+0x38>)
 8011d34:	6263      	str	r3, [r4, #36]	; 0x24
 8011d36:	4b05      	ldr	r3, [pc, #20]	; (8011d4c <std+0x3c>)
 8011d38:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d3a:	4b05      	ldr	r3, [pc, #20]	; (8011d50 <std+0x40>)
 8011d3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d3e:	4b05      	ldr	r3, [pc, #20]	; (8011d54 <std+0x44>)
 8011d40:	6224      	str	r4, [r4, #32]
 8011d42:	6323      	str	r3, [r4, #48]	; 0x30
 8011d44:	bd10      	pop	{r4, pc}
 8011d46:	bf00      	nop
 8011d48:	0800febd 	.word	0x0800febd
 8011d4c:	0800fee3 	.word	0x0800fee3
 8011d50:	0800ff1b 	.word	0x0800ff1b
 8011d54:	0800ff3f 	.word	0x0800ff3f

08011d58 <_cleanup_r>:
 8011d58:	4901      	ldr	r1, [pc, #4]	; (8011d60 <_cleanup_r+0x8>)
 8011d5a:	f000 b8af 	b.w	8011ebc <_fwalk_reent>
 8011d5e:	bf00      	nop
 8011d60:	08011c99 	.word	0x08011c99

08011d64 <__sfmoreglue>:
 8011d64:	b570      	push	{r4, r5, r6, lr}
 8011d66:	2268      	movs	r2, #104	; 0x68
 8011d68:	1e4d      	subs	r5, r1, #1
 8011d6a:	4355      	muls	r5, r2
 8011d6c:	460e      	mov	r6, r1
 8011d6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d72:	f001 fa0f 	bl	8013194 <_malloc_r>
 8011d76:	4604      	mov	r4, r0
 8011d78:	b140      	cbz	r0, 8011d8c <__sfmoreglue+0x28>
 8011d7a:	2100      	movs	r1, #0
 8011d7c:	e9c0 1600 	strd	r1, r6, [r0]
 8011d80:	300c      	adds	r0, #12
 8011d82:	60a0      	str	r0, [r4, #8]
 8011d84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011d88:	f7fd f902 	bl	800ef90 <memset>
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	bd70      	pop	{r4, r5, r6, pc}

08011d90 <__sfp_lock_acquire>:
 8011d90:	4801      	ldr	r0, [pc, #4]	; (8011d98 <__sfp_lock_acquire+0x8>)
 8011d92:	f000 bc26 	b.w	80125e2 <__retarget_lock_acquire_recursive>
 8011d96:	bf00      	nop
 8011d98:	200031d1 	.word	0x200031d1

08011d9c <__sfp_lock_release>:
 8011d9c:	4801      	ldr	r0, [pc, #4]	; (8011da4 <__sfp_lock_release+0x8>)
 8011d9e:	f000 bc21 	b.w	80125e4 <__retarget_lock_release_recursive>
 8011da2:	bf00      	nop
 8011da4:	200031d1 	.word	0x200031d1

08011da8 <__sinit_lock_acquire>:
 8011da8:	4801      	ldr	r0, [pc, #4]	; (8011db0 <__sinit_lock_acquire+0x8>)
 8011daa:	f000 bc1a 	b.w	80125e2 <__retarget_lock_acquire_recursive>
 8011dae:	bf00      	nop
 8011db0:	200031d2 	.word	0x200031d2

08011db4 <__sinit_lock_release>:
 8011db4:	4801      	ldr	r0, [pc, #4]	; (8011dbc <__sinit_lock_release+0x8>)
 8011db6:	f000 bc15 	b.w	80125e4 <__retarget_lock_release_recursive>
 8011dba:	bf00      	nop
 8011dbc:	200031d2 	.word	0x200031d2

08011dc0 <__sinit>:
 8011dc0:	b510      	push	{r4, lr}
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	f7ff fff0 	bl	8011da8 <__sinit_lock_acquire>
 8011dc8:	69a3      	ldr	r3, [r4, #24]
 8011dca:	b11b      	cbz	r3, 8011dd4 <__sinit+0x14>
 8011dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dd0:	f7ff bff0 	b.w	8011db4 <__sinit_lock_release>
 8011dd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011dd8:	6523      	str	r3, [r4, #80]	; 0x50
 8011dda:	4b13      	ldr	r3, [pc, #76]	; (8011e28 <__sinit+0x68>)
 8011ddc:	4a13      	ldr	r2, [pc, #76]	; (8011e2c <__sinit+0x6c>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	62a2      	str	r2, [r4, #40]	; 0x28
 8011de2:	42a3      	cmp	r3, r4
 8011de4:	bf04      	itt	eq
 8011de6:	2301      	moveq	r3, #1
 8011de8:	61a3      	streq	r3, [r4, #24]
 8011dea:	4620      	mov	r0, r4
 8011dec:	f000 f820 	bl	8011e30 <__sfp>
 8011df0:	6060      	str	r0, [r4, #4]
 8011df2:	4620      	mov	r0, r4
 8011df4:	f000 f81c 	bl	8011e30 <__sfp>
 8011df8:	60a0      	str	r0, [r4, #8]
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	f000 f818 	bl	8011e30 <__sfp>
 8011e00:	2200      	movs	r2, #0
 8011e02:	60e0      	str	r0, [r4, #12]
 8011e04:	2104      	movs	r1, #4
 8011e06:	6860      	ldr	r0, [r4, #4]
 8011e08:	f7ff ff82 	bl	8011d10 <std>
 8011e0c:	68a0      	ldr	r0, [r4, #8]
 8011e0e:	2201      	movs	r2, #1
 8011e10:	2109      	movs	r1, #9
 8011e12:	f7ff ff7d 	bl	8011d10 <std>
 8011e16:	68e0      	ldr	r0, [r4, #12]
 8011e18:	2202      	movs	r2, #2
 8011e1a:	2112      	movs	r1, #18
 8011e1c:	f7ff ff78 	bl	8011d10 <std>
 8011e20:	2301      	movs	r3, #1
 8011e22:	61a3      	str	r3, [r4, #24]
 8011e24:	e7d2      	b.n	8011dcc <__sinit+0xc>
 8011e26:	bf00      	nop
 8011e28:	08014fe4 	.word	0x08014fe4
 8011e2c:	08011d59 	.word	0x08011d59

08011e30 <__sfp>:
 8011e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e32:	4607      	mov	r7, r0
 8011e34:	f7ff ffac 	bl	8011d90 <__sfp_lock_acquire>
 8011e38:	4b1e      	ldr	r3, [pc, #120]	; (8011eb4 <__sfp+0x84>)
 8011e3a:	681e      	ldr	r6, [r3, #0]
 8011e3c:	69b3      	ldr	r3, [r6, #24]
 8011e3e:	b913      	cbnz	r3, 8011e46 <__sfp+0x16>
 8011e40:	4630      	mov	r0, r6
 8011e42:	f7ff ffbd 	bl	8011dc0 <__sinit>
 8011e46:	3648      	adds	r6, #72	; 0x48
 8011e48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e4c:	3b01      	subs	r3, #1
 8011e4e:	d503      	bpl.n	8011e58 <__sfp+0x28>
 8011e50:	6833      	ldr	r3, [r6, #0]
 8011e52:	b30b      	cbz	r3, 8011e98 <__sfp+0x68>
 8011e54:	6836      	ldr	r6, [r6, #0]
 8011e56:	e7f7      	b.n	8011e48 <__sfp+0x18>
 8011e58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e5c:	b9d5      	cbnz	r5, 8011e94 <__sfp+0x64>
 8011e5e:	4b16      	ldr	r3, [pc, #88]	; (8011eb8 <__sfp+0x88>)
 8011e60:	60e3      	str	r3, [r4, #12]
 8011e62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e66:	6665      	str	r5, [r4, #100]	; 0x64
 8011e68:	f000 fbba 	bl	80125e0 <__retarget_lock_init_recursive>
 8011e6c:	f7ff ff96 	bl	8011d9c <__sfp_lock_release>
 8011e70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e78:	6025      	str	r5, [r4, #0]
 8011e7a:	61a5      	str	r5, [r4, #24]
 8011e7c:	2208      	movs	r2, #8
 8011e7e:	4629      	mov	r1, r5
 8011e80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011e84:	f7fd f884 	bl	800ef90 <memset>
 8011e88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011e8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011e90:	4620      	mov	r0, r4
 8011e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e94:	3468      	adds	r4, #104	; 0x68
 8011e96:	e7d9      	b.n	8011e4c <__sfp+0x1c>
 8011e98:	2104      	movs	r1, #4
 8011e9a:	4638      	mov	r0, r7
 8011e9c:	f7ff ff62 	bl	8011d64 <__sfmoreglue>
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	6030      	str	r0, [r6, #0]
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d1d5      	bne.n	8011e54 <__sfp+0x24>
 8011ea8:	f7ff ff78 	bl	8011d9c <__sfp_lock_release>
 8011eac:	230c      	movs	r3, #12
 8011eae:	603b      	str	r3, [r7, #0]
 8011eb0:	e7ee      	b.n	8011e90 <__sfp+0x60>
 8011eb2:	bf00      	nop
 8011eb4:	08014fe4 	.word	0x08014fe4
 8011eb8:	ffff0001 	.word	0xffff0001

08011ebc <_fwalk_reent>:
 8011ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ec0:	4606      	mov	r6, r0
 8011ec2:	4688      	mov	r8, r1
 8011ec4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ec8:	2700      	movs	r7, #0
 8011eca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ece:	f1b9 0901 	subs.w	r9, r9, #1
 8011ed2:	d505      	bpl.n	8011ee0 <_fwalk_reent+0x24>
 8011ed4:	6824      	ldr	r4, [r4, #0]
 8011ed6:	2c00      	cmp	r4, #0
 8011ed8:	d1f7      	bne.n	8011eca <_fwalk_reent+0xe>
 8011eda:	4638      	mov	r0, r7
 8011edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ee0:	89ab      	ldrh	r3, [r5, #12]
 8011ee2:	2b01      	cmp	r3, #1
 8011ee4:	d907      	bls.n	8011ef6 <_fwalk_reent+0x3a>
 8011ee6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011eea:	3301      	adds	r3, #1
 8011eec:	d003      	beq.n	8011ef6 <_fwalk_reent+0x3a>
 8011eee:	4629      	mov	r1, r5
 8011ef0:	4630      	mov	r0, r6
 8011ef2:	47c0      	blx	r8
 8011ef4:	4307      	orrs	r7, r0
 8011ef6:	3568      	adds	r5, #104	; 0x68
 8011ef8:	e7e9      	b.n	8011ece <_fwalk_reent+0x12>

08011efa <rshift>:
 8011efa:	6903      	ldr	r3, [r0, #16]
 8011efc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f04:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011f08:	f100 0414 	add.w	r4, r0, #20
 8011f0c:	dd45      	ble.n	8011f9a <rshift+0xa0>
 8011f0e:	f011 011f 	ands.w	r1, r1, #31
 8011f12:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011f16:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011f1a:	d10c      	bne.n	8011f36 <rshift+0x3c>
 8011f1c:	f100 0710 	add.w	r7, r0, #16
 8011f20:	4629      	mov	r1, r5
 8011f22:	42b1      	cmp	r1, r6
 8011f24:	d334      	bcc.n	8011f90 <rshift+0x96>
 8011f26:	1a9b      	subs	r3, r3, r2
 8011f28:	009b      	lsls	r3, r3, #2
 8011f2a:	1eea      	subs	r2, r5, #3
 8011f2c:	4296      	cmp	r6, r2
 8011f2e:	bf38      	it	cc
 8011f30:	2300      	movcc	r3, #0
 8011f32:	4423      	add	r3, r4
 8011f34:	e015      	b.n	8011f62 <rshift+0x68>
 8011f36:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011f3a:	f1c1 0820 	rsb	r8, r1, #32
 8011f3e:	40cf      	lsrs	r7, r1
 8011f40:	f105 0e04 	add.w	lr, r5, #4
 8011f44:	46a1      	mov	r9, r4
 8011f46:	4576      	cmp	r6, lr
 8011f48:	46f4      	mov	ip, lr
 8011f4a:	d815      	bhi.n	8011f78 <rshift+0x7e>
 8011f4c:	1a9a      	subs	r2, r3, r2
 8011f4e:	0092      	lsls	r2, r2, #2
 8011f50:	3a04      	subs	r2, #4
 8011f52:	3501      	adds	r5, #1
 8011f54:	42ae      	cmp	r6, r5
 8011f56:	bf38      	it	cc
 8011f58:	2200      	movcc	r2, #0
 8011f5a:	18a3      	adds	r3, r4, r2
 8011f5c:	50a7      	str	r7, [r4, r2]
 8011f5e:	b107      	cbz	r7, 8011f62 <rshift+0x68>
 8011f60:	3304      	adds	r3, #4
 8011f62:	1b1a      	subs	r2, r3, r4
 8011f64:	42a3      	cmp	r3, r4
 8011f66:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011f6a:	bf08      	it	eq
 8011f6c:	2300      	moveq	r3, #0
 8011f6e:	6102      	str	r2, [r0, #16]
 8011f70:	bf08      	it	eq
 8011f72:	6143      	streq	r3, [r0, #20]
 8011f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f78:	f8dc c000 	ldr.w	ip, [ip]
 8011f7c:	fa0c fc08 	lsl.w	ip, ip, r8
 8011f80:	ea4c 0707 	orr.w	r7, ip, r7
 8011f84:	f849 7b04 	str.w	r7, [r9], #4
 8011f88:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011f8c:	40cf      	lsrs	r7, r1
 8011f8e:	e7da      	b.n	8011f46 <rshift+0x4c>
 8011f90:	f851 cb04 	ldr.w	ip, [r1], #4
 8011f94:	f847 cf04 	str.w	ip, [r7, #4]!
 8011f98:	e7c3      	b.n	8011f22 <rshift+0x28>
 8011f9a:	4623      	mov	r3, r4
 8011f9c:	e7e1      	b.n	8011f62 <rshift+0x68>

08011f9e <__hexdig_fun>:
 8011f9e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011fa2:	2b09      	cmp	r3, #9
 8011fa4:	d802      	bhi.n	8011fac <__hexdig_fun+0xe>
 8011fa6:	3820      	subs	r0, #32
 8011fa8:	b2c0      	uxtb	r0, r0
 8011faa:	4770      	bx	lr
 8011fac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011fb0:	2b05      	cmp	r3, #5
 8011fb2:	d801      	bhi.n	8011fb8 <__hexdig_fun+0x1a>
 8011fb4:	3847      	subs	r0, #71	; 0x47
 8011fb6:	e7f7      	b.n	8011fa8 <__hexdig_fun+0xa>
 8011fb8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011fbc:	2b05      	cmp	r3, #5
 8011fbe:	d801      	bhi.n	8011fc4 <__hexdig_fun+0x26>
 8011fc0:	3827      	subs	r0, #39	; 0x27
 8011fc2:	e7f1      	b.n	8011fa8 <__hexdig_fun+0xa>
 8011fc4:	2000      	movs	r0, #0
 8011fc6:	4770      	bx	lr

08011fc8 <__gethex>:
 8011fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fcc:	ed2d 8b02 	vpush	{d8}
 8011fd0:	b089      	sub	sp, #36	; 0x24
 8011fd2:	ee08 0a10 	vmov	s16, r0
 8011fd6:	9304      	str	r3, [sp, #16]
 8011fd8:	4bb4      	ldr	r3, [pc, #720]	; (80122ac <__gethex+0x2e4>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	9301      	str	r3, [sp, #4]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	468b      	mov	fp, r1
 8011fe2:	4690      	mov	r8, r2
 8011fe4:	f7ee f90e 	bl	8000204 <strlen>
 8011fe8:	9b01      	ldr	r3, [sp, #4]
 8011fea:	f8db 2000 	ldr.w	r2, [fp]
 8011fee:	4403      	add	r3, r0
 8011ff0:	4682      	mov	sl, r0
 8011ff2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011ff6:	9305      	str	r3, [sp, #20]
 8011ff8:	1c93      	adds	r3, r2, #2
 8011ffa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011ffe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012002:	32fe      	adds	r2, #254	; 0xfe
 8012004:	18d1      	adds	r1, r2, r3
 8012006:	461f      	mov	r7, r3
 8012008:	f813 0b01 	ldrb.w	r0, [r3], #1
 801200c:	9100      	str	r1, [sp, #0]
 801200e:	2830      	cmp	r0, #48	; 0x30
 8012010:	d0f8      	beq.n	8012004 <__gethex+0x3c>
 8012012:	f7ff ffc4 	bl	8011f9e <__hexdig_fun>
 8012016:	4604      	mov	r4, r0
 8012018:	2800      	cmp	r0, #0
 801201a:	d13a      	bne.n	8012092 <__gethex+0xca>
 801201c:	9901      	ldr	r1, [sp, #4]
 801201e:	4652      	mov	r2, sl
 8012020:	4638      	mov	r0, r7
 8012022:	f001 ff69 	bl	8013ef8 <strncmp>
 8012026:	4605      	mov	r5, r0
 8012028:	2800      	cmp	r0, #0
 801202a:	d168      	bne.n	80120fe <__gethex+0x136>
 801202c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012030:	eb07 060a 	add.w	r6, r7, sl
 8012034:	f7ff ffb3 	bl	8011f9e <__hexdig_fun>
 8012038:	2800      	cmp	r0, #0
 801203a:	d062      	beq.n	8012102 <__gethex+0x13a>
 801203c:	4633      	mov	r3, r6
 801203e:	7818      	ldrb	r0, [r3, #0]
 8012040:	2830      	cmp	r0, #48	; 0x30
 8012042:	461f      	mov	r7, r3
 8012044:	f103 0301 	add.w	r3, r3, #1
 8012048:	d0f9      	beq.n	801203e <__gethex+0x76>
 801204a:	f7ff ffa8 	bl	8011f9e <__hexdig_fun>
 801204e:	2301      	movs	r3, #1
 8012050:	fab0 f480 	clz	r4, r0
 8012054:	0964      	lsrs	r4, r4, #5
 8012056:	4635      	mov	r5, r6
 8012058:	9300      	str	r3, [sp, #0]
 801205a:	463a      	mov	r2, r7
 801205c:	4616      	mov	r6, r2
 801205e:	3201      	adds	r2, #1
 8012060:	7830      	ldrb	r0, [r6, #0]
 8012062:	f7ff ff9c 	bl	8011f9e <__hexdig_fun>
 8012066:	2800      	cmp	r0, #0
 8012068:	d1f8      	bne.n	801205c <__gethex+0x94>
 801206a:	9901      	ldr	r1, [sp, #4]
 801206c:	4652      	mov	r2, sl
 801206e:	4630      	mov	r0, r6
 8012070:	f001 ff42 	bl	8013ef8 <strncmp>
 8012074:	b980      	cbnz	r0, 8012098 <__gethex+0xd0>
 8012076:	b94d      	cbnz	r5, 801208c <__gethex+0xc4>
 8012078:	eb06 050a 	add.w	r5, r6, sl
 801207c:	462a      	mov	r2, r5
 801207e:	4616      	mov	r6, r2
 8012080:	3201      	adds	r2, #1
 8012082:	7830      	ldrb	r0, [r6, #0]
 8012084:	f7ff ff8b 	bl	8011f9e <__hexdig_fun>
 8012088:	2800      	cmp	r0, #0
 801208a:	d1f8      	bne.n	801207e <__gethex+0xb6>
 801208c:	1bad      	subs	r5, r5, r6
 801208e:	00ad      	lsls	r5, r5, #2
 8012090:	e004      	b.n	801209c <__gethex+0xd4>
 8012092:	2400      	movs	r4, #0
 8012094:	4625      	mov	r5, r4
 8012096:	e7e0      	b.n	801205a <__gethex+0x92>
 8012098:	2d00      	cmp	r5, #0
 801209a:	d1f7      	bne.n	801208c <__gethex+0xc4>
 801209c:	7833      	ldrb	r3, [r6, #0]
 801209e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80120a2:	2b50      	cmp	r3, #80	; 0x50
 80120a4:	d13b      	bne.n	801211e <__gethex+0x156>
 80120a6:	7873      	ldrb	r3, [r6, #1]
 80120a8:	2b2b      	cmp	r3, #43	; 0x2b
 80120aa:	d02c      	beq.n	8012106 <__gethex+0x13e>
 80120ac:	2b2d      	cmp	r3, #45	; 0x2d
 80120ae:	d02e      	beq.n	801210e <__gethex+0x146>
 80120b0:	1c71      	adds	r1, r6, #1
 80120b2:	f04f 0900 	mov.w	r9, #0
 80120b6:	7808      	ldrb	r0, [r1, #0]
 80120b8:	f7ff ff71 	bl	8011f9e <__hexdig_fun>
 80120bc:	1e43      	subs	r3, r0, #1
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	2b18      	cmp	r3, #24
 80120c2:	d82c      	bhi.n	801211e <__gethex+0x156>
 80120c4:	f1a0 0210 	sub.w	r2, r0, #16
 80120c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80120cc:	f7ff ff67 	bl	8011f9e <__hexdig_fun>
 80120d0:	1e43      	subs	r3, r0, #1
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	2b18      	cmp	r3, #24
 80120d6:	d91d      	bls.n	8012114 <__gethex+0x14c>
 80120d8:	f1b9 0f00 	cmp.w	r9, #0
 80120dc:	d000      	beq.n	80120e0 <__gethex+0x118>
 80120de:	4252      	negs	r2, r2
 80120e0:	4415      	add	r5, r2
 80120e2:	f8cb 1000 	str.w	r1, [fp]
 80120e6:	b1e4      	cbz	r4, 8012122 <__gethex+0x15a>
 80120e8:	9b00      	ldr	r3, [sp, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	bf14      	ite	ne
 80120ee:	2700      	movne	r7, #0
 80120f0:	2706      	moveq	r7, #6
 80120f2:	4638      	mov	r0, r7
 80120f4:	b009      	add	sp, #36	; 0x24
 80120f6:	ecbd 8b02 	vpop	{d8}
 80120fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120fe:	463e      	mov	r6, r7
 8012100:	4625      	mov	r5, r4
 8012102:	2401      	movs	r4, #1
 8012104:	e7ca      	b.n	801209c <__gethex+0xd4>
 8012106:	f04f 0900 	mov.w	r9, #0
 801210a:	1cb1      	adds	r1, r6, #2
 801210c:	e7d3      	b.n	80120b6 <__gethex+0xee>
 801210e:	f04f 0901 	mov.w	r9, #1
 8012112:	e7fa      	b.n	801210a <__gethex+0x142>
 8012114:	230a      	movs	r3, #10
 8012116:	fb03 0202 	mla	r2, r3, r2, r0
 801211a:	3a10      	subs	r2, #16
 801211c:	e7d4      	b.n	80120c8 <__gethex+0x100>
 801211e:	4631      	mov	r1, r6
 8012120:	e7df      	b.n	80120e2 <__gethex+0x11a>
 8012122:	1bf3      	subs	r3, r6, r7
 8012124:	3b01      	subs	r3, #1
 8012126:	4621      	mov	r1, r4
 8012128:	2b07      	cmp	r3, #7
 801212a:	dc0b      	bgt.n	8012144 <__gethex+0x17c>
 801212c:	ee18 0a10 	vmov	r0, s16
 8012130:	f000 faec 	bl	801270c <_Balloc>
 8012134:	4604      	mov	r4, r0
 8012136:	b940      	cbnz	r0, 801214a <__gethex+0x182>
 8012138:	4b5d      	ldr	r3, [pc, #372]	; (80122b0 <__gethex+0x2e8>)
 801213a:	4602      	mov	r2, r0
 801213c:	21de      	movs	r1, #222	; 0xde
 801213e:	485d      	ldr	r0, [pc, #372]	; (80122b4 <__gethex+0x2ec>)
 8012140:	f001 ffaa 	bl	8014098 <__assert_func>
 8012144:	3101      	adds	r1, #1
 8012146:	105b      	asrs	r3, r3, #1
 8012148:	e7ee      	b.n	8012128 <__gethex+0x160>
 801214a:	f100 0914 	add.w	r9, r0, #20
 801214e:	f04f 0b00 	mov.w	fp, #0
 8012152:	f1ca 0301 	rsb	r3, sl, #1
 8012156:	f8cd 9008 	str.w	r9, [sp, #8]
 801215a:	f8cd b000 	str.w	fp, [sp]
 801215e:	9306      	str	r3, [sp, #24]
 8012160:	42b7      	cmp	r7, r6
 8012162:	d340      	bcc.n	80121e6 <__gethex+0x21e>
 8012164:	9802      	ldr	r0, [sp, #8]
 8012166:	9b00      	ldr	r3, [sp, #0]
 8012168:	f840 3b04 	str.w	r3, [r0], #4
 801216c:	eba0 0009 	sub.w	r0, r0, r9
 8012170:	1080      	asrs	r0, r0, #2
 8012172:	0146      	lsls	r6, r0, #5
 8012174:	6120      	str	r0, [r4, #16]
 8012176:	4618      	mov	r0, r3
 8012178:	f000 fbba 	bl	80128f0 <__hi0bits>
 801217c:	1a30      	subs	r0, r6, r0
 801217e:	f8d8 6000 	ldr.w	r6, [r8]
 8012182:	42b0      	cmp	r0, r6
 8012184:	dd63      	ble.n	801224e <__gethex+0x286>
 8012186:	1b87      	subs	r7, r0, r6
 8012188:	4639      	mov	r1, r7
 801218a:	4620      	mov	r0, r4
 801218c:	f000 ff5e 	bl	801304c <__any_on>
 8012190:	4682      	mov	sl, r0
 8012192:	b1a8      	cbz	r0, 80121c0 <__gethex+0x1f8>
 8012194:	1e7b      	subs	r3, r7, #1
 8012196:	1159      	asrs	r1, r3, #5
 8012198:	f003 021f 	and.w	r2, r3, #31
 801219c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80121a0:	f04f 0a01 	mov.w	sl, #1
 80121a4:	fa0a f202 	lsl.w	r2, sl, r2
 80121a8:	420a      	tst	r2, r1
 80121aa:	d009      	beq.n	80121c0 <__gethex+0x1f8>
 80121ac:	4553      	cmp	r3, sl
 80121ae:	dd05      	ble.n	80121bc <__gethex+0x1f4>
 80121b0:	1eb9      	subs	r1, r7, #2
 80121b2:	4620      	mov	r0, r4
 80121b4:	f000 ff4a 	bl	801304c <__any_on>
 80121b8:	2800      	cmp	r0, #0
 80121ba:	d145      	bne.n	8012248 <__gethex+0x280>
 80121bc:	f04f 0a02 	mov.w	sl, #2
 80121c0:	4639      	mov	r1, r7
 80121c2:	4620      	mov	r0, r4
 80121c4:	f7ff fe99 	bl	8011efa <rshift>
 80121c8:	443d      	add	r5, r7
 80121ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80121ce:	42ab      	cmp	r3, r5
 80121d0:	da4c      	bge.n	801226c <__gethex+0x2a4>
 80121d2:	ee18 0a10 	vmov	r0, s16
 80121d6:	4621      	mov	r1, r4
 80121d8:	f000 fad8 	bl	801278c <_Bfree>
 80121dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80121de:	2300      	movs	r3, #0
 80121e0:	6013      	str	r3, [r2, #0]
 80121e2:	27a3      	movs	r7, #163	; 0xa3
 80121e4:	e785      	b.n	80120f2 <__gethex+0x12a>
 80121e6:	1e73      	subs	r3, r6, #1
 80121e8:	9a05      	ldr	r2, [sp, #20]
 80121ea:	9303      	str	r3, [sp, #12]
 80121ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80121f0:	4293      	cmp	r3, r2
 80121f2:	d019      	beq.n	8012228 <__gethex+0x260>
 80121f4:	f1bb 0f20 	cmp.w	fp, #32
 80121f8:	d107      	bne.n	801220a <__gethex+0x242>
 80121fa:	9b02      	ldr	r3, [sp, #8]
 80121fc:	9a00      	ldr	r2, [sp, #0]
 80121fe:	f843 2b04 	str.w	r2, [r3], #4
 8012202:	9302      	str	r3, [sp, #8]
 8012204:	2300      	movs	r3, #0
 8012206:	9300      	str	r3, [sp, #0]
 8012208:	469b      	mov	fp, r3
 801220a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801220e:	f7ff fec6 	bl	8011f9e <__hexdig_fun>
 8012212:	9b00      	ldr	r3, [sp, #0]
 8012214:	f000 000f 	and.w	r0, r0, #15
 8012218:	fa00 f00b 	lsl.w	r0, r0, fp
 801221c:	4303      	orrs	r3, r0
 801221e:	9300      	str	r3, [sp, #0]
 8012220:	f10b 0b04 	add.w	fp, fp, #4
 8012224:	9b03      	ldr	r3, [sp, #12]
 8012226:	e00d      	b.n	8012244 <__gethex+0x27c>
 8012228:	9b03      	ldr	r3, [sp, #12]
 801222a:	9a06      	ldr	r2, [sp, #24]
 801222c:	4413      	add	r3, r2
 801222e:	42bb      	cmp	r3, r7
 8012230:	d3e0      	bcc.n	80121f4 <__gethex+0x22c>
 8012232:	4618      	mov	r0, r3
 8012234:	9901      	ldr	r1, [sp, #4]
 8012236:	9307      	str	r3, [sp, #28]
 8012238:	4652      	mov	r2, sl
 801223a:	f001 fe5d 	bl	8013ef8 <strncmp>
 801223e:	9b07      	ldr	r3, [sp, #28]
 8012240:	2800      	cmp	r0, #0
 8012242:	d1d7      	bne.n	80121f4 <__gethex+0x22c>
 8012244:	461e      	mov	r6, r3
 8012246:	e78b      	b.n	8012160 <__gethex+0x198>
 8012248:	f04f 0a03 	mov.w	sl, #3
 801224c:	e7b8      	b.n	80121c0 <__gethex+0x1f8>
 801224e:	da0a      	bge.n	8012266 <__gethex+0x29e>
 8012250:	1a37      	subs	r7, r6, r0
 8012252:	4621      	mov	r1, r4
 8012254:	ee18 0a10 	vmov	r0, s16
 8012258:	463a      	mov	r2, r7
 801225a:	f000 fcb3 	bl	8012bc4 <__lshift>
 801225e:	1bed      	subs	r5, r5, r7
 8012260:	4604      	mov	r4, r0
 8012262:	f100 0914 	add.w	r9, r0, #20
 8012266:	f04f 0a00 	mov.w	sl, #0
 801226a:	e7ae      	b.n	80121ca <__gethex+0x202>
 801226c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012270:	42a8      	cmp	r0, r5
 8012272:	dd72      	ble.n	801235a <__gethex+0x392>
 8012274:	1b45      	subs	r5, r0, r5
 8012276:	42ae      	cmp	r6, r5
 8012278:	dc36      	bgt.n	80122e8 <__gethex+0x320>
 801227a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801227e:	2b02      	cmp	r3, #2
 8012280:	d02a      	beq.n	80122d8 <__gethex+0x310>
 8012282:	2b03      	cmp	r3, #3
 8012284:	d02c      	beq.n	80122e0 <__gethex+0x318>
 8012286:	2b01      	cmp	r3, #1
 8012288:	d11c      	bne.n	80122c4 <__gethex+0x2fc>
 801228a:	42ae      	cmp	r6, r5
 801228c:	d11a      	bne.n	80122c4 <__gethex+0x2fc>
 801228e:	2e01      	cmp	r6, #1
 8012290:	d112      	bne.n	80122b8 <__gethex+0x2f0>
 8012292:	9a04      	ldr	r2, [sp, #16]
 8012294:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012298:	6013      	str	r3, [r2, #0]
 801229a:	2301      	movs	r3, #1
 801229c:	6123      	str	r3, [r4, #16]
 801229e:	f8c9 3000 	str.w	r3, [r9]
 80122a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80122a4:	2762      	movs	r7, #98	; 0x62
 80122a6:	601c      	str	r4, [r3, #0]
 80122a8:	e723      	b.n	80120f2 <__gethex+0x12a>
 80122aa:	bf00      	nop
 80122ac:	080151c8 	.word	0x080151c8
 80122b0:	080150ef 	.word	0x080150ef
 80122b4:	08015160 	.word	0x08015160
 80122b8:	1e71      	subs	r1, r6, #1
 80122ba:	4620      	mov	r0, r4
 80122bc:	f000 fec6 	bl	801304c <__any_on>
 80122c0:	2800      	cmp	r0, #0
 80122c2:	d1e6      	bne.n	8012292 <__gethex+0x2ca>
 80122c4:	ee18 0a10 	vmov	r0, s16
 80122c8:	4621      	mov	r1, r4
 80122ca:	f000 fa5f 	bl	801278c <_Bfree>
 80122ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80122d0:	2300      	movs	r3, #0
 80122d2:	6013      	str	r3, [r2, #0]
 80122d4:	2750      	movs	r7, #80	; 0x50
 80122d6:	e70c      	b.n	80120f2 <__gethex+0x12a>
 80122d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d1f2      	bne.n	80122c4 <__gethex+0x2fc>
 80122de:	e7d8      	b.n	8012292 <__gethex+0x2ca>
 80122e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1d5      	bne.n	8012292 <__gethex+0x2ca>
 80122e6:	e7ed      	b.n	80122c4 <__gethex+0x2fc>
 80122e8:	1e6f      	subs	r7, r5, #1
 80122ea:	f1ba 0f00 	cmp.w	sl, #0
 80122ee:	d131      	bne.n	8012354 <__gethex+0x38c>
 80122f0:	b127      	cbz	r7, 80122fc <__gethex+0x334>
 80122f2:	4639      	mov	r1, r7
 80122f4:	4620      	mov	r0, r4
 80122f6:	f000 fea9 	bl	801304c <__any_on>
 80122fa:	4682      	mov	sl, r0
 80122fc:	117b      	asrs	r3, r7, #5
 80122fe:	2101      	movs	r1, #1
 8012300:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012304:	f007 071f 	and.w	r7, r7, #31
 8012308:	fa01 f707 	lsl.w	r7, r1, r7
 801230c:	421f      	tst	r7, r3
 801230e:	4629      	mov	r1, r5
 8012310:	4620      	mov	r0, r4
 8012312:	bf18      	it	ne
 8012314:	f04a 0a02 	orrne.w	sl, sl, #2
 8012318:	1b76      	subs	r6, r6, r5
 801231a:	f7ff fdee 	bl	8011efa <rshift>
 801231e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012322:	2702      	movs	r7, #2
 8012324:	f1ba 0f00 	cmp.w	sl, #0
 8012328:	d048      	beq.n	80123bc <__gethex+0x3f4>
 801232a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801232e:	2b02      	cmp	r3, #2
 8012330:	d015      	beq.n	801235e <__gethex+0x396>
 8012332:	2b03      	cmp	r3, #3
 8012334:	d017      	beq.n	8012366 <__gethex+0x39e>
 8012336:	2b01      	cmp	r3, #1
 8012338:	d109      	bne.n	801234e <__gethex+0x386>
 801233a:	f01a 0f02 	tst.w	sl, #2
 801233e:	d006      	beq.n	801234e <__gethex+0x386>
 8012340:	f8d9 0000 	ldr.w	r0, [r9]
 8012344:	ea4a 0a00 	orr.w	sl, sl, r0
 8012348:	f01a 0f01 	tst.w	sl, #1
 801234c:	d10e      	bne.n	801236c <__gethex+0x3a4>
 801234e:	f047 0710 	orr.w	r7, r7, #16
 8012352:	e033      	b.n	80123bc <__gethex+0x3f4>
 8012354:	f04f 0a01 	mov.w	sl, #1
 8012358:	e7d0      	b.n	80122fc <__gethex+0x334>
 801235a:	2701      	movs	r7, #1
 801235c:	e7e2      	b.n	8012324 <__gethex+0x35c>
 801235e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012360:	f1c3 0301 	rsb	r3, r3, #1
 8012364:	9315      	str	r3, [sp, #84]	; 0x54
 8012366:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012368:	2b00      	cmp	r3, #0
 801236a:	d0f0      	beq.n	801234e <__gethex+0x386>
 801236c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012370:	f104 0314 	add.w	r3, r4, #20
 8012374:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012378:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801237c:	f04f 0c00 	mov.w	ip, #0
 8012380:	4618      	mov	r0, r3
 8012382:	f853 2b04 	ldr.w	r2, [r3], #4
 8012386:	f1b2 3fff 	cmp.w	r2, #4294967295
 801238a:	d01c      	beq.n	80123c6 <__gethex+0x3fe>
 801238c:	3201      	adds	r2, #1
 801238e:	6002      	str	r2, [r0, #0]
 8012390:	2f02      	cmp	r7, #2
 8012392:	f104 0314 	add.w	r3, r4, #20
 8012396:	d13f      	bne.n	8012418 <__gethex+0x450>
 8012398:	f8d8 2000 	ldr.w	r2, [r8]
 801239c:	3a01      	subs	r2, #1
 801239e:	42b2      	cmp	r2, r6
 80123a0:	d10a      	bne.n	80123b8 <__gethex+0x3f0>
 80123a2:	1171      	asrs	r1, r6, #5
 80123a4:	2201      	movs	r2, #1
 80123a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80123aa:	f006 061f 	and.w	r6, r6, #31
 80123ae:	fa02 f606 	lsl.w	r6, r2, r6
 80123b2:	421e      	tst	r6, r3
 80123b4:	bf18      	it	ne
 80123b6:	4617      	movne	r7, r2
 80123b8:	f047 0720 	orr.w	r7, r7, #32
 80123bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80123be:	601c      	str	r4, [r3, #0]
 80123c0:	9b04      	ldr	r3, [sp, #16]
 80123c2:	601d      	str	r5, [r3, #0]
 80123c4:	e695      	b.n	80120f2 <__gethex+0x12a>
 80123c6:	4299      	cmp	r1, r3
 80123c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80123cc:	d8d8      	bhi.n	8012380 <__gethex+0x3b8>
 80123ce:	68a3      	ldr	r3, [r4, #8]
 80123d0:	459b      	cmp	fp, r3
 80123d2:	db19      	blt.n	8012408 <__gethex+0x440>
 80123d4:	6861      	ldr	r1, [r4, #4]
 80123d6:	ee18 0a10 	vmov	r0, s16
 80123da:	3101      	adds	r1, #1
 80123dc:	f000 f996 	bl	801270c <_Balloc>
 80123e0:	4681      	mov	r9, r0
 80123e2:	b918      	cbnz	r0, 80123ec <__gethex+0x424>
 80123e4:	4b1a      	ldr	r3, [pc, #104]	; (8012450 <__gethex+0x488>)
 80123e6:	4602      	mov	r2, r0
 80123e8:	2184      	movs	r1, #132	; 0x84
 80123ea:	e6a8      	b.n	801213e <__gethex+0x176>
 80123ec:	6922      	ldr	r2, [r4, #16]
 80123ee:	3202      	adds	r2, #2
 80123f0:	f104 010c 	add.w	r1, r4, #12
 80123f4:	0092      	lsls	r2, r2, #2
 80123f6:	300c      	adds	r0, #12
 80123f8:	f7fc fda2 	bl	800ef40 <memcpy>
 80123fc:	4621      	mov	r1, r4
 80123fe:	ee18 0a10 	vmov	r0, s16
 8012402:	f000 f9c3 	bl	801278c <_Bfree>
 8012406:	464c      	mov	r4, r9
 8012408:	6923      	ldr	r3, [r4, #16]
 801240a:	1c5a      	adds	r2, r3, #1
 801240c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012410:	6122      	str	r2, [r4, #16]
 8012412:	2201      	movs	r2, #1
 8012414:	615a      	str	r2, [r3, #20]
 8012416:	e7bb      	b.n	8012390 <__gethex+0x3c8>
 8012418:	6922      	ldr	r2, [r4, #16]
 801241a:	455a      	cmp	r2, fp
 801241c:	dd0b      	ble.n	8012436 <__gethex+0x46e>
 801241e:	2101      	movs	r1, #1
 8012420:	4620      	mov	r0, r4
 8012422:	f7ff fd6a 	bl	8011efa <rshift>
 8012426:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801242a:	3501      	adds	r5, #1
 801242c:	42ab      	cmp	r3, r5
 801242e:	f6ff aed0 	blt.w	80121d2 <__gethex+0x20a>
 8012432:	2701      	movs	r7, #1
 8012434:	e7c0      	b.n	80123b8 <__gethex+0x3f0>
 8012436:	f016 061f 	ands.w	r6, r6, #31
 801243a:	d0fa      	beq.n	8012432 <__gethex+0x46a>
 801243c:	4453      	add	r3, sl
 801243e:	f1c6 0620 	rsb	r6, r6, #32
 8012442:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012446:	f000 fa53 	bl	80128f0 <__hi0bits>
 801244a:	42b0      	cmp	r0, r6
 801244c:	dbe7      	blt.n	801241e <__gethex+0x456>
 801244e:	e7f0      	b.n	8012432 <__gethex+0x46a>
 8012450:	080150ef 	.word	0x080150ef

08012454 <L_shift>:
 8012454:	f1c2 0208 	rsb	r2, r2, #8
 8012458:	0092      	lsls	r2, r2, #2
 801245a:	b570      	push	{r4, r5, r6, lr}
 801245c:	f1c2 0620 	rsb	r6, r2, #32
 8012460:	6843      	ldr	r3, [r0, #4]
 8012462:	6804      	ldr	r4, [r0, #0]
 8012464:	fa03 f506 	lsl.w	r5, r3, r6
 8012468:	432c      	orrs	r4, r5
 801246a:	40d3      	lsrs	r3, r2
 801246c:	6004      	str	r4, [r0, #0]
 801246e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012472:	4288      	cmp	r0, r1
 8012474:	d3f4      	bcc.n	8012460 <L_shift+0xc>
 8012476:	bd70      	pop	{r4, r5, r6, pc}

08012478 <__match>:
 8012478:	b530      	push	{r4, r5, lr}
 801247a:	6803      	ldr	r3, [r0, #0]
 801247c:	3301      	adds	r3, #1
 801247e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012482:	b914      	cbnz	r4, 801248a <__match+0x12>
 8012484:	6003      	str	r3, [r0, #0]
 8012486:	2001      	movs	r0, #1
 8012488:	bd30      	pop	{r4, r5, pc}
 801248a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801248e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012492:	2d19      	cmp	r5, #25
 8012494:	bf98      	it	ls
 8012496:	3220      	addls	r2, #32
 8012498:	42a2      	cmp	r2, r4
 801249a:	d0f0      	beq.n	801247e <__match+0x6>
 801249c:	2000      	movs	r0, #0
 801249e:	e7f3      	b.n	8012488 <__match+0x10>

080124a0 <__hexnan>:
 80124a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a4:	680b      	ldr	r3, [r1, #0]
 80124a6:	115e      	asrs	r6, r3, #5
 80124a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80124ac:	f013 031f 	ands.w	r3, r3, #31
 80124b0:	b087      	sub	sp, #28
 80124b2:	bf18      	it	ne
 80124b4:	3604      	addne	r6, #4
 80124b6:	2500      	movs	r5, #0
 80124b8:	1f37      	subs	r7, r6, #4
 80124ba:	4690      	mov	r8, r2
 80124bc:	6802      	ldr	r2, [r0, #0]
 80124be:	9301      	str	r3, [sp, #4]
 80124c0:	4682      	mov	sl, r0
 80124c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80124c6:	46b9      	mov	r9, r7
 80124c8:	463c      	mov	r4, r7
 80124ca:	9502      	str	r5, [sp, #8]
 80124cc:	46ab      	mov	fp, r5
 80124ce:	7851      	ldrb	r1, [r2, #1]
 80124d0:	1c53      	adds	r3, r2, #1
 80124d2:	9303      	str	r3, [sp, #12]
 80124d4:	b341      	cbz	r1, 8012528 <__hexnan+0x88>
 80124d6:	4608      	mov	r0, r1
 80124d8:	9205      	str	r2, [sp, #20]
 80124da:	9104      	str	r1, [sp, #16]
 80124dc:	f7ff fd5f 	bl	8011f9e <__hexdig_fun>
 80124e0:	2800      	cmp	r0, #0
 80124e2:	d14f      	bne.n	8012584 <__hexnan+0xe4>
 80124e4:	9904      	ldr	r1, [sp, #16]
 80124e6:	9a05      	ldr	r2, [sp, #20]
 80124e8:	2920      	cmp	r1, #32
 80124ea:	d818      	bhi.n	801251e <__hexnan+0x7e>
 80124ec:	9b02      	ldr	r3, [sp, #8]
 80124ee:	459b      	cmp	fp, r3
 80124f0:	dd13      	ble.n	801251a <__hexnan+0x7a>
 80124f2:	454c      	cmp	r4, r9
 80124f4:	d206      	bcs.n	8012504 <__hexnan+0x64>
 80124f6:	2d07      	cmp	r5, #7
 80124f8:	dc04      	bgt.n	8012504 <__hexnan+0x64>
 80124fa:	462a      	mov	r2, r5
 80124fc:	4649      	mov	r1, r9
 80124fe:	4620      	mov	r0, r4
 8012500:	f7ff ffa8 	bl	8012454 <L_shift>
 8012504:	4544      	cmp	r4, r8
 8012506:	d950      	bls.n	80125aa <__hexnan+0x10a>
 8012508:	2300      	movs	r3, #0
 801250a:	f1a4 0904 	sub.w	r9, r4, #4
 801250e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012512:	f8cd b008 	str.w	fp, [sp, #8]
 8012516:	464c      	mov	r4, r9
 8012518:	461d      	mov	r5, r3
 801251a:	9a03      	ldr	r2, [sp, #12]
 801251c:	e7d7      	b.n	80124ce <__hexnan+0x2e>
 801251e:	2929      	cmp	r1, #41	; 0x29
 8012520:	d156      	bne.n	80125d0 <__hexnan+0x130>
 8012522:	3202      	adds	r2, #2
 8012524:	f8ca 2000 	str.w	r2, [sl]
 8012528:	f1bb 0f00 	cmp.w	fp, #0
 801252c:	d050      	beq.n	80125d0 <__hexnan+0x130>
 801252e:	454c      	cmp	r4, r9
 8012530:	d206      	bcs.n	8012540 <__hexnan+0xa0>
 8012532:	2d07      	cmp	r5, #7
 8012534:	dc04      	bgt.n	8012540 <__hexnan+0xa0>
 8012536:	462a      	mov	r2, r5
 8012538:	4649      	mov	r1, r9
 801253a:	4620      	mov	r0, r4
 801253c:	f7ff ff8a 	bl	8012454 <L_shift>
 8012540:	4544      	cmp	r4, r8
 8012542:	d934      	bls.n	80125ae <__hexnan+0x10e>
 8012544:	f1a8 0204 	sub.w	r2, r8, #4
 8012548:	4623      	mov	r3, r4
 801254a:	f853 1b04 	ldr.w	r1, [r3], #4
 801254e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012552:	429f      	cmp	r7, r3
 8012554:	d2f9      	bcs.n	801254a <__hexnan+0xaa>
 8012556:	1b3b      	subs	r3, r7, r4
 8012558:	f023 0303 	bic.w	r3, r3, #3
 801255c:	3304      	adds	r3, #4
 801255e:	3401      	adds	r4, #1
 8012560:	3e03      	subs	r6, #3
 8012562:	42b4      	cmp	r4, r6
 8012564:	bf88      	it	hi
 8012566:	2304      	movhi	r3, #4
 8012568:	4443      	add	r3, r8
 801256a:	2200      	movs	r2, #0
 801256c:	f843 2b04 	str.w	r2, [r3], #4
 8012570:	429f      	cmp	r7, r3
 8012572:	d2fb      	bcs.n	801256c <__hexnan+0xcc>
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	b91b      	cbnz	r3, 8012580 <__hexnan+0xe0>
 8012578:	4547      	cmp	r7, r8
 801257a:	d127      	bne.n	80125cc <__hexnan+0x12c>
 801257c:	2301      	movs	r3, #1
 801257e:	603b      	str	r3, [r7, #0]
 8012580:	2005      	movs	r0, #5
 8012582:	e026      	b.n	80125d2 <__hexnan+0x132>
 8012584:	3501      	adds	r5, #1
 8012586:	2d08      	cmp	r5, #8
 8012588:	f10b 0b01 	add.w	fp, fp, #1
 801258c:	dd06      	ble.n	801259c <__hexnan+0xfc>
 801258e:	4544      	cmp	r4, r8
 8012590:	d9c3      	bls.n	801251a <__hexnan+0x7a>
 8012592:	2300      	movs	r3, #0
 8012594:	f844 3c04 	str.w	r3, [r4, #-4]
 8012598:	2501      	movs	r5, #1
 801259a:	3c04      	subs	r4, #4
 801259c:	6822      	ldr	r2, [r4, #0]
 801259e:	f000 000f 	and.w	r0, r0, #15
 80125a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80125a6:	6022      	str	r2, [r4, #0]
 80125a8:	e7b7      	b.n	801251a <__hexnan+0x7a>
 80125aa:	2508      	movs	r5, #8
 80125ac:	e7b5      	b.n	801251a <__hexnan+0x7a>
 80125ae:	9b01      	ldr	r3, [sp, #4]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d0df      	beq.n	8012574 <__hexnan+0xd4>
 80125b4:	f04f 32ff 	mov.w	r2, #4294967295
 80125b8:	f1c3 0320 	rsb	r3, r3, #32
 80125bc:	fa22 f303 	lsr.w	r3, r2, r3
 80125c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80125c4:	401a      	ands	r2, r3
 80125c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80125ca:	e7d3      	b.n	8012574 <__hexnan+0xd4>
 80125cc:	3f04      	subs	r7, #4
 80125ce:	e7d1      	b.n	8012574 <__hexnan+0xd4>
 80125d0:	2004      	movs	r0, #4
 80125d2:	b007      	add	sp, #28
 80125d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080125d8 <_localeconv_r>:
 80125d8:	4800      	ldr	r0, [pc, #0]	; (80125dc <_localeconv_r+0x4>)
 80125da:	4770      	bx	lr
 80125dc:	20000268 	.word	0x20000268

080125e0 <__retarget_lock_init_recursive>:
 80125e0:	4770      	bx	lr

080125e2 <__retarget_lock_acquire_recursive>:
 80125e2:	4770      	bx	lr

080125e4 <__retarget_lock_release_recursive>:
 80125e4:	4770      	bx	lr
	...

080125e8 <_lseek_r>:
 80125e8:	b538      	push	{r3, r4, r5, lr}
 80125ea:	4d07      	ldr	r5, [pc, #28]	; (8012608 <_lseek_r+0x20>)
 80125ec:	4604      	mov	r4, r0
 80125ee:	4608      	mov	r0, r1
 80125f0:	4611      	mov	r1, r2
 80125f2:	2200      	movs	r2, #0
 80125f4:	602a      	str	r2, [r5, #0]
 80125f6:	461a      	mov	r2, r3
 80125f8:	f7f1 feee 	bl	80043d8 <_lseek>
 80125fc:	1c43      	adds	r3, r0, #1
 80125fe:	d102      	bne.n	8012606 <_lseek_r+0x1e>
 8012600:	682b      	ldr	r3, [r5, #0]
 8012602:	b103      	cbz	r3, 8012606 <_lseek_r+0x1e>
 8012604:	6023      	str	r3, [r4, #0]
 8012606:	bd38      	pop	{r3, r4, r5, pc}
 8012608:	200031dc 	.word	0x200031dc

0801260c <__swhatbuf_r>:
 801260c:	b570      	push	{r4, r5, r6, lr}
 801260e:	460e      	mov	r6, r1
 8012610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012614:	2900      	cmp	r1, #0
 8012616:	b096      	sub	sp, #88	; 0x58
 8012618:	4614      	mov	r4, r2
 801261a:	461d      	mov	r5, r3
 801261c:	da08      	bge.n	8012630 <__swhatbuf_r+0x24>
 801261e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012622:	2200      	movs	r2, #0
 8012624:	602a      	str	r2, [r5, #0]
 8012626:	061a      	lsls	r2, r3, #24
 8012628:	d410      	bmi.n	801264c <__swhatbuf_r+0x40>
 801262a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801262e:	e00e      	b.n	801264e <__swhatbuf_r+0x42>
 8012630:	466a      	mov	r2, sp
 8012632:	f001 fd61 	bl	80140f8 <_fstat_r>
 8012636:	2800      	cmp	r0, #0
 8012638:	dbf1      	blt.n	801261e <__swhatbuf_r+0x12>
 801263a:	9a01      	ldr	r2, [sp, #4]
 801263c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012640:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012644:	425a      	negs	r2, r3
 8012646:	415a      	adcs	r2, r3
 8012648:	602a      	str	r2, [r5, #0]
 801264a:	e7ee      	b.n	801262a <__swhatbuf_r+0x1e>
 801264c:	2340      	movs	r3, #64	; 0x40
 801264e:	2000      	movs	r0, #0
 8012650:	6023      	str	r3, [r4, #0]
 8012652:	b016      	add	sp, #88	; 0x58
 8012654:	bd70      	pop	{r4, r5, r6, pc}
	...

08012658 <__smakebuf_r>:
 8012658:	898b      	ldrh	r3, [r1, #12]
 801265a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801265c:	079d      	lsls	r5, r3, #30
 801265e:	4606      	mov	r6, r0
 8012660:	460c      	mov	r4, r1
 8012662:	d507      	bpl.n	8012674 <__smakebuf_r+0x1c>
 8012664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012668:	6023      	str	r3, [r4, #0]
 801266a:	6123      	str	r3, [r4, #16]
 801266c:	2301      	movs	r3, #1
 801266e:	6163      	str	r3, [r4, #20]
 8012670:	b002      	add	sp, #8
 8012672:	bd70      	pop	{r4, r5, r6, pc}
 8012674:	ab01      	add	r3, sp, #4
 8012676:	466a      	mov	r2, sp
 8012678:	f7ff ffc8 	bl	801260c <__swhatbuf_r>
 801267c:	9900      	ldr	r1, [sp, #0]
 801267e:	4605      	mov	r5, r0
 8012680:	4630      	mov	r0, r6
 8012682:	f000 fd87 	bl	8013194 <_malloc_r>
 8012686:	b948      	cbnz	r0, 801269c <__smakebuf_r+0x44>
 8012688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801268c:	059a      	lsls	r2, r3, #22
 801268e:	d4ef      	bmi.n	8012670 <__smakebuf_r+0x18>
 8012690:	f023 0303 	bic.w	r3, r3, #3
 8012694:	f043 0302 	orr.w	r3, r3, #2
 8012698:	81a3      	strh	r3, [r4, #12]
 801269a:	e7e3      	b.n	8012664 <__smakebuf_r+0xc>
 801269c:	4b0d      	ldr	r3, [pc, #52]	; (80126d4 <__smakebuf_r+0x7c>)
 801269e:	62b3      	str	r3, [r6, #40]	; 0x28
 80126a0:	89a3      	ldrh	r3, [r4, #12]
 80126a2:	6020      	str	r0, [r4, #0]
 80126a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126a8:	81a3      	strh	r3, [r4, #12]
 80126aa:	9b00      	ldr	r3, [sp, #0]
 80126ac:	6163      	str	r3, [r4, #20]
 80126ae:	9b01      	ldr	r3, [sp, #4]
 80126b0:	6120      	str	r0, [r4, #16]
 80126b2:	b15b      	cbz	r3, 80126cc <__smakebuf_r+0x74>
 80126b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126b8:	4630      	mov	r0, r6
 80126ba:	f001 fd2f 	bl	801411c <_isatty_r>
 80126be:	b128      	cbz	r0, 80126cc <__smakebuf_r+0x74>
 80126c0:	89a3      	ldrh	r3, [r4, #12]
 80126c2:	f023 0303 	bic.w	r3, r3, #3
 80126c6:	f043 0301 	orr.w	r3, r3, #1
 80126ca:	81a3      	strh	r3, [r4, #12]
 80126cc:	89a0      	ldrh	r0, [r4, #12]
 80126ce:	4305      	orrs	r5, r0
 80126d0:	81a5      	strh	r5, [r4, #12]
 80126d2:	e7cd      	b.n	8012670 <__smakebuf_r+0x18>
 80126d4:	08011d59 	.word	0x08011d59

080126d8 <malloc>:
 80126d8:	4b02      	ldr	r3, [pc, #8]	; (80126e4 <malloc+0xc>)
 80126da:	4601      	mov	r1, r0
 80126dc:	6818      	ldr	r0, [r3, #0]
 80126de:	f000 bd59 	b.w	8013194 <_malloc_r>
 80126e2:	bf00      	nop
 80126e4:	20000110 	.word	0x20000110

080126e8 <__ascii_mbtowc>:
 80126e8:	b082      	sub	sp, #8
 80126ea:	b901      	cbnz	r1, 80126ee <__ascii_mbtowc+0x6>
 80126ec:	a901      	add	r1, sp, #4
 80126ee:	b142      	cbz	r2, 8012702 <__ascii_mbtowc+0x1a>
 80126f0:	b14b      	cbz	r3, 8012706 <__ascii_mbtowc+0x1e>
 80126f2:	7813      	ldrb	r3, [r2, #0]
 80126f4:	600b      	str	r3, [r1, #0]
 80126f6:	7812      	ldrb	r2, [r2, #0]
 80126f8:	1e10      	subs	r0, r2, #0
 80126fa:	bf18      	it	ne
 80126fc:	2001      	movne	r0, #1
 80126fe:	b002      	add	sp, #8
 8012700:	4770      	bx	lr
 8012702:	4610      	mov	r0, r2
 8012704:	e7fb      	b.n	80126fe <__ascii_mbtowc+0x16>
 8012706:	f06f 0001 	mvn.w	r0, #1
 801270a:	e7f8      	b.n	80126fe <__ascii_mbtowc+0x16>

0801270c <_Balloc>:
 801270c:	b570      	push	{r4, r5, r6, lr}
 801270e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012710:	4604      	mov	r4, r0
 8012712:	460d      	mov	r5, r1
 8012714:	b976      	cbnz	r6, 8012734 <_Balloc+0x28>
 8012716:	2010      	movs	r0, #16
 8012718:	f7ff ffde 	bl	80126d8 <malloc>
 801271c:	4602      	mov	r2, r0
 801271e:	6260      	str	r0, [r4, #36]	; 0x24
 8012720:	b920      	cbnz	r0, 801272c <_Balloc+0x20>
 8012722:	4b18      	ldr	r3, [pc, #96]	; (8012784 <_Balloc+0x78>)
 8012724:	4818      	ldr	r0, [pc, #96]	; (8012788 <_Balloc+0x7c>)
 8012726:	2166      	movs	r1, #102	; 0x66
 8012728:	f001 fcb6 	bl	8014098 <__assert_func>
 801272c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012730:	6006      	str	r6, [r0, #0]
 8012732:	60c6      	str	r6, [r0, #12]
 8012734:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012736:	68f3      	ldr	r3, [r6, #12]
 8012738:	b183      	cbz	r3, 801275c <_Balloc+0x50>
 801273a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801273c:	68db      	ldr	r3, [r3, #12]
 801273e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012742:	b9b8      	cbnz	r0, 8012774 <_Balloc+0x68>
 8012744:	2101      	movs	r1, #1
 8012746:	fa01 f605 	lsl.w	r6, r1, r5
 801274a:	1d72      	adds	r2, r6, #5
 801274c:	0092      	lsls	r2, r2, #2
 801274e:	4620      	mov	r0, r4
 8012750:	f000 fc9d 	bl	801308e <_calloc_r>
 8012754:	b160      	cbz	r0, 8012770 <_Balloc+0x64>
 8012756:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801275a:	e00e      	b.n	801277a <_Balloc+0x6e>
 801275c:	2221      	movs	r2, #33	; 0x21
 801275e:	2104      	movs	r1, #4
 8012760:	4620      	mov	r0, r4
 8012762:	f000 fc94 	bl	801308e <_calloc_r>
 8012766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012768:	60f0      	str	r0, [r6, #12]
 801276a:	68db      	ldr	r3, [r3, #12]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d1e4      	bne.n	801273a <_Balloc+0x2e>
 8012770:	2000      	movs	r0, #0
 8012772:	bd70      	pop	{r4, r5, r6, pc}
 8012774:	6802      	ldr	r2, [r0, #0]
 8012776:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801277a:	2300      	movs	r3, #0
 801277c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012780:	e7f7      	b.n	8012772 <_Balloc+0x66>
 8012782:	bf00      	nop
 8012784:	0801507d 	.word	0x0801507d
 8012788:	080151dc 	.word	0x080151dc

0801278c <_Bfree>:
 801278c:	b570      	push	{r4, r5, r6, lr}
 801278e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012790:	4605      	mov	r5, r0
 8012792:	460c      	mov	r4, r1
 8012794:	b976      	cbnz	r6, 80127b4 <_Bfree+0x28>
 8012796:	2010      	movs	r0, #16
 8012798:	f7ff ff9e 	bl	80126d8 <malloc>
 801279c:	4602      	mov	r2, r0
 801279e:	6268      	str	r0, [r5, #36]	; 0x24
 80127a0:	b920      	cbnz	r0, 80127ac <_Bfree+0x20>
 80127a2:	4b09      	ldr	r3, [pc, #36]	; (80127c8 <_Bfree+0x3c>)
 80127a4:	4809      	ldr	r0, [pc, #36]	; (80127cc <_Bfree+0x40>)
 80127a6:	218a      	movs	r1, #138	; 0x8a
 80127a8:	f001 fc76 	bl	8014098 <__assert_func>
 80127ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127b0:	6006      	str	r6, [r0, #0]
 80127b2:	60c6      	str	r6, [r0, #12]
 80127b4:	b13c      	cbz	r4, 80127c6 <_Bfree+0x3a>
 80127b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80127b8:	6862      	ldr	r2, [r4, #4]
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80127c0:	6021      	str	r1, [r4, #0]
 80127c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80127c6:	bd70      	pop	{r4, r5, r6, pc}
 80127c8:	0801507d 	.word	0x0801507d
 80127cc:	080151dc 	.word	0x080151dc

080127d0 <__multadd>:
 80127d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127d4:	690d      	ldr	r5, [r1, #16]
 80127d6:	4607      	mov	r7, r0
 80127d8:	460c      	mov	r4, r1
 80127da:	461e      	mov	r6, r3
 80127dc:	f101 0c14 	add.w	ip, r1, #20
 80127e0:	2000      	movs	r0, #0
 80127e2:	f8dc 3000 	ldr.w	r3, [ip]
 80127e6:	b299      	uxth	r1, r3
 80127e8:	fb02 6101 	mla	r1, r2, r1, r6
 80127ec:	0c1e      	lsrs	r6, r3, #16
 80127ee:	0c0b      	lsrs	r3, r1, #16
 80127f0:	fb02 3306 	mla	r3, r2, r6, r3
 80127f4:	b289      	uxth	r1, r1
 80127f6:	3001      	adds	r0, #1
 80127f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80127fc:	4285      	cmp	r5, r0
 80127fe:	f84c 1b04 	str.w	r1, [ip], #4
 8012802:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012806:	dcec      	bgt.n	80127e2 <__multadd+0x12>
 8012808:	b30e      	cbz	r6, 801284e <__multadd+0x7e>
 801280a:	68a3      	ldr	r3, [r4, #8]
 801280c:	42ab      	cmp	r3, r5
 801280e:	dc19      	bgt.n	8012844 <__multadd+0x74>
 8012810:	6861      	ldr	r1, [r4, #4]
 8012812:	4638      	mov	r0, r7
 8012814:	3101      	adds	r1, #1
 8012816:	f7ff ff79 	bl	801270c <_Balloc>
 801281a:	4680      	mov	r8, r0
 801281c:	b928      	cbnz	r0, 801282a <__multadd+0x5a>
 801281e:	4602      	mov	r2, r0
 8012820:	4b0c      	ldr	r3, [pc, #48]	; (8012854 <__multadd+0x84>)
 8012822:	480d      	ldr	r0, [pc, #52]	; (8012858 <__multadd+0x88>)
 8012824:	21b5      	movs	r1, #181	; 0xb5
 8012826:	f001 fc37 	bl	8014098 <__assert_func>
 801282a:	6922      	ldr	r2, [r4, #16]
 801282c:	3202      	adds	r2, #2
 801282e:	f104 010c 	add.w	r1, r4, #12
 8012832:	0092      	lsls	r2, r2, #2
 8012834:	300c      	adds	r0, #12
 8012836:	f7fc fb83 	bl	800ef40 <memcpy>
 801283a:	4621      	mov	r1, r4
 801283c:	4638      	mov	r0, r7
 801283e:	f7ff ffa5 	bl	801278c <_Bfree>
 8012842:	4644      	mov	r4, r8
 8012844:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012848:	3501      	adds	r5, #1
 801284a:	615e      	str	r6, [r3, #20]
 801284c:	6125      	str	r5, [r4, #16]
 801284e:	4620      	mov	r0, r4
 8012850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012854:	080150ef 	.word	0x080150ef
 8012858:	080151dc 	.word	0x080151dc

0801285c <__s2b>:
 801285c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012860:	460c      	mov	r4, r1
 8012862:	4615      	mov	r5, r2
 8012864:	461f      	mov	r7, r3
 8012866:	2209      	movs	r2, #9
 8012868:	3308      	adds	r3, #8
 801286a:	4606      	mov	r6, r0
 801286c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012870:	2100      	movs	r1, #0
 8012872:	2201      	movs	r2, #1
 8012874:	429a      	cmp	r2, r3
 8012876:	db09      	blt.n	801288c <__s2b+0x30>
 8012878:	4630      	mov	r0, r6
 801287a:	f7ff ff47 	bl	801270c <_Balloc>
 801287e:	b940      	cbnz	r0, 8012892 <__s2b+0x36>
 8012880:	4602      	mov	r2, r0
 8012882:	4b19      	ldr	r3, [pc, #100]	; (80128e8 <__s2b+0x8c>)
 8012884:	4819      	ldr	r0, [pc, #100]	; (80128ec <__s2b+0x90>)
 8012886:	21ce      	movs	r1, #206	; 0xce
 8012888:	f001 fc06 	bl	8014098 <__assert_func>
 801288c:	0052      	lsls	r2, r2, #1
 801288e:	3101      	adds	r1, #1
 8012890:	e7f0      	b.n	8012874 <__s2b+0x18>
 8012892:	9b08      	ldr	r3, [sp, #32]
 8012894:	6143      	str	r3, [r0, #20]
 8012896:	2d09      	cmp	r5, #9
 8012898:	f04f 0301 	mov.w	r3, #1
 801289c:	6103      	str	r3, [r0, #16]
 801289e:	dd16      	ble.n	80128ce <__s2b+0x72>
 80128a0:	f104 0909 	add.w	r9, r4, #9
 80128a4:	46c8      	mov	r8, r9
 80128a6:	442c      	add	r4, r5
 80128a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80128ac:	4601      	mov	r1, r0
 80128ae:	3b30      	subs	r3, #48	; 0x30
 80128b0:	220a      	movs	r2, #10
 80128b2:	4630      	mov	r0, r6
 80128b4:	f7ff ff8c 	bl	80127d0 <__multadd>
 80128b8:	45a0      	cmp	r8, r4
 80128ba:	d1f5      	bne.n	80128a8 <__s2b+0x4c>
 80128bc:	f1a5 0408 	sub.w	r4, r5, #8
 80128c0:	444c      	add	r4, r9
 80128c2:	1b2d      	subs	r5, r5, r4
 80128c4:	1963      	adds	r3, r4, r5
 80128c6:	42bb      	cmp	r3, r7
 80128c8:	db04      	blt.n	80128d4 <__s2b+0x78>
 80128ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128ce:	340a      	adds	r4, #10
 80128d0:	2509      	movs	r5, #9
 80128d2:	e7f6      	b.n	80128c2 <__s2b+0x66>
 80128d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80128d8:	4601      	mov	r1, r0
 80128da:	3b30      	subs	r3, #48	; 0x30
 80128dc:	220a      	movs	r2, #10
 80128de:	4630      	mov	r0, r6
 80128e0:	f7ff ff76 	bl	80127d0 <__multadd>
 80128e4:	e7ee      	b.n	80128c4 <__s2b+0x68>
 80128e6:	bf00      	nop
 80128e8:	080150ef 	.word	0x080150ef
 80128ec:	080151dc 	.word	0x080151dc

080128f0 <__hi0bits>:
 80128f0:	0c03      	lsrs	r3, r0, #16
 80128f2:	041b      	lsls	r3, r3, #16
 80128f4:	b9d3      	cbnz	r3, 801292c <__hi0bits+0x3c>
 80128f6:	0400      	lsls	r0, r0, #16
 80128f8:	2310      	movs	r3, #16
 80128fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80128fe:	bf04      	itt	eq
 8012900:	0200      	lsleq	r0, r0, #8
 8012902:	3308      	addeq	r3, #8
 8012904:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012908:	bf04      	itt	eq
 801290a:	0100      	lsleq	r0, r0, #4
 801290c:	3304      	addeq	r3, #4
 801290e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012912:	bf04      	itt	eq
 8012914:	0080      	lsleq	r0, r0, #2
 8012916:	3302      	addeq	r3, #2
 8012918:	2800      	cmp	r0, #0
 801291a:	db05      	blt.n	8012928 <__hi0bits+0x38>
 801291c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012920:	f103 0301 	add.w	r3, r3, #1
 8012924:	bf08      	it	eq
 8012926:	2320      	moveq	r3, #32
 8012928:	4618      	mov	r0, r3
 801292a:	4770      	bx	lr
 801292c:	2300      	movs	r3, #0
 801292e:	e7e4      	b.n	80128fa <__hi0bits+0xa>

08012930 <__lo0bits>:
 8012930:	6803      	ldr	r3, [r0, #0]
 8012932:	f013 0207 	ands.w	r2, r3, #7
 8012936:	4601      	mov	r1, r0
 8012938:	d00b      	beq.n	8012952 <__lo0bits+0x22>
 801293a:	07da      	lsls	r2, r3, #31
 801293c:	d423      	bmi.n	8012986 <__lo0bits+0x56>
 801293e:	0798      	lsls	r0, r3, #30
 8012940:	bf49      	itett	mi
 8012942:	085b      	lsrmi	r3, r3, #1
 8012944:	089b      	lsrpl	r3, r3, #2
 8012946:	2001      	movmi	r0, #1
 8012948:	600b      	strmi	r3, [r1, #0]
 801294a:	bf5c      	itt	pl
 801294c:	600b      	strpl	r3, [r1, #0]
 801294e:	2002      	movpl	r0, #2
 8012950:	4770      	bx	lr
 8012952:	b298      	uxth	r0, r3
 8012954:	b9a8      	cbnz	r0, 8012982 <__lo0bits+0x52>
 8012956:	0c1b      	lsrs	r3, r3, #16
 8012958:	2010      	movs	r0, #16
 801295a:	b2da      	uxtb	r2, r3
 801295c:	b90a      	cbnz	r2, 8012962 <__lo0bits+0x32>
 801295e:	3008      	adds	r0, #8
 8012960:	0a1b      	lsrs	r3, r3, #8
 8012962:	071a      	lsls	r2, r3, #28
 8012964:	bf04      	itt	eq
 8012966:	091b      	lsreq	r3, r3, #4
 8012968:	3004      	addeq	r0, #4
 801296a:	079a      	lsls	r2, r3, #30
 801296c:	bf04      	itt	eq
 801296e:	089b      	lsreq	r3, r3, #2
 8012970:	3002      	addeq	r0, #2
 8012972:	07da      	lsls	r2, r3, #31
 8012974:	d403      	bmi.n	801297e <__lo0bits+0x4e>
 8012976:	085b      	lsrs	r3, r3, #1
 8012978:	f100 0001 	add.w	r0, r0, #1
 801297c:	d005      	beq.n	801298a <__lo0bits+0x5a>
 801297e:	600b      	str	r3, [r1, #0]
 8012980:	4770      	bx	lr
 8012982:	4610      	mov	r0, r2
 8012984:	e7e9      	b.n	801295a <__lo0bits+0x2a>
 8012986:	2000      	movs	r0, #0
 8012988:	4770      	bx	lr
 801298a:	2020      	movs	r0, #32
 801298c:	4770      	bx	lr
	...

08012990 <__i2b>:
 8012990:	b510      	push	{r4, lr}
 8012992:	460c      	mov	r4, r1
 8012994:	2101      	movs	r1, #1
 8012996:	f7ff feb9 	bl	801270c <_Balloc>
 801299a:	4602      	mov	r2, r0
 801299c:	b928      	cbnz	r0, 80129aa <__i2b+0x1a>
 801299e:	4b05      	ldr	r3, [pc, #20]	; (80129b4 <__i2b+0x24>)
 80129a0:	4805      	ldr	r0, [pc, #20]	; (80129b8 <__i2b+0x28>)
 80129a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80129a6:	f001 fb77 	bl	8014098 <__assert_func>
 80129aa:	2301      	movs	r3, #1
 80129ac:	6144      	str	r4, [r0, #20]
 80129ae:	6103      	str	r3, [r0, #16]
 80129b0:	bd10      	pop	{r4, pc}
 80129b2:	bf00      	nop
 80129b4:	080150ef 	.word	0x080150ef
 80129b8:	080151dc 	.word	0x080151dc

080129bc <__multiply>:
 80129bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c0:	4691      	mov	r9, r2
 80129c2:	690a      	ldr	r2, [r1, #16]
 80129c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	bfb8      	it	lt
 80129cc:	460b      	movlt	r3, r1
 80129ce:	460c      	mov	r4, r1
 80129d0:	bfbc      	itt	lt
 80129d2:	464c      	movlt	r4, r9
 80129d4:	4699      	movlt	r9, r3
 80129d6:	6927      	ldr	r7, [r4, #16]
 80129d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80129dc:	68a3      	ldr	r3, [r4, #8]
 80129de:	6861      	ldr	r1, [r4, #4]
 80129e0:	eb07 060a 	add.w	r6, r7, sl
 80129e4:	42b3      	cmp	r3, r6
 80129e6:	b085      	sub	sp, #20
 80129e8:	bfb8      	it	lt
 80129ea:	3101      	addlt	r1, #1
 80129ec:	f7ff fe8e 	bl	801270c <_Balloc>
 80129f0:	b930      	cbnz	r0, 8012a00 <__multiply+0x44>
 80129f2:	4602      	mov	r2, r0
 80129f4:	4b44      	ldr	r3, [pc, #272]	; (8012b08 <__multiply+0x14c>)
 80129f6:	4845      	ldr	r0, [pc, #276]	; (8012b0c <__multiply+0x150>)
 80129f8:	f240 115d 	movw	r1, #349	; 0x15d
 80129fc:	f001 fb4c 	bl	8014098 <__assert_func>
 8012a00:	f100 0514 	add.w	r5, r0, #20
 8012a04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012a08:	462b      	mov	r3, r5
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	4543      	cmp	r3, r8
 8012a0e:	d321      	bcc.n	8012a54 <__multiply+0x98>
 8012a10:	f104 0314 	add.w	r3, r4, #20
 8012a14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012a18:	f109 0314 	add.w	r3, r9, #20
 8012a1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012a20:	9202      	str	r2, [sp, #8]
 8012a22:	1b3a      	subs	r2, r7, r4
 8012a24:	3a15      	subs	r2, #21
 8012a26:	f022 0203 	bic.w	r2, r2, #3
 8012a2a:	3204      	adds	r2, #4
 8012a2c:	f104 0115 	add.w	r1, r4, #21
 8012a30:	428f      	cmp	r7, r1
 8012a32:	bf38      	it	cc
 8012a34:	2204      	movcc	r2, #4
 8012a36:	9201      	str	r2, [sp, #4]
 8012a38:	9a02      	ldr	r2, [sp, #8]
 8012a3a:	9303      	str	r3, [sp, #12]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d80c      	bhi.n	8012a5a <__multiply+0x9e>
 8012a40:	2e00      	cmp	r6, #0
 8012a42:	dd03      	ble.n	8012a4c <__multiply+0x90>
 8012a44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d05a      	beq.n	8012b02 <__multiply+0x146>
 8012a4c:	6106      	str	r6, [r0, #16]
 8012a4e:	b005      	add	sp, #20
 8012a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a54:	f843 2b04 	str.w	r2, [r3], #4
 8012a58:	e7d8      	b.n	8012a0c <__multiply+0x50>
 8012a5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8012a5e:	f1ba 0f00 	cmp.w	sl, #0
 8012a62:	d024      	beq.n	8012aae <__multiply+0xf2>
 8012a64:	f104 0e14 	add.w	lr, r4, #20
 8012a68:	46a9      	mov	r9, r5
 8012a6a:	f04f 0c00 	mov.w	ip, #0
 8012a6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012a72:	f8d9 1000 	ldr.w	r1, [r9]
 8012a76:	fa1f fb82 	uxth.w	fp, r2
 8012a7a:	b289      	uxth	r1, r1
 8012a7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8012a80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012a84:	f8d9 2000 	ldr.w	r2, [r9]
 8012a88:	4461      	add	r1, ip
 8012a8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012a8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8012a92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012a96:	b289      	uxth	r1, r1
 8012a98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012a9c:	4577      	cmp	r7, lr
 8012a9e:	f849 1b04 	str.w	r1, [r9], #4
 8012aa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012aa6:	d8e2      	bhi.n	8012a6e <__multiply+0xb2>
 8012aa8:	9a01      	ldr	r2, [sp, #4]
 8012aaa:	f845 c002 	str.w	ip, [r5, r2]
 8012aae:	9a03      	ldr	r2, [sp, #12]
 8012ab0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012ab4:	3304      	adds	r3, #4
 8012ab6:	f1b9 0f00 	cmp.w	r9, #0
 8012aba:	d020      	beq.n	8012afe <__multiply+0x142>
 8012abc:	6829      	ldr	r1, [r5, #0]
 8012abe:	f104 0c14 	add.w	ip, r4, #20
 8012ac2:	46ae      	mov	lr, r5
 8012ac4:	f04f 0a00 	mov.w	sl, #0
 8012ac8:	f8bc b000 	ldrh.w	fp, [ip]
 8012acc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012ad0:	fb09 220b 	mla	r2, r9, fp, r2
 8012ad4:	4492      	add	sl, r2
 8012ad6:	b289      	uxth	r1, r1
 8012ad8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012adc:	f84e 1b04 	str.w	r1, [lr], #4
 8012ae0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012ae4:	f8be 1000 	ldrh.w	r1, [lr]
 8012ae8:	0c12      	lsrs	r2, r2, #16
 8012aea:	fb09 1102 	mla	r1, r9, r2, r1
 8012aee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012af2:	4567      	cmp	r7, ip
 8012af4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012af8:	d8e6      	bhi.n	8012ac8 <__multiply+0x10c>
 8012afa:	9a01      	ldr	r2, [sp, #4]
 8012afc:	50a9      	str	r1, [r5, r2]
 8012afe:	3504      	adds	r5, #4
 8012b00:	e79a      	b.n	8012a38 <__multiply+0x7c>
 8012b02:	3e01      	subs	r6, #1
 8012b04:	e79c      	b.n	8012a40 <__multiply+0x84>
 8012b06:	bf00      	nop
 8012b08:	080150ef 	.word	0x080150ef
 8012b0c:	080151dc 	.word	0x080151dc

08012b10 <__pow5mult>:
 8012b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b14:	4615      	mov	r5, r2
 8012b16:	f012 0203 	ands.w	r2, r2, #3
 8012b1a:	4606      	mov	r6, r0
 8012b1c:	460f      	mov	r7, r1
 8012b1e:	d007      	beq.n	8012b30 <__pow5mult+0x20>
 8012b20:	4c25      	ldr	r4, [pc, #148]	; (8012bb8 <__pow5mult+0xa8>)
 8012b22:	3a01      	subs	r2, #1
 8012b24:	2300      	movs	r3, #0
 8012b26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b2a:	f7ff fe51 	bl	80127d0 <__multadd>
 8012b2e:	4607      	mov	r7, r0
 8012b30:	10ad      	asrs	r5, r5, #2
 8012b32:	d03d      	beq.n	8012bb0 <__pow5mult+0xa0>
 8012b34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012b36:	b97c      	cbnz	r4, 8012b58 <__pow5mult+0x48>
 8012b38:	2010      	movs	r0, #16
 8012b3a:	f7ff fdcd 	bl	80126d8 <malloc>
 8012b3e:	4602      	mov	r2, r0
 8012b40:	6270      	str	r0, [r6, #36]	; 0x24
 8012b42:	b928      	cbnz	r0, 8012b50 <__pow5mult+0x40>
 8012b44:	4b1d      	ldr	r3, [pc, #116]	; (8012bbc <__pow5mult+0xac>)
 8012b46:	481e      	ldr	r0, [pc, #120]	; (8012bc0 <__pow5mult+0xb0>)
 8012b48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012b4c:	f001 faa4 	bl	8014098 <__assert_func>
 8012b50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b54:	6004      	str	r4, [r0, #0]
 8012b56:	60c4      	str	r4, [r0, #12]
 8012b58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012b5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b60:	b94c      	cbnz	r4, 8012b76 <__pow5mult+0x66>
 8012b62:	f240 2171 	movw	r1, #625	; 0x271
 8012b66:	4630      	mov	r0, r6
 8012b68:	f7ff ff12 	bl	8012990 <__i2b>
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b72:	4604      	mov	r4, r0
 8012b74:	6003      	str	r3, [r0, #0]
 8012b76:	f04f 0900 	mov.w	r9, #0
 8012b7a:	07eb      	lsls	r3, r5, #31
 8012b7c:	d50a      	bpl.n	8012b94 <__pow5mult+0x84>
 8012b7e:	4639      	mov	r1, r7
 8012b80:	4622      	mov	r2, r4
 8012b82:	4630      	mov	r0, r6
 8012b84:	f7ff ff1a 	bl	80129bc <__multiply>
 8012b88:	4639      	mov	r1, r7
 8012b8a:	4680      	mov	r8, r0
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	f7ff fdfd 	bl	801278c <_Bfree>
 8012b92:	4647      	mov	r7, r8
 8012b94:	106d      	asrs	r5, r5, #1
 8012b96:	d00b      	beq.n	8012bb0 <__pow5mult+0xa0>
 8012b98:	6820      	ldr	r0, [r4, #0]
 8012b9a:	b938      	cbnz	r0, 8012bac <__pow5mult+0x9c>
 8012b9c:	4622      	mov	r2, r4
 8012b9e:	4621      	mov	r1, r4
 8012ba0:	4630      	mov	r0, r6
 8012ba2:	f7ff ff0b 	bl	80129bc <__multiply>
 8012ba6:	6020      	str	r0, [r4, #0]
 8012ba8:	f8c0 9000 	str.w	r9, [r0]
 8012bac:	4604      	mov	r4, r0
 8012bae:	e7e4      	b.n	8012b7a <__pow5mult+0x6a>
 8012bb0:	4638      	mov	r0, r7
 8012bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bb6:	bf00      	nop
 8012bb8:	08015328 	.word	0x08015328
 8012bbc:	0801507d 	.word	0x0801507d
 8012bc0:	080151dc 	.word	0x080151dc

08012bc4 <__lshift>:
 8012bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bc8:	460c      	mov	r4, r1
 8012bca:	6849      	ldr	r1, [r1, #4]
 8012bcc:	6923      	ldr	r3, [r4, #16]
 8012bce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012bd2:	68a3      	ldr	r3, [r4, #8]
 8012bd4:	4607      	mov	r7, r0
 8012bd6:	4691      	mov	r9, r2
 8012bd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012bdc:	f108 0601 	add.w	r6, r8, #1
 8012be0:	42b3      	cmp	r3, r6
 8012be2:	db0b      	blt.n	8012bfc <__lshift+0x38>
 8012be4:	4638      	mov	r0, r7
 8012be6:	f7ff fd91 	bl	801270c <_Balloc>
 8012bea:	4605      	mov	r5, r0
 8012bec:	b948      	cbnz	r0, 8012c02 <__lshift+0x3e>
 8012bee:	4602      	mov	r2, r0
 8012bf0:	4b2a      	ldr	r3, [pc, #168]	; (8012c9c <__lshift+0xd8>)
 8012bf2:	482b      	ldr	r0, [pc, #172]	; (8012ca0 <__lshift+0xdc>)
 8012bf4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012bf8:	f001 fa4e 	bl	8014098 <__assert_func>
 8012bfc:	3101      	adds	r1, #1
 8012bfe:	005b      	lsls	r3, r3, #1
 8012c00:	e7ee      	b.n	8012be0 <__lshift+0x1c>
 8012c02:	2300      	movs	r3, #0
 8012c04:	f100 0114 	add.w	r1, r0, #20
 8012c08:	f100 0210 	add.w	r2, r0, #16
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	4553      	cmp	r3, sl
 8012c10:	db37      	blt.n	8012c82 <__lshift+0xbe>
 8012c12:	6920      	ldr	r0, [r4, #16]
 8012c14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c18:	f104 0314 	add.w	r3, r4, #20
 8012c1c:	f019 091f 	ands.w	r9, r9, #31
 8012c20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012c28:	d02f      	beq.n	8012c8a <__lshift+0xc6>
 8012c2a:	f1c9 0e20 	rsb	lr, r9, #32
 8012c2e:	468a      	mov	sl, r1
 8012c30:	f04f 0c00 	mov.w	ip, #0
 8012c34:	681a      	ldr	r2, [r3, #0]
 8012c36:	fa02 f209 	lsl.w	r2, r2, r9
 8012c3a:	ea42 020c 	orr.w	r2, r2, ip
 8012c3e:	f84a 2b04 	str.w	r2, [sl], #4
 8012c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c46:	4298      	cmp	r0, r3
 8012c48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012c4c:	d8f2      	bhi.n	8012c34 <__lshift+0x70>
 8012c4e:	1b03      	subs	r3, r0, r4
 8012c50:	3b15      	subs	r3, #21
 8012c52:	f023 0303 	bic.w	r3, r3, #3
 8012c56:	3304      	adds	r3, #4
 8012c58:	f104 0215 	add.w	r2, r4, #21
 8012c5c:	4290      	cmp	r0, r2
 8012c5e:	bf38      	it	cc
 8012c60:	2304      	movcc	r3, #4
 8012c62:	f841 c003 	str.w	ip, [r1, r3]
 8012c66:	f1bc 0f00 	cmp.w	ip, #0
 8012c6a:	d001      	beq.n	8012c70 <__lshift+0xac>
 8012c6c:	f108 0602 	add.w	r6, r8, #2
 8012c70:	3e01      	subs	r6, #1
 8012c72:	4638      	mov	r0, r7
 8012c74:	612e      	str	r6, [r5, #16]
 8012c76:	4621      	mov	r1, r4
 8012c78:	f7ff fd88 	bl	801278c <_Bfree>
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c82:	f842 0f04 	str.w	r0, [r2, #4]!
 8012c86:	3301      	adds	r3, #1
 8012c88:	e7c1      	b.n	8012c0e <__lshift+0x4a>
 8012c8a:	3904      	subs	r1, #4
 8012c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c90:	f841 2f04 	str.w	r2, [r1, #4]!
 8012c94:	4298      	cmp	r0, r3
 8012c96:	d8f9      	bhi.n	8012c8c <__lshift+0xc8>
 8012c98:	e7ea      	b.n	8012c70 <__lshift+0xac>
 8012c9a:	bf00      	nop
 8012c9c:	080150ef 	.word	0x080150ef
 8012ca0:	080151dc 	.word	0x080151dc

08012ca4 <__mcmp>:
 8012ca4:	b530      	push	{r4, r5, lr}
 8012ca6:	6902      	ldr	r2, [r0, #16]
 8012ca8:	690c      	ldr	r4, [r1, #16]
 8012caa:	1b12      	subs	r2, r2, r4
 8012cac:	d10e      	bne.n	8012ccc <__mcmp+0x28>
 8012cae:	f100 0314 	add.w	r3, r0, #20
 8012cb2:	3114      	adds	r1, #20
 8012cb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012cb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012cbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012cc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012cc4:	42a5      	cmp	r5, r4
 8012cc6:	d003      	beq.n	8012cd0 <__mcmp+0x2c>
 8012cc8:	d305      	bcc.n	8012cd6 <__mcmp+0x32>
 8012cca:	2201      	movs	r2, #1
 8012ccc:	4610      	mov	r0, r2
 8012cce:	bd30      	pop	{r4, r5, pc}
 8012cd0:	4283      	cmp	r3, r0
 8012cd2:	d3f3      	bcc.n	8012cbc <__mcmp+0x18>
 8012cd4:	e7fa      	b.n	8012ccc <__mcmp+0x28>
 8012cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8012cda:	e7f7      	b.n	8012ccc <__mcmp+0x28>

08012cdc <__mdiff>:
 8012cdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce0:	460c      	mov	r4, r1
 8012ce2:	4606      	mov	r6, r0
 8012ce4:	4611      	mov	r1, r2
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	4690      	mov	r8, r2
 8012cea:	f7ff ffdb 	bl	8012ca4 <__mcmp>
 8012cee:	1e05      	subs	r5, r0, #0
 8012cf0:	d110      	bne.n	8012d14 <__mdiff+0x38>
 8012cf2:	4629      	mov	r1, r5
 8012cf4:	4630      	mov	r0, r6
 8012cf6:	f7ff fd09 	bl	801270c <_Balloc>
 8012cfa:	b930      	cbnz	r0, 8012d0a <__mdiff+0x2e>
 8012cfc:	4b3a      	ldr	r3, [pc, #232]	; (8012de8 <__mdiff+0x10c>)
 8012cfe:	4602      	mov	r2, r0
 8012d00:	f240 2132 	movw	r1, #562	; 0x232
 8012d04:	4839      	ldr	r0, [pc, #228]	; (8012dec <__mdiff+0x110>)
 8012d06:	f001 f9c7 	bl	8014098 <__assert_func>
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012d10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d14:	bfa4      	itt	ge
 8012d16:	4643      	movge	r3, r8
 8012d18:	46a0      	movge	r8, r4
 8012d1a:	4630      	mov	r0, r6
 8012d1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012d20:	bfa6      	itte	ge
 8012d22:	461c      	movge	r4, r3
 8012d24:	2500      	movge	r5, #0
 8012d26:	2501      	movlt	r5, #1
 8012d28:	f7ff fcf0 	bl	801270c <_Balloc>
 8012d2c:	b920      	cbnz	r0, 8012d38 <__mdiff+0x5c>
 8012d2e:	4b2e      	ldr	r3, [pc, #184]	; (8012de8 <__mdiff+0x10c>)
 8012d30:	4602      	mov	r2, r0
 8012d32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012d36:	e7e5      	b.n	8012d04 <__mdiff+0x28>
 8012d38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012d3c:	6926      	ldr	r6, [r4, #16]
 8012d3e:	60c5      	str	r5, [r0, #12]
 8012d40:	f104 0914 	add.w	r9, r4, #20
 8012d44:	f108 0514 	add.w	r5, r8, #20
 8012d48:	f100 0e14 	add.w	lr, r0, #20
 8012d4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012d50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012d54:	f108 0210 	add.w	r2, r8, #16
 8012d58:	46f2      	mov	sl, lr
 8012d5a:	2100      	movs	r1, #0
 8012d5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012d60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012d64:	fa1f f883 	uxth.w	r8, r3
 8012d68:	fa11 f18b 	uxtah	r1, r1, fp
 8012d6c:	0c1b      	lsrs	r3, r3, #16
 8012d6e:	eba1 0808 	sub.w	r8, r1, r8
 8012d72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012d76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012d7a:	fa1f f888 	uxth.w	r8, r8
 8012d7e:	1419      	asrs	r1, r3, #16
 8012d80:	454e      	cmp	r6, r9
 8012d82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012d86:	f84a 3b04 	str.w	r3, [sl], #4
 8012d8a:	d8e7      	bhi.n	8012d5c <__mdiff+0x80>
 8012d8c:	1b33      	subs	r3, r6, r4
 8012d8e:	3b15      	subs	r3, #21
 8012d90:	f023 0303 	bic.w	r3, r3, #3
 8012d94:	3304      	adds	r3, #4
 8012d96:	3415      	adds	r4, #21
 8012d98:	42a6      	cmp	r6, r4
 8012d9a:	bf38      	it	cc
 8012d9c:	2304      	movcc	r3, #4
 8012d9e:	441d      	add	r5, r3
 8012da0:	4473      	add	r3, lr
 8012da2:	469e      	mov	lr, r3
 8012da4:	462e      	mov	r6, r5
 8012da6:	4566      	cmp	r6, ip
 8012da8:	d30e      	bcc.n	8012dc8 <__mdiff+0xec>
 8012daa:	f10c 0203 	add.w	r2, ip, #3
 8012dae:	1b52      	subs	r2, r2, r5
 8012db0:	f022 0203 	bic.w	r2, r2, #3
 8012db4:	3d03      	subs	r5, #3
 8012db6:	45ac      	cmp	ip, r5
 8012db8:	bf38      	it	cc
 8012dba:	2200      	movcc	r2, #0
 8012dbc:	441a      	add	r2, r3
 8012dbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012dc2:	b17b      	cbz	r3, 8012de4 <__mdiff+0x108>
 8012dc4:	6107      	str	r7, [r0, #16]
 8012dc6:	e7a3      	b.n	8012d10 <__mdiff+0x34>
 8012dc8:	f856 8b04 	ldr.w	r8, [r6], #4
 8012dcc:	fa11 f288 	uxtah	r2, r1, r8
 8012dd0:	1414      	asrs	r4, r2, #16
 8012dd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012dd6:	b292      	uxth	r2, r2
 8012dd8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012ddc:	f84e 2b04 	str.w	r2, [lr], #4
 8012de0:	1421      	asrs	r1, r4, #16
 8012de2:	e7e0      	b.n	8012da6 <__mdiff+0xca>
 8012de4:	3f01      	subs	r7, #1
 8012de6:	e7ea      	b.n	8012dbe <__mdiff+0xe2>
 8012de8:	080150ef 	.word	0x080150ef
 8012dec:	080151dc 	.word	0x080151dc

08012df0 <__ulp>:
 8012df0:	b082      	sub	sp, #8
 8012df2:	ed8d 0b00 	vstr	d0, [sp]
 8012df6:	9b01      	ldr	r3, [sp, #4]
 8012df8:	4912      	ldr	r1, [pc, #72]	; (8012e44 <__ulp+0x54>)
 8012dfa:	4019      	ands	r1, r3
 8012dfc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012e00:	2900      	cmp	r1, #0
 8012e02:	dd05      	ble.n	8012e10 <__ulp+0x20>
 8012e04:	2200      	movs	r2, #0
 8012e06:	460b      	mov	r3, r1
 8012e08:	ec43 2b10 	vmov	d0, r2, r3
 8012e0c:	b002      	add	sp, #8
 8012e0e:	4770      	bx	lr
 8012e10:	4249      	negs	r1, r1
 8012e12:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012e16:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012e1a:	f04f 0200 	mov.w	r2, #0
 8012e1e:	f04f 0300 	mov.w	r3, #0
 8012e22:	da04      	bge.n	8012e2e <__ulp+0x3e>
 8012e24:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012e28:	fa41 f300 	asr.w	r3, r1, r0
 8012e2c:	e7ec      	b.n	8012e08 <__ulp+0x18>
 8012e2e:	f1a0 0114 	sub.w	r1, r0, #20
 8012e32:	291e      	cmp	r1, #30
 8012e34:	bfda      	itte	le
 8012e36:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012e3a:	fa20 f101 	lsrle.w	r1, r0, r1
 8012e3e:	2101      	movgt	r1, #1
 8012e40:	460a      	mov	r2, r1
 8012e42:	e7e1      	b.n	8012e08 <__ulp+0x18>
 8012e44:	7ff00000 	.word	0x7ff00000

08012e48 <__b2d>:
 8012e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e4a:	6905      	ldr	r5, [r0, #16]
 8012e4c:	f100 0714 	add.w	r7, r0, #20
 8012e50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012e54:	1f2e      	subs	r6, r5, #4
 8012e56:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	f7ff fd48 	bl	80128f0 <__hi0bits>
 8012e60:	f1c0 0320 	rsb	r3, r0, #32
 8012e64:	280a      	cmp	r0, #10
 8012e66:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012ee4 <__b2d+0x9c>
 8012e6a:	600b      	str	r3, [r1, #0]
 8012e6c:	dc14      	bgt.n	8012e98 <__b2d+0x50>
 8012e6e:	f1c0 0e0b 	rsb	lr, r0, #11
 8012e72:	fa24 f10e 	lsr.w	r1, r4, lr
 8012e76:	42b7      	cmp	r7, r6
 8012e78:	ea41 030c 	orr.w	r3, r1, ip
 8012e7c:	bf34      	ite	cc
 8012e7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012e82:	2100      	movcs	r1, #0
 8012e84:	3015      	adds	r0, #21
 8012e86:	fa04 f000 	lsl.w	r0, r4, r0
 8012e8a:	fa21 f10e 	lsr.w	r1, r1, lr
 8012e8e:	ea40 0201 	orr.w	r2, r0, r1
 8012e92:	ec43 2b10 	vmov	d0, r2, r3
 8012e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e98:	42b7      	cmp	r7, r6
 8012e9a:	bf3a      	itte	cc
 8012e9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012ea0:	f1a5 0608 	subcc.w	r6, r5, #8
 8012ea4:	2100      	movcs	r1, #0
 8012ea6:	380b      	subs	r0, #11
 8012ea8:	d017      	beq.n	8012eda <__b2d+0x92>
 8012eaa:	f1c0 0c20 	rsb	ip, r0, #32
 8012eae:	fa04 f500 	lsl.w	r5, r4, r0
 8012eb2:	42be      	cmp	r6, r7
 8012eb4:	fa21 f40c 	lsr.w	r4, r1, ip
 8012eb8:	ea45 0504 	orr.w	r5, r5, r4
 8012ebc:	bf8c      	ite	hi
 8012ebe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012ec2:	2400      	movls	r4, #0
 8012ec4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012ec8:	fa01 f000 	lsl.w	r0, r1, r0
 8012ecc:	fa24 f40c 	lsr.w	r4, r4, ip
 8012ed0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012ed4:	ea40 0204 	orr.w	r2, r0, r4
 8012ed8:	e7db      	b.n	8012e92 <__b2d+0x4a>
 8012eda:	ea44 030c 	orr.w	r3, r4, ip
 8012ede:	460a      	mov	r2, r1
 8012ee0:	e7d7      	b.n	8012e92 <__b2d+0x4a>
 8012ee2:	bf00      	nop
 8012ee4:	3ff00000 	.word	0x3ff00000

08012ee8 <__d2b>:
 8012ee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012eec:	4689      	mov	r9, r1
 8012eee:	2101      	movs	r1, #1
 8012ef0:	ec57 6b10 	vmov	r6, r7, d0
 8012ef4:	4690      	mov	r8, r2
 8012ef6:	f7ff fc09 	bl	801270c <_Balloc>
 8012efa:	4604      	mov	r4, r0
 8012efc:	b930      	cbnz	r0, 8012f0c <__d2b+0x24>
 8012efe:	4602      	mov	r2, r0
 8012f00:	4b25      	ldr	r3, [pc, #148]	; (8012f98 <__d2b+0xb0>)
 8012f02:	4826      	ldr	r0, [pc, #152]	; (8012f9c <__d2b+0xb4>)
 8012f04:	f240 310a 	movw	r1, #778	; 0x30a
 8012f08:	f001 f8c6 	bl	8014098 <__assert_func>
 8012f0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012f10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012f14:	bb35      	cbnz	r5, 8012f64 <__d2b+0x7c>
 8012f16:	2e00      	cmp	r6, #0
 8012f18:	9301      	str	r3, [sp, #4]
 8012f1a:	d028      	beq.n	8012f6e <__d2b+0x86>
 8012f1c:	4668      	mov	r0, sp
 8012f1e:	9600      	str	r6, [sp, #0]
 8012f20:	f7ff fd06 	bl	8012930 <__lo0bits>
 8012f24:	9900      	ldr	r1, [sp, #0]
 8012f26:	b300      	cbz	r0, 8012f6a <__d2b+0x82>
 8012f28:	9a01      	ldr	r2, [sp, #4]
 8012f2a:	f1c0 0320 	rsb	r3, r0, #32
 8012f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8012f32:	430b      	orrs	r3, r1
 8012f34:	40c2      	lsrs	r2, r0
 8012f36:	6163      	str	r3, [r4, #20]
 8012f38:	9201      	str	r2, [sp, #4]
 8012f3a:	9b01      	ldr	r3, [sp, #4]
 8012f3c:	61a3      	str	r3, [r4, #24]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	bf14      	ite	ne
 8012f42:	2202      	movne	r2, #2
 8012f44:	2201      	moveq	r2, #1
 8012f46:	6122      	str	r2, [r4, #16]
 8012f48:	b1d5      	cbz	r5, 8012f80 <__d2b+0x98>
 8012f4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012f4e:	4405      	add	r5, r0
 8012f50:	f8c9 5000 	str.w	r5, [r9]
 8012f54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012f58:	f8c8 0000 	str.w	r0, [r8]
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	b003      	add	sp, #12
 8012f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f68:	e7d5      	b.n	8012f16 <__d2b+0x2e>
 8012f6a:	6161      	str	r1, [r4, #20]
 8012f6c:	e7e5      	b.n	8012f3a <__d2b+0x52>
 8012f6e:	a801      	add	r0, sp, #4
 8012f70:	f7ff fcde 	bl	8012930 <__lo0bits>
 8012f74:	9b01      	ldr	r3, [sp, #4]
 8012f76:	6163      	str	r3, [r4, #20]
 8012f78:	2201      	movs	r2, #1
 8012f7a:	6122      	str	r2, [r4, #16]
 8012f7c:	3020      	adds	r0, #32
 8012f7e:	e7e3      	b.n	8012f48 <__d2b+0x60>
 8012f80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012f84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012f88:	f8c9 0000 	str.w	r0, [r9]
 8012f8c:	6918      	ldr	r0, [r3, #16]
 8012f8e:	f7ff fcaf 	bl	80128f0 <__hi0bits>
 8012f92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012f96:	e7df      	b.n	8012f58 <__d2b+0x70>
 8012f98:	080150ef 	.word	0x080150ef
 8012f9c:	080151dc 	.word	0x080151dc

08012fa0 <__ratio>:
 8012fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa4:	4688      	mov	r8, r1
 8012fa6:	4669      	mov	r1, sp
 8012fa8:	4681      	mov	r9, r0
 8012faa:	f7ff ff4d 	bl	8012e48 <__b2d>
 8012fae:	a901      	add	r1, sp, #4
 8012fb0:	4640      	mov	r0, r8
 8012fb2:	ec55 4b10 	vmov	r4, r5, d0
 8012fb6:	f7ff ff47 	bl	8012e48 <__b2d>
 8012fba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012fbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012fc2:	eba3 0c02 	sub.w	ip, r3, r2
 8012fc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012fca:	1a9b      	subs	r3, r3, r2
 8012fcc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012fd0:	ec51 0b10 	vmov	r0, r1, d0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	bfd6      	itet	le
 8012fd8:	460a      	movle	r2, r1
 8012fda:	462a      	movgt	r2, r5
 8012fdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012fe0:	468b      	mov	fp, r1
 8012fe2:	462f      	mov	r7, r5
 8012fe4:	bfd4      	ite	le
 8012fe6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012fea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012fee:	4620      	mov	r0, r4
 8012ff0:	ee10 2a10 	vmov	r2, s0
 8012ff4:	465b      	mov	r3, fp
 8012ff6:	4639      	mov	r1, r7
 8012ff8:	f7ed fc48 	bl	800088c <__aeabi_ddiv>
 8012ffc:	ec41 0b10 	vmov	d0, r0, r1
 8013000:	b003      	add	sp, #12
 8013002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013006 <__copybits>:
 8013006:	3901      	subs	r1, #1
 8013008:	b570      	push	{r4, r5, r6, lr}
 801300a:	1149      	asrs	r1, r1, #5
 801300c:	6914      	ldr	r4, [r2, #16]
 801300e:	3101      	adds	r1, #1
 8013010:	f102 0314 	add.w	r3, r2, #20
 8013014:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013018:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801301c:	1f05      	subs	r5, r0, #4
 801301e:	42a3      	cmp	r3, r4
 8013020:	d30c      	bcc.n	801303c <__copybits+0x36>
 8013022:	1aa3      	subs	r3, r4, r2
 8013024:	3b11      	subs	r3, #17
 8013026:	f023 0303 	bic.w	r3, r3, #3
 801302a:	3211      	adds	r2, #17
 801302c:	42a2      	cmp	r2, r4
 801302e:	bf88      	it	hi
 8013030:	2300      	movhi	r3, #0
 8013032:	4418      	add	r0, r3
 8013034:	2300      	movs	r3, #0
 8013036:	4288      	cmp	r0, r1
 8013038:	d305      	bcc.n	8013046 <__copybits+0x40>
 801303a:	bd70      	pop	{r4, r5, r6, pc}
 801303c:	f853 6b04 	ldr.w	r6, [r3], #4
 8013040:	f845 6f04 	str.w	r6, [r5, #4]!
 8013044:	e7eb      	b.n	801301e <__copybits+0x18>
 8013046:	f840 3b04 	str.w	r3, [r0], #4
 801304a:	e7f4      	b.n	8013036 <__copybits+0x30>

0801304c <__any_on>:
 801304c:	f100 0214 	add.w	r2, r0, #20
 8013050:	6900      	ldr	r0, [r0, #16]
 8013052:	114b      	asrs	r3, r1, #5
 8013054:	4298      	cmp	r0, r3
 8013056:	b510      	push	{r4, lr}
 8013058:	db11      	blt.n	801307e <__any_on+0x32>
 801305a:	dd0a      	ble.n	8013072 <__any_on+0x26>
 801305c:	f011 011f 	ands.w	r1, r1, #31
 8013060:	d007      	beq.n	8013072 <__any_on+0x26>
 8013062:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013066:	fa24 f001 	lsr.w	r0, r4, r1
 801306a:	fa00 f101 	lsl.w	r1, r0, r1
 801306e:	428c      	cmp	r4, r1
 8013070:	d10b      	bne.n	801308a <__any_on+0x3e>
 8013072:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013076:	4293      	cmp	r3, r2
 8013078:	d803      	bhi.n	8013082 <__any_on+0x36>
 801307a:	2000      	movs	r0, #0
 801307c:	bd10      	pop	{r4, pc}
 801307e:	4603      	mov	r3, r0
 8013080:	e7f7      	b.n	8013072 <__any_on+0x26>
 8013082:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013086:	2900      	cmp	r1, #0
 8013088:	d0f5      	beq.n	8013076 <__any_on+0x2a>
 801308a:	2001      	movs	r0, #1
 801308c:	e7f6      	b.n	801307c <__any_on+0x30>

0801308e <_calloc_r>:
 801308e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013090:	fba1 2402 	umull	r2, r4, r1, r2
 8013094:	b94c      	cbnz	r4, 80130aa <_calloc_r+0x1c>
 8013096:	4611      	mov	r1, r2
 8013098:	9201      	str	r2, [sp, #4]
 801309a:	f000 f87b 	bl	8013194 <_malloc_r>
 801309e:	9a01      	ldr	r2, [sp, #4]
 80130a0:	4605      	mov	r5, r0
 80130a2:	b930      	cbnz	r0, 80130b2 <_calloc_r+0x24>
 80130a4:	4628      	mov	r0, r5
 80130a6:	b003      	add	sp, #12
 80130a8:	bd30      	pop	{r4, r5, pc}
 80130aa:	220c      	movs	r2, #12
 80130ac:	6002      	str	r2, [r0, #0]
 80130ae:	2500      	movs	r5, #0
 80130b0:	e7f8      	b.n	80130a4 <_calloc_r+0x16>
 80130b2:	4621      	mov	r1, r4
 80130b4:	f7fb ff6c 	bl	800ef90 <memset>
 80130b8:	e7f4      	b.n	80130a4 <_calloc_r+0x16>
	...

080130bc <_free_r>:
 80130bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80130be:	2900      	cmp	r1, #0
 80130c0:	d044      	beq.n	801314c <_free_r+0x90>
 80130c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130c6:	9001      	str	r0, [sp, #4]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	f1a1 0404 	sub.w	r4, r1, #4
 80130ce:	bfb8      	it	lt
 80130d0:	18e4      	addlt	r4, r4, r3
 80130d2:	f001 f833 	bl	801413c <__malloc_lock>
 80130d6:	4a1e      	ldr	r2, [pc, #120]	; (8013150 <_free_r+0x94>)
 80130d8:	9801      	ldr	r0, [sp, #4]
 80130da:	6813      	ldr	r3, [r2, #0]
 80130dc:	b933      	cbnz	r3, 80130ec <_free_r+0x30>
 80130de:	6063      	str	r3, [r4, #4]
 80130e0:	6014      	str	r4, [r2, #0]
 80130e2:	b003      	add	sp, #12
 80130e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80130e8:	f001 b82e 	b.w	8014148 <__malloc_unlock>
 80130ec:	42a3      	cmp	r3, r4
 80130ee:	d908      	bls.n	8013102 <_free_r+0x46>
 80130f0:	6825      	ldr	r5, [r4, #0]
 80130f2:	1961      	adds	r1, r4, r5
 80130f4:	428b      	cmp	r3, r1
 80130f6:	bf01      	itttt	eq
 80130f8:	6819      	ldreq	r1, [r3, #0]
 80130fa:	685b      	ldreq	r3, [r3, #4]
 80130fc:	1949      	addeq	r1, r1, r5
 80130fe:	6021      	streq	r1, [r4, #0]
 8013100:	e7ed      	b.n	80130de <_free_r+0x22>
 8013102:	461a      	mov	r2, r3
 8013104:	685b      	ldr	r3, [r3, #4]
 8013106:	b10b      	cbz	r3, 801310c <_free_r+0x50>
 8013108:	42a3      	cmp	r3, r4
 801310a:	d9fa      	bls.n	8013102 <_free_r+0x46>
 801310c:	6811      	ldr	r1, [r2, #0]
 801310e:	1855      	adds	r5, r2, r1
 8013110:	42a5      	cmp	r5, r4
 8013112:	d10b      	bne.n	801312c <_free_r+0x70>
 8013114:	6824      	ldr	r4, [r4, #0]
 8013116:	4421      	add	r1, r4
 8013118:	1854      	adds	r4, r2, r1
 801311a:	42a3      	cmp	r3, r4
 801311c:	6011      	str	r1, [r2, #0]
 801311e:	d1e0      	bne.n	80130e2 <_free_r+0x26>
 8013120:	681c      	ldr	r4, [r3, #0]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	6053      	str	r3, [r2, #4]
 8013126:	4421      	add	r1, r4
 8013128:	6011      	str	r1, [r2, #0]
 801312a:	e7da      	b.n	80130e2 <_free_r+0x26>
 801312c:	d902      	bls.n	8013134 <_free_r+0x78>
 801312e:	230c      	movs	r3, #12
 8013130:	6003      	str	r3, [r0, #0]
 8013132:	e7d6      	b.n	80130e2 <_free_r+0x26>
 8013134:	6825      	ldr	r5, [r4, #0]
 8013136:	1961      	adds	r1, r4, r5
 8013138:	428b      	cmp	r3, r1
 801313a:	bf04      	itt	eq
 801313c:	6819      	ldreq	r1, [r3, #0]
 801313e:	685b      	ldreq	r3, [r3, #4]
 8013140:	6063      	str	r3, [r4, #4]
 8013142:	bf04      	itt	eq
 8013144:	1949      	addeq	r1, r1, r5
 8013146:	6021      	streq	r1, [r4, #0]
 8013148:	6054      	str	r4, [r2, #4]
 801314a:	e7ca      	b.n	80130e2 <_free_r+0x26>
 801314c:	b003      	add	sp, #12
 801314e:	bd30      	pop	{r4, r5, pc}
 8013150:	200031d4 	.word	0x200031d4

08013154 <sbrk_aligned>:
 8013154:	b570      	push	{r4, r5, r6, lr}
 8013156:	4e0e      	ldr	r6, [pc, #56]	; (8013190 <sbrk_aligned+0x3c>)
 8013158:	460c      	mov	r4, r1
 801315a:	6831      	ldr	r1, [r6, #0]
 801315c:	4605      	mov	r5, r0
 801315e:	b911      	cbnz	r1, 8013166 <sbrk_aligned+0x12>
 8013160:	f000 fe82 	bl	8013e68 <_sbrk_r>
 8013164:	6030      	str	r0, [r6, #0]
 8013166:	4621      	mov	r1, r4
 8013168:	4628      	mov	r0, r5
 801316a:	f000 fe7d 	bl	8013e68 <_sbrk_r>
 801316e:	1c43      	adds	r3, r0, #1
 8013170:	d00a      	beq.n	8013188 <sbrk_aligned+0x34>
 8013172:	1cc4      	adds	r4, r0, #3
 8013174:	f024 0403 	bic.w	r4, r4, #3
 8013178:	42a0      	cmp	r0, r4
 801317a:	d007      	beq.n	801318c <sbrk_aligned+0x38>
 801317c:	1a21      	subs	r1, r4, r0
 801317e:	4628      	mov	r0, r5
 8013180:	f000 fe72 	bl	8013e68 <_sbrk_r>
 8013184:	3001      	adds	r0, #1
 8013186:	d101      	bne.n	801318c <sbrk_aligned+0x38>
 8013188:	f04f 34ff 	mov.w	r4, #4294967295
 801318c:	4620      	mov	r0, r4
 801318e:	bd70      	pop	{r4, r5, r6, pc}
 8013190:	200031d8 	.word	0x200031d8

08013194 <_malloc_r>:
 8013194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013198:	1ccd      	adds	r5, r1, #3
 801319a:	f025 0503 	bic.w	r5, r5, #3
 801319e:	3508      	adds	r5, #8
 80131a0:	2d0c      	cmp	r5, #12
 80131a2:	bf38      	it	cc
 80131a4:	250c      	movcc	r5, #12
 80131a6:	2d00      	cmp	r5, #0
 80131a8:	4607      	mov	r7, r0
 80131aa:	db01      	blt.n	80131b0 <_malloc_r+0x1c>
 80131ac:	42a9      	cmp	r1, r5
 80131ae:	d905      	bls.n	80131bc <_malloc_r+0x28>
 80131b0:	230c      	movs	r3, #12
 80131b2:	603b      	str	r3, [r7, #0]
 80131b4:	2600      	movs	r6, #0
 80131b6:	4630      	mov	r0, r6
 80131b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131bc:	4e2e      	ldr	r6, [pc, #184]	; (8013278 <_malloc_r+0xe4>)
 80131be:	f000 ffbd 	bl	801413c <__malloc_lock>
 80131c2:	6833      	ldr	r3, [r6, #0]
 80131c4:	461c      	mov	r4, r3
 80131c6:	bb34      	cbnz	r4, 8013216 <_malloc_r+0x82>
 80131c8:	4629      	mov	r1, r5
 80131ca:	4638      	mov	r0, r7
 80131cc:	f7ff ffc2 	bl	8013154 <sbrk_aligned>
 80131d0:	1c43      	adds	r3, r0, #1
 80131d2:	4604      	mov	r4, r0
 80131d4:	d14d      	bne.n	8013272 <_malloc_r+0xde>
 80131d6:	6834      	ldr	r4, [r6, #0]
 80131d8:	4626      	mov	r6, r4
 80131da:	2e00      	cmp	r6, #0
 80131dc:	d140      	bne.n	8013260 <_malloc_r+0xcc>
 80131de:	6823      	ldr	r3, [r4, #0]
 80131e0:	4631      	mov	r1, r6
 80131e2:	4638      	mov	r0, r7
 80131e4:	eb04 0803 	add.w	r8, r4, r3
 80131e8:	f000 fe3e 	bl	8013e68 <_sbrk_r>
 80131ec:	4580      	cmp	r8, r0
 80131ee:	d13a      	bne.n	8013266 <_malloc_r+0xd2>
 80131f0:	6821      	ldr	r1, [r4, #0]
 80131f2:	3503      	adds	r5, #3
 80131f4:	1a6d      	subs	r5, r5, r1
 80131f6:	f025 0503 	bic.w	r5, r5, #3
 80131fa:	3508      	adds	r5, #8
 80131fc:	2d0c      	cmp	r5, #12
 80131fe:	bf38      	it	cc
 8013200:	250c      	movcc	r5, #12
 8013202:	4629      	mov	r1, r5
 8013204:	4638      	mov	r0, r7
 8013206:	f7ff ffa5 	bl	8013154 <sbrk_aligned>
 801320a:	3001      	adds	r0, #1
 801320c:	d02b      	beq.n	8013266 <_malloc_r+0xd2>
 801320e:	6823      	ldr	r3, [r4, #0]
 8013210:	442b      	add	r3, r5
 8013212:	6023      	str	r3, [r4, #0]
 8013214:	e00e      	b.n	8013234 <_malloc_r+0xa0>
 8013216:	6822      	ldr	r2, [r4, #0]
 8013218:	1b52      	subs	r2, r2, r5
 801321a:	d41e      	bmi.n	801325a <_malloc_r+0xc6>
 801321c:	2a0b      	cmp	r2, #11
 801321e:	d916      	bls.n	801324e <_malloc_r+0xba>
 8013220:	1961      	adds	r1, r4, r5
 8013222:	42a3      	cmp	r3, r4
 8013224:	6025      	str	r5, [r4, #0]
 8013226:	bf18      	it	ne
 8013228:	6059      	strne	r1, [r3, #4]
 801322a:	6863      	ldr	r3, [r4, #4]
 801322c:	bf08      	it	eq
 801322e:	6031      	streq	r1, [r6, #0]
 8013230:	5162      	str	r2, [r4, r5]
 8013232:	604b      	str	r3, [r1, #4]
 8013234:	4638      	mov	r0, r7
 8013236:	f104 060b 	add.w	r6, r4, #11
 801323a:	f000 ff85 	bl	8014148 <__malloc_unlock>
 801323e:	f026 0607 	bic.w	r6, r6, #7
 8013242:	1d23      	adds	r3, r4, #4
 8013244:	1af2      	subs	r2, r6, r3
 8013246:	d0b6      	beq.n	80131b6 <_malloc_r+0x22>
 8013248:	1b9b      	subs	r3, r3, r6
 801324a:	50a3      	str	r3, [r4, r2]
 801324c:	e7b3      	b.n	80131b6 <_malloc_r+0x22>
 801324e:	6862      	ldr	r2, [r4, #4]
 8013250:	42a3      	cmp	r3, r4
 8013252:	bf0c      	ite	eq
 8013254:	6032      	streq	r2, [r6, #0]
 8013256:	605a      	strne	r2, [r3, #4]
 8013258:	e7ec      	b.n	8013234 <_malloc_r+0xa0>
 801325a:	4623      	mov	r3, r4
 801325c:	6864      	ldr	r4, [r4, #4]
 801325e:	e7b2      	b.n	80131c6 <_malloc_r+0x32>
 8013260:	4634      	mov	r4, r6
 8013262:	6876      	ldr	r6, [r6, #4]
 8013264:	e7b9      	b.n	80131da <_malloc_r+0x46>
 8013266:	230c      	movs	r3, #12
 8013268:	603b      	str	r3, [r7, #0]
 801326a:	4638      	mov	r0, r7
 801326c:	f000 ff6c 	bl	8014148 <__malloc_unlock>
 8013270:	e7a1      	b.n	80131b6 <_malloc_r+0x22>
 8013272:	6025      	str	r5, [r4, #0]
 8013274:	e7de      	b.n	8013234 <_malloc_r+0xa0>
 8013276:	bf00      	nop
 8013278:	200031d4 	.word	0x200031d4

0801327c <__ssputs_r>:
 801327c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013280:	688e      	ldr	r6, [r1, #8]
 8013282:	429e      	cmp	r6, r3
 8013284:	4682      	mov	sl, r0
 8013286:	460c      	mov	r4, r1
 8013288:	4690      	mov	r8, r2
 801328a:	461f      	mov	r7, r3
 801328c:	d838      	bhi.n	8013300 <__ssputs_r+0x84>
 801328e:	898a      	ldrh	r2, [r1, #12]
 8013290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013294:	d032      	beq.n	80132fc <__ssputs_r+0x80>
 8013296:	6825      	ldr	r5, [r4, #0]
 8013298:	6909      	ldr	r1, [r1, #16]
 801329a:	eba5 0901 	sub.w	r9, r5, r1
 801329e:	6965      	ldr	r5, [r4, #20]
 80132a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80132a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80132a8:	3301      	adds	r3, #1
 80132aa:	444b      	add	r3, r9
 80132ac:	106d      	asrs	r5, r5, #1
 80132ae:	429d      	cmp	r5, r3
 80132b0:	bf38      	it	cc
 80132b2:	461d      	movcc	r5, r3
 80132b4:	0553      	lsls	r3, r2, #21
 80132b6:	d531      	bpl.n	801331c <__ssputs_r+0xa0>
 80132b8:	4629      	mov	r1, r5
 80132ba:	f7ff ff6b 	bl	8013194 <_malloc_r>
 80132be:	4606      	mov	r6, r0
 80132c0:	b950      	cbnz	r0, 80132d8 <__ssputs_r+0x5c>
 80132c2:	230c      	movs	r3, #12
 80132c4:	f8ca 3000 	str.w	r3, [sl]
 80132c8:	89a3      	ldrh	r3, [r4, #12]
 80132ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132ce:	81a3      	strh	r3, [r4, #12]
 80132d0:	f04f 30ff 	mov.w	r0, #4294967295
 80132d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132d8:	6921      	ldr	r1, [r4, #16]
 80132da:	464a      	mov	r2, r9
 80132dc:	f7fb fe30 	bl	800ef40 <memcpy>
 80132e0:	89a3      	ldrh	r3, [r4, #12]
 80132e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80132e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132ea:	81a3      	strh	r3, [r4, #12]
 80132ec:	6126      	str	r6, [r4, #16]
 80132ee:	6165      	str	r5, [r4, #20]
 80132f0:	444e      	add	r6, r9
 80132f2:	eba5 0509 	sub.w	r5, r5, r9
 80132f6:	6026      	str	r6, [r4, #0]
 80132f8:	60a5      	str	r5, [r4, #8]
 80132fa:	463e      	mov	r6, r7
 80132fc:	42be      	cmp	r6, r7
 80132fe:	d900      	bls.n	8013302 <__ssputs_r+0x86>
 8013300:	463e      	mov	r6, r7
 8013302:	6820      	ldr	r0, [r4, #0]
 8013304:	4632      	mov	r2, r6
 8013306:	4641      	mov	r1, r8
 8013308:	f7fb fe28 	bl	800ef5c <memmove>
 801330c:	68a3      	ldr	r3, [r4, #8]
 801330e:	1b9b      	subs	r3, r3, r6
 8013310:	60a3      	str	r3, [r4, #8]
 8013312:	6823      	ldr	r3, [r4, #0]
 8013314:	4433      	add	r3, r6
 8013316:	6023      	str	r3, [r4, #0]
 8013318:	2000      	movs	r0, #0
 801331a:	e7db      	b.n	80132d4 <__ssputs_r+0x58>
 801331c:	462a      	mov	r2, r5
 801331e:	f000 ff19 	bl	8014154 <_realloc_r>
 8013322:	4606      	mov	r6, r0
 8013324:	2800      	cmp	r0, #0
 8013326:	d1e1      	bne.n	80132ec <__ssputs_r+0x70>
 8013328:	6921      	ldr	r1, [r4, #16]
 801332a:	4650      	mov	r0, sl
 801332c:	f7ff fec6 	bl	80130bc <_free_r>
 8013330:	e7c7      	b.n	80132c2 <__ssputs_r+0x46>
	...

08013334 <_svfiprintf_r>:
 8013334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013338:	4698      	mov	r8, r3
 801333a:	898b      	ldrh	r3, [r1, #12]
 801333c:	061b      	lsls	r3, r3, #24
 801333e:	b09d      	sub	sp, #116	; 0x74
 8013340:	4607      	mov	r7, r0
 8013342:	460d      	mov	r5, r1
 8013344:	4614      	mov	r4, r2
 8013346:	d50e      	bpl.n	8013366 <_svfiprintf_r+0x32>
 8013348:	690b      	ldr	r3, [r1, #16]
 801334a:	b963      	cbnz	r3, 8013366 <_svfiprintf_r+0x32>
 801334c:	2140      	movs	r1, #64	; 0x40
 801334e:	f7ff ff21 	bl	8013194 <_malloc_r>
 8013352:	6028      	str	r0, [r5, #0]
 8013354:	6128      	str	r0, [r5, #16]
 8013356:	b920      	cbnz	r0, 8013362 <_svfiprintf_r+0x2e>
 8013358:	230c      	movs	r3, #12
 801335a:	603b      	str	r3, [r7, #0]
 801335c:	f04f 30ff 	mov.w	r0, #4294967295
 8013360:	e0d1      	b.n	8013506 <_svfiprintf_r+0x1d2>
 8013362:	2340      	movs	r3, #64	; 0x40
 8013364:	616b      	str	r3, [r5, #20]
 8013366:	2300      	movs	r3, #0
 8013368:	9309      	str	r3, [sp, #36]	; 0x24
 801336a:	2320      	movs	r3, #32
 801336c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013370:	f8cd 800c 	str.w	r8, [sp, #12]
 8013374:	2330      	movs	r3, #48	; 0x30
 8013376:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013520 <_svfiprintf_r+0x1ec>
 801337a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801337e:	f04f 0901 	mov.w	r9, #1
 8013382:	4623      	mov	r3, r4
 8013384:	469a      	mov	sl, r3
 8013386:	f813 2b01 	ldrb.w	r2, [r3], #1
 801338a:	b10a      	cbz	r2, 8013390 <_svfiprintf_r+0x5c>
 801338c:	2a25      	cmp	r2, #37	; 0x25
 801338e:	d1f9      	bne.n	8013384 <_svfiprintf_r+0x50>
 8013390:	ebba 0b04 	subs.w	fp, sl, r4
 8013394:	d00b      	beq.n	80133ae <_svfiprintf_r+0x7a>
 8013396:	465b      	mov	r3, fp
 8013398:	4622      	mov	r2, r4
 801339a:	4629      	mov	r1, r5
 801339c:	4638      	mov	r0, r7
 801339e:	f7ff ff6d 	bl	801327c <__ssputs_r>
 80133a2:	3001      	adds	r0, #1
 80133a4:	f000 80aa 	beq.w	80134fc <_svfiprintf_r+0x1c8>
 80133a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133aa:	445a      	add	r2, fp
 80133ac:	9209      	str	r2, [sp, #36]	; 0x24
 80133ae:	f89a 3000 	ldrb.w	r3, [sl]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f000 80a2 	beq.w	80134fc <_svfiprintf_r+0x1c8>
 80133b8:	2300      	movs	r3, #0
 80133ba:	f04f 32ff 	mov.w	r2, #4294967295
 80133be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133c2:	f10a 0a01 	add.w	sl, sl, #1
 80133c6:	9304      	str	r3, [sp, #16]
 80133c8:	9307      	str	r3, [sp, #28]
 80133ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133ce:	931a      	str	r3, [sp, #104]	; 0x68
 80133d0:	4654      	mov	r4, sl
 80133d2:	2205      	movs	r2, #5
 80133d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133d8:	4851      	ldr	r0, [pc, #324]	; (8013520 <_svfiprintf_r+0x1ec>)
 80133da:	f7ec ff21 	bl	8000220 <memchr>
 80133de:	9a04      	ldr	r2, [sp, #16]
 80133e0:	b9d8      	cbnz	r0, 801341a <_svfiprintf_r+0xe6>
 80133e2:	06d0      	lsls	r0, r2, #27
 80133e4:	bf44      	itt	mi
 80133e6:	2320      	movmi	r3, #32
 80133e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133ec:	0711      	lsls	r1, r2, #28
 80133ee:	bf44      	itt	mi
 80133f0:	232b      	movmi	r3, #43	; 0x2b
 80133f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133f6:	f89a 3000 	ldrb.w	r3, [sl]
 80133fa:	2b2a      	cmp	r3, #42	; 0x2a
 80133fc:	d015      	beq.n	801342a <_svfiprintf_r+0xf6>
 80133fe:	9a07      	ldr	r2, [sp, #28]
 8013400:	4654      	mov	r4, sl
 8013402:	2000      	movs	r0, #0
 8013404:	f04f 0c0a 	mov.w	ip, #10
 8013408:	4621      	mov	r1, r4
 801340a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801340e:	3b30      	subs	r3, #48	; 0x30
 8013410:	2b09      	cmp	r3, #9
 8013412:	d94e      	bls.n	80134b2 <_svfiprintf_r+0x17e>
 8013414:	b1b0      	cbz	r0, 8013444 <_svfiprintf_r+0x110>
 8013416:	9207      	str	r2, [sp, #28]
 8013418:	e014      	b.n	8013444 <_svfiprintf_r+0x110>
 801341a:	eba0 0308 	sub.w	r3, r0, r8
 801341e:	fa09 f303 	lsl.w	r3, r9, r3
 8013422:	4313      	orrs	r3, r2
 8013424:	9304      	str	r3, [sp, #16]
 8013426:	46a2      	mov	sl, r4
 8013428:	e7d2      	b.n	80133d0 <_svfiprintf_r+0x9c>
 801342a:	9b03      	ldr	r3, [sp, #12]
 801342c:	1d19      	adds	r1, r3, #4
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	9103      	str	r1, [sp, #12]
 8013432:	2b00      	cmp	r3, #0
 8013434:	bfbb      	ittet	lt
 8013436:	425b      	neglt	r3, r3
 8013438:	f042 0202 	orrlt.w	r2, r2, #2
 801343c:	9307      	strge	r3, [sp, #28]
 801343e:	9307      	strlt	r3, [sp, #28]
 8013440:	bfb8      	it	lt
 8013442:	9204      	strlt	r2, [sp, #16]
 8013444:	7823      	ldrb	r3, [r4, #0]
 8013446:	2b2e      	cmp	r3, #46	; 0x2e
 8013448:	d10c      	bne.n	8013464 <_svfiprintf_r+0x130>
 801344a:	7863      	ldrb	r3, [r4, #1]
 801344c:	2b2a      	cmp	r3, #42	; 0x2a
 801344e:	d135      	bne.n	80134bc <_svfiprintf_r+0x188>
 8013450:	9b03      	ldr	r3, [sp, #12]
 8013452:	1d1a      	adds	r2, r3, #4
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	9203      	str	r2, [sp, #12]
 8013458:	2b00      	cmp	r3, #0
 801345a:	bfb8      	it	lt
 801345c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013460:	3402      	adds	r4, #2
 8013462:	9305      	str	r3, [sp, #20]
 8013464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013530 <_svfiprintf_r+0x1fc>
 8013468:	7821      	ldrb	r1, [r4, #0]
 801346a:	2203      	movs	r2, #3
 801346c:	4650      	mov	r0, sl
 801346e:	f7ec fed7 	bl	8000220 <memchr>
 8013472:	b140      	cbz	r0, 8013486 <_svfiprintf_r+0x152>
 8013474:	2340      	movs	r3, #64	; 0x40
 8013476:	eba0 000a 	sub.w	r0, r0, sl
 801347a:	fa03 f000 	lsl.w	r0, r3, r0
 801347e:	9b04      	ldr	r3, [sp, #16]
 8013480:	4303      	orrs	r3, r0
 8013482:	3401      	adds	r4, #1
 8013484:	9304      	str	r3, [sp, #16]
 8013486:	f814 1b01 	ldrb.w	r1, [r4], #1
 801348a:	4826      	ldr	r0, [pc, #152]	; (8013524 <_svfiprintf_r+0x1f0>)
 801348c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013490:	2206      	movs	r2, #6
 8013492:	f7ec fec5 	bl	8000220 <memchr>
 8013496:	2800      	cmp	r0, #0
 8013498:	d038      	beq.n	801350c <_svfiprintf_r+0x1d8>
 801349a:	4b23      	ldr	r3, [pc, #140]	; (8013528 <_svfiprintf_r+0x1f4>)
 801349c:	bb1b      	cbnz	r3, 80134e6 <_svfiprintf_r+0x1b2>
 801349e:	9b03      	ldr	r3, [sp, #12]
 80134a0:	3307      	adds	r3, #7
 80134a2:	f023 0307 	bic.w	r3, r3, #7
 80134a6:	3308      	adds	r3, #8
 80134a8:	9303      	str	r3, [sp, #12]
 80134aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ac:	4433      	add	r3, r6
 80134ae:	9309      	str	r3, [sp, #36]	; 0x24
 80134b0:	e767      	b.n	8013382 <_svfiprintf_r+0x4e>
 80134b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80134b6:	460c      	mov	r4, r1
 80134b8:	2001      	movs	r0, #1
 80134ba:	e7a5      	b.n	8013408 <_svfiprintf_r+0xd4>
 80134bc:	2300      	movs	r3, #0
 80134be:	3401      	adds	r4, #1
 80134c0:	9305      	str	r3, [sp, #20]
 80134c2:	4619      	mov	r1, r3
 80134c4:	f04f 0c0a 	mov.w	ip, #10
 80134c8:	4620      	mov	r0, r4
 80134ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134ce:	3a30      	subs	r2, #48	; 0x30
 80134d0:	2a09      	cmp	r2, #9
 80134d2:	d903      	bls.n	80134dc <_svfiprintf_r+0x1a8>
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d0c5      	beq.n	8013464 <_svfiprintf_r+0x130>
 80134d8:	9105      	str	r1, [sp, #20]
 80134da:	e7c3      	b.n	8013464 <_svfiprintf_r+0x130>
 80134dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80134e0:	4604      	mov	r4, r0
 80134e2:	2301      	movs	r3, #1
 80134e4:	e7f0      	b.n	80134c8 <_svfiprintf_r+0x194>
 80134e6:	ab03      	add	r3, sp, #12
 80134e8:	9300      	str	r3, [sp, #0]
 80134ea:	462a      	mov	r2, r5
 80134ec:	4b0f      	ldr	r3, [pc, #60]	; (801352c <_svfiprintf_r+0x1f8>)
 80134ee:	a904      	add	r1, sp, #16
 80134f0:	4638      	mov	r0, r7
 80134f2:	f7fb fdf5 	bl	800f0e0 <_printf_float>
 80134f6:	1c42      	adds	r2, r0, #1
 80134f8:	4606      	mov	r6, r0
 80134fa:	d1d6      	bne.n	80134aa <_svfiprintf_r+0x176>
 80134fc:	89ab      	ldrh	r3, [r5, #12]
 80134fe:	065b      	lsls	r3, r3, #25
 8013500:	f53f af2c 	bmi.w	801335c <_svfiprintf_r+0x28>
 8013504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013506:	b01d      	add	sp, #116	; 0x74
 8013508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801350c:	ab03      	add	r3, sp, #12
 801350e:	9300      	str	r3, [sp, #0]
 8013510:	462a      	mov	r2, r5
 8013512:	4b06      	ldr	r3, [pc, #24]	; (801352c <_svfiprintf_r+0x1f8>)
 8013514:	a904      	add	r1, sp, #16
 8013516:	4638      	mov	r0, r7
 8013518:	f7fc f886 	bl	800f628 <_printf_i>
 801351c:	e7eb      	b.n	80134f6 <_svfiprintf_r+0x1c2>
 801351e:	bf00      	nop
 8013520:	08015334 	.word	0x08015334
 8013524:	0801533e 	.word	0x0801533e
 8013528:	0800f0e1 	.word	0x0800f0e1
 801352c:	0801327d 	.word	0x0801327d
 8013530:	0801533a 	.word	0x0801533a

08013534 <_sungetc_r>:
 8013534:	b538      	push	{r3, r4, r5, lr}
 8013536:	1c4b      	adds	r3, r1, #1
 8013538:	4614      	mov	r4, r2
 801353a:	d103      	bne.n	8013544 <_sungetc_r+0x10>
 801353c:	f04f 35ff 	mov.w	r5, #4294967295
 8013540:	4628      	mov	r0, r5
 8013542:	bd38      	pop	{r3, r4, r5, pc}
 8013544:	8993      	ldrh	r3, [r2, #12]
 8013546:	f023 0320 	bic.w	r3, r3, #32
 801354a:	8193      	strh	r3, [r2, #12]
 801354c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801354e:	6852      	ldr	r2, [r2, #4]
 8013550:	b2cd      	uxtb	r5, r1
 8013552:	b18b      	cbz	r3, 8013578 <_sungetc_r+0x44>
 8013554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013556:	4293      	cmp	r3, r2
 8013558:	dd08      	ble.n	801356c <_sungetc_r+0x38>
 801355a:	6823      	ldr	r3, [r4, #0]
 801355c:	1e5a      	subs	r2, r3, #1
 801355e:	6022      	str	r2, [r4, #0]
 8013560:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013564:	6863      	ldr	r3, [r4, #4]
 8013566:	3301      	adds	r3, #1
 8013568:	6063      	str	r3, [r4, #4]
 801356a:	e7e9      	b.n	8013540 <_sungetc_r+0xc>
 801356c:	4621      	mov	r1, r4
 801356e:	f000 fd4b 	bl	8014008 <__submore>
 8013572:	2800      	cmp	r0, #0
 8013574:	d0f1      	beq.n	801355a <_sungetc_r+0x26>
 8013576:	e7e1      	b.n	801353c <_sungetc_r+0x8>
 8013578:	6921      	ldr	r1, [r4, #16]
 801357a:	6823      	ldr	r3, [r4, #0]
 801357c:	b151      	cbz	r1, 8013594 <_sungetc_r+0x60>
 801357e:	4299      	cmp	r1, r3
 8013580:	d208      	bcs.n	8013594 <_sungetc_r+0x60>
 8013582:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013586:	42a9      	cmp	r1, r5
 8013588:	d104      	bne.n	8013594 <_sungetc_r+0x60>
 801358a:	3b01      	subs	r3, #1
 801358c:	3201      	adds	r2, #1
 801358e:	6023      	str	r3, [r4, #0]
 8013590:	6062      	str	r2, [r4, #4]
 8013592:	e7d5      	b.n	8013540 <_sungetc_r+0xc>
 8013594:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801359c:	6363      	str	r3, [r4, #52]	; 0x34
 801359e:	2303      	movs	r3, #3
 80135a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80135a2:	4623      	mov	r3, r4
 80135a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80135a8:	6023      	str	r3, [r4, #0]
 80135aa:	2301      	movs	r3, #1
 80135ac:	e7dc      	b.n	8013568 <_sungetc_r+0x34>

080135ae <__ssrefill_r>:
 80135ae:	b510      	push	{r4, lr}
 80135b0:	460c      	mov	r4, r1
 80135b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80135b4:	b169      	cbz	r1, 80135d2 <__ssrefill_r+0x24>
 80135b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80135ba:	4299      	cmp	r1, r3
 80135bc:	d001      	beq.n	80135c2 <__ssrefill_r+0x14>
 80135be:	f7ff fd7d 	bl	80130bc <_free_r>
 80135c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80135c4:	6063      	str	r3, [r4, #4]
 80135c6:	2000      	movs	r0, #0
 80135c8:	6360      	str	r0, [r4, #52]	; 0x34
 80135ca:	b113      	cbz	r3, 80135d2 <__ssrefill_r+0x24>
 80135cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80135ce:	6023      	str	r3, [r4, #0]
 80135d0:	bd10      	pop	{r4, pc}
 80135d2:	6923      	ldr	r3, [r4, #16]
 80135d4:	6023      	str	r3, [r4, #0]
 80135d6:	2300      	movs	r3, #0
 80135d8:	6063      	str	r3, [r4, #4]
 80135da:	89a3      	ldrh	r3, [r4, #12]
 80135dc:	f043 0320 	orr.w	r3, r3, #32
 80135e0:	81a3      	strh	r3, [r4, #12]
 80135e2:	f04f 30ff 	mov.w	r0, #4294967295
 80135e6:	e7f3      	b.n	80135d0 <__ssrefill_r+0x22>

080135e8 <__ssvfiscanf_r>:
 80135e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135ec:	460c      	mov	r4, r1
 80135ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80135f2:	2100      	movs	r1, #0
 80135f4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80135f8:	49a6      	ldr	r1, [pc, #664]	; (8013894 <__ssvfiscanf_r+0x2ac>)
 80135fa:	91a0      	str	r1, [sp, #640]	; 0x280
 80135fc:	f10d 0804 	add.w	r8, sp, #4
 8013600:	49a5      	ldr	r1, [pc, #660]	; (8013898 <__ssvfiscanf_r+0x2b0>)
 8013602:	4fa6      	ldr	r7, [pc, #664]	; (801389c <__ssvfiscanf_r+0x2b4>)
 8013604:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80138a0 <__ssvfiscanf_r+0x2b8>
 8013608:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801360c:	4606      	mov	r6, r0
 801360e:	91a1      	str	r1, [sp, #644]	; 0x284
 8013610:	9300      	str	r3, [sp, #0]
 8013612:	7813      	ldrb	r3, [r2, #0]
 8013614:	2b00      	cmp	r3, #0
 8013616:	f000 815a 	beq.w	80138ce <__ssvfiscanf_r+0x2e6>
 801361a:	5dd9      	ldrb	r1, [r3, r7]
 801361c:	f011 0108 	ands.w	r1, r1, #8
 8013620:	f102 0501 	add.w	r5, r2, #1
 8013624:	d019      	beq.n	801365a <__ssvfiscanf_r+0x72>
 8013626:	6863      	ldr	r3, [r4, #4]
 8013628:	2b00      	cmp	r3, #0
 801362a:	dd0f      	ble.n	801364c <__ssvfiscanf_r+0x64>
 801362c:	6823      	ldr	r3, [r4, #0]
 801362e:	781a      	ldrb	r2, [r3, #0]
 8013630:	5cba      	ldrb	r2, [r7, r2]
 8013632:	0712      	lsls	r2, r2, #28
 8013634:	d401      	bmi.n	801363a <__ssvfiscanf_r+0x52>
 8013636:	462a      	mov	r2, r5
 8013638:	e7eb      	b.n	8013612 <__ssvfiscanf_r+0x2a>
 801363a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801363c:	3201      	adds	r2, #1
 801363e:	9245      	str	r2, [sp, #276]	; 0x114
 8013640:	6862      	ldr	r2, [r4, #4]
 8013642:	3301      	adds	r3, #1
 8013644:	3a01      	subs	r2, #1
 8013646:	6062      	str	r2, [r4, #4]
 8013648:	6023      	str	r3, [r4, #0]
 801364a:	e7ec      	b.n	8013626 <__ssvfiscanf_r+0x3e>
 801364c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801364e:	4621      	mov	r1, r4
 8013650:	4630      	mov	r0, r6
 8013652:	4798      	blx	r3
 8013654:	2800      	cmp	r0, #0
 8013656:	d0e9      	beq.n	801362c <__ssvfiscanf_r+0x44>
 8013658:	e7ed      	b.n	8013636 <__ssvfiscanf_r+0x4e>
 801365a:	2b25      	cmp	r3, #37	; 0x25
 801365c:	d012      	beq.n	8013684 <__ssvfiscanf_r+0x9c>
 801365e:	469a      	mov	sl, r3
 8013660:	6863      	ldr	r3, [r4, #4]
 8013662:	2b00      	cmp	r3, #0
 8013664:	f340 8091 	ble.w	801378a <__ssvfiscanf_r+0x1a2>
 8013668:	6822      	ldr	r2, [r4, #0]
 801366a:	7813      	ldrb	r3, [r2, #0]
 801366c:	4553      	cmp	r3, sl
 801366e:	f040 812e 	bne.w	80138ce <__ssvfiscanf_r+0x2e6>
 8013672:	6863      	ldr	r3, [r4, #4]
 8013674:	3b01      	subs	r3, #1
 8013676:	6063      	str	r3, [r4, #4]
 8013678:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801367a:	3201      	adds	r2, #1
 801367c:	3301      	adds	r3, #1
 801367e:	6022      	str	r2, [r4, #0]
 8013680:	9345      	str	r3, [sp, #276]	; 0x114
 8013682:	e7d8      	b.n	8013636 <__ssvfiscanf_r+0x4e>
 8013684:	9141      	str	r1, [sp, #260]	; 0x104
 8013686:	9143      	str	r1, [sp, #268]	; 0x10c
 8013688:	7853      	ldrb	r3, [r2, #1]
 801368a:	2b2a      	cmp	r3, #42	; 0x2a
 801368c:	bf02      	ittt	eq
 801368e:	2310      	moveq	r3, #16
 8013690:	1c95      	addeq	r5, r2, #2
 8013692:	9341      	streq	r3, [sp, #260]	; 0x104
 8013694:	220a      	movs	r2, #10
 8013696:	46aa      	mov	sl, r5
 8013698:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801369c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80136a0:	2b09      	cmp	r3, #9
 80136a2:	d91d      	bls.n	80136e0 <__ssvfiscanf_r+0xf8>
 80136a4:	487e      	ldr	r0, [pc, #504]	; (80138a0 <__ssvfiscanf_r+0x2b8>)
 80136a6:	2203      	movs	r2, #3
 80136a8:	f7ec fdba 	bl	8000220 <memchr>
 80136ac:	b140      	cbz	r0, 80136c0 <__ssvfiscanf_r+0xd8>
 80136ae:	2301      	movs	r3, #1
 80136b0:	eba0 0009 	sub.w	r0, r0, r9
 80136b4:	fa03 f000 	lsl.w	r0, r3, r0
 80136b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80136ba:	4318      	orrs	r0, r3
 80136bc:	9041      	str	r0, [sp, #260]	; 0x104
 80136be:	4655      	mov	r5, sl
 80136c0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80136c4:	2b78      	cmp	r3, #120	; 0x78
 80136c6:	d806      	bhi.n	80136d6 <__ssvfiscanf_r+0xee>
 80136c8:	2b57      	cmp	r3, #87	; 0x57
 80136ca:	d810      	bhi.n	80136ee <__ssvfiscanf_r+0x106>
 80136cc:	2b25      	cmp	r3, #37	; 0x25
 80136ce:	d0c6      	beq.n	801365e <__ssvfiscanf_r+0x76>
 80136d0:	d856      	bhi.n	8013780 <__ssvfiscanf_r+0x198>
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d064      	beq.n	80137a0 <__ssvfiscanf_r+0x1b8>
 80136d6:	2303      	movs	r3, #3
 80136d8:	9347      	str	r3, [sp, #284]	; 0x11c
 80136da:	230a      	movs	r3, #10
 80136dc:	9342      	str	r3, [sp, #264]	; 0x108
 80136de:	e071      	b.n	80137c4 <__ssvfiscanf_r+0x1dc>
 80136e0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80136e2:	fb02 1103 	mla	r1, r2, r3, r1
 80136e6:	3930      	subs	r1, #48	; 0x30
 80136e8:	9143      	str	r1, [sp, #268]	; 0x10c
 80136ea:	4655      	mov	r5, sl
 80136ec:	e7d3      	b.n	8013696 <__ssvfiscanf_r+0xae>
 80136ee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80136f2:	2a20      	cmp	r2, #32
 80136f4:	d8ef      	bhi.n	80136d6 <__ssvfiscanf_r+0xee>
 80136f6:	a101      	add	r1, pc, #4	; (adr r1, 80136fc <__ssvfiscanf_r+0x114>)
 80136f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80136fc:	080137af 	.word	0x080137af
 8013700:	080136d7 	.word	0x080136d7
 8013704:	080136d7 	.word	0x080136d7
 8013708:	0801380d 	.word	0x0801380d
 801370c:	080136d7 	.word	0x080136d7
 8013710:	080136d7 	.word	0x080136d7
 8013714:	080136d7 	.word	0x080136d7
 8013718:	080136d7 	.word	0x080136d7
 801371c:	080136d7 	.word	0x080136d7
 8013720:	080136d7 	.word	0x080136d7
 8013724:	080136d7 	.word	0x080136d7
 8013728:	08013823 	.word	0x08013823
 801372c:	080137f9 	.word	0x080137f9
 8013730:	08013787 	.word	0x08013787
 8013734:	08013787 	.word	0x08013787
 8013738:	08013787 	.word	0x08013787
 801373c:	080136d7 	.word	0x080136d7
 8013740:	080137fd 	.word	0x080137fd
 8013744:	080136d7 	.word	0x080136d7
 8013748:	080136d7 	.word	0x080136d7
 801374c:	080136d7 	.word	0x080136d7
 8013750:	080136d7 	.word	0x080136d7
 8013754:	08013833 	.word	0x08013833
 8013758:	08013805 	.word	0x08013805
 801375c:	080137a7 	.word	0x080137a7
 8013760:	080136d7 	.word	0x080136d7
 8013764:	080136d7 	.word	0x080136d7
 8013768:	0801382f 	.word	0x0801382f
 801376c:	080136d7 	.word	0x080136d7
 8013770:	080137f9 	.word	0x080137f9
 8013774:	080136d7 	.word	0x080136d7
 8013778:	080136d7 	.word	0x080136d7
 801377c:	080137af 	.word	0x080137af
 8013780:	3b45      	subs	r3, #69	; 0x45
 8013782:	2b02      	cmp	r3, #2
 8013784:	d8a7      	bhi.n	80136d6 <__ssvfiscanf_r+0xee>
 8013786:	2305      	movs	r3, #5
 8013788:	e01b      	b.n	80137c2 <__ssvfiscanf_r+0x1da>
 801378a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801378c:	4621      	mov	r1, r4
 801378e:	4630      	mov	r0, r6
 8013790:	4798      	blx	r3
 8013792:	2800      	cmp	r0, #0
 8013794:	f43f af68 	beq.w	8013668 <__ssvfiscanf_r+0x80>
 8013798:	9844      	ldr	r0, [sp, #272]	; 0x110
 801379a:	2800      	cmp	r0, #0
 801379c:	f040 808d 	bne.w	80138ba <__ssvfiscanf_r+0x2d2>
 80137a0:	f04f 30ff 	mov.w	r0, #4294967295
 80137a4:	e08f      	b.n	80138c6 <__ssvfiscanf_r+0x2de>
 80137a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80137a8:	f042 0220 	orr.w	r2, r2, #32
 80137ac:	9241      	str	r2, [sp, #260]	; 0x104
 80137ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80137b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80137b4:	9241      	str	r2, [sp, #260]	; 0x104
 80137b6:	2210      	movs	r2, #16
 80137b8:	2b6f      	cmp	r3, #111	; 0x6f
 80137ba:	9242      	str	r2, [sp, #264]	; 0x108
 80137bc:	bf34      	ite	cc
 80137be:	2303      	movcc	r3, #3
 80137c0:	2304      	movcs	r3, #4
 80137c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80137c4:	6863      	ldr	r3, [r4, #4]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	dd42      	ble.n	8013850 <__ssvfiscanf_r+0x268>
 80137ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80137cc:	0659      	lsls	r1, r3, #25
 80137ce:	d404      	bmi.n	80137da <__ssvfiscanf_r+0x1f2>
 80137d0:	6823      	ldr	r3, [r4, #0]
 80137d2:	781a      	ldrb	r2, [r3, #0]
 80137d4:	5cba      	ldrb	r2, [r7, r2]
 80137d6:	0712      	lsls	r2, r2, #28
 80137d8:	d441      	bmi.n	801385e <__ssvfiscanf_r+0x276>
 80137da:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80137dc:	2b02      	cmp	r3, #2
 80137de:	dc50      	bgt.n	8013882 <__ssvfiscanf_r+0x29a>
 80137e0:	466b      	mov	r3, sp
 80137e2:	4622      	mov	r2, r4
 80137e4:	a941      	add	r1, sp, #260	; 0x104
 80137e6:	4630      	mov	r0, r6
 80137e8:	f000 f9d0 	bl	8013b8c <_scanf_chars>
 80137ec:	2801      	cmp	r0, #1
 80137ee:	d06e      	beq.n	80138ce <__ssvfiscanf_r+0x2e6>
 80137f0:	2802      	cmp	r0, #2
 80137f2:	f47f af20 	bne.w	8013636 <__ssvfiscanf_r+0x4e>
 80137f6:	e7cf      	b.n	8013798 <__ssvfiscanf_r+0x1b0>
 80137f8:	220a      	movs	r2, #10
 80137fa:	e7dd      	b.n	80137b8 <__ssvfiscanf_r+0x1d0>
 80137fc:	2300      	movs	r3, #0
 80137fe:	9342      	str	r3, [sp, #264]	; 0x108
 8013800:	2303      	movs	r3, #3
 8013802:	e7de      	b.n	80137c2 <__ssvfiscanf_r+0x1da>
 8013804:	2308      	movs	r3, #8
 8013806:	9342      	str	r3, [sp, #264]	; 0x108
 8013808:	2304      	movs	r3, #4
 801380a:	e7da      	b.n	80137c2 <__ssvfiscanf_r+0x1da>
 801380c:	4629      	mov	r1, r5
 801380e:	4640      	mov	r0, r8
 8013810:	f000 fb3a 	bl	8013e88 <__sccl>
 8013814:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801381a:	9341      	str	r3, [sp, #260]	; 0x104
 801381c:	4605      	mov	r5, r0
 801381e:	2301      	movs	r3, #1
 8013820:	e7cf      	b.n	80137c2 <__ssvfiscanf_r+0x1da>
 8013822:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013828:	9341      	str	r3, [sp, #260]	; 0x104
 801382a:	2300      	movs	r3, #0
 801382c:	e7c9      	b.n	80137c2 <__ssvfiscanf_r+0x1da>
 801382e:	2302      	movs	r3, #2
 8013830:	e7c7      	b.n	80137c2 <__ssvfiscanf_r+0x1da>
 8013832:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013834:	06c3      	lsls	r3, r0, #27
 8013836:	f53f aefe 	bmi.w	8013636 <__ssvfiscanf_r+0x4e>
 801383a:	9b00      	ldr	r3, [sp, #0]
 801383c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801383e:	1d19      	adds	r1, r3, #4
 8013840:	9100      	str	r1, [sp, #0]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	f010 0f01 	tst.w	r0, #1
 8013848:	bf14      	ite	ne
 801384a:	801a      	strhne	r2, [r3, #0]
 801384c:	601a      	streq	r2, [r3, #0]
 801384e:	e6f2      	b.n	8013636 <__ssvfiscanf_r+0x4e>
 8013850:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013852:	4621      	mov	r1, r4
 8013854:	4630      	mov	r0, r6
 8013856:	4798      	blx	r3
 8013858:	2800      	cmp	r0, #0
 801385a:	d0b6      	beq.n	80137ca <__ssvfiscanf_r+0x1e2>
 801385c:	e79c      	b.n	8013798 <__ssvfiscanf_r+0x1b0>
 801385e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013860:	3201      	adds	r2, #1
 8013862:	9245      	str	r2, [sp, #276]	; 0x114
 8013864:	6862      	ldr	r2, [r4, #4]
 8013866:	3a01      	subs	r2, #1
 8013868:	2a00      	cmp	r2, #0
 801386a:	6062      	str	r2, [r4, #4]
 801386c:	dd02      	ble.n	8013874 <__ssvfiscanf_r+0x28c>
 801386e:	3301      	adds	r3, #1
 8013870:	6023      	str	r3, [r4, #0]
 8013872:	e7ad      	b.n	80137d0 <__ssvfiscanf_r+0x1e8>
 8013874:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013876:	4621      	mov	r1, r4
 8013878:	4630      	mov	r0, r6
 801387a:	4798      	blx	r3
 801387c:	2800      	cmp	r0, #0
 801387e:	d0a7      	beq.n	80137d0 <__ssvfiscanf_r+0x1e8>
 8013880:	e78a      	b.n	8013798 <__ssvfiscanf_r+0x1b0>
 8013882:	2b04      	cmp	r3, #4
 8013884:	dc0e      	bgt.n	80138a4 <__ssvfiscanf_r+0x2bc>
 8013886:	466b      	mov	r3, sp
 8013888:	4622      	mov	r2, r4
 801388a:	a941      	add	r1, sp, #260	; 0x104
 801388c:	4630      	mov	r0, r6
 801388e:	f000 f9d7 	bl	8013c40 <_scanf_i>
 8013892:	e7ab      	b.n	80137ec <__ssvfiscanf_r+0x204>
 8013894:	08013535 	.word	0x08013535
 8013898:	080135af 	.word	0x080135af
 801389c:	08014ee1 	.word	0x08014ee1
 80138a0:	0801533a 	.word	0x0801533a
 80138a4:	4b0b      	ldr	r3, [pc, #44]	; (80138d4 <__ssvfiscanf_r+0x2ec>)
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	f43f aec5 	beq.w	8013636 <__ssvfiscanf_r+0x4e>
 80138ac:	466b      	mov	r3, sp
 80138ae:	4622      	mov	r2, r4
 80138b0:	a941      	add	r1, sp, #260	; 0x104
 80138b2:	4630      	mov	r0, r6
 80138b4:	f7fb ffde 	bl	800f874 <_scanf_float>
 80138b8:	e798      	b.n	80137ec <__ssvfiscanf_r+0x204>
 80138ba:	89a3      	ldrh	r3, [r4, #12]
 80138bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80138c0:	bf18      	it	ne
 80138c2:	f04f 30ff 	movne.w	r0, #4294967295
 80138c6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80138ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 80138d0:	e7f9      	b.n	80138c6 <__ssvfiscanf_r+0x2de>
 80138d2:	bf00      	nop
 80138d4:	0800f875 	.word	0x0800f875

080138d8 <__sfputc_r>:
 80138d8:	6893      	ldr	r3, [r2, #8]
 80138da:	3b01      	subs	r3, #1
 80138dc:	2b00      	cmp	r3, #0
 80138de:	b410      	push	{r4}
 80138e0:	6093      	str	r3, [r2, #8]
 80138e2:	da08      	bge.n	80138f6 <__sfputc_r+0x1e>
 80138e4:	6994      	ldr	r4, [r2, #24]
 80138e6:	42a3      	cmp	r3, r4
 80138e8:	db01      	blt.n	80138ee <__sfputc_r+0x16>
 80138ea:	290a      	cmp	r1, #10
 80138ec:	d103      	bne.n	80138f6 <__sfputc_r+0x1e>
 80138ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138f2:	f7fd b9ed 	b.w	8010cd0 <__swbuf_r>
 80138f6:	6813      	ldr	r3, [r2, #0]
 80138f8:	1c58      	adds	r0, r3, #1
 80138fa:	6010      	str	r0, [r2, #0]
 80138fc:	7019      	strb	r1, [r3, #0]
 80138fe:	4608      	mov	r0, r1
 8013900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013904:	4770      	bx	lr

08013906 <__sfputs_r>:
 8013906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013908:	4606      	mov	r6, r0
 801390a:	460f      	mov	r7, r1
 801390c:	4614      	mov	r4, r2
 801390e:	18d5      	adds	r5, r2, r3
 8013910:	42ac      	cmp	r4, r5
 8013912:	d101      	bne.n	8013918 <__sfputs_r+0x12>
 8013914:	2000      	movs	r0, #0
 8013916:	e007      	b.n	8013928 <__sfputs_r+0x22>
 8013918:	f814 1b01 	ldrb.w	r1, [r4], #1
 801391c:	463a      	mov	r2, r7
 801391e:	4630      	mov	r0, r6
 8013920:	f7ff ffda 	bl	80138d8 <__sfputc_r>
 8013924:	1c43      	adds	r3, r0, #1
 8013926:	d1f3      	bne.n	8013910 <__sfputs_r+0xa>
 8013928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801392c <_vfiprintf_r>:
 801392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013930:	460d      	mov	r5, r1
 8013932:	b09d      	sub	sp, #116	; 0x74
 8013934:	4614      	mov	r4, r2
 8013936:	4698      	mov	r8, r3
 8013938:	4606      	mov	r6, r0
 801393a:	b118      	cbz	r0, 8013944 <_vfiprintf_r+0x18>
 801393c:	6983      	ldr	r3, [r0, #24]
 801393e:	b90b      	cbnz	r3, 8013944 <_vfiprintf_r+0x18>
 8013940:	f7fe fa3e 	bl	8011dc0 <__sinit>
 8013944:	4b89      	ldr	r3, [pc, #548]	; (8013b6c <_vfiprintf_r+0x240>)
 8013946:	429d      	cmp	r5, r3
 8013948:	d11b      	bne.n	8013982 <_vfiprintf_r+0x56>
 801394a:	6875      	ldr	r5, [r6, #4]
 801394c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801394e:	07d9      	lsls	r1, r3, #31
 8013950:	d405      	bmi.n	801395e <_vfiprintf_r+0x32>
 8013952:	89ab      	ldrh	r3, [r5, #12]
 8013954:	059a      	lsls	r2, r3, #22
 8013956:	d402      	bmi.n	801395e <_vfiprintf_r+0x32>
 8013958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801395a:	f7fe fe42 	bl	80125e2 <__retarget_lock_acquire_recursive>
 801395e:	89ab      	ldrh	r3, [r5, #12]
 8013960:	071b      	lsls	r3, r3, #28
 8013962:	d501      	bpl.n	8013968 <_vfiprintf_r+0x3c>
 8013964:	692b      	ldr	r3, [r5, #16]
 8013966:	b9eb      	cbnz	r3, 80139a4 <_vfiprintf_r+0x78>
 8013968:	4629      	mov	r1, r5
 801396a:	4630      	mov	r0, r6
 801396c:	f7fd fa14 	bl	8010d98 <__swsetup_r>
 8013970:	b1c0      	cbz	r0, 80139a4 <_vfiprintf_r+0x78>
 8013972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013974:	07dc      	lsls	r4, r3, #31
 8013976:	d50e      	bpl.n	8013996 <_vfiprintf_r+0x6a>
 8013978:	f04f 30ff 	mov.w	r0, #4294967295
 801397c:	b01d      	add	sp, #116	; 0x74
 801397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013982:	4b7b      	ldr	r3, [pc, #492]	; (8013b70 <_vfiprintf_r+0x244>)
 8013984:	429d      	cmp	r5, r3
 8013986:	d101      	bne.n	801398c <_vfiprintf_r+0x60>
 8013988:	68b5      	ldr	r5, [r6, #8]
 801398a:	e7df      	b.n	801394c <_vfiprintf_r+0x20>
 801398c:	4b79      	ldr	r3, [pc, #484]	; (8013b74 <_vfiprintf_r+0x248>)
 801398e:	429d      	cmp	r5, r3
 8013990:	bf08      	it	eq
 8013992:	68f5      	ldreq	r5, [r6, #12]
 8013994:	e7da      	b.n	801394c <_vfiprintf_r+0x20>
 8013996:	89ab      	ldrh	r3, [r5, #12]
 8013998:	0598      	lsls	r0, r3, #22
 801399a:	d4ed      	bmi.n	8013978 <_vfiprintf_r+0x4c>
 801399c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801399e:	f7fe fe21 	bl	80125e4 <__retarget_lock_release_recursive>
 80139a2:	e7e9      	b.n	8013978 <_vfiprintf_r+0x4c>
 80139a4:	2300      	movs	r3, #0
 80139a6:	9309      	str	r3, [sp, #36]	; 0x24
 80139a8:	2320      	movs	r3, #32
 80139aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80139ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80139b2:	2330      	movs	r3, #48	; 0x30
 80139b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013b78 <_vfiprintf_r+0x24c>
 80139b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80139bc:	f04f 0901 	mov.w	r9, #1
 80139c0:	4623      	mov	r3, r4
 80139c2:	469a      	mov	sl, r3
 80139c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139c8:	b10a      	cbz	r2, 80139ce <_vfiprintf_r+0xa2>
 80139ca:	2a25      	cmp	r2, #37	; 0x25
 80139cc:	d1f9      	bne.n	80139c2 <_vfiprintf_r+0x96>
 80139ce:	ebba 0b04 	subs.w	fp, sl, r4
 80139d2:	d00b      	beq.n	80139ec <_vfiprintf_r+0xc0>
 80139d4:	465b      	mov	r3, fp
 80139d6:	4622      	mov	r2, r4
 80139d8:	4629      	mov	r1, r5
 80139da:	4630      	mov	r0, r6
 80139dc:	f7ff ff93 	bl	8013906 <__sfputs_r>
 80139e0:	3001      	adds	r0, #1
 80139e2:	f000 80aa 	beq.w	8013b3a <_vfiprintf_r+0x20e>
 80139e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139e8:	445a      	add	r2, fp
 80139ea:	9209      	str	r2, [sp, #36]	; 0x24
 80139ec:	f89a 3000 	ldrb.w	r3, [sl]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	f000 80a2 	beq.w	8013b3a <_vfiprintf_r+0x20e>
 80139f6:	2300      	movs	r3, #0
 80139f8:	f04f 32ff 	mov.w	r2, #4294967295
 80139fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a00:	f10a 0a01 	add.w	sl, sl, #1
 8013a04:	9304      	str	r3, [sp, #16]
 8013a06:	9307      	str	r3, [sp, #28]
 8013a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8013a0e:	4654      	mov	r4, sl
 8013a10:	2205      	movs	r2, #5
 8013a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a16:	4858      	ldr	r0, [pc, #352]	; (8013b78 <_vfiprintf_r+0x24c>)
 8013a18:	f7ec fc02 	bl	8000220 <memchr>
 8013a1c:	9a04      	ldr	r2, [sp, #16]
 8013a1e:	b9d8      	cbnz	r0, 8013a58 <_vfiprintf_r+0x12c>
 8013a20:	06d1      	lsls	r1, r2, #27
 8013a22:	bf44      	itt	mi
 8013a24:	2320      	movmi	r3, #32
 8013a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a2a:	0713      	lsls	r3, r2, #28
 8013a2c:	bf44      	itt	mi
 8013a2e:	232b      	movmi	r3, #43	; 0x2b
 8013a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a34:	f89a 3000 	ldrb.w	r3, [sl]
 8013a38:	2b2a      	cmp	r3, #42	; 0x2a
 8013a3a:	d015      	beq.n	8013a68 <_vfiprintf_r+0x13c>
 8013a3c:	9a07      	ldr	r2, [sp, #28]
 8013a3e:	4654      	mov	r4, sl
 8013a40:	2000      	movs	r0, #0
 8013a42:	f04f 0c0a 	mov.w	ip, #10
 8013a46:	4621      	mov	r1, r4
 8013a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a4c:	3b30      	subs	r3, #48	; 0x30
 8013a4e:	2b09      	cmp	r3, #9
 8013a50:	d94e      	bls.n	8013af0 <_vfiprintf_r+0x1c4>
 8013a52:	b1b0      	cbz	r0, 8013a82 <_vfiprintf_r+0x156>
 8013a54:	9207      	str	r2, [sp, #28]
 8013a56:	e014      	b.n	8013a82 <_vfiprintf_r+0x156>
 8013a58:	eba0 0308 	sub.w	r3, r0, r8
 8013a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8013a60:	4313      	orrs	r3, r2
 8013a62:	9304      	str	r3, [sp, #16]
 8013a64:	46a2      	mov	sl, r4
 8013a66:	e7d2      	b.n	8013a0e <_vfiprintf_r+0xe2>
 8013a68:	9b03      	ldr	r3, [sp, #12]
 8013a6a:	1d19      	adds	r1, r3, #4
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	9103      	str	r1, [sp, #12]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	bfbb      	ittet	lt
 8013a74:	425b      	neglt	r3, r3
 8013a76:	f042 0202 	orrlt.w	r2, r2, #2
 8013a7a:	9307      	strge	r3, [sp, #28]
 8013a7c:	9307      	strlt	r3, [sp, #28]
 8013a7e:	bfb8      	it	lt
 8013a80:	9204      	strlt	r2, [sp, #16]
 8013a82:	7823      	ldrb	r3, [r4, #0]
 8013a84:	2b2e      	cmp	r3, #46	; 0x2e
 8013a86:	d10c      	bne.n	8013aa2 <_vfiprintf_r+0x176>
 8013a88:	7863      	ldrb	r3, [r4, #1]
 8013a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8013a8c:	d135      	bne.n	8013afa <_vfiprintf_r+0x1ce>
 8013a8e:	9b03      	ldr	r3, [sp, #12]
 8013a90:	1d1a      	adds	r2, r3, #4
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	9203      	str	r2, [sp, #12]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	bfb8      	it	lt
 8013a9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a9e:	3402      	adds	r4, #2
 8013aa0:	9305      	str	r3, [sp, #20]
 8013aa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013b88 <_vfiprintf_r+0x25c>
 8013aa6:	7821      	ldrb	r1, [r4, #0]
 8013aa8:	2203      	movs	r2, #3
 8013aaa:	4650      	mov	r0, sl
 8013aac:	f7ec fbb8 	bl	8000220 <memchr>
 8013ab0:	b140      	cbz	r0, 8013ac4 <_vfiprintf_r+0x198>
 8013ab2:	2340      	movs	r3, #64	; 0x40
 8013ab4:	eba0 000a 	sub.w	r0, r0, sl
 8013ab8:	fa03 f000 	lsl.w	r0, r3, r0
 8013abc:	9b04      	ldr	r3, [sp, #16]
 8013abe:	4303      	orrs	r3, r0
 8013ac0:	3401      	adds	r4, #1
 8013ac2:	9304      	str	r3, [sp, #16]
 8013ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ac8:	482c      	ldr	r0, [pc, #176]	; (8013b7c <_vfiprintf_r+0x250>)
 8013aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013ace:	2206      	movs	r2, #6
 8013ad0:	f7ec fba6 	bl	8000220 <memchr>
 8013ad4:	2800      	cmp	r0, #0
 8013ad6:	d03f      	beq.n	8013b58 <_vfiprintf_r+0x22c>
 8013ad8:	4b29      	ldr	r3, [pc, #164]	; (8013b80 <_vfiprintf_r+0x254>)
 8013ada:	bb1b      	cbnz	r3, 8013b24 <_vfiprintf_r+0x1f8>
 8013adc:	9b03      	ldr	r3, [sp, #12]
 8013ade:	3307      	adds	r3, #7
 8013ae0:	f023 0307 	bic.w	r3, r3, #7
 8013ae4:	3308      	adds	r3, #8
 8013ae6:	9303      	str	r3, [sp, #12]
 8013ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aea:	443b      	add	r3, r7
 8013aec:	9309      	str	r3, [sp, #36]	; 0x24
 8013aee:	e767      	b.n	80139c0 <_vfiprintf_r+0x94>
 8013af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8013af4:	460c      	mov	r4, r1
 8013af6:	2001      	movs	r0, #1
 8013af8:	e7a5      	b.n	8013a46 <_vfiprintf_r+0x11a>
 8013afa:	2300      	movs	r3, #0
 8013afc:	3401      	adds	r4, #1
 8013afe:	9305      	str	r3, [sp, #20]
 8013b00:	4619      	mov	r1, r3
 8013b02:	f04f 0c0a 	mov.w	ip, #10
 8013b06:	4620      	mov	r0, r4
 8013b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b0c:	3a30      	subs	r2, #48	; 0x30
 8013b0e:	2a09      	cmp	r2, #9
 8013b10:	d903      	bls.n	8013b1a <_vfiprintf_r+0x1ee>
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d0c5      	beq.n	8013aa2 <_vfiprintf_r+0x176>
 8013b16:	9105      	str	r1, [sp, #20]
 8013b18:	e7c3      	b.n	8013aa2 <_vfiprintf_r+0x176>
 8013b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b1e:	4604      	mov	r4, r0
 8013b20:	2301      	movs	r3, #1
 8013b22:	e7f0      	b.n	8013b06 <_vfiprintf_r+0x1da>
 8013b24:	ab03      	add	r3, sp, #12
 8013b26:	9300      	str	r3, [sp, #0]
 8013b28:	462a      	mov	r2, r5
 8013b2a:	4b16      	ldr	r3, [pc, #88]	; (8013b84 <_vfiprintf_r+0x258>)
 8013b2c:	a904      	add	r1, sp, #16
 8013b2e:	4630      	mov	r0, r6
 8013b30:	f7fb fad6 	bl	800f0e0 <_printf_float>
 8013b34:	4607      	mov	r7, r0
 8013b36:	1c78      	adds	r0, r7, #1
 8013b38:	d1d6      	bne.n	8013ae8 <_vfiprintf_r+0x1bc>
 8013b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b3c:	07d9      	lsls	r1, r3, #31
 8013b3e:	d405      	bmi.n	8013b4c <_vfiprintf_r+0x220>
 8013b40:	89ab      	ldrh	r3, [r5, #12]
 8013b42:	059a      	lsls	r2, r3, #22
 8013b44:	d402      	bmi.n	8013b4c <_vfiprintf_r+0x220>
 8013b46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b48:	f7fe fd4c 	bl	80125e4 <__retarget_lock_release_recursive>
 8013b4c:	89ab      	ldrh	r3, [r5, #12]
 8013b4e:	065b      	lsls	r3, r3, #25
 8013b50:	f53f af12 	bmi.w	8013978 <_vfiprintf_r+0x4c>
 8013b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b56:	e711      	b.n	801397c <_vfiprintf_r+0x50>
 8013b58:	ab03      	add	r3, sp, #12
 8013b5a:	9300      	str	r3, [sp, #0]
 8013b5c:	462a      	mov	r2, r5
 8013b5e:	4b09      	ldr	r3, [pc, #36]	; (8013b84 <_vfiprintf_r+0x258>)
 8013b60:	a904      	add	r1, sp, #16
 8013b62:	4630      	mov	r0, r6
 8013b64:	f7fb fd60 	bl	800f628 <_printf_i>
 8013b68:	e7e4      	b.n	8013b34 <_vfiprintf_r+0x208>
 8013b6a:	bf00      	nop
 8013b6c:	08015120 	.word	0x08015120
 8013b70:	08015140 	.word	0x08015140
 8013b74:	08015100 	.word	0x08015100
 8013b78:	08015334 	.word	0x08015334
 8013b7c:	0801533e 	.word	0x0801533e
 8013b80:	0800f0e1 	.word	0x0800f0e1
 8013b84:	08013907 	.word	0x08013907
 8013b88:	0801533a 	.word	0x0801533a

08013b8c <_scanf_chars>:
 8013b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b90:	4615      	mov	r5, r2
 8013b92:	688a      	ldr	r2, [r1, #8]
 8013b94:	4680      	mov	r8, r0
 8013b96:	460c      	mov	r4, r1
 8013b98:	b932      	cbnz	r2, 8013ba8 <_scanf_chars+0x1c>
 8013b9a:	698a      	ldr	r2, [r1, #24]
 8013b9c:	2a00      	cmp	r2, #0
 8013b9e:	bf0c      	ite	eq
 8013ba0:	2201      	moveq	r2, #1
 8013ba2:	f04f 32ff 	movne.w	r2, #4294967295
 8013ba6:	608a      	str	r2, [r1, #8]
 8013ba8:	6822      	ldr	r2, [r4, #0]
 8013baa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013c3c <_scanf_chars+0xb0>
 8013bae:	06d1      	lsls	r1, r2, #27
 8013bb0:	bf5f      	itttt	pl
 8013bb2:	681a      	ldrpl	r2, [r3, #0]
 8013bb4:	1d11      	addpl	r1, r2, #4
 8013bb6:	6019      	strpl	r1, [r3, #0]
 8013bb8:	6816      	ldrpl	r6, [r2, #0]
 8013bba:	2700      	movs	r7, #0
 8013bbc:	69a0      	ldr	r0, [r4, #24]
 8013bbe:	b188      	cbz	r0, 8013be4 <_scanf_chars+0x58>
 8013bc0:	2801      	cmp	r0, #1
 8013bc2:	d107      	bne.n	8013bd4 <_scanf_chars+0x48>
 8013bc4:	682a      	ldr	r2, [r5, #0]
 8013bc6:	7811      	ldrb	r1, [r2, #0]
 8013bc8:	6962      	ldr	r2, [r4, #20]
 8013bca:	5c52      	ldrb	r2, [r2, r1]
 8013bcc:	b952      	cbnz	r2, 8013be4 <_scanf_chars+0x58>
 8013bce:	2f00      	cmp	r7, #0
 8013bd0:	d031      	beq.n	8013c36 <_scanf_chars+0xaa>
 8013bd2:	e022      	b.n	8013c1a <_scanf_chars+0x8e>
 8013bd4:	2802      	cmp	r0, #2
 8013bd6:	d120      	bne.n	8013c1a <_scanf_chars+0x8e>
 8013bd8:	682b      	ldr	r3, [r5, #0]
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013be0:	071b      	lsls	r3, r3, #28
 8013be2:	d41a      	bmi.n	8013c1a <_scanf_chars+0x8e>
 8013be4:	6823      	ldr	r3, [r4, #0]
 8013be6:	06da      	lsls	r2, r3, #27
 8013be8:	bf5e      	ittt	pl
 8013bea:	682b      	ldrpl	r3, [r5, #0]
 8013bec:	781b      	ldrbpl	r3, [r3, #0]
 8013bee:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013bf2:	682a      	ldr	r2, [r5, #0]
 8013bf4:	686b      	ldr	r3, [r5, #4]
 8013bf6:	3201      	adds	r2, #1
 8013bf8:	602a      	str	r2, [r5, #0]
 8013bfa:	68a2      	ldr	r2, [r4, #8]
 8013bfc:	3b01      	subs	r3, #1
 8013bfe:	3a01      	subs	r2, #1
 8013c00:	606b      	str	r3, [r5, #4]
 8013c02:	3701      	adds	r7, #1
 8013c04:	60a2      	str	r2, [r4, #8]
 8013c06:	b142      	cbz	r2, 8013c1a <_scanf_chars+0x8e>
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	dcd7      	bgt.n	8013bbc <_scanf_chars+0x30>
 8013c0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013c10:	4629      	mov	r1, r5
 8013c12:	4640      	mov	r0, r8
 8013c14:	4798      	blx	r3
 8013c16:	2800      	cmp	r0, #0
 8013c18:	d0d0      	beq.n	8013bbc <_scanf_chars+0x30>
 8013c1a:	6823      	ldr	r3, [r4, #0]
 8013c1c:	f013 0310 	ands.w	r3, r3, #16
 8013c20:	d105      	bne.n	8013c2e <_scanf_chars+0xa2>
 8013c22:	68e2      	ldr	r2, [r4, #12]
 8013c24:	3201      	adds	r2, #1
 8013c26:	60e2      	str	r2, [r4, #12]
 8013c28:	69a2      	ldr	r2, [r4, #24]
 8013c2a:	b102      	cbz	r2, 8013c2e <_scanf_chars+0xa2>
 8013c2c:	7033      	strb	r3, [r6, #0]
 8013c2e:	6923      	ldr	r3, [r4, #16]
 8013c30:	443b      	add	r3, r7
 8013c32:	6123      	str	r3, [r4, #16]
 8013c34:	2000      	movs	r0, #0
 8013c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c3a:	bf00      	nop
 8013c3c:	08014ee1 	.word	0x08014ee1

08013c40 <_scanf_i>:
 8013c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c44:	4698      	mov	r8, r3
 8013c46:	4b76      	ldr	r3, [pc, #472]	; (8013e20 <_scanf_i+0x1e0>)
 8013c48:	460c      	mov	r4, r1
 8013c4a:	4682      	mov	sl, r0
 8013c4c:	4616      	mov	r6, r2
 8013c4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013c52:	b087      	sub	sp, #28
 8013c54:	ab03      	add	r3, sp, #12
 8013c56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013c5a:	4b72      	ldr	r3, [pc, #456]	; (8013e24 <_scanf_i+0x1e4>)
 8013c5c:	69a1      	ldr	r1, [r4, #24]
 8013c5e:	4a72      	ldr	r2, [pc, #456]	; (8013e28 <_scanf_i+0x1e8>)
 8013c60:	2903      	cmp	r1, #3
 8013c62:	bf18      	it	ne
 8013c64:	461a      	movne	r2, r3
 8013c66:	68a3      	ldr	r3, [r4, #8]
 8013c68:	9201      	str	r2, [sp, #4]
 8013c6a:	1e5a      	subs	r2, r3, #1
 8013c6c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013c70:	bf88      	it	hi
 8013c72:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013c76:	4627      	mov	r7, r4
 8013c78:	bf82      	ittt	hi
 8013c7a:	eb03 0905 	addhi.w	r9, r3, r5
 8013c7e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013c82:	60a3      	strhi	r3, [r4, #8]
 8013c84:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013c88:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013c8c:	bf98      	it	ls
 8013c8e:	f04f 0900 	movls.w	r9, #0
 8013c92:	6023      	str	r3, [r4, #0]
 8013c94:	463d      	mov	r5, r7
 8013c96:	f04f 0b00 	mov.w	fp, #0
 8013c9a:	6831      	ldr	r1, [r6, #0]
 8013c9c:	ab03      	add	r3, sp, #12
 8013c9e:	7809      	ldrb	r1, [r1, #0]
 8013ca0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013ca4:	2202      	movs	r2, #2
 8013ca6:	f7ec fabb 	bl	8000220 <memchr>
 8013caa:	b328      	cbz	r0, 8013cf8 <_scanf_i+0xb8>
 8013cac:	f1bb 0f01 	cmp.w	fp, #1
 8013cb0:	d159      	bne.n	8013d66 <_scanf_i+0x126>
 8013cb2:	6862      	ldr	r2, [r4, #4]
 8013cb4:	b92a      	cbnz	r2, 8013cc2 <_scanf_i+0x82>
 8013cb6:	6822      	ldr	r2, [r4, #0]
 8013cb8:	2308      	movs	r3, #8
 8013cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013cbe:	6063      	str	r3, [r4, #4]
 8013cc0:	6022      	str	r2, [r4, #0]
 8013cc2:	6822      	ldr	r2, [r4, #0]
 8013cc4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013cc8:	6022      	str	r2, [r4, #0]
 8013cca:	68a2      	ldr	r2, [r4, #8]
 8013ccc:	1e51      	subs	r1, r2, #1
 8013cce:	60a1      	str	r1, [r4, #8]
 8013cd0:	b192      	cbz	r2, 8013cf8 <_scanf_i+0xb8>
 8013cd2:	6832      	ldr	r2, [r6, #0]
 8013cd4:	1c51      	adds	r1, r2, #1
 8013cd6:	6031      	str	r1, [r6, #0]
 8013cd8:	7812      	ldrb	r2, [r2, #0]
 8013cda:	f805 2b01 	strb.w	r2, [r5], #1
 8013cde:	6872      	ldr	r2, [r6, #4]
 8013ce0:	3a01      	subs	r2, #1
 8013ce2:	2a00      	cmp	r2, #0
 8013ce4:	6072      	str	r2, [r6, #4]
 8013ce6:	dc07      	bgt.n	8013cf8 <_scanf_i+0xb8>
 8013ce8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013cec:	4631      	mov	r1, r6
 8013cee:	4650      	mov	r0, sl
 8013cf0:	4790      	blx	r2
 8013cf2:	2800      	cmp	r0, #0
 8013cf4:	f040 8085 	bne.w	8013e02 <_scanf_i+0x1c2>
 8013cf8:	f10b 0b01 	add.w	fp, fp, #1
 8013cfc:	f1bb 0f03 	cmp.w	fp, #3
 8013d00:	d1cb      	bne.n	8013c9a <_scanf_i+0x5a>
 8013d02:	6863      	ldr	r3, [r4, #4]
 8013d04:	b90b      	cbnz	r3, 8013d0a <_scanf_i+0xca>
 8013d06:	230a      	movs	r3, #10
 8013d08:	6063      	str	r3, [r4, #4]
 8013d0a:	6863      	ldr	r3, [r4, #4]
 8013d0c:	4947      	ldr	r1, [pc, #284]	; (8013e2c <_scanf_i+0x1ec>)
 8013d0e:	6960      	ldr	r0, [r4, #20]
 8013d10:	1ac9      	subs	r1, r1, r3
 8013d12:	f000 f8b9 	bl	8013e88 <__sccl>
 8013d16:	f04f 0b00 	mov.w	fp, #0
 8013d1a:	68a3      	ldr	r3, [r4, #8]
 8013d1c:	6822      	ldr	r2, [r4, #0]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d03d      	beq.n	8013d9e <_scanf_i+0x15e>
 8013d22:	6831      	ldr	r1, [r6, #0]
 8013d24:	6960      	ldr	r0, [r4, #20]
 8013d26:	f891 c000 	ldrb.w	ip, [r1]
 8013d2a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	d035      	beq.n	8013d9e <_scanf_i+0x15e>
 8013d32:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013d36:	d124      	bne.n	8013d82 <_scanf_i+0x142>
 8013d38:	0510      	lsls	r0, r2, #20
 8013d3a:	d522      	bpl.n	8013d82 <_scanf_i+0x142>
 8013d3c:	f10b 0b01 	add.w	fp, fp, #1
 8013d40:	f1b9 0f00 	cmp.w	r9, #0
 8013d44:	d003      	beq.n	8013d4e <_scanf_i+0x10e>
 8013d46:	3301      	adds	r3, #1
 8013d48:	f109 39ff 	add.w	r9, r9, #4294967295
 8013d4c:	60a3      	str	r3, [r4, #8]
 8013d4e:	6873      	ldr	r3, [r6, #4]
 8013d50:	3b01      	subs	r3, #1
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	6073      	str	r3, [r6, #4]
 8013d56:	dd1b      	ble.n	8013d90 <_scanf_i+0x150>
 8013d58:	6833      	ldr	r3, [r6, #0]
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	6033      	str	r3, [r6, #0]
 8013d5e:	68a3      	ldr	r3, [r4, #8]
 8013d60:	3b01      	subs	r3, #1
 8013d62:	60a3      	str	r3, [r4, #8]
 8013d64:	e7d9      	b.n	8013d1a <_scanf_i+0xda>
 8013d66:	f1bb 0f02 	cmp.w	fp, #2
 8013d6a:	d1ae      	bne.n	8013cca <_scanf_i+0x8a>
 8013d6c:	6822      	ldr	r2, [r4, #0]
 8013d6e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013d72:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013d76:	d1bf      	bne.n	8013cf8 <_scanf_i+0xb8>
 8013d78:	2310      	movs	r3, #16
 8013d7a:	6063      	str	r3, [r4, #4]
 8013d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013d80:	e7a2      	b.n	8013cc8 <_scanf_i+0x88>
 8013d82:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013d86:	6022      	str	r2, [r4, #0]
 8013d88:	780b      	ldrb	r3, [r1, #0]
 8013d8a:	f805 3b01 	strb.w	r3, [r5], #1
 8013d8e:	e7de      	b.n	8013d4e <_scanf_i+0x10e>
 8013d90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013d94:	4631      	mov	r1, r6
 8013d96:	4650      	mov	r0, sl
 8013d98:	4798      	blx	r3
 8013d9a:	2800      	cmp	r0, #0
 8013d9c:	d0df      	beq.n	8013d5e <_scanf_i+0x11e>
 8013d9e:	6823      	ldr	r3, [r4, #0]
 8013da0:	05db      	lsls	r3, r3, #23
 8013da2:	d50d      	bpl.n	8013dc0 <_scanf_i+0x180>
 8013da4:	42bd      	cmp	r5, r7
 8013da6:	d909      	bls.n	8013dbc <_scanf_i+0x17c>
 8013da8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013db0:	4632      	mov	r2, r6
 8013db2:	4650      	mov	r0, sl
 8013db4:	4798      	blx	r3
 8013db6:	f105 39ff 	add.w	r9, r5, #4294967295
 8013dba:	464d      	mov	r5, r9
 8013dbc:	42bd      	cmp	r5, r7
 8013dbe:	d02d      	beq.n	8013e1c <_scanf_i+0x1dc>
 8013dc0:	6822      	ldr	r2, [r4, #0]
 8013dc2:	f012 0210 	ands.w	r2, r2, #16
 8013dc6:	d113      	bne.n	8013df0 <_scanf_i+0x1b0>
 8013dc8:	702a      	strb	r2, [r5, #0]
 8013dca:	6863      	ldr	r3, [r4, #4]
 8013dcc:	9e01      	ldr	r6, [sp, #4]
 8013dce:	4639      	mov	r1, r7
 8013dd0:	4650      	mov	r0, sl
 8013dd2:	47b0      	blx	r6
 8013dd4:	6821      	ldr	r1, [r4, #0]
 8013dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8013dda:	f011 0f20 	tst.w	r1, #32
 8013dde:	d013      	beq.n	8013e08 <_scanf_i+0x1c8>
 8013de0:	1d1a      	adds	r2, r3, #4
 8013de2:	f8c8 2000 	str.w	r2, [r8]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	6018      	str	r0, [r3, #0]
 8013dea:	68e3      	ldr	r3, [r4, #12]
 8013dec:	3301      	adds	r3, #1
 8013dee:	60e3      	str	r3, [r4, #12]
 8013df0:	1bed      	subs	r5, r5, r7
 8013df2:	44ab      	add	fp, r5
 8013df4:	6925      	ldr	r5, [r4, #16]
 8013df6:	445d      	add	r5, fp
 8013df8:	6125      	str	r5, [r4, #16]
 8013dfa:	2000      	movs	r0, #0
 8013dfc:	b007      	add	sp, #28
 8013dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e02:	f04f 0b00 	mov.w	fp, #0
 8013e06:	e7ca      	b.n	8013d9e <_scanf_i+0x15e>
 8013e08:	1d1a      	adds	r2, r3, #4
 8013e0a:	f8c8 2000 	str.w	r2, [r8]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	f011 0f01 	tst.w	r1, #1
 8013e14:	bf14      	ite	ne
 8013e16:	8018      	strhne	r0, [r3, #0]
 8013e18:	6018      	streq	r0, [r3, #0]
 8013e1a:	e7e6      	b.n	8013dea <_scanf_i+0x1aa>
 8013e1c:	2001      	movs	r0, #1
 8013e1e:	e7ed      	b.n	8013dfc <_scanf_i+0x1bc>
 8013e20:	08014ebc 	.word	0x08014ebc
 8013e24:	08014005 	.word	0x08014005
 8013e28:	08010ccd 	.word	0x08010ccd
 8013e2c:	0801535e 	.word	0x0801535e

08013e30 <_read_r>:
 8013e30:	b538      	push	{r3, r4, r5, lr}
 8013e32:	4d07      	ldr	r5, [pc, #28]	; (8013e50 <_read_r+0x20>)
 8013e34:	4604      	mov	r4, r0
 8013e36:	4608      	mov	r0, r1
 8013e38:	4611      	mov	r1, r2
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	602a      	str	r2, [r5, #0]
 8013e3e:	461a      	mov	r2, r3
 8013e40:	f7f0 fa86 	bl	8004350 <_read>
 8013e44:	1c43      	adds	r3, r0, #1
 8013e46:	d102      	bne.n	8013e4e <_read_r+0x1e>
 8013e48:	682b      	ldr	r3, [r5, #0]
 8013e4a:	b103      	cbz	r3, 8013e4e <_read_r+0x1e>
 8013e4c:	6023      	str	r3, [r4, #0]
 8013e4e:	bd38      	pop	{r3, r4, r5, pc}
 8013e50:	200031dc 	.word	0x200031dc
 8013e54:	00000000 	.word	0x00000000

08013e58 <nan>:
 8013e58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013e60 <nan+0x8>
 8013e5c:	4770      	bx	lr
 8013e5e:	bf00      	nop
 8013e60:	00000000 	.word	0x00000000
 8013e64:	7ff80000 	.word	0x7ff80000

08013e68 <_sbrk_r>:
 8013e68:	b538      	push	{r3, r4, r5, lr}
 8013e6a:	4d06      	ldr	r5, [pc, #24]	; (8013e84 <_sbrk_r+0x1c>)
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	4604      	mov	r4, r0
 8013e70:	4608      	mov	r0, r1
 8013e72:	602b      	str	r3, [r5, #0]
 8013e74:	f7f0 fabe 	bl	80043f4 <_sbrk>
 8013e78:	1c43      	adds	r3, r0, #1
 8013e7a:	d102      	bne.n	8013e82 <_sbrk_r+0x1a>
 8013e7c:	682b      	ldr	r3, [r5, #0]
 8013e7e:	b103      	cbz	r3, 8013e82 <_sbrk_r+0x1a>
 8013e80:	6023      	str	r3, [r4, #0]
 8013e82:	bd38      	pop	{r3, r4, r5, pc}
 8013e84:	200031dc 	.word	0x200031dc

08013e88 <__sccl>:
 8013e88:	b570      	push	{r4, r5, r6, lr}
 8013e8a:	780b      	ldrb	r3, [r1, #0]
 8013e8c:	4604      	mov	r4, r0
 8013e8e:	2b5e      	cmp	r3, #94	; 0x5e
 8013e90:	bf0b      	itete	eq
 8013e92:	784b      	ldrbeq	r3, [r1, #1]
 8013e94:	1c48      	addne	r0, r1, #1
 8013e96:	1c88      	addeq	r0, r1, #2
 8013e98:	2200      	movne	r2, #0
 8013e9a:	bf08      	it	eq
 8013e9c:	2201      	moveq	r2, #1
 8013e9e:	1e61      	subs	r1, r4, #1
 8013ea0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013ea4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013ea8:	42a9      	cmp	r1, r5
 8013eaa:	d1fb      	bne.n	8013ea4 <__sccl+0x1c>
 8013eac:	b90b      	cbnz	r3, 8013eb2 <__sccl+0x2a>
 8013eae:	3801      	subs	r0, #1
 8013eb0:	bd70      	pop	{r4, r5, r6, pc}
 8013eb2:	f082 0201 	eor.w	r2, r2, #1
 8013eb6:	54e2      	strb	r2, [r4, r3]
 8013eb8:	4605      	mov	r5, r0
 8013eba:	4628      	mov	r0, r5
 8013ebc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013ec0:	292d      	cmp	r1, #45	; 0x2d
 8013ec2:	d006      	beq.n	8013ed2 <__sccl+0x4a>
 8013ec4:	295d      	cmp	r1, #93	; 0x5d
 8013ec6:	d0f3      	beq.n	8013eb0 <__sccl+0x28>
 8013ec8:	b909      	cbnz	r1, 8013ece <__sccl+0x46>
 8013eca:	4628      	mov	r0, r5
 8013ecc:	e7f0      	b.n	8013eb0 <__sccl+0x28>
 8013ece:	460b      	mov	r3, r1
 8013ed0:	e7f1      	b.n	8013eb6 <__sccl+0x2e>
 8013ed2:	786e      	ldrb	r6, [r5, #1]
 8013ed4:	2e5d      	cmp	r6, #93	; 0x5d
 8013ed6:	d0fa      	beq.n	8013ece <__sccl+0x46>
 8013ed8:	42b3      	cmp	r3, r6
 8013eda:	dcf8      	bgt.n	8013ece <__sccl+0x46>
 8013edc:	3502      	adds	r5, #2
 8013ede:	4619      	mov	r1, r3
 8013ee0:	3101      	adds	r1, #1
 8013ee2:	428e      	cmp	r6, r1
 8013ee4:	5462      	strb	r2, [r4, r1]
 8013ee6:	dcfb      	bgt.n	8013ee0 <__sccl+0x58>
 8013ee8:	1af1      	subs	r1, r6, r3
 8013eea:	3901      	subs	r1, #1
 8013eec:	1c58      	adds	r0, r3, #1
 8013eee:	42b3      	cmp	r3, r6
 8013ef0:	bfa8      	it	ge
 8013ef2:	2100      	movge	r1, #0
 8013ef4:	1843      	adds	r3, r0, r1
 8013ef6:	e7e0      	b.n	8013eba <__sccl+0x32>

08013ef8 <strncmp>:
 8013ef8:	b510      	push	{r4, lr}
 8013efa:	b17a      	cbz	r2, 8013f1c <strncmp+0x24>
 8013efc:	4603      	mov	r3, r0
 8013efe:	3901      	subs	r1, #1
 8013f00:	1884      	adds	r4, r0, r2
 8013f02:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013f06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013f0a:	4290      	cmp	r0, r2
 8013f0c:	d101      	bne.n	8013f12 <strncmp+0x1a>
 8013f0e:	42a3      	cmp	r3, r4
 8013f10:	d101      	bne.n	8013f16 <strncmp+0x1e>
 8013f12:	1a80      	subs	r0, r0, r2
 8013f14:	bd10      	pop	{r4, pc}
 8013f16:	2800      	cmp	r0, #0
 8013f18:	d1f3      	bne.n	8013f02 <strncmp+0xa>
 8013f1a:	e7fa      	b.n	8013f12 <strncmp+0x1a>
 8013f1c:	4610      	mov	r0, r2
 8013f1e:	e7f9      	b.n	8013f14 <strncmp+0x1c>

08013f20 <_strtoul_l.constprop.0>:
 8013f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f24:	4f36      	ldr	r7, [pc, #216]	; (8014000 <_strtoul_l.constprop.0+0xe0>)
 8013f26:	4686      	mov	lr, r0
 8013f28:	460d      	mov	r5, r1
 8013f2a:	4628      	mov	r0, r5
 8013f2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f30:	5de6      	ldrb	r6, [r4, r7]
 8013f32:	f016 0608 	ands.w	r6, r6, #8
 8013f36:	d1f8      	bne.n	8013f2a <_strtoul_l.constprop.0+0xa>
 8013f38:	2c2d      	cmp	r4, #45	; 0x2d
 8013f3a:	d12f      	bne.n	8013f9c <_strtoul_l.constprop.0+0x7c>
 8013f3c:	782c      	ldrb	r4, [r5, #0]
 8013f3e:	2601      	movs	r6, #1
 8013f40:	1c85      	adds	r5, r0, #2
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d057      	beq.n	8013ff6 <_strtoul_l.constprop.0+0xd6>
 8013f46:	2b10      	cmp	r3, #16
 8013f48:	d109      	bne.n	8013f5e <_strtoul_l.constprop.0+0x3e>
 8013f4a:	2c30      	cmp	r4, #48	; 0x30
 8013f4c:	d107      	bne.n	8013f5e <_strtoul_l.constprop.0+0x3e>
 8013f4e:	7828      	ldrb	r0, [r5, #0]
 8013f50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013f54:	2858      	cmp	r0, #88	; 0x58
 8013f56:	d149      	bne.n	8013fec <_strtoul_l.constprop.0+0xcc>
 8013f58:	786c      	ldrb	r4, [r5, #1]
 8013f5a:	2310      	movs	r3, #16
 8013f5c:	3502      	adds	r5, #2
 8013f5e:	f04f 38ff 	mov.w	r8, #4294967295
 8013f62:	2700      	movs	r7, #0
 8013f64:	fbb8 f8f3 	udiv	r8, r8, r3
 8013f68:	fb03 f908 	mul.w	r9, r3, r8
 8013f6c:	ea6f 0909 	mvn.w	r9, r9
 8013f70:	4638      	mov	r0, r7
 8013f72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013f76:	f1bc 0f09 	cmp.w	ip, #9
 8013f7a:	d814      	bhi.n	8013fa6 <_strtoul_l.constprop.0+0x86>
 8013f7c:	4664      	mov	r4, ip
 8013f7e:	42a3      	cmp	r3, r4
 8013f80:	dd22      	ble.n	8013fc8 <_strtoul_l.constprop.0+0xa8>
 8013f82:	2f00      	cmp	r7, #0
 8013f84:	db1d      	blt.n	8013fc2 <_strtoul_l.constprop.0+0xa2>
 8013f86:	4580      	cmp	r8, r0
 8013f88:	d31b      	bcc.n	8013fc2 <_strtoul_l.constprop.0+0xa2>
 8013f8a:	d101      	bne.n	8013f90 <_strtoul_l.constprop.0+0x70>
 8013f8c:	45a1      	cmp	r9, r4
 8013f8e:	db18      	blt.n	8013fc2 <_strtoul_l.constprop.0+0xa2>
 8013f90:	fb00 4003 	mla	r0, r0, r3, r4
 8013f94:	2701      	movs	r7, #1
 8013f96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f9a:	e7ea      	b.n	8013f72 <_strtoul_l.constprop.0+0x52>
 8013f9c:	2c2b      	cmp	r4, #43	; 0x2b
 8013f9e:	bf04      	itt	eq
 8013fa0:	782c      	ldrbeq	r4, [r5, #0]
 8013fa2:	1c85      	addeq	r5, r0, #2
 8013fa4:	e7cd      	b.n	8013f42 <_strtoul_l.constprop.0+0x22>
 8013fa6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013faa:	f1bc 0f19 	cmp.w	ip, #25
 8013fae:	d801      	bhi.n	8013fb4 <_strtoul_l.constprop.0+0x94>
 8013fb0:	3c37      	subs	r4, #55	; 0x37
 8013fb2:	e7e4      	b.n	8013f7e <_strtoul_l.constprop.0+0x5e>
 8013fb4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013fb8:	f1bc 0f19 	cmp.w	ip, #25
 8013fbc:	d804      	bhi.n	8013fc8 <_strtoul_l.constprop.0+0xa8>
 8013fbe:	3c57      	subs	r4, #87	; 0x57
 8013fc0:	e7dd      	b.n	8013f7e <_strtoul_l.constprop.0+0x5e>
 8013fc2:	f04f 37ff 	mov.w	r7, #4294967295
 8013fc6:	e7e6      	b.n	8013f96 <_strtoul_l.constprop.0+0x76>
 8013fc8:	2f00      	cmp	r7, #0
 8013fca:	da07      	bge.n	8013fdc <_strtoul_l.constprop.0+0xbc>
 8013fcc:	2322      	movs	r3, #34	; 0x22
 8013fce:	f8ce 3000 	str.w	r3, [lr]
 8013fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8013fd6:	b932      	cbnz	r2, 8013fe6 <_strtoul_l.constprop.0+0xc6>
 8013fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fdc:	b106      	cbz	r6, 8013fe0 <_strtoul_l.constprop.0+0xc0>
 8013fde:	4240      	negs	r0, r0
 8013fe0:	2a00      	cmp	r2, #0
 8013fe2:	d0f9      	beq.n	8013fd8 <_strtoul_l.constprop.0+0xb8>
 8013fe4:	b107      	cbz	r7, 8013fe8 <_strtoul_l.constprop.0+0xc8>
 8013fe6:	1e69      	subs	r1, r5, #1
 8013fe8:	6011      	str	r1, [r2, #0]
 8013fea:	e7f5      	b.n	8013fd8 <_strtoul_l.constprop.0+0xb8>
 8013fec:	2430      	movs	r4, #48	; 0x30
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d1b5      	bne.n	8013f5e <_strtoul_l.constprop.0+0x3e>
 8013ff2:	2308      	movs	r3, #8
 8013ff4:	e7b3      	b.n	8013f5e <_strtoul_l.constprop.0+0x3e>
 8013ff6:	2c30      	cmp	r4, #48	; 0x30
 8013ff8:	d0a9      	beq.n	8013f4e <_strtoul_l.constprop.0+0x2e>
 8013ffa:	230a      	movs	r3, #10
 8013ffc:	e7af      	b.n	8013f5e <_strtoul_l.constprop.0+0x3e>
 8013ffe:	bf00      	nop
 8014000:	08014ee1 	.word	0x08014ee1

08014004 <_strtoul_r>:
 8014004:	f7ff bf8c 	b.w	8013f20 <_strtoul_l.constprop.0>

08014008 <__submore>:
 8014008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801400c:	460c      	mov	r4, r1
 801400e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014014:	4299      	cmp	r1, r3
 8014016:	d11d      	bne.n	8014054 <__submore+0x4c>
 8014018:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801401c:	f7ff f8ba 	bl	8013194 <_malloc_r>
 8014020:	b918      	cbnz	r0, 801402a <__submore+0x22>
 8014022:	f04f 30ff 	mov.w	r0, #4294967295
 8014026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801402a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801402e:	63a3      	str	r3, [r4, #56]	; 0x38
 8014030:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014034:	6360      	str	r0, [r4, #52]	; 0x34
 8014036:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801403a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801403e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014042:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014046:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801404a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801404e:	6020      	str	r0, [r4, #0]
 8014050:	2000      	movs	r0, #0
 8014052:	e7e8      	b.n	8014026 <__submore+0x1e>
 8014054:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014056:	0077      	lsls	r7, r6, #1
 8014058:	463a      	mov	r2, r7
 801405a:	f000 f87b 	bl	8014154 <_realloc_r>
 801405e:	4605      	mov	r5, r0
 8014060:	2800      	cmp	r0, #0
 8014062:	d0de      	beq.n	8014022 <__submore+0x1a>
 8014064:	eb00 0806 	add.w	r8, r0, r6
 8014068:	4601      	mov	r1, r0
 801406a:	4632      	mov	r2, r6
 801406c:	4640      	mov	r0, r8
 801406e:	f7fa ff67 	bl	800ef40 <memcpy>
 8014072:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014076:	f8c4 8000 	str.w	r8, [r4]
 801407a:	e7e9      	b.n	8014050 <__submore+0x48>

0801407c <__ascii_wctomb>:
 801407c:	b149      	cbz	r1, 8014092 <__ascii_wctomb+0x16>
 801407e:	2aff      	cmp	r2, #255	; 0xff
 8014080:	bf85      	ittet	hi
 8014082:	238a      	movhi	r3, #138	; 0x8a
 8014084:	6003      	strhi	r3, [r0, #0]
 8014086:	700a      	strbls	r2, [r1, #0]
 8014088:	f04f 30ff 	movhi.w	r0, #4294967295
 801408c:	bf98      	it	ls
 801408e:	2001      	movls	r0, #1
 8014090:	4770      	bx	lr
 8014092:	4608      	mov	r0, r1
 8014094:	4770      	bx	lr
	...

08014098 <__assert_func>:
 8014098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801409a:	4614      	mov	r4, r2
 801409c:	461a      	mov	r2, r3
 801409e:	4b09      	ldr	r3, [pc, #36]	; (80140c4 <__assert_func+0x2c>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	4605      	mov	r5, r0
 80140a4:	68d8      	ldr	r0, [r3, #12]
 80140a6:	b14c      	cbz	r4, 80140bc <__assert_func+0x24>
 80140a8:	4b07      	ldr	r3, [pc, #28]	; (80140c8 <__assert_func+0x30>)
 80140aa:	9100      	str	r1, [sp, #0]
 80140ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80140b0:	4906      	ldr	r1, [pc, #24]	; (80140cc <__assert_func+0x34>)
 80140b2:	462b      	mov	r3, r5
 80140b4:	f000 f80e 	bl	80140d4 <fiprintf>
 80140b8:	f000 f87b 	bl	80141b2 <abort>
 80140bc:	4b04      	ldr	r3, [pc, #16]	; (80140d0 <__assert_func+0x38>)
 80140be:	461c      	mov	r4, r3
 80140c0:	e7f3      	b.n	80140aa <__assert_func+0x12>
 80140c2:	bf00      	nop
 80140c4:	20000110 	.word	0x20000110
 80140c8:	08015360 	.word	0x08015360
 80140cc:	0801536d 	.word	0x0801536d
 80140d0:	0801539b 	.word	0x0801539b

080140d4 <fiprintf>:
 80140d4:	b40e      	push	{r1, r2, r3}
 80140d6:	b503      	push	{r0, r1, lr}
 80140d8:	4601      	mov	r1, r0
 80140da:	ab03      	add	r3, sp, #12
 80140dc:	4805      	ldr	r0, [pc, #20]	; (80140f4 <fiprintf+0x20>)
 80140de:	f853 2b04 	ldr.w	r2, [r3], #4
 80140e2:	6800      	ldr	r0, [r0, #0]
 80140e4:	9301      	str	r3, [sp, #4]
 80140e6:	f7ff fc21 	bl	801392c <_vfiprintf_r>
 80140ea:	b002      	add	sp, #8
 80140ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80140f0:	b003      	add	sp, #12
 80140f2:	4770      	bx	lr
 80140f4:	20000110 	.word	0x20000110

080140f8 <_fstat_r>:
 80140f8:	b538      	push	{r3, r4, r5, lr}
 80140fa:	4d07      	ldr	r5, [pc, #28]	; (8014118 <_fstat_r+0x20>)
 80140fc:	2300      	movs	r3, #0
 80140fe:	4604      	mov	r4, r0
 8014100:	4608      	mov	r0, r1
 8014102:	4611      	mov	r1, r2
 8014104:	602b      	str	r3, [r5, #0]
 8014106:	f7f0 f94c 	bl	80043a2 <_fstat>
 801410a:	1c43      	adds	r3, r0, #1
 801410c:	d102      	bne.n	8014114 <_fstat_r+0x1c>
 801410e:	682b      	ldr	r3, [r5, #0]
 8014110:	b103      	cbz	r3, 8014114 <_fstat_r+0x1c>
 8014112:	6023      	str	r3, [r4, #0]
 8014114:	bd38      	pop	{r3, r4, r5, pc}
 8014116:	bf00      	nop
 8014118:	200031dc 	.word	0x200031dc

0801411c <_isatty_r>:
 801411c:	b538      	push	{r3, r4, r5, lr}
 801411e:	4d06      	ldr	r5, [pc, #24]	; (8014138 <_isatty_r+0x1c>)
 8014120:	2300      	movs	r3, #0
 8014122:	4604      	mov	r4, r0
 8014124:	4608      	mov	r0, r1
 8014126:	602b      	str	r3, [r5, #0]
 8014128:	f7f0 f94b 	bl	80043c2 <_isatty>
 801412c:	1c43      	adds	r3, r0, #1
 801412e:	d102      	bne.n	8014136 <_isatty_r+0x1a>
 8014130:	682b      	ldr	r3, [r5, #0]
 8014132:	b103      	cbz	r3, 8014136 <_isatty_r+0x1a>
 8014134:	6023      	str	r3, [r4, #0]
 8014136:	bd38      	pop	{r3, r4, r5, pc}
 8014138:	200031dc 	.word	0x200031dc

0801413c <__malloc_lock>:
 801413c:	4801      	ldr	r0, [pc, #4]	; (8014144 <__malloc_lock+0x8>)
 801413e:	f7fe ba50 	b.w	80125e2 <__retarget_lock_acquire_recursive>
 8014142:	bf00      	nop
 8014144:	200031d0 	.word	0x200031d0

08014148 <__malloc_unlock>:
 8014148:	4801      	ldr	r0, [pc, #4]	; (8014150 <__malloc_unlock+0x8>)
 801414a:	f7fe ba4b 	b.w	80125e4 <__retarget_lock_release_recursive>
 801414e:	bf00      	nop
 8014150:	200031d0 	.word	0x200031d0

08014154 <_realloc_r>:
 8014154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014158:	4680      	mov	r8, r0
 801415a:	4614      	mov	r4, r2
 801415c:	460e      	mov	r6, r1
 801415e:	b921      	cbnz	r1, 801416a <_realloc_r+0x16>
 8014160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014164:	4611      	mov	r1, r2
 8014166:	f7ff b815 	b.w	8013194 <_malloc_r>
 801416a:	b92a      	cbnz	r2, 8014178 <_realloc_r+0x24>
 801416c:	f7fe ffa6 	bl	80130bc <_free_r>
 8014170:	4625      	mov	r5, r4
 8014172:	4628      	mov	r0, r5
 8014174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014178:	f000 f822 	bl	80141c0 <_malloc_usable_size_r>
 801417c:	4284      	cmp	r4, r0
 801417e:	4607      	mov	r7, r0
 8014180:	d802      	bhi.n	8014188 <_realloc_r+0x34>
 8014182:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014186:	d812      	bhi.n	80141ae <_realloc_r+0x5a>
 8014188:	4621      	mov	r1, r4
 801418a:	4640      	mov	r0, r8
 801418c:	f7ff f802 	bl	8013194 <_malloc_r>
 8014190:	4605      	mov	r5, r0
 8014192:	2800      	cmp	r0, #0
 8014194:	d0ed      	beq.n	8014172 <_realloc_r+0x1e>
 8014196:	42bc      	cmp	r4, r7
 8014198:	4622      	mov	r2, r4
 801419a:	4631      	mov	r1, r6
 801419c:	bf28      	it	cs
 801419e:	463a      	movcs	r2, r7
 80141a0:	f7fa fece 	bl	800ef40 <memcpy>
 80141a4:	4631      	mov	r1, r6
 80141a6:	4640      	mov	r0, r8
 80141a8:	f7fe ff88 	bl	80130bc <_free_r>
 80141ac:	e7e1      	b.n	8014172 <_realloc_r+0x1e>
 80141ae:	4635      	mov	r5, r6
 80141b0:	e7df      	b.n	8014172 <_realloc_r+0x1e>

080141b2 <abort>:
 80141b2:	b508      	push	{r3, lr}
 80141b4:	2006      	movs	r0, #6
 80141b6:	f000 f833 	bl	8014220 <raise>
 80141ba:	2001      	movs	r0, #1
 80141bc:	f7f0 f8be 	bl	800433c <_exit>

080141c0 <_malloc_usable_size_r>:
 80141c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141c4:	1f18      	subs	r0, r3, #4
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	bfbc      	itt	lt
 80141ca:	580b      	ldrlt	r3, [r1, r0]
 80141cc:	18c0      	addlt	r0, r0, r3
 80141ce:	4770      	bx	lr

080141d0 <_raise_r>:
 80141d0:	291f      	cmp	r1, #31
 80141d2:	b538      	push	{r3, r4, r5, lr}
 80141d4:	4604      	mov	r4, r0
 80141d6:	460d      	mov	r5, r1
 80141d8:	d904      	bls.n	80141e4 <_raise_r+0x14>
 80141da:	2316      	movs	r3, #22
 80141dc:	6003      	str	r3, [r0, #0]
 80141de:	f04f 30ff 	mov.w	r0, #4294967295
 80141e2:	bd38      	pop	{r3, r4, r5, pc}
 80141e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80141e6:	b112      	cbz	r2, 80141ee <_raise_r+0x1e>
 80141e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80141ec:	b94b      	cbnz	r3, 8014202 <_raise_r+0x32>
 80141ee:	4620      	mov	r0, r4
 80141f0:	f000 f830 	bl	8014254 <_getpid_r>
 80141f4:	462a      	mov	r2, r5
 80141f6:	4601      	mov	r1, r0
 80141f8:	4620      	mov	r0, r4
 80141fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141fe:	f000 b817 	b.w	8014230 <_kill_r>
 8014202:	2b01      	cmp	r3, #1
 8014204:	d00a      	beq.n	801421c <_raise_r+0x4c>
 8014206:	1c59      	adds	r1, r3, #1
 8014208:	d103      	bne.n	8014212 <_raise_r+0x42>
 801420a:	2316      	movs	r3, #22
 801420c:	6003      	str	r3, [r0, #0]
 801420e:	2001      	movs	r0, #1
 8014210:	e7e7      	b.n	80141e2 <_raise_r+0x12>
 8014212:	2400      	movs	r4, #0
 8014214:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014218:	4628      	mov	r0, r5
 801421a:	4798      	blx	r3
 801421c:	2000      	movs	r0, #0
 801421e:	e7e0      	b.n	80141e2 <_raise_r+0x12>

08014220 <raise>:
 8014220:	4b02      	ldr	r3, [pc, #8]	; (801422c <raise+0xc>)
 8014222:	4601      	mov	r1, r0
 8014224:	6818      	ldr	r0, [r3, #0]
 8014226:	f7ff bfd3 	b.w	80141d0 <_raise_r>
 801422a:	bf00      	nop
 801422c:	20000110 	.word	0x20000110

08014230 <_kill_r>:
 8014230:	b538      	push	{r3, r4, r5, lr}
 8014232:	4d07      	ldr	r5, [pc, #28]	; (8014250 <_kill_r+0x20>)
 8014234:	2300      	movs	r3, #0
 8014236:	4604      	mov	r4, r0
 8014238:	4608      	mov	r0, r1
 801423a:	4611      	mov	r1, r2
 801423c:	602b      	str	r3, [r5, #0]
 801423e:	f7f0 f86d 	bl	800431c <_kill>
 8014242:	1c43      	adds	r3, r0, #1
 8014244:	d102      	bne.n	801424c <_kill_r+0x1c>
 8014246:	682b      	ldr	r3, [r5, #0]
 8014248:	b103      	cbz	r3, 801424c <_kill_r+0x1c>
 801424a:	6023      	str	r3, [r4, #0]
 801424c:	bd38      	pop	{r3, r4, r5, pc}
 801424e:	bf00      	nop
 8014250:	200031dc 	.word	0x200031dc

08014254 <_getpid_r>:
 8014254:	f7f0 b85a 	b.w	800430c <_getpid>

08014258 <_init>:
 8014258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801425a:	bf00      	nop
 801425c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801425e:	bc08      	pop	{r3}
 8014260:	469e      	mov	lr, r3
 8014262:	4770      	bx	lr

08014264 <_fini>:
 8014264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014266:	bf00      	nop
 8014268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801426a:	bc08      	pop	{r3}
 801426c:	469e      	mov	lr, r3
 801426e:	4770      	bx	lr
