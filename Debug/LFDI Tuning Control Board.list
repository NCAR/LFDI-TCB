
LFDI Tuning Control Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e98c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd8  0800eb3c  0800eb3c  0001eb3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f814  0800f814  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f814  0800f814  0001f814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f81c  0800f81c  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f81c  0800f81c  0001f81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f820  0800f820  0001f820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800f824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002016c  2**0
                  CONTENTS
 10 .bss          00001e58  2000016c  2000016c  0002016c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fc4  20001fc4  0002016c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022bd0  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d50  00000000  00000000  00042d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d30  00000000  00000000  00047ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b10  00000000  00000000  000497f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b59c  00000000  00000000  0004b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000254c2  00000000  00000000  0007689c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f28ae  00000000  00000000  0009bd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018e60c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000086cc  00000000  00000000  0018e65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800eb24 	.word	0x0800eb24

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000170 	.word	0x20000170
 80001ec:	0800eb24 	.word	0x0800eb24

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b974 	b.w	8000edc <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	468e      	mov	lr, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14d      	bne.n	8000cb6 <__udivmoddi4+0xaa>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	d969      	bls.n	8000cf4 <__udivmoddi4+0xe8>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b152      	cbz	r2, 8000c3c <__udivmoddi4+0x30>
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	f1c2 0120 	rsb	r1, r2, #32
 8000c2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c36:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	0c21      	lsrs	r1, r4, #16
 8000c42:	fbbe f6f8 	udiv	r6, lr, r8
 8000c46:	fa1f f78c 	uxth.w	r7, ip
 8000c4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c52:	fb06 f107 	mul.w	r1, r6, r7
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x64>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c62:	f080 811f 	bcs.w	8000ea4 <__udivmoddi4+0x298>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 811c 	bls.w	8000ea4 <__udivmoddi4+0x298>
 8000c6c:	3e02      	subs	r6, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c78:	fb08 3310 	mls	r3, r8, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 f707 	mul.w	r7, r0, r7
 8000c84:	42a7      	cmp	r7, r4
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x92>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c90:	f080 810a 	bcs.w	8000ea8 <__udivmoddi4+0x29c>
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	f240 8107 	bls.w	8000ea8 <__udivmoddi4+0x29c>
 8000c9a:	4464      	add	r4, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca2:	1be4      	subs	r4, r4, r7
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	b11d      	cbz	r5, 8000cb0 <__udivmoddi4+0xa4>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xc2>
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	f000 80ef 	beq.w	8000e9e <__udivmoddi4+0x292>
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f683 	clz	r6, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d14a      	bne.n	8000d6c <__udivmoddi4+0x160>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd4>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80f9 	bhi.w	8000ed2 <__udivmoddi4+0x2c6>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	469e      	mov	lr, r3
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa4>
 8000cee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xec>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 8092 	bne.w	8000e26 <__udivmoddi4+0x21a>
 8000d02:	eba1 010c 	sub.w	r1, r1, ip
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	2601      	movs	r6, #1
 8000d10:	0c20      	lsrs	r0, r4, #16
 8000d12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d16:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1e:	fb0e f003 	mul.w	r0, lr, r3
 8000d22:	4288      	cmp	r0, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x12c>
 8000d26:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x12a>
 8000d30:	4288      	cmp	r0, r1
 8000d32:	f200 80cb 	bhi.w	8000ecc <__udivmoddi4+0x2c0>
 8000d36:	4643      	mov	r3, r8
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d40:	fb07 1110 	mls	r1, r7, r0, r1
 8000d44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d48:	fb0e fe00 	mul.w	lr, lr, r0
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x156>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d58:	d202      	bcs.n	8000d60 <__udivmoddi4+0x154>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f200 80bb 	bhi.w	8000ed6 <__udivmoddi4+0x2ca>
 8000d60:	4608      	mov	r0, r1
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000d6c:	f1c6 0720 	rsb	r7, r6, #32
 8000d70:	40b3      	lsls	r3, r6
 8000d72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d82:	431c      	orrs	r4, r3
 8000d84:	40f9      	lsrs	r1, r7
 8000d86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d92:	0c20      	lsrs	r0, r4, #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fb09 1118 	mls	r1, r9, r8, r1
 8000d9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da0:	fb08 f00e 	mul.w	r0, r8, lr
 8000da4:	4288      	cmp	r0, r1
 8000da6:	fa02 f206 	lsl.w	r2, r2, r6
 8000daa:	d90b      	bls.n	8000dc4 <__udivmoddi4+0x1b8>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db4:	f080 8088 	bcs.w	8000ec8 <__udivmoddi4+0x2bc>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	f240 8085 	bls.w	8000ec8 <__udivmoddi4+0x2bc>
 8000dbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	458e      	cmp	lr, r1
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x1e2>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de4:	d26c      	bcs.n	8000ec0 <__udivmoddi4+0x2b4>
 8000de6:	458e      	cmp	lr, r1
 8000de8:	d96a      	bls.n	8000ec0 <__udivmoddi4+0x2b4>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4461      	add	r1, ip
 8000dee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df2:	fba0 9402 	umull	r9, r4, r0, r2
 8000df6:	eba1 010e 	sub.w	r1, r1, lr
 8000dfa:	42a1      	cmp	r1, r4
 8000dfc:	46c8      	mov	r8, r9
 8000dfe:	46a6      	mov	lr, r4
 8000e00:	d356      	bcc.n	8000eb0 <__udivmoddi4+0x2a4>
 8000e02:	d053      	beq.n	8000eac <__udivmoddi4+0x2a0>
 8000e04:	b15d      	cbz	r5, 8000e1e <__udivmoddi4+0x212>
 8000e06:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e12:	fa22 f306 	lsr.w	r3, r2, r6
 8000e16:	40f1      	lsrs	r1, r6
 8000e18:	431f      	orrs	r7, r3
 8000e1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1e:	2600      	movs	r6, #0
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	f1c2 0320 	rsb	r3, r2, #32
 8000e2a:	40d8      	lsrs	r0, r3
 8000e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e30:	fa21 f303 	lsr.w	r3, r1, r3
 8000e34:	4091      	lsls	r1, r2
 8000e36:	4301      	orrs	r1, r0
 8000e38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3c:	fa1f fe8c 	uxth.w	lr, ip
 8000e40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e44:	fb07 3610 	mls	r6, r7, r0, r3
 8000e48:	0c0b      	lsrs	r3, r1, #16
 8000e4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e52:	429e      	cmp	r6, r3
 8000e54:	fa04 f402 	lsl.w	r4, r4, r2
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x260>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e62:	d22f      	bcs.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e64:	429e      	cmp	r6, r3
 8000e66:	d92d      	bls.n	8000ec4 <__udivmoddi4+0x2b8>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	1b9b      	subs	r3, r3, r6
 8000e6e:	b289      	uxth	r1, r1
 8000e70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e74:	fb07 3316 	mls	r3, r7, r6, r3
 8000e78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x28a>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e8c:	d216      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d914      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e92:	3e02      	subs	r6, #2
 8000e94:	4461      	add	r1, ip
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e9c:	e738      	b.n	8000d10 <__udivmoddi4+0x104>
 8000e9e:	462e      	mov	r6, r5
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	e705      	b.n	8000cb0 <__udivmoddi4+0xa4>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	e6e3      	b.n	8000c70 <__udivmoddi4+0x64>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6f8      	b.n	8000c9e <__udivmoddi4+0x92>
 8000eac:	454b      	cmp	r3, r9
 8000eae:	d2a9      	bcs.n	8000e04 <__udivmoddi4+0x1f8>
 8000eb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb8:	3801      	subs	r0, #1
 8000eba:	e7a3      	b.n	8000e04 <__udivmoddi4+0x1f8>
 8000ebc:	4646      	mov	r6, r8
 8000ebe:	e7ea      	b.n	8000e96 <__udivmoddi4+0x28a>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	e794      	b.n	8000dee <__udivmoddi4+0x1e2>
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	e7d1      	b.n	8000e6c <__udivmoddi4+0x260>
 8000ec8:	46d0      	mov	r8, sl
 8000eca:	e77b      	b.n	8000dc4 <__udivmoddi4+0x1b8>
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	e732      	b.n	8000d38 <__udivmoddi4+0x12c>
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	e709      	b.n	8000cea <__udivmoddi4+0xde>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e742      	b.n	8000d62 <__udivmoddi4+0x156>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <DAC_Initialize>:
//Max Voltage peak to peak
float REFERENCE_VOLTAGE = 3;


//
void DAC_Initialize(struct sDAC* s){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	Set_Config(s);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f809 	bl	8000f00 <Set_Config>
	Set_Max_Peak_To_Peak_Voltage(s, 0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f971 	bl	80011d8 <Set_Max_Peak_To_Peak_Voltage>

}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <Set_Config>:
//@brief: This function will set a configuration value to the configuration register
//@param s: The DAC struct to use
//@return: None
void Set_Config(struct sDAC* s){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint8_t Data[3] = {0x00, 0x00, 0x00};
 8000f08:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <Set_Config+0xcc>)
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	6812      	ldr	r2, [r2, #0]
 8000f10:	4611      	mov	r1, r2
 8000f12:	8019      	strh	r1, [r3, #0]
 8000f14:	3302      	adds	r3, #2
 8000f16:	0c12      	lsrs	r2, r2, #16
 8000f18:	701a      	strb	r2, [r3, #0]
	uint8_t read_command[3] = {READ|CONFIG, 0x00, 0x00};
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <Set_Config+0xd0>)
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <Set_Config+0xd4>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	743b      	strb	r3, [r7, #16]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	747b      	strb	r3, [r7, #17]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	74bb      	strb	r3, [r7, #18]
	
	Hardware_Reset(s);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f923 	bl	800117c <Hardware_Reset>
	//Make sure SCE is 0. This will make it so that the DAC will use the Values direclty written to it
	//rather than trying to use the individual offset and gain of each register to re-adjust
	//the value
	//Gain_A = 1 -> gain is set to 4xVref GAIN_A = 0 -> gain is set to 6xVref
	
	uint8_t tx_data[3] = {WRITE|CONFIG, AB, 0x00};
 8000f36:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <Set_Config+0xd8>)
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <Set_Config+0xd4>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	733b      	strb	r3, [r7, #12]
 8000f44:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <Set_Config+0xdc>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	737b      	strb	r3, [r7, #13]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f843 	bl	8000fe0 <Send_Command>
	Send_Command(s, read_command);
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f83d 	bl	8000fe0 <Send_Command>
	Recieve_Data(s, Data);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f85b 	bl	8001028 <Recieve_Data>
	
	//if Data is the same as tx_data then the command was successful
	if(Data[1] == tx_data[1] && Data[2] == tx_data[2]){
 8000f72:	7d7a      	ldrb	r2, [r7, #21]
 8000f74:	7b7b      	ldrb	r3, [r7, #13]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d117      	bne.n	8000faa <Set_Config+0xaa>
 8000f7a:	7dba      	ldrb	r2, [r7, #22]
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d113      	bne.n	8000faa <Set_Config+0xaa>
		s->config = (Data[1] << 8) | Data[2];
 8000f82:	7d7b      	ldrb	r3, [r7, #21]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	7dbb      	ldrb	r3, [r7, #22]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	809a      	strh	r2, [r3, #4]
		s->Configured = true;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	729a      	strb	r2, [r3, #10]
		s->State = DAC_STATE_OK;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	72da      	strb	r2, [r3, #11]
		s->Ready = true;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	731a      	strb	r2, [r3, #12]
 8000fa8:	e00c      	b.n	8000fc4 <Set_Config+0xc4>
	}else{
		s->State = DAC_STATE_INITFAILED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	72da      	strb	r2, [r3, #11]
		s->Ready = false;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	731a      	strb	r2, [r3, #12]
		s->Errors++;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	89db      	ldrh	r3, [r3, #14]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	81da      	strh	r2, [r3, #14]
	}
			

}
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	0800eb3c 	.word	0x0800eb3c
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000189 	.word	0x20000189
 8000fd8:	20000188 	.word	0x20000188
 8000fdc:	20000002 	.word	0x20000002

08000fe0 <Send_Command>:
//        The second byte is the MSB of the register
//        The third byte is the LSB of the register
//@param: spi: The spi handle to use
//@param: command: The command to send
//@return: none
void Send_Command(struct sDAC* s, uint8_t* Command){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f8aa 	bl	8001144 <Set_nCS_high>
	hal_status = HAL_SPI_Transmit(s->spi, Command, 3, 1);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	6839      	ldr	r1, [r7, #0]
 8000ffa:	f006 ffcc 	bl	8007f96 <HAL_SPI_Transmit>
 8000ffe:	4603      	mov	r3, r0
 8001000:	73fb      	strb	r3, [r7, #15]
	while (!(s->spi->Instance->SR & SPI_SR_TXE));
 8001002:	bf00      	nop
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f7      	beq.n	8001004 <Send_Command+0x24>
	Set_nCS_high(true);
 8001014:	2001      	movs	r0, #1
 8001016:	f000 f895 	bl	8001144 <Set_nCS_high>
	Delay_us(10);
 800101a:	200a      	movs	r0, #10
 800101c:	f000 fb42 	bl	80016a4 <Delay_us>
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Recieve_Data>:

//@brief: This function recieves data from the DAC and stores it in the data array
//@param: spi: The spi handle
//@param: Data: buffer to store the data in
//@return: None
void Recieve_Data(struct sDAC* s, uint8_t* Data){
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af02      	add	r7, sp, #8
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 8001032:	2000      	movs	r0, #0
 8001034:	f000 f886 	bl	8001144 <Set_nCS_high>
	hal_status = HAL_SPI_TransmitReceive(s->spi,NOP_Send, Data, 3, 100);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2303      	movs	r3, #3
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	490b      	ldr	r1, [pc, #44]	; (8001074 <Recieve_Data+0x4c>)
 8001046:	f007 f8e2 	bl	800820e <HAL_SPI_TransmitReceive>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
	while ((s->spi->Instance->SR & SPI_SR_RXNE));
 800104e:	bf00      	nop
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f7      	bne.n	8001050 <Recieve_Data+0x28>
	Set_nCS_high(true);
 8001060:	2001      	movs	r0, #1
 8001062:	f000 f86f 	bl	8001144 <Set_nCS_high>
	Delay_us(10);
 8001066:	200a      	movs	r0, #10
 8001068:	f000 fb1c 	bl	80016a4 <Delay_us>

}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000004 	.word	0x20000004

08001078 <Set_DAC_Value>:
//@brief: This function sets the value of the given dac
//@param: DAC_Num: The DAC number to set the offset of
//@param: val: The value to set the dac to
//@param spi: The spi handle to use
//@return: None
void Set_DAC_Value(struct sDAC* s, uint8_t DAC_Num, uint16_t val){
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
 8001084:	4613      	mov	r3, r2
 8001086:	803b      	strh	r3, [r7, #0]
	//Make sure DAC is between 0 and 7
	if(DAC_Num > 7){
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	2b07      	cmp	r3, #7
 800108c:	d819      	bhi.n	80010c2 <Set_DAC_Value+0x4a>
		return;
	}
	uint8_t DAC_REG = Set_DAC0+DAC_Num;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <Set_DAC_Value+0x54>)
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	4413      	add	r3, r2
 8001096:	73fb      	strb	r3, [r7, #15]
	//Set the DAC to the correct value by adding the DAC number to the Set_DAC0 command
	uint8_t tx_data[3] = {WRITE|DAC_REG, (val >> 8), (val & 0xFF)};
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <Set_DAC_Value+0x58>)
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	4313      	orrs	r3, r2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	733b      	strb	r3, [r7, #12]
 80010a4:	883b      	ldrh	r3, [r7, #0]
 80010a6:	0a1b      	lsrs	r3, r3, #8
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	737b      	strb	r3, [r7, #13]
 80010ae:	883b      	ldrh	r3, [r7, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff90 	bl	8000fe0 <Send_Command>
 80010c0:	e000      	b.n	80010c4 <Set_DAC_Value+0x4c>
		return;
 80010c2:	bf00      	nop
	
}
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000001 	.word	0x20000001
 80010d0:	20000188 	.word	0x20000188

080010d4 <Set_nLDAC_high>:
}

//@brief: This function sets the nLDAC pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nLDAC_high(bool HIGH){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <Set_nLDAC_high+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <Set_nLDAC_high+0x34>)
 80010ec:	f001 ffba 	bl	8003064 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
	}
}
 80010f0:	e005      	b.n	80010fe <Set_nLDAC_high+0x2a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <Set_nLDAC_high+0x34>)
 80010fa:	f001 ffb3 	bl	8003064 <HAL_GPIO_WritePin>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40020c00 	.word	0x40020c00

0800110c <Set_nRST_high>:
}

//@brief: This function sets the nRST pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nRST_high(bool HIGH){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <Set_nRST_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001122:	4807      	ldr	r0, [pc, #28]	; (8001140 <Set_nRST_high+0x34>)
 8001124:	f001 ff9e 	bl	8003064 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
	}

}
 8001128:	e005      	b.n	8001136 <Set_nRST_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <Set_nRST_high+0x34>)
 8001132:	f001 ff97 	bl	8003064 <HAL_GPIO_WritePin>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000

08001144 <Set_nCS_high>:
}

//@brief: This function sets the nCS pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nCS_high(bool HIGH){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <Set_nCS_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <Set_nCS_high+0x34>)
 800115c:	f001 ff82 	bl	8003064 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
	}

}
 8001160:	e005      	b.n	800116e <Set_nCS_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <Set_nCS_high+0x34>)
 800116a:	f001 ff7b 	bl	8003064 <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <Hardware_Reset>:
	return state;
}


//Reset the DAC Values using the nRST Pin
void Hardware_Reset(struct sDAC* s){
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	Set_nRST_high(false);
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff ffc1 	bl	800110c <Set_nRST_high>
	Delay_us(10);
 800118a:	200a      	movs	r0, #10
 800118c:	f000 fa8a 	bl	80016a4 <Delay_us>
	Set_nRST_high(true);
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff ffbb 	bl	800110c <Set_nRST_high>
	Delay_us(10);
 8001196:	200a      	movs	r0, #10
 8001198:	f000 fa84 	bl	80016a4 <Delay_us>
	s->State = DAC_STATE_UNKNOWN;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	72da      	strb	r2, [r3, #11]
	s->Ready= false;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	731a      	strb	r2, [r3, #12]
	s->Errors = 0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	81da      	strh	r2, [r3, #14]
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <Syncronous_Update>:


//Syncronous Update of LDAC using the nLDAC Pin NOTE: Only Needed if nLDAC is tied High
void Syncronous_Update(void){
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
	Set_nLDAC_high(false);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff ff8a 	bl	80010d4 <Set_nLDAC_high>
	Delay_us(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f000 fa6f 	bl	80016a4 <Delay_us>
	Set_nLDAC_high(true);
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff ff84 	bl	80010d4 <Set_nLDAC_high>
	Delay_us(10);
 80011cc:	200a      	movs	r0, #10
 80011ce:	f000 fa69 	bl	80016a4 <Delay_us>
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <Set_Max_Peak_To_Peak_Voltage>:


//@brief: This function calculates the max peak to peak voltage that can be achieved
void Set_Max_Peak_To_Peak_Voltage(struct sDAC* s, bool Gain){
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
	//The max Voltage is 11.2V so we need to scale the voltage to fit in 16 bits
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	if(Gain){
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00a      	beq.n	8001200 <Set_Max_Peak_To_Peak_Voltage+0x28>
		s->max_peak2peak = REFERENCE_VOLTAGE*4;
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80011f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	edc3 7a04 	vstr	s15, [r3, #16]
	}else
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
	return;
 80011fe:	e00a      	b.n	8001216 <Set_Max_Peak_To_Peak_Voltage+0x3e>
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800120a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	edc3 7a04 	vstr	s15, [r3, #16]
	return;
 8001214:	bf00      	nop
}
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	20000008 	.word	0x20000008

08001224 <Set_Voltage_Peak_to_Peak>:

//@brief: This function sets the upper and lower bounds of a DAC Channel
//@param: s: The DAC Channel to set the bounds of
//@param: voltage: The voltage to set the bounds to
void Set_Voltage_Peak_to_Peak(struct sDAC* sDAC, uint8_t Channel_Number, float* voltage){
 8001224:	b480      	push	{r7}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	460b      	mov	r3, r1
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	72fb      	strb	r3, [r7, #11]
	//The max Voltage Peak to Peak is 22.4V so we need to scale the voltage to fit in 16 bits
	//Find the upper and lower bounds of the voltage with Zero Bias
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	float percentage = (*voltage/(float)sDAC->max_peak2peak)/2;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	edd3 6a00 	vldr	s13, [r3]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	edd3 7a04 	vldr	s15, [r3, #16]
 800123e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001242:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	edc7 7a05 	vstr	s15, [r7, #20]
	sDAC->DAC_Channels[Channel_Number].upper_bound = 0xFFFF/2 + percentage*0xFFFF;
 800124e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001252:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80012b4 <Set_Voltage_Peak_to_Peak+0x90>
 8001256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80012b8 <Set_Voltage_Peak_to_Peak+0x94>
 800125e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001268:	ee17 2a90 	vmov	r2, s15
 800126c:	b291      	uxth	r1, r2
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	3302      	adds	r3, #2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4413      	add	r3, r2
 8001276:	460a      	mov	r2, r1
 8001278:	809a      	strh	r2, [r3, #4]
	sDAC->DAC_Channels[Channel_Number].lower_bound = 0xFFFF/2 - percentage*0xFFFF;
 800127a:	edd7 7a05 	vldr	s15, [r7, #20]
 800127e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80012b4 <Set_Voltage_Peak_to_Peak+0x90>
 8001282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001286:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80012b8 <Set_Voltage_Peak_to_Peak+0x94>
 800128a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128e:	7afb      	ldrb	r3, [r7, #11]
 8001290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001294:	ee17 2a90 	vmov	r2, s15
 8001298:	b291      	uxth	r1, r2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	3302      	adds	r3, #2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4413      	add	r3, r2
 80012a2:	460a      	mov	r2, r1
 80012a4:	80da      	strh	r2, [r3, #6]
	return;
 80012a6:	bf00      	nop

}
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	477fff00 	.word	0x477fff00
 80012b8:	46fffe00 	.word	0x46fffe00

080012bc <set_heater>:
#include "Heater_Controller.h"

void set_heater(bool Heater_On){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
    if(Heater_On){
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <set_heater+0x1c>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2120      	movs	r1, #32
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <set_heater+0x30>)
 80012d2:	f001 fec7 	bl	8003064 <HAL_GPIO_WritePin>
    }else{
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
    }
}
 80012d6:	e004      	b.n	80012e2 <set_heater+0x26>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2120      	movs	r1, #32
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <set_heater+0x30>)
 80012de:	f001 fec1 	bl	8003064 <HAL_GPIO_WritePin>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40020800 	.word	0x40020800

080012f0 <get_heater>:

bool get_heater(){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	/* read PC13 */
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5))
 80012f4:	2120      	movs	r1, #32
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <get_heater+0x1c>)
 80012f8:	f001 fe9c 	bl	8003034 <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <get_heater+0x16>
	{
	 return true;
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <get_heater+0x18>
	}else{
		return false;
 8001306:	2300      	movs	r3, #0
	}
}
 8001308:	4618      	mov	r0, r3
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40020800 	.word	0x40020800

08001310 <TMP117_InitStruct>:
//@param s Pointer to the structure to initialize
//@param interface Pointer to the I2C interface to use
//@param addpin Value of the address pin
//@return None
void TMP117_InitStruct(struct sTMP117* s, I2C_HandleTypeDef* interface, uint8_t addpin)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	4613      	mov	r3, r2
 800131c:	71fb      	strb	r3, [r7, #7]
   * 0x01 V+
   * 0x10 SDA
   * 0x11 SCL
   */
  uint8_t i;
  s->Address = 0b1001000 | addpin;
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8001324:	b2da      	uxtb	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	701a      	strb	r2, [r3, #0]
  s->Interface = interface;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	605a      	str	r2, [r3, #4]
  s->Average = -273;
 8001330:	68f9      	ldr	r1, [r7, #12]
 8001332:	a31f      	add	r3, pc, #124	; (adr r3, 80013b0 <TMP117_InitStruct+0xa0>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
  s->Configured = false;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
  s->SamplesInAverage = 16;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2210      	movs	r2, #16
 8001348:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
  s->Index = 0;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  s->State = TMP117_STATE_UNKNOWN;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  for (i=0;i<64;i++)
 800135c:	2300      	movs	r3, #0
 800135e:	75fb      	strb	r3, [r7, #23]
 8001360:	e00c      	b.n	800137c <TMP117_InitStruct+0x6c>
    s->Temperature[i] = -273;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	3301      	adds	r3, #1
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	18d1      	adds	r1, r2, r3
 800136c:	a310      	add	r3, pc, #64	; (adr r3, 80013b0 <TMP117_InitStruct+0xa0>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	e9c1 2300 	strd	r2, r3, [r1]
  for (i=0;i<64;i++)
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	3301      	adds	r3, #1
 800137a:	75fb      	strb	r3, [r7, #23]
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	2b3f      	cmp	r3, #63	; 0x3f
 8001380:	d9ef      	bls.n	8001362 <TMP117_InitStruct+0x52>
  s->LastTemperature = -273;
 8001382:	68f9      	ldr	r1, [r7, #12]
 8001384:	a30a      	add	r3, pc, #40	; (adr r3, 80013b0 <TMP117_InitStruct+0xa0>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Ready = false;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  s->Errors = 0;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2200      	movs	r2, #0
 800139a:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
}
 800139e:	bf00      	nop
 80013a0:	371c      	adds	r7, #28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	f3af 8000 	nop.w
 80013b0:	00000000 	.word	0x00000000
 80013b4:	c0711000 	.word	0xc0711000

080013b8 <TMP117_Configure>:

//@brief Configure the TMP117
//@param s Pointer to the structure to configure
//@return None
void TMP117_Configure(struct sTMP117* s)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af02      	add	r7, sp, #8
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef res;
  printf("Attempting to init... ");
 80013c0:	481c      	ldr	r0, [pc, #112]	; (8001434 <TMP117_Configure+0x7c>)
 80013c2:	f00c f9e3 	bl	800d78c <iprintf>
  uint8_t buffer[3] = {0};
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <TMP117_Configure+0x80>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	81bb      	strh	r3, [r7, #12]
 80013cc:	2300      	movs	r3, #0
 80013ce:	73bb      	strb	r3, [r7, #14]
  buffer[0] = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	733b      	strb	r3, [r7, #12]
  buffer[2] = 1 << 5;
 80013d4:	2320      	movs	r3, #32
 80013d6:	73bb      	strb	r3, [r7, #14]
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 3, 10); // 8 samples averaged
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6858      	ldr	r0, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	b299      	uxth	r1, r3
 80013e6:	f107 020c 	add.w	r2, r7, #12
 80013ea:	230a      	movs	r3, #10
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2303      	movs	r3, #3
 80013f0:	f001 ff96 	bl	8003320 <HAL_I2C_Master_Transmit>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]
  if (res == HAL_OK)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d107      	bne.n	800140e <TMP117_Configure+0x56>
  {
    s->Configured = true;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    printf("OK!\n");
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <TMP117_Configure+0x84>)
 8001408:	f00c fa46 	bl	800d898 <puts>
  {
    s->Errors++;
    s->State = TMP117_STATE_INITFAILED;
    printf("Failed!\n");
  }
}
 800140c:	e00e      	b.n	800142c <TMP117_Configure+0x74>
    s->Errors++;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001414:	3301      	adds	r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    s->State = TMP117_STATE_INITFAILED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    printf("Failed!\n");
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <TMP117_Configure+0x88>)
 8001428:	f00c fa36 	bl	800d898 <puts>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	0800eb64 	.word	0x0800eb64
 8001438:	0800eb88 	.word	0x0800eb88
 800143c:	0800eb7c 	.word	0x0800eb7c
 8001440:	0800eb80 	.word	0x0800eb80

08001444 <TMP117_GetTemperature>:

//@brief Get the temperature from the TMP117
//@param s Pointer to the structure to get the temperature from
//@return None
void TMP117_GetTemperature(struct sTMP117* s)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b08b      	sub	sp, #44	; 0x2c
 8001448:	af02      	add	r7, sp, #8
 800144a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t u;
  double t = 0;
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9c7 2306 	strd	r2, r3, [r7, #24]
  //setup an empty Buffer to request the temperature
  uint8_t buffer[2] = {0};
 8001458:	2300      	movs	r3, #0
 800145a:	81bb      	strh	r3, [r7, #12]
  uint16_t data = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef res;
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 1, 10); // request temperature
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6858      	ldr	r0, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	b299      	uxth	r1, r3
 800146e:	f107 020c 	add.w	r2, r7, #12
 8001472:	230a      	movs	r3, #10
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	f001 ff52 	bl	8003320 <HAL_I2C_Master_Transmit>
 800147c:	4603      	mov	r3, r0
 800147e:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 8001480:	7cfb      	ldrb	r3, [r7, #19]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d01a      	beq.n	80014bc <TMP117_GetTemperature+0x78>
  {
    s->State = TMP117_STATE_REQUESTNOACK;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2202      	movs	r2, #2
 800148a:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001494:	3301      	adds	r3, #1
 8001496:	b29a      	uxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    //If this temperature sensor gets more than 100 errors in a row, it's probably not connected
    if (s->Errors > 100)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80014a4:	2b64      	cmp	r3, #100	; 0x64
 80014a6:	f240 80b3 	bls.w	8001610 <TMP117_GetTemperature+0x1cc>
    {
      s->Configured = false;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 80014ba:	e0a9      	b.n	8001610 <TMP117_GetTemperature+0x1cc>
  }

  res = HAL_I2C_Master_Receive(s->Interface, (s->Address << 1), buffer, 2, 10); // receive temperature
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6858      	ldr	r0, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	b299      	uxth	r1, r3
 80014ca:	f107 020c 	add.w	r2, r7, #12
 80014ce:	230a      	movs	r3, #10
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2302      	movs	r3, #2
 80014d4:	f002 f822 	bl	800351c <HAL_I2C_Master_Receive>
 80014d8:	4603      	mov	r3, r0
 80014da:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 80014dc:	7cfb      	ldrb	r3, [r7, #19]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01a      	beq.n	8001518 <TMP117_GetTemperature+0xd4>
  {
    s->State = TMP117_STATE_RECEIVEFAIL;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2203      	movs	r2, #3
 80014e6:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80014f0:	3301      	adds	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    if (s->Errors > 100)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001500:	2b64      	cmp	r3, #100	; 0x64
 8001502:	f240 8087 	bls.w	8001614 <TMP117_GetTemperature+0x1d0>
    {
      s->Configured = false;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 8001516:	e07d      	b.n	8001614 <TMP117_GetTemperature+0x1d0>
  }

  
  s->State = TMP117_STATE_VALIDTEMP;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2204      	movs	r2, #4
 800151c:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  data = (buffer[0] << 8) | buffer[1];
 8001520:	7b3b      	ldrb	r3, [r7, #12]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	7b7b      	ldrb	r3, [r7, #13]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	b29b      	uxth	r3, r3
 8001530:	817b      	strh	r3, [r7, #10]
  u = *(&(data));
 8001532:	897b      	ldrh	r3, [r7, #10]
 8001534:	823b      	strh	r3, [r7, #16]
  //Conver the Temp as per documentation
  s->Temperature[s->Index] = ((double)u) * 0.0078125;
 8001536:	8a3b      	ldrh	r3, [r7, #16]
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ffeb 	bl	8000514 <__aeabi_ui2d>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001544:	461c      	mov	r4, r3
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800154e:	f7ff f85b 	bl	8000608 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	1c61      	adds	r1, r4, #1
 800155a:	00c9      	lsls	r1, r1, #3
 800155c:	4401      	add	r1, r0
 800155e:	e9c1 2300 	strd	r2, r3, [r1]
  s->LastTemperature = s->Temperature[s->Index];
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	3301      	adds	r3, #1
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4413      	add	r3, r2
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Index++;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001580:	3301      	adds	r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  //If we finally have enough Temperatures to average, set the Ready flag
  //if we have engough samples, set the flags
  if (s->Index >= s->SamplesInAverage)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 2211 	ldrb.w	r2, [r3, #529]	; 0x211
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001596:	429a      	cmp	r2, r3
 8001598:	d307      	bcc.n	80015aa <TMP117_GetTemperature+0x166>
  {
    s->Ready = true;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
    s->Index = 0;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  }
  
  //average the Temperatures
  if (s->Ready)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d030      	beq.n	8001616 <TMP117_GetTemperature+0x1d2>
  {
    for (int i=0;i<(s->SamplesInAverage); i++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e011      	b.n	80015de <TMP117_GetTemperature+0x19a>
    {
      t += s->Temperature[i];
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3301      	adds	r3, #1
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015cc:	f7fe fe66 	bl	800029c <__adddf3>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i=0;i<(s->SamplesInAverage); i++)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 80015e4:	461a      	mov	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	4293      	cmp	r3, r2
 80015ea:	dbe6      	blt.n	80015ba <TMP117_GetTemperature+0x176>
    }
    s->Average = t / s->SamplesInAverage;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff9e 	bl	8000534 <__aeabi_i2d>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001600:	f7ff f92c 	bl	800085c <__aeabi_ddiv>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
 800160e:	e002      	b.n	8001616 <TMP117_GetTemperature+0x1d2>
    return;
 8001610:	bf00      	nop
 8001612:	e000      	b.n	8001616 <TMP117_GetTemperature+0x1d2>
    return;
 8001614:	bf00      	nop
  }


}
 8001616:	3724      	adds	r7, #36	; 0x24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}

0800161c <FormatTemperature>:
  USBSendString(buffer);
//  HAL_Delay(1); // don't butcher our buffer before we're done with it
}

void FormatTemperature(char* buffer, double temp)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af02      	add	r7, sp, #8
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	ed87 0b00 	vstr	d0, [r7]
  if (temp > -100)
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <FormatTemperature+0x48>)
 800162e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001632:	f7ff fa79 	bl	8000b28 <__aeabi_dcmpgt>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d009      	beq.n	8001650 <FormatTemperature+0x34>
    snprintf(buffer, 10, "% 7.3fC", temp);
 800163c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001640:	e9cd 2300 	strd	r2, r3, [sp]
 8001644:	4a08      	ldr	r2, [pc, #32]	; (8001668 <FormatTemperature+0x4c>)
 8001646:	210a      	movs	r1, #10
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f00c f92d 	bl	800d8a8 <sniprintf>
  else
    snprintf(buffer, 10, "  error ");
}
 800164e:	e004      	b.n	800165a <FormatTemperature+0x3e>
    snprintf(buffer, 10, "  error ");
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <FormatTemperature+0x50>)
 8001652:	210a      	movs	r1, #10
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f00c f927 	bl	800d8a8 <sniprintf>
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	c0590000 	.word	0xc0590000
 8001668:	0800f6e0 	.word	0x0800f6e0
 800166c:	0800f6e8 	.word	0x0800f6e8

08001670 <InitDWTTimer>:
    HAL_Delay(1);
  }
}

void InitDWTTimer(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <InitDWTTimer+0x2c>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	4a08      	ldr	r2, [pc, #32]	; (800169c <InitDWTTimer+0x2c>)
 800167a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800167e:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <InitDWTTimer+0x30>)
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk ; // enable the counter
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <InitDWTTimer+0x30>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <InitDWTTimer+0x30>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000edf0 	.word	0xe000edf0
 80016a0:	e0001000 	.word	0xe0001000

080016a4 <Delay_us>:

void Delay_us(uint32_t us)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <Delay_us+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <Delay_us+0x44>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0c9b      	lsrs	r3, r3, #18
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	60fb      	str	r3, [r7, #12]
  volatile uint32_t start = DWT->CYCCNT;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <Delay_us+0x48>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	60bb      	str	r3, [r7, #8]
  do  {
  } while((DWT->CYCCNT - start) < cycles);
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <Delay_us+0x48>)
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad2      	subs	r2, r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d3f8      	bcc.n	80016c6 <Delay_us+0x22>
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	2000000c 	.word	0x2000000c
 80016e8:	431bde83 	.word	0x431bde83
 80016ec:	e0001000 	.word	0xe0001000

080016f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001708:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800170c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001710:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00b      	beq.n	8001730 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001718:	e000      	b.n	800171c <ITM_SendChar+0x2c>
    {
      __NOP();
 800171a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800171c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f9      	beq.n	800171a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001726:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This Intterupot is called every .25ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a28      	ldr	r2, [pc, #160]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0xac>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d149      	bne.n	80017e4 <HAL_TIM_PeriodElapsedCallback+0xa4>
  {
    for (int i = 0; i < 6; i++){
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	e041      	b.n	80017da <HAL_TIM_PeriodElapsedCallback+0x9a>
      if(DAC8718.DAC_Channels[i].enabled){
 8001756:	4a26      	ldr	r2, [pc, #152]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3302      	adds	r3, #2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	7a9b      	ldrb	r3, [r3, #10]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d036      	beq.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x94>
        if(DAC8718.DAC_Channels[i].state_high){
 8001766:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3302      	adds	r3, #2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4413      	add	r3, r2
 8001770:	7a5b      	ldrb	r3, [r3, #9]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d017      	beq.n	80017a6 <HAL_TIM_PeriodElapsedCallback+0x66>
          Set_DAC_Value(&DAC8718, DAC8718.DAC_Channels[i].DAC_number, DAC8718.DAC_Channels[i].lower_bound);
 8001776:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3302      	adds	r3, #2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	7a19      	ldrb	r1, [r3, #8]
 8001782:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3302      	adds	r3, #2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4413      	add	r3, r2
 800178c:	88db      	ldrh	r3, [r3, #6]
 800178e:	461a      	mov	r2, r3
 8001790:	4817      	ldr	r0, [pc, #92]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001792:	f7ff fc71 	bl	8001078 <Set_DAC_Value>
          DAC8718.DAC_Channels[i].state_high = false;
 8001796:	4a16      	ldr	r2, [pc, #88]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3302      	adds	r3, #2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4413      	add	r3, r2
 80017a0:	2200      	movs	r2, #0
 80017a2:	725a      	strb	r2, [r3, #9]
 80017a4:	e016      	b.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x94>
        }else{
          Set_DAC_Value(&DAC8718, DAC8718.DAC_Channels[i].DAC_number, DAC8718.DAC_Channels[i].upper_bound);
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3302      	adds	r3, #2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	7a19      	ldrb	r1, [r3, #8]
 80017b2:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3302      	adds	r3, #2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4413      	add	r3, r2
 80017bc:	889b      	ldrh	r3, [r3, #4]
 80017be:	461a      	mov	r2, r3
 80017c0:	480b      	ldr	r0, [pc, #44]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80017c2:	f7ff fc59 	bl	8001078 <Set_DAC_Value>
          DAC8718.DAC_Channels[i].state_high = true;
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3302      	adds	r3, #2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4413      	add	r3, r2
 80017d0:	2201      	movs	r2, #1
 80017d2:	725a      	strb	r2, [r3, #9]
    for (int i = 0; i < 6; i++){
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3301      	adds	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	ddba      	ble.n	8001756 <HAL_TIM_PeriodElapsedCallback+0x16>
        }
      }
    

    }
    Syncronous_Update();
 80017e0:	f7ff fce9 	bl	80011b6 <Syncronous_Update>

  }


}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000358 	.word	0x20000358
 80017f0:	2000018c 	.word	0x2000018c
 80017f4:	00000000 	.word	0x00000000

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for (int i = 0; i < 6; i++){
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8001806:	e028      	b.n	800185a <main+0x62>
		DAC8718.DAC_Channels[i].DAC_number = i;
 8001808:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800180c:	b2d9      	uxtb	r1, r3
 800180e:	4a82      	ldr	r2, [pc, #520]	; (8001a18 <main+0x220>)
 8001810:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8001814:	3302      	adds	r3, #2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	460a      	mov	r2, r1
 800181c:	721a      	strb	r2, [r3, #8]
		DAC8718.DAC_Channels[i].upper_bound = 0xFFFF;
 800181e:	4a7e      	ldr	r2, [pc, #504]	; (8001a18 <main+0x220>)
 8001820:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8001824:	3302      	adds	r3, #2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4413      	add	r3, r2
 800182a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182e:	809a      	strh	r2, [r3, #4]
		DAC8718.DAC_Channels[i].lower_bound = 0x0000;
 8001830:	4a79      	ldr	r2, [pc, #484]	; (8001a18 <main+0x220>)
 8001832:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8001836:	3302      	adds	r3, #2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4413      	add	r3, r2
 800183c:	2200      	movs	r2, #0
 800183e:	80da      	strh	r2, [r3, #6]
		DAC8718.DAC_Channels[i].enabled = true;
 8001840:	4a75      	ldr	r2, [pc, #468]	; (8001a18 <main+0x220>)
 8001842:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8001846:	3302      	adds	r3, #2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	2201      	movs	r2, #1
 800184e:	729a      	strb	r2, [r3, #10]
	for (int i = 0; i < 6; i++){
 8001850:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8001854:	3301      	adds	r3, #1
 8001856:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800185a:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800185e:	2b05      	cmp	r3, #5
 8001860:	ddd2      	ble.n	8001808 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001862:	f000 fdf1 	bl	8002448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001866:	f000 f8e3 	bl	8001a30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  InitDWTTimer(); // we need this for delay_us
 800186a:	f7ff ff01 	bl	8001670 <InitDWTTimer>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186e:	f000 fa5d 	bl	8001d2c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001872:	f000 f947 	bl	8001b04 <MX_ADC1_Init>
  MX_SPI4_Init();
 8001876:	f000 f9d7 	bl	8001c28 <MX_SPI4_Init>
  MX_I2C1_Init();
 800187a:	f000 f995 	bl	8001ba8 <MX_I2C1_Init>
  MX_TIM2_Init();
 800187e:	f000 fa09 	bl	8001c94 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001882:	f00b fa0f 	bl	800cca4 <MX_USB_DEVICE_Init>
  //MX_SDIO_SD_Init();
  /* USER CODE BEGIN 2 */
  DAC8718.spi = &hspi4;
 8001886:	4b64      	ldr	r3, [pc, #400]	; (8001a18 <main+0x220>)
 8001888:	4a64      	ldr	r2, [pc, #400]	; (8001a1c <main+0x224>)
 800188a:	601a      	str	r2, [r3, #0]
  DAC_Initialize(&DAC8718);
 800188c:	4862      	ldr	r0, [pc, #392]	; (8001a18 <main+0x220>)
 800188e:	f7ff fb27 	bl	8000ee0 <DAC_Initialize>
 // HAL_TIM_Base_Start_IT(&htim2);
  struct sTMP117 Temp1;
  struct sTMP117 Temp2;
  TMP117_InitStruct(&Temp1, &hi2c1, 0x00);
 8001892:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001896:	2200      	movs	r2, #0
 8001898:	4961      	ldr	r1, [pc, #388]	; (8001a20 <main+0x228>)
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fd38 	bl	8001310 <TMP117_InitStruct>
  TMP117_Configure(&Temp1);
 80018a0:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fd87 	bl	80013b8 <TMP117_Configure>
  TMP117_GetTemperature(&Temp1);
 80018aa:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fdc8 	bl	8001444 <TMP117_GetTemperature>
  //USB not working
  printf("Hello");
 80018b4:	485b      	ldr	r0, [pc, #364]	; (8001a24 <main+0x22c>)
 80018b6:	f00b ff69 	bl	800d78c <iprintf>
  //Print The Temperature
  char temp[12];
  //Format Not working
  FormatTemperature(temp, Temp1.LastTemperature);
 80018ba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80018be:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80018c2:	ed93 7b86 	vldr	d7, [r3, #536]	; 0x218
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	eeb0 0a47 	vmov.f32	s0, s14
 80018ce:	eef0 0a67 	vmov.f32	s1, s15
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fea2 	bl	800161c <FormatTemperature>
  printf("Current Temp1 is %8s",temp);
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	4852      	ldr	r0, [pc, #328]	; (8001a28 <main+0x230>)
 80018e0:	f00b ff54 	bl	800d78c <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float voltage = 0;
 80018e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80018e8:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
  float voltage2 = 0;
 80018f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80018f6:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello\r\n");
 8001900:	484a      	ldr	r0, [pc, #296]	; (8001a2c <main+0x234>)
 8001902:	f00b ffc9 	bl	800d898 <puts>
	  printf("Current Temp1 is %8s",temp);
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	4619      	mov	r1, r3
 800190c:	4846      	ldr	r0, [pc, #280]	; (8001a28 <main+0x230>)
 800190e:	f00b ff3d 	bl	800d78c <iprintf>
	  for (voltage = 0; voltage < DAC8718.max_peak2peak; voltage += 0.1){
 8001912:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8001916:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e055      	b.n	80019ce <main+0x1d6>
		  for(uint8_t j = 0; j < 3; j++){
 8001922:	2300      	movs	r3, #0
 8001924:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
 8001928:	e00c      	b.n	8001944 <main+0x14c>
			  Set_Voltage_Peak_to_Peak(&DAC8718, j, &voltage);
 800192a:	f107 0208 	add.w	r2, r7, #8
 800192e:	f897 346b 	ldrb.w	r3, [r7, #1131]	; 0x46b
 8001932:	4619      	mov	r1, r3
 8001934:	4838      	ldr	r0, [pc, #224]	; (8001a18 <main+0x220>)
 8001936:	f7ff fc75 	bl	8001224 <Set_Voltage_Peak_to_Peak>
		  for(uint8_t j = 0; j < 3; j++){
 800193a:	f897 346b 	ldrb.w	r3, [r7, #1131]	; 0x46b
 800193e:	3301      	adds	r3, #1
 8001940:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
 8001944:	f897 346b 	ldrb.w	r3, [r7, #1131]	; 0x46b
 8001948:	2b02      	cmp	r3, #2
 800194a:	d9ee      	bls.n	800192a <main+0x132>
		  }
		  voltage2 = DAC8718.max_peak2peak - voltage;
 800194c:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <main+0x220>)
 800194e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001952:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8001956:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001962:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8001966:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800196a:	edc3 7a00 	vstr	s15, [r3]
		  for(uint8_t j = 3; j < 6; j++){
 800196e:	2303      	movs	r3, #3
 8001970:	f887 346a 	strb.w	r3, [r7, #1130]	; 0x46a
 8001974:	e00b      	b.n	800198e <main+0x196>
			  Set_Voltage_Peak_to_Peak(&DAC8718, j, &voltage2);
 8001976:	1d3a      	adds	r2, r7, #4
 8001978:	f897 346a 	ldrb.w	r3, [r7, #1130]	; 0x46a
 800197c:	4619      	mov	r1, r3
 800197e:	4826      	ldr	r0, [pc, #152]	; (8001a18 <main+0x220>)
 8001980:	f7ff fc50 	bl	8001224 <Set_Voltage_Peak_to_Peak>
		  for(uint8_t j = 3; j < 6; j++){
 8001984:	f897 346a 	ldrb.w	r3, [r7, #1130]	; 0x46a
 8001988:	3301      	adds	r3, #1
 800198a:	f887 346a 	strb.w	r3, [r7, #1130]	; 0x46a
 800198e:	f897 346a 	ldrb.w	r3, [r7, #1130]	; 0x46a
 8001992:	2b05      	cmp	r3, #5
 8001994:	d9ef      	bls.n	8001976 <main+0x17e>
		  }
		  HAL_Delay(100);
 8001996:	2064      	movs	r0, #100	; 0x64
 8001998:	f000 fdc8 	bl	800252c <HAL_Delay>
	  for (voltage = 0; voltage < DAC8718.max_peak2peak; voltage += 0.1){
 800199c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80019a0:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdd6 	bl	8000558 <__aeabi_f2d>
 80019ac:	a318      	add	r3, pc, #96	; (adr r3, 8001a10 <main+0x218>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe fc73 	bl	800029c <__adddf3>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f8bd 	bl	8000b3c <__aeabi_d2f>
 80019c2:	4602      	mov	r2, r0
 80019c4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80019c8:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <main+0x220>)
 80019d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80019d4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80019d8:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e8:	dc9b      	bgt.n	8001922 <main+0x12a>
	  }
    //Set the heater to the opposite state its currently in
    set_heater(!get_heater());
 80019ea:	f7ff fc81 	bl	80012f0 <get_heater>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f083 0301 	eor.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fc58 	bl	80012bc <set_heater>
	  printf("Hello\r\n");
 8001a0c:	e778      	b.n	8001900 <main+0x108>
 8001a0e:	bf00      	nop
 8001a10:	9999999a 	.word	0x9999999a
 8001a14:	3fb99999 	.word	0x3fb99999
 8001a18:	2000018c 	.word	0x2000018c
 8001a1c:	20000300 	.word	0x20000300
 8001a20:	20000228 	.word	0x20000228
 8001a24:	0800f6f4 	.word	0x0800f6f4
 8001a28:	0800f6fc 	.word	0x0800f6fc
 8001a2c:	0800f714 	.word	0x0800f714

08001a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b094      	sub	sp, #80	; 0x50
 8001a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a36:	f107 0320 	add.w	r3, r7, #32
 8001a3a:	2230      	movs	r2, #48	; 0x30
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f00b fe9c 	bl	800d77c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	4b28      	ldr	r3, [pc, #160]	; (8001afc <SystemClock_Config+0xcc>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	4a27      	ldr	r2, [pc, #156]	; (8001afc <SystemClock_Config+0xcc>)
 8001a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a62:	6413      	str	r3, [r2, #64]	; 0x40
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <SystemClock_Config+0xcc>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <SystemClock_Config+0xd0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <SystemClock_Config+0xd0>)
 8001a7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <SystemClock_Config+0xd0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a96:	2302      	movs	r3, #2
 8001a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001aa4:	23a8      	movs	r3, #168	; 0xa8
 8001aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001aac:	2307      	movs	r3, #7
 8001aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab0:	f107 0320 	add.w	r3, r7, #32
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f005 fa57 	bl	8006f68 <HAL_RCC_OscConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ac0:	f000 fa58 	bl	8001f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ad0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ad4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001ad6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ada:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f005 fcb8 	bl	8007458 <HAL_RCC_ClockConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001aee:	f000 fa41 	bl	8001f74 <Error_Handler>
  }
}
 8001af2:	bf00      	nop
 8001af4:	3750      	adds	r7, #80	; 0x50
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000

08001b04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b18:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <MX_ADC1_Init+0x9c>)
 8001b1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b44:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <MX_ADC1_Init+0xa0>)
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b64:	f000 fd06 	bl	8002574 <HAL_ADC_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b6e:	f000 fa01 	bl	8001f74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001b72:	230e      	movs	r3, #14
 8001b74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b7e:	463b      	mov	r3, r7
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <MX_ADC1_Init+0x98>)
 8001b84:	f000 fd3a 	bl	80025fc <HAL_ADC_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b8e:	f000 f9f1 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200001e0 	.word	0x200001e0
 8001ba0:	40012000 	.word	0x40012000
 8001ba4:	0f000001 	.word	0x0f000001

08001ba8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <MX_I2C1_Init+0x74>)
 8001bae:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <MX_I2C1_Init+0x78>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <MX_I2C1_Init+0x74>)
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <MX_I2C1_Init+0x7c>)
 8001bb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <MX_I2C1_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <MX_I2C1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <MX_I2C1_Init+0x74>)
 8001bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <MX_I2C1_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <MX_I2C1_Init+0x74>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <MX_I2C1_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <MX_I2C1_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <MX_I2C1_Init+0x74>)
 8001be6:	f001 fa57 	bl	8003098 <HAL_I2C_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bf0:	f000 f9c0 	bl	8001f74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4809      	ldr	r0, [pc, #36]	; (8001c1c <MX_I2C1_Init+0x74>)
 8001bf8:	f003 febe 	bl	8005978 <HAL_I2CEx_ConfigAnalogFilter>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001c02:	f000 f9b7 	bl	8001f74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c06:	2100      	movs	r1, #0
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <MX_I2C1_Init+0x74>)
 8001c0a:	f003 fef1 	bl	80059f0 <HAL_I2CEx_ConfigDigitalFilter>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001c14:	f000 f9ae 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000228 	.word	0x20000228
 8001c20:	40005400 	.word	0x40005400
 8001c24:	000186a0 	.word	0x000186a0

08001c28 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c2e:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <MX_SPI4_Init+0x68>)
 8001c30:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c38:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c58:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c74:	220a      	movs	r2, #10
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001c78:	4804      	ldr	r0, [pc, #16]	; (8001c8c <MX_SPI4_Init+0x64>)
 8001c7a:	f006 f903 	bl	8007e84 <HAL_SPI_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001c84:	f000 f976 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000300 	.word	0x20000300
 8001c90:	40013400 	.word	0x40013400

08001c94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca8:	463b      	mov	r3, r7
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <MX_TIM2_Init+0x94>)
 8001cb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <MX_TIM2_Init+0x94>)
 8001cba:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001cbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <MX_TIM2_Init+0x94>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_TIM2_Init+0x94>)
 8001cc8:	2232      	movs	r2, #50	; 0x32
 8001cca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <MX_TIM2_Init+0x94>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <MX_TIM2_Init+0x94>)
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cd8:	4813      	ldr	r0, [pc, #76]	; (8001d28 <MX_TIM2_Init+0x94>)
 8001cda:	f006 fe23 	bl	8008924 <HAL_TIM_Base_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ce4:	f000 f946 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480c      	ldr	r0, [pc, #48]	; (8001d28 <MX_TIM2_Init+0x94>)
 8001cf6:	f006 ff6c 	bl	8008bd2 <HAL_TIM_ConfigClockSource>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d00:	f000 f938 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_TIM2_Init+0x94>)
 8001d12:	f007 f987 	bl	8009024 <HAL_TIMEx_MasterConfigSynchronization>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d1c:	f000 f92a 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000358 	.word	0x20000358

08001d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	; 0x30
 8001d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	4b6d      	ldr	r3, [pc, #436]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a6c      	ldr	r2, [pc, #432]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001d4c:	f043 0310 	orr.w	r3, r3, #16
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b6a      	ldr	r3, [pc, #424]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	4b66      	ldr	r3, [pc, #408]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a65      	ldr	r2, [pc, #404]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b63      	ldr	r3, [pc, #396]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	4b5f      	ldr	r3, [pc, #380]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a5e      	ldr	r2, [pc, #376]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b58      	ldr	r3, [pc, #352]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a57      	ldr	r2, [pc, #348]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b55      	ldr	r3, [pc, #340]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	4b51      	ldr	r3, [pc, #324]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a50      	ldr	r2, [pc, #320]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001dbc:	f043 0308 	orr.w	r3, r3, #8
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b4e      	ldr	r3, [pc, #312]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a49      	ldr	r2, [pc, #292]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <MX_GPIO_Init+0x1d0>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|nWakeUp_Pin, GPIO_PIN_RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001df0:	4843      	ldr	r0, [pc, #268]	; (8001f00 <MX_GPIO_Init+0x1d4>)
 8001df2:	f001 f937 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2120      	movs	r1, #32
 8001dfa:	4842      	ldr	r0, [pc, #264]	; (8001f04 <MX_GPIO_Init+0x1d8>)
 8001dfc:	f001 f932 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, nRst_Pin|nClr_Pin|nCS_Pin, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
 8001e02:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8001e06:	483e      	ldr	r0, [pc, #248]	; (8001f00 <MX_GPIO_Init+0x1d4>)
 8001e08:	f001 f92c 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLDAC_GPIO_Port, nLDAC_Pin, GPIO_PIN_SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e12:	483d      	ldr	r0, [pc, #244]	; (8001f08 <MX_GPIO_Init+0x1dc>)
 8001e14:	f001 f926 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	483a      	ldr	r0, [pc, #232]	; (8001f08 <MX_GPIO_Init+0x1dc>)
 8001e1e:	f001 f921 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e22:	2308      	movs	r3, #8
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	4831      	ldr	r0, [pc, #196]	; (8001f00 <MX_GPIO_Init+0x1d4>)
 8001e3a:	f000 ff4f 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e4e:	2308      	movs	r3, #8
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	4619      	mov	r1, r3
 8001e58:	482c      	ldr	r0, [pc, #176]	; (8001f0c <MX_GPIO_Init+0x1e0>)
 8001e5a:	f000 ff3f 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e5e:	23f0      	movs	r3, #240	; 0xf0
 8001e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e6e:	2305      	movs	r3, #5
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	4619      	mov	r1, r3
 8001e78:	4824      	ldr	r0, [pc, #144]	; (8001f0c <MX_GPIO_Init+0x1e0>)
 8001e7a:	f000 ff2f 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Pin */
  GPIO_InitStruct.Pin = Heater_Pin;
 8001e7e:	2320      	movs	r3, #32
 8001e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Heater_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	481b      	ldr	r0, [pc, #108]	; (8001f04 <MX_GPIO_Init+0x1d8>)
 8001e96:	f000 ff21 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : nWakeUp_Pin nRst_Pin nClr_Pin nCS_Pin */
  GPIO_InitStruct.Pin = nWakeUp_Pin|nRst_Pin|nClr_Pin|nCS_Pin;
 8001e9a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4813      	ldr	r0, [pc, #76]	; (8001f00 <MX_GPIO_Init+0x1d4>)
 8001eb4:	f000 ff12 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : nLDAC_Pin */
  GPIO_InitStruct.Pin = nLDAC_Pin;
 8001eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nLDAC_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <MX_GPIO_Init+0x1dc>)
 8001ed2:	f000 ff03 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	4806      	ldr	r0, [pc, #24]	; (8001f08 <MX_GPIO_Init+0x1dc>)
 8001eee:	f000 fef5 	bl	8002cdc <HAL_GPIO_Init>

}
 8001ef2:	bf00      	nop
 8001ef4:	3730      	adds	r7, #48	; 0x30
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020c00 	.word	0x40020c00
 8001f0c:	40020000 	.word	0x40020000

08001f10 <_write>:

/* This allows printf to write to the debugger and USB */
/* USB needs #include "usbd_cdc_if.h" */
/* ITM Stimulus port 0 must be enabled in your trace settings */
int _write(int file, char *ptr, int len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  int i, res;

  for (i=0;i<20; i++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	e00d      	b.n	8001f3e <_write+0x2e>
  {
    res = CDC_Transmit_FS((uint8_t*) ptr, len);  // USB out
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4619      	mov	r1, r3
 8001f28:	68b8      	ldr	r0, [r7, #8]
 8001f2a:	f00a ff79 	bl	800ce20 <CDC_Transmit_FS>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	617b      	str	r3, [r7, #20]
    if (res == USBD_OK)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <_write+0x36>
  for (i=0;i<20; i++)
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b13      	cmp	r3, #19
 8001f42:	ddee      	ble.n	8001f22 <_write+0x12>
 8001f44:	e000      	b.n	8001f48 <_write+0x38>
      break;
 8001f46:	bf00      	nop
  }

  for (int i = 0; i < len; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e009      	b.n	8001f62 <_write+0x52>
    ITM_SendChar((*ptr++));              // debugger out
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	60ba      	str	r2, [r7, #8]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fbca 	bl	80016f0 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	dbf1      	blt.n	8001f4e <_write+0x3e>
  return len;
 8001f6a:	687b      	ldr	r3, [r7, #4]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
}
 8001f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <Error_Handler+0x8>
	...

08001f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_MspInit+0x4c>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <HAL_MspInit+0x4c>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f94:	6453      	str	r3, [r2, #68]	; 0x44
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_MspInit+0x4c>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_MspInit+0x4c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <HAL_MspInit+0x4c>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_MspInit+0x4c>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a17      	ldr	r2, [pc, #92]	; (800204c <HAL_ADC_MspInit+0x7c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d127      	bne.n	8002042 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_ADC_MspInit+0x80>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <HAL_ADC_MspInit+0x80>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_ADC_MspInit+0x80>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_ADC_MspInit+0x80>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_ADC_MspInit+0x80>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_ADC_MspInit+0x80>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800202a:	2310      	movs	r3, #16
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202e:	2303      	movs	r3, #3
 8002030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	; (8002054 <HAL_ADC_MspInit+0x84>)
 800203e:	f000 fe4d 	bl	8002cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	; 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40012000 	.word	0x40012000
 8002050:	40023800 	.word	0x40023800
 8002054:	40020800 	.word	0x40020800

08002058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a21      	ldr	r2, [pc, #132]	; (80020fc <HAL_I2C_MspInit+0xa4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d13b      	bne.n	80020f2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002096:	23c0      	movs	r3, #192	; 0xc0
 8002098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800209a:	2312      	movs	r3, #18
 800209c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020a6:	2304      	movs	r3, #4
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	4814      	ldr	r0, [pc, #80]	; (8002104 <HAL_I2C_MspInit+0xac>)
 80020b2:	f000 fe13 	bl	8002cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 80020c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	201f      	movs	r0, #31
 80020d8:	f000 fd99 	bl	8002c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020dc:	201f      	movs	r0, #31
 80020de:	f000 fdb2 	bl	8002c46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	2020      	movs	r0, #32
 80020e8:	f000 fd91 	bl	8002c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80020ec:	2020      	movs	r0, #32
 80020ee:	f000 fdaa 	bl	8002c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	; 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40005400 	.word	0x40005400
 8002100:	40023800 	.word	0x40023800
 8002104:	40020400 	.word	0x40020400

08002108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1d      	ldr	r2, [pc, #116]	; (800219c <HAL_SPI_MspInit+0x94>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d134      	bne.n	8002194 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_SPI_MspInit+0x98>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_SPI_MspInit+0x98>)
 8002134:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_SPI_MspInit+0x98>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_SPI_MspInit+0x98>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_SPI_MspInit+0x98>)
 8002150:	f043 0310 	orr.w	r3, r3, #16
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_SPI_MspInit+0x98>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002162:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002174:	2305      	movs	r3, #5
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	4809      	ldr	r0, [pc, #36]	; (80021a4 <HAL_SPI_MspInit+0x9c>)
 8002180:	f000 fdac 	bl	8002cdc <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2054      	movs	r0, #84	; 0x54
 800218a:	f000 fd40 	bl	8002c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800218e:	2054      	movs	r0, #84	; 0x54
 8002190:	f000 fd59 	bl	8002c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002194:	bf00      	nop
 8002196:	3728      	adds	r7, #40	; 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40013400 	.word	0x40013400
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40021000 	.word	0x40021000

080021a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b8:	d115      	bne.n	80021e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_TIM_Base_MspInit+0x48>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <HAL_TIM_Base_MspInit+0x48>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_TIM_Base_MspInit+0x48>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	201c      	movs	r0, #28
 80021dc:	f000 fd17 	bl	8002c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021e0:	201c      	movs	r0, #28
 80021e2:	f000 fd30 	bl	8002c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <NMI_Handler+0x4>

080021fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <HardFault_Handler+0x4>

08002200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <MemManage_Handler+0x4>

08002206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <BusFault_Handler+0x4>

0800220c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <UsageFault_Handler+0x4>

08002212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002240:	f000 f954 	bl	80024ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}

08002248 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <TIM2_IRQHandler+0x10>)
 800224e:	f006 fbb8 	bl	80089c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000358 	.word	0x20000358

0800225c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <I2C1_EV_IRQHandler+0x10>)
 8002262:	f001 fb81 	bl	8003968 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000228 	.word	0x20000228

08002270 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <I2C1_ER_IRQHandler+0x10>)
 8002276:	f001 fce8 	bl	8003c4a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000228 	.word	0x20000228

08002284 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <SDIO_IRQHandler+0x10>)
 800228a:	f005 faf1 	bl	8007870 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000027c 	.word	0x2000027c

08002298 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <OTG_FS_IRQHandler+0x10>)
 800229e:	f003 fd36 	bl	8005d0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20001888 	.word	0x20001888

080022ac <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <SPI4_IRQHandler+0x10>)
 80022b2:	f006 f94f 	bl	8008554 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000300 	.word	0x20000300

080022c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e00a      	b.n	80022e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022d2:	f3af 8000 	nop.w
 80022d6:	4601      	mov	r1, r0
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	b2ca      	uxtb	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dbf0      	blt.n	80022d2 <_read+0x12>
	}

return len;
 80022f0:	687b      	ldr	r3, [r7, #4]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
	return -1;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002322:	605a      	str	r2, [r3, #4]
	return 0;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <_isatty>:

int _isatty(int file)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	return 1;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
	return 0;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <_sbrk+0x5c>)
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <_sbrk+0x60>)
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <_sbrk+0x64>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <_sbrk+0x68>)
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	d207      	bcs.n	80023a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002394:	f00b f9a0 	bl	800d6d8 <__errno>
 8002398:	4603      	mov	r3, r0
 800239a:	220c      	movs	r2, #12
 800239c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	e009      	b.n	80023b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <_sbrk+0x64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <_sbrk+0x64>)
 80023b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20030000 	.word	0x20030000
 80023c4:	00000400 	.word	0x00000400
 80023c8:	200003a0 	.word	0x200003a0
 80023cc:	20001fc8 	.word	0x20001fc8

080023d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <SystemInit+0x20>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <SystemInit+0x20>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800242c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023fa:	490e      	ldr	r1, [pc, #56]	; (8002434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002410:	4c0b      	ldr	r4, [pc, #44]	; (8002440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800241e:	f7ff ffd7 	bl	80023d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002422:	f00b f95f 	bl	800d6e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002426:	f7ff f9e7 	bl	80017f8 <main>
  bx  lr    
 800242a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800242c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8002438:	0800f824 	.word	0x0800f824
  ldr r2, =_sbss
 800243c:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8002440:	20001fc4 	.word	0x20001fc4

08002444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC_IRQHandler>
	...

08002448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_Init+0x40>)
 8002452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_Init+0x40>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_Init+0x40>)
 800245e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_Init+0x40>)
 800246a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f000 fbc1 	bl	8002bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002476:	200f      	movs	r0, #15
 8002478:	f000 f808 	bl	800248c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800247c:	f7ff fd80 	bl	8001f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023c00 	.word	0x40023c00

0800248c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_InitTick+0x54>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x58>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fbd9 	bl	8002c62 <HAL_SYSTICK_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00e      	b.n	80024d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d80a      	bhi.n	80024d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f000 fba1 	bl	8002c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_InitTick+0x5c>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	2000000c 	.word	0x2000000c
 80024e4:	20000014 	.word	0x20000014
 80024e8:	20000010 	.word	0x20000010

080024ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_IncTick+0x20>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x24>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_IncTick+0x24>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000014 	.word	0x20000014
 8002510:	200003a4 	.word	0x200003a4

08002514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_GetTick+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	200003a4 	.word	0x200003a4

0800252c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff ffee 	bl	8002514 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d005      	beq.n	8002552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_Delay+0x44>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002552:	bf00      	nop
 8002554:	f7ff ffde 	bl	8002514 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	d8f7      	bhi.n	8002554 <HAL_Delay+0x28>
  {
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000014 	.word	0x20000014

08002574 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e033      	b.n	80025f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff fd1c 	bl	8001fd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d118      	bne.n	80025e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025ba:	f023 0302 	bic.w	r3, r3, #2
 80025be:	f043 0202 	orr.w	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f94a 	bl	8002860 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
 80025e2:	e001      	b.n	80025e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x1c>
 8002614:	2302      	movs	r3, #2
 8002616:	e113      	b.n	8002840 <HAL_ADC_ConfigChannel+0x244>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b09      	cmp	r3, #9
 8002626:	d925      	bls.n	8002674 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68d9      	ldr	r1, [r3, #12]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	3b1e      	subs	r3, #30
 800263e:	2207      	movs	r2, #7
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43da      	mvns	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	400a      	ands	r2, r1
 800264c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68d9      	ldr	r1, [r3, #12]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	4618      	mov	r0, r3
 8002660:	4603      	mov	r3, r0
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4403      	add	r3, r0
 8002666:	3b1e      	subs	r3, #30
 8002668:	409a      	lsls	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	e022      	b.n	80026ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6919      	ldr	r1, [r3, #16]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	2207      	movs	r2, #7
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	400a      	ands	r2, r1
 8002696:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6919      	ldr	r1, [r3, #16]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4403      	add	r3, r0
 80026b0:	409a      	lsls	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d824      	bhi.n	800270c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	3b05      	subs	r3, #5
 80026d4:	221f      	movs	r2, #31
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	400a      	ands	r2, r1
 80026e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	3b05      	subs	r3, #5
 80026fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	635a      	str	r2, [r3, #52]	; 0x34
 800270a:	e04c      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b0c      	cmp	r3, #12
 8002712:	d824      	bhi.n	800275e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	3b23      	subs	r3, #35	; 0x23
 8002726:	221f      	movs	r2, #31
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43da      	mvns	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	400a      	ands	r2, r1
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	4618      	mov	r0, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3b23      	subs	r3, #35	; 0x23
 8002750:	fa00 f203 	lsl.w	r2, r0, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
 800275c:	e023      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	3b41      	subs	r3, #65	; 0x41
 8002770:	221f      	movs	r2, #31
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	400a      	ands	r2, r1
 800277e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	3b41      	subs	r3, #65	; 0x41
 800279a:	fa00 f203 	lsl.w	r2, r0, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <HAL_ADC_ConfigChannel+0x250>)
 80027a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a28      	ldr	r2, [pc, #160]	; (8002850 <HAL_ADC_ConfigChannel+0x254>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d10f      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1d8>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b12      	cmp	r3, #18
 80027ba:	d10b      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <HAL_ADC_ConfigChannel+0x254>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d12b      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x23a>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <HAL_ADC_ConfigChannel+0x258>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d003      	beq.n	80027f0 <HAL_ADC_ConfigChannel+0x1f4>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b11      	cmp	r3, #17
 80027ee:	d122      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_ADC_ConfigChannel+0x258>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d111      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_ADC_ConfigChannel+0x25c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a11      	ldr	r2, [pc, #68]	; (800285c <HAL_ADC_ConfigChannel+0x260>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	0c9a      	lsrs	r2, r3, #18
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002828:	e002      	b.n	8002830 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3b01      	subs	r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f9      	bne.n	800282a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	40012300 	.word	0x40012300
 8002850:	40012000 	.word	0x40012000
 8002854:	10000012 	.word	0x10000012
 8002858:	2000000c 	.word	0x2000000c
 800285c:	431bde83 	.word	0x431bde83

08002860 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002868:	4b79      	ldr	r3, [pc, #484]	; (8002a50 <ADC_Init+0x1f0>)
 800286a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	431a      	orrs	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	021a      	lsls	r2, r3, #8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6899      	ldr	r1, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <ADC_Init+0x1f4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d022      	beq.n	800293e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002906:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6899      	ldr	r1, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	e00f      	b.n	800295e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800294c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800295c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0202 	bic.w	r2, r2, #2
 800296c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6899      	ldr	r1, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7e1b      	ldrb	r3, [r3, #24]
 8002978:	005a      	lsls	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01b      	beq.n	80029c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	3b01      	subs	r3, #1
 80029b8:	035a      	lsls	r2, r3, #13
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	e007      	b.n	80029d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	051a      	lsls	r2, r3, #20
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a16:	025a      	lsls	r2, r3, #9
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6899      	ldr	r1, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	029a      	lsls	r2, r3, #10
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40012300 	.word	0x40012300
 8002a54:	0f000001 	.word	0x0f000001

08002a58 <__NVIC_SetPriorityGrouping>:
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a74:	4013      	ands	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8a:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	60d3      	str	r3, [r2, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_GetPriorityGrouping>:
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	f003 0307 	and.w	r3, r3, #7
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_EnableIRQ>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	db0b      	blt.n	8002ae6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	4907      	ldr	r1, [pc, #28]	; (8002af4 <__NVIC_EnableIRQ+0x38>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2001      	movs	r0, #1
 8002ade:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <__NVIC_SetPriority>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	6039      	str	r1, [r7, #0]
 8002b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	db0a      	blt.n	8002b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	490c      	ldr	r1, [pc, #48]	; (8002b44 <__NVIC_SetPriority+0x4c>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	0112      	lsls	r2, r2, #4
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b20:	e00a      	b.n	8002b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4908      	ldr	r1, [pc, #32]	; (8002b48 <__NVIC_SetPriority+0x50>)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	3b04      	subs	r3, #4
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	440b      	add	r3, r1
 8002b36:	761a      	strb	r2, [r3, #24]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000e100 	.word	0xe000e100
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <NVIC_EncodePriority>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f1c3 0307 	rsb	r3, r3, #7
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	bf28      	it	cs
 8002b6a:	2304      	movcs	r3, #4
 8002b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d902      	bls.n	8002b7c <NVIC_EncodePriority+0x30>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3b03      	subs	r3, #3
 8002b7a:	e000      	b.n	8002b7e <NVIC_EncodePriority+0x32>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	401a      	ands	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b94:	f04f 31ff 	mov.w	r1, #4294967295
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43d9      	mvns	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	4313      	orrs	r3, r2
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <SysTick_Config>:
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc4:	d301      	bcc.n	8002bca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00f      	b.n	8002bea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bca:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <SysTick_Config+0x40>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bd2:	210f      	movs	r1, #15
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f7ff ff8e 	bl	8002af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <SysTick_Config+0x40>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <SysTick_Config+0x40>)
 8002be4:	2207      	movs	r2, #7
 8002be6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	e000e010 	.word	0xe000e010

08002bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ff29 	bl	8002a58 <__NVIC_SetPriorityGrouping>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c20:	f7ff ff3e 	bl	8002aa0 <__NVIC_GetPriorityGrouping>
 8002c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f7ff ff8e 	bl	8002b4c <NVIC_EncodePriority>
 8002c30:	4602      	mov	r2, r0
 8002c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff5d 	bl	8002af8 <__NVIC_SetPriority>
}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff31 	bl	8002abc <__NVIC_EnableIRQ>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ffa2 	bl	8002bb4 <SysTick_Config>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d004      	beq.n	8002c98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2280      	movs	r2, #128	; 0x80
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e00c      	b.n	8002cb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	b2db      	uxtb	r3, r3
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	; 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	e177      	b.n	8002fe8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f040 8166 	bne.w	8002fe2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d005      	beq.n	8002d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d130      	bne.n	8002d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 0201 	and.w	r2, r3, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d017      	beq.n	8002dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d123      	bne.n	8002e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	08da      	lsrs	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3208      	adds	r2, #8
 8002de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	220f      	movs	r2, #15
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	08da      	lsrs	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3208      	adds	r2, #8
 8002e1a:	69b9      	ldr	r1, [r7, #24]
 8002e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0203 	and.w	r2, r3, #3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80c0 	beq.w	8002fe2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b66      	ldr	r3, [pc, #408]	; (8003000 <HAL_GPIO_Init+0x324>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	4a65      	ldr	r2, [pc, #404]	; (8003000 <HAL_GPIO_Init+0x324>)
 8002e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e70:	6453      	str	r3, [r2, #68]	; 0x44
 8002e72:	4b63      	ldr	r3, [pc, #396]	; (8003000 <HAL_GPIO_Init+0x324>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e7e:	4a61      	ldr	r2, [pc, #388]	; (8003004 <HAL_GPIO_Init+0x328>)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	3302      	adds	r3, #2
 8002e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	220f      	movs	r2, #15
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a58      	ldr	r2, [pc, #352]	; (8003008 <HAL_GPIO_Init+0x32c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d037      	beq.n	8002f1a <HAL_GPIO_Init+0x23e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a57      	ldr	r2, [pc, #348]	; (800300c <HAL_GPIO_Init+0x330>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d031      	beq.n	8002f16 <HAL_GPIO_Init+0x23a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a56      	ldr	r2, [pc, #344]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d02b      	beq.n	8002f12 <HAL_GPIO_Init+0x236>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a55      	ldr	r2, [pc, #340]	; (8003014 <HAL_GPIO_Init+0x338>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d025      	beq.n	8002f0e <HAL_GPIO_Init+0x232>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a54      	ldr	r2, [pc, #336]	; (8003018 <HAL_GPIO_Init+0x33c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01f      	beq.n	8002f0a <HAL_GPIO_Init+0x22e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a53      	ldr	r2, [pc, #332]	; (800301c <HAL_GPIO_Init+0x340>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d019      	beq.n	8002f06 <HAL_GPIO_Init+0x22a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_GPIO_Init+0x344>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d013      	beq.n	8002f02 <HAL_GPIO_Init+0x226>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a51      	ldr	r2, [pc, #324]	; (8003024 <HAL_GPIO_Init+0x348>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00d      	beq.n	8002efe <HAL_GPIO_Init+0x222>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a50      	ldr	r2, [pc, #320]	; (8003028 <HAL_GPIO_Init+0x34c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <HAL_GPIO_Init+0x21e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4f      	ldr	r2, [pc, #316]	; (800302c <HAL_GPIO_Init+0x350>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d101      	bne.n	8002ef6 <HAL_GPIO_Init+0x21a>
 8002ef2:	2309      	movs	r3, #9
 8002ef4:	e012      	b.n	8002f1c <HAL_GPIO_Init+0x240>
 8002ef6:	230a      	movs	r3, #10
 8002ef8:	e010      	b.n	8002f1c <HAL_GPIO_Init+0x240>
 8002efa:	2308      	movs	r3, #8
 8002efc:	e00e      	b.n	8002f1c <HAL_GPIO_Init+0x240>
 8002efe:	2307      	movs	r3, #7
 8002f00:	e00c      	b.n	8002f1c <HAL_GPIO_Init+0x240>
 8002f02:	2306      	movs	r3, #6
 8002f04:	e00a      	b.n	8002f1c <HAL_GPIO_Init+0x240>
 8002f06:	2305      	movs	r3, #5
 8002f08:	e008      	b.n	8002f1c <HAL_GPIO_Init+0x240>
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	e006      	b.n	8002f1c <HAL_GPIO_Init+0x240>
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e004      	b.n	8002f1c <HAL_GPIO_Init+0x240>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e002      	b.n	8002f1c <HAL_GPIO_Init+0x240>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_GPIO_Init+0x240>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	f002 0203 	and.w	r2, r2, #3
 8002f22:	0092      	lsls	r2, r2, #2
 8002f24:	4093      	lsls	r3, r2
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f2c:	4935      	ldr	r1, [pc, #212]	; (8003004 <HAL_GPIO_Init+0x328>)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	3302      	adds	r3, #2
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f3a:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <HAL_GPIO_Init+0x354>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f5e:	4a34      	ldr	r2, [pc, #208]	; (8003030 <HAL_GPIO_Init+0x354>)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f64:	4b32      	ldr	r3, [pc, #200]	; (8003030 <HAL_GPIO_Init+0x354>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f88:	4a29      	ldr	r2, [pc, #164]	; (8003030 <HAL_GPIO_Init+0x354>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f8e:	4b28      	ldr	r3, [pc, #160]	; (8003030 <HAL_GPIO_Init+0x354>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb2:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <HAL_GPIO_Init+0x354>)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <HAL_GPIO_Init+0x354>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <HAL_GPIO_Init+0x354>)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b0f      	cmp	r3, #15
 8002fec:	f67f ae84 	bls.w	8002cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3724      	adds	r7, #36	; 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800
 8003004:	40013800 	.word	0x40013800
 8003008:	40020000 	.word	0x40020000
 800300c:	40020400 	.word	0x40020400
 8003010:	40020800 	.word	0x40020800
 8003014:	40020c00 	.word	0x40020c00
 8003018:	40021000 	.word	0x40021000
 800301c:	40021400 	.word	0x40021400
 8003020:	40021800 	.word	0x40021800
 8003024:	40021c00 	.word	0x40021c00
 8003028:	40022000 	.word	0x40022000
 800302c:	40022400 	.word	0x40022400
 8003030:	40013c00 	.word	0x40013c00

08003034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	e001      	b.n	8003056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
 8003070:	4613      	mov	r3, r2
 8003072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003074:	787b      	ldrb	r3, [r7, #1]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003080:	e003      	b.n	800308a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	041a      	lsls	r2, r3, #16
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	619a      	str	r2, [r3, #24]
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e12b      	b.n	8003302 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe ffca 	bl	8002058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2224      	movs	r2, #36	; 0x24
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030fc:	f004 fba4 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 8003100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4a81      	ldr	r2, [pc, #516]	; (800330c <HAL_I2C_Init+0x274>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d807      	bhi.n	800311c <HAL_I2C_Init+0x84>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4a80      	ldr	r2, [pc, #512]	; (8003310 <HAL_I2C_Init+0x278>)
 8003110:	4293      	cmp	r3, r2
 8003112:	bf94      	ite	ls
 8003114:	2301      	movls	r3, #1
 8003116:	2300      	movhi	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e006      	b.n	800312a <HAL_I2C_Init+0x92>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a7d      	ldr	r2, [pc, #500]	; (8003314 <HAL_I2C_Init+0x27c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	bf94      	ite	ls
 8003124:	2301      	movls	r3, #1
 8003126:	2300      	movhi	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e0e7      	b.n	8003302 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4a78      	ldr	r2, [pc, #480]	; (8003318 <HAL_I2C_Init+0x280>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0c9b      	lsrs	r3, r3, #18
 800313c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a6a      	ldr	r2, [pc, #424]	; (800330c <HAL_I2C_Init+0x274>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d802      	bhi.n	800316c <HAL_I2C_Init+0xd4>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3301      	adds	r3, #1
 800316a:	e009      	b.n	8003180 <HAL_I2C_Init+0xe8>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	4a69      	ldr	r2, [pc, #420]	; (800331c <HAL_I2C_Init+0x284>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	3301      	adds	r3, #1
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	430b      	orrs	r3, r1
 8003186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003192:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	495c      	ldr	r1, [pc, #368]	; (800330c <HAL_I2C_Init+0x274>)
 800319c:	428b      	cmp	r3, r1
 800319e:	d819      	bhi.n	80031d4 <HAL_I2C_Init+0x13c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e59      	subs	r1, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ae:	1c59      	adds	r1, r3, #1
 80031b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031b4:	400b      	ands	r3, r1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_I2C_Init+0x138>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1e59      	subs	r1, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c8:	3301      	adds	r3, #1
 80031ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ce:	e051      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 80031d0:	2304      	movs	r3, #4
 80031d2:	e04f      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d111      	bne.n	8003200 <HAL_I2C_Init+0x168>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e58      	subs	r0, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	440b      	add	r3, r1
 80031ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ee:	3301      	adds	r3, #1
 80031f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e012      	b.n	8003226 <HAL_I2C_Init+0x18e>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1e58      	subs	r0, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	0099      	lsls	r1, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	fbb0 f3f3 	udiv	r3, r0, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Init+0x196>
 800322a:	2301      	movs	r3, #1
 800322c:	e022      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10e      	bne.n	8003254 <HAL_I2C_Init+0x1bc>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1e58      	subs	r0, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6859      	ldr	r1, [r3, #4]
 800323e:	460b      	mov	r3, r1
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	440b      	add	r3, r1
 8003244:	fbb0 f3f3 	udiv	r3, r0, r3
 8003248:	3301      	adds	r3, #1
 800324a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003252:	e00f      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1e58      	subs	r0, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	0099      	lsls	r1, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	fbb0 f3f3 	udiv	r3, r0, r3
 800326a:	3301      	adds	r3, #1
 800326c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	6809      	ldr	r1, [r1, #0]
 8003278:	4313      	orrs	r3, r2
 800327a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6911      	ldr	r1, [r2, #16]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68d2      	ldr	r2, [r2, #12]
 80032ae:	4311      	orrs	r1, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	000186a0 	.word	0x000186a0
 8003310:	001e847f 	.word	0x001e847f
 8003314:	003d08ff 	.word	0x003d08ff
 8003318:	431bde83 	.word	0x431bde83
 800331c:	10624dd3 	.word	0x10624dd3

08003320 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	461a      	mov	r2, r3
 800332c:	460b      	mov	r3, r1
 800332e:	817b      	strh	r3, [r7, #10]
 8003330:	4613      	mov	r3, r2
 8003332:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003334:	f7ff f8ee 	bl	8002514 <HAL_GetTick>
 8003338:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b20      	cmp	r3, #32
 8003344:	f040 80e0 	bne.w	8003508 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2319      	movs	r3, #25
 800334e:	2201      	movs	r2, #1
 8003350:	4970      	ldr	r1, [pc, #448]	; (8003514 <HAL_I2C_Master_Transmit+0x1f4>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f002 f8e6 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800335e:	2302      	movs	r3, #2
 8003360:	e0d3      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_I2C_Master_Transmit+0x50>
 800336c:	2302      	movs	r3, #2
 800336e:	e0cc      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d007      	beq.n	8003396 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2221      	movs	r2, #33	; 0x21
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2210      	movs	r2, #16
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	893a      	ldrh	r2, [r7, #8]
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a50      	ldr	r2, [pc, #320]	; (8003518 <HAL_I2C_Master_Transmit+0x1f8>)
 80033d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033d8:	8979      	ldrh	r1, [r7, #10]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f001 fea8 	bl	8005134 <I2C_MasterRequestWrite>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e08d      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003404:	e066      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	6a39      	ldr	r1, [r7, #32]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f002 f960 	bl	80056d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2b04      	cmp	r3, #4
 800341c:	d107      	bne.n	800342e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e06b      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	781a      	ldrb	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b04      	cmp	r3, #4
 800346e:	d11b      	bne.n	80034a8 <HAL_I2C_Master_Transmit+0x188>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	2b00      	cmp	r3, #0
 8003476:	d017      	beq.n	80034a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	6a39      	ldr	r1, [r7, #32]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f002 f950 	bl	8005752 <I2C_WaitOnBTFFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d107      	bne.n	80034d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e01a      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d194      	bne.n	8003406 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	e000      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
  }
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	00100002 	.word	0x00100002
 8003518:	ffff0000 	.word	0xffff0000

0800351c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08c      	sub	sp, #48	; 0x30
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	460b      	mov	r3, r1
 800352a:	817b      	strh	r3, [r7, #10]
 800352c:	4613      	mov	r3, r2
 800352e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7fe fff0 	bl	8002514 <HAL_GetTick>
 8003534:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	f040 820b 	bne.w	800395a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2319      	movs	r3, #25
 800354a:	2201      	movs	r2, #1
 800354c:	497c      	ldr	r1, [pc, #496]	; (8003740 <HAL_I2C_Master_Receive+0x224>)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f001 ffe8 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
 800355c:	e1fe      	b.n	800395c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_I2C_Master_Receive+0x50>
 8003568:	2302      	movs	r3, #2
 800356a:	e1f7      	b.n	800395c <HAL_I2C_Master_Receive+0x440>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d007      	beq.n	8003592 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2222      	movs	r2, #34	; 0x22
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2210      	movs	r2, #16
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	893a      	ldrh	r2, [r7, #8]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a5c      	ldr	r2, [pc, #368]	; (8003744 <HAL_I2C_Master_Receive+0x228>)
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035d4:	8979      	ldrh	r1, [r7, #10]
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f001 fe2c 	bl	8005238 <I2C_MasterRequestRead>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1b8      	b.n	800395c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d113      	bne.n	800361a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	623b      	str	r3, [r7, #32]
 8003606:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e18c      	b.n	8003934 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	2b01      	cmp	r3, #1
 8003620:	d11b      	bne.n	800365a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003630:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e16c      	b.n	8003934 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	2b02      	cmp	r3, #2
 8003660:	d11b      	bne.n	800369a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003670:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003680:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	e14c      	b.n	8003934 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036c0:	e138      	b.n	8003934 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	f200 80f1 	bhi.w	80038ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d123      	bne.n	800371c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f002 f8ad 	bl	8005838 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e139      	b.n	800395c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	855a      	strh	r2, [r3, #42]	; 0x2a
 800371a:	e10b      	b.n	8003934 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	2b02      	cmp	r3, #2
 8003722:	d14e      	bne.n	80037c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	2200      	movs	r2, #0
 800372c:	4906      	ldr	r1, [pc, #24]	; (8003748 <HAL_I2C_Master_Receive+0x22c>)
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f001 fef8 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e10e      	b.n	800395c <HAL_I2C_Master_Receive+0x440>
 800373e:	bf00      	nop
 8003740:	00100002 	.word	0x00100002
 8003744:	ffff0000 	.word	0xffff0000
 8003748:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037c0:	e0b8      	b.n	8003934 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	2200      	movs	r2, #0
 80037ca:	4966      	ldr	r1, [pc, #408]	; (8003964 <HAL_I2C_Master_Receive+0x448>)
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f001 fea9 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0bf      	b.n	800395c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	2200      	movs	r2, #0
 8003826:	494f      	ldr	r1, [pc, #316]	; (8003964 <HAL_I2C_Master_Receive+0x448>)
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f001 fe7b 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e091      	b.n	800395c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038ac:	e042      	b.n	8003934 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f001 ffc0 	bl	8005838 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e04c      	b.n	800395c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d118      	bne.n	8003934 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	f47f aec2 	bne.w	80036c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3728      	adds	r7, #40	; 0x28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	00010004 	.word	0x00010004

08003968 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003988:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	2b10      	cmp	r3, #16
 8003996:	d003      	beq.n	80039a0 <HAL_I2C_EV_IRQHandler+0x38>
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	f040 80c1 	bne.w	8003b22 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10d      	bne.n	80039d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80039c0:	d003      	beq.n	80039ca <HAL_I2C_EV_IRQHandler+0x62>
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80039c8:	d101      	bne.n	80039ce <HAL_I2C_EV_IRQHandler+0x66>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_I2C_EV_IRQHandler+0x68>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	f000 8132 	beq.w	8003c3a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00c      	beq.n	80039fa <HAL_I2C_EV_IRQHandler+0x92>
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	0a5b      	lsrs	r3, r3, #9
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d006      	beq.n	80039fa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f001 ffa8 	bl	8005942 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fd83 	bl	80044fe <I2C_Master_SB>
 80039f8:	e092      	b.n	8003b20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	08db      	lsrs	r3, r3, #3
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_I2C_EV_IRQHandler+0xb2>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	0a5b      	lsrs	r3, r3, #9
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fdf9 	bl	800460a <I2C_Master_ADD10>
 8003a18:	e082      	b.n	8003b20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	085b      	lsrs	r3, r3, #1
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_I2C_EV_IRQHandler+0xd2>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	0a5b      	lsrs	r3, r3, #9
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fe13 	bl	800465e <I2C_Master_ADDR>
 8003a38:	e072      	b.n	8003b20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d03b      	beq.n	8003abe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a54:	f000 80f3 	beq.w	8003c3e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	09db      	lsrs	r3, r3, #7
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00f      	beq.n	8003a84 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	0a9b      	lsrs	r3, r3, #10
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f9f3 	bl	8003e68 <I2C_MasterTransmit_TXE>
 8003a82:	e04d      	b.n	8003b20 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	089b      	lsrs	r3, r3, #2
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80d6 	beq.w	8003c3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	0a5b      	lsrs	r3, r3, #9
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80cf 	beq.w	8003c3e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003aa0:	7bbb      	ldrb	r3, [r7, #14]
 8003aa2:	2b21      	cmp	r3, #33	; 0x21
 8003aa4:	d103      	bne.n	8003aae <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa7a 	bl	8003fa0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aac:	e0c7      	b.n	8003c3e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	f040 80c4 	bne.w	8003c3e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fae8 	bl	800408c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003abc:	e0bf      	b.n	8003c3e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003acc:	f000 80b7 	beq.w	8003c3e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	099b      	lsrs	r3, r3, #6
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00f      	beq.n	8003afc <HAL_I2C_EV_IRQHandler+0x194>
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	0a9b      	lsrs	r3, r3, #10
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d009      	beq.n	8003afc <HAL_I2C_EV_IRQHandler+0x194>
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d103      	bne.n	8003afc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fb5d 	bl	80041b4 <I2C_MasterReceive_RXNE>
 8003afa:	e011      	b.n	8003b20 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 809a 	beq.w	8003c3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	0a5b      	lsrs	r3, r3, #9
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8093 	beq.w	8003c3e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fc06 	bl	800432a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b1e:	e08e      	b.n	8003c3e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b20:	e08d      	b.n	8003c3e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e007      	b.n	8003b44 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d012      	beq.n	8003b76 <HAL_I2C_EV_IRQHandler+0x20e>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	0a5b      	lsrs	r3, r3, #9
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00c      	beq.n	8003b76 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b6c:	69b9      	ldr	r1, [r7, #24]
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 ffc4 	bl	8004afc <I2C_Slave_ADDR>
 8003b74:	e066      	b.n	8003c44 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_I2C_EV_IRQHandler+0x22e>
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	0a5b      	lsrs	r3, r3, #9
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fffe 	bl	8004b90 <I2C_Slave_STOPF>
 8003b94:	e056      	b.n	8003c44 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b96:	7bbb      	ldrb	r3, [r7, #14]
 8003b98:	2b21      	cmp	r3, #33	; 0x21
 8003b9a:	d002      	beq.n	8003ba2 <HAL_I2C_EV_IRQHandler+0x23a>
 8003b9c:	7bbb      	ldrb	r3, [r7, #14]
 8003b9e:	2b29      	cmp	r3, #41	; 0x29
 8003ba0:	d125      	bne.n	8003bee <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	09db      	lsrs	r3, r3, #7
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00f      	beq.n	8003bce <HAL_I2C_EV_IRQHandler+0x266>
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	0a9b      	lsrs	r3, r3, #10
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_I2C_EV_IRQHandler+0x266>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 feda 	bl	8004980 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bcc:	e039      	b.n	8003c42 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d033      	beq.n	8003c42 <HAL_I2C_EV_IRQHandler+0x2da>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	0a5b      	lsrs	r3, r3, #9
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d02d      	beq.n	8003c42 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 ff07 	bl	80049fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bec:	e029      	b.n	8003c42 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	099b      	lsrs	r3, r3, #6
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00f      	beq.n	8003c1a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	0a9b      	lsrs	r3, r3, #10
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 ff12 	bl	8004a3c <I2C_SlaveReceive_RXNE>
 8003c18:	e014      	b.n	8003c44 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00e      	beq.n	8003c44 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	0a5b      	lsrs	r3, r3, #9
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 ff40 	bl	8004ab8 <I2C_SlaveReceive_BTF>
 8003c38:	e004      	b.n	8003c44 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003c3a:	bf00      	nop
 8003c3c:	e002      	b.n	8003c44 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c3e:	bf00      	nop
 8003c40:	e000      	b.n	8003c44 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c42:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b08a      	sub	sp, #40	; 0x28
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c6c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00e      	beq.n	8003c98 <HAL_I2C_ER_IRQHandler+0x4e>
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c96:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	0a5b      	lsrs	r3, r3, #9
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_I2C_ER_IRQHandler+0x78>
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	f043 0302 	orr.w	r3, r3, #2
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003cc0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	0a9b      	lsrs	r3, r3, #10
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d03f      	beq.n	8003d4e <HAL_I2C_ER_IRQHandler+0x104>
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d039      	beq.n	8003d4e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003cda:	7efb      	ldrb	r3, [r7, #27]
 8003cdc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003cf4:	7ebb      	ldrb	r3, [r7, #26]
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d112      	bne.n	8003d20 <HAL_I2C_ER_IRQHandler+0xd6>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10f      	bne.n	8003d20 <HAL_I2C_ER_IRQHandler+0xd6>
 8003d00:	7cfb      	ldrb	r3, [r7, #19]
 8003d02:	2b21      	cmp	r3, #33	; 0x21
 8003d04:	d008      	beq.n	8003d18 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003d06:	7cfb      	ldrb	r3, [r7, #19]
 8003d08:	2b29      	cmp	r3, #41	; 0x29
 8003d0a:	d005      	beq.n	8003d18 <HAL_I2C_ER_IRQHandler+0xce>
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	2b28      	cmp	r3, #40	; 0x28
 8003d10:	d106      	bne.n	8003d20 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b21      	cmp	r3, #33	; 0x21
 8003d16:	d103      	bne.n	8003d20 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f001 f869 	bl	8004df0 <I2C_Slave_AF>
 8003d1e:	e016      	b.n	8003d4e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d28:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	f043 0304 	orr.w	r3, r3, #4
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d32:	7efb      	ldrb	r3, [r7, #27]
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d002      	beq.n	8003d3e <HAL_I2C_ER_IRQHandler+0xf4>
 8003d38:	7efb      	ldrb	r3, [r7, #27]
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d107      	bne.n	8003d4e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	0adb      	lsrs	r3, r3, #11
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00e      	beq.n	8003d78 <HAL_I2C_ER_IRQHandler+0x12e>
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	f043 0308 	orr.w	r3, r3, #8
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003d76:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f001 f8a0 	bl	8004ed0 <I2C_ITError>
  }
}
 8003d90:	bf00      	nop
 8003d92:	3728      	adds	r7, #40	; 0x28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	70fb      	strb	r3, [r7, #3]
 8003df4:	4613      	mov	r3, r2
 8003df6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d150      	bne.n	8003f30 <I2C_MasterTransmit_TXE+0xc8>
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b21      	cmp	r3, #33	; 0x21
 8003e92:	d14d      	bne.n	8003f30 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d01d      	beq.n	8003ed6 <I2C_MasterTransmit_TXE+0x6e>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d01a      	beq.n	8003ed6 <I2C_MasterTransmit_TXE+0x6e>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ea6:	d016      	beq.n	8003ed6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eb6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2211      	movs	r2, #17
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ff62 	bl	8003d98 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ed4:	e060      	b.n	8003f98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ee4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d107      	bne.n	8003f20 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff7d 	bl	8003e18 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f1e:	e03b      	b.n	8003f98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff35 	bl	8003d98 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f2e:	e033      	b.n	8003f98 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b21      	cmp	r3, #33	; 0x21
 8003f34:	d005      	beq.n	8003f42 <I2C_MasterTransmit_TXE+0xda>
 8003f36:	7bbb      	ldrb	r3, [r7, #14]
 8003f38:	2b40      	cmp	r3, #64	; 0x40
 8003f3a:	d12d      	bne.n	8003f98 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b22      	cmp	r3, #34	; 0x22
 8003f40:	d12a      	bne.n	8003f98 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f5c:	e01c      	b.n	8003f98 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d103      	bne.n	8003f72 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f88e 	bl	800408c <I2C_MemoryTransmit_TXE_BTF>
}
 8003f70:	e012      	b.n	8003f98 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	781a      	ldrb	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f96:	e7ff      	b.n	8003f98 <I2C_MasterTransmit_TXE+0x130>
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b21      	cmp	r3, #33	; 0x21
 8003fb8:	d164      	bne.n	8004084 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d012      	beq.n	8003fea <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003fe8:	e04c      	b.n	8004084 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d01d      	beq.n	800402c <I2C_MasterTransmit_BTF+0x8c>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d01a      	beq.n	800402c <I2C_MasterTransmit_BTF+0x8c>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ffc:	d016      	beq.n	800402c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800400c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2211      	movs	r2, #17
 8004012:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff feb7 	bl	8003d98 <HAL_I2C_MasterTxCpltCallback>
}
 800402a:	e02b      	b.n	8004084 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800403a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b40      	cmp	r3, #64	; 0x40
 8004064:	d107      	bne.n	8004076 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff fed2 	bl	8003e18 <HAL_I2C_MemTxCpltCallback>
}
 8004074:	e006      	b.n	8004084 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff fe8a 	bl	8003d98 <HAL_I2C_MasterTxCpltCallback>
}
 8004084:	bf00      	nop
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11d      	bne.n	80040e0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d10b      	bne.n	80040c4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040bc:	1c9a      	adds	r2, r3, #2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80040c2:	e073      	b.n	80041ac <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	121b      	asrs	r3, r3, #8
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040de:	e065      	b.n	80041ac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d10b      	bne.n	8004100 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040fe:	e055      	b.n	80041ac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004104:	2b02      	cmp	r3, #2
 8004106:	d151      	bne.n	80041ac <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b22      	cmp	r3, #34	; 0x22
 800410c:	d10d      	bne.n	800412a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004128:	e040      	b.n	80041ac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d015      	beq.n	8004160 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	2b21      	cmp	r3, #33	; 0x21
 8004138:	d112      	bne.n	8004160 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800415e:	e025      	b.n	80041ac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d120      	bne.n	80041ac <I2C_MemoryTransmit_TXE_BTF+0x120>
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b21      	cmp	r3, #33	; 0x21
 800416e:	d11d      	bne.n	80041ac <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800417e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fe36 	bl	8003e18 <HAL_I2C_MemTxCpltCallback>
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b22      	cmp	r3, #34	; 0x22
 80041c6:	f040 80ac 	bne.w	8004322 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d921      	bls.n	800421c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b03      	cmp	r3, #3
 8004206:	f040 808c 	bne.w	8004322 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004218:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800421a:	e082      	b.n	8004322 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	2b02      	cmp	r3, #2
 8004222:	d075      	beq.n	8004310 <I2C_MasterReceive_RXNE+0x15c>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d002      	beq.n	8004230 <I2C_MasterReceive_RXNE+0x7c>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d16f      	bne.n	8004310 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f001 facf 	bl	80057d4 <I2C_WaitOnSTOPRequestThroughIT>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d142      	bne.n	80042c2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800425a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d10a      	bne.n	80042ac <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff fdc1 	bl	8003e2c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042aa:	e03a      	b.n	8004322 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2212      	movs	r2, #18
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff fd76 	bl	8003dac <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042c0:	e02f      	b.n	8004322 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff fd99 	bl	8003e40 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800430e:	e008      	b.n	8004322 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431e:	605a      	str	r2, [r3, #4]
}
 8004320:	e7ff      	b.n	8004322 <I2C_MasterReceive_RXNE+0x16e>
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b04      	cmp	r3, #4
 8004340:	d11b      	bne.n	800437a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004350:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004378:	e0bd      	b.n	80044f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b03      	cmp	r3, #3
 8004382:	d129      	bne.n	80043d8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004392:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b04      	cmp	r3, #4
 8004398:	d00a      	beq.n	80043b0 <I2C_MasterReceive_BTF+0x86>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d007      	beq.n	80043b0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043d6:	e08e      	b.n	80044f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d176      	bne.n	80044d0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d002      	beq.n	80043ee <I2C_MasterReceive_BTF+0xc4>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	d108      	bne.n	8004400 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e019      	b.n	8004434 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b04      	cmp	r3, #4
 8004404:	d002      	beq.n	800440c <I2C_MasterReceive_BTF+0xe2>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d108      	bne.n	800441e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e00a      	b.n	8004434 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b10      	cmp	r3, #16
 8004422:	d007      	beq.n	8004434 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004432:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800448e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d10a      	bne.n	80044ba <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff fcba 	bl	8003e2c <HAL_I2C_MemRxCpltCallback>
}
 80044b8:	e01d      	b.n	80044f6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2212      	movs	r2, #18
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff fc6f 	bl	8003dac <HAL_I2C_MasterRxCpltCallback>
}
 80044ce:	e012      	b.n	80044f6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d117      	bne.n	8004542 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800452a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800452c:	e067      	b.n	80045fe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	b2da      	uxtb	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	611a      	str	r2, [r3, #16]
}
 8004540:	e05d      	b.n	80045fe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800454a:	d133      	bne.n	80045b4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b21      	cmp	r3, #33	; 0x21
 8004556:	d109      	bne.n	800456c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455c:	b2db      	uxtb	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004568:	611a      	str	r2, [r3, #16]
 800456a:	e008      	b.n	800457e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004570:	b2db      	uxtb	r3, r3
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	b2da      	uxtb	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <I2C_Master_SB+0x92>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d108      	bne.n	80045a2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	2b00      	cmp	r3, #0
 8004596:	d032      	beq.n	80045fe <I2C_Master_SB+0x100>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d02d      	beq.n	80045fe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b0:	605a      	str	r2, [r3, #4]
}
 80045b2:	e024      	b.n	80045fe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10e      	bne.n	80045da <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	11db      	asrs	r3, r3, #7
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 0306 	and.w	r3, r3, #6
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f063 030f 	orn	r3, r3, #15
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	611a      	str	r2, [r3, #16]
}
 80045d8:	e011      	b.n	80045fe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d10d      	bne.n	80045fe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	11db      	asrs	r3, r3, #7
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f003 0306 	and.w	r3, r3, #6
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f063 030e 	orn	r3, r3, #14
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	611a      	str	r2, [r3, #16]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	b2da      	uxtb	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <I2C_Master_ADD10+0x26>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d108      	bne.n	8004642 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00c      	beq.n	8004652 <I2C_Master_ADD10+0x48>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d007      	beq.n	8004652 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004650:	605a      	str	r2, [r3, #4]
  }
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800465e:	b480      	push	{r7}
 8004660:	b091      	sub	sp, #68	; 0x44
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b22      	cmp	r3, #34	; 0x22
 8004686:	f040 8169 	bne.w	800495c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10f      	bne.n	80046b2 <I2C_Master_ADDR+0x54>
 8004692:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004696:	2b40      	cmp	r3, #64	; 0x40
 8004698:	d10b      	bne.n	80046b2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469a:	2300      	movs	r3, #0
 800469c:	633b      	str	r3, [r7, #48]	; 0x30
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	633b      	str	r3, [r7, #48]	; 0x30
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	633b      	str	r3, [r7, #48]	; 0x30
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	e160      	b.n	8004974 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d11d      	bne.n	80046f6 <I2C_Master_ADDR+0x98>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046c2:	d118      	bne.n	80046f6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c4:	2300      	movs	r3, #0
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	651a      	str	r2, [r3, #80]	; 0x50
 80046f4:	e13e      	b.n	8004974 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d113      	bne.n	8004728 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004700:	2300      	movs	r3, #0
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e115      	b.n	8004954 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b01      	cmp	r3, #1
 8004730:	f040 808a 	bne.w	8004848 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004736:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800473a:	d137      	bne.n	80047ac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475a:	d113      	bne.n	8004784 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476c:	2300      	movs	r3, #0
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	e0e7      	b.n	8004954 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004784:	2300      	movs	r3, #0
 8004786:	623b      	str	r3, [r7, #32]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	e0d3      	b.n	8004954 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d02e      	beq.n	8004810 <I2C_Master_ADDR+0x1b2>
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d02b      	beq.n	8004810 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80047b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ba:	2b12      	cmp	r3, #18
 80047bc:	d102      	bne.n	80047c4 <I2C_Master_ADDR+0x166>
 80047be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d125      	bne.n	8004810 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d00e      	beq.n	80047e8 <I2C_Master_ADDR+0x18a>
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d00b      	beq.n	80047e8 <I2C_Master_ADDR+0x18a>
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d008      	beq.n	80047e8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e007      	b.n	80047f8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047f6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f8:	2300      	movs	r3, #0
 80047fa:	61fb      	str	r3, [r7, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	e0a1      	b.n	8004954 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004820:	2300      	movs	r3, #0
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	61bb      	str	r3, [r7, #24]
 8004834:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e085      	b.n	8004954 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d14d      	bne.n	80048ee <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	2b04      	cmp	r3, #4
 8004856:	d016      	beq.n	8004886 <I2C_Master_ADDR+0x228>
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	2b02      	cmp	r3, #2
 800485c:	d013      	beq.n	8004886 <I2C_Master_ADDR+0x228>
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	2b10      	cmp	r3, #16
 8004862:	d010      	beq.n	8004886 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004872:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	e007      	b.n	8004896 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004894:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a4:	d117      	bne.n	80048d6 <I2C_Master_ADDR+0x278>
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048ac:	d00b      	beq.n	80048c6 <I2C_Master_ADDR+0x268>
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d008      	beq.n	80048c6 <I2C_Master_ADDR+0x268>
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d005      	beq.n	80048c6 <I2C_Master_ADDR+0x268>
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	2b10      	cmp	r3, #16
 80048be:	d002      	beq.n	80048c6 <I2C_Master_ADDR+0x268>
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d107      	bne.n	80048d6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	e032      	b.n	8004954 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800490c:	d117      	bne.n	800493e <I2C_Master_ADDR+0x2e0>
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004914:	d00b      	beq.n	800492e <I2C_Master_ADDR+0x2d0>
 8004916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004918:	2b01      	cmp	r3, #1
 800491a:	d008      	beq.n	800492e <I2C_Master_ADDR+0x2d0>
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	2b08      	cmp	r3, #8
 8004920:	d005      	beq.n	800492e <I2C_Master_ADDR+0x2d0>
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	2b10      	cmp	r3, #16
 8004926:	d002      	beq.n	800492e <I2C_Master_ADDR+0x2d0>
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	2b20      	cmp	r3, #32
 800492c:	d107      	bne.n	800493e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800493c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800495a:	e00b      	b.n	8004974 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
}
 8004972:	e7ff      	b.n	8004974 <I2C_Master_ADDR+0x316>
 8004974:	bf00      	nop
 8004976:	3744      	adds	r7, #68	; 0x44
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d02b      	beq.n	80049f2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	781a      	ldrb	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d114      	bne.n	80049f2 <I2C_SlaveTransmit_TXE+0x72>
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b29      	cmp	r3, #41	; 0x29
 80049cc:	d111      	bne.n	80049f2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2221      	movs	r2, #33	; 0x21
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2228      	movs	r2, #40	; 0x28
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff f9e7 	bl	8003dc0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d011      	beq.n	8004a30 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	781a      	ldrb	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d02c      	beq.n	8004ab0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d114      	bne.n	8004ab0 <I2C_SlaveReceive_RXNE+0x74>
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	2b2a      	cmp	r3, #42	; 0x2a
 8004a8a:	d111      	bne.n	8004ab0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2222      	movs	r2, #34	; 0x22
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2228      	movs	r2, #40	; 0x28
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff f992 	bl	8003dd4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d012      	beq.n	8004af0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b06:	2300      	movs	r3, #0
 8004b08:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b16:	2b28      	cmp	r3, #40	; 0x28
 8004b18:	d127      	bne.n	8004b6a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b28:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	089b      	lsrs	r3, r3, #2
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	09db      	lsrs	r3, r3, #7
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	81bb      	strh	r3, [r7, #12]
 8004b4c:	e002      	b.n	8004b54 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004b5c:	89ba      	ldrh	r2, [r7, #12]
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff f940 	bl	8003de8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b68:	e00e      	b.n	8004b88 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bdc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bec:	d172      	bne.n	8004cd4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b22      	cmp	r3, #34	; 0x22
 8004bf2:	d002      	beq.n	8004bfa <I2C_Slave_STOPF+0x6a>
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf8:	d135      	bne.n	8004c66 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f043 0204 	orr.w	r2, r3, #4
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe f843 	bl	8002cbe <HAL_DMA_GetState>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d049      	beq.n	8004cd2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	4a69      	ldr	r2, [pc, #420]	; (8004de8 <I2C_Slave_STOPF+0x258>)
 8004c44:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe f815 	bl	8002c7a <HAL_DMA_Abort_IT>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d03d      	beq.n	8004cd2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c60:	4610      	mov	r0, r2
 8004c62:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c64:	e035      	b.n	8004cd2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f043 0204 	orr.w	r2, r3, #4
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe f80d 	bl	8002cbe <HAL_DMA_GetState>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d014      	beq.n	8004cd4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cae:	4a4e      	ldr	r2, [pc, #312]	; (8004de8 <I2C_Slave_STOPF+0x258>)
 8004cb0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fd ffdf 	bl	8002c7a <HAL_DMA_Abort_IT>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d008      	beq.n	8004cd4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4798      	blx	r3
 8004cd0:	e000      	b.n	8004cd4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cd2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d03e      	beq.n	8004d5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d112      	bne.n	8004d12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	d112      	bne.n	8004d46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	f043 0204 	orr.w	r2, r3, #4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f8b3 	bl	8004ed0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d6a:	e039      	b.n	8004de0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d70:	d109      	bne.n	8004d86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2228      	movs	r2, #40	; 0x28
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff f827 	bl	8003dd4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b28      	cmp	r3, #40	; 0x28
 8004d90:	d111      	bne.n	8004db6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a15      	ldr	r2, [pc, #84]	; (8004dec <I2C_Slave_STOPF+0x25c>)
 8004d96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff f828 	bl	8003e04 <HAL_I2C_ListenCpltCallback>
}
 8004db4:	e014      	b.n	8004de0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	2b22      	cmp	r3, #34	; 0x22
 8004dbc:	d002      	beq.n	8004dc4 <I2C_Slave_STOPF+0x234>
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b22      	cmp	r3, #34	; 0x22
 8004dc2:	d10d      	bne.n	8004de0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fe fffa 	bl	8003dd4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	080053d5 	.word	0x080053d5
 8004dec:	ffff0000 	.word	0xffff0000

08004df0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d002      	beq.n	8004e12 <I2C_Slave_AF+0x22>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d129      	bne.n	8004e66 <I2C_Slave_AF+0x76>
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	2b28      	cmp	r3, #40	; 0x28
 8004e16:	d126      	bne.n	8004e66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a2c      	ldr	r2, [pc, #176]	; (8004ecc <I2C_Slave_AF+0xdc>)
 8004e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fe ffd0 	bl	8003e04 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004e64:	e02e      	b.n	8004ec4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b21      	cmp	r3, #33	; 0x21
 8004e6a:	d126      	bne.n	8004eba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <I2C_Slave_AF+0xdc>)
 8004e70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2221      	movs	r2, #33	; 0x21
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ea0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fe ff84 	bl	8003dc0 <HAL_I2C_SlaveTxCpltCallback>
}
 8004eb8:	e004      	b.n	8004ec4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ec2:	615a      	str	r2, [r3, #20]
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	ffff0000 	.word	0xffff0000

08004ed0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ede:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ee8:	7bbb      	ldrb	r3, [r7, #14]
 8004eea:	2b10      	cmp	r3, #16
 8004eec:	d002      	beq.n	8004ef4 <I2C_ITError+0x24>
 8004eee:	7bbb      	ldrb	r3, [r7, #14]
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d10a      	bne.n	8004f0a <I2C_ITError+0x3a>
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	2b22      	cmp	r3, #34	; 0x22
 8004ef8:	d107      	bne.n	8004f0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f10:	2b28      	cmp	r3, #40	; 0x28
 8004f12:	d107      	bne.n	8004f24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2228      	movs	r2, #40	; 0x28
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f22:	e015      	b.n	8004f50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f32:	d00a      	beq.n	8004f4a <I2C_ITError+0x7a>
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	2b60      	cmp	r3, #96	; 0x60
 8004f38:	d007      	beq.n	8004f4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5e:	d162      	bne.n	8005026 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d020      	beq.n	8004fc0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f82:	4a6a      	ldr	r2, [pc, #424]	; (800512c <I2C_ITError+0x25c>)
 8004f84:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd fe75 	bl	8002c7a <HAL_DMA_Abort_IT>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 8089 	beq.w	80050aa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4798      	blx	r3
 8004fbe:	e074      	b.n	80050aa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	4a59      	ldr	r2, [pc, #356]	; (800512c <I2C_ITError+0x25c>)
 8004fc6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fd fe54 	bl	8002c7a <HAL_DMA_Abort_IT>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d068      	beq.n	80050aa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d10b      	bne.n	8004ffe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005020:	4610      	mov	r0, r2
 8005022:	4798      	blx	r3
 8005024:	e041      	b.n	80050aa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b60      	cmp	r3, #96	; 0x60
 8005030:	d125      	bne.n	800507e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d10b      	bne.n	8005066 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fe feec 	bl	8003e54 <HAL_I2C_AbortCpltCallback>
 800507c:	e015      	b.n	80050aa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d10b      	bne.n	80050a4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7fe fecb 	bl	8003e40 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10e      	bne.n	80050d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d109      	bne.n	80050d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050e6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d113      	bne.n	8005124 <I2C_ITError+0x254>
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b28      	cmp	r3, #40	; 0x28
 8005100:	d110      	bne.n	8005124 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a0a      	ldr	r2, [pc, #40]	; (8005130 <I2C_ITError+0x260>)
 8005106:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fe fe70 	bl	8003e04 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	080053d5 	.word	0x080053d5
 8005130:	ffff0000 	.word	0xffff0000

08005134 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	460b      	mov	r3, r1
 8005142:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b08      	cmp	r3, #8
 800514e:	d006      	beq.n	800515e <I2C_MasterRequestWrite+0x2a>
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d003      	beq.n	800515e <I2C_MasterRequestWrite+0x2a>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800515c:	d108      	bne.n	8005170 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e00b      	b.n	8005188 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	2b12      	cmp	r3, #18
 8005176:	d107      	bne.n	8005188 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005186:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f9c5 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00d      	beq.n	80051bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ae:	d103      	bne.n	80051b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e035      	b.n	8005228 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051c4:	d108      	bne.n	80051d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051c6:	897b      	ldrh	r3, [r7, #10]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051d4:	611a      	str	r2, [r3, #16]
 80051d6:	e01b      	b.n	8005210 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051d8:	897b      	ldrh	r3, [r7, #10]
 80051da:	11db      	asrs	r3, r3, #7
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f003 0306 	and.w	r3, r3, #6
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	f063 030f 	orn	r3, r3, #15
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	490e      	ldr	r1, [pc, #56]	; (8005230 <I2C_MasterRequestWrite+0xfc>)
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f9eb 	bl	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e010      	b.n	8005228 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005206:	897b      	ldrh	r3, [r7, #10]
 8005208:	b2da      	uxtb	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4907      	ldr	r1, [pc, #28]	; (8005234 <I2C_MasterRequestWrite+0x100>)
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f9db 	bl	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	00010008 	.word	0x00010008
 8005234:	00010002 	.word	0x00010002

08005238 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	460b      	mov	r3, r1
 8005246:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800525c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d006      	beq.n	8005272 <I2C_MasterRequestRead+0x3a>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d003      	beq.n	8005272 <I2C_MasterRequestRead+0x3a>
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005270:	d108      	bne.n	8005284 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e00b      	b.n	800529c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	2b11      	cmp	r3, #17
 800528a:	d107      	bne.n	800529c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800529a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f93b 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c2:	d103      	bne.n	80052cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e079      	b.n	80053c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052d8:	d108      	bne.n	80052ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052da:	897b      	ldrh	r3, [r7, #10]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	611a      	str	r2, [r3, #16]
 80052ea:	e05f      	b.n	80053ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052ec:	897b      	ldrh	r3, [r7, #10]
 80052ee:	11db      	asrs	r3, r3, #7
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 0306 	and.w	r3, r3, #6
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f063 030f 	orn	r3, r3, #15
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4930      	ldr	r1, [pc, #192]	; (80053cc <I2C_MasterRequestRead+0x194>)
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f961 	bl	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e054      	b.n	80053c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800531a:	897b      	ldrh	r3, [r7, #10]
 800531c:	b2da      	uxtb	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	4929      	ldr	r1, [pc, #164]	; (80053d0 <I2C_MasterRequestRead+0x198>)
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f951 	bl	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e044      	b.n	80053c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f8d9 	bl	8005524 <I2C_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00d      	beq.n	8005394 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005386:	d103      	bne.n	8005390 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800538e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e017      	b.n	80053c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005394:	897b      	ldrh	r3, [r7, #10]
 8005396:	11db      	asrs	r3, r3, #7
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f003 0306 	and.w	r3, r3, #6
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	f063 030e 	orn	r3, r3, #14
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	4907      	ldr	r1, [pc, #28]	; (80053d0 <I2C_MasterRequestRead+0x198>)
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f90d 	bl	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	00010008 	.word	0x00010008
 80053d0:	00010002 	.word	0x00010002

080053d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80053ee:	4b4b      	ldr	r3, [pc, #300]	; (800551c <I2C_DMAAbort+0x148>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	08db      	lsrs	r3, r3, #3
 80053f4:	4a4a      	ldr	r2, [pc, #296]	; (8005520 <I2C_DMAAbort+0x14c>)
 80053f6:	fba2 2303 	umull	r2, r3, r2, r3
 80053fa:	0a1a      	lsrs	r2, r3, #8
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	00da      	lsls	r2, r3, #3
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800541a:	e00a      	b.n	8005432 <I2C_DMAAbort+0x5e>
    }
    count--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3b01      	subs	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800542c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005430:	d0ea      	beq.n	8005408 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543e:	2200      	movs	r2, #0
 8005440:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	2200      	movs	r2, #0
 8005450:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005460:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2200      	movs	r2, #0
 8005466:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005474:	2200      	movs	r2, #0
 8005476:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	2200      	movs	r2, #0
 8005486:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0201 	bic.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b60      	cmp	r3, #96	; 0x60
 80054a2:	d10e      	bne.n	80054c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2200      	movs	r2, #0
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054ba:	6978      	ldr	r0, [r7, #20]
 80054bc:	f7fe fcca 	bl	8003e54 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054c0:	e027      	b.n	8005512 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054c2:	7cfb      	ldrb	r3, [r7, #19]
 80054c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054c8:	2b28      	cmp	r3, #40	; 0x28
 80054ca:	d117      	bne.n	80054fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2228      	movs	r2, #40	; 0x28
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054fa:	e007      	b.n	800550c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800550c:	6978      	ldr	r0, [r7, #20]
 800550e:	f7fe fc97 	bl	8003e40 <HAL_I2C_ErrorCallback>
}
 8005512:	bf00      	nop
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	2000000c 	.word	0x2000000c
 8005520:	14f8b589 	.word	0x14f8b589

08005524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005534:	e025      	b.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d021      	beq.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553e:	f7fc ffe9 	bl	8002514 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d116      	bne.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0220 	orr.w	r2, r3, #32
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e023      	b.n	80055ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	0c1b      	lsrs	r3, r3, #16
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d10d      	bne.n	80055a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	43da      	mvns	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4013      	ands	r3, r2
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	bf0c      	ite	eq
 800559e:	2301      	moveq	r3, #1
 80055a0:	2300      	movne	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	e00c      	b.n	80055c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	43da      	mvns	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4013      	ands	r3, r2
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bf0c      	ite	eq
 80055ba:	2301      	moveq	r3, #1
 80055bc:	2300      	movne	r3, #0
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d0b6      	beq.n	8005536 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055e0:	e051      	b.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f0:	d123      	bne.n	800563a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005600:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800560a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f043 0204 	orr.w	r2, r3, #4
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e046      	b.n	80056c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d021      	beq.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fc ff67 	bl	8002514 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d116      	bne.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e020      	b.n	80056c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	0c1b      	lsrs	r3, r3, #16
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	d10c      	bne.n	80056aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	43da      	mvns	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4013      	ands	r3, r2
 800569c:	b29b      	uxth	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	bf14      	ite	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2300      	moveq	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	e00b      	b.n	80056c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	43da      	mvns	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	4013      	ands	r3, r2
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d18d      	bne.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056dc:	e02d      	b.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f900 	bl	80058e4 <I2C_IsAcknowledgeFailed>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e02d      	b.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f4:	d021      	beq.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f6:	f7fc ff0d 	bl	8002514 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	429a      	cmp	r2, r3
 8005704:	d302      	bcc.n	800570c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d116      	bne.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f043 0220 	orr.w	r2, r3, #32
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e007      	b.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	d1ca      	bne.n	80056de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800575e:	e02d      	b.n	80057bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f8bf 	bl	80058e4 <I2C_IsAcknowledgeFailed>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e02d      	b.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d021      	beq.n	80057bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005778:	f7fc fecc 	bl	8002514 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	429a      	cmp	r2, r3
 8005786:	d302      	bcc.n	800578e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d116      	bne.n	80057bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	f043 0220 	orr.w	r2, r3, #32
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e007      	b.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d1ca      	bne.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80057e0:	4b13      	ldr	r3, [pc, #76]	; (8005830 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	08db      	lsrs	r3, r3, #3
 80057e6:	4a13      	ldr	r2, [pc, #76]	; (8005834 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80057e8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ec:	0a1a      	lsrs	r2, r3, #8
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d107      	bne.n	8005812 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f043 0220 	orr.w	r2, r3, #32
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e008      	b.n	8005824 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800581c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005820:	d0e9      	beq.n	80057f6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	2000000c 	.word	0x2000000c
 8005834:	14f8b589 	.word	0x14f8b589

08005838 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005844:	e042      	b.n	80058cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b10      	cmp	r3, #16
 8005852:	d119      	bne.n	8005888 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0210 	mvn.w	r2, #16
 800585c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e029      	b.n	80058dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005888:	f7fc fe44 	bl	8002514 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	429a      	cmp	r2, r3
 8005896:	d302      	bcc.n	800589e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d116      	bne.n	80058cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	f043 0220 	orr.w	r2, r3, #32
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e007      	b.n	80058dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d6:	2b40      	cmp	r3, #64	; 0x40
 80058d8:	d1b5      	bne.n	8005846 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fa:	d11b      	bne.n	8005934 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005904:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	f043 0204 	orr.w	r2, r3, #4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005952:	d103      	bne.n	800595c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800595a:	e007      	b.n	800596c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005964:	d102      	bne.n	800596c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2208      	movs	r2, #8
 800596a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b20      	cmp	r3, #32
 800598c:	d129      	bne.n	80059e2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2224      	movs	r2, #36	; 0x24
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0201 	bic.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0210 	bic.w	r2, r2, #16
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0201 	orr.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	e000      	b.n	80059e4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80059e2:	2302      	movs	r3, #2
  }
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d12a      	bne.n	8005a60 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2224      	movs	r2, #36	; 0x24
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005a2a:	89fb      	ldrh	r3, [r7, #14]
 8005a2c:	f023 030f 	bic.w	r3, r3, #15
 8005a30:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	89fb      	ldrh	r3, [r7, #14]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	89fa      	ldrh	r2, [r7, #14]
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e000      	b.n	8005a62 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005a60:	2302      	movs	r3, #2
  }
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a70:	b08f      	sub	sp, #60	; 0x3c
 8005a72:	af0a      	add	r7, sp, #40	; 0x28
 8005a74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e10f      	b.n	8005ca0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f007 fb08 	bl	800d0b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2203      	movs	r2, #3
 8005aa4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f003 fdef 	bl	80096a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	687e      	ldr	r6, [r7, #4]
 8005acc:	466d      	mov	r5, sp
 8005ace:	f106 0410 	add.w	r4, r6, #16
 8005ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ada:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ade:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ae2:	1d33      	adds	r3, r6, #4
 8005ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ae6:	6838      	ldr	r0, [r7, #0]
 8005ae8:	f003 fcc6 	bl	8009478 <USB_CoreInit>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e0d0      	b.n	8005ca0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2100      	movs	r1, #0
 8005b04:	4618      	mov	r0, r3
 8005b06:	f003 fddd 	bl	80096c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	73fb      	strb	r3, [r7, #15]
 8005b0e:	e04a      	b.n	8005ba6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b10:	7bfa      	ldrb	r2, [r7, #15]
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	333d      	adds	r3, #61	; 0x3d
 8005b20:	2201      	movs	r2, #1
 8005b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b24:	7bfa      	ldrb	r2, [r7, #15]
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	333c      	adds	r3, #60	; 0x3c
 8005b34:	7bfa      	ldrb	r2, [r7, #15]
 8005b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b38:	7bfa      	ldrb	r2, [r7, #15]
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	b298      	uxth	r0, r3
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	3344      	adds	r3, #68	; 0x44
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b50:	7bfa      	ldrb	r2, [r7, #15]
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	4613      	mov	r3, r2
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	3340      	adds	r3, #64	; 0x40
 8005b60:	2200      	movs	r2, #0
 8005b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b64:	7bfa      	ldrb	r2, [r7, #15]
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	440b      	add	r3, r1
 8005b72:	3348      	adds	r3, #72	; 0x48
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b78:	7bfa      	ldrb	r2, [r7, #15]
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	334c      	adds	r3, #76	; 0x4c
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b8c:	7bfa      	ldrb	r2, [r7, #15]
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	3354      	adds	r3, #84	; 0x54
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
 8005ba6:	7bfa      	ldrb	r2, [r7, #15]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d3af      	bcc.n	8005b10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73fb      	strb	r3, [r7, #15]
 8005bb4:	e044      	b.n	8005c40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005bb6:	7bfa      	ldrb	r2, [r7, #15]
 8005bb8:	6879      	ldr	r1, [r7, #4]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005bcc:	7bfa      	ldrb	r2, [r7, #15]
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005bde:	7bfa      	ldrb	r2, [r7, #15]
 8005be0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005be2:	7bfa      	ldrb	r2, [r7, #15]
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	440b      	add	r3, r1
 8005bf0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005bf8:	7bfa      	ldrb	r2, [r7, #15]
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c0e:	7bfa      	ldrb	r2, [r7, #15]
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c24:	7bfa      	ldrb	r2, [r7, #15]
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
 8005c40:	7bfa      	ldrb	r2, [r7, #15]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d3b5      	bcc.n	8005bb6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	687e      	ldr	r6, [r7, #4]
 8005c52:	466d      	mov	r5, sp
 8005c54:	f106 0410 	add.w	r4, r6, #16
 8005c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c64:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c68:	1d33      	adds	r3, r6, #4
 8005c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c6c:	6838      	ldr	r0, [r7, #0]
 8005c6e:	f003 fd75 	bl	800975c <USB_DevInit>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e00d      	b.n	8005ca0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f004 fec4 	bl	800aa26 <USB_DevDisconnect>

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ca8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_PCD_Start+0x1c>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e020      	b.n	8005d06 <HAL_PCD_Start+0x5e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d109      	bne.n	8005ce8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d005      	beq.n	8005ce8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f003 fcc7 	bl	8009680 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f004 fe74 	bl	800a9e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d0e:	b590      	push	{r4, r7, lr}
 8005d10:	b08d      	sub	sp, #52	; 0x34
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f004 ff32 	bl	800ab8e <USB_GetMode>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f040 848a 	bne.w	8006646 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f004 fe96 	bl	800aa68 <USB_ReadInterrupts>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8480 	beq.w	8006644 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	0a1b      	lsrs	r3, r3, #8
 8005d4e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f004 fe83 	bl	800aa68 <USB_ReadInterrupts>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d107      	bne.n	8005d7c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695a      	ldr	r2, [r3, #20]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f002 0202 	and.w	r2, r2, #2
 8005d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f004 fe71 	bl	800aa68 <USB_ReadInterrupts>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d161      	bne.n	8005e54 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0210 	bic.w	r2, r2, #16
 8005d9e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	f003 020f 	and.w	r2, r3, #15
 8005dac:	4613      	mov	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	4413      	add	r3, r2
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	0c5b      	lsrs	r3, r3, #17
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d124      	bne.n	8005e16 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d035      	beq.n	8005e44 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	091b      	lsrs	r3, r3, #4
 8005de0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	461a      	mov	r2, r3
 8005dea:	6a38      	ldr	r0, [r7, #32]
 8005dec:	f004 fca8 	bl	800a740 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	091b      	lsrs	r3, r3, #4
 8005df8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dfc:	441a      	add	r2, r3
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	6a1a      	ldr	r2, [r3, #32]
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e0e:	441a      	add	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	621a      	str	r2, [r3, #32]
 8005e14:	e016      	b.n	8005e44 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	0c5b      	lsrs	r3, r3, #17
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	2b06      	cmp	r3, #6
 8005e20:	d110      	bne.n	8005e44 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e28:	2208      	movs	r2, #8
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6a38      	ldr	r0, [r7, #32]
 8005e2e:	f004 fc87 	bl	800a740 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	6a1a      	ldr	r2, [r3, #32]
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e3e:	441a      	add	r2, r3
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0210 	orr.w	r2, r2, #16
 8005e52:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f004 fe05 	bl	800aa68 <USB_ReadInterrupts>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e68:	f040 80a7 	bne.w	8005fba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f004 fe0a 	bl	800aa8e <USB_ReadDevAllOutEpInterrupt>
 8005e7a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005e7c:	e099      	b.n	8005fb2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 808e 	beq.w	8005fa6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	4611      	mov	r1, r2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f004 fe2e 	bl	800aaf6 <USB_ReadDevOutEPInterrupt>
 8005e9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00c      	beq.n	8005ec0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fec2 	bl	8006c44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00c      	beq.n	8005ee4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	2308      	movs	r3, #8
 8005eda:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 ff98 	bl	8006e14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f003 0310 	and.w	r3, r3, #16
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d008      	beq.n	8005f00 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efa:	461a      	mov	r2, r3
 8005efc:	2310      	movs	r3, #16
 8005efe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d030      	beq.n	8005f6c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	2b80      	cmp	r3, #128	; 0x80
 8005f14:	d109      	bne.n	8005f2a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f28:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	78db      	ldrb	r3, [r3, #3]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d108      	bne.n	8005f5a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f007 f9b1 	bl	800d2bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	461a      	mov	r2, r3
 8005f68:	2302      	movs	r3, #2
 8005f6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d008      	beq.n	8005f88 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f82:	461a      	mov	r2, r3
 8005f84:	2320      	movs	r3, #32
 8005f86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fa4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	3301      	adds	r3, #1
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f47f af62 	bne.w	8005e7e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f004 fd52 	bl	800aa68 <USB_ReadInterrupts>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fce:	f040 80db 	bne.w	8006188 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f004 fd73 	bl	800aac2 <USB_ReadDevAllInEpInterrupt>
 8005fdc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005fe2:	e0cd      	b.n	8006180 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 80c2 	beq.w	8006174 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f004 fd99 	bl	800ab32 <USB_ReadDevInEPInterrupt>
 8006000:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d057      	beq.n	80060bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	2201      	movs	r2, #1
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	43db      	mvns	r3, r3
 8006026:	69f9      	ldr	r1, [r7, #28]
 8006028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800602c:	4013      	ands	r3, r2
 800602e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	461a      	mov	r2, r3
 800603e:	2301      	movs	r3, #1
 8006040:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d132      	bne.n	80060b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604e:	4613      	mov	r3, r2
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	334c      	adds	r3, #76	; 0x4c
 800605a:	6819      	ldr	r1, [r3, #0]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006060:	4613      	mov	r3, r2
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4403      	add	r3, r0
 800606a:	3348      	adds	r3, #72	; 0x48
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4419      	add	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006074:	4613      	mov	r3, r2
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4403      	add	r3, r0
 800607e:	334c      	adds	r3, #76	; 0x4c
 8006080:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	2b00      	cmp	r3, #0
 8006086:	d113      	bne.n	80060b0 <HAL_PCD_IRQHandler+0x3a2>
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608c:	4613      	mov	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	3354      	adds	r3, #84	; 0x54
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d108      	bne.n	80060b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060a8:	461a      	mov	r2, r3
 80060aa:	2101      	movs	r1, #1
 80060ac:	f004 fda0 	bl	800abf0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f007 f87b 	bl	800d1b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d2:	461a      	mov	r2, r3
 80060d4:	2308      	movs	r3, #8
 80060d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ee:	461a      	mov	r2, r3
 80060f0:	2310      	movs	r3, #16
 80060f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d008      	beq.n	8006110 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610a:	461a      	mov	r2, r3
 800610c:	2340      	movs	r3, #64	; 0x40
 800610e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d023      	beq.n	8006162 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800611a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800611c:	6a38      	ldr	r0, [r7, #32]
 800611e:	f003 fc81 	bl	8009a24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006124:	4613      	mov	r3, r2
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	3338      	adds	r3, #56	; 0x38
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	4413      	add	r3, r2
 8006132:	3304      	adds	r3, #4
 8006134:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	78db      	ldrb	r3, [r3, #3]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d108      	bne.n	8006150 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2200      	movs	r2, #0
 8006142:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	b2db      	uxtb	r3, r3
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f007 f8c8 	bl	800d2e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	461a      	mov	r2, r3
 800615e:	2302      	movs	r3, #2
 8006160:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800616c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fcdb 	bl	8006b2a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	3301      	adds	r3, #1
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	085b      	lsrs	r3, r3, #1
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	f47f af2e 	bne.w	8005fe4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f004 fc6b 	bl	800aa68 <USB_ReadInterrupts>
 8006192:	4603      	mov	r3, r0
 8006194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800619c:	d122      	bne.n	80061e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ac:	f023 0301 	bic.w	r3, r3, #1
 80061b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d108      	bne.n	80061ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80061c4:	2100      	movs	r1, #0
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fec2 	bl	8006f50 <HAL_PCDEx_LPM_Callback>
 80061cc:	e002      	b.n	80061d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f007 f866 	bl	800d2a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80061e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f004 fc3d 	bl	800aa68 <USB_ReadInterrupts>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f8:	d112      	bne.n	8006220 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b01      	cmp	r3, #1
 8006208:	d102      	bne.n	8006210 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f007 f822 	bl	800d254 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695a      	ldr	r2, [r3, #20]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800621e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f004 fc1f 	bl	800aa68 <USB_ReadInterrupts>
 800622a:	4603      	mov	r3, r0
 800622c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006234:	f040 80b7 	bne.w	80063a6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2110      	movs	r1, #16
 8006252:	4618      	mov	r0, r3
 8006254:	f003 fbe6 	bl	8009a24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006258:	2300      	movs	r3, #0
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625c:	e046      	b.n	80062ec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626a:	461a      	mov	r2, r3
 800626c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006270:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006290:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629e:	461a      	mov	r2, r3
 80062a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	3301      	adds	r3, #1
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d3b3      	bcc.n	800625e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	69fa      	ldr	r2, [r7, #28]
 8006300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006304:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006308:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	2b00      	cmp	r3, #0
 8006310:	d016      	beq.n	8006340 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006322:	f043 030b 	orr.w	r3, r3, #11
 8006326:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006338:	f043 030b 	orr.w	r3, r3, #11
 800633c:	6453      	str	r3, [r2, #68]	; 0x44
 800633e:	e015      	b.n	800636c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800634e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006352:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006356:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006366:	f043 030b 	orr.w	r3, r3, #11
 800636a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800637a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800637e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006390:	461a      	mov	r2, r3
 8006392:	f004 fc2d 	bl	800abf0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695a      	ldr	r2, [r3, #20]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80063a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f004 fb5c 	bl	800aa68 <USB_ReadInterrupts>
 80063b0:	4603      	mov	r3, r0
 80063b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ba:	d124      	bne.n	8006406 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f004 fbf2 	bl	800abaa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f003 fba7 	bl	8009b1e <USB_GetDevSpeed>
 80063d0:	4603      	mov	r3, r0
 80063d2:	461a      	mov	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681c      	ldr	r4, [r3, #0]
 80063dc:	f001 fa28 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 80063e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	4620      	mov	r0, r4
 80063ec:	f003 f8a6 	bl	800953c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f006 ff06 	bl	800d202 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695a      	ldr	r2, [r3, #20]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006404:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f004 fb2c 	bl	800aa68 <USB_ReadInterrupts>
 8006410:	4603      	mov	r3, r0
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b08      	cmp	r3, #8
 8006418:	d10a      	bne.n	8006430 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f006 fee3 	bl	800d1e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f002 0208 	and.w	r2, r2, #8
 800642e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4618      	mov	r0, r3
 8006436:	f004 fb17 	bl	800aa68 <USB_ReadInterrupts>
 800643a:	4603      	mov	r3, r0
 800643c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006440:	2b80      	cmp	r3, #128	; 0x80
 8006442:	d122      	bne.n	800648a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006450:	2301      	movs	r3, #1
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
 8006454:	e014      	b.n	8006480 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800645a:	4613      	mov	r3, r2
 800645c:	00db      	lsls	r3, r3, #3
 800645e:	4413      	add	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	440b      	add	r3, r1
 8006464:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d105      	bne.n	800647a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	b2db      	uxtb	r3, r3
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fb27 	bl	8006ac8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	3301      	adds	r3, #1
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006486:	429a      	cmp	r2, r3
 8006488:	d3e5      	bcc.n	8006456 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4618      	mov	r0, r3
 8006490:	f004 faea 	bl	800aa68 <USB_ReadInterrupts>
 8006494:	4603      	mov	r3, r0
 8006496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800649a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800649e:	d13b      	bne.n	8006518 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064a0:	2301      	movs	r3, #1
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
 80064a4:	e02b      	b.n	80064fe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ba:	4613      	mov	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	440b      	add	r3, r1
 80064c4:	3340      	adds	r3, #64	; 0x40
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d115      	bne.n	80064f8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80064cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	da12      	bge.n	80064f8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d6:	4613      	mov	r3, r2
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	440b      	add	r3, r1
 80064e0:	333f      	adds	r3, #63	; 0x3f
 80064e2:	2201      	movs	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fae8 	bl	8006ac8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	3301      	adds	r3, #1
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006504:	429a      	cmp	r2, r3
 8006506:	d3ce      	bcc.n	80064a6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695a      	ldr	r2, [r3, #20]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	f004 faa3 	bl	800aa68 <USB_ReadInterrupts>
 8006522:	4603      	mov	r3, r0
 8006524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800652c:	d155      	bne.n	80065da <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800652e:	2301      	movs	r3, #1
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
 8006532:	e045      	b.n	80065c0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006548:	4613      	mov	r3, r2
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d12e      	bne.n	80065ba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800655c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800655e:	2b00      	cmp	r3, #0
 8006560:	da2b      	bge.n	80065ba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800656e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006572:	429a      	cmp	r2, r3
 8006574:	d121      	bne.n	80065ba <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657a:	4613      	mov	r3, r2
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006588:	2201      	movs	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065b6:	6053      	str	r3, [r2, #4]
            break;
 80065b8:	e007      	b.n	80065ca <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	3301      	adds	r3, #1
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3b4      	bcc.n	8006534 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695a      	ldr	r2, [r3, #20]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80065d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f004 fa42 	bl	800aa68 <USB_ReadInterrupts>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ee:	d10a      	bne.n	8006606 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f006 fe87 	bl	800d304 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695a      	ldr	r2, [r3, #20]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006604:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f004 fa2c 	bl	800aa68 <USB_ReadInterrupts>
 8006610:	4603      	mov	r3, r0
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b04      	cmp	r3, #4
 8006618:	d115      	bne.n	8006646 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f006 fe77 	bl	800d320 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6859      	ldr	r1, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
 8006642:	e000      	b.n	8006646 <HAL_PCD_IRQHandler+0x938>
      return;
 8006644:	bf00      	nop
    }
  }
}
 8006646:	3734      	adds	r7, #52	; 0x34
 8006648:	46bd      	mov	sp, r7
 800664a:	bd90      	pop	{r4, r7, pc}

0800664c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HAL_PCD_SetAddress+0x1a>
 8006662:	2302      	movs	r3, #2
 8006664:	e013      	b.n	800668e <HAL_PCD_SetAddress+0x42>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	78fa      	ldrb	r2, [r7, #3]
 8006672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	78fa      	ldrb	r2, [r7, #3]
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f004 f98a 	bl	800a998 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	4608      	mov	r0, r1
 80066a0:	4611      	mov	r1, r2
 80066a2:	461a      	mov	r2, r3
 80066a4:	4603      	mov	r3, r0
 80066a6:	70fb      	strb	r3, [r7, #3]
 80066a8:	460b      	mov	r3, r1
 80066aa:	803b      	strh	r3, [r7, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	da0f      	bge.n	80066dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	f003 020f 	and.w	r2, r3, #15
 80066c2:	4613      	mov	r3, r2
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	3338      	adds	r3, #56	; 0x38
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	4413      	add	r3, r2
 80066d0:	3304      	adds	r3, #4
 80066d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	705a      	strb	r2, [r3, #1]
 80066da:	e00f      	b.n	80066fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	f003 020f 	and.w	r2, r3, #15
 80066e2:	4613      	mov	r3, r2
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	3304      	adds	r3, #4
 80066f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	b2da      	uxtb	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006708:	883a      	ldrh	r2, [r7, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	78ba      	ldrb	r2, [r7, #2]
 8006712:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d004      	beq.n	8006726 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006726:	78bb      	ldrb	r3, [r7, #2]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d102      	bne.n	8006732 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_PCD_EP_Open+0xaa>
 800673c:	2302      	movs	r3, #2
 800673e:	e00e      	b.n	800675e <HAL_PCD_EP_Open+0xc8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68f9      	ldr	r1, [r7, #12]
 800674e:	4618      	mov	r0, r3
 8006750:	f003 fa0a 	bl	8009b68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800675c:	7afb      	ldrb	r3, [r7, #11]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006776:	2b00      	cmp	r3, #0
 8006778:	da0f      	bge.n	800679a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	f003 020f 	and.w	r2, r3, #15
 8006780:	4613      	mov	r3, r2
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	3338      	adds	r3, #56	; 0x38
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	4413      	add	r3, r2
 800678e:	3304      	adds	r3, #4
 8006790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	705a      	strb	r2, [r3, #1]
 8006798:	e00f      	b.n	80067ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	f003 020f 	and.w	r2, r3, #15
 80067a0:	4613      	mov	r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	3304      	adds	r3, #4
 80067b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_PCD_EP_Close+0x6e>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e00e      	b.n	80067f2 <HAL_PCD_EP_Close+0x8c>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68f9      	ldr	r1, [r7, #12]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f003 fa48 	bl	8009c78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b086      	sub	sp, #24
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
 8006806:	460b      	mov	r3, r1
 8006808:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	f003 020f 	and.w	r2, r3, #15
 8006810:	4613      	mov	r3, r2
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4413      	add	r3, r2
 8006820:	3304      	adds	r3, #4
 8006822:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2200      	movs	r2, #0
 8006834:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2200      	movs	r2, #0
 800683a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	b2da      	uxtb	r2, r3
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d102      	bne.n	8006856 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006856:	7afb      	ldrb	r3, [r7, #11]
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	6979      	ldr	r1, [r7, #20]
 800686e:	f003 fd27 	bl	800a2c0 <USB_EP0StartXfer>
 8006872:	e008      	b.n	8006886 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	461a      	mov	r2, r3
 8006880:	6979      	ldr	r1, [r7, #20]
 8006882:	f003 fad5 	bl	8009e30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	f003 020f 	and.w	r2, r3, #15
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	4613      	mov	r3, r2
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80068b2:	681b      	ldr	r3, [r3, #0]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	607a      	str	r2, [r7, #4]
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	460b      	mov	r3, r1
 80068ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068d0:	7afb      	ldrb	r3, [r7, #11]
 80068d2:	f003 020f 	and.w	r2, r3, #15
 80068d6:	4613      	mov	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	3338      	adds	r3, #56	; 0x38
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	3304      	adds	r3, #4
 80068e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2200      	movs	r2, #0
 80068f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2201      	movs	r2, #1
 80068fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006900:	7afb      	ldrb	r3, [r7, #11]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	b2da      	uxtb	r2, r3
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d102      	bne.n	800691a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800691a:	7afb      	ldrb	r3, [r7, #11]
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	2b00      	cmp	r3, #0
 8006922:	d109      	bne.n	8006938 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	b2db      	uxtb	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	6979      	ldr	r1, [r7, #20]
 8006932:	f003 fcc5 	bl	800a2c0 <USB_EP0StartXfer>
 8006936:	e008      	b.n	800694a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	6979      	ldr	r1, [r7, #20]
 8006946:	f003 fa73 	bl	8009e30 <USB_EPStartXfer>
  }

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	f003 020f 	and.w	r2, r3, #15
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	429a      	cmp	r2, r3
 800696c:	d901      	bls.n	8006972 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e050      	b.n	8006a14 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006976:	2b00      	cmp	r3, #0
 8006978:	da0f      	bge.n	800699a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	f003 020f 	and.w	r2, r3, #15
 8006980:	4613      	mov	r3, r2
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	4413      	add	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	3338      	adds	r3, #56	; 0x38
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	3304      	adds	r3, #4
 8006990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	705a      	strb	r2, [r3, #1]
 8006998:	e00d      	b.n	80069b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800699a:	78fa      	ldrb	r2, [r7, #3]
 800699c:	4613      	mov	r3, r2
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	4413      	add	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	4413      	add	r3, r2
 80069ac:	3304      	adds	r3, #4
 80069ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <HAL_PCD_EP_SetStall+0x82>
 80069d2:	2302      	movs	r3, #2
 80069d4:	e01e      	b.n	8006a14 <HAL_PCD_EP_SetStall+0xc0>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f003 ff03 	bl	800a7f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069ea:	78fb      	ldrb	r3, [r7, #3]
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10a      	bne.n	8006a0a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	b2d9      	uxtb	r1, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a04:	461a      	mov	r2, r3
 8006a06:	f004 f8f3 	bl	800abf0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	f003 020f 	and.w	r2, r3, #15
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d901      	bls.n	8006a3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e042      	b.n	8006ac0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	da0f      	bge.n	8006a62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	f003 020f 	and.w	r2, r3, #15
 8006a48:	4613      	mov	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	3338      	adds	r3, #56	; 0x38
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	4413      	add	r3, r2
 8006a56:	3304      	adds	r3, #4
 8006a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	705a      	strb	r2, [r3, #1]
 8006a60:	e00f      	b.n	8006a82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	f003 020f 	and.w	r2, r3, #15
 8006a68:	4613      	mov	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	4413      	add	r3, r2
 8006a78:	3304      	adds	r3, #4
 8006a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_PCD_EP_ClrStall+0x86>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e00e      	b.n	8006ac0 <HAL_PCD_EP_ClrStall+0xa4>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68f9      	ldr	r1, [r7, #12]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f003 ff0b 	bl	800a8cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	da0c      	bge.n	8006af6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	f003 020f 	and.w	r2, r3, #15
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	3338      	adds	r3, #56	; 0x38
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	4413      	add	r3, r2
 8006af0:	3304      	adds	r3, #4
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	e00c      	b.n	8006b10 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	f003 020f 	and.w	r2, r3, #15
 8006afc:	4613      	mov	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68f9      	ldr	r1, [r7, #12]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f003 fd2a 	bl	800a570 <USB_EPStopXfer>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006b20:	7afb      	ldrb	r3, [r7, #11]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b08a      	sub	sp, #40	; 0x28
 8006b2e:	af02      	add	r7, sp, #8
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	4613      	mov	r3, r2
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	3338      	adds	r3, #56	; 0x38
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	3304      	adds	r3, #4
 8006b50:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a1a      	ldr	r2, [r3, #32]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d901      	bls.n	8006b62 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e06c      	b.n	8006c3c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d902      	bls.n	8006b7e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	3303      	adds	r3, #3
 8006b82:	089b      	lsrs	r3, r3, #2
 8006b84:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b86:	e02b      	b.n	8006be0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d902      	bls.n	8006ba4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	3303      	adds	r3, #3
 8006ba8:	089b      	lsrs	r3, r3, #2
 8006baa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6919      	ldr	r1, [r3, #16]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	6978      	ldr	r0, [r7, #20]
 8006bc4:	f003 fd7e 	bl	800a6c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	441a      	add	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1a      	ldr	r2, [r3, #32]
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	441a      	add	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d809      	bhi.n	8006c0a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a1a      	ldr	r2, [r3, #32]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d203      	bcs.n	8006c0a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1be      	bne.n	8006b88 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	699a      	ldr	r2, [r3, #24]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d811      	bhi.n	8006c3a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	f003 030f 	and.w	r3, r3, #15
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c22:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	43db      	mvns	r3, r3
 8006c30:	6939      	ldr	r1, [r7, #16]
 8006c32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c36:	4013      	ands	r3, r2
 8006c38:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3720      	adds	r7, #32
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	333c      	adds	r3, #60	; 0x3c
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d17b      	bne.n	8006d72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d015      	beq.n	8006cb0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	4a61      	ldr	r2, [pc, #388]	; (8006e0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	f240 80b9 	bls.w	8006e00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80b3 	beq.w	8006e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cac:	6093      	str	r3, [r2, #8]
 8006cae:	e0a7      	b.n	8006e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d009      	beq.n	8006cce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	2320      	movs	r3, #32
 8006cca:	6093      	str	r3, [r2, #8]
 8006ccc:	e098      	b.n	8006e00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 8093 	bne.w	8006e00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	4a4b      	ldr	r2, [pc, #300]	; (8006e0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d90f      	bls.n	8006d02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfe:	6093      	str	r3, [r2, #8]
 8006d00:	e07e      	b.n	8006e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	4613      	mov	r3, r2
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	4413      	add	r3, r2
 8006d14:	3304      	adds	r3, #4
 8006d16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	69da      	ldr	r2, [r3, #28]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	0159      	lsls	r1, r3, #5
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	440b      	add	r3, r1
 8006d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d2e:	1ad2      	subs	r2, r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d114      	bne.n	8006d64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d109      	bne.n	8006d56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2101      	movs	r1, #1
 8006d50:	f003 ff4e 	bl	800abf0 <USB_EP0_OutStart>
 8006d54:	e006      	b.n	8006d64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	441a      	add	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f006 fa06 	bl	800d17c <HAL_PCD_DataOutStageCallback>
 8006d70:	e046      	b.n	8006e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	4a26      	ldr	r2, [pc, #152]	; (8006e10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d124      	bne.n	8006dc4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00a      	beq.n	8006d9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	461a      	mov	r2, r3
 8006d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d96:	6093      	str	r3, [r2, #8]
 8006d98:	e032      	b.n	8006e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f003 0320 	and.w	r3, r3, #32
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d008      	beq.n	8006db6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db0:	461a      	mov	r2, r3
 8006db2:	2320      	movs	r3, #32
 8006db4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f006 f9dd 	bl	800d17c <HAL_PCD_DataOutStageCallback>
 8006dc2:	e01d      	b.n	8006e00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d114      	bne.n	8006df4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d108      	bne.n	8006df4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006dec:	461a      	mov	r2, r3
 8006dee:	2100      	movs	r1, #0
 8006df0:	f003 fefe 	bl	800abf0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f006 f9be 	bl	800d17c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3720      	adds	r7, #32
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	4f54300a 	.word	0x4f54300a
 8006e10:	4f54310a 	.word	0x4f54310a

08006e14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	333c      	adds	r3, #60	; 0x3c
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4a15      	ldr	r2, [pc, #84]	; (8006e9c <PCD_EP_OutSetupPacket_int+0x88>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d90e      	bls.n	8006e68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d009      	beq.n	8006e68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	461a      	mov	r2, r3
 8006e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f006 f975 	bl	800d158 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a0a      	ldr	r2, [pc, #40]	; (8006e9c <PCD_EP_OutSetupPacket_int+0x88>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d90c      	bls.n	8006e90 <PCD_EP_OutSetupPacket_int+0x7c>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d108      	bne.n	8006e90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e88:	461a      	mov	r2, r3
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	f003 feb0 	bl	800abf0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	4f54300a 	.word	0x4f54300a

08006ea0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	70fb      	strb	r3, [r7, #3]
 8006eac:	4613      	mov	r3, r2
 8006eae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d107      	bne.n	8006ece <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006ebe:	883b      	ldrh	r3, [r7, #0]
 8006ec0:	0419      	lsls	r1, r3, #16
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	629a      	str	r2, [r3, #40]	; 0x28
 8006ecc:	e028      	b.n	8006f20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed4:	0c1b      	lsrs	r3, r3, #16
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	4413      	add	r3, r2
 8006eda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]
 8006ee0:	e00d      	b.n	8006efe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	3340      	adds	r3, #64	; 0x40
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	0c1b      	lsrs	r3, r3, #16
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	3301      	adds	r3, #1
 8006efc:	73fb      	strb	r3, [r7, #15]
 8006efe:	7bfa      	ldrb	r2, [r7, #15]
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d3ec      	bcc.n	8006ee2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006f08:	883b      	ldrh	r3, [r7, #0]
 8006f0a:	0418      	lsls	r0, r3, #16
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6819      	ldr	r1, [r3, #0]
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	4302      	orrs	r2, r0
 8006f18:	3340      	adds	r3, #64	; 0x40
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	887a      	ldrh	r2, [r7, #2]
 8006f40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e267      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d075      	beq.n	8007072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f86:	4b88      	ldr	r3, [pc, #544]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d00c      	beq.n	8006fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f92:	4b85      	ldr	r3, [pc, #532]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f9a:	2b08      	cmp	r3, #8
 8006f9c:	d112      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f9e:	4b82      	ldr	r3, [pc, #520]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006faa:	d10b      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fac:	4b7e      	ldr	r3, [pc, #504]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d05b      	beq.n	8007070 <HAL_RCC_OscConfig+0x108>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d157      	bne.n	8007070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e242      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fcc:	d106      	bne.n	8006fdc <HAL_RCC_OscConfig+0x74>
 8006fce:	4b76      	ldr	r3, [pc, #472]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a75      	ldr	r2, [pc, #468]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	e01d      	b.n	8007018 <HAL_RCC_OscConfig+0xb0>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fe4:	d10c      	bne.n	8007000 <HAL_RCC_OscConfig+0x98>
 8006fe6:	4b70      	ldr	r3, [pc, #448]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a6f      	ldr	r2, [pc, #444]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	4b6d      	ldr	r3, [pc, #436]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a6c      	ldr	r2, [pc, #432]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	e00b      	b.n	8007018 <HAL_RCC_OscConfig+0xb0>
 8007000:	4b69      	ldr	r3, [pc, #420]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a68      	ldr	r2, [pc, #416]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	4b66      	ldr	r3, [pc, #408]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a65      	ldr	r2, [pc, #404]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d013      	beq.n	8007048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007020:	f7fb fa78 	bl	8002514 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007028:	f7fb fa74 	bl	8002514 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b64      	cmp	r3, #100	; 0x64
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e207      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800703a:	4b5b      	ldr	r3, [pc, #364]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0f0      	beq.n	8007028 <HAL_RCC_OscConfig+0xc0>
 8007046:	e014      	b.n	8007072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007048:	f7fb fa64 	bl	8002514 <HAL_GetTick>
 800704c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800704e:	e008      	b.n	8007062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007050:	f7fb fa60 	bl	8002514 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b64      	cmp	r3, #100	; 0x64
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e1f3      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007062:	4b51      	ldr	r3, [pc, #324]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f0      	bne.n	8007050 <HAL_RCC_OscConfig+0xe8>
 800706e:	e000      	b.n	8007072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d063      	beq.n	8007146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800707e:	4b4a      	ldr	r3, [pc, #296]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800708a:	4b47      	ldr	r3, [pc, #284]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007092:	2b08      	cmp	r3, #8
 8007094:	d11c      	bne.n	80070d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007096:	4b44      	ldr	r3, [pc, #272]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d116      	bne.n	80070d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070a2:	4b41      	ldr	r3, [pc, #260]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <HAL_RCC_OscConfig+0x152>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d001      	beq.n	80070ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e1c7      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ba:	4b3b      	ldr	r3, [pc, #236]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	4937      	ldr	r1, [pc, #220]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070ce:	e03a      	b.n	8007146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d020      	beq.n	800711a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070d8:	4b34      	ldr	r3, [pc, #208]	; (80071ac <HAL_RCC_OscConfig+0x244>)
 80070da:	2201      	movs	r2, #1
 80070dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070de:	f7fb fa19 	bl	8002514 <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070e6:	f7fb fa15 	bl	8002514 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e1a8      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f8:	4b2b      	ldr	r3, [pc, #172]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0f0      	beq.n	80070e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007104:	4b28      	ldr	r3, [pc, #160]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	4925      	ldr	r1, [pc, #148]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007114:	4313      	orrs	r3, r2
 8007116:	600b      	str	r3, [r1, #0]
 8007118:	e015      	b.n	8007146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800711a:	4b24      	ldr	r3, [pc, #144]	; (80071ac <HAL_RCC_OscConfig+0x244>)
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7fb f9f8 	bl	8002514 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007128:	f7fb f9f4 	bl	8002514 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e187      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800713a:	4b1b      	ldr	r3, [pc, #108]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d036      	beq.n	80071c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d016      	beq.n	8007188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800715a:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <HAL_RCC_OscConfig+0x248>)
 800715c:	2201      	movs	r2, #1
 800715e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007160:	f7fb f9d8 	bl	8002514 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007168:	f7fb f9d4 	bl	8002514 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e167      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800717a:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <HAL_RCC_OscConfig+0x240>)
 800717c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0f0      	beq.n	8007168 <HAL_RCC_OscConfig+0x200>
 8007186:	e01b      	b.n	80071c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007188:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <HAL_RCC_OscConfig+0x248>)
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800718e:	f7fb f9c1 	bl	8002514 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007194:	e00e      	b.n	80071b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007196:	f7fb f9bd 	bl	8002514 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d907      	bls.n	80071b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e150      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
 80071a8:	40023800 	.word	0x40023800
 80071ac:	42470000 	.word	0x42470000
 80071b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071b4:	4b88      	ldr	r3, [pc, #544]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 80071b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1ea      	bne.n	8007196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 8097 	beq.w	80072fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071d2:	4b81      	ldr	r3, [pc, #516]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10f      	bne.n	80071fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071de:	2300      	movs	r3, #0
 80071e0:	60bb      	str	r3, [r7, #8]
 80071e2:	4b7d      	ldr	r3, [pc, #500]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	4a7c      	ldr	r2, [pc, #496]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 80071e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ec:	6413      	str	r3, [r2, #64]	; 0x40
 80071ee:	4b7a      	ldr	r3, [pc, #488]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f6:	60bb      	str	r3, [r7, #8]
 80071f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071fa:	2301      	movs	r3, #1
 80071fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071fe:	4b77      	ldr	r3, [pc, #476]	; (80073dc <HAL_RCC_OscConfig+0x474>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007206:	2b00      	cmp	r3, #0
 8007208:	d118      	bne.n	800723c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800720a:	4b74      	ldr	r3, [pc, #464]	; (80073dc <HAL_RCC_OscConfig+0x474>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a73      	ldr	r2, [pc, #460]	; (80073dc <HAL_RCC_OscConfig+0x474>)
 8007210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007216:	f7fb f97d 	bl	8002514 <HAL_GetTick>
 800721a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800721c:	e008      	b.n	8007230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800721e:	f7fb f979 	bl	8002514 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d901      	bls.n	8007230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e10c      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007230:	4b6a      	ldr	r3, [pc, #424]	; (80073dc <HAL_RCC_OscConfig+0x474>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0f0      	beq.n	800721e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d106      	bne.n	8007252 <HAL_RCC_OscConfig+0x2ea>
 8007244:	4b64      	ldr	r3, [pc, #400]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007248:	4a63      	ldr	r2, [pc, #396]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	6713      	str	r3, [r2, #112]	; 0x70
 8007250:	e01c      	b.n	800728c <HAL_RCC_OscConfig+0x324>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	2b05      	cmp	r3, #5
 8007258:	d10c      	bne.n	8007274 <HAL_RCC_OscConfig+0x30c>
 800725a:	4b5f      	ldr	r3, [pc, #380]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 800725c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725e:	4a5e      	ldr	r2, [pc, #376]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007260:	f043 0304 	orr.w	r3, r3, #4
 8007264:	6713      	str	r3, [r2, #112]	; 0x70
 8007266:	4b5c      	ldr	r3, [pc, #368]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	4a5b      	ldr	r2, [pc, #364]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 800726c:	f043 0301 	orr.w	r3, r3, #1
 8007270:	6713      	str	r3, [r2, #112]	; 0x70
 8007272:	e00b      	b.n	800728c <HAL_RCC_OscConfig+0x324>
 8007274:	4b58      	ldr	r3, [pc, #352]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007278:	4a57      	ldr	r2, [pc, #348]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 800727a:	f023 0301 	bic.w	r3, r3, #1
 800727e:	6713      	str	r3, [r2, #112]	; 0x70
 8007280:	4b55      	ldr	r3, [pc, #340]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007284:	4a54      	ldr	r2, [pc, #336]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007286:	f023 0304 	bic.w	r3, r3, #4
 800728a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d015      	beq.n	80072c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007294:	f7fb f93e 	bl	8002514 <HAL_GetTick>
 8007298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729a:	e00a      	b.n	80072b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800729c:	f7fb f93a 	bl	8002514 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e0cb      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072b2:	4b49      	ldr	r3, [pc, #292]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 80072b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d0ee      	beq.n	800729c <HAL_RCC_OscConfig+0x334>
 80072be:	e014      	b.n	80072ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072c0:	f7fb f928 	bl	8002514 <HAL_GetTick>
 80072c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072c6:	e00a      	b.n	80072de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072c8:	f7fb f924 	bl	8002514 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e0b5      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072de:	4b3e      	ldr	r3, [pc, #248]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1ee      	bne.n	80072c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d105      	bne.n	80072fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072f0:	4b39      	ldr	r3, [pc, #228]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 80072f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f4:	4a38      	ldr	r2, [pc, #224]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 80072f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 80a1 	beq.w	8007448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007306:	4b34      	ldr	r3, [pc, #208]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f003 030c 	and.w	r3, r3, #12
 800730e:	2b08      	cmp	r3, #8
 8007310:	d05c      	beq.n	80073cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d141      	bne.n	800739e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800731a:	4b31      	ldr	r3, [pc, #196]	; (80073e0 <HAL_RCC_OscConfig+0x478>)
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007320:	f7fb f8f8 	bl	8002514 <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007328:	f7fb f8f4 	bl	8002514 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e087      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800733a:	4b27      	ldr	r3, [pc, #156]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f0      	bne.n	8007328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69da      	ldr	r2, [r3, #28]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	019b      	lsls	r3, r3, #6
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	085b      	lsrs	r3, r3, #1
 800735e:	3b01      	subs	r3, #1
 8007360:	041b      	lsls	r3, r3, #16
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	061b      	lsls	r3, r3, #24
 800736a:	491b      	ldr	r1, [pc, #108]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 800736c:	4313      	orrs	r3, r2
 800736e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007370:	4b1b      	ldr	r3, [pc, #108]	; (80073e0 <HAL_RCC_OscConfig+0x478>)
 8007372:	2201      	movs	r2, #1
 8007374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007376:	f7fb f8cd 	bl	8002514 <HAL_GetTick>
 800737a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737c:	e008      	b.n	8007390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800737e:	f7fb f8c9 	bl	8002514 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b02      	cmp	r3, #2
 800738a:	d901      	bls.n	8007390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e05c      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007390:	4b11      	ldr	r3, [pc, #68]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0f0      	beq.n	800737e <HAL_RCC_OscConfig+0x416>
 800739c:	e054      	b.n	8007448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800739e:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <HAL_RCC_OscConfig+0x478>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a4:	f7fb f8b6 	bl	8002514 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073ac:	f7fb f8b2 	bl	8002514 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e045      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073be:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <HAL_RCC_OscConfig+0x470>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1f0      	bne.n	80073ac <HAL_RCC_OscConfig+0x444>
 80073ca:	e03d      	b.n	8007448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d107      	bne.n	80073e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e038      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
 80073d8:	40023800 	.word	0x40023800
 80073dc:	40007000 	.word	0x40007000
 80073e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073e4:	4b1b      	ldr	r3, [pc, #108]	; (8007454 <HAL_RCC_OscConfig+0x4ec>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d028      	beq.n	8007444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d121      	bne.n	8007444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800740a:	429a      	cmp	r2, r3
 800740c:	d11a      	bne.n	8007444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007414:	4013      	ands	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800741a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800741c:	4293      	cmp	r3, r2
 800741e:	d111      	bne.n	8007444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	3b01      	subs	r3, #1
 800742e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007430:	429a      	cmp	r2, r3
 8007432:	d107      	bne.n	8007444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007440:	429a      	cmp	r2, r3
 8007442:	d001      	beq.n	8007448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	40023800 	.word	0x40023800

08007458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e0cc      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800746c:	4b68      	ldr	r3, [pc, #416]	; (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d90c      	bls.n	8007494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800747a:	4b65      	ldr	r3, [pc, #404]	; (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007482:	4b63      	ldr	r3, [pc, #396]	; (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	d001      	beq.n	8007494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e0b8      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d020      	beq.n	80074e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074ac:	4b59      	ldr	r3, [pc, #356]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	4a58      	ldr	r2, [pc, #352]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074c4:	4b53      	ldr	r3, [pc, #332]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	4a52      	ldr	r2, [pc, #328]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074d0:	4b50      	ldr	r3, [pc, #320]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	494d      	ldr	r1, [pc, #308]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d044      	beq.n	8007578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d107      	bne.n	8007506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074f6:	4b47      	ldr	r3, [pc, #284]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d119      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e07f      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2b02      	cmp	r3, #2
 800750c:	d003      	beq.n	8007516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007512:	2b03      	cmp	r3, #3
 8007514:	d107      	bne.n	8007526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007516:	4b3f      	ldr	r3, [pc, #252]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d109      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e06f      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007526:	4b3b      	ldr	r3, [pc, #236]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e067      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007536:	4b37      	ldr	r3, [pc, #220]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f023 0203 	bic.w	r2, r3, #3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	4934      	ldr	r1, [pc, #208]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007544:	4313      	orrs	r3, r2
 8007546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007548:	f7fa ffe4 	bl	8002514 <HAL_GetTick>
 800754c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800754e:	e00a      	b.n	8007566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007550:	f7fa ffe0 	bl	8002514 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	f241 3288 	movw	r2, #5000	; 0x1388
 800755e:	4293      	cmp	r3, r2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e04f      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007566:	4b2b      	ldr	r3, [pc, #172]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f003 020c 	and.w	r2, r3, #12
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	429a      	cmp	r2, r3
 8007576:	d1eb      	bne.n	8007550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007578:	4b25      	ldr	r3, [pc, #148]	; (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 030f 	and.w	r3, r3, #15
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d20c      	bcs.n	80075a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007586:	4b22      	ldr	r3, [pc, #136]	; (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800758e:	4b20      	ldr	r3, [pc, #128]	; (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 030f 	and.w	r3, r3, #15
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d001      	beq.n	80075a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e032      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075ac:	4b19      	ldr	r3, [pc, #100]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	4916      	ldr	r1, [pc, #88]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075ca:	4b12      	ldr	r3, [pc, #72]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	490e      	ldr	r1, [pc, #56]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075de:	f000 f821 	bl	8007624 <HAL_RCC_GetSysClockFreq>
 80075e2:	4602      	mov	r2, r0
 80075e4:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	091b      	lsrs	r3, r3, #4
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	490a      	ldr	r1, [pc, #40]	; (8007618 <HAL_RCC_ClockConfig+0x1c0>)
 80075f0:	5ccb      	ldrb	r3, [r1, r3]
 80075f2:	fa22 f303 	lsr.w	r3, r2, r3
 80075f6:	4a09      	ldr	r2, [pc, #36]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80075f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fa ff44 	bl	800248c <HAL_InitTick>

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	40023c00 	.word	0x40023c00
 8007614:	40023800 	.word	0x40023800
 8007618:	0800f764 	.word	0x0800f764
 800761c:	2000000c 	.word	0x2000000c
 8007620:	20000010 	.word	0x20000010

08007624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007628:	b094      	sub	sp, #80	; 0x50
 800762a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	647b      	str	r3, [r7, #68]	; 0x44
 8007630:	2300      	movs	r3, #0
 8007632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007634:	2300      	movs	r3, #0
 8007636:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800763c:	4b79      	ldr	r3, [pc, #484]	; (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 030c 	and.w	r3, r3, #12
 8007644:	2b08      	cmp	r3, #8
 8007646:	d00d      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0x40>
 8007648:	2b08      	cmp	r3, #8
 800764a:	f200 80e1 	bhi.w	8007810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <HAL_RCC_GetSysClockFreq+0x34>
 8007652:	2b04      	cmp	r3, #4
 8007654:	d003      	beq.n	800765e <HAL_RCC_GetSysClockFreq+0x3a>
 8007656:	e0db      	b.n	8007810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007658:	4b73      	ldr	r3, [pc, #460]	; (8007828 <HAL_RCC_GetSysClockFreq+0x204>)
 800765a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800765c:	e0db      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800765e:	4b73      	ldr	r3, [pc, #460]	; (800782c <HAL_RCC_GetSysClockFreq+0x208>)
 8007660:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007662:	e0d8      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007664:	4b6f      	ldr	r3, [pc, #444]	; (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800766c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800766e:	4b6d      	ldr	r3, [pc, #436]	; (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d063      	beq.n	8007742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800767a:	4b6a      	ldr	r3, [pc, #424]	; (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	099b      	lsrs	r3, r3, #6
 8007680:	2200      	movs	r2, #0
 8007682:	63bb      	str	r3, [r7, #56]	; 0x38
 8007684:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768c:	633b      	str	r3, [r7, #48]	; 0x30
 800768e:	2300      	movs	r3, #0
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
 8007692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007696:	4622      	mov	r2, r4
 8007698:	462b      	mov	r3, r5
 800769a:	f04f 0000 	mov.w	r0, #0
 800769e:	f04f 0100 	mov.w	r1, #0
 80076a2:	0159      	lsls	r1, r3, #5
 80076a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076a8:	0150      	lsls	r0, r2, #5
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4621      	mov	r1, r4
 80076b0:	1a51      	subs	r1, r2, r1
 80076b2:	6139      	str	r1, [r7, #16]
 80076b4:	4629      	mov	r1, r5
 80076b6:	eb63 0301 	sbc.w	r3, r3, r1
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076c8:	4659      	mov	r1, fp
 80076ca:	018b      	lsls	r3, r1, #6
 80076cc:	4651      	mov	r1, sl
 80076ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076d2:	4651      	mov	r1, sl
 80076d4:	018a      	lsls	r2, r1, #6
 80076d6:	4651      	mov	r1, sl
 80076d8:	ebb2 0801 	subs.w	r8, r2, r1
 80076dc:	4659      	mov	r1, fp
 80076de:	eb63 0901 	sbc.w	r9, r3, r1
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	f04f 0300 	mov.w	r3, #0
 80076ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076f6:	4690      	mov	r8, r2
 80076f8:	4699      	mov	r9, r3
 80076fa:	4623      	mov	r3, r4
 80076fc:	eb18 0303 	adds.w	r3, r8, r3
 8007700:	60bb      	str	r3, [r7, #8]
 8007702:	462b      	mov	r3, r5
 8007704:	eb49 0303 	adc.w	r3, r9, r3
 8007708:	60fb      	str	r3, [r7, #12]
 800770a:	f04f 0200 	mov.w	r2, #0
 800770e:	f04f 0300 	mov.w	r3, #0
 8007712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007716:	4629      	mov	r1, r5
 8007718:	024b      	lsls	r3, r1, #9
 800771a:	4621      	mov	r1, r4
 800771c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007720:	4621      	mov	r1, r4
 8007722:	024a      	lsls	r2, r1, #9
 8007724:	4610      	mov	r0, r2
 8007726:	4619      	mov	r1, r3
 8007728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772a:	2200      	movs	r2, #0
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28
 800772e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007734:	f7f9 fa52 	bl	8000bdc <__aeabi_uldivmod>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4613      	mov	r3, r2
 800773e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007740:	e058      	b.n	80077f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007742:	4b38      	ldr	r3, [pc, #224]	; (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	099b      	lsrs	r3, r3, #6
 8007748:	2200      	movs	r2, #0
 800774a:	4618      	mov	r0, r3
 800774c:	4611      	mov	r1, r2
 800774e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007752:	623b      	str	r3, [r7, #32]
 8007754:	2300      	movs	r3, #0
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
 8007758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800775c:	4642      	mov	r2, r8
 800775e:	464b      	mov	r3, r9
 8007760:	f04f 0000 	mov.w	r0, #0
 8007764:	f04f 0100 	mov.w	r1, #0
 8007768:	0159      	lsls	r1, r3, #5
 800776a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800776e:	0150      	lsls	r0, r2, #5
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4641      	mov	r1, r8
 8007776:	ebb2 0a01 	subs.w	sl, r2, r1
 800777a:	4649      	mov	r1, r9
 800777c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	f04f 0300 	mov.w	r3, #0
 8007788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800778c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007794:	ebb2 040a 	subs.w	r4, r2, sl
 8007798:	eb63 050b 	sbc.w	r5, r3, fp
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	00eb      	lsls	r3, r5, #3
 80077a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077aa:	00e2      	lsls	r2, r4, #3
 80077ac:	4614      	mov	r4, r2
 80077ae:	461d      	mov	r5, r3
 80077b0:	4643      	mov	r3, r8
 80077b2:	18e3      	adds	r3, r4, r3
 80077b4:	603b      	str	r3, [r7, #0]
 80077b6:	464b      	mov	r3, r9
 80077b8:	eb45 0303 	adc.w	r3, r5, r3
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077ca:	4629      	mov	r1, r5
 80077cc:	028b      	lsls	r3, r1, #10
 80077ce:	4621      	mov	r1, r4
 80077d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077d4:	4621      	mov	r1, r4
 80077d6:	028a      	lsls	r2, r1, #10
 80077d8:	4610      	mov	r0, r2
 80077da:	4619      	mov	r1, r3
 80077dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077de:	2200      	movs	r2, #0
 80077e0:	61bb      	str	r3, [r7, #24]
 80077e2:	61fa      	str	r2, [r7, #28]
 80077e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077e8:	f7f9 f9f8 	bl	8000bdc <__aeabi_uldivmod>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4613      	mov	r3, r2
 80077f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	0c1b      	lsrs	r3, r3, #16
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	3301      	adds	r3, #1
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800780e:	e002      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <HAL_RCC_GetSysClockFreq+0x204>)
 8007812:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007818:	4618      	mov	r0, r3
 800781a:	3750      	adds	r7, #80	; 0x50
 800781c:	46bd      	mov	sp, r7
 800781e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007822:	bf00      	nop
 8007824:	40023800 	.word	0x40023800
 8007828:	00f42400 	.word	0x00f42400
 800782c:	007a1200 	.word	0x007a1200

08007830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007834:	4b03      	ldr	r3, [pc, #12]	; (8007844 <HAL_RCC_GetHCLKFreq+0x14>)
 8007836:	681b      	ldr	r3, [r3, #0]
}
 8007838:	4618      	mov	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	2000000c 	.word	0x2000000c

08007848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800784c:	f7ff fff0 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 8007850:	4602      	mov	r2, r0
 8007852:	4b05      	ldr	r3, [pc, #20]	; (8007868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	0a9b      	lsrs	r3, r3, #10
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	4903      	ldr	r1, [pc, #12]	; (800786c <HAL_RCC_GetPCLK1Freq+0x24>)
 800785e:	5ccb      	ldrb	r3, [r1, r3]
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40023800 	.word	0x40023800
 800786c:	0800f774 	.word	0x0800f774

08007870 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d008      	beq.n	800789e <HAL_SD_IRQHandler+0x2e>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f003 0308 	and.w	r3, r3, #8
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa4e 	bl	8007d38 <SD_Read_IT>
 800789c:	e165      	b.n	8007b6a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 808f 	beq.w	80079cc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6812      	ldr	r2, [r2, #0]
 80078c2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80078c6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80078ca:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 0201 	bic.w	r2, r2, #1
 80078da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d039      	beq.n	800795a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d104      	bne.n	80078fa <HAL_SD_IRQHandler+0x8a>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d011      	beq.n	800791e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f001 fc88 	bl	8009214 <SDMMC_CmdStopTransfer>
 8007904:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d008      	beq.n	800791e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	431a      	orrs	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f943 	bl	8007ba4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f240 523a 	movw	r2, #1338	; 0x53a
 8007926:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d104      	bne.n	800794a <HAL_SD_IRQHandler+0xda>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f920 	bl	8007b90 <HAL_SD_RxCpltCallback>
 8007950:	e10b      	b.n	8007b6a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f912 	bl	8007b7c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007958:	e107      	b.n	8007b6a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 8102 	beq.w	8007b6a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f003 0320 	and.w	r3, r3, #32
 800796c:	2b00      	cmp	r3, #0
 800796e:	d011      	beq.n	8007994 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f001 fc4d 	bl	8009214 <SDMMC_CmdStopTransfer>
 800797a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d008      	beq.n	8007994 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f908 	bl	8007ba4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	f040 80e5 	bne.w	8007b6a <HAL_SD_IRQHandler+0x2fa>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f040 80df 	bne.w	8007b6a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0208 	bic.w	r2, r2, #8
 80079ba:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f8d9 	bl	8007b7c <HAL_SD_TxCpltCallback>
}
 80079ca:	e0ce      	b.n	8007b6a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d008      	beq.n	80079ec <HAL_SD_IRQHandler+0x17c>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f9f8 	bl	8007dda <SD_Write_IT>
 80079ea:	e0be      	b.n	8007b6a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079f2:	f240 233a 	movw	r3, #570	; 0x23a
 80079f6:	4013      	ands	r3, r2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80b6 	beq.w	8007b6a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d005      	beq.n	8007a18 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a10:	f043 0202 	orr.w	r2, r3, #2
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1e:	f003 0308 	and.w	r3, r3, #8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	f043 0208 	orr.w	r2, r3, #8
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	f043 0220 	orr.w	r2, r3, #32
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a52:	f003 0310 	and.w	r3, r3, #16
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	f043 0210 	orr.w	r2, r3, #16
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d005      	beq.n	8007a80 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a78:	f043 0208 	orr.w	r2, r3, #8
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f240 723a 	movw	r2, #1850	; 0x73a
 8007a88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6812      	ldr	r2, [r2, #0]
 8007a94:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007a98:	f023 0302 	bic.w	r3, r3, #2
 8007a9c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f001 fbb6 	bl	8009214 <SDMMC_CmdStopTransfer>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f003 0308 	and.w	r3, r3, #8
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f869 	bl	8007ba4 <HAL_SD_ErrorCallback>
}
 8007ad2:	e04a      	b.n	8007b6a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d045      	beq.n	8007b6a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f003 0310 	and.w	r3, r3, #16
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <HAL_SD_IRQHandler+0x282>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d011      	beq.n	8007b16 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af6:	4a1f      	ldr	r2, [pc, #124]	; (8007b74 <HAL_SD_IRQHandler+0x304>)
 8007af8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fb f8bb 	bl	8002c7a <HAL_DMA_Abort_IT>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d02f      	beq.n	8007b6a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 f87c 	bl	8007c0c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007b14:	e029      	b.n	8007b6a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d104      	bne.n	8007b2a <HAL_SD_IRQHandler+0x2ba>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d011      	beq.n	8007b4e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	4a12      	ldr	r2, [pc, #72]	; (8007b78 <HAL_SD_IRQHandler+0x308>)
 8007b30:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fb f89f 	bl	8002c7a <HAL_DMA_Abort_IT>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d013      	beq.n	8007b6a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 f897 	bl	8007c7a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007b4c:	e00d      	b.n	8007b6a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f828 	bl	8007bb8 <HAL_SD_AbortCallback>
}
 8007b68:	e7ff      	b.n	8007b6a <HAL_SD_IRQHandler+0x2fa>
 8007b6a:	bf00      	nop
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	08007c0d 	.word	0x08007c0d
 8007b78:	08007c7b 	.word	0x08007c7b

08007b7c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007bd8:	f107 030c 	add.w	r3, r7, #12
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f882 	bl	8007ce8 <SD_SendStatus>
 8007be4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d005      	beq.n	8007bf8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	0a5b      	lsrs	r3, r3, #9
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007c02:	693b      	ldr	r3, [r7, #16]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c18:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c22:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff ffd1 	bl	8007bcc <HAL_SD_GetCardState>
 8007c2a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b06      	cmp	r3, #6
 8007c3e:	d002      	beq.n	8007c46 <SD_DMATxAbort+0x3a>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2b05      	cmp	r3, #5
 8007c44:	d10a      	bne.n	8007c5c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f001 fae2 	bl	8009214 <SDMMC_CmdStopTransfer>
 8007c50:	4602      	mov	r2, r0
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	431a      	orrs	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d103      	bne.n	8007c6c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7ff ffa7 	bl	8007bb8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007c6a:	e002      	b.n	8007c72 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f7ff ff99 	bl	8007ba4 <HAL_SD_ErrorCallback>
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c90:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff ff9a 	bl	8007bcc <HAL_SD_GetCardState>
 8007c98:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b06      	cmp	r3, #6
 8007cac:	d002      	beq.n	8007cb4 <SD_DMARxAbort+0x3a>
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b05      	cmp	r3, #5
 8007cb2:	d10a      	bne.n	8007cca <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 faab 	bl	8009214 <SDMMC_CmdStopTransfer>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d103      	bne.n	8007cda <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f7ff ff70 	bl	8007bb8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007cd8:	e002      	b.n	8007ce0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff ff62 	bl	8007ba4 <HAL_SD_ErrorCallback>
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d102      	bne.n	8007cfe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007cf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cfc:	e018      	b.n	8007d30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d06:	041b      	lsls	r3, r3, #16
 8007d08:	4619      	mov	r1, r3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	f001 faa4 	bl	8009258 <SDMMC_CmdSendStatus>
 8007d10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	e009      	b.n	8007d30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 fa63 	bl	80091ee <SDIO_GetResponse>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d44:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d03f      	beq.n	8007dd2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007d52:	2300      	movs	r3, #0
 8007d54:	617b      	str	r3, [r7, #20]
 8007d56:	e033      	b.n	8007dc0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f001 f9f1 	bl	8009144 <SDIO_ReadFIFO>
 8007d62:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	0a1b      	lsrs	r3, r3, #8
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3301      	adds	r3, #1
 8007d86:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	0c1b      	lsrs	r3, r3, #16
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	0e1b      	lsrs	r3, r3, #24
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3301      	adds	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	2b07      	cmp	r3, #7
 8007dc4:	d9c8      	bls.n	8007d58 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007dd2:	bf00      	nop
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b086      	sub	sp, #24
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d043      	beq.n	8007e7c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007df4:	2300      	movs	r3, #0
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	e037      	b.n	8007e6a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3301      	adds	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	021a      	lsls	r2, r3, #8
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	041a      	lsls	r2, r3, #16
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	3301      	adds	r3, #1
 8007e34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	061a      	lsls	r2, r3, #24
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f107 0208 	add.w	r2, r7, #8
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f001 f97d 	bl	800915e <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	3301      	adds	r3, #1
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b07      	cmp	r3, #7
 8007e6e:	d9c4      	bls.n	8007dfa <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007e7c:	bf00      	nop
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e07b      	b.n	8007f8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d108      	bne.n	8007eb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ea6:	d009      	beq.n	8007ebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	61da      	str	r2, [r3, #28]
 8007eae:	e005      	b.n	8007ebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d106      	bne.n	8007edc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7fa f916 	bl	8002108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ef2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f04:	431a      	orrs	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f36:	431a      	orrs	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f40:	ea42 0103 	orr.w	r1, r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	0c1b      	lsrs	r3, r3, #16
 8007f5a:	f003 0104 	and.w	r1, r3, #4
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	f003 0210 	and.w	r2, r3, #16
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	69da      	ldr	r2, [r3, #28]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b088      	sub	sp, #32
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	60f8      	str	r0, [r7, #12]
 8007f9e:	60b9      	str	r1, [r7, #8]
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d101      	bne.n	8007fb8 <HAL_SPI_Transmit+0x22>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e126      	b.n	8008206 <HAL_SPI_Transmit+0x270>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fc0:	f7fa faa8 	bl	8002514 <HAL_GetTick>
 8007fc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d002      	beq.n	8007fdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fda:	e10b      	b.n	80081f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <HAL_SPI_Transmit+0x52>
 8007fe2:	88fb      	ldrh	r3, [r7, #6]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d102      	bne.n	8007fee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fec:	e102      	b.n	80081f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2203      	movs	r2, #3
 8007ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	88fa      	ldrh	r2, [r7, #6]
 8008006:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	88fa      	ldrh	r2, [r7, #6]
 800800c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008034:	d10f      	bne.n	8008056 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008044:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008054:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008060:	2b40      	cmp	r3, #64	; 0x40
 8008062:	d007      	beq.n	8008074 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008072:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800807c:	d14b      	bne.n	8008116 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d002      	beq.n	800808c <HAL_SPI_Transmit+0xf6>
 8008086:	8afb      	ldrh	r3, [r7, #22]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d13e      	bne.n	800810a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008090:	881a      	ldrh	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809c:	1c9a      	adds	r2, r3, #2
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080b0:	e02b      	b.n	800810a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f003 0302 	and.w	r3, r3, #2
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d112      	bne.n	80080e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c4:	881a      	ldrh	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d0:	1c9a      	adds	r2, r3, #2
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080da:	b29b      	uxth	r3, r3
 80080dc:	3b01      	subs	r3, #1
 80080de:	b29a      	uxth	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80080e4:	e011      	b.n	800810a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080e6:	f7fa fa15 	bl	8002514 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d803      	bhi.n	80080fe <HAL_SPI_Transmit+0x168>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fc:	d102      	bne.n	8008104 <HAL_SPI_Transmit+0x16e>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d102      	bne.n	800810a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008108:	e074      	b.n	80081f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800810e:	b29b      	uxth	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1ce      	bne.n	80080b2 <HAL_SPI_Transmit+0x11c>
 8008114:	e04c      	b.n	80081b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <HAL_SPI_Transmit+0x18e>
 800811e:	8afb      	ldrh	r3, [r7, #22]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d140      	bne.n	80081a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	330c      	adds	r3, #12
 800812e:	7812      	ldrb	r2, [r2, #0]
 8008130:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008140:	b29b      	uxth	r3, r3
 8008142:	3b01      	subs	r3, #1
 8008144:	b29a      	uxth	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800814a:	e02c      	b.n	80081a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b02      	cmp	r3, #2
 8008158:	d113      	bne.n	8008182 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	330c      	adds	r3, #12
 8008164:	7812      	ldrb	r2, [r2, #0]
 8008166:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008176:	b29b      	uxth	r3, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008180:	e011      	b.n	80081a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008182:	f7fa f9c7 	bl	8002514 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d803      	bhi.n	800819a <HAL_SPI_Transmit+0x204>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008198:	d102      	bne.n	80081a0 <HAL_SPI_Transmit+0x20a>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80081a4:	e026      	b.n	80081f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1cd      	bne.n	800814c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 fb73 	bl	80088a0 <SPI_EndRxTxTransaction>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2220      	movs	r2, #32
 80081c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081ce:	2300      	movs	r3, #0
 80081d0:	613b      	str	r3, [r7, #16]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	613b      	str	r3, [r7, #16]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	77fb      	strb	r3, [r7, #31]
 80081f0:	e000      	b.n	80081f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80081f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008204:	7ffb      	ldrb	r3, [r7, #31]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3720      	adds	r7, #32
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b08c      	sub	sp, #48	; 0x30
 8008212:	af00      	add	r7, sp, #0
 8008214:	60f8      	str	r0, [r7, #12]
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	607a      	str	r2, [r7, #4]
 800821a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800821c:	2301      	movs	r3, #1
 800821e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800822c:	2b01      	cmp	r3, #1
 800822e:	d101      	bne.n	8008234 <HAL_SPI_TransmitReceive+0x26>
 8008230:	2302      	movs	r3, #2
 8008232:	e18a      	b.n	800854a <HAL_SPI_TransmitReceive+0x33c>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800823c:	f7fa f96a 	bl	8002514 <HAL_GetTick>
 8008240:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008252:	887b      	ldrh	r3, [r7, #2]
 8008254:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008256:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800825a:	2b01      	cmp	r3, #1
 800825c:	d00f      	beq.n	800827e <HAL_SPI_TransmitReceive+0x70>
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008264:	d107      	bne.n	8008276 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d103      	bne.n	8008276 <HAL_SPI_TransmitReceive+0x68>
 800826e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008272:	2b04      	cmp	r3, #4
 8008274:	d003      	beq.n	800827e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008276:	2302      	movs	r3, #2
 8008278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800827c:	e15b      	b.n	8008536 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d005      	beq.n	8008290 <HAL_SPI_TransmitReceive+0x82>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <HAL_SPI_TransmitReceive+0x82>
 800828a:	887b      	ldrh	r3, [r7, #2]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d103      	bne.n	8008298 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008296:	e14e      	b.n	8008536 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d003      	beq.n	80082ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2205      	movs	r2, #5
 80082a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	887a      	ldrh	r2, [r7, #2]
 80082bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	887a      	ldrh	r2, [r7, #2]
 80082c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	887a      	ldrh	r2, [r7, #2]
 80082ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	887a      	ldrh	r2, [r7, #2]
 80082d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ec:	2b40      	cmp	r3, #64	; 0x40
 80082ee:	d007      	beq.n	8008300 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008308:	d178      	bne.n	80083fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <HAL_SPI_TransmitReceive+0x10a>
 8008312:	8b7b      	ldrh	r3, [r7, #26]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d166      	bne.n	80083e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831c:	881a      	ldrh	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	1c9a      	adds	r2, r3, #2
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008332:	b29b      	uxth	r3, r3
 8008334:	3b01      	subs	r3, #1
 8008336:	b29a      	uxth	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800833c:	e053      	b.n	80083e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b02      	cmp	r3, #2
 800834a:	d11b      	bne.n	8008384 <HAL_SPI_TransmitReceive+0x176>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d016      	beq.n	8008384 <HAL_SPI_TransmitReceive+0x176>
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	2b01      	cmp	r3, #1
 800835a:	d113      	bne.n	8008384 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008360:	881a      	ldrh	r2, [r3, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836c:	1c9a      	adds	r2, r3, #2
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008376:	b29b      	uxth	r3, r3
 8008378:	3b01      	subs	r3, #1
 800837a:	b29a      	uxth	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b01      	cmp	r3, #1
 8008390:	d119      	bne.n	80083c6 <HAL_SPI_TransmitReceive+0x1b8>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008396:	b29b      	uxth	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d014      	beq.n	80083c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a6:	b292      	uxth	r2, r2
 80083a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ae:	1c9a      	adds	r2, r3, #2
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b29a      	uxth	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083c2:	2301      	movs	r3, #1
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80083c6:	f7fa f8a5 	bl	8002514 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d807      	bhi.n	80083e6 <HAL_SPI_TransmitReceive+0x1d8>
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083dc:	d003      	beq.n	80083e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80083e4:	e0a7      	b.n	8008536 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1a6      	bne.n	800833e <HAL_SPI_TransmitReceive+0x130>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1a1      	bne.n	800833e <HAL_SPI_TransmitReceive+0x130>
 80083fa:	e07c      	b.n	80084f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <HAL_SPI_TransmitReceive+0x1fc>
 8008404:	8b7b      	ldrh	r3, [r7, #26]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d16b      	bne.n	80084e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	330c      	adds	r3, #12
 8008414:	7812      	ldrb	r2, [r2, #0]
 8008416:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008426:	b29b      	uxth	r3, r3
 8008428:	3b01      	subs	r3, #1
 800842a:	b29a      	uxth	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008430:	e057      	b.n	80084e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b02      	cmp	r3, #2
 800843e:	d11c      	bne.n	800847a <HAL_SPI_TransmitReceive+0x26c>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008444:	b29b      	uxth	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d017      	beq.n	800847a <HAL_SPI_TransmitReceive+0x26c>
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	2b01      	cmp	r3, #1
 800844e:	d114      	bne.n	800847a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	330c      	adds	r3, #12
 800845a:	7812      	ldrb	r2, [r2, #0]
 800845c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800846c:	b29b      	uxth	r3, r3
 800846e:	3b01      	subs	r3, #1
 8008470:	b29a      	uxth	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b01      	cmp	r3, #1
 8008486:	d119      	bne.n	80084bc <HAL_SPI_TransmitReceive+0x2ae>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d014      	beq.n	80084bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	b2d2      	uxtb	r2, r2
 800849e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084b8:	2301      	movs	r3, #1
 80084ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80084bc:	f7fa f82a 	bl	8002514 <HAL_GetTick>
 80084c0:	4602      	mov	r2, r0
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d803      	bhi.n	80084d4 <HAL_SPI_TransmitReceive+0x2c6>
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d2:	d102      	bne.n	80084da <HAL_SPI_TransmitReceive+0x2cc>
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d103      	bne.n	80084e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80084e0:	e029      	b.n	8008536 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1a2      	bne.n	8008432 <HAL_SPI_TransmitReceive+0x224>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d19d      	bne.n	8008432 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 f9d0 	bl	80088a0 <SPI_EndRxTxTransaction>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d006      	beq.n	8008514 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2220      	movs	r2, #32
 8008510:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008512:	e010      	b.n	8008536 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10b      	bne.n	8008534 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800851c:	2300      	movs	r3, #0
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	617b      	str	r3, [r7, #20]
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	e000      	b.n	8008536 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008534:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008546:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800854a:	4618      	mov	r0, r3
 800854c:	3730      	adds	r7, #48	; 0x30
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	099b      	lsrs	r3, r3, #6
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10f      	bne.n	8008598 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	099b      	lsrs	r3, r3, #6
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d004      	beq.n	8008598 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
    return;
 8008596:	e0d7      	b.n	8008748 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	085b      	lsrs	r3, r3, #1
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <HAL_SPI_IRQHandler+0x66>
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	09db      	lsrs	r3, r3, #7
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d004      	beq.n	80085ba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	4798      	blx	r3
    return;
 80085b8:	e0c6      	b.n	8008748 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10c      	bne.n	80085e0 <HAL_SPI_IRQHandler+0x8c>
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	099b      	lsrs	r3, r3, #6
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	0a1b      	lsrs	r3, r3, #8
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 80b4 	beq.w	8008748 <HAL_SPI_IRQHandler+0x1f4>
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	095b      	lsrs	r3, r3, #5
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 80ad 	beq.w	8008748 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	099b      	lsrs	r3, r3, #6
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d023      	beq.n	8008642 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b03      	cmp	r3, #3
 8008604:	d011      	beq.n	800862a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860a:	f043 0204 	orr.w	r2, r3, #4
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008612:	2300      	movs	r3, #0
 8008614:	617b      	str	r3, [r7, #20]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	617b      	str	r3, [r7, #20]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	617b      	str	r3, [r7, #20]
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	e00b      	b.n	8008642 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800862a:	2300      	movs	r3, #0
 800862c:	613b      	str	r3, [r7, #16]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	613b      	str	r3, [r7, #16]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	613b      	str	r3, [r7, #16]
 800863e:	693b      	ldr	r3, [r7, #16]
        return;
 8008640:	e082      	b.n	8008748 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	095b      	lsrs	r3, r3, #5
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d014      	beq.n	8008678 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008652:	f043 0201 	orr.w	r2, r3, #1
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	60fb      	str	r3, [r7, #12]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	0a1b      	lsrs	r3, r3, #8
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00c      	beq.n	800869e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008688:	f043 0208 	orr.w	r2, r3, #8
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008690:	2300      	movs	r3, #0
 8008692:	60bb      	str	r3, [r7, #8]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	60bb      	str	r3, [r7, #8]
 800869c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d04f      	beq.n	8008746 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086b4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d104      	bne.n	80086d2 <HAL_SPI_IRQHandler+0x17e>
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d034      	beq.n	800873c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0203 	bic.w	r2, r2, #3
 80086e0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d011      	beq.n	800870e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ee:	4a18      	ldr	r2, [pc, #96]	; (8008750 <HAL_SPI_IRQHandler+0x1fc>)
 80086f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fa fabf 	bl	8002c7a <HAL_DMA_Abort_IT>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008706:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008712:	2b00      	cmp	r3, #0
 8008714:	d016      	beq.n	8008744 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800871a:	4a0d      	ldr	r2, [pc, #52]	; (8008750 <HAL_SPI_IRQHandler+0x1fc>)
 800871c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008722:	4618      	mov	r0, r3
 8008724:	f7fa faa9 	bl	8002c7a <HAL_DMA_Abort_IT>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008732:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800873a:	e003      	b.n	8008744 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f809 	bl	8008754 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008742:	e000      	b.n	8008746 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008744:	bf00      	nop
    return;
 8008746:	bf00      	nop
  }
}
 8008748:	3720      	adds	r7, #32
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	08008769 	.word	0x08008769

08008754 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008774:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f7ff ffe6 	bl	8008754 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008788:	bf00      	nop
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087a0:	f7f9 feb8 	bl	8002514 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	1a9b      	subs	r3, r3, r2
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	4413      	add	r3, r2
 80087ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087b0:	f7f9 feb0 	bl	8002514 <HAL_GetTick>
 80087b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087b6:	4b39      	ldr	r3, [pc, #228]	; (800889c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	015b      	lsls	r3, r3, #5
 80087bc:	0d1b      	lsrs	r3, r3, #20
 80087be:	69fa      	ldr	r2, [r7, #28]
 80087c0:	fb02 f303 	mul.w	r3, r2, r3
 80087c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087c6:	e054      	b.n	8008872 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ce:	d050      	beq.n	8008872 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087d0:	f7f9 fea0 	bl	8002514 <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d902      	bls.n	80087e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d13d      	bne.n	8008862 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80087f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087fe:	d111      	bne.n	8008824 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008808:	d004      	beq.n	8008814 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008812:	d107      	bne.n	8008824 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008822:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800882c:	d10f      	bne.n	800884e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800884c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e017      	b.n	8008892 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	3b01      	subs	r3, #1
 8008870:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	4013      	ands	r3, r2
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	429a      	cmp	r2, r3
 8008880:	bf0c      	ite	eq
 8008882:	2301      	moveq	r3, #1
 8008884:	2300      	movne	r3, #0
 8008886:	b2db      	uxtb	r3, r3
 8008888:	461a      	mov	r2, r3
 800888a:	79fb      	ldrb	r3, [r7, #7]
 800888c:	429a      	cmp	r2, r3
 800888e:	d19b      	bne.n	80087c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3720      	adds	r7, #32
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	2000000c 	.word	0x2000000c

080088a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af02      	add	r7, sp, #8
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088ac:	4b1b      	ldr	r3, [pc, #108]	; (800891c <SPI_EndRxTxTransaction+0x7c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a1b      	ldr	r2, [pc, #108]	; (8008920 <SPI_EndRxTxTransaction+0x80>)
 80088b2:	fba2 2303 	umull	r2, r3, r2, r3
 80088b6:	0d5b      	lsrs	r3, r3, #21
 80088b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088bc:	fb02 f303 	mul.w	r3, r2, r3
 80088c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088ca:	d112      	bne.n	80088f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2200      	movs	r2, #0
 80088d4:	2180      	movs	r1, #128	; 0x80
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f7ff ff5a 	bl	8008790 <SPI_WaitFlagStateUntilTimeout>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d016      	beq.n	8008910 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e6:	f043 0220 	orr.w	r2, r3, #32
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e00f      	b.n	8008912 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00a      	beq.n	800890e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008908:	2b80      	cmp	r3, #128	; 0x80
 800890a:	d0f2      	beq.n	80088f2 <SPI_EndRxTxTransaction+0x52>
 800890c:	e000      	b.n	8008910 <SPI_EndRxTxTransaction+0x70>
        break;
 800890e:	bf00      	nop
  }

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	2000000c 	.word	0x2000000c
 8008920:	165e9f81 	.word	0x165e9f81

08008924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e041      	b.n	80089ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d106      	bne.n	8008950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7f9 fc2c 	bl	80021a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3304      	adds	r3, #4
 8008960:	4619      	mov	r1, r3
 8008962:	4610      	mov	r0, r2
 8008964:	f000 fa24 	bl	8008db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b082      	sub	sp, #8
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d122      	bne.n	8008a1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d11b      	bne.n	8008a1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f06f 0202 	mvn.w	r2, #2
 80089ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	f003 0303 	and.w	r3, r3, #3
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d003      	beq.n	8008a0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f9b5 	bl	8008d74 <HAL_TIM_IC_CaptureCallback>
 8008a0a:	e005      	b.n	8008a18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f9a7 	bl	8008d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9b8 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d122      	bne.n	8008a72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f003 0304 	and.w	r3, r3, #4
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d11b      	bne.n	8008a72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f06f 0204 	mvn.w	r2, #4
 8008a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2202      	movs	r2, #2
 8008a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	699b      	ldr	r3, [r3, #24]
 8008a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d003      	beq.n	8008a60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f98b 	bl	8008d74 <HAL_TIM_IC_CaptureCallback>
 8008a5e:	e005      	b.n	8008a6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f97d 	bl	8008d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f98e 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	2b08      	cmp	r3, #8
 8008a7e:	d122      	bne.n	8008ac6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f003 0308 	and.w	r3, r3, #8
 8008a8a:	2b08      	cmp	r3, #8
 8008a8c:	d11b      	bne.n	8008ac6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f06f 0208 	mvn.w	r2, #8
 8008a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2204      	movs	r2, #4
 8008a9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	f003 0303 	and.w	r3, r3, #3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f961 	bl	8008d74 <HAL_TIM_IC_CaptureCallback>
 8008ab2:	e005      	b.n	8008ac0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f953 	bl	8008d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f964 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	f003 0310 	and.w	r3, r3, #16
 8008ad0:	2b10      	cmp	r3, #16
 8008ad2:	d122      	bne.n	8008b1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f003 0310 	and.w	r3, r3, #16
 8008ade:	2b10      	cmp	r3, #16
 8008ae0:	d11b      	bne.n	8008b1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f06f 0210 	mvn.w	r2, #16
 8008aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2208      	movs	r2, #8
 8008af0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d003      	beq.n	8008b08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f937 	bl	8008d74 <HAL_TIM_IC_CaptureCallback>
 8008b06:	e005      	b.n	8008b14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f929 	bl	8008d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f93a 	bl	8008d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d10e      	bne.n	8008b46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d107      	bne.n	8008b46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f06f 0201 	mvn.w	r2, #1
 8008b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7f8 fdfd 	bl	8001740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b50:	2b80      	cmp	r3, #128	; 0x80
 8008b52:	d10e      	bne.n	8008b72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5e:	2b80      	cmp	r3, #128	; 0x80
 8008b60:	d107      	bne.n	8008b72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fadf 	bl	8009130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7c:	2b40      	cmp	r3, #64	; 0x40
 8008b7e:	d10e      	bne.n	8008b9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8a:	2b40      	cmp	r3, #64	; 0x40
 8008b8c:	d107      	bne.n	8008b9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f8ff 	bl	8008d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	f003 0320 	and.w	r3, r3, #32
 8008ba8:	2b20      	cmp	r3, #32
 8008baa:	d10e      	bne.n	8008bca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f003 0320 	and.w	r3, r3, #32
 8008bb6:	2b20      	cmp	r3, #32
 8008bb8:	d107      	bne.n	8008bca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f06f 0220 	mvn.w	r2, #32
 8008bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 faa9 	bl	800911c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bca:	bf00      	nop
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d101      	bne.n	8008bee <HAL_TIM_ConfigClockSource+0x1c>
 8008bea:	2302      	movs	r3, #2
 8008bec:	e0b4      	b.n	8008d58 <HAL_TIM_ConfigClockSource+0x186>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c14:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c26:	d03e      	beq.n	8008ca6 <HAL_TIM_ConfigClockSource+0xd4>
 8008c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c2c:	f200 8087 	bhi.w	8008d3e <HAL_TIM_ConfigClockSource+0x16c>
 8008c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c34:	f000 8086 	beq.w	8008d44 <HAL_TIM_ConfigClockSource+0x172>
 8008c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c3c:	d87f      	bhi.n	8008d3e <HAL_TIM_ConfigClockSource+0x16c>
 8008c3e:	2b70      	cmp	r3, #112	; 0x70
 8008c40:	d01a      	beq.n	8008c78 <HAL_TIM_ConfigClockSource+0xa6>
 8008c42:	2b70      	cmp	r3, #112	; 0x70
 8008c44:	d87b      	bhi.n	8008d3e <HAL_TIM_ConfigClockSource+0x16c>
 8008c46:	2b60      	cmp	r3, #96	; 0x60
 8008c48:	d050      	beq.n	8008cec <HAL_TIM_ConfigClockSource+0x11a>
 8008c4a:	2b60      	cmp	r3, #96	; 0x60
 8008c4c:	d877      	bhi.n	8008d3e <HAL_TIM_ConfigClockSource+0x16c>
 8008c4e:	2b50      	cmp	r3, #80	; 0x50
 8008c50:	d03c      	beq.n	8008ccc <HAL_TIM_ConfigClockSource+0xfa>
 8008c52:	2b50      	cmp	r3, #80	; 0x50
 8008c54:	d873      	bhi.n	8008d3e <HAL_TIM_ConfigClockSource+0x16c>
 8008c56:	2b40      	cmp	r3, #64	; 0x40
 8008c58:	d058      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x13a>
 8008c5a:	2b40      	cmp	r3, #64	; 0x40
 8008c5c:	d86f      	bhi.n	8008d3e <HAL_TIM_ConfigClockSource+0x16c>
 8008c5e:	2b30      	cmp	r3, #48	; 0x30
 8008c60:	d064      	beq.n	8008d2c <HAL_TIM_ConfigClockSource+0x15a>
 8008c62:	2b30      	cmp	r3, #48	; 0x30
 8008c64:	d86b      	bhi.n	8008d3e <HAL_TIM_ConfigClockSource+0x16c>
 8008c66:	2b20      	cmp	r3, #32
 8008c68:	d060      	beq.n	8008d2c <HAL_TIM_ConfigClockSource+0x15a>
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d867      	bhi.n	8008d3e <HAL_TIM_ConfigClockSource+0x16c>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d05c      	beq.n	8008d2c <HAL_TIM_ConfigClockSource+0x15a>
 8008c72:	2b10      	cmp	r3, #16
 8008c74:	d05a      	beq.n	8008d2c <HAL_TIM_ConfigClockSource+0x15a>
 8008c76:	e062      	b.n	8008d3e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6818      	ldr	r0, [r3, #0]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	6899      	ldr	r1, [r3, #8]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f000 f9ac 	bl	8008fe4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	609a      	str	r2, [r3, #8]
      break;
 8008ca4:	e04f      	b.n	8008d46 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	6899      	ldr	r1, [r3, #8]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	f000 f995 	bl	8008fe4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689a      	ldr	r2, [r3, #8]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cc8:	609a      	str	r2, [r3, #8]
      break;
 8008cca:	e03c      	b.n	8008d46 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	6859      	ldr	r1, [r3, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	f000 f909 	bl	8008ef0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2150      	movs	r1, #80	; 0x50
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 f962 	bl	8008fae <TIM_ITRx_SetConfig>
      break;
 8008cea:	e02c      	b.n	8008d46 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	6859      	ldr	r1, [r3, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	f000 f928 	bl	8008f4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2160      	movs	r1, #96	; 0x60
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 f952 	bl	8008fae <TIM_ITRx_SetConfig>
      break;
 8008d0a:	e01c      	b.n	8008d46 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6818      	ldr	r0, [r3, #0]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	6859      	ldr	r1, [r3, #4]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f000 f8e9 	bl	8008ef0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2140      	movs	r1, #64	; 0x40
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 f942 	bl	8008fae <TIM_ITRx_SetConfig>
      break;
 8008d2a:	e00c      	b.n	8008d46 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4619      	mov	r1, r3
 8008d36:	4610      	mov	r0, r2
 8008d38:	f000 f939 	bl	8008fae <TIM_ITRx_SetConfig>
      break;
 8008d3c:	e003      	b.n	8008d46 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	73fb      	strb	r3, [r7, #15]
      break;
 8008d42:	e000      	b.n	8008d46 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008d44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a40      	ldr	r2, [pc, #256]	; (8008ec4 <TIM_Base_SetConfig+0x114>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d013      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dce:	d00f      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a3d      	ldr	r2, [pc, #244]	; (8008ec8 <TIM_Base_SetConfig+0x118>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00b      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a3c      	ldr	r2, [pc, #240]	; (8008ecc <TIM_Base_SetConfig+0x11c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d007      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a3b      	ldr	r2, [pc, #236]	; (8008ed0 <TIM_Base_SetConfig+0x120>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d003      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a3a      	ldr	r2, [pc, #232]	; (8008ed4 <TIM_Base_SetConfig+0x124>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d108      	bne.n	8008e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a2f      	ldr	r2, [pc, #188]	; (8008ec4 <TIM_Base_SetConfig+0x114>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d02b      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e10:	d027      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a2c      	ldr	r2, [pc, #176]	; (8008ec8 <TIM_Base_SetConfig+0x118>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d023      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a2b      	ldr	r2, [pc, #172]	; (8008ecc <TIM_Base_SetConfig+0x11c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d01f      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a2a      	ldr	r2, [pc, #168]	; (8008ed0 <TIM_Base_SetConfig+0x120>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d01b      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a29      	ldr	r2, [pc, #164]	; (8008ed4 <TIM_Base_SetConfig+0x124>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d017      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a28      	ldr	r2, [pc, #160]	; (8008ed8 <TIM_Base_SetConfig+0x128>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d013      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a27      	ldr	r2, [pc, #156]	; (8008edc <TIM_Base_SetConfig+0x12c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d00f      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a26      	ldr	r2, [pc, #152]	; (8008ee0 <TIM_Base_SetConfig+0x130>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d00b      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a25      	ldr	r2, [pc, #148]	; (8008ee4 <TIM_Base_SetConfig+0x134>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d007      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a24      	ldr	r2, [pc, #144]	; (8008ee8 <TIM_Base_SetConfig+0x138>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d003      	beq.n	8008e62 <TIM_Base_SetConfig+0xb2>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a23      	ldr	r2, [pc, #140]	; (8008eec <TIM_Base_SetConfig+0x13c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d108      	bne.n	8008e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a0a      	ldr	r2, [pc, #40]	; (8008ec4 <TIM_Base_SetConfig+0x114>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d003      	beq.n	8008ea8 <TIM_Base_SetConfig+0xf8>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a0c      	ldr	r2, [pc, #48]	; (8008ed4 <TIM_Base_SetConfig+0x124>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d103      	bne.n	8008eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	691a      	ldr	r2, [r3, #16]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	615a      	str	r2, [r3, #20]
}
 8008eb6:	bf00      	nop
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	40010000 	.word	0x40010000
 8008ec8:	40000400 	.word	0x40000400
 8008ecc:	40000800 	.word	0x40000800
 8008ed0:	40000c00 	.word	0x40000c00
 8008ed4:	40010400 	.word	0x40010400
 8008ed8:	40014000 	.word	0x40014000
 8008edc:	40014400 	.word	0x40014400
 8008ee0:	40014800 	.word	0x40014800
 8008ee4:	40001800 	.word	0x40001800
 8008ee8:	40001c00 	.word	0x40001c00
 8008eec:	40002000 	.word	0x40002000

08008ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	f023 0201 	bic.w	r2, r3, #1
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f023 030a 	bic.w	r3, r3, #10
 8008f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	621a      	str	r2, [r3, #32]
}
 8008f42:	bf00      	nop
 8008f44:	371c      	adds	r7, #28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b087      	sub	sp, #28
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	f023 0210 	bic.w	r2, r3, #16
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	031b      	lsls	r3, r3, #12
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	621a      	str	r2, [r3, #32]
}
 8008fa2:	bf00      	nop
 8008fa4:	371c      	adds	r7, #28
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b085      	sub	sp, #20
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	f043 0307 	orr.w	r3, r3, #7
 8008fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	609a      	str	r2, [r3, #8]
}
 8008fd8:	bf00      	nop
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	021a      	lsls	r2, r3, #8
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	431a      	orrs	r2, r3
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	4313      	orrs	r3, r2
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	4313      	orrs	r3, r2
 8009010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	609a      	str	r2, [r3, #8]
}
 8009018:	bf00      	nop
 800901a:	371c      	adds	r7, #28
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009034:	2b01      	cmp	r3, #1
 8009036:	d101      	bne.n	800903c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009038:	2302      	movs	r3, #2
 800903a:	e05a      	b.n	80090f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2202      	movs	r2, #2
 8009048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a21      	ldr	r2, [pc, #132]	; (8009100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d022      	beq.n	80090c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009088:	d01d      	beq.n	80090c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1d      	ldr	r2, [pc, #116]	; (8009104 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d018      	beq.n	80090c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a1b      	ldr	r2, [pc, #108]	; (8009108 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d013      	beq.n	80090c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a1a      	ldr	r2, [pc, #104]	; (800910c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d00e      	beq.n	80090c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a18      	ldr	r2, [pc, #96]	; (8009110 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d009      	beq.n	80090c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a17      	ldr	r2, [pc, #92]	; (8009114 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d004      	beq.n	80090c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a15      	ldr	r2, [pc, #84]	; (8009118 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d10c      	bne.n	80090e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	40010000 	.word	0x40010000
 8009104:	40000400 	.word	0x40000400
 8009108:	40000800 	.word	0x40000800
 800910c:	40000c00 	.word	0x40000c00
 8009110:	40010400 	.word	0x40010400
 8009114:	40014000 	.word	0x40014000
 8009118:	40001800 	.word	0x40001800

0800911c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800919e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80091a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80091aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80091ba:	f023 030f 	bic.w	r3, r3, #15
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	431a      	orrs	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	b2db      	uxtb	r3, r3
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b085      	sub	sp, #20
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3314      	adds	r3, #20
 80091fc:	461a      	mov	r2, r3
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	4413      	add	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
}  
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800921c:	2300      	movs	r3, #0
 800921e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009220:	230c      	movs	r3, #12
 8009222:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009224:	2340      	movs	r3, #64	; 0x40
 8009226:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009228:	2300      	movs	r3, #0
 800922a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800922c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009230:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009232:	f107 0308 	add.w	r3, r7, #8
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7ff ffa1 	bl	8009180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800923e:	4a05      	ldr	r2, [pc, #20]	; (8009254 <SDMMC_CmdStopTransfer+0x40>)
 8009240:	210c      	movs	r1, #12
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f82a 	bl	800929c <SDMMC_GetCmdResp1>
 8009248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800924a:	69fb      	ldr	r3, [r7, #28]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3720      	adds	r7, #32
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	05f5e100 	.word	0x05f5e100

08009258 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009266:	230d      	movs	r3, #13
 8009268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800926a:	2340      	movs	r3, #64	; 0x40
 800926c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800926e:	2300      	movs	r3, #0
 8009270:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009276:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009278:	f107 0308 	add.w	r3, r7, #8
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff ff7e 	bl	8009180 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009284:	f241 3288 	movw	r2, #5000	; 0x1388
 8009288:	210d      	movs	r1, #13
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f806 	bl	800929c <SDMMC_GetCmdResp1>
 8009290:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009292:	69fb      	ldr	r3, [r7, #28]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3720      	adds	r7, #32
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	460b      	mov	r3, r1
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80092aa:	4b70      	ldr	r3, [pc, #448]	; (800946c <SDMMC_GetCmdResp1+0x1d0>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a70      	ldr	r2, [pc, #448]	; (8009470 <SDMMC_GetCmdResp1+0x1d4>)
 80092b0:	fba2 2303 	umull	r2, r3, r2, r3
 80092b4:	0a5a      	lsrs	r2, r3, #9
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	fb02 f303 	mul.w	r3, r2, r3
 80092bc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	1e5a      	subs	r2, r3, #1
 80092c2:	61fa      	str	r2, [r7, #28]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d102      	bne.n	80092ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092cc:	e0c9      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0ef      	beq.n	80092be <SDMMC_GetCmdResp1+0x22>
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1ea      	bne.n	80092be <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d004      	beq.n	80092fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2204      	movs	r2, #4
 80092f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092fa:	2304      	movs	r3, #4
 80092fc:	e0b1      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2201      	movs	r2, #1
 800930e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009310:	2301      	movs	r3, #1
 8009312:	e0a6      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	22c5      	movs	r2, #197	; 0xc5
 8009318:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f7ff ff5a 	bl	80091d4 <SDIO_GetCommandResponse>
 8009320:	4603      	mov	r3, r0
 8009322:	461a      	mov	r2, r3
 8009324:	7afb      	ldrb	r3, [r7, #11]
 8009326:	4293      	cmp	r3, r2
 8009328:	d001      	beq.n	800932e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800932a:	2301      	movs	r3, #1
 800932c:	e099      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800932e:	2100      	movs	r1, #0
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f7ff ff5c 	bl	80091ee <SDIO_GetResponse>
 8009336:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	4b4e      	ldr	r3, [pc, #312]	; (8009474 <SDMMC_GetCmdResp1+0x1d8>)
 800933c:	4013      	ands	r3, r2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009342:	2300      	movs	r3, #0
 8009344:	e08d      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2b00      	cmp	r3, #0
 800934a:	da02      	bge.n	8009352 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800934c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009350:	e087      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800935c:	2340      	movs	r3, #64	; 0x40
 800935e:	e080      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800936a:	2380      	movs	r3, #128	; 0x80
 800936c:	e079      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800937c:	e071      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800938c:	e069      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800939c:	e061      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80093a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093ac:	e059      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80093b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093bc:	e051      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80093c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093cc:	e049      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80093d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093dc:	e041      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80093e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ec:	e039      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80093f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80093fc:	e031      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009408:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800940c:	e029      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009418:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800941c:	e021      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009428:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800942c:	e019      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009438:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800943c:	e011      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009448:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800944c:	e009      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f003 0308 	and.w	r3, r3, #8
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009458:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800945c:	e001      	b.n	8009462 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800945e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009462:	4618      	mov	r0, r3
 8009464:	3720      	adds	r7, #32
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	2000000c 	.word	0x2000000c
 8009470:	10624dd3 	.word	0x10624dd3
 8009474:	fdffe008 	.word	0xfdffe008

08009478 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009478:	b084      	sub	sp, #16
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	f107 001c 	add.w	r0, r7, #28
 8009486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	2b01      	cmp	r3, #1
 800948e:	d122      	bne.n	80094d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80094a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d105      	bne.n	80094ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f001 fbee 	bl	800acac <USB_CoreReset>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]
 80094d4:	e01a      	b.n	800950c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f001 fbe2 	bl	800acac <USB_CoreReset>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80094ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d106      	bne.n	8009500 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	639a      	str	r2, [r3, #56]	; 0x38
 80094fe:	e005      	b.n	800950c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950e:	2b01      	cmp	r3, #1
 8009510:	d10b      	bne.n	800952a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f043 0206 	orr.w	r2, r3, #6
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f043 0220 	orr.w	r2, r3, #32
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009536:	b004      	add	sp, #16
 8009538:	4770      	bx	lr
	...

0800953c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800954a:	79fb      	ldrb	r3, [r7, #7]
 800954c:	2b02      	cmp	r3, #2
 800954e:	d165      	bne.n	800961c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	4a41      	ldr	r2, [pc, #260]	; (8009658 <USB_SetTurnaroundTime+0x11c>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d906      	bls.n	8009566 <USB_SetTurnaroundTime+0x2a>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	4a40      	ldr	r2, [pc, #256]	; (800965c <USB_SetTurnaroundTime+0x120>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d202      	bcs.n	8009566 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009560:	230f      	movs	r3, #15
 8009562:	617b      	str	r3, [r7, #20]
 8009564:	e062      	b.n	800962c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	4a3c      	ldr	r2, [pc, #240]	; (800965c <USB_SetTurnaroundTime+0x120>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d306      	bcc.n	800957c <USB_SetTurnaroundTime+0x40>
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	4a3b      	ldr	r2, [pc, #236]	; (8009660 <USB_SetTurnaroundTime+0x124>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d202      	bcs.n	800957c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009576:	230e      	movs	r3, #14
 8009578:	617b      	str	r3, [r7, #20]
 800957a:	e057      	b.n	800962c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	4a38      	ldr	r2, [pc, #224]	; (8009660 <USB_SetTurnaroundTime+0x124>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d306      	bcc.n	8009592 <USB_SetTurnaroundTime+0x56>
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	4a37      	ldr	r2, [pc, #220]	; (8009664 <USB_SetTurnaroundTime+0x128>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d202      	bcs.n	8009592 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800958c:	230d      	movs	r3, #13
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	e04c      	b.n	800962c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	4a33      	ldr	r2, [pc, #204]	; (8009664 <USB_SetTurnaroundTime+0x128>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d306      	bcc.n	80095a8 <USB_SetTurnaroundTime+0x6c>
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	4a32      	ldr	r2, [pc, #200]	; (8009668 <USB_SetTurnaroundTime+0x12c>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d802      	bhi.n	80095a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80095a2:	230c      	movs	r3, #12
 80095a4:	617b      	str	r3, [r7, #20]
 80095a6:	e041      	b.n	800962c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	4a2f      	ldr	r2, [pc, #188]	; (8009668 <USB_SetTurnaroundTime+0x12c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d906      	bls.n	80095be <USB_SetTurnaroundTime+0x82>
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	4a2e      	ldr	r2, [pc, #184]	; (800966c <USB_SetTurnaroundTime+0x130>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d802      	bhi.n	80095be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80095b8:	230b      	movs	r3, #11
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	e036      	b.n	800962c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	4a2a      	ldr	r2, [pc, #168]	; (800966c <USB_SetTurnaroundTime+0x130>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d906      	bls.n	80095d4 <USB_SetTurnaroundTime+0x98>
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	4a29      	ldr	r2, [pc, #164]	; (8009670 <USB_SetTurnaroundTime+0x134>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d802      	bhi.n	80095d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80095ce:	230a      	movs	r3, #10
 80095d0:	617b      	str	r3, [r7, #20]
 80095d2:	e02b      	b.n	800962c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	4a26      	ldr	r2, [pc, #152]	; (8009670 <USB_SetTurnaroundTime+0x134>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d906      	bls.n	80095ea <USB_SetTurnaroundTime+0xae>
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	4a25      	ldr	r2, [pc, #148]	; (8009674 <USB_SetTurnaroundTime+0x138>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d202      	bcs.n	80095ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80095e4:	2309      	movs	r3, #9
 80095e6:	617b      	str	r3, [r7, #20]
 80095e8:	e020      	b.n	800962c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	4a21      	ldr	r2, [pc, #132]	; (8009674 <USB_SetTurnaroundTime+0x138>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d306      	bcc.n	8009600 <USB_SetTurnaroundTime+0xc4>
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	4a20      	ldr	r2, [pc, #128]	; (8009678 <USB_SetTurnaroundTime+0x13c>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d802      	bhi.n	8009600 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80095fa:	2308      	movs	r3, #8
 80095fc:	617b      	str	r3, [r7, #20]
 80095fe:	e015      	b.n	800962c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	4a1d      	ldr	r2, [pc, #116]	; (8009678 <USB_SetTurnaroundTime+0x13c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d906      	bls.n	8009616 <USB_SetTurnaroundTime+0xda>
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	4a1c      	ldr	r2, [pc, #112]	; (800967c <USB_SetTurnaroundTime+0x140>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d202      	bcs.n	8009616 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009610:	2307      	movs	r3, #7
 8009612:	617b      	str	r3, [r7, #20]
 8009614:	e00a      	b.n	800962c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009616:	2306      	movs	r3, #6
 8009618:	617b      	str	r3, [r7, #20]
 800961a:	e007      	b.n	800962c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d102      	bne.n	8009628 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009622:	2309      	movs	r3, #9
 8009624:	617b      	str	r3, [r7, #20]
 8009626:	e001      	b.n	800962c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009628:	2309      	movs	r3, #9
 800962a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	68da      	ldr	r2, [r3, #12]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	029b      	lsls	r3, r3, #10
 8009640:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009644:	431a      	orrs	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	00d8acbf 	.word	0x00d8acbf
 800965c:	00e4e1c0 	.word	0x00e4e1c0
 8009660:	00f42400 	.word	0x00f42400
 8009664:	01067380 	.word	0x01067380
 8009668:	011a499f 	.word	0x011a499f
 800966c:	01312cff 	.word	0x01312cff
 8009670:	014ca43f 	.word	0x014ca43f
 8009674:	016e3600 	.word	0x016e3600
 8009678:	01a6ab1f 	.word	0x01a6ab1f
 800967c:	01e84800 	.word	0x01e84800

08009680 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f043 0201 	orr.w	r2, r3, #1
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b083      	sub	sp, #12
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f023 0201 	bic.w	r2, r3, #1
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	460b      	mov	r3, r1
 80096ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096e0:	78fb      	ldrb	r3, [r7, #3]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d115      	bne.n	8009712 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80096f2:	2001      	movs	r0, #1
 80096f4:	f7f8 ff1a 	bl	800252c <HAL_Delay>
      ms++;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3301      	adds	r3, #1
 80096fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 fa45 	bl	800ab8e <USB_GetMode>
 8009704:	4603      	mov	r3, r0
 8009706:	2b01      	cmp	r3, #1
 8009708:	d01e      	beq.n	8009748 <USB_SetCurrentMode+0x84>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b31      	cmp	r3, #49	; 0x31
 800970e:	d9f0      	bls.n	80096f2 <USB_SetCurrentMode+0x2e>
 8009710:	e01a      	b.n	8009748 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009712:	78fb      	ldrb	r3, [r7, #3]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d115      	bne.n	8009744 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009724:	2001      	movs	r0, #1
 8009726:	f7f8 ff01 	bl	800252c <HAL_Delay>
      ms++;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3301      	adds	r3, #1
 800972e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f001 fa2c 	bl	800ab8e <USB_GetMode>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <USB_SetCurrentMode+0x84>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2b31      	cmp	r3, #49	; 0x31
 8009740:	d9f0      	bls.n	8009724 <USB_SetCurrentMode+0x60>
 8009742:	e001      	b.n	8009748 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	e005      	b.n	8009754 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b32      	cmp	r3, #50	; 0x32
 800974c:	d101      	bne.n	8009752 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e000      	b.n	8009754 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800975c:	b084      	sub	sp, #16
 800975e:	b580      	push	{r7, lr}
 8009760:	b086      	sub	sp, #24
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800976a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009776:	2300      	movs	r3, #0
 8009778:	613b      	str	r3, [r7, #16]
 800977a:	e009      	b.n	8009790 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	3340      	adds	r3, #64	; 0x40
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	2200      	movs	r2, #0
 8009788:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	3301      	adds	r3, #1
 800978e:	613b      	str	r3, [r7, #16]
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2b0e      	cmp	r3, #14
 8009794:	d9f2      	bls.n	800977c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009798:	2b00      	cmp	r3, #0
 800979a:	d11c      	bne.n	80097d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097aa:	f043 0302 	orr.w	r3, r3, #2
 80097ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	639a      	str	r2, [r3, #56]	; 0x38
 80097d4:	e00b      	b.n	80097ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097f4:	461a      	mov	r2, r3
 80097f6:	2300      	movs	r3, #0
 80097f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009800:	4619      	mov	r1, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009808:	461a      	mov	r2, r3
 800980a:	680b      	ldr	r3, [r1, #0]
 800980c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	2b01      	cmp	r3, #1
 8009812:	d10c      	bne.n	800982e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d104      	bne.n	8009824 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800981a:	2100      	movs	r1, #0
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f965 	bl	8009aec <USB_SetDevSpeed>
 8009822:	e008      	b.n	8009836 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009824:	2101      	movs	r1, #1
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f960 	bl	8009aec <USB_SetDevSpeed>
 800982c:	e003      	b.n	8009836 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800982e:	2103      	movs	r1, #3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f95b 	bl	8009aec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009836:	2110      	movs	r1, #16
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f8f3 	bl	8009a24 <USB_FlushTxFifo>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f91f 	bl	8009a8c <USB_FlushRxFifo>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800985e:	461a      	mov	r2, r3
 8009860:	2300      	movs	r3, #0
 8009862:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800986a:	461a      	mov	r2, r3
 800986c:	2300      	movs	r3, #0
 800986e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009876:	461a      	mov	r2, r3
 8009878:	2300      	movs	r3, #0
 800987a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800987c:	2300      	movs	r3, #0
 800987e:	613b      	str	r3, [r7, #16]
 8009880:	e043      	b.n	800990a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009898:	d118      	bne.n	80098cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10a      	bne.n	80098b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ac:	461a      	mov	r2, r3
 80098ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	e013      	b.n	80098de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	4413      	add	r3, r2
 80098be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c2:	461a      	mov	r2, r3
 80098c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80098c8:	6013      	str	r3, [r2, #0]
 80098ca:	e008      	b.n	80098de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d8:	461a      	mov	r2, r3
 80098da:	2300      	movs	r3, #0
 80098dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ea:	461a      	mov	r2, r3
 80098ec:	2300      	movs	r3, #0
 80098ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fc:	461a      	mov	r2, r3
 80098fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009902:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	3301      	adds	r3, #1
 8009908:	613b      	str	r3, [r7, #16]
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	429a      	cmp	r2, r3
 8009910:	d3b7      	bcc.n	8009882 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009912:	2300      	movs	r3, #0
 8009914:	613b      	str	r3, [r7, #16]
 8009916:	e043      	b.n	80099a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800992a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800992e:	d118      	bne.n	8009962 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10a      	bne.n	800994c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009942:	461a      	mov	r2, r3
 8009944:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	e013      	b.n	8009974 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009958:	461a      	mov	r2, r3
 800995a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	e008      	b.n	8009974 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996e:	461a      	mov	r2, r3
 8009970:	2300      	movs	r3, #0
 8009972:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	015a      	lsls	r2, r3, #5
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4413      	add	r3, r2
 800997c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009980:	461a      	mov	r2, r3
 8009982:	2300      	movs	r3, #0
 8009984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009992:	461a      	mov	r2, r3
 8009994:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009998:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3301      	adds	r3, #1
 800999e:	613b      	str	r3, [r7, #16]
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d3b7      	bcc.n	8009918 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80099c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d105      	bne.n	80099dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	f043 0210 	orr.w	r2, r3, #16
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	4b0f      	ldr	r3, [pc, #60]	; (8009a20 <USB_DevInit+0x2c4>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80099e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d005      	beq.n	80099fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	f043 0208 	orr.w	r2, r3, #8
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d107      	bne.n	8009a10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a08:	f043 0304 	orr.w	r3, r3, #4
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a1c:	b004      	add	sp, #16
 8009a1e:	4770      	bx	lr
 8009a20:	803c3800 	.word	0x803c3800

08009a24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	3301      	adds	r3, #1
 8009a36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	4a13      	ldr	r2, [pc, #76]	; (8009a88 <USB_FlushTxFifo+0x64>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d901      	bls.n	8009a44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a40:	2303      	movs	r3, #3
 8009a42:	e01b      	b.n	8009a7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	daf2      	bge.n	8009a32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	019b      	lsls	r3, r3, #6
 8009a54:	f043 0220 	orr.w	r2, r3, #32
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	4a08      	ldr	r2, [pc, #32]	; (8009a88 <USB_FlushTxFifo+0x64>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d901      	bls.n	8009a6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e006      	b.n	8009a7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	f003 0320 	and.w	r3, r3, #32
 8009a76:	2b20      	cmp	r3, #32
 8009a78:	d0f0      	beq.n	8009a5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	00030d40 	.word	0x00030d40

08009a8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a94:	2300      	movs	r3, #0
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	4a11      	ldr	r2, [pc, #68]	; (8009ae8 <USB_FlushRxFifo+0x5c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d901      	bls.n	8009aaa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	e018      	b.n	8009adc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	daf2      	bge.n	8009a98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2210      	movs	r2, #16
 8009aba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4a08      	ldr	r2, [pc, #32]	; (8009ae8 <USB_FlushRxFifo+0x5c>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d901      	bls.n	8009ace <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e006      	b.n	8009adc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	f003 0310 	and.w	r3, r3, #16
 8009ad6:	2b10      	cmp	r3, #16
 8009ad8:	d0f0      	beq.n	8009abc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	00030d40 	.word	0x00030d40

08009aec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	68f9      	ldr	r1, [r7, #12]
 8009b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b087      	sub	sp, #28
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f003 0306 	and.w	r3, r3, #6
 8009b36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d102      	bne.n	8009b44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	75fb      	strb	r3, [r7, #23]
 8009b42:	e00a      	b.n	8009b5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d002      	beq.n	8009b50 <USB_GetDevSpeed+0x32>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b06      	cmp	r3, #6
 8009b4e:	d102      	bne.n	8009b56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b50:	2302      	movs	r3, #2
 8009b52:	75fb      	strb	r3, [r7, #23]
 8009b54:	e001      	b.n	8009b5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b56:	230f      	movs	r3, #15
 8009b58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	371c      	adds	r7, #28
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	785b      	ldrb	r3, [r3, #1]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d13a      	bne.n	8009bfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b8a:	69da      	ldr	r2, [r3, #28]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	f003 030f 	and.w	r3, r3, #15
 8009b94:	2101      	movs	r1, #1
 8009b96:	fa01 f303 	lsl.w	r3, r1, r3
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	68f9      	ldr	r1, [r7, #12]
 8009b9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	015a      	lsls	r2, r3, #5
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	4413      	add	r3, r2
 8009bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d155      	bne.n	8009c68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	791b      	ldrb	r3, [r3, #4]
 8009bd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009bd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	059b      	lsls	r3, r3, #22
 8009bde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009be0:	4313      	orrs	r3, r2
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	0151      	lsls	r1, r2, #5
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	440a      	add	r2, r1
 8009bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	e036      	b.n	8009c68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c00:	69da      	ldr	r2, [r3, #28]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	f003 030f 	and.w	r3, r3, #15
 8009c0a:	2101      	movs	r1, #1
 8009c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c10:	041b      	lsls	r3, r3, #16
 8009c12:	68f9      	ldr	r1, [r7, #12]
 8009c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d11a      	bne.n	8009c68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	791b      	ldrb	r3, [r3, #4]
 8009c4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c4e:	430b      	orrs	r3, r1
 8009c50:	4313      	orrs	r3, r2
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	0151      	lsls	r1, r2, #5
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	440a      	add	r2, r1
 8009c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
	...

08009c78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	785b      	ldrb	r3, [r3, #1]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d161      	bne.n	8009d58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009caa:	d11f      	bne.n	8009cec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	0151      	lsls	r1, r2, #5
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	015a      	lsls	r2, r3, #5
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	0151      	lsls	r1, r2, #5
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	440a      	add	r2, r1
 8009ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	f003 030f 	and.w	r3, r3, #15
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	43db      	mvns	r3, r3
 8009d06:	68f9      	ldr	r1, [r7, #12]
 8009d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d16:	69da      	ldr	r2, [r3, #28]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	f003 030f 	and.w	r3, r3, #15
 8009d20:	2101      	movs	r1, #1
 8009d22:	fa01 f303 	lsl.w	r3, r1, r3
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	43db      	mvns	r3, r3
 8009d2a:	68f9      	ldr	r1, [r7, #12]
 8009d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d30:	4013      	ands	r3, r2
 8009d32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	015a      	lsls	r2, r3, #5
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	0159      	lsls	r1, r3, #5
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	440b      	add	r3, r1
 8009d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4b35      	ldr	r3, [pc, #212]	; (8009e28 <USB_DeactivateEndpoint+0x1b0>)
 8009d52:	4013      	ands	r3, r2
 8009d54:	600b      	str	r3, [r1, #0]
 8009d56:	e060      	b.n	8009e1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d6e:	d11f      	bne.n	8009db0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	015a      	lsls	r2, r3, #5
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4413      	add	r3, r2
 8009d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	0151      	lsls	r1, r2, #5
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	440a      	add	r2, r1
 8009d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	0151      	lsls	r1, r2, #5
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	440a      	add	r2, r1
 8009da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009daa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	f003 030f 	and.w	r3, r3, #15
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8009dc6:	041b      	lsls	r3, r3, #16
 8009dc8:	43db      	mvns	r3, r3
 8009dca:	68f9      	ldr	r1, [r7, #12]
 8009dcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dda:	69da      	ldr	r2, [r3, #28]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	f003 030f 	and.w	r3, r3, #15
 8009de4:	2101      	movs	r1, #1
 8009de6:	fa01 f303 	lsl.w	r3, r1, r3
 8009dea:	041b      	lsls	r3, r3, #16
 8009dec:	43db      	mvns	r3, r3
 8009dee:	68f9      	ldr	r1, [r7, #12]
 8009df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009df4:	4013      	ands	r3, r2
 8009df6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	015a      	lsls	r2, r3, #5
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	0159      	lsls	r1, r3, #5
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	440b      	add	r3, r1
 8009e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e12:	4619      	mov	r1, r3
 8009e14:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <USB_DeactivateEndpoint+0x1b4>)
 8009e16:	4013      	ands	r3, r2
 8009e18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	ec337800 	.word	0xec337800
 8009e2c:	eff37800 	.word	0xeff37800

08009e30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b08a      	sub	sp, #40	; 0x28
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	785b      	ldrb	r3, [r3, #1]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	f040 815c 	bne.w	800a10a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d132      	bne.n	8009ec0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	69ba      	ldr	r2, [r7, #24]
 8009e6a:	0151      	lsls	r1, r2, #5
 8009e6c:	69fa      	ldr	r2, [r7, #28]
 8009e6e:	440a      	add	r2, r1
 8009e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	015a      	lsls	r2, r3, #5
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	4413      	add	r3, r2
 8009e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	69ba      	ldr	r2, [r7, #24]
 8009e8e:	0151      	lsls	r1, r2, #5
 8009e90:	69fa      	ldr	r2, [r7, #28]
 8009e92:	440a      	add	r2, r1
 8009e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	015a      	lsls	r2, r3, #5
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	0151      	lsls	r1, r2, #5
 8009eb0:	69fa      	ldr	r2, [r7, #28]
 8009eb2:	440a      	add	r2, r1
 8009eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eb8:	0cdb      	lsrs	r3, r3, #19
 8009eba:	04db      	lsls	r3, r3, #19
 8009ebc:	6113      	str	r3, [r2, #16]
 8009ebe:	e074      	b.n	8009faa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	015a      	lsls	r2, r3, #5
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	69ba      	ldr	r2, [r7, #24]
 8009ed0:	0151      	lsls	r1, r2, #5
 8009ed2:	69fa      	ldr	r2, [r7, #28]
 8009ed4:	440a      	add	r2, r1
 8009ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eda:	0cdb      	lsrs	r3, r3, #19
 8009edc:	04db      	lsls	r3, r3, #19
 8009ede:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	69ba      	ldr	r2, [r7, #24]
 8009ef0:	0151      	lsls	r1, r2, #5
 8009ef2:	69fa      	ldr	r2, [r7, #28]
 8009ef4:	440a      	add	r2, r1
 8009ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009efa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009efe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f10:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	6999      	ldr	r1, [r3, #24]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	440b      	add	r3, r1
 8009f1c:	1e59      	subs	r1, r3, #1
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f26:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009f28:	4b9d      	ldr	r3, [pc, #628]	; (800a1a0 <USB_EPStartXfer+0x370>)
 8009f2a:	400b      	ands	r3, r1
 8009f2c:	69b9      	ldr	r1, [r7, #24]
 8009f2e:	0148      	lsls	r0, r1, #5
 8009f30:	69f9      	ldr	r1, [r7, #28]
 8009f32:	4401      	add	r1, r0
 8009f34:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f48:	691a      	ldr	r2, [r3, #16]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f52:	69b9      	ldr	r1, [r7, #24]
 8009f54:	0148      	lsls	r0, r1, #5
 8009f56:	69f9      	ldr	r1, [r7, #28]
 8009f58:	4401      	add	r1, r0
 8009f5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	791b      	ldrb	r3, [r3, #4]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d11f      	bne.n	8009faa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	0151      	lsls	r1, r2, #5
 8009f7c:	69fa      	ldr	r2, [r7, #28]
 8009f7e:	440a      	add	r2, r1
 8009f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f84:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009f88:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	69fa      	ldr	r2, [r7, #28]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fa8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009faa:	79fb      	ldrb	r3, [r7, #7]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d14b      	bne.n	800a048 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d009      	beq.n	8009fcc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	015a      	lsls	r2, r3, #5
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	791b      	ldrb	r3, [r3, #4]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d128      	bne.n	800a026 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d110      	bne.n	800a006 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	69ba      	ldr	r2, [r7, #24]
 8009ff4:	0151      	lsls	r1, r2, #5
 8009ff6:	69fa      	ldr	r2, [r7, #28]
 8009ff8:	440a      	add	r2, r1
 8009ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ffe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	e00f      	b.n	800a026 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	015a      	lsls	r2, r3, #5
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	69ba      	ldr	r2, [r7, #24]
 800a016:	0151      	lsls	r1, r2, #5
 800a018:	69fa      	ldr	r2, [r7, #28]
 800a01a:	440a      	add	r2, r1
 800a01c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a024:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	015a      	lsls	r2, r3, #5
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	4413      	add	r3, r2
 800a02e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	69ba      	ldr	r2, [r7, #24]
 800a036:	0151      	lsls	r1, r2, #5
 800a038:	69fa      	ldr	r2, [r7, #28]
 800a03a:	440a      	add	r2, r1
 800a03c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a040:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	e133      	b.n	800a2b0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	69ba      	ldr	r2, [r7, #24]
 800a058:	0151      	lsls	r1, r2, #5
 800a05a:	69fa      	ldr	r2, [r7, #28]
 800a05c:	440a      	add	r2, r1
 800a05e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a062:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a066:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	791b      	ldrb	r3, [r3, #4]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d015      	beq.n	800a09c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 811b 	beq.w	800a2b0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	f003 030f 	and.w	r3, r3, #15
 800a08a:	2101      	movs	r1, #1
 800a08c:	fa01 f303 	lsl.w	r3, r1, r3
 800a090:	69f9      	ldr	r1, [r7, #28]
 800a092:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a096:	4313      	orrs	r3, r2
 800a098:	634b      	str	r3, [r1, #52]	; 0x34
 800a09a:	e109      	b.n	800a2b0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d110      	bne.n	800a0ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	0151      	lsls	r1, r2, #5
 800a0be:	69fa      	ldr	r2, [r7, #28]
 800a0c0:	440a      	add	r2, r1
 800a0c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0ca:	6013      	str	r3, [r2, #0]
 800a0cc:	e00f      	b.n	800a0ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	015a      	lsls	r2, r3, #5
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	69ba      	ldr	r2, [r7, #24]
 800a0de:	0151      	lsls	r1, r2, #5
 800a0e0:	69fa      	ldr	r2, [r7, #28]
 800a0e2:	440a      	add	r2, r1
 800a0e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	6919      	ldr	r1, [r3, #16]
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	781a      	ldrb	r2, [r3, #0]
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	b298      	uxth	r0, r3
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	4603      	mov	r3, r0
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f000 fade 	bl	800a6c4 <USB_WritePacket>
 800a108:	e0d2      	b.n	800a2b0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	015a      	lsls	r2, r3, #5
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	4413      	add	r3, r2
 800a112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	0151      	lsls	r1, r2, #5
 800a11c:	69fa      	ldr	r2, [r7, #28]
 800a11e:	440a      	add	r2, r1
 800a120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a124:	0cdb      	lsrs	r3, r3, #19
 800a126:	04db      	lsls	r3, r3, #19
 800a128:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	0151      	lsls	r1, r2, #5
 800a13c:	69fa      	ldr	r2, [r7, #28]
 800a13e:	440a      	add	r2, r1
 800a140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a144:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a148:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a14c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d126      	bne.n	800a1a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a162:	691a      	ldr	r2, [r3, #16]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a16c:	69b9      	ldr	r1, [r7, #24]
 800a16e:	0148      	lsls	r0, r1, #5
 800a170:	69f9      	ldr	r1, [r7, #28]
 800a172:	4401      	add	r1, r0
 800a174:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a178:	4313      	orrs	r3, r2
 800a17a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	4413      	add	r3, r2
 800a184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	0151      	lsls	r1, r2, #5
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	440a      	add	r2, r1
 800a192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a19a:	6113      	str	r3, [r2, #16]
 800a19c:	e03a      	b.n	800a214 <USB_EPStartXfer+0x3e4>
 800a19e:	bf00      	nop
 800a1a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	699a      	ldr	r2, [r3, #24]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	1e5a      	subs	r2, r3, #1
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	8afa      	ldrh	r2, [r7, #22]
 800a1c0:	fb03 f202 	mul.w	r2, r3, r2
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d4:	691a      	ldr	r2, [r3, #16]
 800a1d6:	8afb      	ldrh	r3, [r7, #22]
 800a1d8:	04d9      	lsls	r1, r3, #19
 800a1da:	4b38      	ldr	r3, [pc, #224]	; (800a2bc <USB_EPStartXfer+0x48c>)
 800a1dc:	400b      	ands	r3, r1
 800a1de:	69b9      	ldr	r1, [r7, #24]
 800a1e0:	0148      	lsls	r0, r1, #5
 800a1e2:	69f9      	ldr	r1, [r7, #28]
 800a1e4:	4401      	add	r1, r0
 800a1e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	015a      	lsls	r2, r3, #5
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1fa:	691a      	ldr	r2, [r3, #16]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a204:	69b9      	ldr	r1, [r7, #24]
 800a206:	0148      	lsls	r0, r1, #5
 800a208:	69f9      	ldr	r1, [r7, #28]
 800a20a:	4401      	add	r1, r0
 800a20c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a210:	4313      	orrs	r3, r2
 800a212:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a214:	79fb      	ldrb	r3, [r7, #7]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d10d      	bne.n	800a236 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d009      	beq.n	800a236 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	6919      	ldr	r1, [r3, #16]
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a232:	460a      	mov	r2, r1
 800a234:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	791b      	ldrb	r3, [r3, #4]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d128      	bne.n	800a290 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d110      	bne.n	800a270 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	015a      	lsls	r2, r3, #5
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	4413      	add	r3, r2
 800a256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	69ba      	ldr	r2, [r7, #24]
 800a25e:	0151      	lsls	r1, r2, #5
 800a260:	69fa      	ldr	r2, [r7, #28]
 800a262:	440a      	add	r2, r1
 800a264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a26c:	6013      	str	r3, [r2, #0]
 800a26e:	e00f      	b.n	800a290 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	4413      	add	r3, r2
 800a278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	0151      	lsls	r1, r2, #5
 800a282:	69fa      	ldr	r2, [r7, #28]
 800a284:	440a      	add	r2, r1
 800a286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a28a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a28e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	015a      	lsls	r2, r3, #5
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	4413      	add	r3, r2
 800a298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	69ba      	ldr	r2, [r7, #24]
 800a2a0:	0151      	lsls	r1, r2, #5
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	440a      	add	r2, r1
 800a2a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3720      	adds	r7, #32
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	1ff80000 	.word	0x1ff80000

0800a2c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	785b      	ldrb	r3, [r3, #1]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	f040 80ce 	bne.w	800a47e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d132      	bne.n	800a350 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	015a      	lsls	r2, r3, #5
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	0151      	lsls	r1, r2, #5
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	440a      	add	r2, r1
 800a300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a304:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a308:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a30c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	4413      	add	r3, r2
 800a316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	0151      	lsls	r1, r2, #5
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	440a      	add	r2, r1
 800a324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a328:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a32c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	4413      	add	r3, r2
 800a336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	0151      	lsls	r1, r2, #5
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	440a      	add	r2, r1
 800a344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a348:	0cdb      	lsrs	r3, r3, #19
 800a34a:	04db      	lsls	r3, r3, #19
 800a34c:	6113      	str	r3, [r2, #16]
 800a34e:	e04e      	b.n	800a3ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	015a      	lsls	r2, r3, #5
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	4413      	add	r3, r2
 800a358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	0151      	lsls	r1, r2, #5
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	440a      	add	r2, r1
 800a366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a36a:	0cdb      	lsrs	r3, r3, #19
 800a36c:	04db      	lsls	r3, r3, #19
 800a36e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	0151      	lsls	r1, r2, #5
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	440a      	add	r2, r1
 800a386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a38a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a38e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a392:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	699a      	ldr	r2, [r3, #24]
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d903      	bls.n	800a3a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	68da      	ldr	r2, [r3, #12]
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	0151      	lsls	r1, r2, #5
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	440a      	add	r2, r1
 800a3be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d4:	691a      	ldr	r2, [r3, #16]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3de:	6939      	ldr	r1, [r7, #16]
 800a3e0:	0148      	lsls	r0, r1, #5
 800a3e2:	6979      	ldr	r1, [r7, #20]
 800a3e4:	4401      	add	r1, r0
 800a3e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d11e      	bne.n	800a432 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d009      	beq.n	800a410 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	4413      	add	r3, r2
 800a404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a408:	461a      	mov	r2, r3
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	695b      	ldr	r3, [r3, #20]
 800a40e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	4413      	add	r3, r2
 800a418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	0151      	lsls	r1, r2, #5
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	440a      	add	r2, r1
 800a426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a42a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	e097      	b.n	800a562 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	0151      	lsls	r1, r2, #5
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	440a      	add	r2, r1
 800a448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a44c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a450:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 8083 	beq.w	800a562 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	f003 030f 	and.w	r3, r3, #15
 800a46c:	2101      	movs	r1, #1
 800a46e:	fa01 f303 	lsl.w	r3, r1, r3
 800a472:	6979      	ldr	r1, [r7, #20]
 800a474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a478:	4313      	orrs	r3, r2
 800a47a:	634b      	str	r3, [r1, #52]	; 0x34
 800a47c:	e071      	b.n	800a562 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	015a      	lsls	r2, r3, #5
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	4413      	add	r3, r2
 800a486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	0151      	lsls	r1, r2, #5
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	440a      	add	r2, r1
 800a494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a498:	0cdb      	lsrs	r3, r3, #19
 800a49a:	04db      	lsls	r3, r3, #19
 800a49c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	0151      	lsls	r1, r2, #5
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	440a      	add	r2, r1
 800a4b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	68da      	ldr	r2, [r3, #12]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	68da      	ldr	r2, [r3, #12]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	015a      	lsls	r2, r3, #5
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	0151      	lsls	r1, r2, #5
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	440a      	add	r2, r1
 800a4f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	4413      	add	r3, r2
 800a502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a506:	691a      	ldr	r2, [r3, #16]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	69db      	ldr	r3, [r3, #28]
 800a50c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a510:	6939      	ldr	r1, [r7, #16]
 800a512:	0148      	lsls	r0, r1, #5
 800a514:	6979      	ldr	r1, [r7, #20]
 800a516:	4401      	add	r1, r0
 800a518:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a51c:	4313      	orrs	r3, r2
 800a51e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a520:	79fb      	ldrb	r3, [r7, #7]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d10d      	bne.n	800a542 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d009      	beq.n	800a542 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	6919      	ldr	r1, [r3, #16]
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53e:	460a      	mov	r2, r1
 800a540:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	015a      	lsls	r2, r3, #5
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	4413      	add	r3, r2
 800a54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	0151      	lsls	r1, r2, #5
 800a554:	697a      	ldr	r2, [r7, #20]
 800a556:	440a      	add	r2, r1
 800a558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a55c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a560:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	371c      	adds	r7, #28
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a57e:	2300      	movs	r3, #0
 800a580:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	785b      	ldrb	r3, [r3, #1]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d14a      	bne.n	800a624 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5a6:	f040 8086 	bne.w	800a6b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	7812      	ldrb	r2, [r2, #0]
 800a5be:	0151      	lsls	r1, r2, #5
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	440a      	add	r2, r1
 800a5c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a5cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	7812      	ldrb	r2, [r2, #0]
 800a5e2:	0151      	lsls	r1, r2, #5
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	440a      	add	r2, r1
 800a5e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f242 7210 	movw	r2, #10000	; 0x2710
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d902      	bls.n	800a608 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	75fb      	strb	r3, [r7, #23]
          break;
 800a606:	e056      	b.n	800a6b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	015a      	lsls	r2, r3, #5
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	4413      	add	r3, r2
 800a612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a61c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a620:	d0e7      	beq.n	800a5f2 <USB_EPStopXfer+0x82>
 800a622:	e048      	b.n	800a6b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	015a      	lsls	r2, r3, #5
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	4413      	add	r3, r2
 800a62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a63c:	d13b      	bne.n	800a6b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	7812      	ldrb	r2, [r2, #0]
 800a652:	0151      	lsls	r1, r2, #5
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	440a      	add	r2, r1
 800a658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a65c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a660:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	7812      	ldrb	r2, [r2, #0]
 800a676:	0151      	lsls	r1, r2, #5
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	440a      	add	r2, r1
 800a67c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a684:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3301      	adds	r3, #1
 800a68a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a692:	4293      	cmp	r3, r2
 800a694:	d902      	bls.n	800a69c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	75fb      	strb	r3, [r7, #23]
          break;
 800a69a:	e00c      	b.n	800a6b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6b4:	d0e7      	beq.n	800a686 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a6b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	371c      	adds	r7, #28
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b089      	sub	sp, #36	; 0x24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	71fb      	strb	r3, [r7, #7]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a6e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d123      	bne.n	800a732 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a6ea:	88bb      	ldrh	r3, [r7, #4]
 800a6ec:	3303      	adds	r3, #3
 800a6ee:	089b      	lsrs	r3, r3, #2
 800a6f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	61bb      	str	r3, [r7, #24]
 800a6f6:	e018      	b.n	800a72a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	031a      	lsls	r2, r3, #12
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a704:	461a      	mov	r2, r3
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	3301      	adds	r3, #1
 800a710:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	3301      	adds	r3, #1
 800a716:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	3301      	adds	r3, #1
 800a71c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	3301      	adds	r3, #1
 800a722:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	3301      	adds	r3, #1
 800a728:	61bb      	str	r3, [r7, #24]
 800a72a:	69ba      	ldr	r2, [r7, #24]
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d3e2      	bcc.n	800a6f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3724      	adds	r7, #36	; 0x24
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a740:	b480      	push	{r7}
 800a742:	b08b      	sub	sp, #44	; 0x2c
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	4613      	mov	r3, r2
 800a74c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a756:	88fb      	ldrh	r3, [r7, #6]
 800a758:	089b      	lsrs	r3, r3, #2
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a75e:	88fb      	ldrh	r3, [r7, #6]
 800a760:	f003 0303 	and.w	r3, r3, #3
 800a764:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a766:	2300      	movs	r3, #0
 800a768:	623b      	str	r3, [r7, #32]
 800a76a:	e014      	b.n	800a796 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	601a      	str	r2, [r3, #0]
    pDest++;
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	3301      	adds	r3, #1
 800a77c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	3301      	adds	r3, #1
 800a782:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	3301      	adds	r3, #1
 800a788:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	3301      	adds	r3, #1
 800a78e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a790:	6a3b      	ldr	r3, [r7, #32]
 800a792:	3301      	adds	r3, #1
 800a794:	623b      	str	r3, [r7, #32]
 800a796:	6a3a      	ldr	r2, [r7, #32]
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d3e6      	bcc.n	800a76c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a79e:	8bfb      	ldrh	r3, [r7, #30]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d01e      	beq.n	800a7e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f107 0310 	add.w	r3, r7, #16
 800a7b4:	6812      	ldr	r2, [r2, #0]
 800a7b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	00db      	lsls	r3, r3, #3
 800a7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	701a      	strb	r2, [r3, #0]
      i++;
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	623b      	str	r3, [r7, #32]
      pDest++;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a7d6:	8bfb      	ldrh	r3, [r7, #30]
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a7dc:	8bfb      	ldrh	r3, [r7, #30]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1ea      	bne.n	800a7b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	372c      	adds	r7, #44	; 0x2c
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	785b      	ldrb	r3, [r3, #1]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d12c      	bne.n	800a866 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	db12      	blt.n	800a844 <USB_EPSetStall+0x54>
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00f      	beq.n	800a844 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	015a      	lsls	r2, r3, #5
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	4413      	add	r3, r2
 800a82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	0151      	lsls	r1, r2, #5
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	440a      	add	r2, r1
 800a83a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a83e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a842:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	015a      	lsls	r2, r3, #5
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	0151      	lsls	r1, r2, #5
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	440a      	add	r2, r1
 800a85a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a85e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	e02b      	b.n	800a8be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	015a      	lsls	r2, r3, #5
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	4413      	add	r3, r2
 800a86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	db12      	blt.n	800a89e <USB_EPSetStall+0xae>
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00f      	beq.n	800a89e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	015a      	lsls	r2, r3, #5
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	4413      	add	r3, r2
 800a886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	0151      	lsls	r1, r2, #5
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	440a      	add	r2, r1
 800a894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a898:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a89c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	015a      	lsls	r2, r3, #5
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	0151      	lsls	r1, r2, #5
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	440a      	add	r2, r1
 800a8b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a8bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	785b      	ldrb	r3, [r3, #1]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d128      	bne.n	800a93a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	015a      	lsls	r2, r3, #5
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	0151      	lsls	r1, r2, #5
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	440a      	add	r2, r1
 800a8fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a902:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a906:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	791b      	ldrb	r3, [r3, #4]
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d003      	beq.n	800a918 <USB_EPClearStall+0x4c>
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	791b      	ldrb	r3, [r3, #4]
 800a914:	2b02      	cmp	r3, #2
 800a916:	d138      	bne.n	800a98a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	015a      	lsls	r2, r3, #5
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4413      	add	r3, r2
 800a920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	0151      	lsls	r1, r2, #5
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	440a      	add	r2, r1
 800a92e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a936:	6013      	str	r3, [r2, #0]
 800a938:	e027      	b.n	800a98a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	015a      	lsls	r2, r3, #5
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	4413      	add	r3, r2
 800a942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	0151      	lsls	r1, r2, #5
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	440a      	add	r2, r1
 800a950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a954:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a958:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	791b      	ldrb	r3, [r3, #4]
 800a95e:	2b03      	cmp	r3, #3
 800a960:	d003      	beq.n	800a96a <USB_EPClearStall+0x9e>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	791b      	ldrb	r3, [r3, #4]
 800a966:	2b02      	cmp	r3, #2
 800a968:	d10f      	bne.n	800a98a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	015a      	lsls	r2, r3, #5
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	0151      	lsls	r1, r2, #5
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	440a      	add	r2, r1
 800a980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a988:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a9ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	011b      	lsls	r3, r3, #4
 800a9c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a9cc:	68f9      	ldr	r1, [r7, #12]
 800a9ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9fe:	f023 0303 	bic.w	r3, r3, #3
 800aa02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa12:	f023 0302 	bic.w	r3, r3, #2
 800aa16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b085      	sub	sp, #20
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa40:	f023 0303 	bic.w	r3, r3, #3
 800aa44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa54:	f043 0302 	orr.w	r3, r3, #2
 800aa58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa80:	68fb      	ldr	r3, [r7, #12]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b085      	sub	sp, #20
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaaa:	69db      	ldr	r3, [r3, #28]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	4013      	ands	r3, r2
 800aab0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	0c1b      	lsrs	r3, r3, #16
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b085      	sub	sp, #20
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	4013      	ands	r3, r2
 800aae4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	b29b      	uxth	r3, r3
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	460b      	mov	r3, r1
 800ab00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ab06:	78fb      	ldrb	r3, [r7, #3]
 800ab08:	015a      	lsls	r2, r3, #5
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	4013      	ands	r3, r2
 800ab22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab24:	68bb      	ldr	r3, [r7, #8]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab32:	b480      	push	{r7}
 800ab34:	b087      	sub	sp, #28
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ab56:	78fb      	ldrb	r3, [r7, #3]
 800ab58:	f003 030f 	and.w	r3, r3, #15
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab62:	01db      	lsls	r3, r3, #7
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	693a      	ldr	r2, [r7, #16]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ab6c:	78fb      	ldrb	r3, [r7, #3]
 800ab6e:	015a      	lsls	r2, r3, #5
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	4413      	add	r3, r2
 800ab74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	693a      	ldr	r2, [r7, #16]
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab80:	68bb      	ldr	r3, [r7, #8]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	371c      	adds	r7, #28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b083      	sub	sp, #12
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	f003 0301 	and.w	r3, r3, #1
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr

0800abaa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800abaa:	b480      	push	{r7}
 800abac:	b085      	sub	sp, #20
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abc4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800abc8:	f023 0307 	bic.w	r3, r3, #7
 800abcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abe0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	460b      	mov	r3, r1
 800abfa:	607a      	str	r2, [r7, #4]
 800abfc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	333c      	adds	r3, #60	; 0x3c
 800ac06:	3304      	adds	r3, #4
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	4a26      	ldr	r2, [pc, #152]	; (800aca8 <USB_EP0_OutStart+0xb8>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d90a      	bls.n	800ac2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac24:	d101      	bne.n	800ac2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	e037      	b.n	800ac9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac30:	461a      	mov	r2, r3
 800ac32:	2300      	movs	r3, #0
 800ac34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac58:	f043 0318 	orr.w	r3, r3, #24
 800ac5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ac70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ac72:	7afb      	ldrb	r3, [r7, #11]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d10f      	bne.n	800ac98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac7e:	461a      	mov	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ac96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	371c      	adds	r7, #28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	4f54300a 	.word	0x4f54300a

0800acac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acb4:	2300      	movs	r3, #0
 800acb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	3301      	adds	r3, #1
 800acbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	4a13      	ldr	r2, [pc, #76]	; (800ad10 <USB_CoreReset+0x64>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d901      	bls.n	800acca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800acc6:	2303      	movs	r3, #3
 800acc8:	e01b      	b.n	800ad02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	daf2      	bge.n	800acb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800acd2:	2300      	movs	r3, #0
 800acd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	f043 0201 	orr.w	r2, r3, #1
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3301      	adds	r3, #1
 800ace6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	4a09      	ldr	r2, [pc, #36]	; (800ad10 <USB_CoreReset+0x64>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d901      	bls.n	800acf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e006      	b.n	800ad02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	f003 0301 	and.w	r3, r3, #1
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d0f0      	beq.n	800ace2 <USB_CoreReset+0x36>

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	00030d40 	.word	0x00030d40

0800ad14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ad24:	f002 fc94 	bl	800d650 <USBD_static_malloc>
 800ad28:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d109      	bne.n	800ad44 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	32b0      	adds	r2, #176	; 0xb0
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ad40:	2302      	movs	r3, #2
 800ad42:	e0d4      	b.n	800aeee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ad44:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ad48:	2100      	movs	r1, #0
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f002 fd16 	bl	800d77c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	32b0      	adds	r2, #176	; 0xb0
 800ad5a:	68f9      	ldr	r1, [r7, #12]
 800ad5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	32b0      	adds	r2, #176	; 0xb0
 800ad6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	7c1b      	ldrb	r3, [r3, #16]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d138      	bne.n	800adee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad7c:	4b5e      	ldr	r3, [pc, #376]	; (800aef8 <USBD_CDC_Init+0x1e4>)
 800ad7e:	7819      	ldrb	r1, [r3, #0]
 800ad80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad84:	2202      	movs	r2, #2
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f002 fb3f 	bl	800d40a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad8c:	4b5a      	ldr	r3, [pc, #360]	; (800aef8 <USBD_CDC_Init+0x1e4>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	f003 020f 	and.w	r2, r3, #15
 800ad94:	6879      	ldr	r1, [r7, #4]
 800ad96:	4613      	mov	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	440b      	add	r3, r1
 800ada0:	3324      	adds	r3, #36	; 0x24
 800ada2:	2201      	movs	r2, #1
 800ada4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ada6:	4b55      	ldr	r3, [pc, #340]	; (800aefc <USBD_CDC_Init+0x1e8>)
 800ada8:	7819      	ldrb	r1, [r3, #0]
 800adaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adae:	2202      	movs	r2, #2
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f002 fb2a 	bl	800d40a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800adb6:	4b51      	ldr	r3, [pc, #324]	; (800aefc <USBD_CDC_Init+0x1e8>)
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	f003 020f 	and.w	r2, r3, #15
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	4613      	mov	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	440b      	add	r3, r1
 800adca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800adce:	2201      	movs	r2, #1
 800add0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800add2:	4b4b      	ldr	r3, [pc, #300]	; (800af00 <USBD_CDC_Init+0x1ec>)
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	f003 020f 	and.w	r2, r3, #15
 800adda:	6879      	ldr	r1, [r7, #4]
 800addc:	4613      	mov	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	4413      	add	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	440b      	add	r3, r1
 800ade6:	3326      	adds	r3, #38	; 0x26
 800ade8:	2210      	movs	r2, #16
 800adea:	801a      	strh	r2, [r3, #0]
 800adec:	e035      	b.n	800ae5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800adee:	4b42      	ldr	r3, [pc, #264]	; (800aef8 <USBD_CDC_Init+0x1e4>)
 800adf0:	7819      	ldrb	r1, [r3, #0]
 800adf2:	2340      	movs	r3, #64	; 0x40
 800adf4:	2202      	movs	r2, #2
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f002 fb07 	bl	800d40a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800adfc:	4b3e      	ldr	r3, [pc, #248]	; (800aef8 <USBD_CDC_Init+0x1e4>)
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	f003 020f 	and.w	r2, r3, #15
 800ae04:	6879      	ldr	r1, [r7, #4]
 800ae06:	4613      	mov	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	440b      	add	r3, r1
 800ae10:	3324      	adds	r3, #36	; 0x24
 800ae12:	2201      	movs	r2, #1
 800ae14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ae16:	4b39      	ldr	r3, [pc, #228]	; (800aefc <USBD_CDC_Init+0x1e8>)
 800ae18:	7819      	ldrb	r1, [r3, #0]
 800ae1a:	2340      	movs	r3, #64	; 0x40
 800ae1c:	2202      	movs	r2, #2
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f002 faf3 	bl	800d40a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ae24:	4b35      	ldr	r3, [pc, #212]	; (800aefc <USBD_CDC_Init+0x1e8>)
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	f003 020f 	and.w	r2, r3, #15
 800ae2c:	6879      	ldr	r1, [r7, #4]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	4413      	add	r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	440b      	add	r3, r1
 800ae38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ae40:	4b2f      	ldr	r3, [pc, #188]	; (800af00 <USBD_CDC_Init+0x1ec>)
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	f003 020f 	and.w	r2, r3, #15
 800ae48:	6879      	ldr	r1, [r7, #4]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4413      	add	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	440b      	add	r3, r1
 800ae54:	3326      	adds	r3, #38	; 0x26
 800ae56:	2210      	movs	r2, #16
 800ae58:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae5a:	4b29      	ldr	r3, [pc, #164]	; (800af00 <USBD_CDC_Init+0x1ec>)
 800ae5c:	7819      	ldrb	r1, [r3, #0]
 800ae5e:	2308      	movs	r3, #8
 800ae60:	2203      	movs	r2, #3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f002 fad1 	bl	800d40a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ae68:	4b25      	ldr	r3, [pc, #148]	; (800af00 <USBD_CDC_Init+0x1ec>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	f003 020f 	and.w	r2, r3, #15
 800ae70:	6879      	ldr	r1, [r7, #4]
 800ae72:	4613      	mov	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	4413      	add	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	440b      	add	r3, r1
 800ae7c:	3324      	adds	r3, #36	; 0x24
 800ae7e:	2201      	movs	r2, #1
 800ae80:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	33b0      	adds	r3, #176	; 0xb0
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4413      	add	r3, r2
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d101      	bne.n	800aebc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800aeb8:	2302      	movs	r3, #2
 800aeba:	e018      	b.n	800aeee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	7c1b      	ldrb	r3, [r3, #16]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10a      	bne.n	800aeda <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aec4:	4b0d      	ldr	r3, [pc, #52]	; (800aefc <USBD_CDC_Init+0x1e8>)
 800aec6:	7819      	ldrb	r1, [r3, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aece:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f002 fb88 	bl	800d5e8 <USBD_LL_PrepareReceive>
 800aed8:	e008      	b.n	800aeec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aeda:	4b08      	ldr	r3, [pc, #32]	; (800aefc <USBD_CDC_Init+0x1e8>)
 800aedc:	7819      	ldrb	r1, [r3, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aee4:	2340      	movs	r3, #64	; 0x40
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f002 fb7e 	bl	800d5e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	2000009f 	.word	0x2000009f
 800aefc:	200000a0 	.word	0x200000a0
 800af00:	200000a1 	.word	0x200000a1

0800af04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	460b      	mov	r3, r1
 800af0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800af10:	4b3a      	ldr	r3, [pc, #232]	; (800affc <USBD_CDC_DeInit+0xf8>)
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f002 fa9d 	bl	800d456 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800af1c:	4b37      	ldr	r3, [pc, #220]	; (800affc <USBD_CDC_DeInit+0xf8>)
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	f003 020f 	and.w	r2, r3, #15
 800af24:	6879      	ldr	r1, [r7, #4]
 800af26:	4613      	mov	r3, r2
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	4413      	add	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	440b      	add	r3, r1
 800af30:	3324      	adds	r3, #36	; 0x24
 800af32:	2200      	movs	r2, #0
 800af34:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800af36:	4b32      	ldr	r3, [pc, #200]	; (800b000 <USBD_CDC_DeInit+0xfc>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f002 fa8a 	bl	800d456 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800af42:	4b2f      	ldr	r3, [pc, #188]	; (800b000 <USBD_CDC_DeInit+0xfc>)
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	f003 020f 	and.w	r2, r3, #15
 800af4a:	6879      	ldr	r1, [r7, #4]
 800af4c:	4613      	mov	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	440b      	add	r3, r1
 800af56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af5a:	2200      	movs	r2, #0
 800af5c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800af5e:	4b29      	ldr	r3, [pc, #164]	; (800b004 <USBD_CDC_DeInit+0x100>)
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	4619      	mov	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f002 fa76 	bl	800d456 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800af6a:	4b26      	ldr	r3, [pc, #152]	; (800b004 <USBD_CDC_DeInit+0x100>)
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	f003 020f 	and.w	r2, r3, #15
 800af72:	6879      	ldr	r1, [r7, #4]
 800af74:	4613      	mov	r3, r2
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	440b      	add	r3, r1
 800af7e:	3324      	adds	r3, #36	; 0x24
 800af80:	2200      	movs	r2, #0
 800af82:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800af84:	4b1f      	ldr	r3, [pc, #124]	; (800b004 <USBD_CDC_DeInit+0x100>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	f003 020f 	and.w	r2, r3, #15
 800af8c:	6879      	ldr	r1, [r7, #4]
 800af8e:	4613      	mov	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	440b      	add	r3, r1
 800af98:	3326      	adds	r3, #38	; 0x26
 800af9a:	2200      	movs	r2, #0
 800af9c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	32b0      	adds	r2, #176	; 0xb0
 800afa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d01f      	beq.n	800aff0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	33b0      	adds	r3, #176	; 0xb0
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	32b0      	adds	r2, #176	; 0xb0
 800afce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f002 fb4a 	bl	800d66c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	32b0      	adds	r2, #176	; 0xb0
 800afe2:	2100      	movs	r1, #0
 800afe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3708      	adds	r7, #8
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	2000009f 	.word	0x2000009f
 800b000:	200000a0 	.word	0x200000a0
 800b004:	200000a1 	.word	0x200000a1

0800b008 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	32b0      	adds	r2, #176	; 0xb0
 800b01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b020:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b022:	2300      	movs	r3, #0
 800b024:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b026:	2300      	movs	r3, #0
 800b028:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b034:	2303      	movs	r3, #3
 800b036:	e0bf      	b.n	800b1b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b040:	2b00      	cmp	r3, #0
 800b042:	d050      	beq.n	800b0e6 <USBD_CDC_Setup+0xde>
 800b044:	2b20      	cmp	r3, #32
 800b046:	f040 80af 	bne.w	800b1a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	88db      	ldrh	r3, [r3, #6]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d03a      	beq.n	800b0c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	b25b      	sxtb	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	da1b      	bge.n	800b094 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	33b0      	adds	r3, #176	; 0xb0
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4413      	add	r3, r2
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b072:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	88d2      	ldrh	r2, [r2, #6]
 800b078:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	88db      	ldrh	r3, [r3, #6]
 800b07e:	2b07      	cmp	r3, #7
 800b080:	bf28      	it	cs
 800b082:	2307      	movcs	r3, #7
 800b084:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	89fa      	ldrh	r2, [r7, #14]
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f001 fd89 	bl	800cba4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b092:	e090      	b.n	800b1b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	785a      	ldrb	r2, [r3, #1]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	88db      	ldrh	r3, [r3, #6]
 800b0a2:	2b3f      	cmp	r3, #63	; 0x3f
 800b0a4:	d803      	bhi.n	800b0ae <USBD_CDC_Setup+0xa6>
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	88db      	ldrh	r3, [r3, #6]
 800b0aa:	b2da      	uxtb	r2, r3
 800b0ac:	e000      	b.n	800b0b0 <USBD_CDC_Setup+0xa8>
 800b0ae:	2240      	movs	r2, #64	; 0x40
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b0b6:	6939      	ldr	r1, [r7, #16]
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b0be:	461a      	mov	r2, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f001 fd9b 	bl	800cbfc <USBD_CtlPrepareRx>
      break;
 800b0c6:	e076      	b.n	800b1b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	33b0      	adds	r3, #176	; 0xb0
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	7850      	ldrb	r0, [r2, #1]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	6839      	ldr	r1, [r7, #0]
 800b0e2:	4798      	blx	r3
      break;
 800b0e4:	e067      	b.n	800b1b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	785b      	ldrb	r3, [r3, #1]
 800b0ea:	2b0b      	cmp	r3, #11
 800b0ec:	d851      	bhi.n	800b192 <USBD_CDC_Setup+0x18a>
 800b0ee:	a201      	add	r2, pc, #4	; (adr r2, 800b0f4 <USBD_CDC_Setup+0xec>)
 800b0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f4:	0800b125 	.word	0x0800b125
 800b0f8:	0800b1a1 	.word	0x0800b1a1
 800b0fc:	0800b193 	.word	0x0800b193
 800b100:	0800b193 	.word	0x0800b193
 800b104:	0800b193 	.word	0x0800b193
 800b108:	0800b193 	.word	0x0800b193
 800b10c:	0800b193 	.word	0x0800b193
 800b110:	0800b193 	.word	0x0800b193
 800b114:	0800b193 	.word	0x0800b193
 800b118:	0800b193 	.word	0x0800b193
 800b11c:	0800b14f 	.word	0x0800b14f
 800b120:	0800b179 	.word	0x0800b179
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	2b03      	cmp	r3, #3
 800b12e:	d107      	bne.n	800b140 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b130:	f107 030a 	add.w	r3, r7, #10
 800b134:	2202      	movs	r2, #2
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 fd33 	bl	800cba4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b13e:	e032      	b.n	800b1a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f001 fcbd 	bl	800cac2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b148:	2303      	movs	r3, #3
 800b14a:	75fb      	strb	r3, [r7, #23]
          break;
 800b14c:	e02b      	b.n	800b1a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b03      	cmp	r3, #3
 800b158:	d107      	bne.n	800b16a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b15a:	f107 030d 	add.w	r3, r7, #13
 800b15e:	2201      	movs	r2, #1
 800b160:	4619      	mov	r1, r3
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f001 fd1e 	bl	800cba4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b168:	e01d      	b.n	800b1a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b16a:	6839      	ldr	r1, [r7, #0]
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f001 fca8 	bl	800cac2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b172:	2303      	movs	r3, #3
 800b174:	75fb      	strb	r3, [r7, #23]
          break;
 800b176:	e016      	b.n	800b1a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b03      	cmp	r3, #3
 800b182:	d00f      	beq.n	800b1a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f001 fc9b 	bl	800cac2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b18c:	2303      	movs	r3, #3
 800b18e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b190:	e008      	b.n	800b1a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f001 fc94 	bl	800cac2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b19a:	2303      	movs	r3, #3
 800b19c:	75fb      	strb	r3, [r7, #23]
          break;
 800b19e:	e002      	b.n	800b1a6 <USBD_CDC_Setup+0x19e>
          break;
 800b1a0:	bf00      	nop
 800b1a2:	e008      	b.n	800b1b6 <USBD_CDC_Setup+0x1ae>
          break;
 800b1a4:	bf00      	nop
      }
      break;
 800b1a6:	e006      	b.n	800b1b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f001 fc89 	bl	800cac2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b1b4:	bf00      	nop
  }

  return (uint8_t)ret;
 800b1b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3718      	adds	r7, #24
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	32b0      	adds	r2, #176	; 0xb0
 800b1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	e065      	b.n	800b2b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	32b0      	adds	r2, #176	; 0xb0
 800b1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b1fa:	78fb      	ldrb	r3, [r7, #3]
 800b1fc:	f003 020f 	and.w	r2, r3, #15
 800b200:	6879      	ldr	r1, [r7, #4]
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	440b      	add	r3, r1
 800b20c:	3318      	adds	r3, #24
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d02f      	beq.n	800b274 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b214:	78fb      	ldrb	r3, [r7, #3]
 800b216:	f003 020f 	and.w	r2, r3, #15
 800b21a:	6879      	ldr	r1, [r7, #4]
 800b21c:	4613      	mov	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	440b      	add	r3, r1
 800b226:	3318      	adds	r3, #24
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	78fb      	ldrb	r3, [r7, #3]
 800b22c:	f003 010f 	and.w	r1, r3, #15
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	460b      	mov	r3, r1
 800b234:	00db      	lsls	r3, r3, #3
 800b236:	440b      	add	r3, r1
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4403      	add	r3, r0
 800b23c:	3348      	adds	r3, #72	; 0x48
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	fbb2 f1f3 	udiv	r1, r2, r3
 800b244:	fb01 f303 	mul.w	r3, r1, r3
 800b248:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d112      	bne.n	800b274 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b24e:	78fb      	ldrb	r3, [r7, #3]
 800b250:	f003 020f 	and.w	r2, r3, #15
 800b254:	6879      	ldr	r1, [r7, #4]
 800b256:	4613      	mov	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4413      	add	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	440b      	add	r3, r1
 800b260:	3318      	adds	r3, #24
 800b262:	2200      	movs	r2, #0
 800b264:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b266:	78f9      	ldrb	r1, [r7, #3]
 800b268:	2300      	movs	r3, #0
 800b26a:	2200      	movs	r2, #0
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f002 f99a 	bl	800d5a6 <USBD_LL_Transmit>
 800b272:	e01f      	b.n	800b2b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	2200      	movs	r2, #0
 800b278:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	33b0      	adds	r3, #176	; 0xb0
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4413      	add	r3, r2
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d010      	beq.n	800b2b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	33b0      	adds	r3, #176	; 0xb0
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b2b0:	78fa      	ldrb	r2, [r7, #3]
 800b2b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	32b0      	adds	r2, #176	; 0xb0
 800b2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	32b0      	adds	r2, #176	; 0xb0
 800b2e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d101      	bne.n	800b2f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b2ec:	2303      	movs	r3, #3
 800b2ee:	e01a      	b.n	800b326 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b2f0:	78fb      	ldrb	r3, [r7, #3]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f002 f998 	bl	800d62a <USBD_LL_GetRxDataSize>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	33b0      	adds	r3, #176	; 0xb0
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	4413      	add	r3, r2
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b320:	4611      	mov	r1, r2
 800b322:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b084      	sub	sp, #16
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	32b0      	adds	r2, #176	; 0xb0
 800b340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b344:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b34c:	2303      	movs	r3, #3
 800b34e:	e025      	b.n	800b39c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	33b0      	adds	r3, #176	; 0xb0
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d01a      	beq.n	800b39a <USBD_CDC_EP0_RxReady+0x6c>
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b36a:	2bff      	cmp	r3, #255	; 0xff
 800b36c:	d015      	beq.n	800b39a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	33b0      	adds	r3, #176	; 0xb0
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b386:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b38e:	b292      	uxth	r2, r2
 800b390:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	22ff      	movs	r2, #255	; 0xff
 800b396:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3ac:	2182      	movs	r1, #130	; 0x82
 800b3ae:	4818      	ldr	r0, [pc, #96]	; (800b410 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b3b0:	f000 fd4f 	bl	800be52 <USBD_GetEpDesc>
 800b3b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	4815      	ldr	r0, [pc, #84]	; (800b410 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b3ba:	f000 fd4a 	bl	800be52 <USBD_GetEpDesc>
 800b3be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3c0:	2181      	movs	r1, #129	; 0x81
 800b3c2:	4813      	ldr	r0, [pc, #76]	; (800b410 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b3c4:	f000 fd45 	bl	800be52 <USBD_GetEpDesc>
 800b3c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	2210      	movs	r2, #16
 800b3d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d006      	beq.n	800b3ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3e4:	711a      	strb	r2, [r3, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d006      	beq.n	800b3fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3f8:	711a      	strb	r2, [r3, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2243      	movs	r2, #67	; 0x43
 800b402:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b404:	4b02      	ldr	r3, [pc, #8]	; (800b410 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	2000005c 	.word	0x2000005c

0800b414 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b41c:	2182      	movs	r1, #130	; 0x82
 800b41e:	4818      	ldr	r0, [pc, #96]	; (800b480 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b420:	f000 fd17 	bl	800be52 <USBD_GetEpDesc>
 800b424:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b426:	2101      	movs	r1, #1
 800b428:	4815      	ldr	r0, [pc, #84]	; (800b480 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b42a:	f000 fd12 	bl	800be52 <USBD_GetEpDesc>
 800b42e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b430:	2181      	movs	r1, #129	; 0x81
 800b432:	4813      	ldr	r0, [pc, #76]	; (800b480 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b434:	f000 fd0d 	bl	800be52 <USBD_GetEpDesc>
 800b438:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d002      	beq.n	800b446 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	2210      	movs	r2, #16
 800b444:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d006      	beq.n	800b45a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	2200      	movs	r2, #0
 800b450:	711a      	strb	r2, [r3, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f042 0202 	orr.w	r2, r2, #2
 800b458:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d006      	beq.n	800b46e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	711a      	strb	r2, [r3, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	f042 0202 	orr.w	r2, r2, #2
 800b46c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2243      	movs	r2, #67	; 0x43
 800b472:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b474:	4b02      	ldr	r3, [pc, #8]	; (800b480 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b476:	4618      	mov	r0, r3
 800b478:	3718      	adds	r7, #24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	2000005c 	.word	0x2000005c

0800b484 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b48c:	2182      	movs	r1, #130	; 0x82
 800b48e:	4818      	ldr	r0, [pc, #96]	; (800b4f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b490:	f000 fcdf 	bl	800be52 <USBD_GetEpDesc>
 800b494:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b496:	2101      	movs	r1, #1
 800b498:	4815      	ldr	r0, [pc, #84]	; (800b4f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b49a:	f000 fcda 	bl	800be52 <USBD_GetEpDesc>
 800b49e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4a0:	2181      	movs	r1, #129	; 0x81
 800b4a2:	4813      	ldr	r0, [pc, #76]	; (800b4f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b4a4:	f000 fcd5 	bl	800be52 <USBD_GetEpDesc>
 800b4a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	2210      	movs	r2, #16
 800b4b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d006      	beq.n	800b4ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4c4:	711a      	strb	r2, [r3, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d006      	beq.n	800b4de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4d8:	711a      	strb	r2, [r3, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2243      	movs	r2, #67	; 0x43
 800b4e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b4e4:	4b02      	ldr	r3, [pc, #8]	; (800b4f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3718      	adds	r7, #24
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	2000005c 	.word	0x2000005c

0800b4f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	220a      	movs	r2, #10
 800b500:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b502:	4b03      	ldr	r3, [pc, #12]	; (800b510 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b504:	4618      	mov	r0, r3
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	20000018 	.word	0x20000018

0800b514 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d101      	bne.n	800b528 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b524:	2303      	movs	r3, #3
 800b526:	e009      	b.n	800b53c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	33b0      	adds	r3, #176	; 0xb0
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	4413      	add	r3, r2
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	32b0      	adds	r2, #176	; 0xb0
 800b55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b562:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d101      	bne.n	800b56e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b56a:	2303      	movs	r3, #3
 800b56c:	e008      	b.n	800b580 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	371c      	adds	r7, #28
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	32b0      	adds	r2, #176	; 0xb0
 800b5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	e004      	b.n	800b5ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr
	...

0800b5c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	32b0      	adds	r2, #176	; 0xb0
 800b5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	32b0      	adds	r2, #176	; 0xb0
 800b5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	e025      	b.n	800b646 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b600:	2b00      	cmp	r3, #0
 800b602:	d11f      	bne.n	800b644 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	2201      	movs	r2, #1
 800b608:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b60c:	4b10      	ldr	r3, [pc, #64]	; (800b650 <USBD_CDC_TransmitPacket+0x88>)
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	f003 020f 	and.w	r2, r3, #15
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	4613      	mov	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	4403      	add	r3, r0
 800b626:	3318      	adds	r3, #24
 800b628:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b62a:	4b09      	ldr	r3, [pc, #36]	; (800b650 <USBD_CDC_TransmitPacket+0x88>)
 800b62c:	7819      	ldrb	r1, [r3, #0]
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f001 ffb3 	bl	800d5a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b644:	7bfb      	ldrb	r3, [r7, #15]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	2000009f 	.word	0x2000009f

0800b654 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	32b0      	adds	r2, #176	; 0xb0
 800b666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	32b0      	adds	r2, #176	; 0xb0
 800b676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b67e:	2303      	movs	r3, #3
 800b680:	e018      	b.n	800b6b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	7c1b      	ldrb	r3, [r3, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10a      	bne.n	800b6a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b68a:	4b0c      	ldr	r3, [pc, #48]	; (800b6bc <USBD_CDC_ReceivePacket+0x68>)
 800b68c:	7819      	ldrb	r1, [r3, #0]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b694:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f001 ffa5 	bl	800d5e8 <USBD_LL_PrepareReceive>
 800b69e:	e008      	b.n	800b6b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b6a0:	4b06      	ldr	r3, [pc, #24]	; (800b6bc <USBD_CDC_ReceivePacket+0x68>)
 800b6a2:	7819      	ldrb	r1, [r3, #0]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6aa:	2340      	movs	r3, #64	; 0x40
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f001 ff9b 	bl	800d5e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	200000a0 	.word	0x200000a0

0800b6c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b6d4:	2303      	movs	r3, #3
 800b6d6:	e01f      	b.n	800b718 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d003      	beq.n	800b6fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2201      	movs	r2, #1
 800b702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	79fa      	ldrb	r2, [r7, #7]
 800b70a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f001 fe15 	bl	800d33c <USBD_LL_Init>
 800b712:	4603      	mov	r3, r0
 800b714:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b716:	7dfb      	ldrb	r3, [r7, #23]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b734:	2303      	movs	r3, #3
 800b736:	e025      	b.n	800b784 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	32ae      	adds	r2, #174	; 0xae
 800b74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00f      	beq.n	800b774 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	32ae      	adds	r2, #174	; 0xae
 800b75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b764:	f107 020e 	add.w	r2, r7, #14
 800b768:	4610      	mov	r0, r2
 800b76a:	4798      	blx	r3
 800b76c:	4602      	mov	r2, r0
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f001 fe1d 	bl	800d3d4 <USBD_LL_Start>
 800b79a:	4603      	mov	r3, r0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b084      	sub	sp, #16
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d009      	beq.n	800b7e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	78fa      	ldrb	r2, [r7, #3]
 800b7de:	4611      	mov	r1, r2
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	4798      	blx	r3
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7fe:	2300      	movs	r3, #0
 800b800:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	78fa      	ldrb	r2, [r7, #3]
 800b80c:	4611      	mov	r1, r2
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	4798      	blx	r3
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b818:	2303      	movs	r3, #3
 800b81a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b084      	sub	sp, #16
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
 800b82e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b836:	6839      	ldr	r1, [r7, #0]
 800b838:	4618      	mov	r0, r3
 800b83a:	f001 f908 	bl	800ca4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2201      	movs	r2, #1
 800b842:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b84c:	461a      	mov	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b85a:	f003 031f 	and.w	r3, r3, #31
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d01a      	beq.n	800b898 <USBD_LL_SetupStage+0x72>
 800b862:	2b02      	cmp	r3, #2
 800b864:	d822      	bhi.n	800b8ac <USBD_LL_SetupStage+0x86>
 800b866:	2b00      	cmp	r3, #0
 800b868:	d002      	beq.n	800b870 <USBD_LL_SetupStage+0x4a>
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d00a      	beq.n	800b884 <USBD_LL_SetupStage+0x5e>
 800b86e:	e01d      	b.n	800b8ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b876:	4619      	mov	r1, r3
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 fb5f 	bl	800bf3c <USBD_StdDevReq>
 800b87e:	4603      	mov	r3, r0
 800b880:	73fb      	strb	r3, [r7, #15]
      break;
 800b882:	e020      	b.n	800b8c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fbc7 	bl	800c020 <USBD_StdItfReq>
 800b892:	4603      	mov	r3, r0
 800b894:	73fb      	strb	r3, [r7, #15]
      break;
 800b896:	e016      	b.n	800b8c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b89e:	4619      	mov	r1, r3
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fc29 	bl	800c0f8 <USBD_StdEPReq>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b8aa:	e00c      	b.n	800b8c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f001 fdea 	bl	800d494 <USBD_LL_StallEP>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8c4:	bf00      	nop
  }

  return ret;
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	607a      	str	r2, [r7, #4]
 800b8dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b8e2:	7afb      	ldrb	r3, [r7, #11]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d16e      	bne.n	800b9c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b8ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	f040 8098 	bne.w	800ba2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	689a      	ldr	r2, [r3, #8]
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	429a      	cmp	r2, r3
 800b906:	d913      	bls.n	800b930 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	689a      	ldr	r2, [r3, #8]
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	1ad2      	subs	r2, r2, r3
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	68da      	ldr	r2, [r3, #12]
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	4293      	cmp	r3, r2
 800b920:	bf28      	it	cs
 800b922:	4613      	movcs	r3, r2
 800b924:	461a      	mov	r2, r3
 800b926:	6879      	ldr	r1, [r7, #4]
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f001 f984 	bl	800cc36 <USBD_CtlContinueRx>
 800b92e:	e07d      	b.n	800ba2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b936:	f003 031f 	and.w	r3, r3, #31
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d014      	beq.n	800b968 <USBD_LL_DataOutStage+0x98>
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d81d      	bhi.n	800b97e <USBD_LL_DataOutStage+0xae>
 800b942:	2b00      	cmp	r3, #0
 800b944:	d002      	beq.n	800b94c <USBD_LL_DataOutStage+0x7c>
 800b946:	2b01      	cmp	r3, #1
 800b948:	d003      	beq.n	800b952 <USBD_LL_DataOutStage+0x82>
 800b94a:	e018      	b.n	800b97e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b94c:	2300      	movs	r3, #0
 800b94e:	75bb      	strb	r3, [r7, #22]
            break;
 800b950:	e018      	b.n	800b984 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	4619      	mov	r1, r3
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f000 fa5e 	bl	800be1e <USBD_CoreFindIF>
 800b962:	4603      	mov	r3, r0
 800b964:	75bb      	strb	r3, [r7, #22]
            break;
 800b966:	e00d      	b.n	800b984 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	4619      	mov	r1, r3
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f000 fa60 	bl	800be38 <USBD_CoreFindEP>
 800b978:	4603      	mov	r3, r0
 800b97a:	75bb      	strb	r3, [r7, #22]
            break;
 800b97c:	e002      	b.n	800b984 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b97e:	2300      	movs	r3, #0
 800b980:	75bb      	strb	r3, [r7, #22]
            break;
 800b982:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b984:	7dbb      	ldrb	r3, [r7, #22]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d119      	bne.n	800b9be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b03      	cmp	r3, #3
 800b994:	d113      	bne.n	800b9be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b996:	7dba      	ldrb	r2, [r7, #22]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	32ae      	adds	r2, #174	; 0xae
 800b99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00b      	beq.n	800b9be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b9a6:	7dba      	ldrb	r2, [r7, #22]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b9ae:	7dba      	ldrb	r2, [r7, #22]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	32ae      	adds	r2, #174	; 0xae
 800b9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f001 f94a 	bl	800cc58 <USBD_CtlSendStatus>
 800b9c4:	e032      	b.n	800ba2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b9c6:	7afb      	ldrb	r3, [r7, #11]
 800b9c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f000 fa31 	bl	800be38 <USBD_CoreFindEP>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9da:	7dbb      	ldrb	r3, [r7, #22]
 800b9dc:	2bff      	cmp	r3, #255	; 0xff
 800b9de:	d025      	beq.n	800ba2c <USBD_LL_DataOutStage+0x15c>
 800b9e0:	7dbb      	ldrb	r3, [r7, #22]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d122      	bne.n	800ba2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b03      	cmp	r3, #3
 800b9f0:	d117      	bne.n	800ba22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b9f2:	7dba      	ldrb	r2, [r7, #22]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	32ae      	adds	r2, #174	; 0xae
 800b9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00f      	beq.n	800ba22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ba02:	7dba      	ldrb	r2, [r7, #22]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ba0a:	7dba      	ldrb	r2, [r7, #22]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	32ae      	adds	r2, #174	; 0xae
 800ba10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	7afa      	ldrb	r2, [r7, #11]
 800ba18:	4611      	mov	r1, r2
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	4798      	blx	r3
 800ba1e:	4603      	mov	r3, r0
 800ba20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ba22:	7dfb      	ldrb	r3, [r7, #23]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d001      	beq.n	800ba2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ba28:	7dfb      	ldrb	r3, [r7, #23]
 800ba2a:	e000      	b.n	800ba2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3718      	adds	r7, #24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b086      	sub	sp, #24
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	607a      	str	r2, [r7, #4]
 800ba42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ba44:	7afb      	ldrb	r3, [r7, #11]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d16f      	bne.n	800bb2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3314      	adds	r3, #20
 800ba4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d15a      	bne.n	800bb10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	689a      	ldr	r2, [r3, #8]
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d914      	bls.n	800ba90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	689a      	ldr	r2, [r3, #8]
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	1ad2      	subs	r2, r2, r3
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	6879      	ldr	r1, [r7, #4]
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f001 f8ac 	bl	800cbda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba82:	2300      	movs	r3, #0
 800ba84:	2200      	movs	r2, #0
 800ba86:	2100      	movs	r1, #0
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f001 fdad 	bl	800d5e8 <USBD_LL_PrepareReceive>
 800ba8e:	e03f      	b.n	800bb10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	68da      	ldr	r2, [r3, #12]
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d11c      	bne.n	800bad6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d316      	bcc.n	800bad6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d20f      	bcs.n	800bad6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bab6:	2200      	movs	r2, #0
 800bab8:	2100      	movs	r1, #0
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f001 f88d 	bl	800cbda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bac8:	2300      	movs	r3, #0
 800baca:	2200      	movs	r2, #0
 800bacc:	2100      	movs	r1, #0
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f001 fd8a 	bl	800d5e8 <USBD_LL_PrepareReceive>
 800bad4:	e01c      	b.n	800bb10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800badc:	b2db      	uxtb	r3, r3
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d10f      	bne.n	800bb02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d009      	beq.n	800bb02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb02:	2180      	movs	r1, #128	; 0x80
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f001 fcc5 	bl	800d494 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f001 f8b7 	bl	800cc7e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d03a      	beq.n	800bb90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f7ff fe42 	bl	800b7a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bb28:	e032      	b.n	800bb90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bb2a:	7afb      	ldrb	r3, [r7, #11]
 800bb2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	4619      	mov	r1, r3
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 f97f 	bl	800be38 <USBD_CoreFindEP>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	2bff      	cmp	r3, #255	; 0xff
 800bb42:	d025      	beq.n	800bb90 <USBD_LL_DataInStage+0x15a>
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d122      	bne.n	800bb90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b03      	cmp	r3, #3
 800bb54:	d11c      	bne.n	800bb90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bb56:	7dfa      	ldrb	r2, [r7, #23]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	32ae      	adds	r2, #174	; 0xae
 800bb5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d014      	beq.n	800bb90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bb66:	7dfa      	ldrb	r2, [r7, #23]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bb6e:	7dfa      	ldrb	r2, [r7, #23]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	32ae      	adds	r2, #174	; 0xae
 800bb74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb78:	695b      	ldr	r3, [r3, #20]
 800bb7a:	7afa      	ldrb	r2, [r7, #11]
 800bb7c:	4611      	mov	r1, r2
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	4798      	blx	r3
 800bb82:	4603      	mov	r3, r0
 800bb84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bb86:	7dbb      	ldrb	r3, [r7, #22]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d001      	beq.n	800bb90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bb8c:	7dbb      	ldrb	r3, [r7, #22]
 800bb8e:	e000      	b.n	800bb92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3718      	adds	r7, #24
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d014      	beq.n	800bc00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00e      	beq.n	800bc00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	6852      	ldr	r2, [r2, #4]
 800bbee:	b2d2      	uxtb	r2, r2
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	4798      	blx	r3
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc00:	2340      	movs	r3, #64	; 0x40
 800bc02:	2200      	movs	r2, #0
 800bc04:	2100      	movs	r1, #0
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f001 fbff 	bl	800d40a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2240      	movs	r2, #64	; 0x40
 800bc18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc1c:	2340      	movs	r3, #64	; 0x40
 800bc1e:	2200      	movs	r2, #0
 800bc20:	2180      	movs	r1, #128	; 0x80
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 fbf1 	bl	800d40a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2240      	movs	r2, #64	; 0x40
 800bc32:	621a      	str	r2, [r3, #32]

  return ret;
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b083      	sub	sp, #12
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	460b      	mov	r3, r1
 800bc48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	78fa      	ldrb	r2, [r7, #3]
 800bc4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	370c      	adds	r7, #12
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b083      	sub	sp, #12
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2204      	movs	r2, #4
 800bc78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	2b04      	cmp	r3, #4
 800bc9c:	d106      	bne.n	800bcac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bca4:	b2da      	uxtb	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	370c      	adds	r7, #12
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d110      	bne.n	800bcf0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00b      	beq.n	800bcf0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcde:	69db      	ldr	r3, [r3, #28]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d005      	beq.n	800bcf0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcea:	69db      	ldr	r3, [r3, #28]
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b082      	sub	sp, #8
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	460b      	mov	r3, r1
 800bd04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	32ae      	adds	r2, #174	; 0xae
 800bd10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d101      	bne.n	800bd1c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bd18:	2303      	movs	r3, #3
 800bd1a:	e01c      	b.n	800bd56 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	2b03      	cmp	r3, #3
 800bd26:	d115      	bne.n	800bd54 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	32ae      	adds	r2, #174	; 0xae
 800bd32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd36:	6a1b      	ldr	r3, [r3, #32]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00b      	beq.n	800bd54 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	32ae      	adds	r2, #174	; 0xae
 800bd46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd4a:	6a1b      	ldr	r3, [r3, #32]
 800bd4c:	78fa      	ldrb	r2, [r7, #3]
 800bd4e:	4611      	mov	r1, r2
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b082      	sub	sp, #8
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	460b      	mov	r3, r1
 800bd68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	32ae      	adds	r2, #174	; 0xae
 800bd74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	e01c      	b.n	800bdba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	2b03      	cmp	r3, #3
 800bd8a:	d115      	bne.n	800bdb8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	32ae      	adds	r2, #174	; 0xae
 800bd96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00b      	beq.n	800bdb8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	32ae      	adds	r2, #174	; 0xae
 800bdaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb0:	78fa      	ldrb	r2, [r7, #3]
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bdc2:	b480      	push	{r7}
 800bdc4:	b083      	sub	sp, #12
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bdca:	2300      	movs	r3, #0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bde0:	2300      	movs	r3, #0
 800bde2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00e      	beq.n	800be14 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	6852      	ldr	r2, [r2, #4]
 800be02:	b2d2      	uxtb	r2, r2
 800be04:	4611      	mov	r1, r2
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	4798      	blx	r3
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d001      	beq.n	800be14 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800be10:	2303      	movs	r3, #3
 800be12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800be14:	7bfb      	ldrb	r3, [r7, #15]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800be1e:	b480      	push	{r7}
 800be20:	b083      	sub	sp, #12
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	460b      	mov	r3, r1
 800be28:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800be2a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800be44:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800be46:	4618      	mov	r0, r3
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr

0800be52 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b086      	sub	sp, #24
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
 800be5a:	460b      	mov	r3, r1
 800be5c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800be66:	2300      	movs	r3, #0
 800be68:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	885b      	ldrh	r3, [r3, #2]
 800be6e:	b29a      	uxth	r2, r3
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	b29b      	uxth	r3, r3
 800be76:	429a      	cmp	r2, r3
 800be78:	d920      	bls.n	800bebc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	b29b      	uxth	r3, r3
 800be80:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800be82:	e013      	b.n	800beac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800be84:	f107 030a 	add.w	r3, r7, #10
 800be88:	4619      	mov	r1, r3
 800be8a:	6978      	ldr	r0, [r7, #20]
 800be8c:	f000 f81b 	bl	800bec6 <USBD_GetNextDesc>
 800be90:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	785b      	ldrb	r3, [r3, #1]
 800be96:	2b05      	cmp	r3, #5
 800be98:	d108      	bne.n	800beac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	789b      	ldrb	r3, [r3, #2]
 800bea2:	78fa      	ldrb	r2, [r7, #3]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d008      	beq.n	800beba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bea8:	2300      	movs	r3, #0
 800beaa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	885b      	ldrh	r3, [r3, #2]
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	897b      	ldrh	r3, [r7, #10]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d8e5      	bhi.n	800be84 <USBD_GetEpDesc+0x32>
 800beb8:	e000      	b.n	800bebc <USBD_GetEpDesc+0x6a>
          break;
 800beba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bebc:	693b      	ldr	r3, [r7, #16]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3718      	adds	r7, #24
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b085      	sub	sp, #20
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	881a      	ldrh	r2, [r3, #0]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	b29b      	uxth	r3, r3
 800bede:	4413      	add	r3, r2
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	461a      	mov	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4413      	add	r3, r2
 800bef0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bef2:	68fb      	ldr	r3, [r7, #12]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b087      	sub	sp, #28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	3301      	adds	r3, #1
 800bf16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf1e:	8a3b      	ldrh	r3, [r7, #16]
 800bf20:	021b      	lsls	r3, r3, #8
 800bf22:	b21a      	sxth	r2, r3
 800bf24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	b21b      	sxth	r3, r3
 800bf2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bf2e:	89fb      	ldrh	r3, [r7, #14]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	371c      	adds	r7, #28
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf52:	2b40      	cmp	r3, #64	; 0x40
 800bf54:	d005      	beq.n	800bf62 <USBD_StdDevReq+0x26>
 800bf56:	2b40      	cmp	r3, #64	; 0x40
 800bf58:	d857      	bhi.n	800c00a <USBD_StdDevReq+0xce>
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00f      	beq.n	800bf7e <USBD_StdDevReq+0x42>
 800bf5e:	2b20      	cmp	r3, #32
 800bf60:	d153      	bne.n	800c00a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	32ae      	adds	r2, #174	; 0xae
 800bf6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	4798      	blx	r3
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf7c:	e04a      	b.n	800c014 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	785b      	ldrb	r3, [r3, #1]
 800bf82:	2b09      	cmp	r3, #9
 800bf84:	d83b      	bhi.n	800bffe <USBD_StdDevReq+0xc2>
 800bf86:	a201      	add	r2, pc, #4	; (adr r2, 800bf8c <USBD_StdDevReq+0x50>)
 800bf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf8c:	0800bfe1 	.word	0x0800bfe1
 800bf90:	0800bff5 	.word	0x0800bff5
 800bf94:	0800bfff 	.word	0x0800bfff
 800bf98:	0800bfeb 	.word	0x0800bfeb
 800bf9c:	0800bfff 	.word	0x0800bfff
 800bfa0:	0800bfbf 	.word	0x0800bfbf
 800bfa4:	0800bfb5 	.word	0x0800bfb5
 800bfa8:	0800bfff 	.word	0x0800bfff
 800bfac:	0800bfd7 	.word	0x0800bfd7
 800bfb0:	0800bfc9 	.word	0x0800bfc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bfb4:	6839      	ldr	r1, [r7, #0]
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 fa3c 	bl	800c434 <USBD_GetDescriptor>
          break;
 800bfbc:	e024      	b.n	800c008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fba1 	bl	800c708 <USBD_SetAddress>
          break;
 800bfc6:	e01f      	b.n	800c008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fbe0 	bl	800c790 <USBD_SetConfig>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	73fb      	strb	r3, [r7, #15]
          break;
 800bfd4:	e018      	b.n	800c008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fc83 	bl	800c8e4 <USBD_GetConfig>
          break;
 800bfde:	e013      	b.n	800c008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fcb4 	bl	800c950 <USBD_GetStatus>
          break;
 800bfe8:	e00e      	b.n	800c008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fce3 	bl	800c9b8 <USBD_SetFeature>
          break;
 800bff2:	e009      	b.n	800c008 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fd07 	bl	800ca0a <USBD_ClrFeature>
          break;
 800bffc:	e004      	b.n	800c008 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fd5e 	bl	800cac2 <USBD_CtlError>
          break;
 800c006:	bf00      	nop
      }
      break;
 800c008:	e004      	b.n	800c014 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c00a:	6839      	ldr	r1, [r7, #0]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fd58 	bl	800cac2 <USBD_CtlError>
      break;
 800c012:	bf00      	nop
  }

  return ret;
 800c014:	7bfb      	ldrb	r3, [r7, #15]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop

0800c020 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c036:	2b40      	cmp	r3, #64	; 0x40
 800c038:	d005      	beq.n	800c046 <USBD_StdItfReq+0x26>
 800c03a:	2b40      	cmp	r3, #64	; 0x40
 800c03c:	d852      	bhi.n	800c0e4 <USBD_StdItfReq+0xc4>
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d001      	beq.n	800c046 <USBD_StdItfReq+0x26>
 800c042:	2b20      	cmp	r3, #32
 800c044:	d14e      	bne.n	800c0e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	3b01      	subs	r3, #1
 800c050:	2b02      	cmp	r3, #2
 800c052:	d840      	bhi.n	800c0d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	889b      	ldrh	r3, [r3, #4]
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d836      	bhi.n	800c0cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	889b      	ldrh	r3, [r3, #4]
 800c062:	b2db      	uxtb	r3, r3
 800c064:	4619      	mov	r1, r3
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff fed9 	bl	800be1e <USBD_CoreFindIF>
 800c06c:	4603      	mov	r3, r0
 800c06e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c070:	7bbb      	ldrb	r3, [r7, #14]
 800c072:	2bff      	cmp	r3, #255	; 0xff
 800c074:	d01d      	beq.n	800c0b2 <USBD_StdItfReq+0x92>
 800c076:	7bbb      	ldrb	r3, [r7, #14]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d11a      	bne.n	800c0b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c07c:	7bba      	ldrb	r2, [r7, #14]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	32ae      	adds	r2, #174	; 0xae
 800c082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00f      	beq.n	800c0ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c08c:	7bba      	ldrb	r2, [r7, #14]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c094:	7bba      	ldrb	r2, [r7, #14]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	32ae      	adds	r2, #174	; 0xae
 800c09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	4798      	blx	r3
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c0aa:	e004      	b.n	800c0b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c0ac:	2303      	movs	r3, #3
 800c0ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c0b0:	e001      	b.n	800c0b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c0b2:	2303      	movs	r3, #3
 800c0b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	88db      	ldrh	r3, [r3, #6]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d110      	bne.n	800c0e0 <USBD_StdItfReq+0xc0>
 800c0be:	7bfb      	ldrb	r3, [r7, #15]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10d      	bne.n	800c0e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fdc7 	bl	800cc58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c0ca:	e009      	b.n	800c0e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c0cc:	6839      	ldr	r1, [r7, #0]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fcf7 	bl	800cac2 <USBD_CtlError>
          break;
 800c0d4:	e004      	b.n	800c0e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 fcf2 	bl	800cac2 <USBD_CtlError>
          break;
 800c0de:	e000      	b.n	800c0e2 <USBD_StdItfReq+0xc2>
          break;
 800c0e0:	bf00      	nop
      }
      break;
 800c0e2:	e004      	b.n	800c0ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c0e4:	6839      	ldr	r1, [r7, #0]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fceb 	bl	800cac2 <USBD_CtlError>
      break;
 800c0ec:	bf00      	nop
  }

  return ret;
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	889b      	ldrh	r3, [r3, #4]
 800c10a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c114:	2b40      	cmp	r3, #64	; 0x40
 800c116:	d007      	beq.n	800c128 <USBD_StdEPReq+0x30>
 800c118:	2b40      	cmp	r3, #64	; 0x40
 800c11a:	f200 817f 	bhi.w	800c41c <USBD_StdEPReq+0x324>
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d02a      	beq.n	800c178 <USBD_StdEPReq+0x80>
 800c122:	2b20      	cmp	r3, #32
 800c124:	f040 817a 	bne.w	800c41c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7ff fe83 	bl	800be38 <USBD_CoreFindEP>
 800c132:	4603      	mov	r3, r0
 800c134:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c136:	7b7b      	ldrb	r3, [r7, #13]
 800c138:	2bff      	cmp	r3, #255	; 0xff
 800c13a:	f000 8174 	beq.w	800c426 <USBD_StdEPReq+0x32e>
 800c13e:	7b7b      	ldrb	r3, [r7, #13]
 800c140:	2b00      	cmp	r3, #0
 800c142:	f040 8170 	bne.w	800c426 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c146:	7b7a      	ldrb	r2, [r7, #13]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c14e:	7b7a      	ldrb	r2, [r7, #13]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	32ae      	adds	r2, #174	; 0xae
 800c154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f000 8163 	beq.w	800c426 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c160:	7b7a      	ldrb	r2, [r7, #13]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	32ae      	adds	r2, #174	; 0xae
 800c166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	4798      	blx	r3
 800c172:	4603      	mov	r3, r0
 800c174:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c176:	e156      	b.n	800c426 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	785b      	ldrb	r3, [r3, #1]
 800c17c:	2b03      	cmp	r3, #3
 800c17e:	d008      	beq.n	800c192 <USBD_StdEPReq+0x9a>
 800c180:	2b03      	cmp	r3, #3
 800c182:	f300 8145 	bgt.w	800c410 <USBD_StdEPReq+0x318>
 800c186:	2b00      	cmp	r3, #0
 800c188:	f000 809b 	beq.w	800c2c2 <USBD_StdEPReq+0x1ca>
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d03c      	beq.n	800c20a <USBD_StdEPReq+0x112>
 800c190:	e13e      	b.n	800c410 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	d002      	beq.n	800c1a4 <USBD_StdEPReq+0xac>
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d016      	beq.n	800c1d0 <USBD_StdEPReq+0xd8>
 800c1a2:	e02c      	b.n	800c1fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00d      	beq.n	800c1c6 <USBD_StdEPReq+0xce>
 800c1aa:	7bbb      	ldrb	r3, [r7, #14]
 800c1ac:	2b80      	cmp	r3, #128	; 0x80
 800c1ae:	d00a      	beq.n	800c1c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f001 f96d 	bl	800d494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1ba:	2180      	movs	r1, #128	; 0x80
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f001 f969 	bl	800d494 <USBD_LL_StallEP>
 800c1c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1c4:	e020      	b.n	800c208 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 fc7a 	bl	800cac2 <USBD_CtlError>
              break;
 800c1ce:	e01b      	b.n	800c208 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	885b      	ldrh	r3, [r3, #2]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10e      	bne.n	800c1f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c1d8:	7bbb      	ldrb	r3, [r7, #14]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00b      	beq.n	800c1f6 <USBD_StdEPReq+0xfe>
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
 800c1e0:	2b80      	cmp	r3, #128	; 0x80
 800c1e2:	d008      	beq.n	800c1f6 <USBD_StdEPReq+0xfe>
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	88db      	ldrh	r3, [r3, #6]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d104      	bne.n	800c1f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f001 f94f 	bl	800d494 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fd2e 	bl	800cc58 <USBD_CtlSendStatus>

              break;
 800c1fc:	e004      	b.n	800c208 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fc5e 	bl	800cac2 <USBD_CtlError>
              break;
 800c206:	bf00      	nop
          }
          break;
 800c208:	e107      	b.n	800c41a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b02      	cmp	r3, #2
 800c214:	d002      	beq.n	800c21c <USBD_StdEPReq+0x124>
 800c216:	2b03      	cmp	r3, #3
 800c218:	d016      	beq.n	800c248 <USBD_StdEPReq+0x150>
 800c21a:	e04b      	b.n	800c2b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00d      	beq.n	800c23e <USBD_StdEPReq+0x146>
 800c222:	7bbb      	ldrb	r3, [r7, #14]
 800c224:	2b80      	cmp	r3, #128	; 0x80
 800c226:	d00a      	beq.n	800c23e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c228:	7bbb      	ldrb	r3, [r7, #14]
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f001 f931 	bl	800d494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c232:	2180      	movs	r1, #128	; 0x80
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f001 f92d 	bl	800d494 <USBD_LL_StallEP>
 800c23a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c23c:	e040      	b.n	800c2c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c23e:	6839      	ldr	r1, [r7, #0]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 fc3e 	bl	800cac2 <USBD_CtlError>
              break;
 800c246:	e03b      	b.n	800c2c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	885b      	ldrh	r3, [r3, #2]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d136      	bne.n	800c2be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c250:	7bbb      	ldrb	r3, [r7, #14]
 800c252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c256:	2b00      	cmp	r3, #0
 800c258:	d004      	beq.n	800c264 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
 800c25c:	4619      	mov	r1, r3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f001 f937 	bl	800d4d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 fcf7 	bl	800cc58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c26a:	7bbb      	ldrb	r3, [r7, #14]
 800c26c:	4619      	mov	r1, r3
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f7ff fde2 	bl	800be38 <USBD_CoreFindEP>
 800c274:	4603      	mov	r3, r0
 800c276:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c278:	7b7b      	ldrb	r3, [r7, #13]
 800c27a:	2bff      	cmp	r3, #255	; 0xff
 800c27c:	d01f      	beq.n	800c2be <USBD_StdEPReq+0x1c6>
 800c27e:	7b7b      	ldrb	r3, [r7, #13]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d11c      	bne.n	800c2be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c284:	7b7a      	ldrb	r2, [r7, #13]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c28c:	7b7a      	ldrb	r2, [r7, #13]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	32ae      	adds	r2, #174	; 0xae
 800c292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d010      	beq.n	800c2be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c29c:	7b7a      	ldrb	r2, [r7, #13]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	32ae      	adds	r2, #174	; 0xae
 800c2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	4798      	blx	r3
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c2b2:	e004      	b.n	800c2be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c2b4:	6839      	ldr	r1, [r7, #0]
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fc03 	bl	800cac2 <USBD_CtlError>
              break;
 800c2bc:	e000      	b.n	800c2c0 <USBD_StdEPReq+0x1c8>
              break;
 800c2be:	bf00      	nop
          }
          break;
 800c2c0:	e0ab      	b.n	800c41a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d002      	beq.n	800c2d4 <USBD_StdEPReq+0x1dc>
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	d032      	beq.n	800c338 <USBD_StdEPReq+0x240>
 800c2d2:	e097      	b.n	800c404 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2d4:	7bbb      	ldrb	r3, [r7, #14]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d007      	beq.n	800c2ea <USBD_StdEPReq+0x1f2>
 800c2da:	7bbb      	ldrb	r3, [r7, #14]
 800c2dc:	2b80      	cmp	r3, #128	; 0x80
 800c2de:	d004      	beq.n	800c2ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fbed 	bl	800cac2 <USBD_CtlError>
                break;
 800c2e8:	e091      	b.n	800c40e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	da0b      	bge.n	800c30a <USBD_StdEPReq+0x212>
 800c2f2:	7bbb      	ldrb	r3, [r7, #14]
 800c2f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	4413      	add	r3, r2
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	3310      	adds	r3, #16
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	4413      	add	r3, r2
 800c306:	3304      	adds	r3, #4
 800c308:	e00b      	b.n	800c322 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c30a:	7bbb      	ldrb	r3, [r7, #14]
 800c30c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c310:	4613      	mov	r3, r2
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	4413      	add	r3, r2
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	4413      	add	r3, r2
 800c320:	3304      	adds	r3, #4
 800c322:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2200      	movs	r2, #0
 800c328:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	2202      	movs	r2, #2
 800c32e:	4619      	mov	r1, r3
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 fc37 	bl	800cba4 <USBD_CtlSendData>
              break;
 800c336:	e06a      	b.n	800c40e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	da11      	bge.n	800c364 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c340:	7bbb      	ldrb	r3, [r7, #14]
 800c342:	f003 020f 	and.w	r2, r3, #15
 800c346:	6879      	ldr	r1, [r7, #4]
 800c348:	4613      	mov	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	440b      	add	r3, r1
 800c352:	3324      	adds	r3, #36	; 0x24
 800c354:	881b      	ldrh	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d117      	bne.n	800c38a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 fbb0 	bl	800cac2 <USBD_CtlError>
                  break;
 800c362:	e054      	b.n	800c40e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c364:	7bbb      	ldrb	r3, [r7, #14]
 800c366:	f003 020f 	and.w	r2, r3, #15
 800c36a:	6879      	ldr	r1, [r7, #4]
 800c36c:	4613      	mov	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	4413      	add	r3, r2
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	440b      	add	r3, r1
 800c376:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c37a:	881b      	ldrh	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d104      	bne.n	800c38a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fb9d 	bl	800cac2 <USBD_CtlError>
                  break;
 800c388:	e041      	b.n	800c40e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c38a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	da0b      	bge.n	800c3aa <USBD_StdEPReq+0x2b2>
 800c392:	7bbb      	ldrb	r3, [r7, #14]
 800c394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c398:	4613      	mov	r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	3310      	adds	r3, #16
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	e00b      	b.n	800c3c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c3aa:	7bbb      	ldrb	r3, [r7, #14]
 800c3ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	4413      	add	r3, r2
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c3c4:	7bbb      	ldrb	r3, [r7, #14]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d002      	beq.n	800c3d0 <USBD_StdEPReq+0x2d8>
 800c3ca:	7bbb      	ldrb	r3, [r7, #14]
 800c3cc:	2b80      	cmp	r3, #128	; 0x80
 800c3ce:	d103      	bne.n	800c3d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	601a      	str	r2, [r3, #0]
 800c3d6:	e00e      	b.n	800c3f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c3d8:	7bbb      	ldrb	r3, [r7, #14]
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f001 f897 	bl	800d510 <USBD_LL_IsStallEP>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d003      	beq.n	800c3f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	e002      	b.n	800c3f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2202      	movs	r2, #2
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fbd1 	bl	800cba4 <USBD_CtlSendData>
              break;
 800c402:	e004      	b.n	800c40e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c404:	6839      	ldr	r1, [r7, #0]
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 fb5b 	bl	800cac2 <USBD_CtlError>
              break;
 800c40c:	bf00      	nop
          }
          break;
 800c40e:	e004      	b.n	800c41a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fb55 	bl	800cac2 <USBD_CtlError>
          break;
 800c418:	bf00      	nop
      }
      break;
 800c41a:	e005      	b.n	800c428 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c41c:	6839      	ldr	r1, [r7, #0]
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fb4f 	bl	800cac2 <USBD_CtlError>
      break;
 800c424:	e000      	b.n	800c428 <USBD_StdEPReq+0x330>
      break;
 800c426:	bf00      	nop
  }

  return ret;
 800c428:	7bfb      	ldrb	r3, [r7, #15]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
	...

0800c434 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c43e:	2300      	movs	r3, #0
 800c440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c442:	2300      	movs	r3, #0
 800c444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c446:	2300      	movs	r3, #0
 800c448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	885b      	ldrh	r3, [r3, #2]
 800c44e:	0a1b      	lsrs	r3, r3, #8
 800c450:	b29b      	uxth	r3, r3
 800c452:	3b01      	subs	r3, #1
 800c454:	2b06      	cmp	r3, #6
 800c456:	f200 8128 	bhi.w	800c6aa <USBD_GetDescriptor+0x276>
 800c45a:	a201      	add	r2, pc, #4	; (adr r2, 800c460 <USBD_GetDescriptor+0x2c>)
 800c45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c460:	0800c47d 	.word	0x0800c47d
 800c464:	0800c495 	.word	0x0800c495
 800c468:	0800c4d5 	.word	0x0800c4d5
 800c46c:	0800c6ab 	.word	0x0800c6ab
 800c470:	0800c6ab 	.word	0x0800c6ab
 800c474:	0800c64b 	.word	0x0800c64b
 800c478:	0800c677 	.word	0x0800c677
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	7c12      	ldrb	r2, [r2, #16]
 800c488:	f107 0108 	add.w	r1, r7, #8
 800c48c:	4610      	mov	r0, r2
 800c48e:	4798      	blx	r3
 800c490:	60f8      	str	r0, [r7, #12]
      break;
 800c492:	e112      	b.n	800c6ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	7c1b      	ldrb	r3, [r3, #16]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d10d      	bne.n	800c4b8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a4:	f107 0208 	add.w	r2, r7, #8
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	4798      	blx	r3
 800c4ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c4b6:	e100      	b.n	800c6ba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c0:	f107 0208 	add.w	r2, r7, #8
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4798      	blx	r3
 800c4c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	701a      	strb	r2, [r3, #0]
      break;
 800c4d2:	e0f2      	b.n	800c6ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	885b      	ldrh	r3, [r3, #2]
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b05      	cmp	r3, #5
 800c4dc:	f200 80ac 	bhi.w	800c638 <USBD_GetDescriptor+0x204>
 800c4e0:	a201      	add	r2, pc, #4	; (adr r2, 800c4e8 <USBD_GetDescriptor+0xb4>)
 800c4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e6:	bf00      	nop
 800c4e8:	0800c501 	.word	0x0800c501
 800c4ec:	0800c535 	.word	0x0800c535
 800c4f0:	0800c569 	.word	0x0800c569
 800c4f4:	0800c59d 	.word	0x0800c59d
 800c4f8:	0800c5d1 	.word	0x0800c5d1
 800c4fc:	0800c605 	.word	0x0800c605
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00b      	beq.n	800c524 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	7c12      	ldrb	r2, [r2, #16]
 800c518:	f107 0108 	add.w	r1, r7, #8
 800c51c:	4610      	mov	r0, r2
 800c51e:	4798      	blx	r3
 800c520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c522:	e091      	b.n	800c648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 facb 	bl	800cac2 <USBD_CtlError>
            err++;
 800c52c:	7afb      	ldrb	r3, [r7, #11]
 800c52e:	3301      	adds	r3, #1
 800c530:	72fb      	strb	r3, [r7, #11]
          break;
 800c532:	e089      	b.n	800c648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00b      	beq.n	800c558 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	7c12      	ldrb	r2, [r2, #16]
 800c54c:	f107 0108 	add.w	r1, r7, #8
 800c550:	4610      	mov	r0, r2
 800c552:	4798      	blx	r3
 800c554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c556:	e077      	b.n	800c648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fab1 	bl	800cac2 <USBD_CtlError>
            err++;
 800c560:	7afb      	ldrb	r3, [r7, #11]
 800c562:	3301      	adds	r3, #1
 800c564:	72fb      	strb	r3, [r7, #11]
          break;
 800c566:	e06f      	b.n	800c648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00b      	beq.n	800c58c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	7c12      	ldrb	r2, [r2, #16]
 800c580:	f107 0108 	add.w	r1, r7, #8
 800c584:	4610      	mov	r0, r2
 800c586:	4798      	blx	r3
 800c588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c58a:	e05d      	b.n	800c648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c58c:	6839      	ldr	r1, [r7, #0]
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 fa97 	bl	800cac2 <USBD_CtlError>
            err++;
 800c594:	7afb      	ldrb	r3, [r7, #11]
 800c596:	3301      	adds	r3, #1
 800c598:	72fb      	strb	r3, [r7, #11]
          break;
 800c59a:	e055      	b.n	800c648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00b      	beq.n	800c5c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ae:	691b      	ldr	r3, [r3, #16]
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	7c12      	ldrb	r2, [r2, #16]
 800c5b4:	f107 0108 	add.w	r1, r7, #8
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	4798      	blx	r3
 800c5bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5be:	e043      	b.n	800c648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fa7d 	bl	800cac2 <USBD_CtlError>
            err++;
 800c5c8:	7afb      	ldrb	r3, [r7, #11]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ce:	e03b      	b.n	800c648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5d6:	695b      	ldr	r3, [r3, #20]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00b      	beq.n	800c5f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5e2:	695b      	ldr	r3, [r3, #20]
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	7c12      	ldrb	r2, [r2, #16]
 800c5e8:	f107 0108 	add.w	r1, r7, #8
 800c5ec:	4610      	mov	r0, r2
 800c5ee:	4798      	blx	r3
 800c5f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5f2:	e029      	b.n	800c648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fa63 	bl	800cac2 <USBD_CtlError>
            err++;
 800c5fc:	7afb      	ldrb	r3, [r7, #11]
 800c5fe:	3301      	adds	r3, #1
 800c600:	72fb      	strb	r3, [r7, #11]
          break;
 800c602:	e021      	b.n	800c648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c60a:	699b      	ldr	r3, [r3, #24]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00b      	beq.n	800c628 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c616:	699b      	ldr	r3, [r3, #24]
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	7c12      	ldrb	r2, [r2, #16]
 800c61c:	f107 0108 	add.w	r1, r7, #8
 800c620:	4610      	mov	r0, r2
 800c622:	4798      	blx	r3
 800c624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c626:	e00f      	b.n	800c648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 fa49 	bl	800cac2 <USBD_CtlError>
            err++;
 800c630:	7afb      	ldrb	r3, [r7, #11]
 800c632:	3301      	adds	r3, #1
 800c634:	72fb      	strb	r3, [r7, #11]
          break;
 800c636:	e007      	b.n	800c648 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fa41 	bl	800cac2 <USBD_CtlError>
          err++;
 800c640:	7afb      	ldrb	r3, [r7, #11]
 800c642:	3301      	adds	r3, #1
 800c644:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c646:	bf00      	nop
      }
      break;
 800c648:	e037      	b.n	800c6ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	7c1b      	ldrb	r3, [r3, #16]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d109      	bne.n	800c666 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c65a:	f107 0208 	add.w	r2, r7, #8
 800c65e:	4610      	mov	r0, r2
 800c660:	4798      	blx	r3
 800c662:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c664:	e029      	b.n	800c6ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c666:	6839      	ldr	r1, [r7, #0]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fa2a 	bl	800cac2 <USBD_CtlError>
        err++;
 800c66e:	7afb      	ldrb	r3, [r7, #11]
 800c670:	3301      	adds	r3, #1
 800c672:	72fb      	strb	r3, [r7, #11]
      break;
 800c674:	e021      	b.n	800c6ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	7c1b      	ldrb	r3, [r3, #16]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10d      	bne.n	800c69a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c686:	f107 0208 	add.w	r2, r7, #8
 800c68a:	4610      	mov	r0, r2
 800c68c:	4798      	blx	r3
 800c68e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	3301      	adds	r3, #1
 800c694:	2207      	movs	r2, #7
 800c696:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c698:	e00f      	b.n	800c6ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c69a:	6839      	ldr	r1, [r7, #0]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fa10 	bl	800cac2 <USBD_CtlError>
        err++;
 800c6a2:	7afb      	ldrb	r3, [r7, #11]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	72fb      	strb	r3, [r7, #11]
      break;
 800c6a8:	e007      	b.n	800c6ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c6aa:	6839      	ldr	r1, [r7, #0]
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fa08 	bl	800cac2 <USBD_CtlError>
      err++;
 800c6b2:	7afb      	ldrb	r3, [r7, #11]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c6b8:	bf00      	nop
  }

  if (err != 0U)
 800c6ba:	7afb      	ldrb	r3, [r7, #11]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d11e      	bne.n	800c6fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	88db      	ldrh	r3, [r3, #6]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d016      	beq.n	800c6f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c6c8:	893b      	ldrh	r3, [r7, #8]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d00e      	beq.n	800c6ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	88da      	ldrh	r2, [r3, #6]
 800c6d2:	893b      	ldrh	r3, [r7, #8]
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	bf28      	it	cs
 800c6d8:	4613      	movcs	r3, r2
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c6de:	893b      	ldrh	r3, [r7, #8]
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	68f9      	ldr	r1, [r7, #12]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fa5d 	bl	800cba4 <USBD_CtlSendData>
 800c6ea:	e009      	b.n	800c700 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c6ec:	6839      	ldr	r1, [r7, #0]
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 f9e7 	bl	800cac2 <USBD_CtlError>
 800c6f4:	e004      	b.n	800c700 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 faae 	bl	800cc58 <USBD_CtlSendStatus>
 800c6fc:	e000      	b.n	800c700 <USBD_GetDescriptor+0x2cc>
    return;
 800c6fe:	bf00      	nop
  }
}
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop

0800c708 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	889b      	ldrh	r3, [r3, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d131      	bne.n	800c77e <USBD_SetAddress+0x76>
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	88db      	ldrh	r3, [r3, #6]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d12d      	bne.n	800c77e <USBD_SetAddress+0x76>
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	885b      	ldrh	r3, [r3, #2]
 800c726:	2b7f      	cmp	r3, #127	; 0x7f
 800c728:	d829      	bhi.n	800c77e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	885b      	ldrh	r3, [r3, #2]
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c734:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b03      	cmp	r3, #3
 800c740:	d104      	bne.n	800c74c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c742:	6839      	ldr	r1, [r7, #0]
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 f9bc 	bl	800cac2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c74a:	e01d      	b.n	800c788 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	7bfa      	ldrb	r2, [r7, #15]
 800c750:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c754:	7bfb      	ldrb	r3, [r7, #15]
 800c756:	4619      	mov	r1, r3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 ff05 	bl	800d568 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 fa7a 	bl	800cc58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d004      	beq.n	800c774 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2202      	movs	r2, #2
 800c76e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c772:	e009      	b.n	800c788 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c77c:	e004      	b.n	800c788 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f99e 	bl	800cac2 <USBD_CtlError>
  }
}
 800c786:	bf00      	nop
 800c788:	bf00      	nop
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c79a:	2300      	movs	r3, #0
 800c79c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	885b      	ldrh	r3, [r3, #2]
 800c7a2:	b2da      	uxtb	r2, r3
 800c7a4:	4b4e      	ldr	r3, [pc, #312]	; (800c8e0 <USBD_SetConfig+0x150>)
 800c7a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c7a8:	4b4d      	ldr	r3, [pc, #308]	; (800c8e0 <USBD_SetConfig+0x150>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d905      	bls.n	800c7bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c7b0:	6839      	ldr	r1, [r7, #0]
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f985 	bl	800cac2 <USBD_CtlError>
    return USBD_FAIL;
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	e08c      	b.n	800c8d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d002      	beq.n	800c7ce <USBD_SetConfig+0x3e>
 800c7c8:	2b03      	cmp	r3, #3
 800c7ca:	d029      	beq.n	800c820 <USBD_SetConfig+0x90>
 800c7cc:	e075      	b.n	800c8ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c7ce:	4b44      	ldr	r3, [pc, #272]	; (800c8e0 <USBD_SetConfig+0x150>)
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d020      	beq.n	800c818 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c7d6:	4b42      	ldr	r3, [pc, #264]	; (800c8e0 <USBD_SetConfig+0x150>)
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	461a      	mov	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7e0:	4b3f      	ldr	r3, [pc, #252]	; (800c8e0 <USBD_SetConfig+0x150>)
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f7fe ffe7 	bl	800b7ba <USBD_SetClassConfig>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c7f0:	7bfb      	ldrb	r3, [r7, #15]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d008      	beq.n	800c808 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f962 	bl	800cac2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2202      	movs	r2, #2
 800c802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c806:	e065      	b.n	800c8d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fa25 	bl	800cc58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2203      	movs	r2, #3
 800c812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c816:	e05d      	b.n	800c8d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fa1d 	bl	800cc58 <USBD_CtlSendStatus>
      break;
 800c81e:	e059      	b.n	800c8d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c820:	4b2f      	ldr	r3, [pc, #188]	; (800c8e0 <USBD_SetConfig+0x150>)
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d112      	bne.n	800c84e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2202      	movs	r2, #2
 800c82c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c830:	4b2b      	ldr	r3, [pc, #172]	; (800c8e0 <USBD_SetConfig+0x150>)
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	461a      	mov	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c83a:	4b29      	ldr	r3, [pc, #164]	; (800c8e0 <USBD_SetConfig+0x150>)
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	4619      	mov	r1, r3
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f7fe ffd6 	bl	800b7f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fa06 	bl	800cc58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c84c:	e042      	b.n	800c8d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c84e:	4b24      	ldr	r3, [pc, #144]	; (800c8e0 <USBD_SetConfig+0x150>)
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	461a      	mov	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d02a      	beq.n	800c8b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	b2db      	uxtb	r3, r3
 800c862:	4619      	mov	r1, r3
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f7fe ffc4 	bl	800b7f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c86a:	4b1d      	ldr	r3, [pc, #116]	; (800c8e0 <USBD_SetConfig+0x150>)
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	461a      	mov	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c874:	4b1a      	ldr	r3, [pc, #104]	; (800c8e0 <USBD_SetConfig+0x150>)
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	4619      	mov	r1, r3
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7fe ff9d 	bl	800b7ba <USBD_SetClassConfig>
 800c880:	4603      	mov	r3, r0
 800c882:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c884:	7bfb      	ldrb	r3, [r7, #15]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00f      	beq.n	800c8aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c88a:	6839      	ldr	r1, [r7, #0]
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 f918 	bl	800cac2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	b2db      	uxtb	r3, r3
 800c898:	4619      	mov	r1, r3
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7fe ffa9 	bl	800b7f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2202      	movs	r2, #2
 800c8a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c8a8:	e014      	b.n	800c8d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f9d4 	bl	800cc58 <USBD_CtlSendStatus>
      break;
 800c8b0:	e010      	b.n	800c8d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f9d0 	bl	800cc58 <USBD_CtlSendStatus>
      break;
 800c8b8:	e00c      	b.n	800c8d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c8ba:	6839      	ldr	r1, [r7, #0]
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f900 	bl	800cac2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c8c2:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <USBD_SetConfig+0x150>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f7fe ff92 	bl	800b7f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c8d2:	bf00      	nop
  }

  return ret;
 800c8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	200003a8 	.word	0x200003a8

0800c8e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	88db      	ldrh	r3, [r3, #6]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d004      	beq.n	800c900 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c8f6:	6839      	ldr	r1, [r7, #0]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f8e2 	bl	800cac2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c8fe:	e023      	b.n	800c948 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c906:	b2db      	uxtb	r3, r3
 800c908:	2b02      	cmp	r3, #2
 800c90a:	dc02      	bgt.n	800c912 <USBD_GetConfig+0x2e>
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	dc03      	bgt.n	800c918 <USBD_GetConfig+0x34>
 800c910:	e015      	b.n	800c93e <USBD_GetConfig+0x5a>
 800c912:	2b03      	cmp	r3, #3
 800c914:	d00b      	beq.n	800c92e <USBD_GetConfig+0x4a>
 800c916:	e012      	b.n	800c93e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3308      	adds	r3, #8
 800c922:	2201      	movs	r2, #1
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f93c 	bl	800cba4 <USBD_CtlSendData>
        break;
 800c92c:	e00c      	b.n	800c948 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	3304      	adds	r3, #4
 800c932:	2201      	movs	r2, #1
 800c934:	4619      	mov	r1, r3
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f934 	bl	800cba4 <USBD_CtlSendData>
        break;
 800c93c:	e004      	b.n	800c948 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c93e:	6839      	ldr	r1, [r7, #0]
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f8be 	bl	800cac2 <USBD_CtlError>
        break;
 800c946:	bf00      	nop
}
 800c948:	bf00      	nop
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c960:	b2db      	uxtb	r3, r3
 800c962:	3b01      	subs	r3, #1
 800c964:	2b02      	cmp	r3, #2
 800c966:	d81e      	bhi.n	800c9a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	88db      	ldrh	r3, [r3, #6]
 800c96c:	2b02      	cmp	r3, #2
 800c96e:	d004      	beq.n	800c97a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c970:	6839      	ldr	r1, [r7, #0]
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 f8a5 	bl	800cac2 <USBD_CtlError>
        break;
 800c978:	e01a      	b.n	800c9b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2201      	movs	r2, #1
 800c97e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c986:	2b00      	cmp	r3, #0
 800c988:	d005      	beq.n	800c996 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	f043 0202 	orr.w	r2, r3, #2
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	330c      	adds	r3, #12
 800c99a:	2202      	movs	r2, #2
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 f900 	bl	800cba4 <USBD_CtlSendData>
      break;
 800c9a4:	e004      	b.n	800c9b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f88a 	bl	800cac2 <USBD_CtlError>
      break;
 800c9ae:	bf00      	nop
  }
}
 800c9b0:	bf00      	nop
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	885b      	ldrh	r3, [r3, #2]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d107      	bne.n	800c9da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 f940 	bl	800cc58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c9d8:	e013      	b.n	800ca02 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	885b      	ldrh	r3, [r3, #2]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d10b      	bne.n	800c9fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	889b      	ldrh	r3, [r3, #4]
 800c9e6:	0a1b      	lsrs	r3, r3, #8
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	b2da      	uxtb	r2, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f930 	bl	800cc58 <USBD_CtlSendStatus>
}
 800c9f8:	e003      	b.n	800ca02 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 f860 	bl	800cac2 <USBD_CtlError>
}
 800ca02:	bf00      	nop
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b082      	sub	sp, #8
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
 800ca12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d80b      	bhi.n	800ca3a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	885b      	ldrh	r3, [r3, #2]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d10c      	bne.n	800ca44 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f910 	bl	800cc58 <USBD_CtlSendStatus>
      }
      break;
 800ca38:	e004      	b.n	800ca44 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f840 	bl	800cac2 <USBD_CtlError>
      break;
 800ca42:	e000      	b.n	800ca46 <USBD_ClrFeature+0x3c>
      break;
 800ca44:	bf00      	nop
  }
}
 800ca46:	bf00      	nop
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b084      	sub	sp, #16
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	781a      	ldrb	r2, [r3, #0]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3301      	adds	r3, #1
 800ca68:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	781a      	ldrb	r2, [r3, #0]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	3301      	adds	r3, #1
 800ca76:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f7ff fa41 	bl	800bf00 <SWAPBYTE>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	461a      	mov	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f7ff fa34 	bl	800bf00 <SWAPBYTE>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	3301      	adds	r3, #1
 800caa4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	3301      	adds	r3, #1
 800caaa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f7ff fa27 	bl	800bf00 <SWAPBYTE>
 800cab2:	4603      	mov	r3, r0
 800cab4:	461a      	mov	r2, r3
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	80da      	strh	r2, [r3, #6]
}
 800caba:	bf00      	nop
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b082      	sub	sp, #8
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
 800caca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cacc:	2180      	movs	r1, #128	; 0x80
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fce0 	bl	800d494 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cad4:	2100      	movs	r1, #0
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fcdc 	bl	800d494 <USBD_LL_StallEP>
}
 800cadc:	bf00      	nop
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800caf0:	2300      	movs	r3, #0
 800caf2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d036      	beq.n	800cb68 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cafe:	6938      	ldr	r0, [r7, #16]
 800cb00:	f000 f836 	bl	800cb70 <USBD_GetLen>
 800cb04:	4603      	mov	r3, r0
 800cb06:	3301      	adds	r3, #1
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	005b      	lsls	r3, r3, #1
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cb12:	7dfb      	ldrb	r3, [r7, #23]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	4413      	add	r3, r2
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	7812      	ldrb	r2, [r2, #0]
 800cb1c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb1e:	7dfb      	ldrb	r3, [r7, #23]
 800cb20:	3301      	adds	r3, #1
 800cb22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cb24:	7dfb      	ldrb	r3, [r7, #23]
 800cb26:	68ba      	ldr	r2, [r7, #8]
 800cb28:	4413      	add	r3, r2
 800cb2a:	2203      	movs	r2, #3
 800cb2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb2e:	7dfb      	ldrb	r3, [r7, #23]
 800cb30:	3301      	adds	r3, #1
 800cb32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cb34:	e013      	b.n	800cb5e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cb36:	7dfb      	ldrb	r3, [r7, #23]
 800cb38:	68ba      	ldr	r2, [r7, #8]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	7812      	ldrb	r2, [r2, #0]
 800cb40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	3301      	adds	r3, #1
 800cb46:	613b      	str	r3, [r7, #16]
    idx++;
 800cb48:	7dfb      	ldrb	r3, [r7, #23]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cb4e:	7dfb      	ldrb	r3, [r7, #23]
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	4413      	add	r3, r2
 800cb54:	2200      	movs	r2, #0
 800cb56:	701a      	strb	r2, [r3, #0]
    idx++;
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d1e7      	bne.n	800cb36 <USBD_GetString+0x52>
 800cb66:	e000      	b.n	800cb6a <USBD_GetString+0x86>
    return;
 800cb68:	bf00      	nop
  }
}
 800cb6a:	3718      	adds	r7, #24
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cb80:	e005      	b.n	800cb8e <USBD_GetLen+0x1e>
  {
    len++;
 800cb82:	7bfb      	ldrb	r3, [r7, #15]
 800cb84:	3301      	adds	r3, #1
 800cb86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1f5      	bne.n	800cb82 <USBD_GetLen+0x12>
  }

  return len;
 800cb96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3714      	adds	r7, #20
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	68ba      	ldr	r2, [r7, #8]
 800cbc8:	2100      	movs	r1, #0
 800cbca:	68f8      	ldr	r0, [r7, #12]
 800cbcc:	f000 fceb 	bl	800d5a6 <USBD_LL_Transmit>

  return USBD_OK;
 800cbd0:	2300      	movs	r3, #0
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b084      	sub	sp, #16
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	60f8      	str	r0, [r7, #12]
 800cbe2:	60b9      	str	r1, [r7, #8]
 800cbe4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	2100      	movs	r1, #0
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f000 fcda 	bl	800d5a6 <USBD_LL_Transmit>

  return USBD_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2203      	movs	r2, #3
 800cc0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	68ba      	ldr	r2, [r7, #8]
 800cc24:	2100      	movs	r1, #0
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f000 fcde 	bl	800d5e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b084      	sub	sp, #16
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	60f8      	str	r0, [r7, #12]
 800cc3e:	60b9      	str	r1, [r7, #8]
 800cc40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	68ba      	ldr	r2, [r7, #8]
 800cc46:	2100      	movs	r1, #0
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f000 fccd 	bl	800d5e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2204      	movs	r2, #4
 800cc64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc68:	2300      	movs	r3, #0
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 fc99 	bl	800d5a6 <USBD_LL_Transmit>

  return USBD_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b082      	sub	sp, #8
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2205      	movs	r2, #5
 800cc8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc8e:	2300      	movs	r3, #0
 800cc90:	2200      	movs	r2, #0
 800cc92:	2100      	movs	r1, #0
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 fca7 	bl	800d5e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cca8:	2200      	movs	r2, #0
 800ccaa:	4912      	ldr	r1, [pc, #72]	; (800ccf4 <MX_USB_DEVICE_Init+0x50>)
 800ccac:	4812      	ldr	r0, [pc, #72]	; (800ccf8 <MX_USB_DEVICE_Init+0x54>)
 800ccae:	f7fe fd07 	bl	800b6c0 <USBD_Init>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d001      	beq.n	800ccbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ccb8:	f7f5 f95c 	bl	8001f74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ccbc:	490f      	ldr	r1, [pc, #60]	; (800ccfc <MX_USB_DEVICE_Init+0x58>)
 800ccbe:	480e      	ldr	r0, [pc, #56]	; (800ccf8 <MX_USB_DEVICE_Init+0x54>)
 800ccc0:	f7fe fd2e 	bl	800b720 <USBD_RegisterClass>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ccca:	f7f5 f953 	bl	8001f74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ccce:	490c      	ldr	r1, [pc, #48]	; (800cd00 <MX_USB_DEVICE_Init+0x5c>)
 800ccd0:	4809      	ldr	r0, [pc, #36]	; (800ccf8 <MX_USB_DEVICE_Init+0x54>)
 800ccd2:	f7fe fc1f 	bl	800b514 <USBD_CDC_RegisterInterface>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d001      	beq.n	800cce0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ccdc:	f7f5 f94a 	bl	8001f74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cce0:	4805      	ldr	r0, [pc, #20]	; (800ccf8 <MX_USB_DEVICE_Init+0x54>)
 800cce2:	f7fe fd53 	bl	800b78c <USBD_Start>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ccec:	f7f5 f942 	bl	8001f74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ccf0:	bf00      	nop
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	200000b8 	.word	0x200000b8
 800ccf8:	200003ac 	.word	0x200003ac
 800ccfc:	20000024 	.word	0x20000024
 800cd00:	200000a4 	.word	0x200000a4

0800cd04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cd08:	2200      	movs	r2, #0
 800cd0a:	4905      	ldr	r1, [pc, #20]	; (800cd20 <CDC_Init_FS+0x1c>)
 800cd0c:	4805      	ldr	r0, [pc, #20]	; (800cd24 <CDC_Init_FS+0x20>)
 800cd0e:	f7fe fc1b 	bl	800b548 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cd12:	4905      	ldr	r1, [pc, #20]	; (800cd28 <CDC_Init_FS+0x24>)
 800cd14:	4803      	ldr	r0, [pc, #12]	; (800cd24 <CDC_Init_FS+0x20>)
 800cd16:	f7fe fc39 	bl	800b58c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cd1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	20000e88 	.word	0x20000e88
 800cd24:	200003ac 	.word	0x200003ac
 800cd28:	20000688 	.word	0x20000688

0800cd2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cd30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	6039      	str	r1, [r7, #0]
 800cd46:	71fb      	strb	r3, [r7, #7]
 800cd48:	4613      	mov	r3, r2
 800cd4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cd4c:	79fb      	ldrb	r3, [r7, #7]
 800cd4e:	2b23      	cmp	r3, #35	; 0x23
 800cd50:	d84a      	bhi.n	800cde8 <CDC_Control_FS+0xac>
 800cd52:	a201      	add	r2, pc, #4	; (adr r2, 800cd58 <CDC_Control_FS+0x1c>)
 800cd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd58:	0800cde9 	.word	0x0800cde9
 800cd5c:	0800cde9 	.word	0x0800cde9
 800cd60:	0800cde9 	.word	0x0800cde9
 800cd64:	0800cde9 	.word	0x0800cde9
 800cd68:	0800cde9 	.word	0x0800cde9
 800cd6c:	0800cde9 	.word	0x0800cde9
 800cd70:	0800cde9 	.word	0x0800cde9
 800cd74:	0800cde9 	.word	0x0800cde9
 800cd78:	0800cde9 	.word	0x0800cde9
 800cd7c:	0800cde9 	.word	0x0800cde9
 800cd80:	0800cde9 	.word	0x0800cde9
 800cd84:	0800cde9 	.word	0x0800cde9
 800cd88:	0800cde9 	.word	0x0800cde9
 800cd8c:	0800cde9 	.word	0x0800cde9
 800cd90:	0800cde9 	.word	0x0800cde9
 800cd94:	0800cde9 	.word	0x0800cde9
 800cd98:	0800cde9 	.word	0x0800cde9
 800cd9c:	0800cde9 	.word	0x0800cde9
 800cda0:	0800cde9 	.word	0x0800cde9
 800cda4:	0800cde9 	.word	0x0800cde9
 800cda8:	0800cde9 	.word	0x0800cde9
 800cdac:	0800cde9 	.word	0x0800cde9
 800cdb0:	0800cde9 	.word	0x0800cde9
 800cdb4:	0800cde9 	.word	0x0800cde9
 800cdb8:	0800cde9 	.word	0x0800cde9
 800cdbc:	0800cde9 	.word	0x0800cde9
 800cdc0:	0800cde9 	.word	0x0800cde9
 800cdc4:	0800cde9 	.word	0x0800cde9
 800cdc8:	0800cde9 	.word	0x0800cde9
 800cdcc:	0800cde9 	.word	0x0800cde9
 800cdd0:	0800cde9 	.word	0x0800cde9
 800cdd4:	0800cde9 	.word	0x0800cde9
 800cdd8:	0800cde9 	.word	0x0800cde9
 800cddc:	0800cde9 	.word	0x0800cde9
 800cde0:	0800cde9 	.word	0x0800cde9
 800cde4:	0800cde9 	.word	0x0800cde9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cde8:	bf00      	nop
  }

  return (USBD_OK);
 800cdea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ce02:	6879      	ldr	r1, [r7, #4]
 800ce04:	4805      	ldr	r0, [pc, #20]	; (800ce1c <CDC_Receive_FS+0x24>)
 800ce06:	f7fe fbc1 	bl	800b58c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ce0a:	4804      	ldr	r0, [pc, #16]	; (800ce1c <CDC_Receive_FS+0x24>)
 800ce0c:	f7fe fc22 	bl	800b654 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ce10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	200003ac 	.word	0x200003ac

0800ce20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	460b      	mov	r3, r1
 800ce2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ce30:	4b0d      	ldr	r3, [pc, #52]	; (800ce68 <CDC_Transmit_FS+0x48>)
 800ce32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d001      	beq.n	800ce46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ce42:	2301      	movs	r3, #1
 800ce44:	e00b      	b.n	800ce5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ce46:	887b      	ldrh	r3, [r7, #2]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	6879      	ldr	r1, [r7, #4]
 800ce4c:	4806      	ldr	r0, [pc, #24]	; (800ce68 <CDC_Transmit_FS+0x48>)
 800ce4e:	f7fe fb7b 	bl	800b548 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ce52:	4805      	ldr	r0, [pc, #20]	; (800ce68 <CDC_Transmit_FS+0x48>)
 800ce54:	f7fe fbb8 	bl	800b5c8 <USBD_CDC_TransmitPacket>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	200003ac 	.word	0x200003ac

0800ce6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b087      	sub	sp, #28
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	4613      	mov	r3, r2
 800ce78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ce7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	371c      	adds	r7, #28
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
	...

0800ce90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	6039      	str	r1, [r7, #0]
 800ce9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	2212      	movs	r2, #18
 800cea0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cea2:	4b03      	ldr	r3, [pc, #12]	; (800ceb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr
 800ceb0:	200000d4 	.word	0x200000d4

0800ceb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	4603      	mov	r3, r0
 800cebc:	6039      	str	r1, [r7, #0]
 800cebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	2204      	movs	r2, #4
 800cec4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cec6:	4b03      	ldr	r3, [pc, #12]	; (800ced4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr
 800ced4:	200000e8 	.word	0x200000e8

0800ced8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	4603      	mov	r3, r0
 800cee0:	6039      	str	r1, [r7, #0]
 800cee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cee4:	79fb      	ldrb	r3, [r7, #7]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d105      	bne.n	800cef6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	4907      	ldr	r1, [pc, #28]	; (800cf0c <USBD_FS_ProductStrDescriptor+0x34>)
 800ceee:	4808      	ldr	r0, [pc, #32]	; (800cf10 <USBD_FS_ProductStrDescriptor+0x38>)
 800cef0:	f7ff fdf8 	bl	800cae4 <USBD_GetString>
 800cef4:	e004      	b.n	800cf00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	4904      	ldr	r1, [pc, #16]	; (800cf0c <USBD_FS_ProductStrDescriptor+0x34>)
 800cefa:	4805      	ldr	r0, [pc, #20]	; (800cf10 <USBD_FS_ProductStrDescriptor+0x38>)
 800cefc:	f7ff fdf2 	bl	800cae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf00:	4b02      	ldr	r3, [pc, #8]	; (800cf0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	20001688 	.word	0x20001688
 800cf10:	0800f71c 	.word	0x0800f71c

0800cf14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	6039      	str	r1, [r7, #0]
 800cf1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf20:	683a      	ldr	r2, [r7, #0]
 800cf22:	4904      	ldr	r1, [pc, #16]	; (800cf34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cf24:	4804      	ldr	r0, [pc, #16]	; (800cf38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cf26:	f7ff fddd 	bl	800cae4 <USBD_GetString>
  return USBD_StrDesc;
 800cf2a:	4b02      	ldr	r3, [pc, #8]	; (800cf34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	20001688 	.word	0x20001688
 800cf38:	0800f734 	.word	0x0800f734

0800cf3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	4603      	mov	r3, r0
 800cf44:	6039      	str	r1, [r7, #0]
 800cf46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	221a      	movs	r2, #26
 800cf4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cf4e:	f000 f843 	bl	800cfd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cf52:	4b02      	ldr	r3, [pc, #8]	; (800cf5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	200000ec 	.word	0x200000ec

0800cf60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	4603      	mov	r3, r0
 800cf68:	6039      	str	r1, [r7, #0]
 800cf6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cf6c:	79fb      	ldrb	r3, [r7, #7]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d105      	bne.n	800cf7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	4907      	ldr	r1, [pc, #28]	; (800cf94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf76:	4808      	ldr	r0, [pc, #32]	; (800cf98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf78:	f7ff fdb4 	bl	800cae4 <USBD_GetString>
 800cf7c:	e004      	b.n	800cf88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf7e:	683a      	ldr	r2, [r7, #0]
 800cf80:	4904      	ldr	r1, [pc, #16]	; (800cf94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf82:	4805      	ldr	r0, [pc, #20]	; (800cf98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf84:	f7ff fdae 	bl	800cae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf88:	4b02      	ldr	r3, [pc, #8]	; (800cf94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	20001688 	.word	0x20001688
 800cf98:	0800f748 	.word	0x0800f748

0800cf9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	6039      	str	r1, [r7, #0]
 800cfa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfa8:	79fb      	ldrb	r3, [r7, #7]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d105      	bne.n	800cfba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfae:	683a      	ldr	r2, [r7, #0]
 800cfb0:	4907      	ldr	r1, [pc, #28]	; (800cfd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cfb2:	4808      	ldr	r0, [pc, #32]	; (800cfd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cfb4:	f7ff fd96 	bl	800cae4 <USBD_GetString>
 800cfb8:	e004      	b.n	800cfc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfba:	683a      	ldr	r2, [r7, #0]
 800cfbc:	4904      	ldr	r1, [pc, #16]	; (800cfd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cfbe:	4805      	ldr	r0, [pc, #20]	; (800cfd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cfc0:	f7ff fd90 	bl	800cae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfc4:	4b02      	ldr	r3, [pc, #8]	; (800cfd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	20001688 	.word	0x20001688
 800cfd4:	0800f754 	.word	0x0800f754

0800cfd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cfde:	4b0f      	ldr	r3, [pc, #60]	; (800d01c <Get_SerialNum+0x44>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cfe4:	4b0e      	ldr	r3, [pc, #56]	; (800d020 <Get_SerialNum+0x48>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cfea:	4b0e      	ldr	r3, [pc, #56]	; (800d024 <Get_SerialNum+0x4c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	4413      	add	r3, r2
 800cff6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d009      	beq.n	800d012 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cffe:	2208      	movs	r2, #8
 800d000:	4909      	ldr	r1, [pc, #36]	; (800d028 <Get_SerialNum+0x50>)
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f000 f814 	bl	800d030 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d008:	2204      	movs	r2, #4
 800d00a:	4908      	ldr	r1, [pc, #32]	; (800d02c <Get_SerialNum+0x54>)
 800d00c:	68b8      	ldr	r0, [r7, #8]
 800d00e:	f000 f80f 	bl	800d030 <IntToUnicode>
  }
}
 800d012:	bf00      	nop
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	1fff7a10 	.word	0x1fff7a10
 800d020:	1fff7a14 	.word	0x1fff7a14
 800d024:	1fff7a18 	.word	0x1fff7a18
 800d028:	200000ee 	.word	0x200000ee
 800d02c:	200000fe 	.word	0x200000fe

0800d030 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d030:	b480      	push	{r7}
 800d032:	b087      	sub	sp, #28
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	4613      	mov	r3, r2
 800d03c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d03e:	2300      	movs	r3, #0
 800d040:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d042:	2300      	movs	r3, #0
 800d044:	75fb      	strb	r3, [r7, #23]
 800d046:	e027      	b.n	800d098 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	0f1b      	lsrs	r3, r3, #28
 800d04c:	2b09      	cmp	r3, #9
 800d04e:	d80b      	bhi.n	800d068 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	0f1b      	lsrs	r3, r3, #28
 800d054:	b2da      	uxtb	r2, r3
 800d056:	7dfb      	ldrb	r3, [r7, #23]
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	4619      	mov	r1, r3
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	440b      	add	r3, r1
 800d060:	3230      	adds	r2, #48	; 0x30
 800d062:	b2d2      	uxtb	r2, r2
 800d064:	701a      	strb	r2, [r3, #0]
 800d066:	e00a      	b.n	800d07e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	0f1b      	lsrs	r3, r3, #28
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	7dfb      	ldrb	r3, [r7, #23]
 800d070:	005b      	lsls	r3, r3, #1
 800d072:	4619      	mov	r1, r3
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	440b      	add	r3, r1
 800d078:	3237      	adds	r2, #55	; 0x37
 800d07a:	b2d2      	uxtb	r2, r2
 800d07c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	011b      	lsls	r3, r3, #4
 800d082:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d084:	7dfb      	ldrb	r3, [r7, #23]
 800d086:	005b      	lsls	r3, r3, #1
 800d088:	3301      	adds	r3, #1
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	4413      	add	r3, r2
 800d08e:	2200      	movs	r2, #0
 800d090:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d092:	7dfb      	ldrb	r3, [r7, #23]
 800d094:	3301      	adds	r3, #1
 800d096:	75fb      	strb	r3, [r7, #23]
 800d098:	7dfa      	ldrb	r2, [r7, #23]
 800d09a:	79fb      	ldrb	r3, [r7, #7]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d3d3      	bcc.n	800d048 <IntToUnicode+0x18>
  }
}
 800d0a0:	bf00      	nop
 800d0a2:	bf00      	nop
 800d0a4:	371c      	adds	r7, #28
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
	...

0800d0b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b08a      	sub	sp, #40	; 0x28
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0b8:	f107 0314 	add.w	r3, r7, #20
 800d0bc:	2200      	movs	r2, #0
 800d0be:	601a      	str	r2, [r3, #0]
 800d0c0:	605a      	str	r2, [r3, #4]
 800d0c2:	609a      	str	r2, [r3, #8]
 800d0c4:	60da      	str	r2, [r3, #12]
 800d0c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0d0:	d13a      	bne.n	800d148 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	613b      	str	r3, [r7, #16]
 800d0d6:	4b1e      	ldr	r3, [pc, #120]	; (800d150 <HAL_PCD_MspInit+0xa0>)
 800d0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0da:	4a1d      	ldr	r2, [pc, #116]	; (800d150 <HAL_PCD_MspInit+0xa0>)
 800d0dc:	f043 0301 	orr.w	r3, r3, #1
 800d0e0:	6313      	str	r3, [r2, #48]	; 0x30
 800d0e2:	4b1b      	ldr	r3, [pc, #108]	; (800d150 <HAL_PCD_MspInit+0xa0>)
 800d0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e6:	f003 0301 	and.w	r3, r3, #1
 800d0ea:	613b      	str	r3, [r7, #16]
 800d0ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d0ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d0f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0fc:	2303      	movs	r3, #3
 800d0fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d100:	230a      	movs	r3, #10
 800d102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d104:	f107 0314 	add.w	r3, r7, #20
 800d108:	4619      	mov	r1, r3
 800d10a:	4812      	ldr	r0, [pc, #72]	; (800d154 <HAL_PCD_MspInit+0xa4>)
 800d10c:	f7f5 fde6 	bl	8002cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d110:	4b0f      	ldr	r3, [pc, #60]	; (800d150 <HAL_PCD_MspInit+0xa0>)
 800d112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d114:	4a0e      	ldr	r2, [pc, #56]	; (800d150 <HAL_PCD_MspInit+0xa0>)
 800d116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d11a:	6353      	str	r3, [r2, #52]	; 0x34
 800d11c:	2300      	movs	r3, #0
 800d11e:	60fb      	str	r3, [r7, #12]
 800d120:	4b0b      	ldr	r3, [pc, #44]	; (800d150 <HAL_PCD_MspInit+0xa0>)
 800d122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d124:	4a0a      	ldr	r2, [pc, #40]	; (800d150 <HAL_PCD_MspInit+0xa0>)
 800d126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d12a:	6453      	str	r3, [r2, #68]	; 0x44
 800d12c:	4b08      	ldr	r3, [pc, #32]	; (800d150 <HAL_PCD_MspInit+0xa0>)
 800d12e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d134:	60fb      	str	r3, [r7, #12]
 800d136:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d138:	2200      	movs	r2, #0
 800d13a:	2100      	movs	r1, #0
 800d13c:	2043      	movs	r0, #67	; 0x43
 800d13e:	f7f5 fd66 	bl	8002c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d142:	2043      	movs	r0, #67	; 0x43
 800d144:	f7f5 fd7f 	bl	8002c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d148:	bf00      	nop
 800d14a:	3728      	adds	r7, #40	; 0x28
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	40023800 	.word	0x40023800
 800d154:	40020000 	.word	0x40020000

0800d158 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d16c:	4619      	mov	r1, r3
 800d16e:	4610      	mov	r0, r2
 800d170:	f7fe fb59 	bl	800b826 <USBD_LL_SetupStage>
}
 800d174:	bf00      	nop
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	460b      	mov	r3, r1
 800d186:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d18e:	78fa      	ldrb	r2, [r7, #3]
 800d190:	6879      	ldr	r1, [r7, #4]
 800d192:	4613      	mov	r3, r2
 800d194:	00db      	lsls	r3, r3, #3
 800d196:	4413      	add	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	440b      	add	r3, r1
 800d19c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	78fb      	ldrb	r3, [r7, #3]
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	f7fe fb93 	bl	800b8d0 <USBD_LL_DataOutStage>
}
 800d1aa:	bf00      	nop
 800d1ac:	3708      	adds	r7, #8
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}

0800d1b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b082      	sub	sp, #8
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d1c4:	78fa      	ldrb	r2, [r7, #3]
 800d1c6:	6879      	ldr	r1, [r7, #4]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	4413      	add	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	440b      	add	r3, r1
 800d1d2:	334c      	adds	r3, #76	; 0x4c
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	78fb      	ldrb	r3, [r7, #3]
 800d1d8:	4619      	mov	r1, r3
 800d1da:	f7fe fc2c 	bl	800ba36 <USBD_LL_DataInStage>
}
 800d1de:	bf00      	nop
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b082      	sub	sp, #8
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7fe fd60 	bl	800bcba <USBD_LL_SOF>
}
 800d1fa:	bf00      	nop
 800d1fc:	3708      	adds	r7, #8
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b084      	sub	sp, #16
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d20a:	2301      	movs	r3, #1
 800d20c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d102      	bne.n	800d21c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d216:	2300      	movs	r3, #0
 800d218:	73fb      	strb	r3, [r7, #15]
 800d21a:	e008      	b.n	800d22e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	2b02      	cmp	r3, #2
 800d222:	d102      	bne.n	800d22a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d224:	2301      	movs	r3, #1
 800d226:	73fb      	strb	r3, [r7, #15]
 800d228:	e001      	b.n	800d22e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d22a:	f7f4 fea3 	bl	8001f74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d234:	7bfa      	ldrb	r2, [r7, #15]
 800d236:	4611      	mov	r1, r2
 800d238:	4618      	mov	r0, r3
 800d23a:	f7fe fd00 	bl	800bc3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d244:	4618      	mov	r0, r3
 800d246:	f7fe fca8 	bl	800bb9a <USBD_LL_Reset>
}
 800d24a:	bf00      	nop
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
	...

0800d254 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe fcfb 	bl	800bc5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	6812      	ldr	r2, [r2, #0]
 800d276:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d27a:	f043 0301 	orr.w	r3, r3, #1
 800d27e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6a1b      	ldr	r3, [r3, #32]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d005      	beq.n	800d294 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d288:	4b04      	ldr	r3, [pc, #16]	; (800d29c <HAL_PCD_SuspendCallback+0x48>)
 800d28a:	691b      	ldr	r3, [r3, #16]
 800d28c:	4a03      	ldr	r2, [pc, #12]	; (800d29c <HAL_PCD_SuspendCallback+0x48>)
 800d28e:	f043 0306 	orr.w	r3, r3, #6
 800d292:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d294:	bf00      	nop
 800d296:	3708      	adds	r7, #8
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	e000ed00 	.word	0xe000ed00

0800d2a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fe fceb 	bl	800bc8a <USBD_LL_Resume>
}
 800d2b4:	bf00      	nop
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2ce:	78fa      	ldrb	r2, [r7, #3]
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe fd43 	bl	800bd5e <USBD_LL_IsoOUTIncomplete>
}
 800d2d8:	bf00      	nop
 800d2da:	3708      	adds	r7, #8
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2f2:	78fa      	ldrb	r2, [r7, #3]
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7fe fcff 	bl	800bcfa <USBD_LL_IsoINIncomplete>
}
 800d2fc:	bf00      	nop
 800d2fe:	3708      	adds	r7, #8
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d312:	4618      	mov	r0, r3
 800d314:	f7fe fd55 	bl	800bdc2 <USBD_LL_DevConnected>
}
 800d318:	bf00      	nop
 800d31a:	3708      	adds	r7, #8
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fe fd52 	bl	800bdd8 <USBD_LL_DevDisconnected>
}
 800d334:	bf00      	nop
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d13c      	bne.n	800d3c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d34c:	4a20      	ldr	r2, [pc, #128]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4a1e      	ldr	r2, [pc, #120]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d358:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d35c:	4b1c      	ldr	r3, [pc, #112]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d35e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d362:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d364:	4b1a      	ldr	r3, [pc, #104]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d366:	2204      	movs	r2, #4
 800d368:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d36a:	4b19      	ldr	r3, [pc, #100]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d36c:	2202      	movs	r2, #2
 800d36e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d370:	4b17      	ldr	r3, [pc, #92]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d372:	2200      	movs	r2, #0
 800d374:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d376:	4b16      	ldr	r3, [pc, #88]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d378:	2202      	movs	r2, #2
 800d37a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d37c:	4b14      	ldr	r3, [pc, #80]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d37e:	2200      	movs	r2, #0
 800d380:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d382:	4b13      	ldr	r3, [pc, #76]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d384:	2200      	movs	r2, #0
 800d386:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d388:	4b11      	ldr	r3, [pc, #68]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d38e:	4b10      	ldr	r3, [pc, #64]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d390:	2200      	movs	r2, #0
 800d392:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d394:	4b0e      	ldr	r3, [pc, #56]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d396:	2200      	movs	r2, #0
 800d398:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d39a:	480d      	ldr	r0, [pc, #52]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d39c:	f7f8 fb67 	bl	8005a6e <HAL_PCD_Init>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d001      	beq.n	800d3aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d3a6:	f7f4 fde5 	bl	8001f74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d3aa:	2180      	movs	r1, #128	; 0x80
 800d3ac:	4808      	ldr	r0, [pc, #32]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d3ae:	f7f9 fdbe 	bl	8006f2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d3b2:	2240      	movs	r2, #64	; 0x40
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	4806      	ldr	r0, [pc, #24]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d3b8:	f7f9 fd72 	bl	8006ea0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d3bc:	2280      	movs	r2, #128	; 0x80
 800d3be:	2101      	movs	r1, #1
 800d3c0:	4803      	ldr	r0, [pc, #12]	; (800d3d0 <USBD_LL_Init+0x94>)
 800d3c2:	f7f9 fd6d 	bl	8006ea0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	20001888 	.word	0x20001888

0800d3d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7f8 fc5c 	bl	8005ca8 <HAL_PCD_Start>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3f4:	7bfb      	ldrb	r3, [r7, #15]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 f942 	bl	800d680 <USBD_Get_USB_Status>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d400:	7bbb      	ldrb	r3, [r7, #14]
}
 800d402:	4618      	mov	r0, r3
 800d404:	3710      	adds	r7, #16
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b084      	sub	sp, #16
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
 800d412:	4608      	mov	r0, r1
 800d414:	4611      	mov	r1, r2
 800d416:	461a      	mov	r2, r3
 800d418:	4603      	mov	r3, r0
 800d41a:	70fb      	strb	r3, [r7, #3]
 800d41c:	460b      	mov	r3, r1
 800d41e:	70bb      	strb	r3, [r7, #2]
 800d420:	4613      	mov	r3, r2
 800d422:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d428:	2300      	movs	r3, #0
 800d42a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d432:	78bb      	ldrb	r3, [r7, #2]
 800d434:	883a      	ldrh	r2, [r7, #0]
 800d436:	78f9      	ldrb	r1, [r7, #3]
 800d438:	f7f9 f92d 	bl	8006696 <HAL_PCD_EP_Open>
 800d43c:	4603      	mov	r3, r0
 800d43e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d440:	7bfb      	ldrb	r3, [r7, #15]
 800d442:	4618      	mov	r0, r3
 800d444:	f000 f91c 	bl	800d680 <USBD_Get_USB_Status>
 800d448:	4603      	mov	r3, r0
 800d44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b084      	sub	sp, #16
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
 800d45e:	460b      	mov	r3, r1
 800d460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d470:	78fa      	ldrb	r2, [r7, #3]
 800d472:	4611      	mov	r1, r2
 800d474:	4618      	mov	r0, r3
 800d476:	f7f9 f976 	bl	8006766 <HAL_PCD_EP_Close>
 800d47a:	4603      	mov	r3, r0
 800d47c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d47e:	7bfb      	ldrb	r3, [r7, #15]
 800d480:	4618      	mov	r0, r3
 800d482:	f000 f8fd 	bl	800d680 <USBD_Get_USB_Status>
 800d486:	4603      	mov	r3, r0
 800d488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d48a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	460b      	mov	r3, r1
 800d49e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4ae:	78fa      	ldrb	r2, [r7, #3]
 800d4b0:	4611      	mov	r1, r2
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7f9 fa4e 	bl	8006954 <HAL_PCD_EP_SetStall>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4bc:	7bfb      	ldrb	r3, [r7, #15]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 f8de 	bl	800d680 <USBD_Get_USB_Status>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	460b      	mov	r3, r1
 800d4dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4ec:	78fa      	ldrb	r2, [r7, #3]
 800d4ee:	4611      	mov	r1, r2
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7f9 fa93 	bl	8006a1c <HAL_PCD_EP_ClrStall>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4fa:	7bfb      	ldrb	r3, [r7, #15]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 f8bf 	bl	800d680 <USBD_Get_USB_Status>
 800d502:	4603      	mov	r3, r0
 800d504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d506:	7bbb      	ldrb	r3, [r7, #14]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	460b      	mov	r3, r1
 800d51a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d522:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	da0b      	bge.n	800d544 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d52c:	78fb      	ldrb	r3, [r7, #3]
 800d52e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d532:	68f9      	ldr	r1, [r7, #12]
 800d534:	4613      	mov	r3, r2
 800d536:	00db      	lsls	r3, r3, #3
 800d538:	4413      	add	r3, r2
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	440b      	add	r3, r1
 800d53e:	333e      	adds	r3, #62	; 0x3e
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	e00b      	b.n	800d55c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d544:	78fb      	ldrb	r3, [r7, #3]
 800d546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d54a:	68f9      	ldr	r1, [r7, #12]
 800d54c:	4613      	mov	r3, r2
 800d54e:	00db      	lsls	r3, r3, #3
 800d550:	4413      	add	r3, r2
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	440b      	add	r3, r1
 800d556:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d55a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3714      	adds	r7, #20
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	460b      	mov	r3, r1
 800d572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d582:	78fa      	ldrb	r2, [r7, #3]
 800d584:	4611      	mov	r1, r2
 800d586:	4618      	mov	r0, r3
 800d588:	f7f9 f860 	bl	800664c <HAL_PCD_SetAddress>
 800d58c:	4603      	mov	r3, r0
 800d58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d590:	7bfb      	ldrb	r3, [r7, #15]
 800d592:	4618      	mov	r0, r3
 800d594:	f000 f874 	bl	800d680 <USBD_Get_USB_Status>
 800d598:	4603      	mov	r3, r0
 800d59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d59c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b086      	sub	sp, #24
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	60f8      	str	r0, [r7, #12]
 800d5ae:	607a      	str	r2, [r7, #4]
 800d5b0:	603b      	str	r3, [r7, #0]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d5c4:	7af9      	ldrb	r1, [r7, #11]
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	f7f9 f979 	bl	80068c0 <HAL_PCD_EP_Transmit>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5d2:	7dfb      	ldrb	r3, [r7, #23]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 f853 	bl	800d680 <USBD_Get_USB_Status>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5de:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3718      	adds	r7, #24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b086      	sub	sp, #24
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	607a      	str	r2, [r7, #4]
 800d5f2:	603b      	str	r3, [r7, #0]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d606:	7af9      	ldrb	r1, [r7, #11]
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	f7f9 f8f5 	bl	80067fa <HAL_PCD_EP_Receive>
 800d610:	4603      	mov	r3, r0
 800d612:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d614:	7dfb      	ldrb	r3, [r7, #23]
 800d616:	4618      	mov	r0, r3
 800d618:	f000 f832 	bl	800d680 <USBD_Get_USB_Status>
 800d61c:	4603      	mov	r3, r0
 800d61e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d620:	7dbb      	ldrb	r3, [r7, #22]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3718      	adds	r7, #24
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b082      	sub	sp, #8
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
 800d632:	460b      	mov	r3, r1
 800d634:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d63c:	78fa      	ldrb	r2, [r7, #3]
 800d63e:	4611      	mov	r1, r2
 800d640:	4618      	mov	r0, r3
 800d642:	f7f9 f925 	bl	8006890 <HAL_PCD_EP_GetRxCount>
 800d646:	4603      	mov	r3, r0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d658:	4b03      	ldr	r3, [pc, #12]	; (800d668 <USBD_static_malloc+0x18>)
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	20001d94 	.word	0x20001d94

0800d66c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]

}
 800d674:	bf00      	nop
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d680:	b480      	push	{r7}
 800d682:	b085      	sub	sp, #20
 800d684:	af00      	add	r7, sp, #0
 800d686:	4603      	mov	r3, r0
 800d688:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d68a:	2300      	movs	r3, #0
 800d68c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d68e:	79fb      	ldrb	r3, [r7, #7]
 800d690:	2b03      	cmp	r3, #3
 800d692:	d817      	bhi.n	800d6c4 <USBD_Get_USB_Status+0x44>
 800d694:	a201      	add	r2, pc, #4	; (adr r2, 800d69c <USBD_Get_USB_Status+0x1c>)
 800d696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d69a:	bf00      	nop
 800d69c:	0800d6ad 	.word	0x0800d6ad
 800d6a0:	0800d6b3 	.word	0x0800d6b3
 800d6a4:	0800d6b9 	.word	0x0800d6b9
 800d6a8:	0800d6bf 	.word	0x0800d6bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d6b0:	e00b      	b.n	800d6ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6b2:	2303      	movs	r3, #3
 800d6b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d6b6:	e008      	b.n	800d6ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d6bc:	e005      	b.n	800d6ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6be:	2303      	movs	r3, #3
 800d6c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d6c2:	e002      	b.n	800d6ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d6c8:	bf00      	nop
  }
  return usb_status;
 800d6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3714      	adds	r7, #20
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <__errno>:
 800d6d8:	4b01      	ldr	r3, [pc, #4]	; (800d6e0 <__errno+0x8>)
 800d6da:	6818      	ldr	r0, [r3, #0]
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	20000108 	.word	0x20000108

0800d6e4 <__libc_init_array>:
 800d6e4:	b570      	push	{r4, r5, r6, lr}
 800d6e6:	4d0d      	ldr	r5, [pc, #52]	; (800d71c <__libc_init_array+0x38>)
 800d6e8:	4c0d      	ldr	r4, [pc, #52]	; (800d720 <__libc_init_array+0x3c>)
 800d6ea:	1b64      	subs	r4, r4, r5
 800d6ec:	10a4      	asrs	r4, r4, #2
 800d6ee:	2600      	movs	r6, #0
 800d6f0:	42a6      	cmp	r6, r4
 800d6f2:	d109      	bne.n	800d708 <__libc_init_array+0x24>
 800d6f4:	4d0b      	ldr	r5, [pc, #44]	; (800d724 <__libc_init_array+0x40>)
 800d6f6:	4c0c      	ldr	r4, [pc, #48]	; (800d728 <__libc_init_array+0x44>)
 800d6f8:	f001 fa14 	bl	800eb24 <_init>
 800d6fc:	1b64      	subs	r4, r4, r5
 800d6fe:	10a4      	asrs	r4, r4, #2
 800d700:	2600      	movs	r6, #0
 800d702:	42a6      	cmp	r6, r4
 800d704:	d105      	bne.n	800d712 <__libc_init_array+0x2e>
 800d706:	bd70      	pop	{r4, r5, r6, pc}
 800d708:	f855 3b04 	ldr.w	r3, [r5], #4
 800d70c:	4798      	blx	r3
 800d70e:	3601      	adds	r6, #1
 800d710:	e7ee      	b.n	800d6f0 <__libc_init_array+0xc>
 800d712:	f855 3b04 	ldr.w	r3, [r5], #4
 800d716:	4798      	blx	r3
 800d718:	3601      	adds	r6, #1
 800d71a:	e7f2      	b.n	800d702 <__libc_init_array+0x1e>
 800d71c:	0800f81c 	.word	0x0800f81c
 800d720:	0800f81c 	.word	0x0800f81c
 800d724:	0800f81c 	.word	0x0800f81c
 800d728:	0800f820 	.word	0x0800f820

0800d72c <memcpy>:
 800d72c:	440a      	add	r2, r1
 800d72e:	4291      	cmp	r1, r2
 800d730:	f100 33ff 	add.w	r3, r0, #4294967295
 800d734:	d100      	bne.n	800d738 <memcpy+0xc>
 800d736:	4770      	bx	lr
 800d738:	b510      	push	{r4, lr}
 800d73a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d73e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d742:	4291      	cmp	r1, r2
 800d744:	d1f9      	bne.n	800d73a <memcpy+0xe>
 800d746:	bd10      	pop	{r4, pc}

0800d748 <memmove>:
 800d748:	4288      	cmp	r0, r1
 800d74a:	b510      	push	{r4, lr}
 800d74c:	eb01 0402 	add.w	r4, r1, r2
 800d750:	d902      	bls.n	800d758 <memmove+0x10>
 800d752:	4284      	cmp	r4, r0
 800d754:	4623      	mov	r3, r4
 800d756:	d807      	bhi.n	800d768 <memmove+0x20>
 800d758:	1e43      	subs	r3, r0, #1
 800d75a:	42a1      	cmp	r1, r4
 800d75c:	d008      	beq.n	800d770 <memmove+0x28>
 800d75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d762:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d766:	e7f8      	b.n	800d75a <memmove+0x12>
 800d768:	4402      	add	r2, r0
 800d76a:	4601      	mov	r1, r0
 800d76c:	428a      	cmp	r2, r1
 800d76e:	d100      	bne.n	800d772 <memmove+0x2a>
 800d770:	bd10      	pop	{r4, pc}
 800d772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d77a:	e7f7      	b.n	800d76c <memmove+0x24>

0800d77c <memset>:
 800d77c:	4402      	add	r2, r0
 800d77e:	4603      	mov	r3, r0
 800d780:	4293      	cmp	r3, r2
 800d782:	d100      	bne.n	800d786 <memset+0xa>
 800d784:	4770      	bx	lr
 800d786:	f803 1b01 	strb.w	r1, [r3], #1
 800d78a:	e7f9      	b.n	800d780 <memset+0x4>

0800d78c <iprintf>:
 800d78c:	b40f      	push	{r0, r1, r2, r3}
 800d78e:	4b0a      	ldr	r3, [pc, #40]	; (800d7b8 <iprintf+0x2c>)
 800d790:	b513      	push	{r0, r1, r4, lr}
 800d792:	681c      	ldr	r4, [r3, #0]
 800d794:	b124      	cbz	r4, 800d7a0 <iprintf+0x14>
 800d796:	69a3      	ldr	r3, [r4, #24]
 800d798:	b913      	cbnz	r3, 800d7a0 <iprintf+0x14>
 800d79a:	4620      	mov	r0, r4
 800d79c:	f000 faf8 	bl	800dd90 <__sinit>
 800d7a0:	ab05      	add	r3, sp, #20
 800d7a2:	9a04      	ldr	r2, [sp, #16]
 800d7a4:	68a1      	ldr	r1, [r4, #8]
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f000 fe6f 	bl	800e48c <_vfiprintf_r>
 800d7ae:	b002      	add	sp, #8
 800d7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7b4:	b004      	add	sp, #16
 800d7b6:	4770      	bx	lr
 800d7b8:	20000108 	.word	0x20000108

0800d7bc <_puts_r>:
 800d7bc:	b570      	push	{r4, r5, r6, lr}
 800d7be:	460e      	mov	r6, r1
 800d7c0:	4605      	mov	r5, r0
 800d7c2:	b118      	cbz	r0, 800d7cc <_puts_r+0x10>
 800d7c4:	6983      	ldr	r3, [r0, #24]
 800d7c6:	b90b      	cbnz	r3, 800d7cc <_puts_r+0x10>
 800d7c8:	f000 fae2 	bl	800dd90 <__sinit>
 800d7cc:	69ab      	ldr	r3, [r5, #24]
 800d7ce:	68ac      	ldr	r4, [r5, #8]
 800d7d0:	b913      	cbnz	r3, 800d7d8 <_puts_r+0x1c>
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	f000 fadc 	bl	800dd90 <__sinit>
 800d7d8:	4b2c      	ldr	r3, [pc, #176]	; (800d88c <_puts_r+0xd0>)
 800d7da:	429c      	cmp	r4, r3
 800d7dc:	d120      	bne.n	800d820 <_puts_r+0x64>
 800d7de:	686c      	ldr	r4, [r5, #4]
 800d7e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7e2:	07db      	lsls	r3, r3, #31
 800d7e4:	d405      	bmi.n	800d7f2 <_puts_r+0x36>
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	0598      	lsls	r0, r3, #22
 800d7ea:	d402      	bmi.n	800d7f2 <_puts_r+0x36>
 800d7ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ee:	f000 fb6d 	bl	800decc <__retarget_lock_acquire_recursive>
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	0719      	lsls	r1, r3, #28
 800d7f6:	d51d      	bpl.n	800d834 <_puts_r+0x78>
 800d7f8:	6923      	ldr	r3, [r4, #16]
 800d7fa:	b1db      	cbz	r3, 800d834 <_puts_r+0x78>
 800d7fc:	3e01      	subs	r6, #1
 800d7fe:	68a3      	ldr	r3, [r4, #8]
 800d800:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d804:	3b01      	subs	r3, #1
 800d806:	60a3      	str	r3, [r4, #8]
 800d808:	bb39      	cbnz	r1, 800d85a <_puts_r+0x9e>
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	da38      	bge.n	800d880 <_puts_r+0xc4>
 800d80e:	4622      	mov	r2, r4
 800d810:	210a      	movs	r1, #10
 800d812:	4628      	mov	r0, r5
 800d814:	f000 f8c0 	bl	800d998 <__swbuf_r>
 800d818:	3001      	adds	r0, #1
 800d81a:	d011      	beq.n	800d840 <_puts_r+0x84>
 800d81c:	250a      	movs	r5, #10
 800d81e:	e011      	b.n	800d844 <_puts_r+0x88>
 800d820:	4b1b      	ldr	r3, [pc, #108]	; (800d890 <_puts_r+0xd4>)
 800d822:	429c      	cmp	r4, r3
 800d824:	d101      	bne.n	800d82a <_puts_r+0x6e>
 800d826:	68ac      	ldr	r4, [r5, #8]
 800d828:	e7da      	b.n	800d7e0 <_puts_r+0x24>
 800d82a:	4b1a      	ldr	r3, [pc, #104]	; (800d894 <_puts_r+0xd8>)
 800d82c:	429c      	cmp	r4, r3
 800d82e:	bf08      	it	eq
 800d830:	68ec      	ldreq	r4, [r5, #12]
 800d832:	e7d5      	b.n	800d7e0 <_puts_r+0x24>
 800d834:	4621      	mov	r1, r4
 800d836:	4628      	mov	r0, r5
 800d838:	f000 f912 	bl	800da60 <__swsetup_r>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d0dd      	beq.n	800d7fc <_puts_r+0x40>
 800d840:	f04f 35ff 	mov.w	r5, #4294967295
 800d844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d846:	07da      	lsls	r2, r3, #31
 800d848:	d405      	bmi.n	800d856 <_puts_r+0x9a>
 800d84a:	89a3      	ldrh	r3, [r4, #12]
 800d84c:	059b      	lsls	r3, r3, #22
 800d84e:	d402      	bmi.n	800d856 <_puts_r+0x9a>
 800d850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d852:	f000 fb3c 	bl	800dece <__retarget_lock_release_recursive>
 800d856:	4628      	mov	r0, r5
 800d858:	bd70      	pop	{r4, r5, r6, pc}
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	da04      	bge.n	800d868 <_puts_r+0xac>
 800d85e:	69a2      	ldr	r2, [r4, #24]
 800d860:	429a      	cmp	r2, r3
 800d862:	dc06      	bgt.n	800d872 <_puts_r+0xb6>
 800d864:	290a      	cmp	r1, #10
 800d866:	d004      	beq.n	800d872 <_puts_r+0xb6>
 800d868:	6823      	ldr	r3, [r4, #0]
 800d86a:	1c5a      	adds	r2, r3, #1
 800d86c:	6022      	str	r2, [r4, #0]
 800d86e:	7019      	strb	r1, [r3, #0]
 800d870:	e7c5      	b.n	800d7fe <_puts_r+0x42>
 800d872:	4622      	mov	r2, r4
 800d874:	4628      	mov	r0, r5
 800d876:	f000 f88f 	bl	800d998 <__swbuf_r>
 800d87a:	3001      	adds	r0, #1
 800d87c:	d1bf      	bne.n	800d7fe <_puts_r+0x42>
 800d87e:	e7df      	b.n	800d840 <_puts_r+0x84>
 800d880:	6823      	ldr	r3, [r4, #0]
 800d882:	250a      	movs	r5, #10
 800d884:	1c5a      	adds	r2, r3, #1
 800d886:	6022      	str	r2, [r4, #0]
 800d888:	701d      	strb	r5, [r3, #0]
 800d88a:	e7db      	b.n	800d844 <_puts_r+0x88>
 800d88c:	0800f7a0 	.word	0x0800f7a0
 800d890:	0800f7c0 	.word	0x0800f7c0
 800d894:	0800f780 	.word	0x0800f780

0800d898 <puts>:
 800d898:	4b02      	ldr	r3, [pc, #8]	; (800d8a4 <puts+0xc>)
 800d89a:	4601      	mov	r1, r0
 800d89c:	6818      	ldr	r0, [r3, #0]
 800d89e:	f7ff bf8d 	b.w	800d7bc <_puts_r>
 800d8a2:	bf00      	nop
 800d8a4:	20000108 	.word	0x20000108

0800d8a8 <sniprintf>:
 800d8a8:	b40c      	push	{r2, r3}
 800d8aa:	b530      	push	{r4, r5, lr}
 800d8ac:	4b17      	ldr	r3, [pc, #92]	; (800d90c <sniprintf+0x64>)
 800d8ae:	1e0c      	subs	r4, r1, #0
 800d8b0:	681d      	ldr	r5, [r3, #0]
 800d8b2:	b09d      	sub	sp, #116	; 0x74
 800d8b4:	da08      	bge.n	800d8c8 <sniprintf+0x20>
 800d8b6:	238b      	movs	r3, #139	; 0x8b
 800d8b8:	602b      	str	r3, [r5, #0]
 800d8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d8be:	b01d      	add	sp, #116	; 0x74
 800d8c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8c4:	b002      	add	sp, #8
 800d8c6:	4770      	bx	lr
 800d8c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d8cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d8d0:	bf14      	ite	ne
 800d8d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d8d6:	4623      	moveq	r3, r4
 800d8d8:	9304      	str	r3, [sp, #16]
 800d8da:	9307      	str	r3, [sp, #28]
 800d8dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d8e0:	9002      	str	r0, [sp, #8]
 800d8e2:	9006      	str	r0, [sp, #24]
 800d8e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d8e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d8ea:	ab21      	add	r3, sp, #132	; 0x84
 800d8ec:	a902      	add	r1, sp, #8
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	9301      	str	r3, [sp, #4]
 800d8f2:	f000 fca1 	bl	800e238 <_svfiprintf_r>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	bfbc      	itt	lt
 800d8fa:	238b      	movlt	r3, #139	; 0x8b
 800d8fc:	602b      	strlt	r3, [r5, #0]
 800d8fe:	2c00      	cmp	r4, #0
 800d900:	d0dd      	beq.n	800d8be <sniprintf+0x16>
 800d902:	9b02      	ldr	r3, [sp, #8]
 800d904:	2200      	movs	r2, #0
 800d906:	701a      	strb	r2, [r3, #0]
 800d908:	e7d9      	b.n	800d8be <sniprintf+0x16>
 800d90a:	bf00      	nop
 800d90c:	20000108 	.word	0x20000108

0800d910 <__sread>:
 800d910:	b510      	push	{r4, lr}
 800d912:	460c      	mov	r4, r1
 800d914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d918:	f001 f87c 	bl	800ea14 <_read_r>
 800d91c:	2800      	cmp	r0, #0
 800d91e:	bfab      	itete	ge
 800d920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d922:	89a3      	ldrhlt	r3, [r4, #12]
 800d924:	181b      	addge	r3, r3, r0
 800d926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d92a:	bfac      	ite	ge
 800d92c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d92e:	81a3      	strhlt	r3, [r4, #12]
 800d930:	bd10      	pop	{r4, pc}

0800d932 <__swrite>:
 800d932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d936:	461f      	mov	r7, r3
 800d938:	898b      	ldrh	r3, [r1, #12]
 800d93a:	05db      	lsls	r3, r3, #23
 800d93c:	4605      	mov	r5, r0
 800d93e:	460c      	mov	r4, r1
 800d940:	4616      	mov	r6, r2
 800d942:	d505      	bpl.n	800d950 <__swrite+0x1e>
 800d944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d948:	2302      	movs	r3, #2
 800d94a:	2200      	movs	r2, #0
 800d94c:	f000 fac0 	bl	800ded0 <_lseek_r>
 800d950:	89a3      	ldrh	r3, [r4, #12]
 800d952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d95a:	81a3      	strh	r3, [r4, #12]
 800d95c:	4632      	mov	r2, r6
 800d95e:	463b      	mov	r3, r7
 800d960:	4628      	mov	r0, r5
 800d962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d966:	f000 b869 	b.w	800da3c <_write_r>

0800d96a <__sseek>:
 800d96a:	b510      	push	{r4, lr}
 800d96c:	460c      	mov	r4, r1
 800d96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d972:	f000 faad 	bl	800ded0 <_lseek_r>
 800d976:	1c43      	adds	r3, r0, #1
 800d978:	89a3      	ldrh	r3, [r4, #12]
 800d97a:	bf15      	itete	ne
 800d97c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d97e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d986:	81a3      	strheq	r3, [r4, #12]
 800d988:	bf18      	it	ne
 800d98a:	81a3      	strhne	r3, [r4, #12]
 800d98c:	bd10      	pop	{r4, pc}

0800d98e <__sclose>:
 800d98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d992:	f000 b8d3 	b.w	800db3c <_close_r>
	...

0800d998 <__swbuf_r>:
 800d998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99a:	460e      	mov	r6, r1
 800d99c:	4614      	mov	r4, r2
 800d99e:	4605      	mov	r5, r0
 800d9a0:	b118      	cbz	r0, 800d9aa <__swbuf_r+0x12>
 800d9a2:	6983      	ldr	r3, [r0, #24]
 800d9a4:	b90b      	cbnz	r3, 800d9aa <__swbuf_r+0x12>
 800d9a6:	f000 f9f3 	bl	800dd90 <__sinit>
 800d9aa:	4b21      	ldr	r3, [pc, #132]	; (800da30 <__swbuf_r+0x98>)
 800d9ac:	429c      	cmp	r4, r3
 800d9ae:	d12b      	bne.n	800da08 <__swbuf_r+0x70>
 800d9b0:	686c      	ldr	r4, [r5, #4]
 800d9b2:	69a3      	ldr	r3, [r4, #24]
 800d9b4:	60a3      	str	r3, [r4, #8]
 800d9b6:	89a3      	ldrh	r3, [r4, #12]
 800d9b8:	071a      	lsls	r2, r3, #28
 800d9ba:	d52f      	bpl.n	800da1c <__swbuf_r+0x84>
 800d9bc:	6923      	ldr	r3, [r4, #16]
 800d9be:	b36b      	cbz	r3, 800da1c <__swbuf_r+0x84>
 800d9c0:	6923      	ldr	r3, [r4, #16]
 800d9c2:	6820      	ldr	r0, [r4, #0]
 800d9c4:	1ac0      	subs	r0, r0, r3
 800d9c6:	6963      	ldr	r3, [r4, #20]
 800d9c8:	b2f6      	uxtb	r6, r6
 800d9ca:	4283      	cmp	r3, r0
 800d9cc:	4637      	mov	r7, r6
 800d9ce:	dc04      	bgt.n	800d9da <__swbuf_r+0x42>
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	f000 f948 	bl	800dc68 <_fflush_r>
 800d9d8:	bb30      	cbnz	r0, 800da28 <__swbuf_r+0x90>
 800d9da:	68a3      	ldr	r3, [r4, #8]
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	60a3      	str	r3, [r4, #8]
 800d9e0:	6823      	ldr	r3, [r4, #0]
 800d9e2:	1c5a      	adds	r2, r3, #1
 800d9e4:	6022      	str	r2, [r4, #0]
 800d9e6:	701e      	strb	r6, [r3, #0]
 800d9e8:	6963      	ldr	r3, [r4, #20]
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	4283      	cmp	r3, r0
 800d9ee:	d004      	beq.n	800d9fa <__swbuf_r+0x62>
 800d9f0:	89a3      	ldrh	r3, [r4, #12]
 800d9f2:	07db      	lsls	r3, r3, #31
 800d9f4:	d506      	bpl.n	800da04 <__swbuf_r+0x6c>
 800d9f6:	2e0a      	cmp	r6, #10
 800d9f8:	d104      	bne.n	800da04 <__swbuf_r+0x6c>
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	f000 f933 	bl	800dc68 <_fflush_r>
 800da02:	b988      	cbnz	r0, 800da28 <__swbuf_r+0x90>
 800da04:	4638      	mov	r0, r7
 800da06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da08:	4b0a      	ldr	r3, [pc, #40]	; (800da34 <__swbuf_r+0x9c>)
 800da0a:	429c      	cmp	r4, r3
 800da0c:	d101      	bne.n	800da12 <__swbuf_r+0x7a>
 800da0e:	68ac      	ldr	r4, [r5, #8]
 800da10:	e7cf      	b.n	800d9b2 <__swbuf_r+0x1a>
 800da12:	4b09      	ldr	r3, [pc, #36]	; (800da38 <__swbuf_r+0xa0>)
 800da14:	429c      	cmp	r4, r3
 800da16:	bf08      	it	eq
 800da18:	68ec      	ldreq	r4, [r5, #12]
 800da1a:	e7ca      	b.n	800d9b2 <__swbuf_r+0x1a>
 800da1c:	4621      	mov	r1, r4
 800da1e:	4628      	mov	r0, r5
 800da20:	f000 f81e 	bl	800da60 <__swsetup_r>
 800da24:	2800      	cmp	r0, #0
 800da26:	d0cb      	beq.n	800d9c0 <__swbuf_r+0x28>
 800da28:	f04f 37ff 	mov.w	r7, #4294967295
 800da2c:	e7ea      	b.n	800da04 <__swbuf_r+0x6c>
 800da2e:	bf00      	nop
 800da30:	0800f7a0 	.word	0x0800f7a0
 800da34:	0800f7c0 	.word	0x0800f7c0
 800da38:	0800f780 	.word	0x0800f780

0800da3c <_write_r>:
 800da3c:	b538      	push	{r3, r4, r5, lr}
 800da3e:	4d07      	ldr	r5, [pc, #28]	; (800da5c <_write_r+0x20>)
 800da40:	4604      	mov	r4, r0
 800da42:	4608      	mov	r0, r1
 800da44:	4611      	mov	r1, r2
 800da46:	2200      	movs	r2, #0
 800da48:	602a      	str	r2, [r5, #0]
 800da4a:	461a      	mov	r2, r3
 800da4c:	f7f4 fa60 	bl	8001f10 <_write>
 800da50:	1c43      	adds	r3, r0, #1
 800da52:	d102      	bne.n	800da5a <_write_r+0x1e>
 800da54:	682b      	ldr	r3, [r5, #0]
 800da56:	b103      	cbz	r3, 800da5a <_write_r+0x1e>
 800da58:	6023      	str	r3, [r4, #0]
 800da5a:	bd38      	pop	{r3, r4, r5, pc}
 800da5c:	20001fc0 	.word	0x20001fc0

0800da60 <__swsetup_r>:
 800da60:	4b32      	ldr	r3, [pc, #200]	; (800db2c <__swsetup_r+0xcc>)
 800da62:	b570      	push	{r4, r5, r6, lr}
 800da64:	681d      	ldr	r5, [r3, #0]
 800da66:	4606      	mov	r6, r0
 800da68:	460c      	mov	r4, r1
 800da6a:	b125      	cbz	r5, 800da76 <__swsetup_r+0x16>
 800da6c:	69ab      	ldr	r3, [r5, #24]
 800da6e:	b913      	cbnz	r3, 800da76 <__swsetup_r+0x16>
 800da70:	4628      	mov	r0, r5
 800da72:	f000 f98d 	bl	800dd90 <__sinit>
 800da76:	4b2e      	ldr	r3, [pc, #184]	; (800db30 <__swsetup_r+0xd0>)
 800da78:	429c      	cmp	r4, r3
 800da7a:	d10f      	bne.n	800da9c <__swsetup_r+0x3c>
 800da7c:	686c      	ldr	r4, [r5, #4]
 800da7e:	89a3      	ldrh	r3, [r4, #12]
 800da80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da84:	0719      	lsls	r1, r3, #28
 800da86:	d42c      	bmi.n	800dae2 <__swsetup_r+0x82>
 800da88:	06dd      	lsls	r5, r3, #27
 800da8a:	d411      	bmi.n	800dab0 <__swsetup_r+0x50>
 800da8c:	2309      	movs	r3, #9
 800da8e:	6033      	str	r3, [r6, #0]
 800da90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da94:	81a3      	strh	r3, [r4, #12]
 800da96:	f04f 30ff 	mov.w	r0, #4294967295
 800da9a:	e03e      	b.n	800db1a <__swsetup_r+0xba>
 800da9c:	4b25      	ldr	r3, [pc, #148]	; (800db34 <__swsetup_r+0xd4>)
 800da9e:	429c      	cmp	r4, r3
 800daa0:	d101      	bne.n	800daa6 <__swsetup_r+0x46>
 800daa2:	68ac      	ldr	r4, [r5, #8]
 800daa4:	e7eb      	b.n	800da7e <__swsetup_r+0x1e>
 800daa6:	4b24      	ldr	r3, [pc, #144]	; (800db38 <__swsetup_r+0xd8>)
 800daa8:	429c      	cmp	r4, r3
 800daaa:	bf08      	it	eq
 800daac:	68ec      	ldreq	r4, [r5, #12]
 800daae:	e7e6      	b.n	800da7e <__swsetup_r+0x1e>
 800dab0:	0758      	lsls	r0, r3, #29
 800dab2:	d512      	bpl.n	800dada <__swsetup_r+0x7a>
 800dab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dab6:	b141      	cbz	r1, 800daca <__swsetup_r+0x6a>
 800dab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dabc:	4299      	cmp	r1, r3
 800dabe:	d002      	beq.n	800dac6 <__swsetup_r+0x66>
 800dac0:	4630      	mov	r0, r6
 800dac2:	f000 fa7d 	bl	800dfc0 <_free_r>
 800dac6:	2300      	movs	r3, #0
 800dac8:	6363      	str	r3, [r4, #52]	; 0x34
 800daca:	89a3      	ldrh	r3, [r4, #12]
 800dacc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dad0:	81a3      	strh	r3, [r4, #12]
 800dad2:	2300      	movs	r3, #0
 800dad4:	6063      	str	r3, [r4, #4]
 800dad6:	6923      	ldr	r3, [r4, #16]
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	89a3      	ldrh	r3, [r4, #12]
 800dadc:	f043 0308 	orr.w	r3, r3, #8
 800dae0:	81a3      	strh	r3, [r4, #12]
 800dae2:	6923      	ldr	r3, [r4, #16]
 800dae4:	b94b      	cbnz	r3, 800dafa <__swsetup_r+0x9a>
 800dae6:	89a3      	ldrh	r3, [r4, #12]
 800dae8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800daec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800daf0:	d003      	beq.n	800dafa <__swsetup_r+0x9a>
 800daf2:	4621      	mov	r1, r4
 800daf4:	4630      	mov	r0, r6
 800daf6:	f000 fa23 	bl	800df40 <__smakebuf_r>
 800dafa:	89a0      	ldrh	r0, [r4, #12]
 800dafc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db00:	f010 0301 	ands.w	r3, r0, #1
 800db04:	d00a      	beq.n	800db1c <__swsetup_r+0xbc>
 800db06:	2300      	movs	r3, #0
 800db08:	60a3      	str	r3, [r4, #8]
 800db0a:	6963      	ldr	r3, [r4, #20]
 800db0c:	425b      	negs	r3, r3
 800db0e:	61a3      	str	r3, [r4, #24]
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	b943      	cbnz	r3, 800db26 <__swsetup_r+0xc6>
 800db14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db18:	d1ba      	bne.n	800da90 <__swsetup_r+0x30>
 800db1a:	bd70      	pop	{r4, r5, r6, pc}
 800db1c:	0781      	lsls	r1, r0, #30
 800db1e:	bf58      	it	pl
 800db20:	6963      	ldrpl	r3, [r4, #20]
 800db22:	60a3      	str	r3, [r4, #8]
 800db24:	e7f4      	b.n	800db10 <__swsetup_r+0xb0>
 800db26:	2000      	movs	r0, #0
 800db28:	e7f7      	b.n	800db1a <__swsetup_r+0xba>
 800db2a:	bf00      	nop
 800db2c:	20000108 	.word	0x20000108
 800db30:	0800f7a0 	.word	0x0800f7a0
 800db34:	0800f7c0 	.word	0x0800f7c0
 800db38:	0800f780 	.word	0x0800f780

0800db3c <_close_r>:
 800db3c:	b538      	push	{r3, r4, r5, lr}
 800db3e:	4d06      	ldr	r5, [pc, #24]	; (800db58 <_close_r+0x1c>)
 800db40:	2300      	movs	r3, #0
 800db42:	4604      	mov	r4, r0
 800db44:	4608      	mov	r0, r1
 800db46:	602b      	str	r3, [r5, #0]
 800db48:	f7f4 fbd7 	bl	80022fa <_close>
 800db4c:	1c43      	adds	r3, r0, #1
 800db4e:	d102      	bne.n	800db56 <_close_r+0x1a>
 800db50:	682b      	ldr	r3, [r5, #0]
 800db52:	b103      	cbz	r3, 800db56 <_close_r+0x1a>
 800db54:	6023      	str	r3, [r4, #0]
 800db56:	bd38      	pop	{r3, r4, r5, pc}
 800db58:	20001fc0 	.word	0x20001fc0

0800db5c <__sflush_r>:
 800db5c:	898a      	ldrh	r2, [r1, #12]
 800db5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db62:	4605      	mov	r5, r0
 800db64:	0710      	lsls	r0, r2, #28
 800db66:	460c      	mov	r4, r1
 800db68:	d458      	bmi.n	800dc1c <__sflush_r+0xc0>
 800db6a:	684b      	ldr	r3, [r1, #4]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	dc05      	bgt.n	800db7c <__sflush_r+0x20>
 800db70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db72:	2b00      	cmp	r3, #0
 800db74:	dc02      	bgt.n	800db7c <__sflush_r+0x20>
 800db76:	2000      	movs	r0, #0
 800db78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db7e:	2e00      	cmp	r6, #0
 800db80:	d0f9      	beq.n	800db76 <__sflush_r+0x1a>
 800db82:	2300      	movs	r3, #0
 800db84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db88:	682f      	ldr	r7, [r5, #0]
 800db8a:	602b      	str	r3, [r5, #0]
 800db8c:	d032      	beq.n	800dbf4 <__sflush_r+0x98>
 800db8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db90:	89a3      	ldrh	r3, [r4, #12]
 800db92:	075a      	lsls	r2, r3, #29
 800db94:	d505      	bpl.n	800dba2 <__sflush_r+0x46>
 800db96:	6863      	ldr	r3, [r4, #4]
 800db98:	1ac0      	subs	r0, r0, r3
 800db9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db9c:	b10b      	cbz	r3, 800dba2 <__sflush_r+0x46>
 800db9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dba0:	1ac0      	subs	r0, r0, r3
 800dba2:	2300      	movs	r3, #0
 800dba4:	4602      	mov	r2, r0
 800dba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dba8:	6a21      	ldr	r1, [r4, #32]
 800dbaa:	4628      	mov	r0, r5
 800dbac:	47b0      	blx	r6
 800dbae:	1c43      	adds	r3, r0, #1
 800dbb0:	89a3      	ldrh	r3, [r4, #12]
 800dbb2:	d106      	bne.n	800dbc2 <__sflush_r+0x66>
 800dbb4:	6829      	ldr	r1, [r5, #0]
 800dbb6:	291d      	cmp	r1, #29
 800dbb8:	d82c      	bhi.n	800dc14 <__sflush_r+0xb8>
 800dbba:	4a2a      	ldr	r2, [pc, #168]	; (800dc64 <__sflush_r+0x108>)
 800dbbc:	40ca      	lsrs	r2, r1
 800dbbe:	07d6      	lsls	r6, r2, #31
 800dbc0:	d528      	bpl.n	800dc14 <__sflush_r+0xb8>
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	6062      	str	r2, [r4, #4]
 800dbc6:	04d9      	lsls	r1, r3, #19
 800dbc8:	6922      	ldr	r2, [r4, #16]
 800dbca:	6022      	str	r2, [r4, #0]
 800dbcc:	d504      	bpl.n	800dbd8 <__sflush_r+0x7c>
 800dbce:	1c42      	adds	r2, r0, #1
 800dbd0:	d101      	bne.n	800dbd6 <__sflush_r+0x7a>
 800dbd2:	682b      	ldr	r3, [r5, #0]
 800dbd4:	b903      	cbnz	r3, 800dbd8 <__sflush_r+0x7c>
 800dbd6:	6560      	str	r0, [r4, #84]	; 0x54
 800dbd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbda:	602f      	str	r7, [r5, #0]
 800dbdc:	2900      	cmp	r1, #0
 800dbde:	d0ca      	beq.n	800db76 <__sflush_r+0x1a>
 800dbe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbe4:	4299      	cmp	r1, r3
 800dbe6:	d002      	beq.n	800dbee <__sflush_r+0x92>
 800dbe8:	4628      	mov	r0, r5
 800dbea:	f000 f9e9 	bl	800dfc0 <_free_r>
 800dbee:	2000      	movs	r0, #0
 800dbf0:	6360      	str	r0, [r4, #52]	; 0x34
 800dbf2:	e7c1      	b.n	800db78 <__sflush_r+0x1c>
 800dbf4:	6a21      	ldr	r1, [r4, #32]
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	47b0      	blx	r6
 800dbfc:	1c41      	adds	r1, r0, #1
 800dbfe:	d1c7      	bne.n	800db90 <__sflush_r+0x34>
 800dc00:	682b      	ldr	r3, [r5, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d0c4      	beq.n	800db90 <__sflush_r+0x34>
 800dc06:	2b1d      	cmp	r3, #29
 800dc08:	d001      	beq.n	800dc0e <__sflush_r+0xb2>
 800dc0a:	2b16      	cmp	r3, #22
 800dc0c:	d101      	bne.n	800dc12 <__sflush_r+0xb6>
 800dc0e:	602f      	str	r7, [r5, #0]
 800dc10:	e7b1      	b.n	800db76 <__sflush_r+0x1a>
 800dc12:	89a3      	ldrh	r3, [r4, #12]
 800dc14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc18:	81a3      	strh	r3, [r4, #12]
 800dc1a:	e7ad      	b.n	800db78 <__sflush_r+0x1c>
 800dc1c:	690f      	ldr	r7, [r1, #16]
 800dc1e:	2f00      	cmp	r7, #0
 800dc20:	d0a9      	beq.n	800db76 <__sflush_r+0x1a>
 800dc22:	0793      	lsls	r3, r2, #30
 800dc24:	680e      	ldr	r6, [r1, #0]
 800dc26:	bf08      	it	eq
 800dc28:	694b      	ldreq	r3, [r1, #20]
 800dc2a:	600f      	str	r7, [r1, #0]
 800dc2c:	bf18      	it	ne
 800dc2e:	2300      	movne	r3, #0
 800dc30:	eba6 0807 	sub.w	r8, r6, r7
 800dc34:	608b      	str	r3, [r1, #8]
 800dc36:	f1b8 0f00 	cmp.w	r8, #0
 800dc3a:	dd9c      	ble.n	800db76 <__sflush_r+0x1a>
 800dc3c:	6a21      	ldr	r1, [r4, #32]
 800dc3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc40:	4643      	mov	r3, r8
 800dc42:	463a      	mov	r2, r7
 800dc44:	4628      	mov	r0, r5
 800dc46:	47b0      	blx	r6
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	dc06      	bgt.n	800dc5a <__sflush_r+0xfe>
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc52:	81a3      	strh	r3, [r4, #12]
 800dc54:	f04f 30ff 	mov.w	r0, #4294967295
 800dc58:	e78e      	b.n	800db78 <__sflush_r+0x1c>
 800dc5a:	4407      	add	r7, r0
 800dc5c:	eba8 0800 	sub.w	r8, r8, r0
 800dc60:	e7e9      	b.n	800dc36 <__sflush_r+0xda>
 800dc62:	bf00      	nop
 800dc64:	20400001 	.word	0x20400001

0800dc68 <_fflush_r>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	690b      	ldr	r3, [r1, #16]
 800dc6c:	4605      	mov	r5, r0
 800dc6e:	460c      	mov	r4, r1
 800dc70:	b913      	cbnz	r3, 800dc78 <_fflush_r+0x10>
 800dc72:	2500      	movs	r5, #0
 800dc74:	4628      	mov	r0, r5
 800dc76:	bd38      	pop	{r3, r4, r5, pc}
 800dc78:	b118      	cbz	r0, 800dc82 <_fflush_r+0x1a>
 800dc7a:	6983      	ldr	r3, [r0, #24]
 800dc7c:	b90b      	cbnz	r3, 800dc82 <_fflush_r+0x1a>
 800dc7e:	f000 f887 	bl	800dd90 <__sinit>
 800dc82:	4b14      	ldr	r3, [pc, #80]	; (800dcd4 <_fflush_r+0x6c>)
 800dc84:	429c      	cmp	r4, r3
 800dc86:	d11b      	bne.n	800dcc0 <_fflush_r+0x58>
 800dc88:	686c      	ldr	r4, [r5, #4]
 800dc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d0ef      	beq.n	800dc72 <_fflush_r+0xa>
 800dc92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc94:	07d0      	lsls	r0, r2, #31
 800dc96:	d404      	bmi.n	800dca2 <_fflush_r+0x3a>
 800dc98:	0599      	lsls	r1, r3, #22
 800dc9a:	d402      	bmi.n	800dca2 <_fflush_r+0x3a>
 800dc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc9e:	f000 f915 	bl	800decc <__retarget_lock_acquire_recursive>
 800dca2:	4628      	mov	r0, r5
 800dca4:	4621      	mov	r1, r4
 800dca6:	f7ff ff59 	bl	800db5c <__sflush_r>
 800dcaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcac:	07da      	lsls	r2, r3, #31
 800dcae:	4605      	mov	r5, r0
 800dcb0:	d4e0      	bmi.n	800dc74 <_fflush_r+0xc>
 800dcb2:	89a3      	ldrh	r3, [r4, #12]
 800dcb4:	059b      	lsls	r3, r3, #22
 800dcb6:	d4dd      	bmi.n	800dc74 <_fflush_r+0xc>
 800dcb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcba:	f000 f908 	bl	800dece <__retarget_lock_release_recursive>
 800dcbe:	e7d9      	b.n	800dc74 <_fflush_r+0xc>
 800dcc0:	4b05      	ldr	r3, [pc, #20]	; (800dcd8 <_fflush_r+0x70>)
 800dcc2:	429c      	cmp	r4, r3
 800dcc4:	d101      	bne.n	800dcca <_fflush_r+0x62>
 800dcc6:	68ac      	ldr	r4, [r5, #8]
 800dcc8:	e7df      	b.n	800dc8a <_fflush_r+0x22>
 800dcca:	4b04      	ldr	r3, [pc, #16]	; (800dcdc <_fflush_r+0x74>)
 800dccc:	429c      	cmp	r4, r3
 800dcce:	bf08      	it	eq
 800dcd0:	68ec      	ldreq	r4, [r5, #12]
 800dcd2:	e7da      	b.n	800dc8a <_fflush_r+0x22>
 800dcd4:	0800f7a0 	.word	0x0800f7a0
 800dcd8:	0800f7c0 	.word	0x0800f7c0
 800dcdc:	0800f780 	.word	0x0800f780

0800dce0 <std>:
 800dce0:	2300      	movs	r3, #0
 800dce2:	b510      	push	{r4, lr}
 800dce4:	4604      	mov	r4, r0
 800dce6:	e9c0 3300 	strd	r3, r3, [r0]
 800dcea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcee:	6083      	str	r3, [r0, #8]
 800dcf0:	8181      	strh	r1, [r0, #12]
 800dcf2:	6643      	str	r3, [r0, #100]	; 0x64
 800dcf4:	81c2      	strh	r2, [r0, #14]
 800dcf6:	6183      	str	r3, [r0, #24]
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	2208      	movs	r2, #8
 800dcfc:	305c      	adds	r0, #92	; 0x5c
 800dcfe:	f7ff fd3d 	bl	800d77c <memset>
 800dd02:	4b05      	ldr	r3, [pc, #20]	; (800dd18 <std+0x38>)
 800dd04:	6263      	str	r3, [r4, #36]	; 0x24
 800dd06:	4b05      	ldr	r3, [pc, #20]	; (800dd1c <std+0x3c>)
 800dd08:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd0a:	4b05      	ldr	r3, [pc, #20]	; (800dd20 <std+0x40>)
 800dd0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd0e:	4b05      	ldr	r3, [pc, #20]	; (800dd24 <std+0x44>)
 800dd10:	6224      	str	r4, [r4, #32]
 800dd12:	6323      	str	r3, [r4, #48]	; 0x30
 800dd14:	bd10      	pop	{r4, pc}
 800dd16:	bf00      	nop
 800dd18:	0800d911 	.word	0x0800d911
 800dd1c:	0800d933 	.word	0x0800d933
 800dd20:	0800d96b 	.word	0x0800d96b
 800dd24:	0800d98f 	.word	0x0800d98f

0800dd28 <_cleanup_r>:
 800dd28:	4901      	ldr	r1, [pc, #4]	; (800dd30 <_cleanup_r+0x8>)
 800dd2a:	f000 b8af 	b.w	800de8c <_fwalk_reent>
 800dd2e:	bf00      	nop
 800dd30:	0800dc69 	.word	0x0800dc69

0800dd34 <__sfmoreglue>:
 800dd34:	b570      	push	{r4, r5, r6, lr}
 800dd36:	2268      	movs	r2, #104	; 0x68
 800dd38:	1e4d      	subs	r5, r1, #1
 800dd3a:	4355      	muls	r5, r2
 800dd3c:	460e      	mov	r6, r1
 800dd3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd42:	f000 f9a9 	bl	800e098 <_malloc_r>
 800dd46:	4604      	mov	r4, r0
 800dd48:	b140      	cbz	r0, 800dd5c <__sfmoreglue+0x28>
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	e9c0 1600 	strd	r1, r6, [r0]
 800dd50:	300c      	adds	r0, #12
 800dd52:	60a0      	str	r0, [r4, #8]
 800dd54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd58:	f7ff fd10 	bl	800d77c <memset>
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	bd70      	pop	{r4, r5, r6, pc}

0800dd60 <__sfp_lock_acquire>:
 800dd60:	4801      	ldr	r0, [pc, #4]	; (800dd68 <__sfp_lock_acquire+0x8>)
 800dd62:	f000 b8b3 	b.w	800decc <__retarget_lock_acquire_recursive>
 800dd66:	bf00      	nop
 800dd68:	20001fb5 	.word	0x20001fb5

0800dd6c <__sfp_lock_release>:
 800dd6c:	4801      	ldr	r0, [pc, #4]	; (800dd74 <__sfp_lock_release+0x8>)
 800dd6e:	f000 b8ae 	b.w	800dece <__retarget_lock_release_recursive>
 800dd72:	bf00      	nop
 800dd74:	20001fb5 	.word	0x20001fb5

0800dd78 <__sinit_lock_acquire>:
 800dd78:	4801      	ldr	r0, [pc, #4]	; (800dd80 <__sinit_lock_acquire+0x8>)
 800dd7a:	f000 b8a7 	b.w	800decc <__retarget_lock_acquire_recursive>
 800dd7e:	bf00      	nop
 800dd80:	20001fb6 	.word	0x20001fb6

0800dd84 <__sinit_lock_release>:
 800dd84:	4801      	ldr	r0, [pc, #4]	; (800dd8c <__sinit_lock_release+0x8>)
 800dd86:	f000 b8a2 	b.w	800dece <__retarget_lock_release_recursive>
 800dd8a:	bf00      	nop
 800dd8c:	20001fb6 	.word	0x20001fb6

0800dd90 <__sinit>:
 800dd90:	b510      	push	{r4, lr}
 800dd92:	4604      	mov	r4, r0
 800dd94:	f7ff fff0 	bl	800dd78 <__sinit_lock_acquire>
 800dd98:	69a3      	ldr	r3, [r4, #24]
 800dd9a:	b11b      	cbz	r3, 800dda4 <__sinit+0x14>
 800dd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dda0:	f7ff bff0 	b.w	800dd84 <__sinit_lock_release>
 800dda4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dda8:	6523      	str	r3, [r4, #80]	; 0x50
 800ddaa:	4b13      	ldr	r3, [pc, #76]	; (800ddf8 <__sinit+0x68>)
 800ddac:	4a13      	ldr	r2, [pc, #76]	; (800ddfc <__sinit+0x6c>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ddb2:	42a3      	cmp	r3, r4
 800ddb4:	bf04      	itt	eq
 800ddb6:	2301      	moveq	r3, #1
 800ddb8:	61a3      	streq	r3, [r4, #24]
 800ddba:	4620      	mov	r0, r4
 800ddbc:	f000 f820 	bl	800de00 <__sfp>
 800ddc0:	6060      	str	r0, [r4, #4]
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f000 f81c 	bl	800de00 <__sfp>
 800ddc8:	60a0      	str	r0, [r4, #8]
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f000 f818 	bl	800de00 <__sfp>
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	60e0      	str	r0, [r4, #12]
 800ddd4:	2104      	movs	r1, #4
 800ddd6:	6860      	ldr	r0, [r4, #4]
 800ddd8:	f7ff ff82 	bl	800dce0 <std>
 800dddc:	68a0      	ldr	r0, [r4, #8]
 800ddde:	2201      	movs	r2, #1
 800dde0:	2109      	movs	r1, #9
 800dde2:	f7ff ff7d 	bl	800dce0 <std>
 800dde6:	68e0      	ldr	r0, [r4, #12]
 800dde8:	2202      	movs	r2, #2
 800ddea:	2112      	movs	r1, #18
 800ddec:	f7ff ff78 	bl	800dce0 <std>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	61a3      	str	r3, [r4, #24]
 800ddf4:	e7d2      	b.n	800dd9c <__sinit+0xc>
 800ddf6:	bf00      	nop
 800ddf8:	0800f77c 	.word	0x0800f77c
 800ddfc:	0800dd29 	.word	0x0800dd29

0800de00 <__sfp>:
 800de00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de02:	4607      	mov	r7, r0
 800de04:	f7ff ffac 	bl	800dd60 <__sfp_lock_acquire>
 800de08:	4b1e      	ldr	r3, [pc, #120]	; (800de84 <__sfp+0x84>)
 800de0a:	681e      	ldr	r6, [r3, #0]
 800de0c:	69b3      	ldr	r3, [r6, #24]
 800de0e:	b913      	cbnz	r3, 800de16 <__sfp+0x16>
 800de10:	4630      	mov	r0, r6
 800de12:	f7ff ffbd 	bl	800dd90 <__sinit>
 800de16:	3648      	adds	r6, #72	; 0x48
 800de18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de1c:	3b01      	subs	r3, #1
 800de1e:	d503      	bpl.n	800de28 <__sfp+0x28>
 800de20:	6833      	ldr	r3, [r6, #0]
 800de22:	b30b      	cbz	r3, 800de68 <__sfp+0x68>
 800de24:	6836      	ldr	r6, [r6, #0]
 800de26:	e7f7      	b.n	800de18 <__sfp+0x18>
 800de28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de2c:	b9d5      	cbnz	r5, 800de64 <__sfp+0x64>
 800de2e:	4b16      	ldr	r3, [pc, #88]	; (800de88 <__sfp+0x88>)
 800de30:	60e3      	str	r3, [r4, #12]
 800de32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de36:	6665      	str	r5, [r4, #100]	; 0x64
 800de38:	f000 f847 	bl	800deca <__retarget_lock_init_recursive>
 800de3c:	f7ff ff96 	bl	800dd6c <__sfp_lock_release>
 800de40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de48:	6025      	str	r5, [r4, #0]
 800de4a:	61a5      	str	r5, [r4, #24]
 800de4c:	2208      	movs	r2, #8
 800de4e:	4629      	mov	r1, r5
 800de50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de54:	f7ff fc92 	bl	800d77c <memset>
 800de58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de60:	4620      	mov	r0, r4
 800de62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de64:	3468      	adds	r4, #104	; 0x68
 800de66:	e7d9      	b.n	800de1c <__sfp+0x1c>
 800de68:	2104      	movs	r1, #4
 800de6a:	4638      	mov	r0, r7
 800de6c:	f7ff ff62 	bl	800dd34 <__sfmoreglue>
 800de70:	4604      	mov	r4, r0
 800de72:	6030      	str	r0, [r6, #0]
 800de74:	2800      	cmp	r0, #0
 800de76:	d1d5      	bne.n	800de24 <__sfp+0x24>
 800de78:	f7ff ff78 	bl	800dd6c <__sfp_lock_release>
 800de7c:	230c      	movs	r3, #12
 800de7e:	603b      	str	r3, [r7, #0]
 800de80:	e7ee      	b.n	800de60 <__sfp+0x60>
 800de82:	bf00      	nop
 800de84:	0800f77c 	.word	0x0800f77c
 800de88:	ffff0001 	.word	0xffff0001

0800de8c <_fwalk_reent>:
 800de8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de90:	4606      	mov	r6, r0
 800de92:	4688      	mov	r8, r1
 800de94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de98:	2700      	movs	r7, #0
 800de9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de9e:	f1b9 0901 	subs.w	r9, r9, #1
 800dea2:	d505      	bpl.n	800deb0 <_fwalk_reent+0x24>
 800dea4:	6824      	ldr	r4, [r4, #0]
 800dea6:	2c00      	cmp	r4, #0
 800dea8:	d1f7      	bne.n	800de9a <_fwalk_reent+0xe>
 800deaa:	4638      	mov	r0, r7
 800deac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deb0:	89ab      	ldrh	r3, [r5, #12]
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d907      	bls.n	800dec6 <_fwalk_reent+0x3a>
 800deb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800deba:	3301      	adds	r3, #1
 800debc:	d003      	beq.n	800dec6 <_fwalk_reent+0x3a>
 800debe:	4629      	mov	r1, r5
 800dec0:	4630      	mov	r0, r6
 800dec2:	47c0      	blx	r8
 800dec4:	4307      	orrs	r7, r0
 800dec6:	3568      	adds	r5, #104	; 0x68
 800dec8:	e7e9      	b.n	800de9e <_fwalk_reent+0x12>

0800deca <__retarget_lock_init_recursive>:
 800deca:	4770      	bx	lr

0800decc <__retarget_lock_acquire_recursive>:
 800decc:	4770      	bx	lr

0800dece <__retarget_lock_release_recursive>:
 800dece:	4770      	bx	lr

0800ded0 <_lseek_r>:
 800ded0:	b538      	push	{r3, r4, r5, lr}
 800ded2:	4d07      	ldr	r5, [pc, #28]	; (800def0 <_lseek_r+0x20>)
 800ded4:	4604      	mov	r4, r0
 800ded6:	4608      	mov	r0, r1
 800ded8:	4611      	mov	r1, r2
 800deda:	2200      	movs	r2, #0
 800dedc:	602a      	str	r2, [r5, #0]
 800dede:	461a      	mov	r2, r3
 800dee0:	f7f4 fa32 	bl	8002348 <_lseek>
 800dee4:	1c43      	adds	r3, r0, #1
 800dee6:	d102      	bne.n	800deee <_lseek_r+0x1e>
 800dee8:	682b      	ldr	r3, [r5, #0]
 800deea:	b103      	cbz	r3, 800deee <_lseek_r+0x1e>
 800deec:	6023      	str	r3, [r4, #0]
 800deee:	bd38      	pop	{r3, r4, r5, pc}
 800def0:	20001fc0 	.word	0x20001fc0

0800def4 <__swhatbuf_r>:
 800def4:	b570      	push	{r4, r5, r6, lr}
 800def6:	460e      	mov	r6, r1
 800def8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800defc:	2900      	cmp	r1, #0
 800defe:	b096      	sub	sp, #88	; 0x58
 800df00:	4614      	mov	r4, r2
 800df02:	461d      	mov	r5, r3
 800df04:	da08      	bge.n	800df18 <__swhatbuf_r+0x24>
 800df06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800df0a:	2200      	movs	r2, #0
 800df0c:	602a      	str	r2, [r5, #0]
 800df0e:	061a      	lsls	r2, r3, #24
 800df10:	d410      	bmi.n	800df34 <__swhatbuf_r+0x40>
 800df12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df16:	e00e      	b.n	800df36 <__swhatbuf_r+0x42>
 800df18:	466a      	mov	r2, sp
 800df1a:	f000 fd9d 	bl	800ea58 <_fstat_r>
 800df1e:	2800      	cmp	r0, #0
 800df20:	dbf1      	blt.n	800df06 <__swhatbuf_r+0x12>
 800df22:	9a01      	ldr	r2, [sp, #4]
 800df24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df2c:	425a      	negs	r2, r3
 800df2e:	415a      	adcs	r2, r3
 800df30:	602a      	str	r2, [r5, #0]
 800df32:	e7ee      	b.n	800df12 <__swhatbuf_r+0x1e>
 800df34:	2340      	movs	r3, #64	; 0x40
 800df36:	2000      	movs	r0, #0
 800df38:	6023      	str	r3, [r4, #0]
 800df3a:	b016      	add	sp, #88	; 0x58
 800df3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800df40 <__smakebuf_r>:
 800df40:	898b      	ldrh	r3, [r1, #12]
 800df42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df44:	079d      	lsls	r5, r3, #30
 800df46:	4606      	mov	r6, r0
 800df48:	460c      	mov	r4, r1
 800df4a:	d507      	bpl.n	800df5c <__smakebuf_r+0x1c>
 800df4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df50:	6023      	str	r3, [r4, #0]
 800df52:	6123      	str	r3, [r4, #16]
 800df54:	2301      	movs	r3, #1
 800df56:	6163      	str	r3, [r4, #20]
 800df58:	b002      	add	sp, #8
 800df5a:	bd70      	pop	{r4, r5, r6, pc}
 800df5c:	ab01      	add	r3, sp, #4
 800df5e:	466a      	mov	r2, sp
 800df60:	f7ff ffc8 	bl	800def4 <__swhatbuf_r>
 800df64:	9900      	ldr	r1, [sp, #0]
 800df66:	4605      	mov	r5, r0
 800df68:	4630      	mov	r0, r6
 800df6a:	f000 f895 	bl	800e098 <_malloc_r>
 800df6e:	b948      	cbnz	r0, 800df84 <__smakebuf_r+0x44>
 800df70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df74:	059a      	lsls	r2, r3, #22
 800df76:	d4ef      	bmi.n	800df58 <__smakebuf_r+0x18>
 800df78:	f023 0303 	bic.w	r3, r3, #3
 800df7c:	f043 0302 	orr.w	r3, r3, #2
 800df80:	81a3      	strh	r3, [r4, #12]
 800df82:	e7e3      	b.n	800df4c <__smakebuf_r+0xc>
 800df84:	4b0d      	ldr	r3, [pc, #52]	; (800dfbc <__smakebuf_r+0x7c>)
 800df86:	62b3      	str	r3, [r6, #40]	; 0x28
 800df88:	89a3      	ldrh	r3, [r4, #12]
 800df8a:	6020      	str	r0, [r4, #0]
 800df8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df90:	81a3      	strh	r3, [r4, #12]
 800df92:	9b00      	ldr	r3, [sp, #0]
 800df94:	6163      	str	r3, [r4, #20]
 800df96:	9b01      	ldr	r3, [sp, #4]
 800df98:	6120      	str	r0, [r4, #16]
 800df9a:	b15b      	cbz	r3, 800dfb4 <__smakebuf_r+0x74>
 800df9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	f000 fd6b 	bl	800ea7c <_isatty_r>
 800dfa6:	b128      	cbz	r0, 800dfb4 <__smakebuf_r+0x74>
 800dfa8:	89a3      	ldrh	r3, [r4, #12]
 800dfaa:	f023 0303 	bic.w	r3, r3, #3
 800dfae:	f043 0301 	orr.w	r3, r3, #1
 800dfb2:	81a3      	strh	r3, [r4, #12]
 800dfb4:	89a0      	ldrh	r0, [r4, #12]
 800dfb6:	4305      	orrs	r5, r0
 800dfb8:	81a5      	strh	r5, [r4, #12]
 800dfba:	e7cd      	b.n	800df58 <__smakebuf_r+0x18>
 800dfbc:	0800dd29 	.word	0x0800dd29

0800dfc0 <_free_r>:
 800dfc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfc2:	2900      	cmp	r1, #0
 800dfc4:	d044      	beq.n	800e050 <_free_r+0x90>
 800dfc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfca:	9001      	str	r0, [sp, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	f1a1 0404 	sub.w	r4, r1, #4
 800dfd2:	bfb8      	it	lt
 800dfd4:	18e4      	addlt	r4, r4, r3
 800dfd6:	f000 fd61 	bl	800ea9c <__malloc_lock>
 800dfda:	4a1e      	ldr	r2, [pc, #120]	; (800e054 <_free_r+0x94>)
 800dfdc:	9801      	ldr	r0, [sp, #4]
 800dfde:	6813      	ldr	r3, [r2, #0]
 800dfe0:	b933      	cbnz	r3, 800dff0 <_free_r+0x30>
 800dfe2:	6063      	str	r3, [r4, #4]
 800dfe4:	6014      	str	r4, [r2, #0]
 800dfe6:	b003      	add	sp, #12
 800dfe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfec:	f000 bd5c 	b.w	800eaa8 <__malloc_unlock>
 800dff0:	42a3      	cmp	r3, r4
 800dff2:	d908      	bls.n	800e006 <_free_r+0x46>
 800dff4:	6825      	ldr	r5, [r4, #0]
 800dff6:	1961      	adds	r1, r4, r5
 800dff8:	428b      	cmp	r3, r1
 800dffa:	bf01      	itttt	eq
 800dffc:	6819      	ldreq	r1, [r3, #0]
 800dffe:	685b      	ldreq	r3, [r3, #4]
 800e000:	1949      	addeq	r1, r1, r5
 800e002:	6021      	streq	r1, [r4, #0]
 800e004:	e7ed      	b.n	800dfe2 <_free_r+0x22>
 800e006:	461a      	mov	r2, r3
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	b10b      	cbz	r3, 800e010 <_free_r+0x50>
 800e00c:	42a3      	cmp	r3, r4
 800e00e:	d9fa      	bls.n	800e006 <_free_r+0x46>
 800e010:	6811      	ldr	r1, [r2, #0]
 800e012:	1855      	adds	r5, r2, r1
 800e014:	42a5      	cmp	r5, r4
 800e016:	d10b      	bne.n	800e030 <_free_r+0x70>
 800e018:	6824      	ldr	r4, [r4, #0]
 800e01a:	4421      	add	r1, r4
 800e01c:	1854      	adds	r4, r2, r1
 800e01e:	42a3      	cmp	r3, r4
 800e020:	6011      	str	r1, [r2, #0]
 800e022:	d1e0      	bne.n	800dfe6 <_free_r+0x26>
 800e024:	681c      	ldr	r4, [r3, #0]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	6053      	str	r3, [r2, #4]
 800e02a:	4421      	add	r1, r4
 800e02c:	6011      	str	r1, [r2, #0]
 800e02e:	e7da      	b.n	800dfe6 <_free_r+0x26>
 800e030:	d902      	bls.n	800e038 <_free_r+0x78>
 800e032:	230c      	movs	r3, #12
 800e034:	6003      	str	r3, [r0, #0]
 800e036:	e7d6      	b.n	800dfe6 <_free_r+0x26>
 800e038:	6825      	ldr	r5, [r4, #0]
 800e03a:	1961      	adds	r1, r4, r5
 800e03c:	428b      	cmp	r3, r1
 800e03e:	bf04      	itt	eq
 800e040:	6819      	ldreq	r1, [r3, #0]
 800e042:	685b      	ldreq	r3, [r3, #4]
 800e044:	6063      	str	r3, [r4, #4]
 800e046:	bf04      	itt	eq
 800e048:	1949      	addeq	r1, r1, r5
 800e04a:	6021      	streq	r1, [r4, #0]
 800e04c:	6054      	str	r4, [r2, #4]
 800e04e:	e7ca      	b.n	800dfe6 <_free_r+0x26>
 800e050:	b003      	add	sp, #12
 800e052:	bd30      	pop	{r4, r5, pc}
 800e054:	20001fb8 	.word	0x20001fb8

0800e058 <sbrk_aligned>:
 800e058:	b570      	push	{r4, r5, r6, lr}
 800e05a:	4e0e      	ldr	r6, [pc, #56]	; (800e094 <sbrk_aligned+0x3c>)
 800e05c:	460c      	mov	r4, r1
 800e05e:	6831      	ldr	r1, [r6, #0]
 800e060:	4605      	mov	r5, r0
 800e062:	b911      	cbnz	r1, 800e06a <sbrk_aligned+0x12>
 800e064:	f000 fce8 	bl	800ea38 <_sbrk_r>
 800e068:	6030      	str	r0, [r6, #0]
 800e06a:	4621      	mov	r1, r4
 800e06c:	4628      	mov	r0, r5
 800e06e:	f000 fce3 	bl	800ea38 <_sbrk_r>
 800e072:	1c43      	adds	r3, r0, #1
 800e074:	d00a      	beq.n	800e08c <sbrk_aligned+0x34>
 800e076:	1cc4      	adds	r4, r0, #3
 800e078:	f024 0403 	bic.w	r4, r4, #3
 800e07c:	42a0      	cmp	r0, r4
 800e07e:	d007      	beq.n	800e090 <sbrk_aligned+0x38>
 800e080:	1a21      	subs	r1, r4, r0
 800e082:	4628      	mov	r0, r5
 800e084:	f000 fcd8 	bl	800ea38 <_sbrk_r>
 800e088:	3001      	adds	r0, #1
 800e08a:	d101      	bne.n	800e090 <sbrk_aligned+0x38>
 800e08c:	f04f 34ff 	mov.w	r4, #4294967295
 800e090:	4620      	mov	r0, r4
 800e092:	bd70      	pop	{r4, r5, r6, pc}
 800e094:	20001fbc 	.word	0x20001fbc

0800e098 <_malloc_r>:
 800e098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e09c:	1ccd      	adds	r5, r1, #3
 800e09e:	f025 0503 	bic.w	r5, r5, #3
 800e0a2:	3508      	adds	r5, #8
 800e0a4:	2d0c      	cmp	r5, #12
 800e0a6:	bf38      	it	cc
 800e0a8:	250c      	movcc	r5, #12
 800e0aa:	2d00      	cmp	r5, #0
 800e0ac:	4607      	mov	r7, r0
 800e0ae:	db01      	blt.n	800e0b4 <_malloc_r+0x1c>
 800e0b0:	42a9      	cmp	r1, r5
 800e0b2:	d905      	bls.n	800e0c0 <_malloc_r+0x28>
 800e0b4:	230c      	movs	r3, #12
 800e0b6:	603b      	str	r3, [r7, #0]
 800e0b8:	2600      	movs	r6, #0
 800e0ba:	4630      	mov	r0, r6
 800e0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c0:	4e2e      	ldr	r6, [pc, #184]	; (800e17c <_malloc_r+0xe4>)
 800e0c2:	f000 fceb 	bl	800ea9c <__malloc_lock>
 800e0c6:	6833      	ldr	r3, [r6, #0]
 800e0c8:	461c      	mov	r4, r3
 800e0ca:	bb34      	cbnz	r4, 800e11a <_malloc_r+0x82>
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	4638      	mov	r0, r7
 800e0d0:	f7ff ffc2 	bl	800e058 <sbrk_aligned>
 800e0d4:	1c43      	adds	r3, r0, #1
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	d14d      	bne.n	800e176 <_malloc_r+0xde>
 800e0da:	6834      	ldr	r4, [r6, #0]
 800e0dc:	4626      	mov	r6, r4
 800e0de:	2e00      	cmp	r6, #0
 800e0e0:	d140      	bne.n	800e164 <_malloc_r+0xcc>
 800e0e2:	6823      	ldr	r3, [r4, #0]
 800e0e4:	4631      	mov	r1, r6
 800e0e6:	4638      	mov	r0, r7
 800e0e8:	eb04 0803 	add.w	r8, r4, r3
 800e0ec:	f000 fca4 	bl	800ea38 <_sbrk_r>
 800e0f0:	4580      	cmp	r8, r0
 800e0f2:	d13a      	bne.n	800e16a <_malloc_r+0xd2>
 800e0f4:	6821      	ldr	r1, [r4, #0]
 800e0f6:	3503      	adds	r5, #3
 800e0f8:	1a6d      	subs	r5, r5, r1
 800e0fa:	f025 0503 	bic.w	r5, r5, #3
 800e0fe:	3508      	adds	r5, #8
 800e100:	2d0c      	cmp	r5, #12
 800e102:	bf38      	it	cc
 800e104:	250c      	movcc	r5, #12
 800e106:	4629      	mov	r1, r5
 800e108:	4638      	mov	r0, r7
 800e10a:	f7ff ffa5 	bl	800e058 <sbrk_aligned>
 800e10e:	3001      	adds	r0, #1
 800e110:	d02b      	beq.n	800e16a <_malloc_r+0xd2>
 800e112:	6823      	ldr	r3, [r4, #0]
 800e114:	442b      	add	r3, r5
 800e116:	6023      	str	r3, [r4, #0]
 800e118:	e00e      	b.n	800e138 <_malloc_r+0xa0>
 800e11a:	6822      	ldr	r2, [r4, #0]
 800e11c:	1b52      	subs	r2, r2, r5
 800e11e:	d41e      	bmi.n	800e15e <_malloc_r+0xc6>
 800e120:	2a0b      	cmp	r2, #11
 800e122:	d916      	bls.n	800e152 <_malloc_r+0xba>
 800e124:	1961      	adds	r1, r4, r5
 800e126:	42a3      	cmp	r3, r4
 800e128:	6025      	str	r5, [r4, #0]
 800e12a:	bf18      	it	ne
 800e12c:	6059      	strne	r1, [r3, #4]
 800e12e:	6863      	ldr	r3, [r4, #4]
 800e130:	bf08      	it	eq
 800e132:	6031      	streq	r1, [r6, #0]
 800e134:	5162      	str	r2, [r4, r5]
 800e136:	604b      	str	r3, [r1, #4]
 800e138:	4638      	mov	r0, r7
 800e13a:	f104 060b 	add.w	r6, r4, #11
 800e13e:	f000 fcb3 	bl	800eaa8 <__malloc_unlock>
 800e142:	f026 0607 	bic.w	r6, r6, #7
 800e146:	1d23      	adds	r3, r4, #4
 800e148:	1af2      	subs	r2, r6, r3
 800e14a:	d0b6      	beq.n	800e0ba <_malloc_r+0x22>
 800e14c:	1b9b      	subs	r3, r3, r6
 800e14e:	50a3      	str	r3, [r4, r2]
 800e150:	e7b3      	b.n	800e0ba <_malloc_r+0x22>
 800e152:	6862      	ldr	r2, [r4, #4]
 800e154:	42a3      	cmp	r3, r4
 800e156:	bf0c      	ite	eq
 800e158:	6032      	streq	r2, [r6, #0]
 800e15a:	605a      	strne	r2, [r3, #4]
 800e15c:	e7ec      	b.n	800e138 <_malloc_r+0xa0>
 800e15e:	4623      	mov	r3, r4
 800e160:	6864      	ldr	r4, [r4, #4]
 800e162:	e7b2      	b.n	800e0ca <_malloc_r+0x32>
 800e164:	4634      	mov	r4, r6
 800e166:	6876      	ldr	r6, [r6, #4]
 800e168:	e7b9      	b.n	800e0de <_malloc_r+0x46>
 800e16a:	230c      	movs	r3, #12
 800e16c:	603b      	str	r3, [r7, #0]
 800e16e:	4638      	mov	r0, r7
 800e170:	f000 fc9a 	bl	800eaa8 <__malloc_unlock>
 800e174:	e7a1      	b.n	800e0ba <_malloc_r+0x22>
 800e176:	6025      	str	r5, [r4, #0]
 800e178:	e7de      	b.n	800e138 <_malloc_r+0xa0>
 800e17a:	bf00      	nop
 800e17c:	20001fb8 	.word	0x20001fb8

0800e180 <__ssputs_r>:
 800e180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e184:	688e      	ldr	r6, [r1, #8]
 800e186:	429e      	cmp	r6, r3
 800e188:	4682      	mov	sl, r0
 800e18a:	460c      	mov	r4, r1
 800e18c:	4690      	mov	r8, r2
 800e18e:	461f      	mov	r7, r3
 800e190:	d838      	bhi.n	800e204 <__ssputs_r+0x84>
 800e192:	898a      	ldrh	r2, [r1, #12]
 800e194:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e198:	d032      	beq.n	800e200 <__ssputs_r+0x80>
 800e19a:	6825      	ldr	r5, [r4, #0]
 800e19c:	6909      	ldr	r1, [r1, #16]
 800e19e:	eba5 0901 	sub.w	r9, r5, r1
 800e1a2:	6965      	ldr	r5, [r4, #20]
 800e1a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	444b      	add	r3, r9
 800e1b0:	106d      	asrs	r5, r5, #1
 800e1b2:	429d      	cmp	r5, r3
 800e1b4:	bf38      	it	cc
 800e1b6:	461d      	movcc	r5, r3
 800e1b8:	0553      	lsls	r3, r2, #21
 800e1ba:	d531      	bpl.n	800e220 <__ssputs_r+0xa0>
 800e1bc:	4629      	mov	r1, r5
 800e1be:	f7ff ff6b 	bl	800e098 <_malloc_r>
 800e1c2:	4606      	mov	r6, r0
 800e1c4:	b950      	cbnz	r0, 800e1dc <__ssputs_r+0x5c>
 800e1c6:	230c      	movs	r3, #12
 800e1c8:	f8ca 3000 	str.w	r3, [sl]
 800e1cc:	89a3      	ldrh	r3, [r4, #12]
 800e1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1d2:	81a3      	strh	r3, [r4, #12]
 800e1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1dc:	6921      	ldr	r1, [r4, #16]
 800e1de:	464a      	mov	r2, r9
 800e1e0:	f7ff faa4 	bl	800d72c <memcpy>
 800e1e4:	89a3      	ldrh	r3, [r4, #12]
 800e1e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e1ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1ee:	81a3      	strh	r3, [r4, #12]
 800e1f0:	6126      	str	r6, [r4, #16]
 800e1f2:	6165      	str	r5, [r4, #20]
 800e1f4:	444e      	add	r6, r9
 800e1f6:	eba5 0509 	sub.w	r5, r5, r9
 800e1fa:	6026      	str	r6, [r4, #0]
 800e1fc:	60a5      	str	r5, [r4, #8]
 800e1fe:	463e      	mov	r6, r7
 800e200:	42be      	cmp	r6, r7
 800e202:	d900      	bls.n	800e206 <__ssputs_r+0x86>
 800e204:	463e      	mov	r6, r7
 800e206:	6820      	ldr	r0, [r4, #0]
 800e208:	4632      	mov	r2, r6
 800e20a:	4641      	mov	r1, r8
 800e20c:	f7ff fa9c 	bl	800d748 <memmove>
 800e210:	68a3      	ldr	r3, [r4, #8]
 800e212:	1b9b      	subs	r3, r3, r6
 800e214:	60a3      	str	r3, [r4, #8]
 800e216:	6823      	ldr	r3, [r4, #0]
 800e218:	4433      	add	r3, r6
 800e21a:	6023      	str	r3, [r4, #0]
 800e21c:	2000      	movs	r0, #0
 800e21e:	e7db      	b.n	800e1d8 <__ssputs_r+0x58>
 800e220:	462a      	mov	r2, r5
 800e222:	f000 fc47 	bl	800eab4 <_realloc_r>
 800e226:	4606      	mov	r6, r0
 800e228:	2800      	cmp	r0, #0
 800e22a:	d1e1      	bne.n	800e1f0 <__ssputs_r+0x70>
 800e22c:	6921      	ldr	r1, [r4, #16]
 800e22e:	4650      	mov	r0, sl
 800e230:	f7ff fec6 	bl	800dfc0 <_free_r>
 800e234:	e7c7      	b.n	800e1c6 <__ssputs_r+0x46>
	...

0800e238 <_svfiprintf_r>:
 800e238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23c:	4698      	mov	r8, r3
 800e23e:	898b      	ldrh	r3, [r1, #12]
 800e240:	061b      	lsls	r3, r3, #24
 800e242:	b09d      	sub	sp, #116	; 0x74
 800e244:	4607      	mov	r7, r0
 800e246:	460d      	mov	r5, r1
 800e248:	4614      	mov	r4, r2
 800e24a:	d50e      	bpl.n	800e26a <_svfiprintf_r+0x32>
 800e24c:	690b      	ldr	r3, [r1, #16]
 800e24e:	b963      	cbnz	r3, 800e26a <_svfiprintf_r+0x32>
 800e250:	2140      	movs	r1, #64	; 0x40
 800e252:	f7ff ff21 	bl	800e098 <_malloc_r>
 800e256:	6028      	str	r0, [r5, #0]
 800e258:	6128      	str	r0, [r5, #16]
 800e25a:	b920      	cbnz	r0, 800e266 <_svfiprintf_r+0x2e>
 800e25c:	230c      	movs	r3, #12
 800e25e:	603b      	str	r3, [r7, #0]
 800e260:	f04f 30ff 	mov.w	r0, #4294967295
 800e264:	e0d1      	b.n	800e40a <_svfiprintf_r+0x1d2>
 800e266:	2340      	movs	r3, #64	; 0x40
 800e268:	616b      	str	r3, [r5, #20]
 800e26a:	2300      	movs	r3, #0
 800e26c:	9309      	str	r3, [sp, #36]	; 0x24
 800e26e:	2320      	movs	r3, #32
 800e270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e274:	f8cd 800c 	str.w	r8, [sp, #12]
 800e278:	2330      	movs	r3, #48	; 0x30
 800e27a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e424 <_svfiprintf_r+0x1ec>
 800e27e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e282:	f04f 0901 	mov.w	r9, #1
 800e286:	4623      	mov	r3, r4
 800e288:	469a      	mov	sl, r3
 800e28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e28e:	b10a      	cbz	r2, 800e294 <_svfiprintf_r+0x5c>
 800e290:	2a25      	cmp	r2, #37	; 0x25
 800e292:	d1f9      	bne.n	800e288 <_svfiprintf_r+0x50>
 800e294:	ebba 0b04 	subs.w	fp, sl, r4
 800e298:	d00b      	beq.n	800e2b2 <_svfiprintf_r+0x7a>
 800e29a:	465b      	mov	r3, fp
 800e29c:	4622      	mov	r2, r4
 800e29e:	4629      	mov	r1, r5
 800e2a0:	4638      	mov	r0, r7
 800e2a2:	f7ff ff6d 	bl	800e180 <__ssputs_r>
 800e2a6:	3001      	adds	r0, #1
 800e2a8:	f000 80aa 	beq.w	800e400 <_svfiprintf_r+0x1c8>
 800e2ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2ae:	445a      	add	r2, fp
 800e2b0:	9209      	str	r2, [sp, #36]	; 0x24
 800e2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	f000 80a2 	beq.w	800e400 <_svfiprintf_r+0x1c8>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	f04f 32ff 	mov.w	r2, #4294967295
 800e2c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2c6:	f10a 0a01 	add.w	sl, sl, #1
 800e2ca:	9304      	str	r3, [sp, #16]
 800e2cc:	9307      	str	r3, [sp, #28]
 800e2ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2d2:	931a      	str	r3, [sp, #104]	; 0x68
 800e2d4:	4654      	mov	r4, sl
 800e2d6:	2205      	movs	r2, #5
 800e2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2dc:	4851      	ldr	r0, [pc, #324]	; (800e424 <_svfiprintf_r+0x1ec>)
 800e2de:	f7f1 ff87 	bl	80001f0 <memchr>
 800e2e2:	9a04      	ldr	r2, [sp, #16]
 800e2e4:	b9d8      	cbnz	r0, 800e31e <_svfiprintf_r+0xe6>
 800e2e6:	06d0      	lsls	r0, r2, #27
 800e2e8:	bf44      	itt	mi
 800e2ea:	2320      	movmi	r3, #32
 800e2ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2f0:	0711      	lsls	r1, r2, #28
 800e2f2:	bf44      	itt	mi
 800e2f4:	232b      	movmi	r3, #43	; 0x2b
 800e2f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e2fe:	2b2a      	cmp	r3, #42	; 0x2a
 800e300:	d015      	beq.n	800e32e <_svfiprintf_r+0xf6>
 800e302:	9a07      	ldr	r2, [sp, #28]
 800e304:	4654      	mov	r4, sl
 800e306:	2000      	movs	r0, #0
 800e308:	f04f 0c0a 	mov.w	ip, #10
 800e30c:	4621      	mov	r1, r4
 800e30e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e312:	3b30      	subs	r3, #48	; 0x30
 800e314:	2b09      	cmp	r3, #9
 800e316:	d94e      	bls.n	800e3b6 <_svfiprintf_r+0x17e>
 800e318:	b1b0      	cbz	r0, 800e348 <_svfiprintf_r+0x110>
 800e31a:	9207      	str	r2, [sp, #28]
 800e31c:	e014      	b.n	800e348 <_svfiprintf_r+0x110>
 800e31e:	eba0 0308 	sub.w	r3, r0, r8
 800e322:	fa09 f303 	lsl.w	r3, r9, r3
 800e326:	4313      	orrs	r3, r2
 800e328:	9304      	str	r3, [sp, #16]
 800e32a:	46a2      	mov	sl, r4
 800e32c:	e7d2      	b.n	800e2d4 <_svfiprintf_r+0x9c>
 800e32e:	9b03      	ldr	r3, [sp, #12]
 800e330:	1d19      	adds	r1, r3, #4
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	9103      	str	r1, [sp, #12]
 800e336:	2b00      	cmp	r3, #0
 800e338:	bfbb      	ittet	lt
 800e33a:	425b      	neglt	r3, r3
 800e33c:	f042 0202 	orrlt.w	r2, r2, #2
 800e340:	9307      	strge	r3, [sp, #28]
 800e342:	9307      	strlt	r3, [sp, #28]
 800e344:	bfb8      	it	lt
 800e346:	9204      	strlt	r2, [sp, #16]
 800e348:	7823      	ldrb	r3, [r4, #0]
 800e34a:	2b2e      	cmp	r3, #46	; 0x2e
 800e34c:	d10c      	bne.n	800e368 <_svfiprintf_r+0x130>
 800e34e:	7863      	ldrb	r3, [r4, #1]
 800e350:	2b2a      	cmp	r3, #42	; 0x2a
 800e352:	d135      	bne.n	800e3c0 <_svfiprintf_r+0x188>
 800e354:	9b03      	ldr	r3, [sp, #12]
 800e356:	1d1a      	adds	r2, r3, #4
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	9203      	str	r2, [sp, #12]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	bfb8      	it	lt
 800e360:	f04f 33ff 	movlt.w	r3, #4294967295
 800e364:	3402      	adds	r4, #2
 800e366:	9305      	str	r3, [sp, #20]
 800e368:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e434 <_svfiprintf_r+0x1fc>
 800e36c:	7821      	ldrb	r1, [r4, #0]
 800e36e:	2203      	movs	r2, #3
 800e370:	4650      	mov	r0, sl
 800e372:	f7f1 ff3d 	bl	80001f0 <memchr>
 800e376:	b140      	cbz	r0, 800e38a <_svfiprintf_r+0x152>
 800e378:	2340      	movs	r3, #64	; 0x40
 800e37a:	eba0 000a 	sub.w	r0, r0, sl
 800e37e:	fa03 f000 	lsl.w	r0, r3, r0
 800e382:	9b04      	ldr	r3, [sp, #16]
 800e384:	4303      	orrs	r3, r0
 800e386:	3401      	adds	r4, #1
 800e388:	9304      	str	r3, [sp, #16]
 800e38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e38e:	4826      	ldr	r0, [pc, #152]	; (800e428 <_svfiprintf_r+0x1f0>)
 800e390:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e394:	2206      	movs	r2, #6
 800e396:	f7f1 ff2b 	bl	80001f0 <memchr>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d038      	beq.n	800e410 <_svfiprintf_r+0x1d8>
 800e39e:	4b23      	ldr	r3, [pc, #140]	; (800e42c <_svfiprintf_r+0x1f4>)
 800e3a0:	bb1b      	cbnz	r3, 800e3ea <_svfiprintf_r+0x1b2>
 800e3a2:	9b03      	ldr	r3, [sp, #12]
 800e3a4:	3307      	adds	r3, #7
 800e3a6:	f023 0307 	bic.w	r3, r3, #7
 800e3aa:	3308      	adds	r3, #8
 800e3ac:	9303      	str	r3, [sp, #12]
 800e3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3b0:	4433      	add	r3, r6
 800e3b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b4:	e767      	b.n	800e286 <_svfiprintf_r+0x4e>
 800e3b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3ba:	460c      	mov	r4, r1
 800e3bc:	2001      	movs	r0, #1
 800e3be:	e7a5      	b.n	800e30c <_svfiprintf_r+0xd4>
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	3401      	adds	r4, #1
 800e3c4:	9305      	str	r3, [sp, #20]
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	f04f 0c0a 	mov.w	ip, #10
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3d2:	3a30      	subs	r2, #48	; 0x30
 800e3d4:	2a09      	cmp	r2, #9
 800e3d6:	d903      	bls.n	800e3e0 <_svfiprintf_r+0x1a8>
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d0c5      	beq.n	800e368 <_svfiprintf_r+0x130>
 800e3dc:	9105      	str	r1, [sp, #20]
 800e3de:	e7c3      	b.n	800e368 <_svfiprintf_r+0x130>
 800e3e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3e4:	4604      	mov	r4, r0
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e7f0      	b.n	800e3cc <_svfiprintf_r+0x194>
 800e3ea:	ab03      	add	r3, sp, #12
 800e3ec:	9300      	str	r3, [sp, #0]
 800e3ee:	462a      	mov	r2, r5
 800e3f0:	4b0f      	ldr	r3, [pc, #60]	; (800e430 <_svfiprintf_r+0x1f8>)
 800e3f2:	a904      	add	r1, sp, #16
 800e3f4:	4638      	mov	r0, r7
 800e3f6:	f3af 8000 	nop.w
 800e3fa:	1c42      	adds	r2, r0, #1
 800e3fc:	4606      	mov	r6, r0
 800e3fe:	d1d6      	bne.n	800e3ae <_svfiprintf_r+0x176>
 800e400:	89ab      	ldrh	r3, [r5, #12]
 800e402:	065b      	lsls	r3, r3, #25
 800e404:	f53f af2c 	bmi.w	800e260 <_svfiprintf_r+0x28>
 800e408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e40a:	b01d      	add	sp, #116	; 0x74
 800e40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e410:	ab03      	add	r3, sp, #12
 800e412:	9300      	str	r3, [sp, #0]
 800e414:	462a      	mov	r2, r5
 800e416:	4b06      	ldr	r3, [pc, #24]	; (800e430 <_svfiprintf_r+0x1f8>)
 800e418:	a904      	add	r1, sp, #16
 800e41a:	4638      	mov	r0, r7
 800e41c:	f000 f9d4 	bl	800e7c8 <_printf_i>
 800e420:	e7eb      	b.n	800e3fa <_svfiprintf_r+0x1c2>
 800e422:	bf00      	nop
 800e424:	0800f7e0 	.word	0x0800f7e0
 800e428:	0800f7ea 	.word	0x0800f7ea
 800e42c:	00000000 	.word	0x00000000
 800e430:	0800e181 	.word	0x0800e181
 800e434:	0800f7e6 	.word	0x0800f7e6

0800e438 <__sfputc_r>:
 800e438:	6893      	ldr	r3, [r2, #8]
 800e43a:	3b01      	subs	r3, #1
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	b410      	push	{r4}
 800e440:	6093      	str	r3, [r2, #8]
 800e442:	da08      	bge.n	800e456 <__sfputc_r+0x1e>
 800e444:	6994      	ldr	r4, [r2, #24]
 800e446:	42a3      	cmp	r3, r4
 800e448:	db01      	blt.n	800e44e <__sfputc_r+0x16>
 800e44a:	290a      	cmp	r1, #10
 800e44c:	d103      	bne.n	800e456 <__sfputc_r+0x1e>
 800e44e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e452:	f7ff baa1 	b.w	800d998 <__swbuf_r>
 800e456:	6813      	ldr	r3, [r2, #0]
 800e458:	1c58      	adds	r0, r3, #1
 800e45a:	6010      	str	r0, [r2, #0]
 800e45c:	7019      	strb	r1, [r3, #0]
 800e45e:	4608      	mov	r0, r1
 800e460:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e464:	4770      	bx	lr

0800e466 <__sfputs_r>:
 800e466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e468:	4606      	mov	r6, r0
 800e46a:	460f      	mov	r7, r1
 800e46c:	4614      	mov	r4, r2
 800e46e:	18d5      	adds	r5, r2, r3
 800e470:	42ac      	cmp	r4, r5
 800e472:	d101      	bne.n	800e478 <__sfputs_r+0x12>
 800e474:	2000      	movs	r0, #0
 800e476:	e007      	b.n	800e488 <__sfputs_r+0x22>
 800e478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e47c:	463a      	mov	r2, r7
 800e47e:	4630      	mov	r0, r6
 800e480:	f7ff ffda 	bl	800e438 <__sfputc_r>
 800e484:	1c43      	adds	r3, r0, #1
 800e486:	d1f3      	bne.n	800e470 <__sfputs_r+0xa>
 800e488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e48c <_vfiprintf_r>:
 800e48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e490:	460d      	mov	r5, r1
 800e492:	b09d      	sub	sp, #116	; 0x74
 800e494:	4614      	mov	r4, r2
 800e496:	4698      	mov	r8, r3
 800e498:	4606      	mov	r6, r0
 800e49a:	b118      	cbz	r0, 800e4a4 <_vfiprintf_r+0x18>
 800e49c:	6983      	ldr	r3, [r0, #24]
 800e49e:	b90b      	cbnz	r3, 800e4a4 <_vfiprintf_r+0x18>
 800e4a0:	f7ff fc76 	bl	800dd90 <__sinit>
 800e4a4:	4b89      	ldr	r3, [pc, #548]	; (800e6cc <_vfiprintf_r+0x240>)
 800e4a6:	429d      	cmp	r5, r3
 800e4a8:	d11b      	bne.n	800e4e2 <_vfiprintf_r+0x56>
 800e4aa:	6875      	ldr	r5, [r6, #4]
 800e4ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4ae:	07d9      	lsls	r1, r3, #31
 800e4b0:	d405      	bmi.n	800e4be <_vfiprintf_r+0x32>
 800e4b2:	89ab      	ldrh	r3, [r5, #12]
 800e4b4:	059a      	lsls	r2, r3, #22
 800e4b6:	d402      	bmi.n	800e4be <_vfiprintf_r+0x32>
 800e4b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4ba:	f7ff fd07 	bl	800decc <__retarget_lock_acquire_recursive>
 800e4be:	89ab      	ldrh	r3, [r5, #12]
 800e4c0:	071b      	lsls	r3, r3, #28
 800e4c2:	d501      	bpl.n	800e4c8 <_vfiprintf_r+0x3c>
 800e4c4:	692b      	ldr	r3, [r5, #16]
 800e4c6:	b9eb      	cbnz	r3, 800e504 <_vfiprintf_r+0x78>
 800e4c8:	4629      	mov	r1, r5
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	f7ff fac8 	bl	800da60 <__swsetup_r>
 800e4d0:	b1c0      	cbz	r0, 800e504 <_vfiprintf_r+0x78>
 800e4d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4d4:	07dc      	lsls	r4, r3, #31
 800e4d6:	d50e      	bpl.n	800e4f6 <_vfiprintf_r+0x6a>
 800e4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4dc:	b01d      	add	sp, #116	; 0x74
 800e4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e2:	4b7b      	ldr	r3, [pc, #492]	; (800e6d0 <_vfiprintf_r+0x244>)
 800e4e4:	429d      	cmp	r5, r3
 800e4e6:	d101      	bne.n	800e4ec <_vfiprintf_r+0x60>
 800e4e8:	68b5      	ldr	r5, [r6, #8]
 800e4ea:	e7df      	b.n	800e4ac <_vfiprintf_r+0x20>
 800e4ec:	4b79      	ldr	r3, [pc, #484]	; (800e6d4 <_vfiprintf_r+0x248>)
 800e4ee:	429d      	cmp	r5, r3
 800e4f0:	bf08      	it	eq
 800e4f2:	68f5      	ldreq	r5, [r6, #12]
 800e4f4:	e7da      	b.n	800e4ac <_vfiprintf_r+0x20>
 800e4f6:	89ab      	ldrh	r3, [r5, #12]
 800e4f8:	0598      	lsls	r0, r3, #22
 800e4fa:	d4ed      	bmi.n	800e4d8 <_vfiprintf_r+0x4c>
 800e4fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4fe:	f7ff fce6 	bl	800dece <__retarget_lock_release_recursive>
 800e502:	e7e9      	b.n	800e4d8 <_vfiprintf_r+0x4c>
 800e504:	2300      	movs	r3, #0
 800e506:	9309      	str	r3, [sp, #36]	; 0x24
 800e508:	2320      	movs	r3, #32
 800e50a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e50e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e512:	2330      	movs	r3, #48	; 0x30
 800e514:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e6d8 <_vfiprintf_r+0x24c>
 800e518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e51c:	f04f 0901 	mov.w	r9, #1
 800e520:	4623      	mov	r3, r4
 800e522:	469a      	mov	sl, r3
 800e524:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e528:	b10a      	cbz	r2, 800e52e <_vfiprintf_r+0xa2>
 800e52a:	2a25      	cmp	r2, #37	; 0x25
 800e52c:	d1f9      	bne.n	800e522 <_vfiprintf_r+0x96>
 800e52e:	ebba 0b04 	subs.w	fp, sl, r4
 800e532:	d00b      	beq.n	800e54c <_vfiprintf_r+0xc0>
 800e534:	465b      	mov	r3, fp
 800e536:	4622      	mov	r2, r4
 800e538:	4629      	mov	r1, r5
 800e53a:	4630      	mov	r0, r6
 800e53c:	f7ff ff93 	bl	800e466 <__sfputs_r>
 800e540:	3001      	adds	r0, #1
 800e542:	f000 80aa 	beq.w	800e69a <_vfiprintf_r+0x20e>
 800e546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e548:	445a      	add	r2, fp
 800e54a:	9209      	str	r2, [sp, #36]	; 0x24
 800e54c:	f89a 3000 	ldrb.w	r3, [sl]
 800e550:	2b00      	cmp	r3, #0
 800e552:	f000 80a2 	beq.w	800e69a <_vfiprintf_r+0x20e>
 800e556:	2300      	movs	r3, #0
 800e558:	f04f 32ff 	mov.w	r2, #4294967295
 800e55c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e560:	f10a 0a01 	add.w	sl, sl, #1
 800e564:	9304      	str	r3, [sp, #16]
 800e566:	9307      	str	r3, [sp, #28]
 800e568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e56c:	931a      	str	r3, [sp, #104]	; 0x68
 800e56e:	4654      	mov	r4, sl
 800e570:	2205      	movs	r2, #5
 800e572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e576:	4858      	ldr	r0, [pc, #352]	; (800e6d8 <_vfiprintf_r+0x24c>)
 800e578:	f7f1 fe3a 	bl	80001f0 <memchr>
 800e57c:	9a04      	ldr	r2, [sp, #16]
 800e57e:	b9d8      	cbnz	r0, 800e5b8 <_vfiprintf_r+0x12c>
 800e580:	06d1      	lsls	r1, r2, #27
 800e582:	bf44      	itt	mi
 800e584:	2320      	movmi	r3, #32
 800e586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e58a:	0713      	lsls	r3, r2, #28
 800e58c:	bf44      	itt	mi
 800e58e:	232b      	movmi	r3, #43	; 0x2b
 800e590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e594:	f89a 3000 	ldrb.w	r3, [sl]
 800e598:	2b2a      	cmp	r3, #42	; 0x2a
 800e59a:	d015      	beq.n	800e5c8 <_vfiprintf_r+0x13c>
 800e59c:	9a07      	ldr	r2, [sp, #28]
 800e59e:	4654      	mov	r4, sl
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	f04f 0c0a 	mov.w	ip, #10
 800e5a6:	4621      	mov	r1, r4
 800e5a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5ac:	3b30      	subs	r3, #48	; 0x30
 800e5ae:	2b09      	cmp	r3, #9
 800e5b0:	d94e      	bls.n	800e650 <_vfiprintf_r+0x1c4>
 800e5b2:	b1b0      	cbz	r0, 800e5e2 <_vfiprintf_r+0x156>
 800e5b4:	9207      	str	r2, [sp, #28]
 800e5b6:	e014      	b.n	800e5e2 <_vfiprintf_r+0x156>
 800e5b8:	eba0 0308 	sub.w	r3, r0, r8
 800e5bc:	fa09 f303 	lsl.w	r3, r9, r3
 800e5c0:	4313      	orrs	r3, r2
 800e5c2:	9304      	str	r3, [sp, #16]
 800e5c4:	46a2      	mov	sl, r4
 800e5c6:	e7d2      	b.n	800e56e <_vfiprintf_r+0xe2>
 800e5c8:	9b03      	ldr	r3, [sp, #12]
 800e5ca:	1d19      	adds	r1, r3, #4
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	9103      	str	r1, [sp, #12]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	bfbb      	ittet	lt
 800e5d4:	425b      	neglt	r3, r3
 800e5d6:	f042 0202 	orrlt.w	r2, r2, #2
 800e5da:	9307      	strge	r3, [sp, #28]
 800e5dc:	9307      	strlt	r3, [sp, #28]
 800e5de:	bfb8      	it	lt
 800e5e0:	9204      	strlt	r2, [sp, #16]
 800e5e2:	7823      	ldrb	r3, [r4, #0]
 800e5e4:	2b2e      	cmp	r3, #46	; 0x2e
 800e5e6:	d10c      	bne.n	800e602 <_vfiprintf_r+0x176>
 800e5e8:	7863      	ldrb	r3, [r4, #1]
 800e5ea:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ec:	d135      	bne.n	800e65a <_vfiprintf_r+0x1ce>
 800e5ee:	9b03      	ldr	r3, [sp, #12]
 800e5f0:	1d1a      	adds	r2, r3, #4
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	9203      	str	r2, [sp, #12]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	bfb8      	it	lt
 800e5fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5fe:	3402      	adds	r4, #2
 800e600:	9305      	str	r3, [sp, #20]
 800e602:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e6e8 <_vfiprintf_r+0x25c>
 800e606:	7821      	ldrb	r1, [r4, #0]
 800e608:	2203      	movs	r2, #3
 800e60a:	4650      	mov	r0, sl
 800e60c:	f7f1 fdf0 	bl	80001f0 <memchr>
 800e610:	b140      	cbz	r0, 800e624 <_vfiprintf_r+0x198>
 800e612:	2340      	movs	r3, #64	; 0x40
 800e614:	eba0 000a 	sub.w	r0, r0, sl
 800e618:	fa03 f000 	lsl.w	r0, r3, r0
 800e61c:	9b04      	ldr	r3, [sp, #16]
 800e61e:	4303      	orrs	r3, r0
 800e620:	3401      	adds	r4, #1
 800e622:	9304      	str	r3, [sp, #16]
 800e624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e628:	482c      	ldr	r0, [pc, #176]	; (800e6dc <_vfiprintf_r+0x250>)
 800e62a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e62e:	2206      	movs	r2, #6
 800e630:	f7f1 fdde 	bl	80001f0 <memchr>
 800e634:	2800      	cmp	r0, #0
 800e636:	d03f      	beq.n	800e6b8 <_vfiprintf_r+0x22c>
 800e638:	4b29      	ldr	r3, [pc, #164]	; (800e6e0 <_vfiprintf_r+0x254>)
 800e63a:	bb1b      	cbnz	r3, 800e684 <_vfiprintf_r+0x1f8>
 800e63c:	9b03      	ldr	r3, [sp, #12]
 800e63e:	3307      	adds	r3, #7
 800e640:	f023 0307 	bic.w	r3, r3, #7
 800e644:	3308      	adds	r3, #8
 800e646:	9303      	str	r3, [sp, #12]
 800e648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e64a:	443b      	add	r3, r7
 800e64c:	9309      	str	r3, [sp, #36]	; 0x24
 800e64e:	e767      	b.n	800e520 <_vfiprintf_r+0x94>
 800e650:	fb0c 3202 	mla	r2, ip, r2, r3
 800e654:	460c      	mov	r4, r1
 800e656:	2001      	movs	r0, #1
 800e658:	e7a5      	b.n	800e5a6 <_vfiprintf_r+0x11a>
 800e65a:	2300      	movs	r3, #0
 800e65c:	3401      	adds	r4, #1
 800e65e:	9305      	str	r3, [sp, #20]
 800e660:	4619      	mov	r1, r3
 800e662:	f04f 0c0a 	mov.w	ip, #10
 800e666:	4620      	mov	r0, r4
 800e668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e66c:	3a30      	subs	r2, #48	; 0x30
 800e66e:	2a09      	cmp	r2, #9
 800e670:	d903      	bls.n	800e67a <_vfiprintf_r+0x1ee>
 800e672:	2b00      	cmp	r3, #0
 800e674:	d0c5      	beq.n	800e602 <_vfiprintf_r+0x176>
 800e676:	9105      	str	r1, [sp, #20]
 800e678:	e7c3      	b.n	800e602 <_vfiprintf_r+0x176>
 800e67a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e67e:	4604      	mov	r4, r0
 800e680:	2301      	movs	r3, #1
 800e682:	e7f0      	b.n	800e666 <_vfiprintf_r+0x1da>
 800e684:	ab03      	add	r3, sp, #12
 800e686:	9300      	str	r3, [sp, #0]
 800e688:	462a      	mov	r2, r5
 800e68a:	4b16      	ldr	r3, [pc, #88]	; (800e6e4 <_vfiprintf_r+0x258>)
 800e68c:	a904      	add	r1, sp, #16
 800e68e:	4630      	mov	r0, r6
 800e690:	f3af 8000 	nop.w
 800e694:	4607      	mov	r7, r0
 800e696:	1c78      	adds	r0, r7, #1
 800e698:	d1d6      	bne.n	800e648 <_vfiprintf_r+0x1bc>
 800e69a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e69c:	07d9      	lsls	r1, r3, #31
 800e69e:	d405      	bmi.n	800e6ac <_vfiprintf_r+0x220>
 800e6a0:	89ab      	ldrh	r3, [r5, #12]
 800e6a2:	059a      	lsls	r2, r3, #22
 800e6a4:	d402      	bmi.n	800e6ac <_vfiprintf_r+0x220>
 800e6a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6a8:	f7ff fc11 	bl	800dece <__retarget_lock_release_recursive>
 800e6ac:	89ab      	ldrh	r3, [r5, #12]
 800e6ae:	065b      	lsls	r3, r3, #25
 800e6b0:	f53f af12 	bmi.w	800e4d8 <_vfiprintf_r+0x4c>
 800e6b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6b6:	e711      	b.n	800e4dc <_vfiprintf_r+0x50>
 800e6b8:	ab03      	add	r3, sp, #12
 800e6ba:	9300      	str	r3, [sp, #0]
 800e6bc:	462a      	mov	r2, r5
 800e6be:	4b09      	ldr	r3, [pc, #36]	; (800e6e4 <_vfiprintf_r+0x258>)
 800e6c0:	a904      	add	r1, sp, #16
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	f000 f880 	bl	800e7c8 <_printf_i>
 800e6c8:	e7e4      	b.n	800e694 <_vfiprintf_r+0x208>
 800e6ca:	bf00      	nop
 800e6cc:	0800f7a0 	.word	0x0800f7a0
 800e6d0:	0800f7c0 	.word	0x0800f7c0
 800e6d4:	0800f780 	.word	0x0800f780
 800e6d8:	0800f7e0 	.word	0x0800f7e0
 800e6dc:	0800f7ea 	.word	0x0800f7ea
 800e6e0:	00000000 	.word	0x00000000
 800e6e4:	0800e467 	.word	0x0800e467
 800e6e8:	0800f7e6 	.word	0x0800f7e6

0800e6ec <_printf_common>:
 800e6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6f0:	4616      	mov	r6, r2
 800e6f2:	4699      	mov	r9, r3
 800e6f4:	688a      	ldr	r2, [r1, #8]
 800e6f6:	690b      	ldr	r3, [r1, #16]
 800e6f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	bfb8      	it	lt
 800e700:	4613      	movlt	r3, r2
 800e702:	6033      	str	r3, [r6, #0]
 800e704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e708:	4607      	mov	r7, r0
 800e70a:	460c      	mov	r4, r1
 800e70c:	b10a      	cbz	r2, 800e712 <_printf_common+0x26>
 800e70e:	3301      	adds	r3, #1
 800e710:	6033      	str	r3, [r6, #0]
 800e712:	6823      	ldr	r3, [r4, #0]
 800e714:	0699      	lsls	r1, r3, #26
 800e716:	bf42      	ittt	mi
 800e718:	6833      	ldrmi	r3, [r6, #0]
 800e71a:	3302      	addmi	r3, #2
 800e71c:	6033      	strmi	r3, [r6, #0]
 800e71e:	6825      	ldr	r5, [r4, #0]
 800e720:	f015 0506 	ands.w	r5, r5, #6
 800e724:	d106      	bne.n	800e734 <_printf_common+0x48>
 800e726:	f104 0a19 	add.w	sl, r4, #25
 800e72a:	68e3      	ldr	r3, [r4, #12]
 800e72c:	6832      	ldr	r2, [r6, #0]
 800e72e:	1a9b      	subs	r3, r3, r2
 800e730:	42ab      	cmp	r3, r5
 800e732:	dc26      	bgt.n	800e782 <_printf_common+0x96>
 800e734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e738:	1e13      	subs	r3, r2, #0
 800e73a:	6822      	ldr	r2, [r4, #0]
 800e73c:	bf18      	it	ne
 800e73e:	2301      	movne	r3, #1
 800e740:	0692      	lsls	r2, r2, #26
 800e742:	d42b      	bmi.n	800e79c <_printf_common+0xb0>
 800e744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e748:	4649      	mov	r1, r9
 800e74a:	4638      	mov	r0, r7
 800e74c:	47c0      	blx	r8
 800e74e:	3001      	adds	r0, #1
 800e750:	d01e      	beq.n	800e790 <_printf_common+0xa4>
 800e752:	6823      	ldr	r3, [r4, #0]
 800e754:	68e5      	ldr	r5, [r4, #12]
 800e756:	6832      	ldr	r2, [r6, #0]
 800e758:	f003 0306 	and.w	r3, r3, #6
 800e75c:	2b04      	cmp	r3, #4
 800e75e:	bf08      	it	eq
 800e760:	1aad      	subeq	r5, r5, r2
 800e762:	68a3      	ldr	r3, [r4, #8]
 800e764:	6922      	ldr	r2, [r4, #16]
 800e766:	bf0c      	ite	eq
 800e768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e76c:	2500      	movne	r5, #0
 800e76e:	4293      	cmp	r3, r2
 800e770:	bfc4      	itt	gt
 800e772:	1a9b      	subgt	r3, r3, r2
 800e774:	18ed      	addgt	r5, r5, r3
 800e776:	2600      	movs	r6, #0
 800e778:	341a      	adds	r4, #26
 800e77a:	42b5      	cmp	r5, r6
 800e77c:	d11a      	bne.n	800e7b4 <_printf_common+0xc8>
 800e77e:	2000      	movs	r0, #0
 800e780:	e008      	b.n	800e794 <_printf_common+0xa8>
 800e782:	2301      	movs	r3, #1
 800e784:	4652      	mov	r2, sl
 800e786:	4649      	mov	r1, r9
 800e788:	4638      	mov	r0, r7
 800e78a:	47c0      	blx	r8
 800e78c:	3001      	adds	r0, #1
 800e78e:	d103      	bne.n	800e798 <_printf_common+0xac>
 800e790:	f04f 30ff 	mov.w	r0, #4294967295
 800e794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e798:	3501      	adds	r5, #1
 800e79a:	e7c6      	b.n	800e72a <_printf_common+0x3e>
 800e79c:	18e1      	adds	r1, r4, r3
 800e79e:	1c5a      	adds	r2, r3, #1
 800e7a0:	2030      	movs	r0, #48	; 0x30
 800e7a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e7a6:	4422      	add	r2, r4
 800e7a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e7ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e7b0:	3302      	adds	r3, #2
 800e7b2:	e7c7      	b.n	800e744 <_printf_common+0x58>
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	4622      	mov	r2, r4
 800e7b8:	4649      	mov	r1, r9
 800e7ba:	4638      	mov	r0, r7
 800e7bc:	47c0      	blx	r8
 800e7be:	3001      	adds	r0, #1
 800e7c0:	d0e6      	beq.n	800e790 <_printf_common+0xa4>
 800e7c2:	3601      	adds	r6, #1
 800e7c4:	e7d9      	b.n	800e77a <_printf_common+0x8e>
	...

0800e7c8 <_printf_i>:
 800e7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7cc:	7e0f      	ldrb	r7, [r1, #24]
 800e7ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e7d0:	2f78      	cmp	r7, #120	; 0x78
 800e7d2:	4691      	mov	r9, r2
 800e7d4:	4680      	mov	r8, r0
 800e7d6:	460c      	mov	r4, r1
 800e7d8:	469a      	mov	sl, r3
 800e7da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e7de:	d807      	bhi.n	800e7f0 <_printf_i+0x28>
 800e7e0:	2f62      	cmp	r7, #98	; 0x62
 800e7e2:	d80a      	bhi.n	800e7fa <_printf_i+0x32>
 800e7e4:	2f00      	cmp	r7, #0
 800e7e6:	f000 80d8 	beq.w	800e99a <_printf_i+0x1d2>
 800e7ea:	2f58      	cmp	r7, #88	; 0x58
 800e7ec:	f000 80a3 	beq.w	800e936 <_printf_i+0x16e>
 800e7f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e7f8:	e03a      	b.n	800e870 <_printf_i+0xa8>
 800e7fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e7fe:	2b15      	cmp	r3, #21
 800e800:	d8f6      	bhi.n	800e7f0 <_printf_i+0x28>
 800e802:	a101      	add	r1, pc, #4	; (adr r1, 800e808 <_printf_i+0x40>)
 800e804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e808:	0800e861 	.word	0x0800e861
 800e80c:	0800e875 	.word	0x0800e875
 800e810:	0800e7f1 	.word	0x0800e7f1
 800e814:	0800e7f1 	.word	0x0800e7f1
 800e818:	0800e7f1 	.word	0x0800e7f1
 800e81c:	0800e7f1 	.word	0x0800e7f1
 800e820:	0800e875 	.word	0x0800e875
 800e824:	0800e7f1 	.word	0x0800e7f1
 800e828:	0800e7f1 	.word	0x0800e7f1
 800e82c:	0800e7f1 	.word	0x0800e7f1
 800e830:	0800e7f1 	.word	0x0800e7f1
 800e834:	0800e981 	.word	0x0800e981
 800e838:	0800e8a5 	.word	0x0800e8a5
 800e83c:	0800e963 	.word	0x0800e963
 800e840:	0800e7f1 	.word	0x0800e7f1
 800e844:	0800e7f1 	.word	0x0800e7f1
 800e848:	0800e9a3 	.word	0x0800e9a3
 800e84c:	0800e7f1 	.word	0x0800e7f1
 800e850:	0800e8a5 	.word	0x0800e8a5
 800e854:	0800e7f1 	.word	0x0800e7f1
 800e858:	0800e7f1 	.word	0x0800e7f1
 800e85c:	0800e96b 	.word	0x0800e96b
 800e860:	682b      	ldr	r3, [r5, #0]
 800e862:	1d1a      	adds	r2, r3, #4
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	602a      	str	r2, [r5, #0]
 800e868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e86c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e870:	2301      	movs	r3, #1
 800e872:	e0a3      	b.n	800e9bc <_printf_i+0x1f4>
 800e874:	6820      	ldr	r0, [r4, #0]
 800e876:	6829      	ldr	r1, [r5, #0]
 800e878:	0606      	lsls	r6, r0, #24
 800e87a:	f101 0304 	add.w	r3, r1, #4
 800e87e:	d50a      	bpl.n	800e896 <_printf_i+0xce>
 800e880:	680e      	ldr	r6, [r1, #0]
 800e882:	602b      	str	r3, [r5, #0]
 800e884:	2e00      	cmp	r6, #0
 800e886:	da03      	bge.n	800e890 <_printf_i+0xc8>
 800e888:	232d      	movs	r3, #45	; 0x2d
 800e88a:	4276      	negs	r6, r6
 800e88c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e890:	485e      	ldr	r0, [pc, #376]	; (800ea0c <_printf_i+0x244>)
 800e892:	230a      	movs	r3, #10
 800e894:	e019      	b.n	800e8ca <_printf_i+0x102>
 800e896:	680e      	ldr	r6, [r1, #0]
 800e898:	602b      	str	r3, [r5, #0]
 800e89a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e89e:	bf18      	it	ne
 800e8a0:	b236      	sxthne	r6, r6
 800e8a2:	e7ef      	b.n	800e884 <_printf_i+0xbc>
 800e8a4:	682b      	ldr	r3, [r5, #0]
 800e8a6:	6820      	ldr	r0, [r4, #0]
 800e8a8:	1d19      	adds	r1, r3, #4
 800e8aa:	6029      	str	r1, [r5, #0]
 800e8ac:	0601      	lsls	r1, r0, #24
 800e8ae:	d501      	bpl.n	800e8b4 <_printf_i+0xec>
 800e8b0:	681e      	ldr	r6, [r3, #0]
 800e8b2:	e002      	b.n	800e8ba <_printf_i+0xf2>
 800e8b4:	0646      	lsls	r6, r0, #25
 800e8b6:	d5fb      	bpl.n	800e8b0 <_printf_i+0xe8>
 800e8b8:	881e      	ldrh	r6, [r3, #0]
 800e8ba:	4854      	ldr	r0, [pc, #336]	; (800ea0c <_printf_i+0x244>)
 800e8bc:	2f6f      	cmp	r7, #111	; 0x6f
 800e8be:	bf0c      	ite	eq
 800e8c0:	2308      	moveq	r3, #8
 800e8c2:	230a      	movne	r3, #10
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e8ca:	6865      	ldr	r5, [r4, #4]
 800e8cc:	60a5      	str	r5, [r4, #8]
 800e8ce:	2d00      	cmp	r5, #0
 800e8d0:	bfa2      	ittt	ge
 800e8d2:	6821      	ldrge	r1, [r4, #0]
 800e8d4:	f021 0104 	bicge.w	r1, r1, #4
 800e8d8:	6021      	strge	r1, [r4, #0]
 800e8da:	b90e      	cbnz	r6, 800e8e0 <_printf_i+0x118>
 800e8dc:	2d00      	cmp	r5, #0
 800e8de:	d04d      	beq.n	800e97c <_printf_i+0x1b4>
 800e8e0:	4615      	mov	r5, r2
 800e8e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e8e6:	fb03 6711 	mls	r7, r3, r1, r6
 800e8ea:	5dc7      	ldrb	r7, [r0, r7]
 800e8ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e8f0:	4637      	mov	r7, r6
 800e8f2:	42bb      	cmp	r3, r7
 800e8f4:	460e      	mov	r6, r1
 800e8f6:	d9f4      	bls.n	800e8e2 <_printf_i+0x11a>
 800e8f8:	2b08      	cmp	r3, #8
 800e8fa:	d10b      	bne.n	800e914 <_printf_i+0x14c>
 800e8fc:	6823      	ldr	r3, [r4, #0]
 800e8fe:	07de      	lsls	r6, r3, #31
 800e900:	d508      	bpl.n	800e914 <_printf_i+0x14c>
 800e902:	6923      	ldr	r3, [r4, #16]
 800e904:	6861      	ldr	r1, [r4, #4]
 800e906:	4299      	cmp	r1, r3
 800e908:	bfde      	ittt	le
 800e90a:	2330      	movle	r3, #48	; 0x30
 800e90c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e910:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e914:	1b52      	subs	r2, r2, r5
 800e916:	6122      	str	r2, [r4, #16]
 800e918:	f8cd a000 	str.w	sl, [sp]
 800e91c:	464b      	mov	r3, r9
 800e91e:	aa03      	add	r2, sp, #12
 800e920:	4621      	mov	r1, r4
 800e922:	4640      	mov	r0, r8
 800e924:	f7ff fee2 	bl	800e6ec <_printf_common>
 800e928:	3001      	adds	r0, #1
 800e92a:	d14c      	bne.n	800e9c6 <_printf_i+0x1fe>
 800e92c:	f04f 30ff 	mov.w	r0, #4294967295
 800e930:	b004      	add	sp, #16
 800e932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e936:	4835      	ldr	r0, [pc, #212]	; (800ea0c <_printf_i+0x244>)
 800e938:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e93c:	6829      	ldr	r1, [r5, #0]
 800e93e:	6823      	ldr	r3, [r4, #0]
 800e940:	f851 6b04 	ldr.w	r6, [r1], #4
 800e944:	6029      	str	r1, [r5, #0]
 800e946:	061d      	lsls	r5, r3, #24
 800e948:	d514      	bpl.n	800e974 <_printf_i+0x1ac>
 800e94a:	07df      	lsls	r7, r3, #31
 800e94c:	bf44      	itt	mi
 800e94e:	f043 0320 	orrmi.w	r3, r3, #32
 800e952:	6023      	strmi	r3, [r4, #0]
 800e954:	b91e      	cbnz	r6, 800e95e <_printf_i+0x196>
 800e956:	6823      	ldr	r3, [r4, #0]
 800e958:	f023 0320 	bic.w	r3, r3, #32
 800e95c:	6023      	str	r3, [r4, #0]
 800e95e:	2310      	movs	r3, #16
 800e960:	e7b0      	b.n	800e8c4 <_printf_i+0xfc>
 800e962:	6823      	ldr	r3, [r4, #0]
 800e964:	f043 0320 	orr.w	r3, r3, #32
 800e968:	6023      	str	r3, [r4, #0]
 800e96a:	2378      	movs	r3, #120	; 0x78
 800e96c:	4828      	ldr	r0, [pc, #160]	; (800ea10 <_printf_i+0x248>)
 800e96e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e972:	e7e3      	b.n	800e93c <_printf_i+0x174>
 800e974:	0659      	lsls	r1, r3, #25
 800e976:	bf48      	it	mi
 800e978:	b2b6      	uxthmi	r6, r6
 800e97a:	e7e6      	b.n	800e94a <_printf_i+0x182>
 800e97c:	4615      	mov	r5, r2
 800e97e:	e7bb      	b.n	800e8f8 <_printf_i+0x130>
 800e980:	682b      	ldr	r3, [r5, #0]
 800e982:	6826      	ldr	r6, [r4, #0]
 800e984:	6961      	ldr	r1, [r4, #20]
 800e986:	1d18      	adds	r0, r3, #4
 800e988:	6028      	str	r0, [r5, #0]
 800e98a:	0635      	lsls	r5, r6, #24
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	d501      	bpl.n	800e994 <_printf_i+0x1cc>
 800e990:	6019      	str	r1, [r3, #0]
 800e992:	e002      	b.n	800e99a <_printf_i+0x1d2>
 800e994:	0670      	lsls	r0, r6, #25
 800e996:	d5fb      	bpl.n	800e990 <_printf_i+0x1c8>
 800e998:	8019      	strh	r1, [r3, #0]
 800e99a:	2300      	movs	r3, #0
 800e99c:	6123      	str	r3, [r4, #16]
 800e99e:	4615      	mov	r5, r2
 800e9a0:	e7ba      	b.n	800e918 <_printf_i+0x150>
 800e9a2:	682b      	ldr	r3, [r5, #0]
 800e9a4:	1d1a      	adds	r2, r3, #4
 800e9a6:	602a      	str	r2, [r5, #0]
 800e9a8:	681d      	ldr	r5, [r3, #0]
 800e9aa:	6862      	ldr	r2, [r4, #4]
 800e9ac:	2100      	movs	r1, #0
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	f7f1 fc1e 	bl	80001f0 <memchr>
 800e9b4:	b108      	cbz	r0, 800e9ba <_printf_i+0x1f2>
 800e9b6:	1b40      	subs	r0, r0, r5
 800e9b8:	6060      	str	r0, [r4, #4]
 800e9ba:	6863      	ldr	r3, [r4, #4]
 800e9bc:	6123      	str	r3, [r4, #16]
 800e9be:	2300      	movs	r3, #0
 800e9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9c4:	e7a8      	b.n	800e918 <_printf_i+0x150>
 800e9c6:	6923      	ldr	r3, [r4, #16]
 800e9c8:	462a      	mov	r2, r5
 800e9ca:	4649      	mov	r1, r9
 800e9cc:	4640      	mov	r0, r8
 800e9ce:	47d0      	blx	sl
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	d0ab      	beq.n	800e92c <_printf_i+0x164>
 800e9d4:	6823      	ldr	r3, [r4, #0]
 800e9d6:	079b      	lsls	r3, r3, #30
 800e9d8:	d413      	bmi.n	800ea02 <_printf_i+0x23a>
 800e9da:	68e0      	ldr	r0, [r4, #12]
 800e9dc:	9b03      	ldr	r3, [sp, #12]
 800e9de:	4298      	cmp	r0, r3
 800e9e0:	bfb8      	it	lt
 800e9e2:	4618      	movlt	r0, r3
 800e9e4:	e7a4      	b.n	800e930 <_printf_i+0x168>
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	4632      	mov	r2, r6
 800e9ea:	4649      	mov	r1, r9
 800e9ec:	4640      	mov	r0, r8
 800e9ee:	47d0      	blx	sl
 800e9f0:	3001      	adds	r0, #1
 800e9f2:	d09b      	beq.n	800e92c <_printf_i+0x164>
 800e9f4:	3501      	adds	r5, #1
 800e9f6:	68e3      	ldr	r3, [r4, #12]
 800e9f8:	9903      	ldr	r1, [sp, #12]
 800e9fa:	1a5b      	subs	r3, r3, r1
 800e9fc:	42ab      	cmp	r3, r5
 800e9fe:	dcf2      	bgt.n	800e9e6 <_printf_i+0x21e>
 800ea00:	e7eb      	b.n	800e9da <_printf_i+0x212>
 800ea02:	2500      	movs	r5, #0
 800ea04:	f104 0619 	add.w	r6, r4, #25
 800ea08:	e7f5      	b.n	800e9f6 <_printf_i+0x22e>
 800ea0a:	bf00      	nop
 800ea0c:	0800f7f1 	.word	0x0800f7f1
 800ea10:	0800f802 	.word	0x0800f802

0800ea14 <_read_r>:
 800ea14:	b538      	push	{r3, r4, r5, lr}
 800ea16:	4d07      	ldr	r5, [pc, #28]	; (800ea34 <_read_r+0x20>)
 800ea18:	4604      	mov	r4, r0
 800ea1a:	4608      	mov	r0, r1
 800ea1c:	4611      	mov	r1, r2
 800ea1e:	2200      	movs	r2, #0
 800ea20:	602a      	str	r2, [r5, #0]
 800ea22:	461a      	mov	r2, r3
 800ea24:	f7f3 fc4c 	bl	80022c0 <_read>
 800ea28:	1c43      	adds	r3, r0, #1
 800ea2a:	d102      	bne.n	800ea32 <_read_r+0x1e>
 800ea2c:	682b      	ldr	r3, [r5, #0]
 800ea2e:	b103      	cbz	r3, 800ea32 <_read_r+0x1e>
 800ea30:	6023      	str	r3, [r4, #0]
 800ea32:	bd38      	pop	{r3, r4, r5, pc}
 800ea34:	20001fc0 	.word	0x20001fc0

0800ea38 <_sbrk_r>:
 800ea38:	b538      	push	{r3, r4, r5, lr}
 800ea3a:	4d06      	ldr	r5, [pc, #24]	; (800ea54 <_sbrk_r+0x1c>)
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	4604      	mov	r4, r0
 800ea40:	4608      	mov	r0, r1
 800ea42:	602b      	str	r3, [r5, #0]
 800ea44:	f7f3 fc8e 	bl	8002364 <_sbrk>
 800ea48:	1c43      	adds	r3, r0, #1
 800ea4a:	d102      	bne.n	800ea52 <_sbrk_r+0x1a>
 800ea4c:	682b      	ldr	r3, [r5, #0]
 800ea4e:	b103      	cbz	r3, 800ea52 <_sbrk_r+0x1a>
 800ea50:	6023      	str	r3, [r4, #0]
 800ea52:	bd38      	pop	{r3, r4, r5, pc}
 800ea54:	20001fc0 	.word	0x20001fc0

0800ea58 <_fstat_r>:
 800ea58:	b538      	push	{r3, r4, r5, lr}
 800ea5a:	4d07      	ldr	r5, [pc, #28]	; (800ea78 <_fstat_r+0x20>)
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	4604      	mov	r4, r0
 800ea60:	4608      	mov	r0, r1
 800ea62:	4611      	mov	r1, r2
 800ea64:	602b      	str	r3, [r5, #0]
 800ea66:	f7f3 fc54 	bl	8002312 <_fstat>
 800ea6a:	1c43      	adds	r3, r0, #1
 800ea6c:	d102      	bne.n	800ea74 <_fstat_r+0x1c>
 800ea6e:	682b      	ldr	r3, [r5, #0]
 800ea70:	b103      	cbz	r3, 800ea74 <_fstat_r+0x1c>
 800ea72:	6023      	str	r3, [r4, #0]
 800ea74:	bd38      	pop	{r3, r4, r5, pc}
 800ea76:	bf00      	nop
 800ea78:	20001fc0 	.word	0x20001fc0

0800ea7c <_isatty_r>:
 800ea7c:	b538      	push	{r3, r4, r5, lr}
 800ea7e:	4d06      	ldr	r5, [pc, #24]	; (800ea98 <_isatty_r+0x1c>)
 800ea80:	2300      	movs	r3, #0
 800ea82:	4604      	mov	r4, r0
 800ea84:	4608      	mov	r0, r1
 800ea86:	602b      	str	r3, [r5, #0]
 800ea88:	f7f3 fc53 	bl	8002332 <_isatty>
 800ea8c:	1c43      	adds	r3, r0, #1
 800ea8e:	d102      	bne.n	800ea96 <_isatty_r+0x1a>
 800ea90:	682b      	ldr	r3, [r5, #0]
 800ea92:	b103      	cbz	r3, 800ea96 <_isatty_r+0x1a>
 800ea94:	6023      	str	r3, [r4, #0]
 800ea96:	bd38      	pop	{r3, r4, r5, pc}
 800ea98:	20001fc0 	.word	0x20001fc0

0800ea9c <__malloc_lock>:
 800ea9c:	4801      	ldr	r0, [pc, #4]	; (800eaa4 <__malloc_lock+0x8>)
 800ea9e:	f7ff ba15 	b.w	800decc <__retarget_lock_acquire_recursive>
 800eaa2:	bf00      	nop
 800eaa4:	20001fb4 	.word	0x20001fb4

0800eaa8 <__malloc_unlock>:
 800eaa8:	4801      	ldr	r0, [pc, #4]	; (800eab0 <__malloc_unlock+0x8>)
 800eaaa:	f7ff ba10 	b.w	800dece <__retarget_lock_release_recursive>
 800eaae:	bf00      	nop
 800eab0:	20001fb4 	.word	0x20001fb4

0800eab4 <_realloc_r>:
 800eab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eab8:	4680      	mov	r8, r0
 800eaba:	4614      	mov	r4, r2
 800eabc:	460e      	mov	r6, r1
 800eabe:	b921      	cbnz	r1, 800eaca <_realloc_r+0x16>
 800eac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eac4:	4611      	mov	r1, r2
 800eac6:	f7ff bae7 	b.w	800e098 <_malloc_r>
 800eaca:	b92a      	cbnz	r2, 800ead8 <_realloc_r+0x24>
 800eacc:	f7ff fa78 	bl	800dfc0 <_free_r>
 800ead0:	4625      	mov	r5, r4
 800ead2:	4628      	mov	r0, r5
 800ead4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ead8:	f000 f81b 	bl	800eb12 <_malloc_usable_size_r>
 800eadc:	4284      	cmp	r4, r0
 800eade:	4607      	mov	r7, r0
 800eae0:	d802      	bhi.n	800eae8 <_realloc_r+0x34>
 800eae2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eae6:	d812      	bhi.n	800eb0e <_realloc_r+0x5a>
 800eae8:	4621      	mov	r1, r4
 800eaea:	4640      	mov	r0, r8
 800eaec:	f7ff fad4 	bl	800e098 <_malloc_r>
 800eaf0:	4605      	mov	r5, r0
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	d0ed      	beq.n	800ead2 <_realloc_r+0x1e>
 800eaf6:	42bc      	cmp	r4, r7
 800eaf8:	4622      	mov	r2, r4
 800eafa:	4631      	mov	r1, r6
 800eafc:	bf28      	it	cs
 800eafe:	463a      	movcs	r2, r7
 800eb00:	f7fe fe14 	bl	800d72c <memcpy>
 800eb04:	4631      	mov	r1, r6
 800eb06:	4640      	mov	r0, r8
 800eb08:	f7ff fa5a 	bl	800dfc0 <_free_r>
 800eb0c:	e7e1      	b.n	800ead2 <_realloc_r+0x1e>
 800eb0e:	4635      	mov	r5, r6
 800eb10:	e7df      	b.n	800ead2 <_realloc_r+0x1e>

0800eb12 <_malloc_usable_size_r>:
 800eb12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb16:	1f18      	subs	r0, r3, #4
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	bfbc      	itt	lt
 800eb1c:	580b      	ldrlt	r3, [r1, r0]
 800eb1e:	18c0      	addlt	r0, r0, r3
 800eb20:	4770      	bx	lr
	...

0800eb24 <_init>:
 800eb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb26:	bf00      	nop
 800eb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb2a:	bc08      	pop	{r3}
 800eb2c:	469e      	mov	lr, r3
 800eb2e:	4770      	bx	lr

0800eb30 <_fini>:
 800eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb32:	bf00      	nop
 800eb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb36:	bc08      	pop	{r3}
 800eb38:	469e      	mov	lr, r3
 800eb3a:	4770      	bx	lr
