
LFDI Tuning Control Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011cc  08013c10  08013c10  00023c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014ddc  08014ddc  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  08014ddc  08014ddc  00024ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014de4  08014de4  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014de4  08014de4  00024de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014de8  08014de8  00024de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08014dec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302e4  2**0
                  CONTENTS
 10 .bss          00002e68  200002e8  200002e8  000302e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003150  20003150  000302e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020125  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bcb  00000000  00000000  00050439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  00055008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017d0  00000000  00000000  000569f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029ae0  00000000  00000000  000581c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022446  00000000  00000000  00081ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0bf3  00000000  00000000  000a40ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00184ce1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008544  00000000  00000000  00184d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013bf8 	.word	0x08013bf8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	08013bf8 	.word	0x08013bf8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <DAC_InitStruct>:
//Max Voltage peak to peak
float REFERENCE_VOLTAGE = 3;


//
void DAC_InitStruct(struct sDAC* s, SPI_HandleTypeDef* hspi){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	
	s->spi = hspi;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	601a      	str	r2, [r3, #0]
	Set_Config(s);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f831 	bl	80010b0 <Set_Config>
	Set_Max_Peak_To_Peak_Voltage(s, 0);
 800104e:	2100      	movs	r1, #0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f999 	bl	8001388 <Set_Max_Peak_To_Peak_Voltage>
	/* USER CODE BEGIN 1 */
	//Set all DAC Channels Up. Should probably be put into TCB init
	for (int i = 0; i < 6; i++){
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e021      	b.n	80010a0 <DAC_InitStruct+0x68>
		s->DAC_Channels[i].DAC_number = i;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3302      	adds	r3, #2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	460a      	mov	r2, r1
 800106c:	721a      	strb	r2, [r3, #8]
		s->DAC_Channels[i].upper_bound = 0xFFFF;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3302      	adds	r3, #2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	809a      	strh	r2, [r3, #4]
		s->DAC_Channels[i].lower_bound = 0x0000;
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3302      	adds	r3, #2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	80da      	strh	r2, [r3, #6]
		s->DAC_Channels[i].enabled = true;
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3302      	adds	r3, #2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	2201      	movs	r2, #1
 8001098:	729a      	strb	r2, [r3, #10]
	for (int i = 0; i < 6; i++){
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	ddda      	ble.n	800105c <DAC_InitStruct+0x24>
	}

}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <Set_Config>:
//@brief: This function will set a configuration value to the configuration register
//@param s: The DAC struct to use
//@return: None
void Set_Config(struct sDAC* s){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	uint8_t Data[3] = {0x00, 0x00, 0x00};
 80010b8:	4a30      	ldr	r2, [pc, #192]	; (800117c <Set_Config+0xcc>)
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	4611      	mov	r1, r2
 80010c2:	8019      	strh	r1, [r3, #0]
 80010c4:	3302      	adds	r3, #2
 80010c6:	0c12      	lsrs	r2, r2, #16
 80010c8:	701a      	strb	r2, [r3, #0]
	uint8_t read_command[3] = {READ|CONFIG, 0x00, 0x00};
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <Set_Config+0xd0>)
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <Set_Config+0xd4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	743b      	strb	r3, [r7, #16]
 80010d8:	2300      	movs	r3, #0
 80010da:	747b      	strb	r3, [r7, #17]
 80010dc:	2300      	movs	r3, #0
 80010de:	74bb      	strb	r3, [r7, #18]
	
	Hardware_Reset(s);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f923 	bl	800132c <Hardware_Reset>
	//Make sure SCE is 0. This will make it so that the DAC will use the Values direclty written to it
	//rather than trying to use the individual offset and gain of each register to re-adjust
	//the value
	//Gain_A = 1 -> gain is set to 4xVref GAIN_A = 0 -> gain is set to 6xVref
	
	uint8_t tx_data[3] = {WRITE|CONFIG, AB, 0x00};
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <Set_Config+0xd8>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <Set_Config+0xd4>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	733b      	strb	r3, [r7, #12]
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <Set_Config+0xdc>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	737b      	strb	r3, [r7, #13]
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f843 	bl	8001190 <Send_Command>
	Send_Command(s, read_command);
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f83d 	bl	8001190 <Send_Command>
	Recieve_Data(s, Data);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f85b 	bl	80011d8 <Recieve_Data>
	
	//if Data is the same as tx_data then the command was successful
	if(Data[1] == tx_data[1] && Data[2] == tx_data[2]){
 8001122:	7d7a      	ldrb	r2, [r7, #21]
 8001124:	7b7b      	ldrb	r3, [r7, #13]
 8001126:	429a      	cmp	r2, r3
 8001128:	d117      	bne.n	800115a <Set_Config+0xaa>
 800112a:	7dba      	ldrb	r2, [r7, #22]
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	429a      	cmp	r2, r3
 8001130:	d113      	bne.n	800115a <Set_Config+0xaa>
		s->config = (Data[1] << 8) | Data[2];
 8001132:	7d7b      	ldrb	r3, [r7, #21]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	7dbb      	ldrb	r3, [r7, #22]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21b      	sxth	r3, r3
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	809a      	strh	r2, [r3, #4]
		s->Configured = true;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	729a      	strb	r2, [r3, #10]
		s->State = DAC_STATE_OK;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2204      	movs	r2, #4
 8001150:	72da      	strb	r2, [r3, #11]
		s->Ready = true;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	731a      	strb	r2, [r3, #12]
 8001158:	e00c      	b.n	8001174 <Set_Config+0xc4>
	}else{
		s->State = DAC_STATE_INITFAILED;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	72da      	strb	r2, [r3, #11]
		s->Ready = false;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	731a      	strb	r2, [r3, #12]
		s->Errors++;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	89db      	ldrh	r3, [r3, #14]
 800116a:	3301      	adds	r3, #1
 800116c:	b29a      	uxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	81da      	strh	r2, [r3, #14]
	}
			

}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	08013c10 	.word	0x08013c10
 8001180:	20000000 	.word	0x20000000
 8001184:	20000305 	.word	0x20000305
 8001188:	20000304 	.word	0x20000304
 800118c:	20000002 	.word	0x20000002

08001190 <Send_Command>:
//        The second byte is the MSB of the register
//        The third byte is the LSB of the register
//@param: spi: The spi handle to use
//@param: command: The command to send
//@return: none
void Send_Command(struct sDAC* s, uint8_t* Command){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f8aa 	bl	80012f4 <Set_nCS_high>
	hal_status = HAL_SPI_Transmit(s->spi, Command, 3, 1);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	f008 f8ec 	bl	8009386 <HAL_SPI_Transmit>
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
	while (!(s->spi->Instance->SR & SPI_SR_TXE));
 80011b2:	bf00      	nop
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f7      	beq.n	80011b4 <Send_Command+0x24>
	Set_nCS_high(true);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 f895 	bl	80012f4 <Set_nCS_high>
	Delay_us(10);
 80011ca:	200a      	movs	r0, #10
 80011cc:	f001 ff74 	bl	80030b8 <Delay_us>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <Recieve_Data>:

//@brief: This function recieves data from the DAC and stores it in the data array
//@param: spi: The spi handle
//@param: Data: buffer to store the data in
//@return: None
void Recieve_Data(struct sDAC* s, uint8_t* Data){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af02      	add	r7, sp, #8
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f886 	bl	80012f4 <Set_nCS_high>
	hal_status = HAL_SPI_TransmitReceive(s->spi,NOP_Send, Data, 3, 100);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2303      	movs	r3, #3
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	490b      	ldr	r1, [pc, #44]	; (8001224 <Recieve_Data+0x4c>)
 80011f6:	f008 fa02 	bl	80095fe <HAL_SPI_TransmitReceive>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
	while ((s->spi->Instance->SR & SPI_SR_RXNE));
 80011fe:	bf00      	nop
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f7      	bne.n	8001200 <Recieve_Data+0x28>
	Set_nCS_high(true);
 8001210:	2001      	movs	r0, #1
 8001212:	f000 f86f 	bl	80012f4 <Set_nCS_high>
	Delay_us(10);
 8001216:	200a      	movs	r0, #10
 8001218:	f001 ff4e 	bl	80030b8 <Delay_us>

}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000004 	.word	0x20000004

08001228 <Set_DAC_Value>:
//@brief: This function sets the value of the given dac
//@param: DAC_Num: The DAC number to set the offset of
//@param: val: The value to set the dac to
//@param spi: The spi handle to use
//@return: None
void Set_DAC_Value(struct sDAC* s, uint8_t DAC_Num, uint16_t val){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
 8001234:	4613      	mov	r3, r2
 8001236:	803b      	strh	r3, [r7, #0]
	//Make sure DAC is between 0 and 7
	if(DAC_Num > 7){
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	2b07      	cmp	r3, #7
 800123c:	d819      	bhi.n	8001272 <Set_DAC_Value+0x4a>
		return;
	}
	uint8_t DAC_REG = Set_DAC0+DAC_Num;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <Set_DAC_Value+0x54>)
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	4413      	add	r3, r2
 8001246:	73fb      	strb	r3, [r7, #15]
	//Set the DAC to the correct value by adding the DAC number to the Set_DAC0 command
	uint8_t tx_data[3] = {WRITE|DAC_REG, (val >> 8), (val & 0xFF)};
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <Set_DAC_Value+0x58>)
 800124a:	781a      	ldrb	r2, [r3, #0]
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	4313      	orrs	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	733b      	strb	r3, [r7, #12]
 8001254:	883b      	ldrh	r3, [r7, #0]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	b29b      	uxth	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	737b      	strb	r3, [r7, #13]
 800125e:	883b      	ldrh	r3, [r7, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4619      	mov	r1, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff90 	bl	8001190 <Send_Command>
 8001270:	e000      	b.n	8001274 <Set_DAC_Value+0x4c>
		return;
 8001272:	bf00      	nop
	
}
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000001 	.word	0x20000001
 8001280:	20000304 	.word	0x20000304

08001284 <Set_nLDAC_high>:
}

//@brief: This function sets the nLDAC pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nLDAC_high(bool HIGH){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <Set_nLDAC_high+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <Set_nLDAC_high+0x34>)
 800129c:	f003 fbe4 	bl	8004a68 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
	}
}
 80012a0:	e005      	b.n	80012ae <Set_nLDAC_high+0x2a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <Set_nLDAC_high+0x34>)
 80012aa:	f003 fbdd 	bl	8004a68 <HAL_GPIO_WritePin>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020c00 	.word	0x40020c00

080012bc <Set_nRST_high>:
}

//@brief: This function sets the nRST pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nRST_high(bool HIGH){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <Set_nRST_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <Set_nRST_high+0x34>)
 80012d4:	f003 fbc8 	bl	8004a68 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
	}

}
 80012d8:	e005      	b.n	80012e6 <Set_nRST_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <Set_nRST_high+0x34>)
 80012e2:	f003 fbc1 	bl	8004a68 <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <Set_nCS_high>:
}

//@brief: This function sets the nCS pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nCS_high(bool HIGH){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <Set_nCS_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130a:	4807      	ldr	r0, [pc, #28]	; (8001328 <Set_nCS_high+0x34>)
 800130c:	f003 fbac 	bl	8004a68 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
	}

}
 8001310:	e005      	b.n	800131e <Set_nCS_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <Set_nCS_high+0x34>)
 800131a:	f003 fba5 	bl	8004a68 <HAL_GPIO_WritePin>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000

0800132c <Hardware_Reset>:
	return state;
}


//Reset the DAC Values using the nRST Pin
void Hardware_Reset(struct sDAC* s){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	Set_nRST_high(false);
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ffc1 	bl	80012bc <Set_nRST_high>
	Delay_us(10);
 800133a:	200a      	movs	r0, #10
 800133c:	f001 febc 	bl	80030b8 <Delay_us>
	Set_nRST_high(true);
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff ffbb 	bl	80012bc <Set_nRST_high>
	Delay_us(10);
 8001346:	200a      	movs	r0, #10
 8001348:	f001 feb6 	bl	80030b8 <Delay_us>
	s->State = DAC_STATE_UNKNOWN;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	72da      	strb	r2, [r3, #11]
	s->Ready= false;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	731a      	strb	r2, [r3, #12]
	s->Errors = 0;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	81da      	strh	r2, [r3, #14]
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <Syncronous_Update>:


//Syncronous Update of LDAC using the nLDAC Pin NOTE: Only Needed if nLDAC is tied High
void Syncronous_Update(void){
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
	Set_nLDAC_high(false);
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff ff8a 	bl	8001284 <Set_nLDAC_high>
	Delay_us(10);
 8001370:	200a      	movs	r0, #10
 8001372:	f001 fea1 	bl	80030b8 <Delay_us>
	Set_nLDAC_high(true);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ff84 	bl	8001284 <Set_nLDAC_high>
	Delay_us(10);
 800137c:	200a      	movs	r0, #10
 800137e:	f001 fe9b 	bl	80030b8 <Delay_us>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <Set_Max_Peak_To_Peak_Voltage>:


//@brief: This function calculates the max peak to peak voltage that can be achieved
void Set_Max_Peak_To_Peak_Voltage(struct sDAC* s, bool Gain){
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
	//The max Voltage is 11.2V so we need to scale the voltage to fit in 16 bits
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	if(Gain){
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00a      	beq.n	80013b0 <Set_Max_Peak_To_Peak_Voltage+0x28>
		s->max_peak2peak = REFERENCE_VOLTAGE*4;
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80013a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edc3 7a04 	vstr	s15, [r3, #16]
	}else
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
	return;
 80013ae:	e00a      	b.n	80013c6 <Set_Max_Peak_To_Peak_Voltage+0x3e>
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	edc3 7a04 	vstr	s15, [r3, #16]
	return;
 80013c4:	bf00      	nop
}
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20000008 	.word	0x20000008

080013d4 <Set_Voltage_Peak_to_Peak>:

//@brief: This function sets the upper and lower bounds of a DAC Channel
//@param: s: The DAC Channel to set the bounds of
//@param: voltage: The voltage to set the bounds to
void Set_Voltage_Peak_to_Peak(struct sDAC* sDAC, uint8_t Channel_Number, float* voltage){
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	460b      	mov	r3, r1
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	72fb      	strb	r3, [r7, #11]
	//The max Voltage Peak to Peak is 22.4V so we need to scale the voltage to fit in 16 bits
	//Find the upper and lower bounds of the voltage with Zero Bias
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	float percentage = (*voltage/(float)sDAC->max_peak2peak)/2;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edd3 6a00 	vldr	s13, [r3]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80013ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fa:	edc7 7a05 	vstr	s15, [r7, #20]
	sDAC->DAC_Channels[Channel_Number].upper_bound = 0xFFFF/2 + percentage*0xFFFF;
 80013fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001402:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001464 <Set_Voltage_Peak_to_Peak+0x90>
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001468 <Set_Voltage_Peak_to_Peak+0x94>
 800140e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001412:	7afb      	ldrb	r3, [r7, #11]
 8001414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001418:	ee17 2a90 	vmov	r2, s15
 800141c:	b291      	uxth	r1, r2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	3302      	adds	r3, #2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	460a      	mov	r2, r1
 8001428:	809a      	strh	r2, [r3, #4]
	sDAC->DAC_Channels[Channel_Number].lower_bound = 0xFFFF/2 - percentage*0xFFFF;
 800142a:	edd7 7a05 	vldr	s15, [r7, #20]
 800142e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001464 <Set_Voltage_Peak_to_Peak+0x90>
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001468 <Set_Voltage_Peak_to_Peak+0x94>
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	7afb      	ldrb	r3, [r7, #11]
 8001440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001444:	ee17 2a90 	vmov	r2, s15
 8001448:	b291      	uxth	r1, r2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	3302      	adds	r3, #2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	460a      	mov	r2, r1
 8001454:	80da      	strh	r2, [r3, #6]
	return;
 8001456:	bf00      	nop

}
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	477fff00 	.word	0x477fff00
 8001468:	46fffe00 	.word	0x46fffe00

0800146c <PID_InitStruct>:
 */

#include "pid.h"

void PID_InitStruct(struct sPID* s)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->Config.Kp = 0.0f;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
  s->Config.Ki = 0.0f;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
  s->Config.Kd = 0.0f;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
  s->Config.Li = 1.0f;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800149e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014a2:	601a      	str	r2, [r3, #0]
  s->Config.TargetP = -273.0f;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80014aa:	4a22      	ldr	r2, [pc, #136]	; (8001534 <PID_InitStruct+0xc8>)
 80014ac:	601a      	str	r2, [r3, #0]
  s->Config.Enabled = false;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
  s->Config.History = 16;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2210      	movs	r2, #16
 80014ba:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
  s->DeltaT = 0.013f;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <PID_InitStruct+0xcc>)
 80014c6:	601a      	str	r2, [r3, #0]
  s->IntegratorCount = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  for (i=0;i<255;i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e009      	b.n	80014ea <PID_InitStruct+0x7e>
    s->LastP[i]=0.0f;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
  for (i=0;i<255;i++)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	3301      	adds	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	2bff      	cmp	r3, #255	; 0xff
 80014ee:	d1f2      	bne.n	80014d6 <PID_InitStruct+0x6a>
  s->Effort = 0.0f;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
  s->Ep = 0.0f;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
  s->Ei = 0.0f;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
  s->Ed = 0.0f;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
  s->Config.Frequency = 200;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	22c8      	movs	r2, #200	; 0xc8
 8001524:	f8a3 242e 	strh.w	r2, [r3, #1070]	; 0x42e
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	c3888000 	.word	0xc3888000
 8001538:	3c54fdf4 	.word	0x3c54fdf4

0800153c <PID_SavePoint>:

void PID_SavePoint(struct sPID* s, float p)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	ed87 0a00 	vstr	s0, [r7]
  uint8_t i;
  for (i=(s->Config.History-1); i>0; i--)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 800154e:	3b01      	subs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e00d      	b.n	8001570 <PID_SavePoint+0x34>
    s->LastP[i] = s->LastP[i-1];
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	1e5a      	subs	r2, r3, #1
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	440a      	add	r2, r1
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	601a      	str	r2, [r3, #0]
  for (i=(s->Config.History-1); i>0; i--)
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	3b01      	subs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ee      	bne.n	8001554 <PID_SavePoint+0x18>
  s->LastP[0] = p;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	601a      	str	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <PID_SumError>:

float PID_SumError(struct sPID* s)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->IntegratorCount++;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8001596:	3301      	adds	r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  if (s->IntegratorCount < s->Config.History)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d202      	bcs.n	80015b6 <PID_SumError+0x2e>
    return 0;
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e05b      	b.n	800166e <PID_SumError+0xe6>
  else
    s->IntegratorCount = s->Config.History;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 242d 	ldrb.w	r2, [r3, #1069]	; 0x42d
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  float err = 0;
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e015      	b.n	80015fa <PID_SumError+0x72>
    err += (s->Config.TargetP - s->LastP[i]);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80015d4:	ed93 7a00 	vldr	s14, [r3]
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	edc7 7a02 	vstr	s15, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	3301      	adds	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3e3      	bcc.n	80015ce <PID_SumError+0x46>
  err *= (s->Config.Ki);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ed97 7a02 	vldr	s14, [r7, #8]
 8001614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001618:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err < (-s->Config.Li))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	eef1 7a67 	vneg.f32	s15, s15
 800162a:	ed97 7a02 	vldr	s14, [r7, #8]
 800162e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	d508      	bpl.n	800164a <PID_SumError+0xc2>
    err = -(s->Config.Li);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	eef1 7a67 	vneg.f32	s15, s15
 8001646:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err > s->Config.Li)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ed97 7a02 	vldr	s14, [r7, #8]
 8001658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	dd04      	ble.n	800166c <PID_SumError+0xe4>
    err = s->Config.Li;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	60bb      	str	r3, [r7, #8]
  return err;
 800166c:	68bb      	ldr	r3, [r7, #8]
}
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eeb0 0a67 	vmov.f32	s0, s15
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <PID_Velocity>:


float PID_Velocity(struct sPID* s)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint8_t periods = 4;
 8001688:	2304      	movs	r3, #4
 800168a:	73fb      	strb	r3, [r7, #15]
  if (s->IntegratorCount > periods)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	429a      	cmp	r2, r3
 8001696:	d219      	bcs.n	80016cc <PID_Velocity+0x4c>
    return (s->LastP[0]-s->LastP[periods])/(s->DeltaT*periods);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	ed93 7a00 	vldr	s14, [r3]
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b4:	edd3 6a00 	vldr	s13, [r3]
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016ca:	e001      	b.n	80016d0 <PID_Velocity+0x50>
  else
    return 0;
 80016cc:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016e4 <PID_Velocity+0x64>
}
 80016d0:	eef0 7a66 	vmov.f32	s15, s13
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	00000000 	.word	0x00000000

080016e8 <PID_CalculateEffort>:

// calculate the error and return a value between 0 and 1
float PID_CalculateEffort(struct sPID* s, float p)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	ed87 0a00 	vstr	s0, [r7]
  float eff;
  if ((s->Config.Enabled == false) ||
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 342c 	ldrb.w	r3, [r3, #1068]	; 0x42c
 80016fa:	f083 0301 	eor.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d115      	bne.n	8001730 <PID_CalculateEffort+0x48>
      (s->Config.TargetP < -200) ||
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800170a:	edd3 7a00 	vldr	s15, [r3]
  if ((s->Config.Enabled == false) ||
 800170e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001844 <PID_CalculateEffort+0x15c>
 8001712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	d409      	bmi.n	8001730 <PID_CalculateEffort+0x48>
      (s->DeltaT == 0))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001722:	edd3 7a00 	vldr	s15, [r3]
      (s->Config.TargetP < -200) ||
 8001726:	eef5 7a40 	vcmp.f32	s15, #0.0
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	d117      	bne.n	8001760 <PID_CalculateEffort+0x78>
  {
    s->Ep = -1;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001736:	4a44      	ldr	r2, [pc, #272]	; (8001848 <PID_CalculateEffort+0x160>)
 8001738:	601a      	str	r2, [r3, #0]
    s->Ed = -1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001740:	4a41      	ldr	r2, [pc, #260]	; (8001848 <PID_CalculateEffort+0x160>)
 8001742:	601a      	str	r2, [r3, #0]
    s->Ei = -1;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800174a:	4a3f      	ldr	r2, [pc, #252]	; (8001848 <PID_CalculateEffort+0x160>)
 800174c:	601a      	str	r2, [r3, #0]
    s->Effort = 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
    return 0;
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e069      	b.n	8001834 <PID_CalculateEffort+0x14c>
  }
  s->Ep = (s->Config.TargetP - p) * (s->Config.Kp);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8001766:	ed93 7a00 	vldr	s14, [r3]
 800176a:	edd7 7a00 	vldr	s15, [r7]
 800176e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001786:	edc3 7a00 	vstr	s15, [r3]
  s->Ed = (0 - PID_Velocity(s)) * (s->Config.Kd);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff78 	bl	8001680 <PID_Velocity>
 8001790:	eef0 7a40 	vmov.f32	s15, s0
 8001794:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800184c <PID_CalculateEffort+0x164>
 8001798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017b0:	edc3 7a00 	vstr	s15, [r3]
  s->Ei = PID_SumError(s);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fee7 	bl	8001588 <PID_SumError>
 80017ba:	eef0 7a40 	vmov.f32	s15, s0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017c4:	edc3 7a00 	vstr	s15, [r3]
  eff = s->Ep + s->Ed + s->Ei;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80017ce:	ed93 7a00 	vldr	s14, [r3]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (eff > 1)
 80017f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	dd02      	ble.n	800180a <PID_CalculateEffort+0x122>
    eff = 1;
 8001804:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001808:	60fb      	str	r3, [r7, #12]
  if (eff < 0)
 800180a:	edd7 7a03 	vldr	s15, [r7, #12]
 800180e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	d502      	bpl.n	800181e <PID_CalculateEffort+0x136>
    eff = 0;
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  PID_SavePoint(s, p);
 800181e:	ed97 0a00 	vldr	s0, [r7]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fe8a 	bl	800153c <PID_SavePoint>
  s->Effort = eff;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	601a      	str	r2, [r3, #0]
  return eff;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	c3480000 	.word	0xc3480000
 8001848:	bf800000 	.word	0xbf800000
 800184c:	00000000 	.word	0x00000000

08001850 <TMP117_InitStruct>:
//@param s Pointer to the structure to initialize
//@param interface Pointer to the I2C interface to use
//@param addpin Value of the address pin
//@return None
void TMP117_InitStruct(struct sTMP117* s, I2C_HandleTypeDef* interface, uint8_t addpin)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	4613      	mov	r3, r2
 800185c:	71fb      	strb	r3, [r7, #7]
   * 0x01 V+
   * 0x10 SDA
   * 0x11 SCL
   */
  uint8_t i;
  s->Address = 0b1001000 | addpin;
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8001864:	b2da      	uxtb	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	701a      	strb	r2, [r3, #0]
  s->Interface = interface;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	605a      	str	r2, [r3, #4]
  s->Average = -273;
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	a31f      	add	r3, pc, #124	; (adr r3, 80018f0 <TMP117_InitStruct+0xa0>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
  s->Configured = false;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
  s->SamplesInAverage = 16;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2210      	movs	r2, #16
 8001888:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
  s->Index = 0;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  s->State = TMP117_STATE_UNKNOWN;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  for (i=0;i<64;i++)
 800189c:	2300      	movs	r3, #0
 800189e:	75fb      	strb	r3, [r7, #23]
 80018a0:	e00c      	b.n	80018bc <TMP117_InitStruct+0x6c>
    s->Temperature[i] = -273;
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	18d1      	adds	r1, r2, r3
 80018ac:	a310      	add	r3, pc, #64	; (adr r3, 80018f0 <TMP117_InitStruct+0xa0>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	e9c1 2300 	strd	r2, r3, [r1]
  for (i=0;i<64;i++)
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	3301      	adds	r3, #1
 80018ba:	75fb      	strb	r3, [r7, #23]
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	2b3f      	cmp	r3, #63	; 0x3f
 80018c0:	d9ef      	bls.n	80018a2 <TMP117_InitStruct+0x52>
  s->LastTemperature = -273;
 80018c2:	68f9      	ldr	r1, [r7, #12]
 80018c4:	a30a      	add	r3, pc, #40	; (adr r3, 80018f0 <TMP117_InitStruct+0xa0>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Ready = false;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  s->Errors = 0;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
}
 80018de:	bf00      	nop
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	f3af 8000 	nop.w
 80018f0:	00000000 	.word	0x00000000
 80018f4:	c0711000 	.word	0xc0711000

080018f8 <TMP117_Configure>:

//@brief Configure the TMP117
//@param s Pointer to the structure to configure
//@return None
void TMP117_Configure(struct sTMP117* s)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef res;
  printf("Attempting to init... ");
 8001900:	481c      	ldr	r0, [pc, #112]	; (8001974 <TMP117_Configure+0x7c>)
 8001902:	f00d fe99 	bl	800f638 <iprintf>
  uint8_t buffer[3] = {0};
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <TMP117_Configure+0x80>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	81bb      	strh	r3, [r7, #12]
 800190c:	2300      	movs	r3, #0
 800190e:	73bb      	strb	r3, [r7, #14]
  buffer[0] = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	733b      	strb	r3, [r7, #12]
  buffer[2] = 1 << 5;
 8001914:	2320      	movs	r3, #32
 8001916:	73bb      	strb	r3, [r7, #14]
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 3, 10); // 8 samples averaged
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6858      	ldr	r0, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	b299      	uxth	r1, r3
 8001926:	f107 020c 	add.w	r2, r7, #12
 800192a:	230a      	movs	r3, #10
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2303      	movs	r3, #3
 8001930:	f003 f9f8 	bl	8004d24 <HAL_I2C_Master_Transmit>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
  if (res == HAL_OK)
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d107      	bne.n	800194e <TMP117_Configure+0x56>
  {
    s->Configured = true;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    printf("OK!\n");
 8001946:	480d      	ldr	r0, [pc, #52]	; (800197c <TMP117_Configure+0x84>)
 8001948:	f00d fefc 	bl	800f744 <puts>
  {
    s->Errors++;
    s->State = TMP117_STATE_INITFAILED;
    printf("Failed!\n");
  }
}
 800194c:	e00e      	b.n	800196c <TMP117_Configure+0x74>
    s->Errors++;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001954:	3301      	adds	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    s->State = TMP117_STATE_INITFAILED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    printf("Failed!\n");
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <TMP117_Configure+0x88>)
 8001968:	f00d feec 	bl	800f744 <puts>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	08013c38 	.word	0x08013c38
 8001978:	08013c5c 	.word	0x08013c5c
 800197c:	08013c50 	.word	0x08013c50
 8001980:	08013c54 	.word	0x08013c54

08001984 <TMP117_GetTemperature>:

//@brief Get the temperature from the TMP117
//@param s Pointer to the structure to get the temperature from
//@return None
void TMP117_GetTemperature(struct sTMP117* s)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af02      	add	r7, sp, #8
 800198a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t u;
  double t = 0;
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9c7 2306 	strd	r2, r3, [r7, #24]
  //setup an empty Buffer to request the temperature
  uint8_t buffer[2] = {0};
 8001998:	2300      	movs	r3, #0
 800199a:	81bb      	strh	r3, [r7, #12]
  uint16_t data = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef res;
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 1, 10); // request temperature
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6858      	ldr	r0, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	b299      	uxth	r1, r3
 80019ae:	f107 020c 	add.w	r2, r7, #12
 80019b2:	230a      	movs	r3, #10
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	f003 f9b4 	bl	8004d24 <HAL_I2C_Master_Transmit>
 80019bc:	4603      	mov	r3, r0
 80019be:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01a      	beq.n	80019fc <TMP117_GetTemperature+0x78>
  {
    s->State = TMP117_STATE_REQUESTNOACK;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019d4:	3301      	adds	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    //If this temperature sensor gets more than 100 errors in a row, it's probably not connected
    if (s->Errors > 100)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019e4:	2b64      	cmp	r3, #100	; 0x64
 80019e6:	f240 80b3 	bls.w	8001b50 <TMP117_GetTemperature+0x1cc>
    {
      s->Configured = false;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 80019fa:	e0a9      	b.n	8001b50 <TMP117_GetTemperature+0x1cc>
  }

  res = HAL_I2C_Master_Receive(s->Interface, (s->Address << 1), buffer, 2, 10); // receive temperature
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6858      	ldr	r0, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	b299      	uxth	r1, r3
 8001a0a:	f107 020c 	add.w	r2, r7, #12
 8001a0e:	230a      	movs	r3, #10
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2302      	movs	r3, #2
 8001a14:	f003 fa84 	bl	8004f20 <HAL_I2C_Master_Receive>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 8001a1c:	7cfb      	ldrb	r3, [r7, #19]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01a      	beq.n	8001a58 <TMP117_GetTemperature+0xd4>
  {
    s->State = TMP117_STATE_RECEIVEFAIL;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a30:	3301      	adds	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    if (s->Errors > 100)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a40:	2b64      	cmp	r3, #100	; 0x64
 8001a42:	f240 8087 	bls.w	8001b54 <TMP117_GetTemperature+0x1d0>
    {
      s->Configured = false;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 8001a56:	e07d      	b.n	8001b54 <TMP117_GetTemperature+0x1d0>
  }

  
  s->State = TMP117_STATE_VALIDTEMP;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  data = (buffer[0] << 8) | buffer[1];
 8001a60:	7b3b      	ldrb	r3, [r7, #12]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	7b7b      	ldrb	r3, [r7, #13]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	817b      	strh	r3, [r7, #10]
  u = *(&(data));
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	823b      	strh	r3, [r7, #16]
  //Conver the Temp as per documentation
  s->Temperature[s->Index] = ((double)u) * 0.0078125;
 8001a76:	8a3b      	ldrh	r3, [r7, #16]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd63 	bl	8000544 <__aeabi_ui2d>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001a84:	461c      	mov	r4, r3
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a8e:	f7fe fdd3 	bl	8000638 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	1c61      	adds	r1, r4, #1
 8001a9a:	00c9      	lsls	r1, r1, #3
 8001a9c:	4401      	add	r1, r0
 8001a9e:	e9c1 2300 	strd	r2, r3, [r1]
  s->LastTemperature = s->Temperature[s->Index];
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4413      	add	r3, r2
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Index++;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  //If we finally have enough Temperatures to average, set the Ready flag
  //if we have engough samples, set the flags
  if (s->Index >= s->SamplesInAverage)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 2211 	ldrb.w	r2, [r3, #529]	; 0x211
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d307      	bcc.n	8001aea <TMP117_GetTemperature+0x166>
  {
    s->Ready = true;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
    s->Index = 0;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  }
  
  //average the Temperatures
  if (s->Ready)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d030      	beq.n	8001b56 <TMP117_GetTemperature+0x1d2>
  {
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e011      	b.n	8001b1e <TMP117_GetTemperature+0x19a>
    {
      t += s->Temperature[i];
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b0c:	f7fe fbde 	bl	80002cc <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b24:	461a      	mov	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	dbe6      	blt.n	8001afa <TMP117_GetTemperature+0x176>
    }
    s->Average = t / s->SamplesInAverage;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd16 	bl	8000564 <__aeabi_i2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b40:	f7fe fea4 	bl	800088c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
 8001b4e:	e002      	b.n	8001b56 <TMP117_GetTemperature+0x1d2>
    return;
 8001b50:	bf00      	nop
 8001b52:	e000      	b.n	8001b56 <TMP117_GetTemperature+0x1d2>
    return;
 8001b54:	bf00      	nop
  }


}
 8001b56:	3724      	adds	r7, #36	; 0x24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}

08001b5c <TCB_InitStruct>:
#include "DAC.h"



//This Will Setup the TCB structer by initiallizing the DAC and the TMP117 and the Controller
void TCB_InitStruct(struct sTuningControlBoard* s, I2C_HandleTypeDef* hi2c, SPI_HandleTypeDef* hspi){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]

    //For each of the Seven Temperature sensors initialize the struct
    for(int i = 0; i < 4; i++){
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e011      	b.n	8001b92 <TCB_InitStruct+0x36>
        TMP117_InitStruct(&s->Sensor[i], hi2c, i);
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f44f 720a 	mov.w	r2, #552	; 0x228
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fe62 	bl	8001850 <TMP117_InitStruct>
    for(int i = 0; i < 4; i++){
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	ddea      	ble.n	8001b6e <TCB_InitStruct+0x12>
    }   
    Controller_InitStruct(&s->Controller,&s->Sensor[0], 0);
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f001 f980 	bl	8002ea8 <Controller_InitStruct>
    DAC_InitStruct(&s->DAC8718, hspi);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fa41 	bl	8001038 <DAC_InitStruct>

}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc4:	f3bf 8f4f 	dsb	sy
}
 8001bc8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <__NVIC_SystemReset+0x24>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bd2:	4904      	ldr	r1, [pc, #16]	; (8001be4 <__NVIC_SystemReset+0x24>)
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_SystemReset+0x28>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bda:	f3bf 8f4f 	dsb	sy
}
 8001bde:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <__NVIC_SystemReset+0x20>
 8001be4:	e000ed00 	.word	0xe000ed00
 8001be8:	05fa0004 	.word	0x05fa0004

08001bec <ProcessUserInput>:

//Get the User Input and process it
//@param Controller: pointer to the controller struct
//@param buffer: pointer to the buffer
void ProcessUserInput(struct sController* Controller, uint8_t* buffer, struct sTuningControlBoard* TCB)
{
 8001bec:	b5b0      	push	{r4, r5, r7, lr}
 8001bee:	b0ca      	sub	sp, #296	; 0x128
 8001bf0:	af04      	add	r7, sp, #16
 8001bf2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001bf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bfa:	6018      	str	r0, [r3, #0]
 8001bfc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c04:	6019      	str	r1, [r3, #0]
 8001c06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c0e:	601a      	str	r2, [r3, #0]
  uint16_t i = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  uint8_t u = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
  char output[250];
  char c;
  float f = 0;
 8001c1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
  for (i=0; buffer[i]; i++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001c30:	e02b      	b.n	8001c8a <ProcessUserInput+0x9e>
    buffer[i] = tolower(buffer[i]);
 8001c32:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c36:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001c3a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8001c48:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <ProcessUserInput+0x78>)
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <ProcessUserInput+0x7c>
 8001c5c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001c60:	3320      	adds	r3, #32
 8001c62:	e003      	b.n	8001c6c <ProcessUserInput+0x80>
 8001c64:	08014920 	.word	0x08014920
 8001c68:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001c6c:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8001c70:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001c74:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001c78:	6809      	ldr	r1, [r1, #0]
 8001c7a:	440a      	add	r2, r1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	7013      	strb	r3, [r2, #0]
  for (i=0; buffer[i]; i++)
 8001c80:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c84:	3301      	adds	r3, #1
 8001c86:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001c8a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c8e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001c92:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1c8      	bne.n	8001c32 <ProcessUserInput+0x46>
//  printf("String: %s\n", buffer);

  replacestr(buffer, "=", "");
 8001ca0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ca4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ca8:	4ab4      	ldr	r2, [pc, #720]	; (8001f7c <ProcessUserInput+0x390>)
 8001caa:	49b5      	ldr	r1, [pc, #724]	; (8001f80 <ProcessUserInput+0x394>)
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	f001 fa29 	bl	8003104 <replacestr>
  replacestr(buffer, " ", "");
 8001cb2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cba:	4ab0      	ldr	r2, [pc, #704]	; (8001f7c <ProcessUserInput+0x390>)
 8001cbc:	49b1      	ldr	r1, [pc, #708]	; (8001f84 <ProcessUserInput+0x398>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	f001 fa20 	bl	8003104 <replacestr>
  replacestr(buffer, " ", "");
 8001cc4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ccc:	4aab      	ldr	r2, [pc, #684]	; (8001f7c <ProcessUserInput+0x390>)
 8001cce:	49ad      	ldr	r1, [pc, #692]	; (8001f84 <ProcessUserInput+0x398>)
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	f001 fa17 	bl	8003104 <replacestr>
  replacestr(buffer, " ", "");
 8001cd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cde:	4aa7      	ldr	r2, [pc, #668]	; (8001f7c <ProcessUserInput+0x390>)
 8001ce0:	49a8      	ldr	r1, [pc, #672]	; (8001f84 <ProcessUserInput+0x398>)
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	f001 fa0e 	bl	8003104 <replacestr>
  replacestr(buffer, " ", "");
 8001ce8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cf0:	4aa2      	ldr	r2, [pc, #648]	; (8001f7c <ProcessUserInput+0x390>)
 8001cf2:	49a4      	ldr	r1, [pc, #656]	; (8001f84 <ProcessUserInput+0x398>)
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	f001 fa05 	bl	8003104 <replacestr>
  replacestr(buffer, " ", "");
 8001cfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cfe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d02:	4a9e      	ldr	r2, [pc, #632]	; (8001f7c <ProcessUserInput+0x390>)
 8001d04:	499f      	ldr	r1, [pc, #636]	; (8001f84 <ProcessUserInput+0x398>)
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	f001 f9fc 	bl	8003104 <replacestr>
  replacestr(buffer, "channel", "c");
 8001d0c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d14:	4a9c      	ldr	r2, [pc, #624]	; (8001f88 <ProcessUserInput+0x39c>)
 8001d16:	499d      	ldr	r1, [pc, #628]	; (8001f8c <ProcessUserInput+0x3a0>)
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	f001 f9f3 	bl	8003104 <replacestr>
//  replacestr(buffer, "controller", "c");
  replacestr(buffer, "chan", "c");
 8001d1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d26:	4a98      	ldr	r2, [pc, #608]	; (8001f88 <ProcessUserInput+0x39c>)
 8001d28:	4999      	ldr	r1, [pc, #612]	; (8001f90 <ProcessUserInput+0x3a4>)
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	f001 f9ea 	bl	8003104 <replacestr>
//  replacestr(buffer, "con", "c");
  replacestr(buffer, "address", "a");
 8001d30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d38:	4a96      	ldr	r2, [pc, #600]	; (8001f94 <ProcessUserInput+0x3a8>)
 8001d3a:	4997      	ldr	r1, [pc, #604]	; (8001f98 <ProcessUserInput+0x3ac>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	f001 f9e1 	bl	8003104 <replacestr>
  replacestr(buffer, "kp", "p");
 8001d42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d46:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d4a:	4a94      	ldr	r2, [pc, #592]	; (8001f9c <ProcessUserInput+0x3b0>)
 8001d4c:	4994      	ldr	r1, [pc, #592]	; (8001fa0 <ProcessUserInput+0x3b4>)
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	f001 f9d8 	bl	8003104 <replacestr>
  replacestr(buffer, "kd", "d");
 8001d54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d5c:	4a91      	ldr	r2, [pc, #580]	; (8001fa4 <ProcessUserInput+0x3b8>)
 8001d5e:	4992      	ldr	r1, [pc, #584]	; (8001fa8 <ProcessUserInput+0x3bc>)
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	f001 f9cf 	bl	8003104 <replacestr>
  replacestr(buffer, "ki", "i");
 8001d66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d6a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d6e:	4a8f      	ldr	r2, [pc, #572]	; (8001fac <ProcessUserInput+0x3c0>)
 8001d70:	498f      	ldr	r1, [pc, #572]	; (8001fb0 <ProcessUserInput+0x3c4>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	f001 f9c6 	bl	8003104 <replacestr>
  replacestr(buffer, "li", "l");
 8001d78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d80:	4a8c      	ldr	r2, [pc, #560]	; (8001fb4 <ProcessUserInput+0x3c8>)
 8001d82:	498d      	ldr	r1, [pc, #564]	; (8001fb8 <ProcessUserInput+0x3cc>)
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	f001 f9bd 	bl	8003104 <replacestr>
  replacestr(buffer, "target", "t");
 8001d8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d92:	4a8a      	ldr	r2, [pc, #552]	; (8001fbc <ProcessUserInput+0x3d0>)
 8001d94:	498a      	ldr	r1, [pc, #552]	; (8001fc0 <ProcessUserInput+0x3d4>)
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	f001 f9b4 	bl	8003104 <replacestr>
  replacestr(buffer, "temperature", "t");
 8001d9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001da0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001da4:	4a85      	ldr	r2, [pc, #532]	; (8001fbc <ProcessUserInput+0x3d0>)
 8001da6:	4987      	ldr	r1, [pc, #540]	; (8001fc4 <ProcessUserInput+0x3d8>)
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	f001 f9ab 	bl	8003104 <replacestr>
  replacestr(buffer, "temp", "t");
 8001dae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001db2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001db6:	4a81      	ldr	r2, [pc, #516]	; (8001fbc <ProcessUserInput+0x3d0>)
 8001db8:	4983      	ldr	r1, [pc, #524]	; (8001fc8 <ProcessUserInput+0x3dc>)
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	f001 f9a2 	bl	8003104 <replacestr>
  replacestr(buffer, "frequency", "f");
 8001dc0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dc8:	4a80      	ldr	r2, [pc, #512]	; (8001fcc <ProcessUserInput+0x3e0>)
 8001dca:	4981      	ldr	r1, [pc, #516]	; (8001fd0 <ProcessUserInput+0x3e4>)
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	f001 f999 	bl	8003104 <replacestr>
  replacestr(buffer, "freq", "f");
 8001dd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dd6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dda:	4a7c      	ldr	r2, [pc, #496]	; (8001fcc <ProcessUserInput+0x3e0>)
 8001ddc:	497d      	ldr	r1, [pc, #500]	; (8001fd4 <ProcessUserInput+0x3e8>)
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	f001 f990 	bl	8003104 <replacestr>
  replacestr(buffer, "enable", "n");
 8001de4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001de8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dec:	4a7a      	ldr	r2, [pc, #488]	; (8001fd8 <ProcessUserInput+0x3ec>)
 8001dee:	497b      	ldr	r1, [pc, #492]	; (8001fdc <ProcessUserInput+0x3f0>)
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	f001 f987 	bl	8003104 <replacestr>
  replacestr(buffer, "disable", "f");
 8001df6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dfa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dfe:	4a73      	ldr	r2, [pc, #460]	; (8001fcc <ProcessUserInput+0x3e0>)
 8001e00:	4977      	ldr	r1, [pc, #476]	; (8001fe0 <ProcessUserInput+0x3f4>)
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	f001 f97e 	bl	8003104 <replacestr>
  replacestr(buffer, "save", "s");
 8001e08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e10:	4a74      	ldr	r2, [pc, #464]	; (8001fe4 <ProcessUserInput+0x3f8>)
 8001e12:	4975      	ldr	r1, [pc, #468]	; (8001fe8 <ProcessUserInput+0x3fc>)
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	f001 f975 	bl	8003104 <replacestr>
  replacestr(buffer, "load", "l");
 8001e1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e1e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e22:	4a64      	ldr	r2, [pc, #400]	; (8001fb4 <ProcessUserInput+0x3c8>)
 8001e24:	4971      	ldr	r1, [pc, #452]	; (8001fec <ProcessUserInput+0x400>)
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	f001 f96c 	bl	8003104 <replacestr>
  replacestr(buffer, "history", "h");
 8001e2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e34:	4a6e      	ldr	r2, [pc, #440]	; (8001ff0 <ProcessUserInput+0x404>)
 8001e36:	496f      	ldr	r1, [pc, #444]	; (8001ff4 <ProcessUserInput+0x408>)
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	f001 f963 	bl	8003104 <replacestr>
  replacestr(buffer, "update", "u");
 8001e3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e42:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e46:	4a6c      	ldr	r2, [pc, #432]	; (8001ff8 <ProcessUserInput+0x40c>)
 8001e48:	496c      	ldr	r1, [pc, #432]	; (8001ffc <ProcessUserInput+0x410>)
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	f001 f95a 	bl	8003104 <replacestr>
  replacestr(buffer, "raw", "r");
 8001e50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e58:	4a69      	ldr	r2, [pc, #420]	; (8002000 <ProcessUserInput+0x414>)
 8001e5a:	496a      	ldr	r1, [pc, #424]	; (8002004 <ProcessUserInput+0x418>)
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	f001 f951 	bl	8003104 <replacestr>
  replacestr(buffer, "bounce", "b");
 8001e62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e66:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e6a:	4a67      	ldr	r2, [pc, #412]	; (8002008 <ProcessUserInput+0x41c>)
 8001e6c:	4967      	ldr	r1, [pc, #412]	; (800200c <ProcessUserInput+0x420>)
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	f001 f948 	bl	8003104 <replacestr>
  replacestr(buffer, "wipe", "w");
 8001e74:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e7c:	4a64      	ldr	r2, [pc, #400]	; (8002010 <ProcessUserInput+0x424>)
 8001e7e:	4965      	ldr	r1, [pc, #404]	; (8002014 <ProcessUserInput+0x428>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	f001 f93f 	bl	8003104 <replacestr>
  replacestr(buffer, "voltage", "v");
 8001e86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e8a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e8e:	4a62      	ldr	r2, [pc, #392]	; (8002018 <ProcessUserInput+0x42c>)
 8001e90:	4962      	ldr	r1, [pc, #392]	; (800201c <ProcessUserInput+0x430>)
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	f001 f936 	bl	8003104 <replacestr>


//  printf("New String: %s\n", buffer);

  if ((strcmp((char*) buffer, "?") == 0) || (strcmp((char*) buffer, "help") == 0))
 8001e98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ea0:	495f      	ldr	r1, [pc, #380]	; (8002020 <ProcessUserInput+0x434>)
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	f7fe f9a4 	bl	80001f0 <strcmp>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <ProcessUserInput+0x2da>
 8001eae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001eb2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001eb6:	495b      	ldr	r1, [pc, #364]	; (8002024 <ProcessUserInput+0x438>)
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	f7fe f999 	bl	80001f0 <strcmp>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f040 80e3 	bne.w	800208c <ProcessUserInput+0x4a0>
  {
    USBSendString("\nLFDI TCB Firmware v1.2\n");
 8001ec6:	4858      	ldr	r0, [pc, #352]	; (8002028 <ProcessUserInput+0x43c>)
 8001ec8:	f001 f8b8 	bl	800303c <USBSendString>
    USBSendString("Commands can be upper or lower case. Variables can be set with an equals sign or space or nothing.\n");
 8001ecc:	4857      	ldr	r0, [pc, #348]	; (800202c <ProcessUserInput+0x440>)
 8001ece:	f001 f8b5 	bl	800303c <USBSendString>
    USBSendString("\"channel=1\", \"channel 1\", \"channel1\", \"c1\" are all treated the same.\n");
 8001ed2:	4857      	ldr	r0, [pc, #348]	; (8002030 <ProcessUserInput+0x444>)
 8001ed4:	f001 f8b2 	bl	800303c <USBSendString>
    USBSendString("\n");
 8001ed8:	4856      	ldr	r0, [pc, #344]	; (8002034 <ProcessUserInput+0x448>)
 8001eda:	f001 f8af 	bl	800303c <USBSendString>
//    USBSendString("Controller = n  -- chooses which controller to configure\n");
    USBSendString("Channel = n     -- chooses which channel to configure\n");
 8001ede:	4856      	ldr	r0, [pc, #344]	; (8002038 <ProcessUserInput+0x44c>)
 8001ee0:	f001 f8ac 	bl	800303c <USBSendString>
    USBSendString("Address = nn    -- sets the address of the temperature sensor (00, 01, 10, or 11)\n");
 8001ee4:	4855      	ldr	r0, [pc, #340]	; (800203c <ProcessUserInput+0x450>)
 8001ee6:	f001 f8a9 	bl	800303c <USBSendString>
    USBSendString("kP = n.nn       -- sets the proportional gain\n");
 8001eea:	4855      	ldr	r0, [pc, #340]	; (8002040 <ProcessUserInput+0x454>)
 8001eec:	f001 f8a6 	bl	800303c <USBSendString>
    USBSendString("kD = n.nn       -- sets the derivative gain\n");
 8001ef0:	4854      	ldr	r0, [pc, #336]	; (8002044 <ProcessUserInput+0x458>)
 8001ef2:	f001 f8a3 	bl	800303c <USBSendString>
    USBSendString("kI = n.nn       -- sets the integral gain\n");
 8001ef6:	4854      	ldr	r0, [pc, #336]	; (8002048 <ProcessUserInput+0x45c>)
 8001ef8:	f001 f8a0 	bl	800303c <USBSendString>
    USBSendString("Li = n.nn       -- sets the integral gain limit\n");
 8001efc:	4853      	ldr	r0, [pc, #332]	; (800204c <ProcessUserInput+0x460>)
 8001efe:	f001 f89d 	bl	800303c <USBSendString>
    USBSendString("History = nn    -- sets the number of points used in the integral (1-255)\n");
 8001f02:	4853      	ldr	r0, [pc, #332]	; (8002050 <ProcessUserInput+0x464>)
 8001f04:	f001 f89a 	bl	800303c <USBSendString>
    USBSendString("Target = n      -- sets the target temperature\n");
 8001f08:	4852      	ldr	r0, [pc, #328]	; (8002054 <ProcessUserInput+0x468>)
 8001f0a:	f001 f897 	bl	800303c <USBSendString>
    USBSendString("Temperature = n -- sets the target temperature\n");
 8001f0e:	4852      	ldr	r0, [pc, #328]	; (8002058 <ProcessUserInput+0x46c>)
 8001f10:	f001 f894 	bl	800303c <USBSendString>
    USBSendString("Freq = n        -- sets the PWM frequency (40 = 1 second)\n");
 8001f14:	4851      	ldr	r0, [pc, #324]	; (800205c <ProcessUserInput+0x470>)
 8001f16:	f001 f891 	bl	800303c <USBSendString>
    USBSendString("Enable          -- starts the temperature control loop\n");
 8001f1a:	4851      	ldr	r0, [pc, #324]	; (8002060 <ProcessUserInput+0x474>)
 8001f1c:	f001 f88e 	bl	800303c <USBSendString>
    USBSendString("Disable         -- stops the temperature control loop\n");
 8001f20:	4850      	ldr	r0, [pc, #320]	; (8002064 <ProcessUserInput+0x478>)
 8001f22:	f001 f88b 	bl	800303c <USBSendString>
    USBSendString("Update          -- shows the status of all of the controllers\n");
 8001f26:	4850      	ldr	r0, [pc, #320]	; (8002068 <ProcessUserInput+0x47c>)
 8001f28:	f001 f888 	bl	800303c <USBSendString>
    USBSendString("Raw             -- shows an easily parsable version of Update\n");
 8001f2c:	484f      	ldr	r0, [pc, #316]	; (800206c <ProcessUserInput+0x480>)
 8001f2e:	f001 f885 	bl	800303c <USBSendString>
    USBSendString("Wipe            -- wipes the existing configuration and load new defaults\n");
 8001f32:	484f      	ldr	r0, [pc, #316]	; (8002070 <ProcessUserInput+0x484>)
 8001f34:	f001 f882 	bl	800303c <USBSendString>
    USBSendString("Bounce          -- performs a power-cycle / reboot on the system\n");
 8001f38:	484e      	ldr	r0, [pc, #312]	; (8002074 <ProcessUserInput+0x488>)
 8001f3a:	f001 f87f 	bl	800303c <USBSendString>
    USBSendString("Load            -- reloads the previously saved values (automatic at power-on)\n");
 8001f3e:	484e      	ldr	r0, [pc, #312]	; (8002078 <ProcessUserInput+0x48c>)
 8001f40:	f001 f87c 	bl	800303c <USBSendString>
    USBSendString("Save            -- saves the currently configured values\n");
 8001f44:	484d      	ldr	r0, [pc, #308]	; (800207c <ProcessUserInput+0x490>)
 8001f46:	f001 f879 	bl	800303c <USBSendString>
    USBSendString("Voltage         -- Set the Peak to Peak Voltage to output on DAC Channel 0\n");
 8001f4a:	484d      	ldr	r0, [pc, #308]	; (8002080 <ProcessUserInput+0x494>)
 8001f4c:	f001 f876 	bl	800303c <USBSendString>
    USBSendString("\n");
 8001f50:	4838      	ldr	r0, [pc, #224]	; (8002034 <ProcessUserInput+0x448>)
 8001f52:	f001 f873 	bl	800303c <USBSendString>
    if (UI_Controller == 9)
 8001f56:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <ProcessUserInput+0x498>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b09      	cmp	r3, #9
 8001f5c:	d104      	bne.n	8001f68 <ProcessUserInput+0x37c>
      USBSendString("No controller selected.\n");
 8001f5e:	484a      	ldr	r0, [pc, #296]	; (8002088 <ProcessUserInput+0x49c>)
 8001f60:	f001 f86c 	bl	800303c <USBSendString>
      ShowEffort(&TCB.Controller);
      USBSendString("\n");
      */
      ShowAll(Controller, true);
    }
    return;
 8001f64:	f000 bc53 	b.w	800280e <ProcessUserInput+0xc22>
      ShowAll(Controller, true);
 8001f68:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f70:	2101      	movs	r1, #1
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	f000 fd20 	bl	80029b8 <ShowAll>
    return;
 8001f78:	f000 bc49 	b.w	800280e <ProcessUserInput+0xc22>
 8001f7c:	08013c60 	.word	0x08013c60
 8001f80:	08013c64 	.word	0x08013c64
 8001f84:	08013c68 	.word	0x08013c68
 8001f88:	08013c6c 	.word	0x08013c6c
 8001f8c:	08013c70 	.word	0x08013c70
 8001f90:	08013c78 	.word	0x08013c78
 8001f94:	08013c80 	.word	0x08013c80
 8001f98:	08013c84 	.word	0x08013c84
 8001f9c:	08013c8c 	.word	0x08013c8c
 8001fa0:	08013c90 	.word	0x08013c90
 8001fa4:	08013c94 	.word	0x08013c94
 8001fa8:	08013c98 	.word	0x08013c98
 8001fac:	08013c9c 	.word	0x08013c9c
 8001fb0:	08013ca0 	.word	0x08013ca0
 8001fb4:	08013ca4 	.word	0x08013ca4
 8001fb8:	08013ca8 	.word	0x08013ca8
 8001fbc:	08013cac 	.word	0x08013cac
 8001fc0:	08013cb0 	.word	0x08013cb0
 8001fc4:	08013cb8 	.word	0x08013cb8
 8001fc8:	08013cc4 	.word	0x08013cc4
 8001fcc:	08013ccc 	.word	0x08013ccc
 8001fd0:	08013cd0 	.word	0x08013cd0
 8001fd4:	08013cdc 	.word	0x08013cdc
 8001fd8:	08013ce4 	.word	0x08013ce4
 8001fdc:	08013ce8 	.word	0x08013ce8
 8001fe0:	08013cf0 	.word	0x08013cf0
 8001fe4:	08013cf8 	.word	0x08013cf8
 8001fe8:	08013cfc 	.word	0x08013cfc
 8001fec:	08013d04 	.word	0x08013d04
 8001ff0:	08013d0c 	.word	0x08013d0c
 8001ff4:	08013d10 	.word	0x08013d10
 8001ff8:	08013d18 	.word	0x08013d18
 8001ffc:	08013d1c 	.word	0x08013d1c
 8002000:	08013d24 	.word	0x08013d24
 8002004:	08013d28 	.word	0x08013d28
 8002008:	08013d2c 	.word	0x08013d2c
 800200c:	08013d30 	.word	0x08013d30
 8002010:	08013d38 	.word	0x08013d38
 8002014:	08013d3c 	.word	0x08013d3c
 8002018:	08013d44 	.word	0x08013d44
 800201c:	08013d48 	.word	0x08013d48
 8002020:	08013d50 	.word	0x08013d50
 8002024:	08013d54 	.word	0x08013d54
 8002028:	08013d5c 	.word	0x08013d5c
 800202c:	08013d78 	.word	0x08013d78
 8002030:	08013ddc 	.word	0x08013ddc
 8002034:	08013e24 	.word	0x08013e24
 8002038:	08013e28 	.word	0x08013e28
 800203c:	08013e60 	.word	0x08013e60
 8002040:	08013eb4 	.word	0x08013eb4
 8002044:	08013ee4 	.word	0x08013ee4
 8002048:	08013f14 	.word	0x08013f14
 800204c:	08013f40 	.word	0x08013f40
 8002050:	08013f74 	.word	0x08013f74
 8002054:	08013fc0 	.word	0x08013fc0
 8002058:	08013ff0 	.word	0x08013ff0
 800205c:	08014020 	.word	0x08014020
 8002060:	0801405c 	.word	0x0801405c
 8002064:	08014094 	.word	0x08014094
 8002068:	080140cc 	.word	0x080140cc
 800206c:	0801410c 	.word	0x0801410c
 8002070:	0801414c 	.word	0x0801414c
 8002074:	08014198 	.word	0x08014198
 8002078:	080141dc 	.word	0x080141dc
 800207c:	0801422c 	.word	0x0801422c
 8002080:	08014268 	.word	0x08014268
 8002084:	2000000c 	.word	0x2000000c
 8002088:	080142b4 	.word	0x080142b4
  }

  //Print the Status all the Controllers
  if ((strcmp((char*) buffer, "u") == 0) || (strcmp((char*) buffer, "/") == 0))
 800208c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002090:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002094:	49c1      	ldr	r1, [pc, #772]	; (800239c <ProcessUserInput+0x7b0>)
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	f7fe f8aa 	bl	80001f0 <strcmp>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <ProcessUserInput+0x4cc>
 80020a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020aa:	49bd      	ldr	r1, [pc, #756]	; (80023a0 <ProcessUserInput+0x7b4>)
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	f7fe f89f 	bl	80001f0 <strcmp>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d108      	bne.n	80020ca <ProcessUserInput+0x4de>
  {
    ShowAll(Controller, true);
 80020b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020c0:	2101      	movs	r1, #1
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	f000 fc78 	bl	80029b8 <ShowAll>
    return;
 80020c8:	e3a1      	b.n	800280e <ProcessUserInput+0xc22>
  }
  //Print the Status all the Controllers in non readable format
  if (strcmp((char*) buffer, "r") == 0)
 80020ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020d2:	49b4      	ldr	r1, [pc, #720]	; (80023a4 <ProcessUserInput+0x7b8>)
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	f7fe f88b 	bl	80001f0 <strcmp>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d108      	bne.n	80020f2 <ProcessUserInput+0x506>
  {
    ShowAll(Controller, false);
 80020e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020e8:	2100      	movs	r1, #0
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	f000 fc64 	bl	80029b8 <ShowAll>
    return;
 80020f0:	e38d      	b.n	800280e <ProcessUserInput+0xc22>
  }
  //Save the Configuration of a controller
  if (strcmp((char*) buffer, "s") == 0)
 80020f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020f6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020fa:	49ab      	ldr	r1, [pc, #684]	; (80023a8 <ProcessUserInput+0x7bc>)
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	f7fe f877 	bl	80001f0 <strcmp>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <ProcessUserInput+0x524>
  {

    USBSendString("Cannot Save, No EEPROM.\n");
 8002108:	48a8      	ldr	r0, [pc, #672]	; (80023ac <ProcessUserInput+0x7c0>)
 800210a:	f000 ff97 	bl	800303c <USBSendString>
    return;
 800210e:	e37e      	b.n	800280e <ProcessUserInput+0xc22>
  }

  if (strcmp((char*) buffer, "l") == 0)
 8002110:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002114:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002118:	49a5      	ldr	r1, [pc, #660]	; (80023b0 <ProcessUserInput+0x7c4>)
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	f7fe f868 	bl	80001f0 <strcmp>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <ProcessUserInput+0x542>
  {
    USBSendString("Cannot load Configuration, No EEPROM.\n");
 8002126:	48a3      	ldr	r0, [pc, #652]	; (80023b4 <ProcessUserInput+0x7c8>)
 8002128:	f000 ff88 	bl	800303c <USBSendString>
    return;
 800212c:	e36f      	b.n	800280e <ProcessUserInput+0xc22>
  }

  if (strcmp((char*) buffer, "b") == 0)
 800212e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002132:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002136:	49a0      	ldr	r1, [pc, #640]	; (80023b8 <ProcessUserInput+0x7cc>)
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	f7fe f859 	bl	80001f0 <strcmp>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <ProcessUserInput+0x55c>
  {
    NVIC_SystemReset();
 8002144:	f7ff fd3c 	bl	8001bc0 <__NVIC_SystemReset>
  }

  if (strcmp((char*) buffer, "w") == 0)
 8002148:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800214c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002150:	499a      	ldr	r1, [pc, #616]	; (80023bc <ProcessUserInput+0x7d0>)
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	f7fe f84c 	bl	80001f0 <strcmp>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <ProcessUserInput+0x588>
  {
    Controller_WipeConfig(Controller);
 800215e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002162:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	f000 ff0a 	bl	8002f80 <Controller_WipeConfig>
    USBSendString("Configuration wiped.\n");
 800216c:	4894      	ldr	r0, [pc, #592]	; (80023c0 <ProcessUserInput+0x7d4>)
 800216e:	f000 ff65 	bl	800303c <USBSendString>
    return;
 8002172:	e34c      	b.n	800280e <ProcessUserInput+0xc22>
  }

  if ((strcmp((char*) buffer, "1") == 0) || (strcmp((char*) buffer, "c1") == 0))
 8002174:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002178:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800217c:	4991      	ldr	r1, [pc, #580]	; (80023c4 <ProcessUserInput+0x7d8>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	f7fe f836 	bl	80001f0 <strcmp>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <ProcessUserInput+0x5b4>
 800218a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800218e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002192:	498d      	ldr	r1, [pc, #564]	; (80023c8 <ProcessUserInput+0x7dc>)
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	f7fe f82b 	bl	80001f0 <strcmp>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <ProcessUserInput+0x5ca>
  {
    UI_Controller = 0;
 80021a0:	4b8a      	ldr	r3, [pc, #552]	; (80023cc <ProcessUserInput+0x7e0>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 80021a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	f000 fb38 	bl	8002824 <ShowControllerConfig>
    return;
 80021b4:	e32b      	b.n	800280e <ProcessUserInput+0xc22>
  }

  if ((strcmp((char*) buffer, "2") == 0) || (strcmp((char*) buffer, "c2") == 0))
 80021b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021be:	4984      	ldr	r1, [pc, #528]	; (80023d0 <ProcessUserInput+0x7e4>)
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	f7fe f815 	bl	80001f0 <strcmp>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <ProcessUserInput+0x5f6>
 80021cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021d4:	497f      	ldr	r1, [pc, #508]	; (80023d4 <ProcessUserInput+0x7e8>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	f7fe f80a 	bl	80001f0 <strcmp>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10a      	bne.n	80021f8 <ProcessUserInput+0x60c>
  {
    UI_Controller = 1;
 80021e2:	4b7a      	ldr	r3, [pc, #488]	; (80023cc <ProcessUserInput+0x7e0>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 80021e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	f000 fb17 	bl	8002824 <ShowControllerConfig>
    return;
 80021f6:	e30a      	b.n	800280e <ProcessUserInput+0xc22>
  }

  if ((strcmp((char*) buffer, "3") == 0) || (strcmp((char*) buffer, "c3") == 0))
 80021f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002200:	4975      	ldr	r1, [pc, #468]	; (80023d8 <ProcessUserInput+0x7ec>)
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	f7fd fff4 	bl	80001f0 <strcmp>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <ProcessUserInput+0x638>
 800220e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002212:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002216:	4971      	ldr	r1, [pc, #452]	; (80023dc <ProcessUserInput+0x7f0>)
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	f7fd ffe9 	bl	80001f0 <strcmp>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <ProcessUserInput+0x64e>
  {
    UI_Controller = 2;
 8002224:	4b69      	ldr	r3, [pc, #420]	; (80023cc <ProcessUserInput+0x7e0>)
 8002226:	2202      	movs	r2, #2
 8002228:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 800222a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800222e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	f000 faf6 	bl	8002824 <ShowControllerConfig>
    return;
 8002238:	e2e9      	b.n	800280e <ProcessUserInput+0xc22>
  }

  if ((strcmp((char*) buffer, "4") == 0) || (strcmp((char*) buffer, "c4") == 0))
 800223a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800223e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002242:	4967      	ldr	r1, [pc, #412]	; (80023e0 <ProcessUserInput+0x7f4>)
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	f7fd ffd3 	bl	80001f0 <strcmp>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <ProcessUserInput+0x67a>
 8002250:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002254:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002258:	4962      	ldr	r1, [pc, #392]	; (80023e4 <ProcessUserInput+0x7f8>)
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	f7fd ffc8 	bl	80001f0 <strcmp>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10a      	bne.n	800227c <ProcessUserInput+0x690>
  {
    UI_Controller = 3;
 8002266:	4b59      	ldr	r3, [pc, #356]	; (80023cc <ProcessUserInput+0x7e0>)
 8002268:	2203      	movs	r2, #3
 800226a:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 800226c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002270:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	f000 fad5 	bl	8002824 <ShowControllerConfig>
    return;
 800227a:	e2c8      	b.n	800280e <ProcessUserInput+0xc22>
  }

  if (UI_Controller == 9)
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <ProcessUserInput+0x7e0>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b09      	cmp	r3, #9
 8002282:	d103      	bne.n	800228c <ProcessUserInput+0x6a0>
  {
    USBSendString("No controller selected.\n");
 8002284:	4858      	ldr	r0, [pc, #352]	; (80023e8 <ProcessUserInput+0x7fc>)
 8002286:	f000 fed9 	bl	800303c <USBSendString>
    return;
 800228a:	e2c0      	b.n	800280e <ProcessUserInput+0xc22>
  }


  if (strcmp((char*) buffer, "e") == 0)
 800228c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002290:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002294:	4955      	ldr	r1, [pc, #340]	; (80023ec <ProcessUserInput+0x800>)
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	f7fd ffaa 	bl	80001f0 <strcmp>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10b      	bne.n	80022ba <ProcessUserInput+0x6ce>
  {
    USBSendString("Controller enabled.\n");
 80022a2:	4853      	ldr	r0, [pc, #332]	; (80023f0 <ProcessUserInput+0x804>)
 80022a4:	f000 feca 	bl	800303c <USBSendString>
    Controller->PID.Config.Enabled = true;
 80022a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 80022b8:	e2a9      	b.n	800280e <ProcessUserInput+0xc22>
  }

  if (strcmp((char*) buffer, "d") == 0)
 80022ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022c2:	494c      	ldr	r1, [pc, #304]	; (80023f4 <ProcessUserInput+0x808>)
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	f7fd ff93 	bl	80001f0 <strcmp>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <ProcessUserInput+0x6fc>
  {
    USBSendString("Controller disabled.\n");
 80022d0:	4849      	ldr	r0, [pc, #292]	; (80023f8 <ProcessUserInput+0x80c>)
 80022d2:	f000 feb3 	bl	800303c <USBSendString>
    Controller->PID.Config.Enabled = false;
 80022d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 80022e6:	e292      	b.n	800280e <ProcessUserInput+0xc22>
  }

  if (sscanf((char*) buffer, "%c%f", &c, &f) == 2)
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	f107 0217 	add.w	r2, r7, #23
 80022f0:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80022f4:	f5a1 7088 	sub.w	r0, r1, #272	; 0x110
 80022f8:	4940      	ldr	r1, [pc, #256]	; (80023fc <ProcessUserInput+0x810>)
 80022fa:	6800      	ldr	r0, [r0, #0]
 80022fc:	f00d fa84 	bl	800f808 <siscanf>
 8002300:	4603      	mov	r3, r0
 8002302:	2b02      	cmp	r3, #2
 8002304:	f040 827c 	bne.w	8002800 <ProcessUserInput+0xc14>
  {
    u = (uint8_t) f;
 8002308:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800230c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002318:	edc7 7a00 	vstr	s15, [r7]
 800231c:	783b      	ldrb	r3, [r7, #0]
 800231e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    switch (c)
 8002322:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002326:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	3b61      	subs	r3, #97	; 0x61
 800232e:	2b15      	cmp	r3, #21
 8002330:	f200 8268 	bhi.w	8002804 <ProcessUserInput+0xc18>
 8002334:	a201      	add	r2, pc, #4	; (adr r2, 800233c <ProcessUserInput+0x750>)
 8002336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233a:	bf00      	nop
 800233c:	08002405 	.word	0x08002405
 8002340:	08002805 	.word	0x08002805
 8002344:	08002395 	.word	0x08002395
 8002348:	08002575 	.word	0x08002575
 800234c:	08002805 	.word	0x08002805
 8002350:	080025dd 	.word	0x080025dd
 8002354:	08002805 	.word	0x08002805
 8002358:	080026f5 	.word	0x080026f5
 800235c:	0800250d 	.word	0x0800250d
 8002360:	08002805 	.word	0x08002805
 8002364:	08002805 	.word	0x08002805
 8002368:	0800268d 	.word	0x0800268d
 800236c:	08002805 	.word	0x08002805
 8002370:	08002805 	.word	0x08002805
 8002374:	08002805 	.word	0x08002805
 8002378:	080024a5 	.word	0x080024a5
 800237c:	08002805 	.word	0x08002805
 8002380:	08002805 	.word	0x08002805
 8002384:	08002805 	.word	0x08002805
 8002388:	0800276d 	.word	0x0800276d
 800238c:	08002805 	.word	0x08002805
 8002390:	080027b7 	.word	0x080027b7
    {
      case 'c':
        // we shouldn't get here if a valid number was used
        USBSendString("Invalid controller number.\n");
 8002394:	481a      	ldr	r0, [pc, #104]	; (8002400 <ProcessUserInput+0x814>)
 8002396:	f000 fe51 	bl	800303c <USBSendString>
        return;
 800239a:	e238      	b.n	800280e <ProcessUserInput+0xc22>
 800239c:	08013d18 	.word	0x08013d18
 80023a0:	080142d0 	.word	0x080142d0
 80023a4:	08013d24 	.word	0x08013d24
 80023a8:	08013cf8 	.word	0x08013cf8
 80023ac:	080142d4 	.word	0x080142d4
 80023b0:	08013ca4 	.word	0x08013ca4
 80023b4:	080142f0 	.word	0x080142f0
 80023b8:	08013d2c 	.word	0x08013d2c
 80023bc:	08013d38 	.word	0x08013d38
 80023c0:	08014318 	.word	0x08014318
 80023c4:	08014330 	.word	0x08014330
 80023c8:	08014334 	.word	0x08014334
 80023cc:	2000000c 	.word	0x2000000c
 80023d0:	08014338 	.word	0x08014338
 80023d4:	0801433c 	.word	0x0801433c
 80023d8:	08014340 	.word	0x08014340
 80023dc:	08014344 	.word	0x08014344
 80023e0:	08014348 	.word	0x08014348
 80023e4:	0801434c 	.word	0x0801434c
 80023e8:	080142b4 	.word	0x080142b4
 80023ec:	08014350 	.word	0x08014350
 80023f0:	08014354 	.word	0x08014354
 80023f4:	08013c94 	.word	0x08013c94
 80023f8:	0801436c 	.word	0x0801436c
 80023fc:	08014384 	.word	0x08014384
 8002400:	0801438c 	.word	0x0801438c
        break;
      case 'a':
        switch (u)
 8002404:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002408:	2b0b      	cmp	r3, #11
 800240a:	d847      	bhi.n	800249c <ProcessUserInput+0x8b0>
 800240c:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <ProcessUserInput+0x828>)
 800240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002412:	bf00      	nop
 8002414:	08002445 	.word	0x08002445
 8002418:	08002471 	.word	0x08002471
 800241c:	0800249d 	.word	0x0800249d
 8002420:	0800249d 	.word	0x0800249d
 8002424:	0800249d 	.word	0x0800249d
 8002428:	0800249d 	.word	0x0800249d
 800242c:	0800249d 	.word	0x0800249d
 8002430:	0800249d 	.word	0x0800249d
 8002434:	0800249d 	.word	0x0800249d
 8002438:	0800249d 	.word	0x0800249d
 800243c:	0800245b 	.word	0x0800245b
 8002440:	08002487 	.word	0x08002487
        {
          case 0:
            USBSendString("Address set to 0b 10 01 00 0x.\n");
 8002444:	48bb      	ldr	r0, [pc, #748]	; (8002734 <ProcessUserInput+0xb48>)
 8002446:	f000 fdf9 	bl	800303c <USBSendString>
            Controller->Sensor.Address = 0b1001000;
 800244a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800244e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2248      	movs	r2, #72	; 0x48
 8002456:	721a      	strb	r2, [r3, #8]
            return;
 8002458:	e1d9      	b.n	800280e <ProcessUserInput+0xc22>
            break;
          case 10:
            USBSendString("Address set to 0b 10 01 01 0x.\n");
 800245a:	48b7      	ldr	r0, [pc, #732]	; (8002738 <ProcessUserInput+0xb4c>)
 800245c:	f000 fdee 	bl	800303c <USBSendString>
            Controller->Sensor.Address = 0b1001010;
 8002460:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002464:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	224a      	movs	r2, #74	; 0x4a
 800246c:	721a      	strb	r2, [r3, #8]
            return;
 800246e:	e1ce      	b.n	800280e <ProcessUserInput+0xc22>
            break;
          case 1:
            USBSendString("Address set to 0b 10 01 00 1x.\n");
 8002470:	48b2      	ldr	r0, [pc, #712]	; (800273c <ProcessUserInput+0xb50>)
 8002472:	f000 fde3 	bl	800303c <USBSendString>
            Controller->Sensor.Address = 0b1001001;
 8002476:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800247a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2249      	movs	r2, #73	; 0x49
 8002482:	721a      	strb	r2, [r3, #8]
            return;
 8002484:	e1c3      	b.n	800280e <ProcessUserInput+0xc22>
            break;
          case 11:
            USBSendString("Address set to 0b 10 01 01 1x.\n");
 8002486:	48ae      	ldr	r0, [pc, #696]	; (8002740 <ProcessUserInput+0xb54>)
 8002488:	f000 fdd8 	bl	800303c <USBSendString>
            Controller->Sensor.Address = 0b1001011;
 800248c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002490:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	224b      	movs	r2, #75	; 0x4b
 8002498:	721a      	strb	r2, [r3, #8]
            return;
 800249a:	e1b8      	b.n	800280e <ProcessUserInput+0xc22>
            break;
          default:
            USBSendString("Invalid Address.\n");
 800249c:	48a9      	ldr	r0, [pc, #676]	; (8002744 <ProcessUserInput+0xb58>)
 800249e:	f000 fdcd 	bl	800303c <USBSendString>
            return;
 80024a2:	e1b4      	b.n	800280e <ProcessUserInput+0xc22>
        Controller->Sensor.Configured = false;
        Controller->Sensor.State = 0;
        Controller->PID.IntegratorCount = 0;
        break;
      case 'p':
        if (f < 0)
 80024a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b8:	d503      	bpl.n	80024c2 <ProcessUserInput+0x8d6>
          USBSendString("Invalid value.");
 80024ba:	48a3      	ldr	r0, [pc, #652]	; (8002748 <ProcessUserInput+0xb5c>)
 80024bc:	f000 fdbe 	bl	800303c <USBSendString>
        {
          snprintf(output, 200, "kp set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Kp = f;
        }
        return;
 80024c0:	e1a5      	b.n	800280e <ProcessUserInput+0xc22>
          snprintf(output, 200, "kp set to %f.\n", f);
 80024c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f85b 	bl	8000588 <__aeabi_f2d>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	f107 0018 	add.w	r0, r7, #24
 80024da:	e9cd 2300 	strd	r2, r3, [sp]
 80024de:	4a9b      	ldr	r2, [pc, #620]	; (800274c <ProcessUserInput+0xb60>)
 80024e0:	21c8      	movs	r1, #200	; 0xc8
 80024e2:	f00d f93d 	bl	800f760 <sniprintf>
          USBSendString(output);
 80024e6:	f107 0318 	add.w	r3, r7, #24
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fda6 	bl	800303c <USBSendString>
          Controller->PID.Config.Kp = f;
 80024f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002508:	601a      	str	r2, [r3, #0]
        return;
 800250a:	e180      	b.n	800280e <ProcessUserInput+0xc22>
        break;

      case 'i':
        if (f < 0)
 800250c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002514:	edd3 7a00 	vldr	s15, [r3]
 8002518:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	d503      	bpl.n	800252a <ProcessUserInput+0x93e>
          USBSendString("Invalid value.");
 8002522:	4889      	ldr	r0, [pc, #548]	; (8002748 <ProcessUserInput+0xb5c>)
 8002524:	f000 fd8a 	bl	800303c <USBSendString>
        {
          snprintf(output, 200, "ki set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Ki = f;
        }
        return;
 8002528:	e171      	b.n	800280e <ProcessUserInput+0xc22>
          snprintf(output, 200, "ki set to %f.\n", f);
 800252a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800252e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe f827 	bl	8000588 <__aeabi_f2d>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	f107 0018 	add.w	r0, r7, #24
 8002542:	e9cd 2300 	strd	r2, r3, [sp]
 8002546:	4a82      	ldr	r2, [pc, #520]	; (8002750 <ProcessUserInput+0xb64>)
 8002548:	21c8      	movs	r1, #200	; 0xc8
 800254a:	f00d f909 	bl	800f760 <sniprintf>
          USBSendString(output);
 800254e:	f107 0318 	add.w	r3, r7, #24
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fd72 	bl	800303c <USBSendString>
          Controller->PID.Config.Ki = f;
 8002558:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800255c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002566:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002570:	601a      	str	r2, [r3, #0]
        return;
 8002572:	e14c      	b.n	800280e <ProcessUserInput+0xc22>
        break;

      case 'd':
        if (f < 0)
 8002574:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800257c:	edd3 7a00 	vldr	s15, [r3]
 8002580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002588:	d503      	bpl.n	8002592 <ProcessUserInput+0x9a6>
          USBSendString("Invalid value.");
 800258a:	486f      	ldr	r0, [pc, #444]	; (8002748 <ProcessUserInput+0xb5c>)
 800258c:	f000 fd56 	bl	800303c <USBSendString>
        {
          snprintf(output, 200, "kd set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Kd = f;
        }
        return;
 8002590:	e13d      	b.n	800280e <ProcessUserInput+0xc22>
          snprintf(output, 200, "kd set to %f.\n", f);
 8002592:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd fff3 	bl	8000588 <__aeabi_f2d>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	f107 0018 	add.w	r0, r7, #24
 80025aa:	e9cd 2300 	strd	r2, r3, [sp]
 80025ae:	4a69      	ldr	r2, [pc, #420]	; (8002754 <ProcessUserInput+0xb68>)
 80025b0:	21c8      	movs	r1, #200	; 0xc8
 80025b2:	f00d f8d5 	bl	800f760 <sniprintf>
          USBSendString(output);
 80025b6:	f107 0318 	add.w	r3, r7, #24
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fd3e 	bl	800303c <USBSendString>
          Controller->PID.Config.Kd = f;
 80025c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80025d8:	601a      	str	r2, [r3, #0]
        return;
 80025da:	e118      	b.n	800280e <ProcessUserInput+0xc22>
        break;

      case 'f':
        if ((f < 0) || (f > 600))
 80025dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f0:	d40c      	bmi.n	800260c <ProcessUserInput+0xa20>
 80025f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002758 <ProcessUserInput+0xb6c>
 8002602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260a:	dd03      	ble.n	8002614 <ProcessUserInput+0xa28>
          USBSendString("Invalid value.");
 800260c:	484e      	ldr	r0, [pc, #312]	; (8002748 <ProcessUserInput+0xb5c>)
 800260e:	f000 fd15 	bl	800303c <USBSendString>
        {
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
          USBSendString(output);
          Controller->PID.Config.Frequency = f;
        }
        return;
 8002612:	e0fc      	b.n	800280e <ProcessUserInput+0xc22>
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
 8002614:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd ffb2 	bl	8000588 <__aeabi_f2d>
 8002624:	4604      	mov	r4, r0
 8002626:	460d      	mov	r5, r1
 8002628:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800262c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800275c <ProcessUserInput+0xb70>
 8002638:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800263c:	ee16 0a90 	vmov	r0, s13
 8002640:	f7fd ffa2 	bl	8000588 <__aeabi_f2d>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	f107 0018 	add.w	r0, r7, #24
 800264c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002650:	e9cd 4500 	strd	r4, r5, [sp]
 8002654:	4a42      	ldr	r2, [pc, #264]	; (8002760 <ProcessUserInput+0xb74>)
 8002656:	21c8      	movs	r1, #200	; 0xc8
 8002658:	f00d f882 	bl	800f760 <sniprintf>
          USBSendString(output);
 800265c:	f107 0318 	add.w	r3, r7, #24
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fceb 	bl	800303c <USBSendString>
          Controller->PID.Config.Frequency = f;
 8002666:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800266a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800266e:	edd3 7a00 	vldr	s15, [r3]
 8002672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002676:	ee17 3a90 	vmov	r3, s15
 800267a:	b29a      	uxth	r2, r3
 800267c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002680:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8a3 265e 	strh.w	r2, [r3, #1630]	; 0x65e
        return;
 800268a:	e0c0      	b.n	800280e <ProcessUserInput+0xc22>
        break;


      case 'l':
        if (f < 0)
 800268c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	d503      	bpl.n	80026aa <ProcessUserInput+0xabe>
          USBSendString("Invalid value.");
 80026a2:	4829      	ldr	r0, [pc, #164]	; (8002748 <ProcessUserInput+0xb5c>)
 80026a4:	f000 fcca 	bl	800303c <USBSendString>
        {
          snprintf(output, 200, "Li set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Li = f;
        }
        return;
 80026a8:	e0b1      	b.n	800280e <ProcessUserInput+0xc22>
          snprintf(output, 200, "Li set to %f.\n", f);
 80026aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff67 	bl	8000588 <__aeabi_f2d>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	f107 0018 	add.w	r0, r7, #24
 80026c2:	e9cd 2300 	strd	r2, r3, [sp]
 80026c6:	4a27      	ldr	r2, [pc, #156]	; (8002764 <ProcessUserInput+0xb78>)
 80026c8:	21c8      	movs	r1, #200	; 0xc8
 80026ca:	f00d f849 	bl	800f760 <sniprintf>
          USBSendString(output);
 80026ce:	f107 0318 	add.w	r3, r7, #24
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fcb2 	bl	800303c <USBSendString>
          Controller->PID.Config.Li = f;
 80026d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 80026f0:	601a      	str	r2, [r3, #0]
        return;
 80026f2:	e08c      	b.n	800280e <ProcessUserInput+0xc22>
        break;
      case 'h':
        if (u == 0)
 80026f4:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <ProcessUserInput+0xb18>
          USBSendString("Invalid value.");
 80026fc:	4812      	ldr	r0, [pc, #72]	; (8002748 <ProcessUserInput+0xb5c>)
 80026fe:	f000 fc9d 	bl	800303c <USBSendString>
        {
          snprintf(output, 200, "History set to %u.\n", u);
          USBSendString(output);
          Controller->PID.Config.History = u;
        }
        return;
 8002702:	e084      	b.n	800280e <ProcessUserInput+0xc22>
          snprintf(output, 200, "History set to %u.\n", u);
 8002704:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002708:	f107 0018 	add.w	r0, r7, #24
 800270c:	4a16      	ldr	r2, [pc, #88]	; (8002768 <ProcessUserInput+0xb7c>)
 800270e:	21c8      	movs	r1, #200	; 0xc8
 8002710:	f00d f826 	bl	800f760 <sniprintf>
          USBSendString(output);
 8002714:	f107 0318 	add.w	r3, r7, #24
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fc8f 	bl	800303c <USBSendString>
          Controller->PID.Config.History = u;
 800271e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002722:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 800272c:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
        return;
 8002730:	e06d      	b.n	800280e <ProcessUserInput+0xc22>
 8002732:	bf00      	nop
 8002734:	080143a8 	.word	0x080143a8
 8002738:	080143c8 	.word	0x080143c8
 800273c:	080143e8 	.word	0x080143e8
 8002740:	08014408 	.word	0x08014408
 8002744:	08014428 	.word	0x08014428
 8002748:	0801443c 	.word	0x0801443c
 800274c:	0801444c 	.word	0x0801444c
 8002750:	0801445c 	.word	0x0801445c
 8002754:	0801446c 	.word	0x0801446c
 8002758:	44160000 	.word	0x44160000
 800275c:	42200000 	.word	0x42200000
 8002760:	0801447c 	.word	0x0801447c
 8002764:	080144a0 	.word	0x080144a0
 8002768:	080144b0 	.word	0x080144b0
        break;

      case 't':
        snprintf(output, 200, "Target temperature set to %f.\n", f);
 800276c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd ff06 	bl	8000588 <__aeabi_f2d>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	f107 0018 	add.w	r0, r7, #24
 8002784:	e9cd 2300 	strd	r2, r3, [sp]
 8002788:	4a23      	ldr	r2, [pc, #140]	; (8002818 <ProcessUserInput+0xc2c>)
 800278a:	21c8      	movs	r1, #200	; 0xc8
 800278c:	f00c ffe8 	bl	800f760 <sniprintf>
        USBSendString(output);
 8002790:	f107 0318 	add.w	r3, r7, #24
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fc51 	bl	800303c <USBSendString>
        Controller->PID.Config.TargetP = f;
 800279a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800279e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 80027b2:	601a      	str	r2, [r3, #0]
        return;
 80027b4:	e02b      	b.n	800280e <ProcessUserInput+0xc22>
        break;

      case 'v':
    	  snprintf(output, 200, "Voltage of DAC Channel 0 set to %f.\n", f);
 80027b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fee1 	bl	8000588 <__aeabi_f2d>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	f107 0018 	add.w	r0, r7, #24
 80027ce:	e9cd 2300 	strd	r2, r3, [sp]
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <ProcessUserInput+0xc30>)
 80027d4:	21c8      	movs	r1, #200	; 0xc8
 80027d6:	f00c ffc3 	bl	800f760 <sniprintf>
    	  USBSendString(output);
 80027da:	f107 0318 	add.w	r3, r7, #24
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fc2c 	bl	800303c <USBSendString>
    	  //Need to implement Voltage for the Dac Channels
    	  Set_Voltage_Peak_to_Peak(&TCB->DAC8718, 0, &f);
 80027e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80027f2:	f107 0210 	add.w	r2, r7, #16
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe fdeb 	bl	80013d4 <Set_Voltage_Peak_to_Peak>
    	  return;
 80027fe:	e006      	b.n	800280e <ProcessUserInput+0xc22>
    	  break;

      default:
        break;
    }
  }
 8002800:	bf00      	nop
 8002802:	e000      	b.n	8002806 <ProcessUserInput+0xc1a>
        break;
 8002804:	bf00      	nop
  USBSendString("Unknown command.\n");
 8002806:	4806      	ldr	r0, [pc, #24]	; (8002820 <ProcessUserInput+0xc34>)
 8002808:	f000 fc18 	bl	800303c <USBSendString>
  return;
 800280c:	bf00      	nop
}
 800280e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002812:	46bd      	mov	sp, r7
 8002814:	bdb0      	pop	{r4, r5, r7, pc}
 8002816:	bf00      	nop
 8002818:	080144c4 	.word	0x080144c4
 800281c:	080144e4 	.word	0x080144e4
 8002820:	0801450c 	.word	0x0801450c

08002824 <ShowControllerConfig>:

//Show the Configuration of a Controller
void ShowControllerConfig(struct sController* Controller)
{
 8002824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002828:	b0d1      	sub	sp, #324	; 0x144
 800282a:	af0c      	add	r7, sp, #48	; 0x30
 800282c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002830:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002834:	6018      	str	r0, [r3, #0]
  char s1[12];
  char buffer[250];
  FormatTemperature(s1, Controller->PID.Config.TargetP);
 8002836:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800283a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fe9e 	bl	8000588 <__aeabi_f2d>
 800284c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002850:	ec41 0b10 	vmov	d0, r0, r1
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fafd 	bl	8002e54 <FormatTemperature>
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 800285a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800285e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	603b      	str	r3, [r7, #0]
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002868:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800286c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002876:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fe85 	bl	8000588 <__aeabi_f2d>
 800287e:	4604      	mov	r4, r0
 8002880:	460d      	mov	r5, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002882:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002886:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002890:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe78 	bl	8000588 <__aeabi_f2d>
 8002898:	4680      	mov	r8, r0
 800289a:	4689      	mov	r9, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 800289c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 80028aa:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe6b 	bl	8000588 <__aeabi_f2d>
 80028b2:	4682      	mov	sl, r0
 80028b4:	468b      	mov	fp, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80028b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 80028c4:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fe5e 	bl	8000588 <__aeabi_f2d>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80028d0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80028d4:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80028d8:	6809      	ldr	r1, [r1, #0]
 80028da:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80028de:	460e      	mov	r6, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80028e0:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80028e4:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80028e8:	6809      	ldr	r1, [r1, #0]
 80028ea:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80028ee:	f107 0008 	add.w	r0, r7, #8
 80028f2:	910a      	str	r1, [sp, #40]	; 0x28
 80028f4:	9609      	str	r6, [sp, #36]	; 0x24
 80028f6:	f507 7182 	add.w	r1, r7, #260	; 0x104
 80028fa:	9108      	str	r1, [sp, #32]
 80028fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002900:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002904:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002908:	e9cd 4500 	strd	r4, r5, [sp]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	4a23      	ldr	r2, [pc, #140]	; (800299c <ShowControllerConfig+0x178>)
 8002910:	21c8      	movs	r1, #200	; 0xc8
 8002912:	f00c ff25 	bl	800f760 <sniprintf>
  USBSendString(buffer);
 8002916:	f107 0308 	add.w	r3, r7, #8
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fb8e 	bl	800303c <USBSendString>
  switch (Controller->Sensor.Address & 0x03)
 8002920:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002924:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	7a1b      	ldrb	r3, [r3, #8]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b03      	cmp	r3, #3
 8002932:	d81b      	bhi.n	800296c <ShowControllerConfig+0x148>
 8002934:	a201      	add	r2, pc, #4	; (adr r2, 800293c <ShowControllerConfig+0x118>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	0800294d 	.word	0x0800294d
 8002940:	08002955 	.word	0x08002955
 8002944:	0800295d 	.word	0x0800295d
 8002948:	08002965 	.word	0x08002965
  {
    case 0:
      USBSendString("00");
 800294c:	4814      	ldr	r0, [pc, #80]	; (80029a0 <ShowControllerConfig+0x17c>)
 800294e:	f000 fb75 	bl	800303c <USBSendString>
      break;
 8002952:	e00c      	b.n	800296e <ShowControllerConfig+0x14a>
    case 1:
      USBSendString("01");
 8002954:	4813      	ldr	r0, [pc, #76]	; (80029a4 <ShowControllerConfig+0x180>)
 8002956:	f000 fb71 	bl	800303c <USBSendString>
      break;
 800295a:	e008      	b.n	800296e <ShowControllerConfig+0x14a>
    case 2:
      USBSendString("10");
 800295c:	4812      	ldr	r0, [pc, #72]	; (80029a8 <ShowControllerConfig+0x184>)
 800295e:	f000 fb6d 	bl	800303c <USBSendString>
      break;
 8002962:	e004      	b.n	800296e <ShowControllerConfig+0x14a>
    case 3:
      USBSendString("11");
 8002964:	4811      	ldr	r0, [pc, #68]	; (80029ac <ShowControllerConfig+0x188>)
 8002966:	f000 fb69 	bl	800303c <USBSendString>
      break;
 800296a:	e000      	b.n	800296e <ShowControllerConfig+0x14a>
    default:
      break;
 800296c:	bf00      	nop
  }
  if (Controller->PID.Config.Enabled)
 800296e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002972:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <ShowControllerConfig+0x164>
    USBSendString("  ENABLED\n");
 8002980:	480b      	ldr	r0, [pc, #44]	; (80029b0 <ShowControllerConfig+0x18c>)
 8002982:	f000 fb5b 	bl	800303c <USBSendString>
  else
    USBSendString("  DISABLED\n");
}
 8002986:	e002      	b.n	800298e <ShowControllerConfig+0x16a>
    USBSendString("  DISABLED\n");
 8002988:	480a      	ldr	r0, [pc, #40]	; (80029b4 <ShowControllerConfig+0x190>)
 800298a:	f000 fb57 	bl	800303c <USBSendString>
}
 800298e:	bf00      	nop
 8002990:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002994:	46bd      	mov	sp, r7
 8002996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800299a:	bf00      	nop
 800299c:	08014520 	.word	0x08014520
 80029a0:	08014584 	.word	0x08014584
 80029a4:	08014588 	.word	0x08014588
 80029a8:	0801458c 	.word	0x0801458c
 80029ac:	08014590 	.word	0x08014590
 80029b0:	08014594 	.word	0x08014594
 80029b4:	080145a0 	.word	0x080145a0

080029b8 <ShowAll>:
//Show the Status of a Controller
//@brief Show the Status of a Controller
//@param Controller The Controller to show
//@param readable If true, show the status in human readable form
void ShowAll(struct sController* Controller, bool readable)
{
 80029b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029bc:	b0b7      	sub	sp, #220	; 0xdc
 80029be:	af16      	add	r7, sp, #88	; 0x58
 80029c0:	6278      	str	r0, [r7, #36]	; 0x24
 80029c2:	460b      	mov	r3, r1
 80029c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint32_t ADCVal = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint8_t i;
    char target[12];
    FormatTemperature(target, Controller->PID.Config.TargetP);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fdd7 	bl	8000588 <__aeabi_f2d>
 80029da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029de:	ec41 0b10 	vmov	d0, r0, r1
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fa36 	bl	8002e54 <FormatTemperature>
    char address[3];
    switch (Controller->Sensor.Address & 0x03)
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	7a1b      	ldrb	r3, [r3, #8]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d833      	bhi.n	8002a5c <ShowAll+0xa4>
 80029f4:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <ShowAll+0x44>)
 80029f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fa:	bf00      	nop
 80029fc:	08002a0d 	.word	0x08002a0d
 8002a00:	08002a21 	.word	0x08002a21
 8002a04:	08002a35 	.word	0x08002a35
 8002a08:	08002a49 	.word	0x08002a49
    {
      case 0: strcpy(address, "00"); break;
 8002a0c:	4aaa      	ldr	r2, [pc, #680]	; (8002cb8 <ShowAll+0x300>)
 8002a0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	4611      	mov	r1, r2
 8002a16:	8019      	strh	r1, [r3, #0]
 8002a18:	3302      	adds	r3, #2
 8002a1a:	0c12      	lsrs	r2, r2, #16
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e01e      	b.n	8002a5e <ShowAll+0xa6>
      case 1: strcpy(address, "01"); break;
 8002a20:	4aa6      	ldr	r2, [pc, #664]	; (8002cbc <ShowAll+0x304>)
 8002a22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	8019      	strh	r1, [r3, #0]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	0c12      	lsrs	r2, r2, #16
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e014      	b.n	8002a5e <ShowAll+0xa6>
      case 2: strcpy(address, "10"); break;
 8002a34:	4aa2      	ldr	r2, [pc, #648]	; (8002cc0 <ShowAll+0x308>)
 8002a36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	8019      	strh	r1, [r3, #0]
 8002a40:	3302      	adds	r3, #2
 8002a42:	0c12      	lsrs	r2, r2, #16
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e00a      	b.n	8002a5e <ShowAll+0xa6>
      case 3: strcpy(address, "11"); break;
 8002a48:	4a9e      	ldr	r2, [pc, #632]	; (8002cc4 <ShowAll+0x30c>)
 8002a4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	4611      	mov	r1, r2
 8002a52:	8019      	strh	r1, [r3, #0]
 8002a54:	3302      	adds	r3, #2
 8002a56:	0c12      	lsrs	r2, r2, #16
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e000      	b.n	8002a5e <ShowAll+0xa6>
      default: break;
 8002a5c:	bf00      	nop
    }
    char enabled[10];
    if (Controller->PID.Config.Enabled)
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d006      	beq.n	8002a76 <ShowAll+0xbe>
      strcpy(enabled, "ENABLED ");
 8002a68:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a6c:	4a96      	ldr	r2, [pc, #600]	; (8002cc8 <ShowAll+0x310>)
 8002a6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a70:	c303      	stmia	r3!, {r0, r1}
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e005      	b.n	8002a82 <ShowAll+0xca>
    else
      strcpy(enabled, "DISABLED");
 8002a76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a7a:	4a94      	ldr	r2, [pc, #592]	; (8002ccc <ShowAll+0x314>)
 8002a7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a7e:	c303      	stmia	r3!, {r0, r1}
 8002a80:	701a      	strb	r2, [r3, #0]
    char average[12], last[12], targetp[12];
    FormatTemperature(average, Controller->Sensor.Average);
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8002a88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a8c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a90:	eef0 0a67 	vmov.f32	s1, s15
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f9dd 	bl	8002e54 <FormatTemperature>
    FormatTemperature(last, Controller->Sensor.LastTemperature);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
 8002aa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002aa4:	eeb0 0a47 	vmov.f32	s0, s14
 8002aa8:	eef0 0a67 	vmov.f32	s1, s15
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 f9d1 	bl	8002e54 <FormatTemperature>
    FormatTemperature(targetp, Controller->PID.Config.TargetP);
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fd64 	bl	8000588 <__aeabi_f2d>
 8002ac0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ac4:	ec41 0b10 	vmov	d0, r0, r1
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f9c3 	bl	8002e54 <FormatTemperature>

    char sensor[15];
    switch (Controller->Sensor.State)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d839      	bhi.n	8002b4c <ShowAll+0x194>
 8002ad8:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <ShowAll+0x128>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002af5 	.word	0x08002af5
 8002ae4:	08002b05 	.word	0x08002b05
 8002ae8:	08002b17 	.word	0x08002b17
 8002aec:	08002b2b 	.word	0x08002b2b
 8002af0:	08002b39 	.word	0x08002b39
    {
      case TMP117_STATE_UNKNOWN:      strcpy(sensor, "Unknown");       break;
 8002af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af8:	4a75      	ldr	r2, [pc, #468]	; (8002cd0 <ShowAll+0x318>)
 8002afa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002afe:	e883 0003 	stmia.w	r3, {r0, r1}
 8002b02:	e024      	b.n	8002b4e <ShowAll+0x196>
      case TMP117_STATE_INITFAILED:   strcpy(sensor, "Config failed"); break;
 8002b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b08:	4a72      	ldr	r2, [pc, #456]	; (8002cd4 <ShowAll+0x31c>)
 8002b0a:	461c      	mov	r4, r3
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b10:	c407      	stmia	r4!, {r0, r1, r2}
 8002b12:	8023      	strh	r3, [r4, #0]
 8002b14:	e01b      	b.n	8002b4e <ShowAll+0x196>
      case TMP117_STATE_REQUESTNOACK: strcpy(sensor, "Req failed");    break;
 8002b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b1a:	4a6f      	ldr	r2, [pc, #444]	; (8002cd8 <ShowAll+0x320>)
 8002b1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b1e:	c303      	stmia	r3!, {r0, r1}
 8002b20:	801a      	strh	r2, [r3, #0]
 8002b22:	3302      	adds	r3, #2
 8002b24:	0c12      	lsrs	r2, r2, #16
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	e011      	b.n	8002b4e <ShowAll+0x196>
      case TMP117_STATE_RECEIVEFAIL:  strcpy(sensor, "No response");   break;
 8002b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b2e:	4a6b      	ldr	r2, [pc, #428]	; (8002cdc <ShowAll+0x324>)
 8002b30:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b36:	e00a      	b.n	8002b4e <ShowAll+0x196>
      case TMP117_STATE_VALIDTEMP:    strcpy(sensor, "OK");            break;
 8002b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b3c:	4a68      	ldr	r2, [pc, #416]	; (8002ce0 <ShowAll+0x328>)
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	4611      	mov	r1, r2
 8002b42:	8019      	strh	r1, [r3, #0]
 8002b44:	3302      	adds	r3, #2
 8002b46:	0c12      	lsrs	r2, r2, #16
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e000      	b.n	8002b4e <ShowAll+0x196>
      default: break;
 8002b4c:	bf00      	nop
    }

    static char buffer[250];

    if (readable)
 8002b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80d2 	beq.w	8002cfc <ShowAll+0x344>
    {
      snprintf(buffer, 200, "C%u: kp=%5.2f   ep=% 7.1f    temp=%8s  freq: %04u  %s\n", Controller->Heater, Controller->PID.Config.Kp, 100 * Controller->PID.Ep, last, Controller->PID.Config.Frequency, enabled);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461e      	mov	r6, r3
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fd0e 	bl	8000588 <__aeabi_f2d>
 8002b6c:	4604      	mov	r4, r0
 8002b6e:	460d      	mov	r5, r1
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002cf8 <ShowAll+0x340>
 8002b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b82:	ee17 0a90 	vmov	r0, s15
 8002b86:	f7fd fcff 	bl	8000588 <__aeabi_f2d>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b90:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
 8002b94:	4608      	mov	r0, r1
 8002b96:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002b9a:	9106      	str	r1, [sp, #24]
 8002b9c:	9005      	str	r0, [sp, #20]
 8002b9e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002ba2:	9104      	str	r1, [sp, #16]
 8002ba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ba8:	e9cd 4500 	strd	r4, r5, [sp]
 8002bac:	4633      	mov	r3, r6
 8002bae:	4a4d      	ldr	r2, [pc, #308]	; (8002ce4 <ShowAll+0x32c>)
 8002bb0:	21c8      	movs	r1, #200	; 0xc8
 8002bb2:	484d      	ldr	r0, [pc, #308]	; (8002ce8 <ShowAll+0x330>)
 8002bb4:	f00c fdd4 	bl	800f760 <sniprintf>
      USBSendString(buffer);
 8002bb8:	484b      	ldr	r0, [pc, #300]	; (8002ce8 <ShowAll+0x330>)
 8002bba:	f000 fa3f 	bl	800303c <USBSendString>
      snprintf(buffer, 200,  "  : kd=%5.2f   ed=% 7.1f     avg=%8s  i2c: %2s\n", Controller->PID.Config.Kd, 100 * Controller->PID.Ed, average, address);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fcde 	bl	8000588 <__aeabi_f2d>
 8002bcc:	4604      	mov	r4, r0
 8002bce:	460d      	mov	r5, r1
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002bd6:	edd3 7a00 	vldr	s15, [r3]
 8002bda:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002cf8 <ShowAll+0x340>
 8002bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be2:	ee17 0a90 	vmov	r0, s15
 8002be6:	f7fd fccf 	bl	8000588 <__aeabi_f2d>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002bf2:	9105      	str	r1, [sp, #20]
 8002bf4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002bf8:	9104      	str	r1, [sp, #16]
 8002bfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bfe:	e9cd 4500 	strd	r4, r5, [sp]
 8002c02:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <ShowAll+0x334>)
 8002c04:	21c8      	movs	r1, #200	; 0xc8
 8002c06:	4838      	ldr	r0, [pc, #224]	; (8002ce8 <ShowAll+0x330>)
 8002c08:	f00c fdaa 	bl	800f760 <sniprintf>
      USBSendString(buffer);
 8002c0c:	4836      	ldr	r0, [pc, #216]	; (8002ce8 <ShowAll+0x330>)
 8002c0e:	f000 fa15 	bl	800303c <USBSendString>
      snprintf(buffer, 200,  "  : ki=%5.2f   ei=% 7.1f  target=%8s  history=%3u\n", Controller->PID.Config.Ki, 100 * Controller->PID.Ei, target, Controller->PID.Config.History);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fcb4 	bl	8000588 <__aeabi_f2d>
 8002c20:	4604      	mov	r4, r0
 8002c22:	460d      	mov	r5, r1
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002cf8 <ShowAll+0x340>
 8002c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c36:	ee17 0a90 	vmov	r0, s15
 8002c3a:	f7fd fca5 	bl	8000588 <__aeabi_f2d>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c44:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
 8002c48:	9105      	str	r1, [sp, #20]
 8002c4a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002c4e:	9104      	str	r1, [sp, #16]
 8002c50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c54:	e9cd 4500 	strd	r4, r5, [sp]
 8002c58:	4a25      	ldr	r2, [pc, #148]	; (8002cf0 <ShowAll+0x338>)
 8002c5a:	21c8      	movs	r1, #200	; 0xc8
 8002c5c:	4822      	ldr	r0, [pc, #136]	; (8002ce8 <ShowAll+0x330>)
 8002c5e:	f00c fd7f 	bl	800f760 <sniprintf>
      USBSendString(buffer);
 8002c62:	4821      	ldr	r0, [pc, #132]	; (8002ce8 <ShowAll+0x330>)
 8002c64:	f000 f9ea 	bl	800303c <USBSendString>
      snprintf(buffer, 200,  "  : li=%5.2f  eff=% 7.1f  sensor: %s\n\n", Controller->PID.Config.Li, 100 * Controller->PID.Effort, sensor);
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fc89 	bl	8000588 <__aeabi_f2d>
 8002c76:	4604      	mov	r4, r0
 8002c78:	460d      	mov	r5, r1
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002cf8 <ShowAll+0x340>
 8002c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c8c:	ee17 0a90 	vmov	r0, s15
 8002c90:	f7fd fc7a 	bl	8000588 <__aeabi_f2d>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002c9c:	9104      	str	r1, [sp, #16]
 8002c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ca2:	e9cd 4500 	strd	r4, r5, [sp]
 8002ca6:	4a13      	ldr	r2, [pc, #76]	; (8002cf4 <ShowAll+0x33c>)
 8002ca8:	21c8      	movs	r1, #200	; 0xc8
 8002caa:	480f      	ldr	r0, [pc, #60]	; (8002ce8 <ShowAll+0x330>)
 8002cac:	f00c fd58 	bl	800f760 <sniprintf>
      USBSendString(buffer);
 8002cb0:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <ShowAll+0x330>)
 8002cb2:	f000 f9c3 	bl	800303c <USBSendString>
      USBSendString(buffer);
      //}

//      HAL_Delay(1); // don't butcher our buffer before we're done with it
    }
}
 8002cb6:	e0b4      	b.n	8002e22 <ShowAll+0x46a>
 8002cb8:	08014584 	.word	0x08014584
 8002cbc:	08014588 	.word	0x08014588
 8002cc0:	0801458c 	.word	0x0801458c
 8002cc4:	08014590 	.word	0x08014590
 8002cc8:	08014654 	.word	0x08014654
 8002ccc:	08014660 	.word	0x08014660
 8002cd0:	0801466c 	.word	0x0801466c
 8002cd4:	08014674 	.word	0x08014674
 8002cd8:	08014684 	.word	0x08014684
 8002cdc:	08014690 	.word	0x08014690
 8002ce0:	0801469c 	.word	0x0801469c
 8002ce4:	080146a0 	.word	0x080146a0
 8002ce8:	20000308 	.word	0x20000308
 8002cec:	080146d8 	.word	0x080146d8
 8002cf0:	08014708 	.word	0x08014708
 8002cf4:	0801473c 	.word	0x0801473c
 8002cf8:	42c80000 	.word	0x42c80000
        ShowRawHeader();
 8002cfc:	f000 f89a 	bl	8002e34 <ShowRawHeader>
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	781b      	ldrb	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d04:	61fb      	str	r3, [r7, #28]
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002d0c:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fc3a 	bl	8000588 <__aeabi_f2d>
 8002d14:	4680      	mov	r8, r0
 8002d16:	4689      	mov	r9, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002d1e:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fc31 	bl	8000588 <__aeabi_f2d>
 8002d26:	4682      	mov	sl, r0
 8002d28:	468b      	mov	fp, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002d30:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fc28 	bl	8000588 <__aeabi_f2d>
 8002d38:	e9c7 0104 	strd	r0, r1, [r7, #16]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 8002cf8 <ShowAll+0x340>
 8002d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d4e:	ee17 0a90 	vmov	r0, s15
 8002d52:	f7fd fc19 	bl	8000588 <__aeabi_f2d>
 8002d56:	e9c7 0102 	strd	r0, r1, [r7, #8]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002d60:	edd3 7a00 	vldr	s15, [r3]
 8002d64:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 8002cf8 <ShowAll+0x340>
 8002d68:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d6c:	ee17 0a90 	vmov	r0, s15
 8002d70:	f7fd fc0a 	bl	8000588 <__aeabi_f2d>
 8002d74:	e9c7 0100 	strd	r0, r1, [r7]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8002cf8 <ShowAll+0x340>
 8002d86:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d8a:	ee17 0a90 	vmov	r0, s15
 8002d8e:	f7fd fbfb 	bl	8000588 <__aeabi_f2d>
 8002d92:	4604      	mov	r4, r0
 8002d94:	460d      	mov	r5, r1
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002d9c:	edd3 7a00 	vldr	s15, [r3]
 8002da0:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 8002cf8 <ShowAll+0x340>
 8002da4:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002da8:	ee17 0a90 	vmov	r0, s15
 8002dac:	f7fd fbec 	bl	8000588 <__aeabi_f2d>
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	f893 365d 	ldrb.w	r3, [r3, #1629]	; 0x65d
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002db6:	461e      	mov	r6, r3
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	f8b3 365e 	ldrh.w	r3, [r3, #1630]	; 0x65e
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc4:	9315      	str	r3, [sp, #84]	; 0x54
 8002dc6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002dca:	9314      	str	r3, [sp, #80]	; 0x50
 8002dcc:	9213      	str	r2, [sp, #76]	; 0x4c
 8002dce:	9612      	str	r6, [sp, #72]	; 0x48
 8002dd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002dd4:	9311      	str	r3, [sp, #68]	; 0x44
 8002dd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dda:	9310      	str	r3, [sp, #64]	; 0x40
 8002ddc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002de0:	930f      	str	r3, [sp, #60]	; 0x3c
 8002de2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002de6:	930e      	str	r3, [sp, #56]	; 0x38
 8002de8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002dec:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002df0:	ed97 7b00 	vldr	d7, [r7]
 8002df4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002df8:	ed97 7b02 	vldr	d7, [r7, #8]
 8002dfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e00:	ed97 7b04 	vldr	d7, [r7, #16]
 8002e04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002e08:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002e0c:	e9cd 8900 	strd	r8, r9, [sp]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	4a06      	ldr	r2, [pc, #24]	; (8002e2c <ShowAll+0x474>)
 8002e14:	21c8      	movs	r1, #200	; 0xc8
 8002e16:	4806      	ldr	r0, [pc, #24]	; (8002e30 <ShowAll+0x478>)
 8002e18:	f00c fca2 	bl	800f760 <sniprintf>
      USBSendString(buffer);
 8002e1c:	4804      	ldr	r0, [pc, #16]	; (8002e30 <ShowAll+0x478>)
 8002e1e:	f000 f90d 	bl	800303c <USBSendString>
}
 8002e22:	bf00      	nop
 8002e24:	3784      	adds	r7, #132	; 0x84
 8002e26:	46bd      	mov	sp, r7
 8002e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e2c:	08014764 	.word	0x08014764
 8002e30:	20000308 	.word	0x20000308

08002e34 <ShowRawHeader>:


//Prints the header for the raw data
void ShowRawHeader(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  static char buffer[250];
  snprintf(buffer, 200,  "Chan\t  kp\t  kd\t  ki\t    ep\t    ed\t    ei\t  effort temp\t         average          target        i2c\thist\tfreq\tenabled\t       sensor\n");
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <ShowRawHeader+0x18>)
 8002e3a:	21c8      	movs	r1, #200	; 0xc8
 8002e3c:	4804      	ldr	r0, [pc, #16]	; (8002e50 <ShowRawHeader+0x1c>)
 8002e3e:	f00c fc8f 	bl	800f760 <sniprintf>
  USBSendString(buffer);
 8002e42:	4803      	ldr	r0, [pc, #12]	; (8002e50 <ShowRawHeader+0x1c>)
 8002e44:	f000 f8fa 	bl	800303c <USBSendString>
//  HAL_Delay(1); // don't butcher our buffer before we're done with it
}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	080147b4 	.word	0x080147b4
 8002e50:	20000404 	.word	0x20000404

08002e54 <FormatTemperature>:


//Formats the Float to fit into the Temperature Display
void FormatTemperature(char* buffer, double temp)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	ed87 0b00 	vstr	d0, [r7]
  if (temp > -100)
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <FormatTemperature+0x48>)
 8002e66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e6a:	f7fd fe75 	bl	8000b58 <__aeabi_dcmpgt>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d009      	beq.n	8002e88 <FormatTemperature+0x34>
    snprintf(buffer, 10, "% 7.3fC", temp);
 8002e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e78:	e9cd 2300 	strd	r2, r3, [sp]
 8002e7c:	4a08      	ldr	r2, [pc, #32]	; (8002ea0 <FormatTemperature+0x4c>)
 8002e7e:	210a      	movs	r1, #10
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f00c fc6d 	bl	800f760 <sniprintf>
  else
    snprintf(buffer, 10, "  error ");
}
 8002e86:	e004      	b.n	8002e92 <FormatTemperature+0x3e>
    snprintf(buffer, 10, "  error ");
 8002e88:	4a06      	ldr	r2, [pc, #24]	; (8002ea4 <FormatTemperature+0x50>)
 8002e8a:	210a      	movs	r1, #10
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f00c fc67 	bl	800f760 <sniprintf>
}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	c0590000 	.word	0xc0590000
 8002ea0:	08014838 	.word	0x08014838
 8002ea4:	08014840 	.word	0x08014840

08002ea8 <Controller_InitStruct>:
#include "Controller.h"




void Controller_InitStruct(struct sController* s, struct sTMP117 *t,uint8_t heater){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002eb4:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002eb8:	6018      	str	r0, [r3, #0]
 8002eba:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002ebe:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8002ec2:	6019      	str	r1, [r3, #0]
 8002ec4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002ec8:	f2a3 4339 	subw	r3, r3, #1081	; 0x439
 8002ecc:	701a      	strb	r2, [r3, #0]
  struct sPID PID;
  PID_InitStruct(&PID);
 8002ece:	f107 0310 	add.w	r3, r7, #16
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe faca 	bl	800146c <PID_InitStruct>

  s->Heater = heater;
 8002ed8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002edc:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002ee6:	f2a2 4239 	subw	r2, r2, #1081	; 0x439
 8002eea:	7812      	ldrb	r2, [r2, #0]
 8002eec:	701a      	strb	r2, [r3, #0]
  s->Sensor = *t;
 8002eee:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002ef2:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002efc:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	3308      	adds	r3, #8
 8002f04:	4611      	mov	r1, r2
 8002f06:	f44f 720a 	mov.w	r2, #552	; 0x228
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f00b fcea 	bl	800e8e4 <memcpy>
  s->PID = PID;
 8002f10:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002f14:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002f1e:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8002f22:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002f26:	4611      	mov	r1, r2
 8002f28:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f00b fcd9 	bl	800e8e4 <memcpy>
}
 8002f32:	bf00      	nop
 8002f34:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <Controller_SetHeater>:

// this doesn't sit in the struct because we want something global that the interrupt can call
//This Has been Edited so that it can be used in the TCB
void Controller_SetHeater(uint8_t heater, bool state)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	460a      	mov	r2, r1
 8002f46:	71fb      	strb	r3, [r7, #7]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	71bb      	strb	r3, [r7, #6]
  //For the TCB
  uint16_t Pin;
  GPIO_TypeDef* Port;
  Port = GPIOC;
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <Controller_SetHeater+0x40>)
 8002f4e:	60fb      	str	r3, [r7, #12]
  Pin = GPIO_PIN_5;
 8002f50:	2320      	movs	r3, #32
 8002f52:	817b      	strh	r3, [r7, #10]
  
  if (state)
 8002f54:	79bb      	ldrb	r3, [r7, #6]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d006      	beq.n	8002f68 <Controller_SetHeater+0x2c>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8002f5a:	897b      	ldrh	r3, [r7, #10]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4619      	mov	r1, r3
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f001 fd81 	bl	8004a68 <HAL_GPIO_WritePin>
  else
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);

}
 8002f66:	e005      	b.n	8002f74 <Controller_SetHeater+0x38>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8002f68:	897b      	ldrh	r3, [r7, #10]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f001 fd7a 	bl	8004a68 <HAL_GPIO_WritePin>
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40020800 	.word	0x40020800

08002f80 <Controller_WipeConfig>:

void Controller_WipeConfig(struct sController* Controller)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  Controller_InitStruct(Controller, &Controller->Sensor, 0);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff89 	bl	8002ea8 <Controller_InitStruct>
  printf("Cannot Save No EEPROM");
 8002f96:	4803      	ldr	r0, [pc, #12]	; (8002fa4 <Controller_WipeConfig+0x24>)
 8002f98:	f00c fb4e 	bl	800f638 <iprintf>
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	0801484c 	.word	0x0801484c

08002fa8 <Controller_Step>:



void Controller_Step(struct sController* Controller)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint8_t i = Controller->Heater - 1;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	75fb      	strb	r3, [r7, #23]
  float temp, eff;
  if (Controller->PID.Config.Enabled == false)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002fbe:	f083 0301 	eor.w	r3, r3, #1
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <Controller_Step+0x28>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <Controller_Step+0x8c>)
 8002fca:	2264      	movs	r2, #100	; 0x64
 8002fcc:	701a      	strb	r2, [r3, #0]
    return;
 8002fce:	e02d      	b.n	800302c <Controller_Step+0x84>
  }
  if (Controller->Sensor.State != TMP117_STATE_VALIDTEMP)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d003      	beq.n	8002fe2 <Controller_Step+0x3a>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <Controller_Step+0x8c>)
 8002fdc:	2264      	movs	r2, #100	; 0x64
 8002fde:	701a      	strb	r2, [r3, #0]
    return;
 8002fe0:	e024      	b.n	800302c <Controller_Step+0x84>
  }

  temp = Controller->Sensor.Average;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7fd fe1c 	bl	8000c28 <__aeabi_d2f>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	613b      	str	r3, [r7, #16]
  eff = PID_CalculateEffort(&Controller->PID, temp);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002ffa:	ed97 0a04 	vldr	s0, [r7, #16]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fb72 	bl	80016e8 <PID_CalculateEffort>
 8003004:	ed87 0a03 	vstr	s0, [r7, #12]
  // dwell is a value between 0 and 100 which tells the heater controller how many
  // heater ticks the heater spends off. A complete heater cycle is 200 ticks.
  // For a 40% duty cycle (effort), dwell becomes 60, making the heater off for 60,
  // on for 80, and off for another 60. This weird design causes heaters with
  // different effort values to turn on and off at different times.
  HeaterDwell = 100 * (1 - eff);
 8003008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800300c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003014:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003038 <Controller_Step+0x90>
 8003018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800301c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003020:	edc7 7a00 	vstr	s15, [r7]
 8003024:	783b      	ldrb	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b02      	ldr	r3, [pc, #8]	; (8003034 <Controller_Step+0x8c>)
 800302a:	701a      	strb	r2, [r3, #0]
}
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000010 	.word	0x20000010
 8003038:	42c80000 	.word	0x42c80000

0800303c <USBSendString>:
   }
   return --i;
}

void USBSendString(char* buf)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  int i, res;
  for (i=0;i<50; i++)
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e013      	b.n	8003072 <USBSendString+0x36>
  {
    res = CDC_Transmit_FS((uint8_t *)buf, strlen(buf));
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd f8da 	bl	8000204 <strlen>
 8003050:	4603      	mov	r3, r0
 8003052:	b29b      	uxth	r3, r3
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f00a ffbe 	bl	800dfd8 <CDC_Transmit_FS>
 800305c:	4603      	mov	r3, r0
 800305e:	60bb      	str	r3, [r7, #8]
    if (res == USBD_OK)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <USBSendString+0x3e>
      return;

    HAL_Delay(1);
 8003066:	2001      	movs	r0, #1
 8003068:	f001 f9ec 	bl	8004444 <HAL_Delay>
  for (i=0;i<50; i++)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3301      	adds	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b31      	cmp	r3, #49	; 0x31
 8003076:	dde8      	ble.n	800304a <USBSendString+0xe>
 8003078:	e000      	b.n	800307c <USBSendString+0x40>
      return;
 800307a:	bf00      	nop
  }
}
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <InitDWTTimer>:

void InitDWTTimer(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <InitDWTTimer+0x2c>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <InitDWTTimer+0x2c>)
 800308e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003092:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <InitDWTTimer+0x30>)
 8003096:	2200      	movs	r2, #0
 8003098:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk ; // enable the counter
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <InitDWTTimer+0x30>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a05      	ldr	r2, [pc, #20]	; (80030b4 <InitDWTTimer+0x30>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	6013      	str	r3, [r2, #0]
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000edf0 	.word	0xe000edf0
 80030b4:	e0001000 	.word	0xe0001000

080030b8 <Delay_us>:

void Delay_us(uint32_t us)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <Delay_us+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <Delay_us+0x44>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	0c9b      	lsrs	r3, r3, #18
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
 80030d2:	60fb      	str	r3, [r7, #12]
  volatile uint32_t start = DWT->CYCCNT;
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <Delay_us+0x48>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	60bb      	str	r3, [r7, #8]
  do  {
  } while((DWT->CYCCNT - start) < cycles);
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <Delay_us+0x48>)
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad2      	subs	r2, r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3f8      	bcc.n	80030da <Delay_us+0x22>
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000014 	.word	0x20000014
 80030fc:	431bde83 	.word	0x431bde83
 8003100:	e0001000 	.word	0xe0001000

08003104 <replacestr>:
    return un.u;
}

// in-place string replacement which only works if the new string is smaller than the old string
void replacestr(uint8_t *buffer, const char *search, const char *replace)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
     char *sp;
     char* line = (char*) buffer;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
     if ((sp = strstr(line, search)) == NULL) {
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003118:	f00c fbe7 	bl	800f8ea <strstr>
 800311c:	6238      	str	r0, [r7, #32]
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d023      	beq.n	800316c <replacestr+0x68>
         return;
     }
     int search_len = strlen(search);
 8003124:	68b8      	ldr	r0, [r7, #8]
 8003126:	f7fd f86d 	bl	8000204 <strlen>
 800312a:	4603      	mov	r3, r0
 800312c:	61fb      	str	r3, [r7, #28]
     int replace_len = strlen(replace);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd f868 	bl	8000204 <strlen>
 8003134:	4603      	mov	r3, r0
 8003136:	61bb      	str	r3, [r7, #24]
     int tail_len = strlen(sp+search_len);
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	6a3a      	ldr	r2, [r7, #32]
 800313c:	4413      	add	r3, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd f860 	bl	8000204 <strlen>
 8003144:	4603      	mov	r3, r0
 8003146:	617b      	str	r3, [r7, #20]

     memmove(sp+replace_len,sp+search_len,tail_len+1);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	6a3a      	ldr	r2, [r7, #32]
 800314c:	18d0      	adds	r0, r2, r3
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	6a3a      	ldr	r2, [r7, #32]
 8003152:	18d1      	adds	r1, r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3301      	adds	r3, #1
 8003158:	461a      	mov	r2, r3
 800315a:	f00b fbd1 	bl	800e900 <memmove>
     memcpy(sp, replace, replace_len);
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	461a      	mov	r2, r3
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	6a38      	ldr	r0, [r7, #32]
 8003166:	f00b fbbd 	bl	800e8e4 <memcpy>
 800316a:	e000      	b.n	800316e <replacestr+0x6a>
         return;
 800316c:	bf00      	nop
}
 800316e:	3728      	adds	r7, #40	; 0x28
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800317c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003180:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d013      	beq.n	80031b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800318c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003190:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003194:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800319c:	e000      	b.n	80031a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800319e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80031a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f9      	beq.n	800319e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80031aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80031b4:	687b      	ldr	r3, [r7, #4]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This Intterupot is called every .25ms Will Toggle the State of the Dac Channels
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a6c      	ldr	r2, [pc, #432]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d149      	bne.n	8003268 <HAL_TIM_PeriodElapsedCallback+0xa4>
  {
    //Syncronous Update of the DACs
    for (int i = 0; i < 6; i++){
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e041      	b.n	800325e <HAL_TIM_PeriodElapsedCallback+0x9a>
      if(TCB.DAC8718.DAC_Channels[i].enabled){
 80031da:	4a6a      	ldr	r2, [pc, #424]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	33ce      	adds	r3, #206	; 0xce
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4413      	add	r3, r2
 80031e4:	7a9b      	ldrb	r3, [r3, #10]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d036      	beq.n	8003258 <HAL_TIM_PeriodElapsedCallback+0x94>
        if(TCB.DAC8718.DAC_Channels[i].state_high){
 80031ea:	4a66      	ldr	r2, [pc, #408]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	33ce      	adds	r3, #206	; 0xce
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	7a5b      	ldrb	r3, [r3, #9]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d017      	beq.n	800322a <HAL_TIM_PeriodElapsedCallback+0x66>

          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].lower_bound);
 80031fa:	4a62      	ldr	r2, [pc, #392]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	33ce      	adds	r3, #206	; 0xce
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	7a19      	ldrb	r1, [r3, #8]
 8003206:	4a5f      	ldr	r2, [pc, #380]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	33ce      	adds	r3, #206	; 0xce
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	88db      	ldrh	r3, [r3, #6]
 8003212:	461a      	mov	r2, r3
 8003214:	485c      	ldr	r0, [pc, #368]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003216:	f7fe f807 	bl	8001228 <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = false;
 800321a:	4a5a      	ldr	r2, [pc, #360]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	33ce      	adds	r3, #206	; 0xce
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	2200      	movs	r2, #0
 8003226:	725a      	strb	r2, [r3, #9]
 8003228:	e016      	b.n	8003258 <HAL_TIM_PeriodElapsedCallback+0x94>
        }else{
          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].upper_bound);
 800322a:	4a56      	ldr	r2, [pc, #344]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	33ce      	adds	r3, #206	; 0xce
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	7a19      	ldrb	r1, [r3, #8]
 8003236:	4a53      	ldr	r2, [pc, #332]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	33ce      	adds	r3, #206	; 0xce
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	889b      	ldrh	r3, [r3, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	4850      	ldr	r0, [pc, #320]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003246:	f7fd ffef 	bl	8001228 <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = true;
 800324a:	4a4e      	ldr	r2, [pc, #312]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	33ce      	adds	r3, #206	; 0xce
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	2201      	movs	r2, #1
 8003256:	725a      	strb	r2, [r3, #9]
    for (int i = 0; i < 6; i++){
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3301      	adds	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b05      	cmp	r3, #5
 8003262:	ddba      	ble.n	80031da <HAL_TIM_PeriodElapsedCallback+0x16>

        }
      }
    }//End For
    Syncronous_Update();
 8003264:	f7fe f87f 	bl	8001366 <Syncronous_Update>
  }//End Timer 2


//--------------------This is from Damons Code-----------------------
  uint8_t i;
  if (htim == &htim6)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a48      	ldr	r2, [pc, #288]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d123      	bne.n	80032b8 <HAL_TIM_PeriodElapsedCallback+0xf4>
  {
    HeaterSubtick += HeaterFrequency;
 8003270:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b29a      	uxth	r2, r3
 8003276:	4b47      	ldr	r3, [pc, #284]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	b29b      	uxth	r3, r3
 800327c:	4413      	add	r3, r2
 800327e:	b29a      	uxth	r2, r3
 8003280:	4b44      	ldr	r3, [pc, #272]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003282:	801a      	strh	r2, [r3, #0]
    if (HeaterSubtick > 1000){
 8003284:	4b43      	ldr	r3, [pc, #268]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800328e:	d913      	bls.n	80032b8 <HAL_TIM_PeriodElapsedCallback+0xf4>
        HeaterTick = (HeaterTick + 1) % 200;
 8003290:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	3301      	adds	r3, #1
 8003298:	4a40      	ldr	r2, [pc, #256]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800329a:	fb82 1203 	smull	r1, r2, r2, r3
 800329e:	1191      	asrs	r1, r2, #6
 80032a0:	17da      	asrs	r2, r3, #31
 80032a2:	1a8a      	subs	r2, r1, r2
 80032a4:	21c8      	movs	r1, #200	; 0xc8
 80032a6:	fb01 f202 	mul.w	r2, r1, r2
 80032aa:	1a9a      	subs	r2, r3, r2
 80032ac:	b292      	uxth	r2, r2
 80032ae:	4b3a      	ldr	r3, [pc, #232]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80032b0:	801a      	strh	r2, [r3, #0]
        HeaterSubtick = 0;
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	801a      	strh	r2, [r3, #0]
    }
  }//End Timer 3

  if ((HeaterTick > HeaterDwell)&& (HeaterTick < (200 - HeaterDwell))){
 80032b8:	4b39      	ldr	r3, [pc, #228]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	b29a      	uxth	r2, r3
 80032c0:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d210      	bcs.n	80032ec <HAL_TIM_PeriodElapsedCallback+0x128>
 80032ca:	4b33      	ldr	r3, [pc, #204]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b33      	ldr	r3, [pc, #204]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80032dc:	429a      	cmp	r2, r3
 80032de:	da05      	bge.n	80032ec <HAL_TIM_PeriodElapsedCallback+0x128>
        Controller_SetHeater(i, true);
 80032e0:	7afb      	ldrb	r3, [r7, #11]
 80032e2:	2101      	movs	r1, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fe29 	bl	8002f3c <Controller_SetHeater>
 80032ea:	e004      	b.n	80032f6 <HAL_TIM_PeriodElapsedCallback+0x132>
  }else{
        Controller_SetHeater(i, false);
 80032ec:	7afb      	ldrb	r3, [r7, #11]
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fe23 	bl	8002f3c <Controller_SetHeater>
  }//Dictates If heater is on or off

  //Removed ADC stuff

  if (htim == &htim4)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2a      	ldr	r2, [pc, #168]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d13c      	bne.n	8003378 <HAL_TIM_PeriodElapsedCallback+0x1b4>
  {
    ClockTick = (ClockTick + 1) % 100;
 80032fe:	4b2a      	ldr	r3, [pc, #168]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	3301      	adds	r3, #1
 8003306:	4a25      	ldr	r2, [pc, #148]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003308:	fb82 1203 	smull	r1, r2, r2, r3
 800330c:	1151      	asrs	r1, r2, #5
 800330e:	17da      	asrs	r2, r3, #31
 8003310:	1a8a      	subs	r2, r1, r2
 8003312:	2164      	movs	r1, #100	; 0x64
 8003314:	fb01 f202 	mul.w	r2, r1, r2
 8003318:	1a9a      	subs	r2, r3, r2
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800331e:	701a      	strb	r2, [r3, #0]
    // this should be after the ClockTick increment
    if (ClockTick == 0)
 8003320:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_TIM_PeriodElapsedCallback+0x174>
      ElapsedSeconds++;
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	3301      	adds	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8003336:	801a      	strh	r2, [r3, #0]

    if (++Ticks_TMP117 >= 13)
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	3301      	adds	r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4a1b      	ldr	r2, [pc, #108]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8003344:	4619      	mov	r1, r3
 8003346:	7011      	strb	r1, [r2, #0]
 8003348:	2b0c      	cmp	r3, #12
 800334a:	d905      	bls.n	8003358 <HAL_TIM_PeriodElapsedCallback+0x194>
    {
      Ticks_TMP117 = 0;
 800334c:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
      DoSampleTMP117 = true;
 8003352:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
    }

    if (++Ticks_CalculatePWM >= 100)
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	3301      	adds	r3, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003364:	4619      	mov	r1, r3
 8003366:	7011      	strb	r1, [r2, #0]
 8003368:	2b63      	cmp	r3, #99	; 0x63
 800336a:	d905      	bls.n	8003378 <HAL_TIM_PeriodElapsedCallback+0x1b4>
    {
      Ticks_CalculatePWM = 0;
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
      DoCalculatePWM = true;
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
    }

  }
}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200005ac 	.word	0x200005ac
 8003384:	20000690 	.word	0x20000690
 8003388:	20000cf0 	.word	0x20000cf0
 800338c:	2000063c 	.word	0x2000063c
 8003390:	2000000e 	.word	0x2000000e
 8003394:	20000688 	.word	0x20000688
 8003398:	20000686 	.word	0x20000686
 800339c:	51eb851f 	.word	0x51eb851f
 80033a0:	20000010 	.word	0x20000010
 80033a4:	200005f4 	.word	0x200005f4
 80033a8:	2000068c 	.word	0x2000068c
 80033ac:	2000068e 	.word	0x2000068e
 80033b0:	2000068a 	.word	0x2000068a
 80033b4:	20000684 	.word	0x20000684
 80033b8:	2000068b 	.word	0x2000068b
 80033bc:	20000685 	.word	0x20000685

080033c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b090      	sub	sp, #64	; 0x40
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033c6:	f000 ffcb 	bl	8004360 <HAL_Init>

  /* USER CODE BEGIN Init */
  
  StringFIFOInit(&USBFIFO);
 80033ca:	4869      	ldr	r0, [pc, #420]	; (8003570 <main+0x1b0>)
 80033cc:	f000 fd94 	bl	8003ef8 <StringFIFOInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033d0:	f000 f8ea 	bl	80035a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  InitDWTTimer(); // we need this for delay_us
 80033d4:	f7ff fe56 	bl	8003084 <InitDWTTimer>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033d8:	f000 fa96 	bl	8003908 <MX_GPIO_Init>
  MX_SPI4_Init();
 80033dc:	f000 f98e 	bl	80036fc <MX_SPI4_Init>
  MX_I2C1_Init();
 80033e0:	f000 f94c 	bl	800367c <MX_I2C1_Init>
  MX_TIM2_Init();
 80033e4:	f000 f9c0 	bl	8003768 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80033e8:	f00a fd2c 	bl	800de44 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80033ec:	f000 fa08 	bl	8003800 <MX_TIM4_Init>
  MX_TIM6_Init();
 80033f0:	f000 fa54 	bl	800389c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  TCB_InitStruct(&TCB, &hi2c1, &hspi4);
 80033f4:	4a5f      	ldr	r2, [pc, #380]	; (8003574 <main+0x1b4>)
 80033f6:	4960      	ldr	r1, [pc, #384]	; (8003578 <main+0x1b8>)
 80033f8:	4860      	ldr	r0, [pc, #384]	; (800357c <main+0x1bc>)
 80033fa:	f7fe fbaf 	bl	8001b5c <TCB_InitStruct>
  HAL_Delay(500);
 80033fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003402:	f001 f81f 	bl	8004444 <HAL_Delay>
  printf("-- REBOOT --\n");
 8003406:	485e      	ldr	r0, [pc, #376]	; (8003580 <main+0x1c0>)
 8003408:	f00c f99c 	bl	800f744 <puts>

// if you rearrange the PID.CONFIG struct, you should force rewriting defaults
  // over the EEPROM on next startup. This will *probably* be caught by checking
  // the address of the last controller rather than the first.
  //Welcome to OOP hell
  if (!(TCB.Controller.Sensor.Address & 0b1001000)) // if the stored address is not valid, we probably have invalid data.
 800340c:	4b5b      	ldr	r3, [pc, #364]	; (800357c <main+0x1bc>)
 800340e:	7a1b      	ldrb	r3, [r3, #8]
 8003410:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8003414:	2b00      	cmp	r3, #0
 8003416:	d102      	bne.n	800341e <main+0x5e>
  {
    printf("The configuration is invalid. Rewriting defaults.");
 8003418:	485a      	ldr	r0, [pc, #360]	; (8003584 <main+0x1c4>)
 800341a:	f00c f90d 	bl	800f638 <iprintf>
  }

  TMP117_Configure(&TCB.Controller.Sensor);
 800341e:	485a      	ldr	r0, [pc, #360]	; (8003588 <main+0x1c8>)
 8003420:	f7fe fa6a 	bl	80018f8 <TMP117_Configure>
  HAL_TIM_Base_Start_IT(&htim2); //DAC Timer
 8003424:	4859      	ldr	r0, [pc, #356]	; (800358c <main+0x1cc>)
 8003426:	f006 fcc5 	bl	8009db4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6); // Heater Timer
 800342a:	4859      	ldr	r0, [pc, #356]	; (8003590 <main+0x1d0>)
 800342c:	f006 fcc2 	bl	8009db4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); // Main Timer
 8003430:	4858      	ldr	r0, [pc, #352]	; (8003594 <main+0x1d4>)
 8003432:	f006 fcbf 	bl	8009db4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float voltage = 0;
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
  float voltage2 = 0;
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	607b      	str	r3, [r7, #4]

    /* USER CODE BEGIN 3 */

	  
    //Cycle through the DAC channels and set them to the opposite state and increase and decrease the voltage
    for (voltage = 0; voltage < TCB.DAC8718.max_peak2peak; voltage += 0.1){
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	e044      	b.n	80034d4 <main+0x114>
		  for(uint8_t j = 0; j < 3; j++){
 800344a:	2300      	movs	r3, #0
 800344c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003450:	e00c      	b.n	800346c <main+0xac>
			  Set_Voltage_Peak_to_Peak(&TCB.DAC8718, j, &voltage);
 8003452:	f107 0208 	add.w	r2, r7, #8
 8003456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800345a:	4619      	mov	r1, r3
 800345c:	484e      	ldr	r0, [pc, #312]	; (8003598 <main+0x1d8>)
 800345e:	f7fd ffb9 	bl	80013d4 <Set_Voltage_Peak_to_Peak>
		  for(uint8_t j = 0; j < 3; j++){
 8003462:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003466:	3301      	adds	r3, #1
 8003468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800346c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003470:	2b02      	cmp	r3, #2
 8003472:	d9ee      	bls.n	8003452 <main+0x92>
		  }
		  voltage2 = TCB.DAC8718.max_peak2peak - voltage;
 8003474:	4b41      	ldr	r3, [pc, #260]	; (800357c <main+0x1bc>)
 8003476:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 800347a:	ed93 7a00 	vldr	s14, [r3]
 800347e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003486:	edc7 7a01 	vstr	s15, [r7, #4]
		  for(uint8_t j = 3; j < 6; j++){
 800348a:	2303      	movs	r3, #3
 800348c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003490:	e00b      	b.n	80034aa <main+0xea>
			  Set_Voltage_Peak_to_Peak(&TCB.DAC8718, j, &voltage2);
 8003492:	1d3a      	adds	r2, r7, #4
 8003494:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003498:	4619      	mov	r1, r3
 800349a:	483f      	ldr	r0, [pc, #252]	; (8003598 <main+0x1d8>)
 800349c:	f7fd ff9a 	bl	80013d4 <Set_Voltage_Peak_to_Peak>
		  for(uint8_t j = 3; j < 6; j++){
 80034a0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034a4:	3301      	adds	r3, #1
 80034a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80034aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d9ef      	bls.n	8003492 <main+0xd2>
    for (voltage = 0; voltage < TCB.DAC8718.max_peak2peak; voltage += 0.1){
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd f867 	bl	8000588 <__aeabi_f2d>
 80034ba:	a32b      	add	r3, pc, #172	; (adr r3, 8003568 <main+0x1a8>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f7fc ff04 	bl	80002cc <__adddf3>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	f7fd fbac 	bl	8000c28 <__aeabi_d2f>
 80034d0:	4603      	mov	r3, r0
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	4b29      	ldr	r3, [pc, #164]	; (800357c <main+0x1bc>)
 80034d6:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 80034da:	ed93 7a00 	vldr	s14, [r3]
 80034de:	edd7 7a02 	vldr	s15, [r7, #8]
 80034e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ea:	dcae      	bgt.n	800344a <main+0x8a>



    //-------- Damons Code ----------------------
    // we keep a global copy of this for the timer interrupt
    HeaterFrequency = TCB.Controller.PID.Config.Frequency;
 80034ec:	4b23      	ldr	r3, [pc, #140]	; (800357c <main+0x1bc>)
 80034ee:	f8b3 265e 	ldrh.w	r2, [r3, #1630]	; 0x65e
 80034f2:	4b2a      	ldr	r3, [pc, #168]	; (800359c <main+0x1dc>)
 80034f4:	801a      	strh	r2, [r3, #0]

    if (TCB.Controller.Sensor.Errors > 10)
 80034f6:	4b21      	ldr	r3, [pc, #132]	; (800357c <main+0x1bc>)
 80034f8:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 80034fc:	2b0a      	cmp	r3, #10
 80034fe:	d901      	bls.n	8003504 <main+0x144>
      MX_I2C1_Init();
 8003500:	f000 f8bc 	bl	800367c <MX_I2C1_Init>

    if (DoSampleTMP117)
 8003504:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <main+0x1e0>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00e      	beq.n	800352c <main+0x16c>
    {
      DoSampleTMP117 = false;
 800350e:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <main+0x1e0>)
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
      if (TCB.Controller.Sensor.Configured){
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <main+0x1bc>)
 8003516:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <main+0x166>
          TMP117_GetTemperature(&TCB.Controller.Sensor);
 800351e:	481a      	ldr	r0, [pc, #104]	; (8003588 <main+0x1c8>)
 8003520:	f7fe fa30 	bl	8001984 <TMP117_GetTemperature>
 8003524:	e002      	b.n	800352c <main+0x16c>
      }else{
          TMP117_Configure(&TCB.Controller.Sensor);
 8003526:	4818      	ldr	r0, [pc, #96]	; (8003588 <main+0x1c8>)
 8003528:	f7fe f9e6 	bl	80018f8 <TMP117_Configure>
      }
    }


    if (DoCalculatePWM)
 800352c:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <main+0x1e4>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <main+0x182>
    {
      DoCalculatePWM = false;
 8003536:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <main+0x1e4>)
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
      Controller_Step(&TCB.Controller);
 800353c:	480f      	ldr	r0, [pc, #60]	; (800357c <main+0x1bc>)
 800353e:	f7ff fd33 	bl	8002fa8 <Controller_Step>
    }

    if (StringFIFORemove(&USBFIFO, buffer) == 0)
 8003542:	f107 030c 	add.w	r3, r7, #12
 8003546:	4619      	mov	r1, r3
 8003548:	4809      	ldr	r0, [pc, #36]	; (8003570 <main+0x1b0>)
 800354a:	f000 fd69 	bl	8004020 <StringFIFORemove>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f af76 	bne.w	8003442 <main+0x82>
    {
      ProcessUserInput(&TCB.Controller, buffer, &TCB);
 8003556:	f107 030c 	add.w	r3, r7, #12
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <main+0x1bc>)
 800355c:	4619      	mov	r1, r3
 800355e:	4807      	ldr	r0, [pc, #28]	; (800357c <main+0x1bc>)
 8003560:	f7fe fb44 	bl	8001bec <ProcessUserInput>
    for (voltage = 0; voltage < TCB.DAC8718.max_peak2peak; voltage += 0.1){
 8003564:	e76d      	b.n	8003442 <main+0x82>
 8003566:	bf00      	nop
 8003568:	9999999a 	.word	0x9999999a
 800356c:	3fb99999 	.word	0x3fb99999
 8003570:	20001c60 	.word	0x20001c60
 8003574:	20000554 	.word	0x20000554
 8003578:	20000500 	.word	0x20000500
 800357c:	20000690 	.word	0x20000690
 8003580:	08014864 	.word	0x08014864
 8003584:	08014874 	.word	0x08014874
 8003588:	20000698 	.word	0x20000698
 800358c:	200005ac 	.word	0x200005ac
 8003590:	2000063c 	.word	0x2000063c
 8003594:	200005f4 	.word	0x200005f4
 8003598:	20000cf0 	.word	0x20000cf0
 800359c:	2000000e 	.word	0x2000000e
 80035a0:	20000684 	.word	0x20000684
 80035a4:	20000685 	.word	0x20000685

080035a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b094      	sub	sp, #80	; 0x50
 80035ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ae:	f107 0320 	add.w	r3, r7, #32
 80035b2:	2230      	movs	r2, #48	; 0x30
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00b f9bc 	bl	800e934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035cc:	2300      	movs	r3, #0
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	4b28      	ldr	r3, [pc, #160]	; (8003674 <SystemClock_Config+0xcc>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	4a27      	ldr	r2, [pc, #156]	; (8003674 <SystemClock_Config+0xcc>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035da:	6413      	str	r3, [r2, #64]	; 0x40
 80035dc:	4b25      	ldr	r3, [pc, #148]	; (8003674 <SystemClock_Config+0xcc>)
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035e8:	2300      	movs	r3, #0
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	4b22      	ldr	r3, [pc, #136]	; (8003678 <SystemClock_Config+0xd0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a21      	ldr	r2, [pc, #132]	; (8003678 <SystemClock_Config+0xd0>)
 80035f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <SystemClock_Config+0xd0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003604:	2301      	movs	r3, #1
 8003606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800360e:	2302      	movs	r3, #2
 8003610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003618:	2304      	movs	r3, #4
 800361a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800361c:	23a8      	movs	r3, #168	; 0xa8
 800361e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003620:	2302      	movs	r3, #2
 8003622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003624:	2307      	movs	r3, #7
 8003626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003628:	f107 0320 	add.w	r3, r7, #32
 800362c:	4618      	mov	r0, r3
 800362e:	f005 f99d 	bl	800896c <HAL_RCC_OscConfig>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003638:	f000 fab6 	bl	8003ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800363c:	230f      	movs	r3, #15
 800363e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003640:	2302      	movs	r3, #2
 8003642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800364c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800364e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003654:	f107 030c 	add.w	r3, r7, #12
 8003658:	2105      	movs	r1, #5
 800365a:	4618      	mov	r0, r3
 800365c:	f005 fbfe 	bl	8008e5c <HAL_RCC_ClockConfig>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003666:	f000 fa9f 	bl	8003ba8 <Error_Handler>
  }
}
 800366a:	bf00      	nop
 800366c:	3750      	adds	r7, #80	; 0x50
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000

0800367c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <MX_I2C1_Init+0x74>)
 8003682:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <MX_I2C1_Init+0x78>)
 8003684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <MX_I2C1_Init+0x74>)
 8003688:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <MX_I2C1_Init+0x7c>)
 800368a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800368c:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <MX_I2C1_Init+0x74>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003692:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <MX_I2C1_Init+0x74>)
 8003694:	2200      	movs	r2, #0
 8003696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003698:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <MX_I2C1_Init+0x74>)
 800369a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800369e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036a0:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <MX_I2C1_Init+0x74>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <MX_I2C1_Init+0x74>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036ac:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <MX_I2C1_Init+0x74>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036b2:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <MX_I2C1_Init+0x74>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036b8:	480d      	ldr	r0, [pc, #52]	; (80036f0 <MX_I2C1_Init+0x74>)
 80036ba:	f001 f9ef 	bl	8004a9c <HAL_I2C_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80036c4:	f000 fa70 	bl	8003ba8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036c8:	2100      	movs	r1, #0
 80036ca:	4809      	ldr	r0, [pc, #36]	; (80036f0 <MX_I2C1_Init+0x74>)
 80036cc:	f003 fe56 	bl	800737c <HAL_I2CEx_ConfigAnalogFilter>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80036d6:	f000 fa67 	bl	8003ba8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80036da:	2100      	movs	r1, #0
 80036dc:	4804      	ldr	r0, [pc, #16]	; (80036f0 <MX_I2C1_Init+0x74>)
 80036de:	f003 fe89 	bl	80073f4 <HAL_I2CEx_ConfigDigitalFilter>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80036e8:	f000 fa5e 	bl	8003ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036ec:	bf00      	nop
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000500 	.word	0x20000500
 80036f4:	40005400 	.word	0x40005400
 80036f8:	000186a0 	.word	0x000186a0

080036fc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <MX_SPI4_Init+0x64>)
 8003702:	4a18      	ldr	r2, [pc, #96]	; (8003764 <MX_SPI4_Init+0x68>)
 8003704:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <MX_SPI4_Init+0x64>)
 8003708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800370c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <MX_SPI4_Init+0x64>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <MX_SPI4_Init+0x64>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <MX_SPI4_Init+0x64>)
 800371c:	2200      	movs	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <MX_SPI4_Init+0x64>)
 8003722:	2201      	movs	r2, #1
 8003724:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <MX_SPI4_Init+0x64>)
 8003728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800372c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <MX_SPI4_Init+0x64>)
 8003730:	2220      	movs	r2, #32
 8003732:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <MX_SPI4_Init+0x64>)
 8003736:	2200      	movs	r2, #0
 8003738:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <MX_SPI4_Init+0x64>)
 800373c:	2200      	movs	r2, #0
 800373e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <MX_SPI4_Init+0x64>)
 8003742:	2200      	movs	r2, #0
 8003744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <MX_SPI4_Init+0x64>)
 8003748:	220a      	movs	r2, #10
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800374c:	4804      	ldr	r0, [pc, #16]	; (8003760 <MX_SPI4_Init+0x64>)
 800374e:	f005 fd91 	bl	8009274 <HAL_SPI_Init>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003758:	f000 fa26 	bl	8003ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800375c:	bf00      	nop
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000554 	.word	0x20000554
 8003764:	40013400 	.word	0x40013400

08003768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800376e:	f107 0308 	add.w	r3, r7, #8
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800377c:	463b      	mov	r3, r7
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <MX_TIM2_Init+0x94>)
 8003786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800378a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420;
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <MX_TIM2_Init+0x94>)
 800378e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8003792:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <MX_TIM2_Init+0x94>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 800379a:	4b18      	ldr	r3, [pc, #96]	; (80037fc <MX_TIM2_Init+0x94>)
 800379c:	2232      	movs	r2, #50	; 0x32
 800379e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <MX_TIM2_Init+0x94>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037a6:	4b15      	ldr	r3, [pc, #84]	; (80037fc <MX_TIM2_Init+0x94>)
 80037a8:	2280      	movs	r2, #128	; 0x80
 80037aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037ac:	4813      	ldr	r0, [pc, #76]	; (80037fc <MX_TIM2_Init+0x94>)
 80037ae:	f006 fab1 	bl	8009d14 <HAL_TIM_Base_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80037b8:	f000 f9f6 	bl	8003ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037c2:	f107 0308 	add.w	r3, r7, #8
 80037c6:	4619      	mov	r1, r3
 80037c8:	480c      	ldr	r0, [pc, #48]	; (80037fc <MX_TIM2_Init+0x94>)
 80037ca:	f006 fc6b 	bl	800a0a4 <HAL_TIM_ConfigClockSource>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80037d4:	f000 f9e8 	bl	8003ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d8:	2300      	movs	r3, #0
 80037da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037dc:	2300      	movs	r3, #0
 80037de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037e0:	463b      	mov	r3, r7
 80037e2:	4619      	mov	r1, r3
 80037e4:	4805      	ldr	r0, [pc, #20]	; (80037fc <MX_TIM2_Init+0x94>)
 80037e6:	f006 fe87 	bl	800a4f8 <HAL_TIMEx_MasterConfigSynchronization>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80037f0:	f000 f9da 	bl	8003ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037f4:	bf00      	nop
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	200005ac 	.word	0x200005ac

08003800 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003806:	f107 0308 	add.w	r3, r7, #8
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	609a      	str	r2, [r3, #8]
 8003812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003814:	463b      	mov	r3, r7
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800381c:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <MX_TIM4_Init+0x94>)
 800381e:	4a1e      	ldr	r2, [pc, #120]	; (8003898 <MX_TIM4_Init+0x98>)
 8003820:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4200;
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <MX_TIM4_Init+0x94>)
 8003824:	f241 0268 	movw	r2, #4200	; 0x1068
 8003828:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800382a:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <MX_TIM4_Init+0x94>)
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <MX_TIM4_Init+0x94>)
 8003832:	2264      	movs	r2, #100	; 0x64
 8003834:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003836:	4b17      	ldr	r3, [pc, #92]	; (8003894 <MX_TIM4_Init+0x94>)
 8003838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <MX_TIM4_Init+0x94>)
 8003840:	2280      	movs	r2, #128	; 0x80
 8003842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003844:	4813      	ldr	r0, [pc, #76]	; (8003894 <MX_TIM4_Init+0x94>)
 8003846:	f006 fa65 	bl	8009d14 <HAL_TIM_Base_Init>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003850:	f000 f9aa 	bl	8003ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	4619      	mov	r1, r3
 8003860:	480c      	ldr	r0, [pc, #48]	; (8003894 <MX_TIM4_Init+0x94>)
 8003862:	f006 fc1f 	bl	800a0a4 <HAL_TIM_ConfigClockSource>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800386c:	f000 f99c 	bl	8003ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003870:	2300      	movs	r3, #0
 8003872:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003874:	2300      	movs	r3, #0
 8003876:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003878:	463b      	mov	r3, r7
 800387a:	4619      	mov	r1, r3
 800387c:	4805      	ldr	r0, [pc, #20]	; (8003894 <MX_TIM4_Init+0x94>)
 800387e:	f006 fe3b 	bl	800a4f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003888:	f000 f98e 	bl	8003ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800388c:	bf00      	nop
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	200005f4 	.word	0x200005f4
 8003898:	40000800 	.word	0x40000800

0800389c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038a2:	463b      	mov	r3, r7
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <MX_TIM6_Init+0x64>)
 80038ac:	4a15      	ldr	r2, [pc, #84]	; (8003904 <MX_TIM6_Init+0x68>)
 80038ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1680;
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <MX_TIM6_Init+0x64>)
 80038b2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80038b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b8:	4b11      	ldr	r3, [pc, #68]	; (8003900 <MX_TIM6_Init+0x64>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <MX_TIM6_Init+0x64>)
 80038c0:	2264      	movs	r2, #100	; 0x64
 80038c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038c4:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <MX_TIM6_Init+0x64>)
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80038ca:	480d      	ldr	r0, [pc, #52]	; (8003900 <MX_TIM6_Init+0x64>)
 80038cc:	f006 fa22 	bl	8009d14 <HAL_TIM_Base_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80038d6:	f000 f967 	bl	8003ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80038e2:	463b      	mov	r3, r7
 80038e4:	4619      	mov	r1, r3
 80038e6:	4806      	ldr	r0, [pc, #24]	; (8003900 <MX_TIM6_Init+0x64>)
 80038e8:	f006 fe06 	bl	800a4f8 <HAL_TIMEx_MasterConfigSynchronization>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80038f2:	f000 f959 	bl	8003ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	2000063c 	.word	0x2000063c
 8003904:	40001000 	.word	0x40001000

08003908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08c      	sub	sp, #48	; 0x30
 800390c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390e:	f107 031c 	add.w	r3, r7, #28
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	60da      	str	r2, [r3, #12]
 800391c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	4b83      	ldr	r3, [pc, #524]	; (8003b30 <MX_GPIO_Init+0x228>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a82      	ldr	r2, [pc, #520]	; (8003b30 <MX_GPIO_Init+0x228>)
 8003928:	f043 0310 	orr.w	r3, r3, #16
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b80      	ldr	r3, [pc, #512]	; (8003b30 <MX_GPIO_Init+0x228>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	4b7c      	ldr	r3, [pc, #496]	; (8003b30 <MX_GPIO_Init+0x228>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a7b      	ldr	r2, [pc, #492]	; (8003b30 <MX_GPIO_Init+0x228>)
 8003944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b79      	ldr	r3, [pc, #484]	; (8003b30 <MX_GPIO_Init+0x228>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	4b75      	ldr	r3, [pc, #468]	; (8003b30 <MX_GPIO_Init+0x228>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a74      	ldr	r2, [pc, #464]	; (8003b30 <MX_GPIO_Init+0x228>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b72      	ldr	r3, [pc, #456]	; (8003b30 <MX_GPIO_Init+0x228>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b6e      	ldr	r3, [pc, #440]	; (8003b30 <MX_GPIO_Init+0x228>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a6d      	ldr	r2, [pc, #436]	; (8003b30 <MX_GPIO_Init+0x228>)
 800397c:	f043 0304 	orr.w	r3, r3, #4
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b6b      	ldr	r3, [pc, #428]	; (8003b30 <MX_GPIO_Init+0x228>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	4b67      	ldr	r3, [pc, #412]	; (8003b30 <MX_GPIO_Init+0x228>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a66      	ldr	r2, [pc, #408]	; (8003b30 <MX_GPIO_Init+0x228>)
 8003998:	f043 0308 	orr.w	r3, r3, #8
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b64      	ldr	r3, [pc, #400]	; (8003b30 <MX_GPIO_Init+0x228>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	4b60      	ldr	r3, [pc, #384]	; (8003b30 <MX_GPIO_Init+0x228>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a5f      	ldr	r2, [pc, #380]	; (8003b30 <MX_GPIO_Init+0x228>)
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4b5d      	ldr	r3, [pc, #372]	; (8003b30 <MX_GPIO_Init+0x228>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|nWakeUp_Pin, GPIO_PIN_RESET);
 80039c6:	2200      	movs	r2, #0
 80039c8:	f44f 7184 	mov.w	r1, #264	; 0x108
 80039cc:	4859      	ldr	r0, [pc, #356]	; (8003b34 <MX_GPIO_Init+0x22c>)
 80039ce:	f001 f84b 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, GPIO_PIN_RESET);
 80039d2:	2200      	movs	r2, #0
 80039d4:	2120      	movs	r1, #32
 80039d6:	4858      	ldr	r0, [pc, #352]	; (8003b38 <MX_GPIO_Init+0x230>)
 80039d8:	f001 f846 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, nRst_Pin|nClr_Pin|nCS_Pin, GPIO_PIN_SET);
 80039dc:	2201      	movs	r2, #1
 80039de:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80039e2:	4854      	ldr	r0, [pc, #336]	; (8003b34 <MX_GPIO_Init+0x22c>)
 80039e4:	f001 f840 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLDAC_GPIO_Port, nLDAC_Pin, GPIO_PIN_SET);
 80039e8:	2201      	movs	r2, #1
 80039ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039ee:	4853      	ldr	r0, [pc, #332]	; (8003b3c <MX_GPIO_Init+0x234>)
 80039f0:	f001 f83a 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2101      	movs	r1, #1
 80039f8:	4850      	ldr	r0, [pc, #320]	; (8003b3c <MX_GPIO_Init+0x234>)
 80039fa:	f001 f835 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039fe:	2308      	movs	r3, #8
 8003a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a02:	2301      	movs	r3, #1
 8003a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a0e:	f107 031c 	add.w	r3, r7, #28
 8003a12:	4619      	mov	r1, r3
 8003a14:	4847      	ldr	r0, [pc, #284]	; (8003b34 <MX_GPIO_Init+0x22c>)
 8003a16:	f000 fe7b 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a26:	2303      	movs	r3, #3
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2e:	f107 031c 	add.w	r3, r7, #28
 8003a32:	4619      	mov	r1, r3
 8003a34:	4842      	ldr	r0, [pc, #264]	; (8003b40 <MX_GPIO_Init+0x238>)
 8003a36:	f000 fe6b 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a3a:	23f0      	movs	r3, #240	; 0xf0
 8003a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a46:	2303      	movs	r3, #3
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a4a:	2305      	movs	r3, #5
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4e:	f107 031c 	add.w	r3, r7, #28
 8003a52:	4619      	mov	r1, r3
 8003a54:	483a      	ldr	r0, [pc, #232]	; (8003b40 <MX_GPIO_Init+0x238>)
 8003a56:	f000 fe5b 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a5a:	2310      	movs	r3, #16
 8003a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a66:	f107 031c 	add.w	r3, r7, #28
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4832      	ldr	r0, [pc, #200]	; (8003b38 <MX_GPIO_Init+0x230>)
 8003a6e:	f000 fe4f 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Pin */
  GPIO_InitStruct.Pin = Heater_Pin;
 8003a72:	2320      	movs	r3, #32
 8003a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a76:	2301      	movs	r3, #1
 8003a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Heater_GPIO_Port, &GPIO_InitStruct);
 8003a82:	f107 031c 	add.w	r3, r7, #28
 8003a86:	4619      	mov	r1, r3
 8003a88:	482b      	ldr	r0, [pc, #172]	; (8003b38 <MX_GPIO_Init+0x230>)
 8003a8a:	f000 fe41 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pins : nWakeUp_Pin nRst_Pin nClr_Pin nCS_Pin */
  GPIO_InitStruct.Pin = nWakeUp_Pin|nRst_Pin|nClr_Pin|nCS_Pin;
 8003a8e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a94:	2301      	movs	r3, #1
 8003a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003aa0:	f107 031c 	add.w	r3, r7, #28
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4823      	ldr	r0, [pc, #140]	; (8003b34 <MX_GPIO_Init+0x22c>)
 8003aa8:	f000 fe32 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : nLDAC_Pin */
  GPIO_InitStruct.Pin = nLDAC_Pin;
 8003aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aba:	2302      	movs	r3, #2
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nLDAC_GPIO_Port, &GPIO_InitStruct);
 8003abe:	f107 031c 	add.w	r3, r7, #28
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	481d      	ldr	r0, [pc, #116]	; (8003b3c <MX_GPIO_Init+0x234>)
 8003ac6:	f000 fe23 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003aca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003ace:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003adc:	230c      	movs	r3, #12
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae0:	f107 031c 	add.w	r3, r7, #28
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4814      	ldr	r0, [pc, #80]	; (8003b38 <MX_GPIO_Init+0x230>)
 8003ae8:	f000 fe12 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003aec:	2301      	movs	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af0:	2301      	movs	r3, #1
 8003af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af8:	2300      	movs	r3, #0
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003afc:	f107 031c 	add.w	r3, r7, #28
 8003b00:	4619      	mov	r1, r3
 8003b02:	480e      	ldr	r0, [pc, #56]	; (8003b3c <MX_GPIO_Init+0x234>)
 8003b04:	f000 fe04 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b08:	2304      	movs	r3, #4
 8003b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b14:	2303      	movs	r3, #3
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003b18:	230c      	movs	r3, #12
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b1c:	f107 031c 	add.w	r3, r7, #28
 8003b20:	4619      	mov	r1, r3
 8003b22:	4806      	ldr	r0, [pc, #24]	; (8003b3c <MX_GPIO_Init+0x234>)
 8003b24:	f000 fdf4 	bl	8004710 <HAL_GPIO_Init>

}
 8003b28:	bf00      	nop
 8003b2a:	3730      	adds	r7, #48	; 0x30
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40020800 	.word	0x40020800
 8003b3c:	40020c00 	.word	0x40020c00
 8003b40:	40020000 	.word	0x40020000

08003b44 <_write>:

/* This allows printf to write to the debugger and USB */
/* USB needs #include "usbd_cdc_if.h" */
/* ITM Stimulus port 0 must be enabled in your trace settings */
int _write(int file, char *ptr, int len)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  int i, res;

  for (i=0;i<20; i++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	e00d      	b.n	8003b72 <_write+0x2e>
  {
    res = CDC_Transmit_FS((uint8_t*) ptr, len);  // USB out
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	68b8      	ldr	r0, [r7, #8]
 8003b5e:	f00a fa3b 	bl	800dfd8 <CDC_Transmit_FS>
 8003b62:	4603      	mov	r3, r0
 8003b64:	617b      	str	r3, [r7, #20]
    if (res == USBD_OK)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <_write+0x36>
  for (i=0;i<20; i++)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	2b13      	cmp	r3, #19
 8003b76:	ddee      	ble.n	8003b56 <_write+0x12>
 8003b78:	e000      	b.n	8003b7c <_write+0x38>
      break;
 8003b7a:	bf00      	nop
  }

  for (int i = 0; i < len; i++)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e009      	b.n	8003b96 <_write+0x52>
    ITM_SendChar((*ptr++));              // debugger out
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	60ba      	str	r2, [r7, #8]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff faf2 	bl	8003174 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	3301      	adds	r3, #1
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	dbf1      	blt.n	8003b82 <_write+0x3e>
  return len;
 8003b9e:	687b      	ldr	r3, [r7, #4]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003bac:	b672      	cpsid	i
}
 8003bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bb0:	e7fe      	b.n	8003bb0 <Error_Handler+0x8>
	...

08003bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_MspInit+0x4c>)
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <HAL_MspInit+0x4c>)
 8003bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_MspInit+0x4c>)
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_MspInit+0x4c>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <HAL_MspInit+0x4c>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	; 0x40
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_MspInit+0x4c>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800

08003c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <HAL_I2C_MspInit+0xa4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d13b      	bne.n	8003c9e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <HAL_I2C_MspInit+0xa8>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <HAL_I2C_MspInit+0xa8>)
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_I2C_MspInit+0xa8>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c42:	23c0      	movs	r3, #192	; 0xc0
 8003c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c46:	2312      	movs	r3, #18
 8003c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c52:	2304      	movs	r3, #4
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4814      	ldr	r0, [pc, #80]	; (8003cb0 <HAL_I2C_MspInit+0xac>)
 8003c5e:	f000 fd57 	bl	8004710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <HAL_I2C_MspInit+0xa8>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	4a10      	ldr	r2, [pc, #64]	; (8003cac <HAL_I2C_MspInit+0xa8>)
 8003c6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c70:	6413      	str	r3, [r2, #64]	; 0x40
 8003c72:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <HAL_I2C_MspInit+0xa8>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2100      	movs	r1, #0
 8003c82:	201f      	movs	r0, #31
 8003c84:	f000 fcdd 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003c88:	201f      	movs	r0, #31
 8003c8a:	f000 fcf6 	bl	800467a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2100      	movs	r1, #0
 8003c92:	2020      	movs	r0, #32
 8003c94:	f000 fcd5 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003c98:	2020      	movs	r0, #32
 8003c9a:	f000 fcee 	bl	800467a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003c9e:	bf00      	nop
 8003ca0:	3728      	adds	r7, #40	; 0x28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40005400 	.word	0x40005400
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40020400 	.word	0x40020400

08003cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cbc:	f107 0314 	add.w	r3, r7, #20
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	60da      	str	r2, [r3, #12]
 8003cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <HAL_SPI_MspInit+0x94>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d134      	bne.n	8003d40 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <HAL_SPI_MspInit+0x98>)
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <HAL_SPI_MspInit+0x98>)
 8003ce0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce6:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <HAL_SPI_MspInit+0x98>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <HAL_SPI_MspInit+0x98>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <HAL_SPI_MspInit+0x98>)
 8003cfc:	f043 0310 	orr.w	r3, r3, #16
 8003d00:	6313      	str	r3, [r2, #48]	; 0x30
 8003d02:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <HAL_SPI_MspInit+0x98>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003d0e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d14:	2302      	movs	r3, #2
 8003d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003d20:	2305      	movs	r3, #5
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d24:	f107 0314 	add.w	r3, r7, #20
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4809      	ldr	r0, [pc, #36]	; (8003d50 <HAL_SPI_MspInit+0x9c>)
 8003d2c:	f000 fcf0 	bl	8004710 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003d30:	2200      	movs	r2, #0
 8003d32:	2100      	movs	r1, #0
 8003d34:	2054      	movs	r0, #84	; 0x54
 8003d36:	f000 fc84 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8003d3a:	2054      	movs	r0, #84	; 0x54
 8003d3c:	f000 fc9d 	bl	800467a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003d40:	bf00      	nop
 8003d42:	3728      	adds	r7, #40	; 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40013400 	.word	0x40013400
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40021000 	.word	0x40021000

08003d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d116      	bne.n	8003d94 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	4b28      	ldr	r3, [pc, #160]	; (8003e0c <HAL_TIM_Base_MspInit+0xb8>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	4a27      	ldr	r2, [pc, #156]	; (8003e0c <HAL_TIM_Base_MspInit+0xb8>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	6413      	str	r3, [r2, #64]	; 0x40
 8003d76:	4b25      	ldr	r3, [pc, #148]	; (8003e0c <HAL_TIM_Base_MspInit+0xb8>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d82:	2200      	movs	r2, #0
 8003d84:	2100      	movs	r1, #0
 8003d86:	201c      	movs	r0, #28
 8003d88:	f000 fc5b 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d8c:	201c      	movs	r0, #28
 8003d8e:	f000 fc74 	bl	800467a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003d92:	e036      	b.n	8003e02 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <HAL_TIM_Base_MspInit+0xbc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d116      	bne.n	8003dcc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <HAL_TIM_Base_MspInit+0xb8>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	4a19      	ldr	r2, [pc, #100]	; (8003e0c <HAL_TIM_Base_MspInit+0xb8>)
 8003da8:	f043 0304 	orr.w	r3, r3, #4
 8003dac:	6413      	str	r3, [r2, #64]	; 0x40
 8003dae:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <HAL_TIM_Base_MspInit+0xb8>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	201e      	movs	r0, #30
 8003dc0:	f000 fc3f 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003dc4:	201e      	movs	r0, #30
 8003dc6:	f000 fc58 	bl	800467a <HAL_NVIC_EnableIRQ>
}
 8003dca:	e01a      	b.n	8003e02 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a10      	ldr	r2, [pc, #64]	; (8003e14 <HAL_TIM_Base_MspInit+0xc0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d115      	bne.n	8003e02 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_TIM_Base_MspInit+0xb8>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	4a0b      	ldr	r2, [pc, #44]	; (8003e0c <HAL_TIM_Base_MspInit+0xb8>)
 8003de0:	f043 0310 	orr.w	r3, r3, #16
 8003de4:	6413      	str	r3, [r2, #64]	; 0x40
 8003de6:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <HAL_TIM_Base_MspInit+0xb8>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003df2:	2200      	movs	r2, #0
 8003df4:	2100      	movs	r1, #0
 8003df6:	2036      	movs	r0, #54	; 0x36
 8003df8:	f000 fc23 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003dfc:	2036      	movs	r0, #54	; 0x36
 8003dfe:	f000 fc3c 	bl	800467a <HAL_NVIC_EnableIRQ>
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40001000 	.word	0x40001000

08003e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e1c:	e7fe      	b.n	8003e1c <NMI_Handler+0x4>

08003e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e22:	e7fe      	b.n	8003e22 <HardFault_Handler+0x4>

08003e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e28:	e7fe      	b.n	8003e28 <MemManage_Handler+0x4>

08003e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e2e:	e7fe      	b.n	8003e2e <BusFault_Handler+0x4>

08003e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e34:	e7fe      	b.n	8003e34 <UsageFault_Handler+0x4>

08003e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e36:	b480      	push	{r7}
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e52:	b480      	push	{r7}
 8003e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e64:	f000 face 	bl	8004404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e70:	4802      	ldr	r0, [pc, #8]	; (8003e7c <TIM2_IRQHandler+0x10>)
 8003e72:	f006 f80f 	bl	8009e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	200005ac 	.word	0x200005ac

08003e80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <TIM4_IRQHandler+0x10>)
 8003e86:	f006 f805 	bl	8009e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	200005f4 	.word	0x200005f4

08003e94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003e98:	4802      	ldr	r0, [pc, #8]	; (8003ea4 <I2C1_EV_IRQHandler+0x10>)
 8003e9a:	f001 fa67 	bl	800536c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000500 	.word	0x20000500

08003ea8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003eac:	4802      	ldr	r0, [pc, #8]	; (8003eb8 <I2C1_ER_IRQHandler+0x10>)
 8003eae:	f001 fbce 	bl	800564e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000500 	.word	0x20000500

08003ebc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ec0:	4802      	ldr	r0, [pc, #8]	; (8003ecc <TIM6_DAC_IRQHandler+0x10>)
 8003ec2:	f005 ffe7 	bl	8009e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	2000063c 	.word	0x2000063c

08003ed0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003ed4:	4802      	ldr	r0, [pc, #8]	; (8003ee0 <OTG_FS_IRQHandler+0x10>)
 8003ed6:	f003 fc1c 	bl	8007712 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20002a14 	.word	0x20002a14

08003ee4 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003ee8:	4802      	ldr	r0, [pc, #8]	; (8003ef4 <SPI4_IRQHandler+0x10>)
 8003eea:	f005 fd2b 	bl	8009944 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000554 	.word	0x20000554

08003ef8 <StringFIFOInit>:

#include <stringfifo.h>
#include "string.h"

void StringFIFOInit(struct sStringFIFO* fifo)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint16_t i;
  fifo->head = 0;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  fifo->tail = 0;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 8003f10:	2300      	movs	r3, #0
 8003f12:	81fb      	strh	r3, [r7, #14]
 8003f14:	e006      	b.n	8003f24 <StringFIFOInit+0x2c>
    fifo->buffer[i]=0;
 8003f16:	89fb      	ldrh	r3, [r7, #14]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	54d1      	strb	r1, [r2, r3]
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 8003f1e:	89fb      	ldrh	r3, [r7, #14]
 8003f20:	3301      	adds	r3, #1
 8003f22:	81fb      	strh	r3, [r7, #14]
 8003f24:	89fb      	ldrh	r3, [r7, #14]
 8003f26:	2bf9      	cmp	r3, #249	; 0xf9
 8003f28:	d9f5      	bls.n	8003f16 <StringFIFOInit+0x1e>
}
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <StringFIFOUsed>:

uint16_t StringFIFOUsed(struct sStringFIFO* fifo)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  int16_t used = fifo->tail - fifo->head;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	81fb      	strh	r3, [r7, #14]
  if (used < 0)
 8003f56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da03      	bge.n	8003f66 <StringFIFOUsed+0x2e>
    used += FIFO_BUFFER_SIZE;
 8003f5e:	89fb      	ldrh	r3, [r7, #14]
 8003f60:	33fa      	adds	r3, #250	; 0xfa
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	81fb      	strh	r3, [r7, #14]
  return (uint16_t) used;
 8003f66:	89fb      	ldrh	r3, [r7, #14]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <StringFIFOAvailable>:

uint16_t StringFIFOAvailable(struct sStringFIFO* fifo)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint16_t used = StringFIFOUsed(fifo);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ffdb 	bl	8003f38 <StringFIFOUsed>
 8003f82:	4603      	mov	r3, r0
 8003f84:	81fb      	strh	r3, [r7, #14]
  int16_t available = FIFO_BUFFER_SIZE - used - 1; // don't use the last byte, otherwise we won't know that we're full
 8003f86:	89fb      	ldrh	r3, [r7, #14]
 8003f88:	f1c3 03f9 	rsb	r3, r3, #249	; 0xf9
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	81bb      	strh	r3, [r7, #12]
  return available;
 8003f90:	89bb      	ldrh	r3, [r7, #12]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <StringFIFOAdd>:

uint8_t StringFIFOAdd(struct sStringFIFO* fifo, uint8_t* item, size_t size)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  int16_t available = StringFIFOAvailable(fifo);
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff ffe3 	bl	8003f74 <StringFIFOAvailable>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	82fb      	strh	r3, [r7, #22]

  if (available == 0)
 8003fb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d104      	bne.n	8003fc4 <StringFIFOAdd+0x28>
  {
    printf("Fifo full\n");
 8003fba:	4817      	ldr	r0, [pc, #92]	; (8004018 <StringFIFOAdd+0x7c>)
 8003fbc:	f00b fbc2 	bl	800f744 <puts>
    return 1;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e025      	b.n	8004010 <StringFIFOAdd+0x74>
  }

  if (size > available)
 8003fc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d902      	bls.n	8003fd4 <StringFIFOAdd+0x38>
    size = available;
 8003fce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003fd2:	607b      	str	r3, [r7, #4]

  memcpy(&fifo->buffer[fifo->tail], item, size);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f00a fc7d 	bl	800e8e4 <memcpy>
  fifo->tail = (fifo->tail + size) % FIFO_BUFFER_SIZE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	441a      	add	r2, r3
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <StringFIFOAdd+0x80>)
 8003ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	21fa      	movs	r1, #250	; 0xfa
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  return 0;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	080148a8 	.word	0x080148a8
 800401c:	10624dd3 	.word	0x10624dd3

08004020 <StringFIFORemove>:

uint8_t StringFIFORemove(struct sStringFIFO* fifo, uint8_t* string)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint16_t i, pos;
  uint16_t used = StringFIFOUsed(fifo);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ff84 	bl	8003f38 <StringFIFOUsed>
 8004030:	4603      	mov	r3, r0
 8004032:	81fb      	strh	r3, [r7, #14]
  uint16_t h_length, t_length;
  int16_t len;

  if (fifo->head == fifo->tail)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 20fa 	ldrb.w	r2, [r3, #250]	; 0xfa
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004040:	429a      	cmp	r2, r3
 8004042:	d101      	bne.n	8004048 <StringFIFORemove+0x28>
  {
	  //printf("Empty fifo.\n");
    return 3;
 8004044:	2303      	movs	r3, #3
 8004046:	e09e      	b.n	8004186 <StringFIFORemove+0x166>
  }

  for (i=0; i<used; i++)
 8004048:	2300      	movs	r3, #0
 800404a:	82fb      	strh	r3, [r7, #22]
 800404c:	e095      	b.n	800417a <StringFIFORemove+0x15a>
  {
    pos = (fifo->head + i) % FIFO_BUFFER_SIZE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004054:	461a      	mov	r2, r3
 8004056:	8afb      	ldrh	r3, [r7, #22]
 8004058:	4413      	add	r3, r2
 800405a:	4a4d      	ldr	r2, [pc, #308]	; (8004190 <StringFIFORemove+0x170>)
 800405c:	fb82 1203 	smull	r1, r2, r2, r3
 8004060:	1111      	asrs	r1, r2, #4
 8004062:	17da      	asrs	r2, r3, #31
 8004064:	1a8a      	subs	r2, r1, r2
 8004066:	21fa      	movs	r1, #250	; 0xfa
 8004068:	fb01 f202 	mul.w	r2, r1, r2
 800406c:	1a9a      	subs	r2, r3, r2
 800406e:	4613      	mov	r3, r2
 8004070:	81bb      	strh	r3, [r7, #12]
    if ((fifo->buffer[pos] == '\n') || (fifo->buffer[pos] == '\r'))
 8004072:	89bb      	ldrh	r3, [r7, #12]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	5cd3      	ldrb	r3, [r2, r3]
 8004078:	2b0a      	cmp	r3, #10
 800407a:	d004      	beq.n	8004086 <StringFIFORemove+0x66>
 800407c:	89bb      	ldrh	r3, [r7, #12]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	5cd3      	ldrb	r3, [r2, r3]
 8004082:	2b0d      	cmp	r3, #13
 8004084:	d176      	bne.n	8004174 <StringFIFORemove+0x154>
    {
      if (i == 0)
 8004086:	8afb      	ldrh	r3, [r7, #22]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d116      	bne.n	80040ba <StringFIFORemove+0x9a>
      {
        fifo->head = (fifo->head + 1) % FIFO_BUFFER_SIZE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004092:	3301      	adds	r3, #1
 8004094:	4a3e      	ldr	r2, [pc, #248]	; (8004190 <StringFIFORemove+0x170>)
 8004096:	fb82 1203 	smull	r1, r2, r2, r3
 800409a:	1111      	asrs	r1, r2, #4
 800409c:	17da      	asrs	r2, r3, #31
 800409e:	1a8a      	subs	r2, r1, r2
 80040a0:	21fa      	movs	r1, #250	; 0xfa
 80040a2:	fb01 f202 	mul.w	r2, r1, r2
 80040a6:	1a9a      	subs	r2, r3, r2
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        string[0] = 0;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
//        printf("Zero length string in fifo.\n");
        return 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e065      	b.n	8004186 <StringFIFORemove+0x166>
      }
      len = (pos - fifo->head);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	89ba      	ldrh	r2, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	823b      	strh	r3, [r7, #16]
      if (len < 0)
 80040ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	da03      	bge.n	80040da <StringFIFORemove+0xba>
        len += FIFO_BUFFER_SIZE;
 80040d2:	8a3b      	ldrh	r3, [r7, #16]
 80040d4:	33fa      	adds	r3, #250	; 0xfa
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	823b      	strh	r3, [r7, #16]
      if (len > (FIFO_BUFFER_SIZE - fifo->head))
 80040da:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80040e4:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 80040e8:	429a      	cmp	r2, r3
 80040ea:	dd0b      	ble.n	8004104 <StringFIFORemove+0xe4>
      {
        h_length = FIFO_BUFFER_SIZE - fifo->head;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 80040f8:	82bb      	strh	r3, [r7, #20]
        t_length = len - h_length;
 80040fa:	8a3a      	ldrh	r2, [r7, #16]
 80040fc:	8abb      	ldrh	r3, [r7, #20]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	827b      	strh	r3, [r7, #18]
 8004102:	e003      	b.n	800410c <StringFIFORemove+0xec>
      }
      else
      {
        h_length = len;
 8004104:	8a3b      	ldrh	r3, [r7, #16]
 8004106:	82bb      	strh	r3, [r7, #20]
        t_length = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	827b      	strh	r3, [r7, #18]
      }
      memcpy(string, &fifo->buffer[fifo->head], h_length);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4413      	add	r3, r2
 8004118:	8aba      	ldrh	r2, [r7, #20]
 800411a:	4619      	mov	r1, r3
 800411c:	6838      	ldr	r0, [r7, #0]
 800411e:	f00a fbe1 	bl	800e8e4 <memcpy>
      if (t_length)
 8004122:	8a7b      	ldrh	r3, [r7, #18]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <StringFIFORemove+0x118>
        memcpy(&string[h_length], fifo->buffer, t_length);
 8004128:	8abb      	ldrh	r3, [r7, #20]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	4413      	add	r3, r2
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	8a7a      	ldrh	r2, [r7, #18]
 8004132:	4618      	mov	r0, r3
 8004134:	f00a fbd6 	bl	800e8e4 <memcpy>
      fifo->head = (fifo->head + len + 1) % FIFO_BUFFER_SIZE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800413e:	461a      	mov	r2, r3
 8004140:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004144:	4413      	add	r3, r2
 8004146:	3301      	adds	r3, #1
 8004148:	4a11      	ldr	r2, [pc, #68]	; (8004190 <StringFIFORemove+0x170>)
 800414a:	fb82 1203 	smull	r1, r2, r2, r3
 800414e:	1111      	asrs	r1, r2, #4
 8004150:	17da      	asrs	r2, r3, #31
 8004152:	1a8a      	subs	r2, r1, r2
 8004154:	21fa      	movs	r1, #250	; 0xfa
 8004156:	fb01 f202 	mul.w	r2, r1, r2
 800415a:	1a9a      	subs	r2, r3, r2
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      string[len] = 0;
 8004164:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	4413      	add	r3, r2
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
      return 0;
 8004170:	2300      	movs	r3, #0
 8004172:	e008      	b.n	8004186 <StringFIFORemove+0x166>
  for (i=0; i<used; i++)
 8004174:	8afb      	ldrh	r3, [r7, #22]
 8004176:	3301      	adds	r3, #1
 8004178:	82fb      	strh	r3, [r7, #22]
 800417a:	8afa      	ldrh	r2, [r7, #22]
 800417c:	89fb      	ldrh	r3, [r7, #14]
 800417e:	429a      	cmp	r2, r3
 8004180:	f4ff af65 	bcc.w	800404e <StringFIFORemove+0x2e>
    }
  }
//  printf("Fifo has no terminator\n");
  return 2;
 8004184:	2302      	movs	r3, #2
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	10624dd3 	.word	0x10624dd3

08004194 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
	return 1;
 8004198:	2301      	movs	r3, #1
}
 800419a:	4618      	mov	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <_kill>:

int _kill(int pid, int sig)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041ae:	f00a fb6f 	bl	800e890 <__errno>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2216      	movs	r2, #22
 80041b6:	601a      	str	r2, [r3, #0]
	return -1;
 80041b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <_exit>:

void _exit (int status)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041cc:	f04f 31ff 	mov.w	r1, #4294967295
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ffe7 	bl	80041a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041d6:	e7fe      	b.n	80041d6 <_exit+0x12>

080041d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	e00a      	b.n	8004200 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041ea:	f3af 8000 	nop.w
 80041ee:	4601      	mov	r1, r0
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	60ba      	str	r2, [r7, #8]
 80041f6:	b2ca      	uxtb	r2, r1
 80041f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	3301      	adds	r3, #1
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	429a      	cmp	r2, r3
 8004206:	dbf0      	blt.n	80041ea <_read+0x12>
	}

return len;
 8004208:	687b      	ldr	r3, [r7, #4]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
	return -1;
 800421a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800423a:	605a      	str	r2, [r3, #4]
	return 0;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <_isatty>:

int _isatty(int file)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
	return 1;
 8004252:	2301      	movs	r3, #1
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
	return 0;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004284:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <_sbrk+0x5c>)
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <_sbrk+0x60>)
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004290:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <_sbrk+0x64>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004298:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <_sbrk+0x64>)
 800429a:	4a12      	ldr	r2, [pc, #72]	; (80042e4 <_sbrk+0x68>)
 800429c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800429e:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <_sbrk+0x64>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d207      	bcs.n	80042bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042ac:	f00a faf0 	bl	800e890 <__errno>
 80042b0:	4603      	mov	r3, r0
 80042b2:	220c      	movs	r2, #12
 80042b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ba:	e009      	b.n	80042d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <_sbrk+0x64>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <_sbrk+0x64>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4413      	add	r3, r2
 80042ca:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <_sbrk+0x64>)
 80042cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042ce:	68fb      	ldr	r3, [r7, #12]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20030000 	.word	0x20030000
 80042dc:	00000400 	.word	0x00000400
 80042e0:	20001d5c 	.word	0x20001d5c
 80042e4:	20003150 	.word	0x20003150

080042e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <SystemInit+0x20>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f2:	4a05      	ldr	r2, [pc, #20]	; (8004308 <SystemInit+0x20>)
 80042f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042fc:	bf00      	nop
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	e000ed00 	.word	0xe000ed00

0800430c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800430c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004344 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004310:	480d      	ldr	r0, [pc, #52]	; (8004348 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004312:	490e      	ldr	r1, [pc, #56]	; (800434c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004314:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004318:	e002      	b.n	8004320 <LoopCopyDataInit>

0800431a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800431a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800431c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800431e:	3304      	adds	r3, #4

08004320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004324:	d3f9      	bcc.n	800431a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004326:	4a0b      	ldr	r2, [pc, #44]	; (8004354 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004328:	4c0b      	ldr	r4, [pc, #44]	; (8004358 <LoopFillZerobss+0x26>)
  movs r3, #0
 800432a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800432c:	e001      	b.n	8004332 <LoopFillZerobss>

0800432e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800432e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004330:	3204      	adds	r2, #4

08004332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004334:	d3fb      	bcc.n	800432e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004336:	f7ff ffd7 	bl	80042e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800433a:	f00a faaf 	bl	800e89c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800433e:	f7ff f83f 	bl	80033c0 <main>
  bx  lr    
 8004342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004344:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800434c:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8004350:	08014dec 	.word	0x08014dec
  ldr r2, =_sbss
 8004354:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8004358:	20003150 	.word	0x20003150

0800435c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800435c:	e7fe      	b.n	800435c <ADC_IRQHandler>
	...

08004360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004364:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <HAL_Init+0x40>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a0d      	ldr	r2, [pc, #52]	; (80043a0 <HAL_Init+0x40>)
 800436a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800436e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_Init+0x40>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <HAL_Init+0x40>)
 8004376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800437a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800437c:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <HAL_Init+0x40>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <HAL_Init+0x40>)
 8004382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004388:	2003      	movs	r0, #3
 800438a:	f000 f94f 	bl	800462c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800438e:	200f      	movs	r0, #15
 8004390:	f000 f808 	bl	80043a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004394:	f7ff fc0e 	bl	8003bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40023c00 	.word	0x40023c00

080043a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043ac:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <HAL_InitTick+0x54>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_InitTick+0x58>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f967 	bl	8004696 <HAL_SYSTICK_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e00e      	b.n	80043f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b0f      	cmp	r3, #15
 80043d6:	d80a      	bhi.n	80043ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d8:	2200      	movs	r2, #0
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295
 80043e0:	f000 f92f 	bl	8004642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e4:	4a06      	ldr	r2, [pc, #24]	; (8004400 <HAL_InitTick+0x5c>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000014 	.word	0x20000014
 80043fc:	2000001c 	.word	0x2000001c
 8004400:	20000018 	.word	0x20000018

08004404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_IncTick+0x20>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_IncTick+0x24>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4413      	add	r3, r2
 8004414:	4a04      	ldr	r2, [pc, #16]	; (8004428 <HAL_IncTick+0x24>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	2000001c 	.word	0x2000001c
 8004428:	20001d60 	.word	0x20001d60

0800442c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return uwTick;
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_GetTick+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20001d60 	.word	0x20001d60

08004444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800444c:	f7ff ffee 	bl	800442c <HAL_GetTick>
 8004450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d005      	beq.n	800446a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_Delay+0x44>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800446a:	bf00      	nop
 800446c:	f7ff ffde 	bl	800442c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	429a      	cmp	r2, r3
 800447a:	d8f7      	bhi.n	800446c <HAL_Delay+0x28>
  {
  }
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	2000001c 	.word	0x2000001c

0800448c <__NVIC_SetPriorityGrouping>:
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800449c:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a8:	4013      	ands	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044be:	4a04      	ldr	r2, [pc, #16]	; (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	60d3      	str	r3, [r2, #12]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_GetPriorityGrouping>:
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <__NVIC_GetPriorityGrouping+0x18>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 0307 	and.w	r3, r3, #7
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <__NVIC_EnableIRQ>:
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	db0b      	blt.n	800451a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	4907      	ldr	r1, [pc, #28]	; (8004528 <__NVIC_EnableIRQ+0x38>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2001      	movs	r0, #1
 8004512:	fa00 f202 	lsl.w	r2, r0, r2
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000e100 	.word	0xe000e100

0800452c <__NVIC_SetPriority>:
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	; (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	; (800457c <__NVIC_SetPriority+0x50>)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <NVIC_EncodePriority>:
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	; 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f1c3 0307 	rsb	r3, r3, #7
 800459a:	2b04      	cmp	r3, #4
 800459c:	bf28      	it	cs
 800459e:	2304      	movcs	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d902      	bls.n	80045b0 <NVIC_EncodePriority+0x30>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3b03      	subs	r3, #3
 80045ae:	e000      	b.n	80045b2 <NVIC_EncodePriority+0x32>
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	401a      	ands	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	4313      	orrs	r3, r2
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	; 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <SysTick_Config>:
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f8:	d301      	bcc.n	80045fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80045fa:	2301      	movs	r3, #1
 80045fc:	e00f      	b.n	800461e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045fe:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <SysTick_Config+0x40>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3b01      	subs	r3, #1
 8004604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004606:	210f      	movs	r1, #15
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	f7ff ff8e 	bl	800452c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <SysTick_Config+0x40>)
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004616:	4b04      	ldr	r3, [pc, #16]	; (8004628 <SysTick_Config+0x40>)
 8004618:	2207      	movs	r2, #7
 800461a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	e000e010 	.word	0xe000e010

0800462c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ff29 	bl	800448c <__NVIC_SetPriorityGrouping>
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	4603      	mov	r3, r0
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004654:	f7ff ff3e 	bl	80044d4 <__NVIC_GetPriorityGrouping>
 8004658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	6978      	ldr	r0, [r7, #20]
 8004660:	f7ff ff8e 	bl	8004580 <NVIC_EncodePriority>
 8004664:	4602      	mov	r2, r0
 8004666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800466a:	4611      	mov	r1, r2
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ff5d 	bl	800452c <__NVIC_SetPriority>
}
 8004672:	bf00      	nop
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	4603      	mov	r3, r0
 8004682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff31 	bl	80044f0 <__NVIC_EnableIRQ>
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff ffa2 	bl	80045e8 <SysTick_Config>
 80046a4:	4603      	mov	r3, r0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d004      	beq.n	80046cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2280      	movs	r2, #128	; 0x80
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e00c      	b.n	80046e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2205      	movs	r2, #5
 80046d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004700:	b2db      	uxtb	r3, r3
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	; 0x24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	e177      	b.n	8004a1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800472c:	2201      	movs	r2, #1
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4013      	ands	r3, r2
 800473e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	429a      	cmp	r2, r3
 8004746:	f040 8166 	bne.w	8004a16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b01      	cmp	r3, #1
 8004754:	d005      	beq.n	8004762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800475e:	2b02      	cmp	r3, #2
 8004760:	d130      	bne.n	80047c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	2203      	movs	r2, #3
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	43db      	mvns	r3, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4013      	ands	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4313      	orrs	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004798:	2201      	movs	r2, #1
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	f003 0201 	and.w	r2, r3, #1
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d017      	beq.n	8004800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	2203      	movs	r2, #3
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d123      	bne.n	8004854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	08da      	lsrs	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3208      	adds	r2, #8
 8004814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	220f      	movs	r2, #15
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	43db      	mvns	r3, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	08da      	lsrs	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3208      	adds	r2, #8
 800484e:	69b9      	ldr	r1, [r7, #24]
 8004850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	2203      	movs	r2, #3
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4013      	ands	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 0203 	and.w	r2, r3, #3
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4313      	orrs	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80c0 	beq.w	8004a16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	4b66      	ldr	r3, [pc, #408]	; (8004a34 <HAL_GPIO_Init+0x324>)
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	4a65      	ldr	r2, [pc, #404]	; (8004a34 <HAL_GPIO_Init+0x324>)
 80048a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a4:	6453      	str	r3, [r2, #68]	; 0x44
 80048a6:	4b63      	ldr	r3, [pc, #396]	; (8004a34 <HAL_GPIO_Init+0x324>)
 80048a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048b2:	4a61      	ldr	r2, [pc, #388]	; (8004a38 <HAL_GPIO_Init+0x328>)
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	3302      	adds	r3, #2
 80048ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	220f      	movs	r2, #15
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4013      	ands	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a58      	ldr	r2, [pc, #352]	; (8004a3c <HAL_GPIO_Init+0x32c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d037      	beq.n	800494e <HAL_GPIO_Init+0x23e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a57      	ldr	r2, [pc, #348]	; (8004a40 <HAL_GPIO_Init+0x330>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d031      	beq.n	800494a <HAL_GPIO_Init+0x23a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a56      	ldr	r2, [pc, #344]	; (8004a44 <HAL_GPIO_Init+0x334>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02b      	beq.n	8004946 <HAL_GPIO_Init+0x236>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a55      	ldr	r2, [pc, #340]	; (8004a48 <HAL_GPIO_Init+0x338>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d025      	beq.n	8004942 <HAL_GPIO_Init+0x232>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a54      	ldr	r2, [pc, #336]	; (8004a4c <HAL_GPIO_Init+0x33c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <HAL_GPIO_Init+0x22e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a53      	ldr	r2, [pc, #332]	; (8004a50 <HAL_GPIO_Init+0x340>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d019      	beq.n	800493a <HAL_GPIO_Init+0x22a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a52      	ldr	r2, [pc, #328]	; (8004a54 <HAL_GPIO_Init+0x344>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_GPIO_Init+0x226>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a51      	ldr	r2, [pc, #324]	; (8004a58 <HAL_GPIO_Init+0x348>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00d      	beq.n	8004932 <HAL_GPIO_Init+0x222>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a50      	ldr	r2, [pc, #320]	; (8004a5c <HAL_GPIO_Init+0x34c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <HAL_GPIO_Init+0x21e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a4f      	ldr	r2, [pc, #316]	; (8004a60 <HAL_GPIO_Init+0x350>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <HAL_GPIO_Init+0x21a>
 8004926:	2309      	movs	r3, #9
 8004928:	e012      	b.n	8004950 <HAL_GPIO_Init+0x240>
 800492a:	230a      	movs	r3, #10
 800492c:	e010      	b.n	8004950 <HAL_GPIO_Init+0x240>
 800492e:	2308      	movs	r3, #8
 8004930:	e00e      	b.n	8004950 <HAL_GPIO_Init+0x240>
 8004932:	2307      	movs	r3, #7
 8004934:	e00c      	b.n	8004950 <HAL_GPIO_Init+0x240>
 8004936:	2306      	movs	r3, #6
 8004938:	e00a      	b.n	8004950 <HAL_GPIO_Init+0x240>
 800493a:	2305      	movs	r3, #5
 800493c:	e008      	b.n	8004950 <HAL_GPIO_Init+0x240>
 800493e:	2304      	movs	r3, #4
 8004940:	e006      	b.n	8004950 <HAL_GPIO_Init+0x240>
 8004942:	2303      	movs	r3, #3
 8004944:	e004      	b.n	8004950 <HAL_GPIO_Init+0x240>
 8004946:	2302      	movs	r3, #2
 8004948:	e002      	b.n	8004950 <HAL_GPIO_Init+0x240>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_GPIO_Init+0x240>
 800494e:	2300      	movs	r3, #0
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	f002 0203 	and.w	r2, r2, #3
 8004956:	0092      	lsls	r2, r2, #2
 8004958:	4093      	lsls	r3, r2
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4313      	orrs	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004960:	4935      	ldr	r1, [pc, #212]	; (8004a38 <HAL_GPIO_Init+0x328>)
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	089b      	lsrs	r3, r3, #2
 8004966:	3302      	adds	r3, #2
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800496e:	4b3d      	ldr	r3, [pc, #244]	; (8004a64 <HAL_GPIO_Init+0x354>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	43db      	mvns	r3, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4013      	ands	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004992:	4a34      	ldr	r2, [pc, #208]	; (8004a64 <HAL_GPIO_Init+0x354>)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004998:	4b32      	ldr	r3, [pc, #200]	; (8004a64 <HAL_GPIO_Init+0x354>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049bc:	4a29      	ldr	r2, [pc, #164]	; (8004a64 <HAL_GPIO_Init+0x354>)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049c2:	4b28      	ldr	r3, [pc, #160]	; (8004a64 <HAL_GPIO_Init+0x354>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049e6:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <HAL_GPIO_Init+0x354>)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049ec:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <HAL_GPIO_Init+0x354>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	43db      	mvns	r3, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4013      	ands	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a10:	4a14      	ldr	r2, [pc, #80]	; (8004a64 <HAL_GPIO_Init+0x354>)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b0f      	cmp	r3, #15
 8004a20:	f67f ae84 	bls.w	800472c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	3724      	adds	r7, #36	; 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800
 8004a38:	40013800 	.word	0x40013800
 8004a3c:	40020000 	.word	0x40020000
 8004a40:	40020400 	.word	0x40020400
 8004a44:	40020800 	.word	0x40020800
 8004a48:	40020c00 	.word	0x40020c00
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	40021400 	.word	0x40021400
 8004a54:	40021800 	.word	0x40021800
 8004a58:	40021c00 	.word	0x40021c00
 8004a5c:	40022000 	.word	0x40022000
 8004a60:	40022400 	.word	0x40022400
 8004a64:	40013c00 	.word	0x40013c00

08004a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	807b      	strh	r3, [r7, #2]
 8004a74:	4613      	mov	r3, r2
 8004a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a78:	787b      	ldrb	r3, [r7, #1]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a7e:	887a      	ldrh	r2, [r7, #2]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a84:	e003      	b.n	8004a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a86:	887b      	ldrh	r3, [r7, #2]
 8004a88:	041a      	lsls	r2, r3, #16
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	619a      	str	r2, [r3, #24]
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e12b      	b.n	8004d06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff f89e 	bl	8003c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2224      	movs	r2, #36	; 0x24
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0201 	bic.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004afe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b00:	f004 fba4 	bl	800924c <HAL_RCC_GetPCLK1Freq>
 8004b04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	4a81      	ldr	r2, [pc, #516]	; (8004d10 <HAL_I2C_Init+0x274>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d807      	bhi.n	8004b20 <HAL_I2C_Init+0x84>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a80      	ldr	r2, [pc, #512]	; (8004d14 <HAL_I2C_Init+0x278>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	bf94      	ite	ls
 8004b18:	2301      	movls	r3, #1
 8004b1a:	2300      	movhi	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e006      	b.n	8004b2e <HAL_I2C_Init+0x92>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4a7d      	ldr	r2, [pc, #500]	; (8004d18 <HAL_I2C_Init+0x27c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bf94      	ite	ls
 8004b28:	2301      	movls	r3, #1
 8004b2a:	2300      	movhi	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e0e7      	b.n	8004d06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4a78      	ldr	r2, [pc, #480]	; (8004d1c <HAL_I2C_Init+0x280>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	0c9b      	lsrs	r3, r3, #18
 8004b40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4a6a      	ldr	r2, [pc, #424]	; (8004d10 <HAL_I2C_Init+0x274>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d802      	bhi.n	8004b70 <HAL_I2C_Init+0xd4>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	e009      	b.n	8004b84 <HAL_I2C_Init+0xe8>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	4a69      	ldr	r2, [pc, #420]	; (8004d20 <HAL_I2C_Init+0x284>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	099b      	lsrs	r3, r3, #6
 8004b82:	3301      	adds	r3, #1
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	495c      	ldr	r1, [pc, #368]	; (8004d10 <HAL_I2C_Init+0x274>)
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	d819      	bhi.n	8004bd8 <HAL_I2C_Init+0x13c>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1e59      	subs	r1, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bb2:	1c59      	adds	r1, r3, #1
 8004bb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bb8:	400b      	ands	r3, r1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_I2C_Init+0x138>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1e59      	subs	r1, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bcc:	3301      	adds	r3, #1
 8004bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd2:	e051      	b.n	8004c78 <HAL_I2C_Init+0x1dc>
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	e04f      	b.n	8004c78 <HAL_I2C_Init+0x1dc>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d111      	bne.n	8004c04 <HAL_I2C_Init+0x168>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1e58      	subs	r0, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6859      	ldr	r1, [r3, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	440b      	add	r3, r1
 8004bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	bf0c      	ite	eq
 8004bfc:	2301      	moveq	r3, #1
 8004bfe:	2300      	movne	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	e012      	b.n	8004c2a <HAL_I2C_Init+0x18e>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	1e58      	subs	r0, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6859      	ldr	r1, [r3, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	0099      	lsls	r1, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_I2C_Init+0x196>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e022      	b.n	8004c78 <HAL_I2C_Init+0x1dc>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10e      	bne.n	8004c58 <HAL_I2C_Init+0x1bc>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1e58      	subs	r0, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6859      	ldr	r1, [r3, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	440b      	add	r3, r1
 8004c48:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c56:	e00f      	b.n	8004c78 <HAL_I2C_Init+0x1dc>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	1e58      	subs	r0, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6859      	ldr	r1, [r3, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	0099      	lsls	r1, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c6e:	3301      	adds	r3, #1
 8004c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	6809      	ldr	r1, [r1, #0]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ca6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6911      	ldr	r1, [r2, #16]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68d2      	ldr	r2, [r2, #12]
 8004cb2:	4311      	orrs	r1, r2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695a      	ldr	r2, [r3, #20]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	000186a0 	.word	0x000186a0
 8004d14:	001e847f 	.word	0x001e847f
 8004d18:	003d08ff 	.word	0x003d08ff
 8004d1c:	431bde83 	.word	0x431bde83
 8004d20:	10624dd3 	.word	0x10624dd3

08004d24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	460b      	mov	r3, r1
 8004d32:	817b      	strh	r3, [r7, #10]
 8004d34:	4613      	mov	r3, r2
 8004d36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d38:	f7ff fb78 	bl	800442c <HAL_GetTick>
 8004d3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	f040 80e0 	bne.w	8004f0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	2319      	movs	r3, #25
 8004d52:	2201      	movs	r2, #1
 8004d54:	4970      	ldr	r1, [pc, #448]	; (8004f18 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f002 f8e6 	bl	8006f28 <I2C_WaitOnFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d62:	2302      	movs	r3, #2
 8004d64:	e0d3      	b.n	8004f0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_I2C_Master_Transmit+0x50>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e0cc      	b.n	8004f0e <HAL_I2C_Master_Transmit+0x1ea>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d007      	beq.n	8004d9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2221      	movs	r2, #33	; 0x21
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2210      	movs	r2, #16
 8004db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	893a      	ldrh	r2, [r7, #8]
 8004dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4a50      	ldr	r2, [pc, #320]	; (8004f1c <HAL_I2C_Master_Transmit+0x1f8>)
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ddc:	8979      	ldrh	r1, [r7, #10]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	6a3a      	ldr	r2, [r7, #32]
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f001 fea8 	bl	8006b38 <I2C_MasterRequestWrite>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e08d      	b.n	8004f0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df2:	2300      	movs	r3, #0
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e08:	e066      	b.n	8004ed8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	6a39      	ldr	r1, [r7, #32]
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f002 f960 	bl	80070d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00d      	beq.n	8004e36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d107      	bne.n	8004e32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e06b      	b.n	8004f0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	781a      	ldrb	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d11b      	bne.n	8004eac <HAL_I2C_Master_Transmit+0x188>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d017      	beq.n	8004eac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	781a      	ldrb	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	6a39      	ldr	r1, [r7, #32]
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f002 f950 	bl	8007156 <I2C_WaitOnBTFFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00d      	beq.n	8004ed8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d107      	bne.n	8004ed4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e01a      	b.n	8004f0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d194      	bne.n	8004e0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e000      	b.n	8004f0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f0c:	2302      	movs	r3, #2
  }
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	00100002 	.word	0x00100002
 8004f1c:	ffff0000 	.word	0xffff0000

08004f20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08c      	sub	sp, #48	; 0x30
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	607a      	str	r2, [r7, #4]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	817b      	strh	r3, [r7, #10]
 8004f30:	4613      	mov	r3, r2
 8004f32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f34:	f7ff fa7a 	bl	800442c <HAL_GetTick>
 8004f38:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	f040 820b 	bne.w	800535e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2319      	movs	r3, #25
 8004f4e:	2201      	movs	r2, #1
 8004f50:	497c      	ldr	r1, [pc, #496]	; (8005144 <HAL_I2C_Master_Receive+0x224>)
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f001 ffe8 	bl	8006f28 <I2C_WaitOnFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e1fe      	b.n	8005360 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_I2C_Master_Receive+0x50>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e1f7      	b.n	8005360 <HAL_I2C_Master_Receive+0x440>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d007      	beq.n	8004f96 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0201 	orr.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2222      	movs	r2, #34	; 0x22
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2210      	movs	r2, #16
 8004fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	893a      	ldrh	r2, [r7, #8]
 8004fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a5c      	ldr	r2, [pc, #368]	; (8005148 <HAL_I2C_Master_Receive+0x228>)
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fd8:	8979      	ldrh	r1, [r7, #10]
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f001 fe2c 	bl	8006c3c <I2C_MasterRequestRead>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e1b8      	b.n	8005360 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d113      	bne.n	800501e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	623b      	str	r3, [r7, #32]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	623b      	str	r3, [r7, #32]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e18c      	b.n	8005338 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	2b01      	cmp	r3, #1
 8005024:	d11b      	bne.n	800505e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005036:	2300      	movs	r3, #0
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	e16c      	b.n	8005338 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005062:	2b02      	cmp	r3, #2
 8005064:	d11b      	bne.n	800509e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005074:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005084:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	e14c      	b.n	8005338 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050c4:	e138      	b.n	8005338 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	f200 80f1 	bhi.w	80052b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d123      	bne.n	8005120 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f002 f8ad 	bl	800723c <I2C_WaitOnRXNEFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e139      	b.n	8005360 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800511e:	e10b      	b.n	8005338 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005124:	2b02      	cmp	r3, #2
 8005126:	d14e      	bne.n	80051c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	2200      	movs	r2, #0
 8005130:	4906      	ldr	r1, [pc, #24]	; (800514c <HAL_I2C_Master_Receive+0x22c>)
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f001 fef8 	bl	8006f28 <I2C_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d008      	beq.n	8005150 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e10e      	b.n	8005360 <HAL_I2C_Master_Receive+0x440>
 8005142:	bf00      	nop
 8005144:	00100002 	.word	0x00100002
 8005148:	ffff0000 	.word	0xffff0000
 800514c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051c4:	e0b8      	b.n	8005338 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	2200      	movs	r2, #0
 80051ce:	4966      	ldr	r1, [pc, #408]	; (8005368 <HAL_I2C_Master_Receive+0x448>)
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f001 fea9 	bl	8006f28 <I2C_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0bf      	b.n	8005360 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	2200      	movs	r2, #0
 800522a:	494f      	ldr	r1, [pc, #316]	; (8005368 <HAL_I2C_Master_Receive+0x448>)
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f001 fe7b 	bl	8006f28 <I2C_WaitOnFlagUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e091      	b.n	8005360 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052b0:	e042      	b.n	8005338 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f001 ffc0 	bl	800723c <I2C_WaitOnRXNEFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e04c      	b.n	8005360 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b04      	cmp	r3, #4
 8005304:	d118      	bne.n	8005338 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	f47f aec2 	bne.w	80050c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	e000      	b.n	8005360 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800535e:	2302      	movs	r3, #2
  }
}
 8005360:	4618      	mov	r0, r3
 8005362:	3728      	adds	r7, #40	; 0x28
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	00010004 	.word	0x00010004

0800536c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800538c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005394:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	2b10      	cmp	r3, #16
 800539a:	d003      	beq.n	80053a4 <HAL_I2C_EV_IRQHandler+0x38>
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	f040 80c1 	bne.w	8005526 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10d      	bne.n	80053da <HAL_I2C_EV_IRQHandler+0x6e>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80053c4:	d003      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x62>
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80053cc:	d101      	bne.n	80053d2 <HAL_I2C_EV_IRQHandler+0x66>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <HAL_I2C_EV_IRQHandler+0x68>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	f000 8132 	beq.w	800563e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00c      	beq.n	80053fe <HAL_I2C_EV_IRQHandler+0x92>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	0a5b      	lsrs	r3, r3, #9
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d006      	beq.n	80053fe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 ffa8 	bl	8007346 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fd83 	bl	8005f02 <I2C_Master_SB>
 80053fc:	e092      	b.n	8005524 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	08db      	lsrs	r3, r3, #3
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <HAL_I2C_EV_IRQHandler+0xb2>
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	0a5b      	lsrs	r3, r3, #9
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fdf9 	bl	800600e <I2C_Master_ADD10>
 800541c:	e082      	b.n	8005524 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	085b      	lsrs	r3, r3, #1
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d009      	beq.n	800543e <HAL_I2C_EV_IRQHandler+0xd2>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	0a5b      	lsrs	r3, r3, #9
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fe13 	bl	8006062 <I2C_Master_ADDR>
 800543c:	e072      	b.n	8005524 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	089b      	lsrs	r3, r3, #2
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d03b      	beq.n	80054c2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005458:	f000 80f3 	beq.w	8005642 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	09db      	lsrs	r3, r3, #7
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00f      	beq.n	8005488 <HAL_I2C_EV_IRQHandler+0x11c>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	0a9b      	lsrs	r3, r3, #10
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <HAL_I2C_EV_IRQHandler+0x11c>
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	089b      	lsrs	r3, r3, #2
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d103      	bne.n	8005488 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f9f3 	bl	800586c <I2C_MasterTransmit_TXE>
 8005486:	e04d      	b.n	8005524 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	089b      	lsrs	r3, r3, #2
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 80d6 	beq.w	8005642 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	0a5b      	lsrs	r3, r3, #9
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80cf 	beq.w	8005642 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054a4:	7bbb      	ldrb	r3, [r7, #14]
 80054a6:	2b21      	cmp	r3, #33	; 0x21
 80054a8:	d103      	bne.n	80054b2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fa7a 	bl	80059a4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054b0:	e0c7      	b.n	8005642 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	f040 80c4 	bne.w	8005642 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fae8 	bl	8005a90 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054c0:	e0bf      	b.n	8005642 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d0:	f000 80b7 	beq.w	8005642 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	099b      	lsrs	r3, r3, #6
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00f      	beq.n	8005500 <HAL_I2C_EV_IRQHandler+0x194>
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	0a9b      	lsrs	r3, r3, #10
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <HAL_I2C_EV_IRQHandler+0x194>
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d103      	bne.n	8005500 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fb5d 	bl	8005bb8 <I2C_MasterReceive_RXNE>
 80054fe:	e011      	b.n	8005524 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	089b      	lsrs	r3, r3, #2
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 809a 	beq.w	8005642 <HAL_I2C_EV_IRQHandler+0x2d6>
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	0a5b      	lsrs	r3, r3, #9
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8093 	beq.w	8005642 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fc06 	bl	8005d2e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005522:	e08e      	b.n	8005642 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005524:	e08d      	b.n	8005642 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d004      	beq.n	8005538 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	e007      	b.n	8005548 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	085b      	lsrs	r3, r3, #1
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d012      	beq.n	800557a <HAL_I2C_EV_IRQHandler+0x20e>
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	0a5b      	lsrs	r3, r3, #9
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00c      	beq.n	800557a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005570:	69b9      	ldr	r1, [r7, #24]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 ffc4 	bl	8006500 <I2C_Slave_ADDR>
 8005578:	e066      	b.n	8005648 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <HAL_I2C_EV_IRQHandler+0x22e>
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	0a5b      	lsrs	r3, r3, #9
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fffe 	bl	8006594 <I2C_Slave_STOPF>
 8005598:	e056      	b.n	8005648 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800559a:	7bbb      	ldrb	r3, [r7, #14]
 800559c:	2b21      	cmp	r3, #33	; 0x21
 800559e:	d002      	beq.n	80055a6 <HAL_I2C_EV_IRQHandler+0x23a>
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	2b29      	cmp	r3, #41	; 0x29
 80055a4:	d125      	bne.n	80055f2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	09db      	lsrs	r3, r3, #7
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00f      	beq.n	80055d2 <HAL_I2C_EV_IRQHandler+0x266>
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	0a9b      	lsrs	r3, r3, #10
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <HAL_I2C_EV_IRQHandler+0x266>
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	089b      	lsrs	r3, r3, #2
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d103      	bne.n	80055d2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 feda 	bl	8006384 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055d0:	e039      	b.n	8005646 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	089b      	lsrs	r3, r3, #2
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d033      	beq.n	8005646 <HAL_I2C_EV_IRQHandler+0x2da>
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	0a5b      	lsrs	r3, r3, #9
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d02d      	beq.n	8005646 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 ff07 	bl	80063fe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055f0:	e029      	b.n	8005646 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	099b      	lsrs	r3, r3, #6
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00f      	beq.n	800561e <HAL_I2C_EV_IRQHandler+0x2b2>
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	0a9b      	lsrs	r3, r3, #10
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <HAL_I2C_EV_IRQHandler+0x2b2>
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	089b      	lsrs	r3, r3, #2
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d103      	bne.n	800561e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 ff12 	bl	8006440 <I2C_SlaveReceive_RXNE>
 800561c:	e014      	b.n	8005648 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	089b      	lsrs	r3, r3, #2
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00e      	beq.n	8005648 <HAL_I2C_EV_IRQHandler+0x2dc>
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	0a5b      	lsrs	r3, r3, #9
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 ff40 	bl	80064bc <I2C_SlaveReceive_BTF>
 800563c:	e004      	b.n	8005648 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800563e:	bf00      	nop
 8005640:	e002      	b.n	8005648 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005642:	bf00      	nop
 8005644:	e000      	b.n	8005648 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005646:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005648:	3720      	adds	r7, #32
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b08a      	sub	sp, #40	; 0x28
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005666:	2300      	movs	r3, #0
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005670:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	0a1b      	lsrs	r3, r3, #8
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00e      	beq.n	800569c <HAL_I2C_ER_IRQHandler+0x4e>
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	f043 0301 	orr.w	r3, r3, #1
 8005690:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800569a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	0a5b      	lsrs	r3, r3, #9
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00e      	beq.n	80056c6 <HAL_I2C_ER_IRQHandler+0x78>
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	0a1b      	lsrs	r3, r3, #8
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	f043 0302 	orr.w	r3, r3, #2
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80056c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	0a9b      	lsrs	r3, r3, #10
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d03f      	beq.n	8005752 <HAL_I2C_ER_IRQHandler+0x104>
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	0a1b      	lsrs	r3, r3, #8
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d039      	beq.n	8005752 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80056de:	7efb      	ldrb	r3, [r7, #27]
 80056e0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80056f8:	7ebb      	ldrb	r3, [r7, #26]
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d112      	bne.n	8005724 <HAL_I2C_ER_IRQHandler+0xd6>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10f      	bne.n	8005724 <HAL_I2C_ER_IRQHandler+0xd6>
 8005704:	7cfb      	ldrb	r3, [r7, #19]
 8005706:	2b21      	cmp	r3, #33	; 0x21
 8005708:	d008      	beq.n	800571c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800570a:	7cfb      	ldrb	r3, [r7, #19]
 800570c:	2b29      	cmp	r3, #41	; 0x29
 800570e:	d005      	beq.n	800571c <HAL_I2C_ER_IRQHandler+0xce>
 8005710:	7cfb      	ldrb	r3, [r7, #19]
 8005712:	2b28      	cmp	r3, #40	; 0x28
 8005714:	d106      	bne.n	8005724 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b21      	cmp	r3, #33	; 0x21
 800571a:	d103      	bne.n	8005724 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 f869 	bl	80067f4 <I2C_Slave_AF>
 8005722:	e016      	b.n	8005752 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800572c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	f043 0304 	orr.w	r3, r3, #4
 8005734:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005736:	7efb      	ldrb	r3, [r7, #27]
 8005738:	2b10      	cmp	r3, #16
 800573a:	d002      	beq.n	8005742 <HAL_I2C_ER_IRQHandler+0xf4>
 800573c:	7efb      	ldrb	r3, [r7, #27]
 800573e:	2b40      	cmp	r3, #64	; 0x40
 8005740:	d107      	bne.n	8005752 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005750:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	0adb      	lsrs	r3, r3, #11
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00e      	beq.n	800577c <HAL_I2C_ER_IRQHandler+0x12e>
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d008      	beq.n	800577c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	f043 0308 	orr.w	r3, r3, #8
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800577a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 f8a0 	bl	80068d4 <I2C_ITError>
  }
}
 8005794:	bf00      	nop
 8005796:	3728      	adds	r7, #40	; 0x28
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
 80057f8:	4613      	mov	r3, r2
 80057fa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005882:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588e:	2b00      	cmp	r3, #0
 8005890:	d150      	bne.n	8005934 <I2C_MasterTransmit_TXE+0xc8>
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b21      	cmp	r3, #33	; 0x21
 8005896:	d14d      	bne.n	8005934 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b08      	cmp	r3, #8
 800589c:	d01d      	beq.n	80058da <I2C_MasterTransmit_TXE+0x6e>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d01a      	beq.n	80058da <I2C_MasterTransmit_TXE+0x6e>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058aa:	d016      	beq.n	80058da <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058ba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2211      	movs	r2, #17
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff ff62 	bl	800579c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058d8:	e060      	b.n	800599c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058e8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b40      	cmp	r3, #64	; 0x40
 8005912:	d107      	bne.n	8005924 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff ff7d 	bl	800581c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005922:	e03b      	b.n	800599c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff ff35 	bl	800579c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005932:	e033      	b.n	800599c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b21      	cmp	r3, #33	; 0x21
 8005938:	d005      	beq.n	8005946 <I2C_MasterTransmit_TXE+0xda>
 800593a:	7bbb      	ldrb	r3, [r7, #14]
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d12d      	bne.n	800599c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	2b22      	cmp	r3, #34	; 0x22
 8005944:	d12a      	bne.n	800599c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d108      	bne.n	8005962 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005960:	e01c      	b.n	800599c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b40      	cmp	r3, #64	; 0x40
 800596c:	d103      	bne.n	8005976 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f88e 	bl	8005a90 <I2C_MemoryTransmit_TXE_BTF>
}
 8005974:	e012      	b.n	800599c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	781a      	ldrb	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800599a:	e7ff      	b.n	800599c <I2C_MasterTransmit_TXE+0x130>
 800599c:	bf00      	nop
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b21      	cmp	r3, #33	; 0x21
 80059bc:	d164      	bne.n	8005a88 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d012      	beq.n	80059ee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	781a      	ldrb	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80059ec:	e04c      	b.n	8005a88 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d01d      	beq.n	8005a30 <I2C_MasterTransmit_BTF+0x8c>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d01a      	beq.n	8005a30 <I2C_MasterTransmit_BTF+0x8c>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a00:	d016      	beq.n	8005a30 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a10:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2211      	movs	r2, #17
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff feb7 	bl	800579c <HAL_I2C_MasterTxCpltCallback>
}
 8005a2e:	e02b      	b.n	8005a88 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a3e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a4e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b40      	cmp	r3, #64	; 0x40
 8005a68:	d107      	bne.n	8005a7a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff fed2 	bl	800581c <HAL_I2C_MemTxCpltCallback>
}
 8005a78:	e006      	b.n	8005a88 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff fe8a 	bl	800579c <HAL_I2C_MasterTxCpltCallback>
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d11d      	bne.n	8005ae4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d10b      	bne.n	8005ac8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac0:	1c9a      	adds	r2, r3, #2
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005ac6:	e073      	b.n	8005bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	121b      	asrs	r3, r3, #8
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ae2:	e065      	b.n	8005bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d10b      	bne.n	8005b04 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b02:	e055      	b.n	8005bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d151      	bne.n	8005bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
 8005b0e:	2b22      	cmp	r3, #34	; 0x22
 8005b10:	d10d      	bne.n	8005b2e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b20:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b2c:	e040      	b.n	8005bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d015      	beq.n	8005b64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b21      	cmp	r3, #33	; 0x21
 8005b3c:	d112      	bne.n	8005b64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b62:	e025      	b.n	8005bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d120      	bne.n	8005bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	2b21      	cmp	r3, #33	; 0x21
 8005b72:	d11d      	bne.n	8005bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b82:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff fe36 	bl	800581c <HAL_I2C_MemTxCpltCallback>
}
 8005bb0:	bf00      	nop
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b22      	cmp	r3, #34	; 0x22
 8005bca:	f040 80ac 	bne.w	8005d26 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d921      	bls.n	8005c20 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	f040 808c 	bne.w	8005d26 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005c1e:	e082      	b.n	8005d26 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d075      	beq.n	8005d14 <I2C_MasterReceive_RXNE+0x15c>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d002      	beq.n	8005c34 <I2C_MasterReceive_RXNE+0x7c>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d16f      	bne.n	8005d14 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 facf 	bl	80071d8 <I2C_WaitOnSTOPRequestThroughIT>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d142      	bne.n	8005cc6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c5e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	d10a      	bne.n	8005cb0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff fdc1 	bl	8005830 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005cae:	e03a      	b.n	8005d26 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2212      	movs	r2, #18
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fd76 	bl	80057b0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005cc4:	e02f      	b.n	8005d26 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cd4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff fd99 	bl	8005844 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005d12:	e008      	b.n	8005d26 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d22:	605a      	str	r2, [r3, #4]
}
 8005d24:	e7ff      	b.n	8005d26 <I2C_MasterReceive_RXNE+0x16e>
 8005d26:	bf00      	nop
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d11b      	bne.n	8005d7e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d54:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005d7c:	e0bd      	b.n	8005efa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d129      	bne.n	8005ddc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d96:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d00a      	beq.n	8005db4 <I2C_MasterReceive_BTF+0x86>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d007      	beq.n	8005db4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005dda:	e08e      	b.n	8005efa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d176      	bne.n	8005ed4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d002      	beq.n	8005df2 <I2C_MasterReceive_BTF+0xc4>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d108      	bne.n	8005e04 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	e019      	b.n	8005e38 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d002      	beq.n	8005e10 <I2C_MasterReceive_BTF+0xe2>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d108      	bne.n	8005e22 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	e00a      	b.n	8005e38 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b10      	cmp	r3, #16
 8005e26:	d007      	beq.n	8005e38 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	d10a      	bne.n	8005ebe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff fcba 	bl	8005830 <HAL_I2C_MemRxCpltCallback>
}
 8005ebc:	e01d      	b.n	8005efa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2212      	movs	r2, #18
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff fc6f 	bl	80057b0 <HAL_I2C_MasterRxCpltCallback>
}
 8005ed2:	e012      	b.n	8005efa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b40      	cmp	r3, #64	; 0x40
 8005f14:	d117      	bne.n	8005f46 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d109      	bne.n	8005f32 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f2e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005f30:	e067      	b.n	8006002 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	f043 0301 	orr.w	r3, r3, #1
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	611a      	str	r2, [r3, #16]
}
 8005f44:	e05d      	b.n	8006002 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f4e:	d133      	bne.n	8005fb8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b21      	cmp	r3, #33	; 0x21
 8005f5a:	d109      	bne.n	8005f70 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f6c:	611a      	str	r2, [r3, #16]
 8005f6e:	e008      	b.n	8005f82 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d004      	beq.n	8005f94 <I2C_Master_SB+0x92>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d108      	bne.n	8005fa6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d032      	beq.n	8006002 <I2C_Master_SB+0x100>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d02d      	beq.n	8006002 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fb4:	605a      	str	r2, [r3, #4]
}
 8005fb6:	e024      	b.n	8006002 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10e      	bne.n	8005fde <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	11db      	asrs	r3, r3, #7
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f003 0306 	and.w	r3, r3, #6
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f063 030f 	orn	r3, r3, #15
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	611a      	str	r2, [r3, #16]
}
 8005fdc:	e011      	b.n	8006002 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d10d      	bne.n	8006002 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	11db      	asrs	r3, r3, #7
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	f003 0306 	and.w	r3, r3, #6
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	f063 030e 	orn	r3, r3, #14
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	611a      	str	r2, [r3, #16]
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	b2da      	uxtb	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <I2C_Master_ADD10+0x26>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d108      	bne.n	8006046 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00c      	beq.n	8006056 <I2C_Master_ADD10+0x48>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d007      	beq.n	8006056 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006054:	605a      	str	r2, [r3, #4]
  }
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006062:	b480      	push	{r7}
 8006064:	b091      	sub	sp, #68	; 0x44
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006070:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b22      	cmp	r3, #34	; 0x22
 800608a:	f040 8169 	bne.w	8006360 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10f      	bne.n	80060b6 <I2C_Master_ADDR+0x54>
 8006096:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800609a:	2b40      	cmp	r3, #64	; 0x40
 800609c:	d10b      	bne.n	80060b6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800609e:	2300      	movs	r3, #0
 80060a0:	633b      	str	r3, [r7, #48]	; 0x30
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	633b      	str	r3, [r7, #48]	; 0x30
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	e160      	b.n	8006378 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d11d      	bne.n	80060fa <I2C_Master_ADDR+0x98>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060c6:	d118      	bne.n	80060fa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c8:	2300      	movs	r3, #0
 80060ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	651a      	str	r2, [r3, #80]	; 0x50
 80060f8:	e13e      	b.n	8006378 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d113      	bne.n	800612c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006104:	2300      	movs	r3, #0
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	62bb      	str	r3, [r7, #40]	; 0x28
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e115      	b.n	8006358 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b01      	cmp	r3, #1
 8006134:	f040 808a 	bne.w	800624c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800613e:	d137      	bne.n	80061b0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800614e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800615a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800615e:	d113      	bne.n	8006188 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800616e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006170:	2300      	movs	r3, #0
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	e0e7      	b.n	8006358 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006188:	2300      	movs	r3, #0
 800618a:	623b      	str	r3, [r7, #32]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	623b      	str	r3, [r7, #32]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	623b      	str	r3, [r7, #32]
 800619c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	e0d3      	b.n	8006358 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d02e      	beq.n	8006214 <I2C_Master_ADDR+0x1b2>
 80061b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b8:	2b20      	cmp	r3, #32
 80061ba:	d02b      	beq.n	8006214 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	2b12      	cmp	r3, #18
 80061c0:	d102      	bne.n	80061c8 <I2C_Master_ADDR+0x166>
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d125      	bne.n	8006214 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d00e      	beq.n	80061ec <I2C_Master_ADDR+0x18a>
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d00b      	beq.n	80061ec <I2C_Master_ADDR+0x18a>
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	2b10      	cmp	r3, #16
 80061d8:	d008      	beq.n	80061ec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e007      	b.n	80061fc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061fa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061fc:	2300      	movs	r3, #0
 80061fe:	61fb      	str	r3, [r7, #28]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	e0a1      	b.n	8006358 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006222:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006224:	2300      	movs	r3, #0
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	61bb      	str	r3, [r7, #24]
 8006238:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	e085      	b.n	8006358 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d14d      	bne.n	80062f2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	2b04      	cmp	r3, #4
 800625a:	d016      	beq.n	800628a <I2C_Master_ADDR+0x228>
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	2b02      	cmp	r3, #2
 8006260:	d013      	beq.n	800628a <I2C_Master_ADDR+0x228>
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	2b10      	cmp	r3, #16
 8006266:	d010      	beq.n	800628a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006276:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	e007      	b.n	800629a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006298:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a8:	d117      	bne.n	80062da <I2C_Master_ADDR+0x278>
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062b0:	d00b      	beq.n	80062ca <I2C_Master_ADDR+0x268>
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d008      	beq.n	80062ca <I2C_Master_ADDR+0x268>
 80062b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d005      	beq.n	80062ca <I2C_Master_ADDR+0x268>
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	2b10      	cmp	r3, #16
 80062c2:	d002      	beq.n	80062ca <I2C_Master_ADDR+0x268>
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	d107      	bne.n	80062da <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	e032      	b.n	8006358 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006300:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800630c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006310:	d117      	bne.n	8006342 <I2C_Master_ADDR+0x2e0>
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006318:	d00b      	beq.n	8006332 <I2C_Master_ADDR+0x2d0>
 800631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631c:	2b01      	cmp	r3, #1
 800631e:	d008      	beq.n	8006332 <I2C_Master_ADDR+0x2d0>
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	2b08      	cmp	r3, #8
 8006324:	d005      	beq.n	8006332 <I2C_Master_ADDR+0x2d0>
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	2b10      	cmp	r3, #16
 800632a:	d002      	beq.n	8006332 <I2C_Master_ADDR+0x2d0>
 800632c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632e:	2b20      	cmp	r3, #32
 8006330:	d107      	bne.n	8006342 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006340:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	613b      	str	r3, [r7, #16]
 8006356:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800635e:	e00b      	b.n	8006378 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
}
 8006376:	e7ff      	b.n	8006378 <I2C_Master_ADDR+0x316>
 8006378:	bf00      	nop
 800637a:	3744      	adds	r7, #68	; 0x44
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006392:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d02b      	beq.n	80063f6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	781a      	ldrb	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d114      	bne.n	80063f6 <I2C_SlaveTransmit_TXE+0x72>
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	2b29      	cmp	r3, #41	; 0x29
 80063d0:	d111      	bne.n	80063f6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2221      	movs	r2, #33	; 0x21
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2228      	movs	r2, #40	; 0x28
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff f9e7 	bl	80057c4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80063f6:	bf00      	nop
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d011      	beq.n	8006434 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	781a      	ldrb	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d02c      	beq.n	80064b4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	691a      	ldr	r2, [r3, #16]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006476:	b29b      	uxth	r3, r3
 8006478:	3b01      	subs	r3, #1
 800647a:	b29a      	uxth	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d114      	bne.n	80064b4 <I2C_SlaveReceive_RXNE+0x74>
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	2b2a      	cmp	r3, #42	; 0x2a
 800648e:	d111      	bne.n	80064b4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800649e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2222      	movs	r2, #34	; 0x22
 80064a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2228      	movs	r2, #40	; 0x28
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff f992 	bl	80057d8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80064b4:	bf00      	nop
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d012      	beq.n	80064f4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006514:	b2db      	uxtb	r3, r3
 8006516:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800651a:	2b28      	cmp	r3, #40	; 0x28
 800651c:	d127      	bne.n	800656e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	089b      	lsrs	r3, r3, #2
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800653a:	2301      	movs	r3, #1
 800653c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	09db      	lsrs	r3, r3, #7
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d103      	bne.n	8006552 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	81bb      	strh	r3, [r7, #12]
 8006550:	e002      	b.n	8006558 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006560:	89ba      	ldrh	r2, [r7, #12]
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	4619      	mov	r1, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff f940 	bl	80057ec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800656c:	e00e      	b.n	800658c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800656e:	2300      	movs	r3, #0
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	60bb      	str	r3, [r7, #8]
 8006582:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80065b4:	2300      	movs	r3, #0
 80065b6:	60bb      	str	r3, [r7, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	60bb      	str	r3, [r7, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f0:	d172      	bne.n	80066d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2b22      	cmp	r3, #34	; 0x22
 80065f6:	d002      	beq.n	80065fe <I2C_Slave_STOPF+0x6a>
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b2a      	cmp	r3, #42	; 0x2a
 80065fc:	d135      	bne.n	800666a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	b29a      	uxth	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f043 0204 	orr.w	r2, r3, #4
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006630:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe f85b 	bl	80046f2 <HAL_DMA_GetState>
 800663c:	4603      	mov	r3, r0
 800663e:	2b01      	cmp	r3, #1
 8006640:	d049      	beq.n	80066d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	4a69      	ldr	r2, [pc, #420]	; (80067ec <I2C_Slave_STOPF+0x258>)
 8006648:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe f82d 	bl	80046ae <HAL_DMA_Abort_IT>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d03d      	beq.n	80066d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006664:	4610      	mov	r0, r2
 8006666:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006668:	e035      	b.n	80066d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	b29a      	uxth	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d005      	beq.n	800668e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	f043 0204 	orr.w	r2, r3, #4
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800669c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe f825 	bl	80046f2 <HAL_DMA_GetState>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d014      	beq.n	80066d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b2:	4a4e      	ldr	r2, [pc, #312]	; (80067ec <I2C_Slave_STOPF+0x258>)
 80066b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fd fff7 	bl	80046ae <HAL_DMA_Abort_IT>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d008      	beq.n	80066d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066d0:	4610      	mov	r0, r2
 80066d2:	4798      	blx	r3
 80066d4:	e000      	b.n	80066d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d03e      	beq.n	8006760 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d112      	bne.n	8006716 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691a      	ldr	r2, [r3, #16]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006720:	2b40      	cmp	r3, #64	; 0x40
 8006722:	d112      	bne.n	800674a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691a      	ldr	r2, [r3, #16]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674e:	b29b      	uxth	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	f043 0204 	orr.w	r2, r3, #4
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f8b3 	bl	80068d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800676e:	e039      	b.n	80067e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	2b2a      	cmp	r3, #42	; 0x2a
 8006774:	d109      	bne.n	800678a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2228      	movs	r2, #40	; 0x28
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff f827 	bl	80057d8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b28      	cmp	r3, #40	; 0x28
 8006794:	d111      	bne.n	80067ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <I2C_Slave_STOPF+0x25c>)
 800679a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff f828 	bl	8005808 <HAL_I2C_ListenCpltCallback>
}
 80067b8:	e014      	b.n	80067e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	2b22      	cmp	r3, #34	; 0x22
 80067c0:	d002      	beq.n	80067c8 <I2C_Slave_STOPF+0x234>
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	2b22      	cmp	r3, #34	; 0x22
 80067c6:	d10d      	bne.n	80067e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fe fffa 	bl	80057d8 <HAL_I2C_SlaveRxCpltCallback>
}
 80067e4:	bf00      	nop
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	08006dd9 	.word	0x08006dd9
 80067f0:	ffff0000 	.word	0xffff0000

080067f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006802:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b08      	cmp	r3, #8
 800680e:	d002      	beq.n	8006816 <I2C_Slave_AF+0x22>
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b20      	cmp	r3, #32
 8006814:	d129      	bne.n	800686a <I2C_Slave_AF+0x76>
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	2b28      	cmp	r3, #40	; 0x28
 800681a:	d126      	bne.n	800686a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a2c      	ldr	r2, [pc, #176]	; (80068d0 <I2C_Slave_AF+0xdc>)
 8006820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006830:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800683a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800684a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fe ffd0 	bl	8005808 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006868:	e02e      	b.n	80068c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800686a:	7bfb      	ldrb	r3, [r7, #15]
 800686c:	2b21      	cmp	r3, #33	; 0x21
 800686e:	d126      	bne.n	80068be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a17      	ldr	r2, [pc, #92]	; (80068d0 <I2C_Slave_AF+0xdc>)
 8006874:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2221      	movs	r2, #33	; 0x21
 800687a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800689a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7fe ff84 	bl	80057c4 <HAL_I2C_SlaveTxCpltCallback>
}
 80068bc:	e004      	b.n	80068c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068c6:	615a      	str	r2, [r3, #20]
}
 80068c8:	bf00      	nop
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	ffff0000 	.word	0xffff0000

080068d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80068ec:	7bbb      	ldrb	r3, [r7, #14]
 80068ee:	2b10      	cmp	r3, #16
 80068f0:	d002      	beq.n	80068f8 <I2C_ITError+0x24>
 80068f2:	7bbb      	ldrb	r3, [r7, #14]
 80068f4:	2b40      	cmp	r3, #64	; 0x40
 80068f6:	d10a      	bne.n	800690e <I2C_ITError+0x3a>
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b22      	cmp	r3, #34	; 0x22
 80068fc:	d107      	bne.n	800690e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800690c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006914:	2b28      	cmp	r3, #40	; 0x28
 8006916:	d107      	bne.n	8006928 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2228      	movs	r2, #40	; 0x28
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006926:	e015      	b.n	8006954 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006936:	d00a      	beq.n	800694e <I2C_ITError+0x7a>
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	2b60      	cmp	r3, #96	; 0x60
 800693c:	d007      	beq.n	800694e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800695e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006962:	d162      	bne.n	8006a2a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006972:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b01      	cmp	r3, #1
 8006980:	d020      	beq.n	80069c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006986:	4a6a      	ldr	r2, [pc, #424]	; (8006b30 <I2C_ITError+0x25c>)
 8006988:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698e:	4618      	mov	r0, r3
 8006990:	f7fd fe8d 	bl	80046ae <HAL_DMA_Abort_IT>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8089 	beq.w	8006aae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0201 	bic.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069be:	4610      	mov	r0, r2
 80069c0:	4798      	blx	r3
 80069c2:	e074      	b.n	8006aae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	4a59      	ldr	r2, [pc, #356]	; (8006b30 <I2C_ITError+0x25c>)
 80069ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fd fe6c 	bl	80046ae <HAL_DMA_Abort_IT>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d068      	beq.n	8006aae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e6:	2b40      	cmp	r3, #64	; 0x40
 80069e8:	d10b      	bne.n	8006a02 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0201 	bic.w	r2, r2, #1
 8006a10:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
 8006a28:	e041      	b.n	8006aae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b60      	cmp	r3, #96	; 0x60
 8006a34:	d125      	bne.n	8006a82 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4e:	2b40      	cmp	r3, #64	; 0x40
 8006a50:	d10b      	bne.n	8006a6a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0201 	bic.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fe feec 	bl	8005858 <HAL_I2C_AbortCpltCallback>
 8006a80:	e015      	b.n	8006aae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b40      	cmp	r3, #64	; 0x40
 8006a8e:	d10b      	bne.n	8006aa8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691a      	ldr	r2, [r3, #16]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7fe fecb 	bl	8005844 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10e      	bne.n	8006adc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d109      	bne.n	8006adc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006aea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d113      	bne.n	8006b28 <I2C_ITError+0x254>
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	2b28      	cmp	r3, #40	; 0x28
 8006b04:	d110      	bne.n	8006b28 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a0a      	ldr	r2, [pc, #40]	; (8006b34 <I2C_ITError+0x260>)
 8006b0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fe fe70 	bl	8005808 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b28:	bf00      	nop
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	08006dd9 	.word	0x08006dd9
 8006b34:	ffff0000 	.word	0xffff0000

08006b38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	460b      	mov	r3, r1
 8006b46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d006      	beq.n	8006b62 <I2C_MasterRequestWrite+0x2a>
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d003      	beq.n	8006b62 <I2C_MasterRequestWrite+0x2a>
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b60:	d108      	bne.n	8006b74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e00b      	b.n	8006b8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b78:	2b12      	cmp	r3, #18
 8006b7a:	d107      	bne.n	8006b8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f9c5 	bl	8006f28 <I2C_WaitOnFlagUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00d      	beq.n	8006bc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb2:	d103      	bne.n	8006bbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e035      	b.n	8006c2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bc8:	d108      	bne.n	8006bdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bca:	897b      	ldrh	r3, [r7, #10]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bd8:	611a      	str	r2, [r3, #16]
 8006bda:	e01b      	b.n	8006c14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006bdc:	897b      	ldrh	r3, [r7, #10]
 8006bde:	11db      	asrs	r3, r3, #7
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	f003 0306 	and.w	r3, r3, #6
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f063 030f 	orn	r3, r3, #15
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	490e      	ldr	r1, [pc, #56]	; (8006c34 <I2C_MasterRequestWrite+0xfc>)
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f9eb 	bl	8006fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e010      	b.n	8006c2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c0a:	897b      	ldrh	r3, [r7, #10]
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	4907      	ldr	r1, [pc, #28]	; (8006c38 <I2C_MasterRequestWrite+0x100>)
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f9db 	bl	8006fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	00010008 	.word	0x00010008
 8006c38:	00010002 	.word	0x00010002

08006c3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	607a      	str	r2, [r7, #4]
 8006c46:	603b      	str	r3, [r7, #0]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d006      	beq.n	8006c76 <I2C_MasterRequestRead+0x3a>
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d003      	beq.n	8006c76 <I2C_MasterRequestRead+0x3a>
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c74:	d108      	bne.n	8006c88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e00b      	b.n	8006ca0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	2b11      	cmp	r3, #17
 8006c8e:	d107      	bne.n	8006ca0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f93b 	bl	8006f28 <I2C_WaitOnFlagUntilTimeout>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00d      	beq.n	8006cd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc6:	d103      	bne.n	8006cd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e079      	b.n	8006dc8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cdc:	d108      	bne.n	8006cf0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006cde:	897b      	ldrh	r3, [r7, #10]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	f043 0301 	orr.w	r3, r3, #1
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	611a      	str	r2, [r3, #16]
 8006cee:	e05f      	b.n	8006db0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006cf0:	897b      	ldrh	r3, [r7, #10]
 8006cf2:	11db      	asrs	r3, r3, #7
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	f003 0306 	and.w	r3, r3, #6
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	f063 030f 	orn	r3, r3, #15
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	4930      	ldr	r1, [pc, #192]	; (8006dd0 <I2C_MasterRequestRead+0x194>)
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 f961 	bl	8006fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e054      	b.n	8006dc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d1e:	897b      	ldrh	r3, [r7, #10]
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	4929      	ldr	r1, [pc, #164]	; (8006dd4 <I2C_MasterRequestRead+0x198>)
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 f951 	bl	8006fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e044      	b.n	8006dc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	613b      	str	r3, [r7, #16]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f8d9 	bl	8006f28 <I2C_WaitOnFlagUntilTimeout>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00d      	beq.n	8006d98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d8a:	d103      	bne.n	8006d94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d92:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e017      	b.n	8006dc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006d98:	897b      	ldrh	r3, [r7, #10]
 8006d9a:	11db      	asrs	r3, r3, #7
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	f003 0306 	and.w	r3, r3, #6
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f063 030e 	orn	r3, r3, #14
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	4907      	ldr	r1, [pc, #28]	; (8006dd4 <I2C_MasterRequestRead+0x198>)
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f90d 	bl	8006fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	00010008 	.word	0x00010008
 8006dd4:	00010002 	.word	0x00010002

08006dd8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006df2:	4b4b      	ldr	r3, [pc, #300]	; (8006f20 <I2C_DMAAbort+0x148>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	08db      	lsrs	r3, r3, #3
 8006df8:	4a4a      	ldr	r2, [pc, #296]	; (8006f24 <I2C_DMAAbort+0x14c>)
 8006dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfe:	0a1a      	lsrs	r2, r3, #8
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	00da      	lsls	r2, r3, #3
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	f043 0220 	orr.w	r2, r3, #32
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006e1e:	e00a      	b.n	8006e36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e34:	d0ea      	beq.n	8006e0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e42:	2200      	movs	r2, #0
 8006e44:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	2200      	movs	r2, #0
 8006e54:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e78:	2200      	movs	r2, #0
 8006e7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	2200      	movs	r2, #0
 8006e8a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0201 	bic.w	r2, r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b60      	cmp	r3, #96	; 0x60
 8006ea6:	d10e      	bne.n	8006ec6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ebe:	6978      	ldr	r0, [r7, #20]
 8006ec0:	f7fe fcca 	bl	8005858 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ec4:	e027      	b.n	8006f16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ec6:	7cfb      	ldrb	r3, [r7, #19]
 8006ec8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ecc:	2b28      	cmp	r3, #40	; 0x28
 8006ece:	d117      	bne.n	8006f00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0201 	orr.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006eee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2228      	movs	r2, #40	; 0x28
 8006efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006efe:	e007      	b.n	8006f10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006f10:	6978      	ldr	r0, [r7, #20]
 8006f12:	f7fe fc97 	bl	8005844 <HAL_I2C_ErrorCallback>
}
 8006f16:	bf00      	nop
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000014 	.word	0x20000014
 8006f24:	14f8b589 	.word	0x14f8b589

08006f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	4613      	mov	r3, r2
 8006f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f38:	e025      	b.n	8006f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f40:	d021      	beq.n	8006f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f42:	f7fd fa73 	bl	800442c <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d302      	bcc.n	8006f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d116      	bne.n	8006f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f043 0220 	orr.w	r2, r3, #32
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e023      	b.n	8006fce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	0c1b      	lsrs	r3, r3, #16
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d10d      	bne.n	8006fac <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	43da      	mvns	r2, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	bf0c      	ite	eq
 8006fa2:	2301      	moveq	r3, #1
 8006fa4:	2300      	movne	r3, #0
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	e00c      	b.n	8006fc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	43da      	mvns	r2, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d0b6      	beq.n	8006f3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fe4:	e051      	b.n	800708a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff4:	d123      	bne.n	800703e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007004:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800700e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2220      	movs	r2, #32
 800701a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	f043 0204 	orr.w	r2, r3, #4
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e046      	b.n	80070cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007044:	d021      	beq.n	800708a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007046:	f7fd f9f1 	bl	800442c <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	429a      	cmp	r2, r3
 8007054:	d302      	bcc.n	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d116      	bne.n	800708a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	f043 0220 	orr.w	r2, r3, #32
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e020      	b.n	80070cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	0c1b      	lsrs	r3, r3, #16
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	d10c      	bne.n	80070ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	43da      	mvns	r2, r3
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	4013      	ands	r3, r2
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	bf14      	ite	ne
 80070a6:	2301      	movne	r3, #1
 80070a8:	2300      	moveq	r3, #0
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	e00b      	b.n	80070c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	43da      	mvns	r2, r3
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	4013      	ands	r3, r2
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bf14      	ite	ne
 80070c0:	2301      	movne	r3, #1
 80070c2:	2300      	moveq	r3, #0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d18d      	bne.n	8006fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070e0:	e02d      	b.n	800713e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 f900 	bl	80072e8 <I2C_IsAcknowledgeFailed>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e02d      	b.n	800714e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f8:	d021      	beq.n	800713e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070fa:	f7fd f997 	bl	800442c <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	429a      	cmp	r2, r3
 8007108:	d302      	bcc.n	8007110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d116      	bne.n	800713e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2220      	movs	r2, #32
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	f043 0220 	orr.w	r2, r3, #32
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e007      	b.n	800714e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007148:	2b80      	cmp	r3, #128	; 0x80
 800714a:	d1ca      	bne.n	80070e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007162:	e02d      	b.n	80071c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f8bf 	bl	80072e8 <I2C_IsAcknowledgeFailed>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e02d      	b.n	80071d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717a:	d021      	beq.n	80071c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800717c:	f7fd f956 	bl	800442c <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	429a      	cmp	r2, r3
 800718a:	d302      	bcc.n	8007192 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d116      	bne.n	80071c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2220      	movs	r2, #32
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	f043 0220 	orr.w	r2, r3, #32
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e007      	b.n	80071d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d1ca      	bne.n	8007164 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80071e4:	4b13      	ldr	r3, [pc, #76]	; (8007234 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	08db      	lsrs	r3, r3, #3
 80071ea:	4a13      	ldr	r2, [pc, #76]	; (8007238 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80071ec:	fba2 2303 	umull	r2, r3, r2, r3
 80071f0:	0a1a      	lsrs	r2, r3, #8
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d107      	bne.n	8007216 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f043 0220 	orr.w	r2, r3, #32
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e008      	b.n	8007228 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007224:	d0e9      	beq.n	80071fa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	20000014 	.word	0x20000014
 8007238:	14f8b589 	.word	0x14f8b589

0800723c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007248:	e042      	b.n	80072d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	2b10      	cmp	r3, #16
 8007256:	d119      	bne.n	800728c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0210 	mvn.w	r2, #16
 8007260:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2220      	movs	r2, #32
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e029      	b.n	80072e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728c:	f7fd f8ce 	bl	800442c <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	429a      	cmp	r2, r3
 800729a:	d302      	bcc.n	80072a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d116      	bne.n	80072d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	f043 0220 	orr.w	r2, r3, #32
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e007      	b.n	80072e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d1b5      	bne.n	800724a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072fe:	d11b      	bne.n	8007338 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007308:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007324:	f043 0204 	orr.w	r2, r3, #4
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e000      	b.n	800733a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007356:	d103      	bne.n	8007360 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800735e:	e007      	b.n	8007370 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007368:	d102      	bne.n	8007370 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2208      	movs	r2, #8
 800736e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b20      	cmp	r3, #32
 8007390:	d129      	bne.n	80073e6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2224      	movs	r2, #36	; 0x24
 8007396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0201 	bic.w	r2, r2, #1
 80073a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0210 	bic.w	r2, r2, #16
 80073b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0201 	orr.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2220      	movs	r2, #32
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	e000      	b.n	80073e8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80073e6:	2302      	movs	r3, #2
  }
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b20      	cmp	r3, #32
 800740c:	d12a      	bne.n	8007464 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2224      	movs	r2, #36	; 0x24
 8007412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0201 	bic.w	r2, r2, #1
 8007424:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800742e:	89fb      	ldrh	r3, [r7, #14]
 8007430:	f023 030f 	bic.w	r3, r3, #15
 8007434:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	b29a      	uxth	r2, r3
 800743a:	89fb      	ldrh	r3, [r7, #14]
 800743c:	4313      	orrs	r3, r2
 800743e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	89fa      	ldrh	r2, [r7, #14]
 8007446:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	e000      	b.n	8007466 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007464:	2302      	movs	r3, #2
  }
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007472:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007474:	b08f      	sub	sp, #60	; 0x3c
 8007476:	af0a      	add	r7, sp, #40	; 0x28
 8007478:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e10f      	b.n	80076a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f006 fee2 	bl	800e268 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2203      	movs	r2, #3
 80074a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f003 f9bd 	bl	800a842 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	603b      	str	r3, [r7, #0]
 80074ce:	687e      	ldr	r6, [r7, #4]
 80074d0:	466d      	mov	r5, sp
 80074d2:	f106 0410 	add.w	r4, r6, #16
 80074d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80074e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80074e6:	1d33      	adds	r3, r6, #4
 80074e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074ea:	6838      	ldr	r0, [r7, #0]
 80074ec:	f003 f894 	bl	800a618 <USB_CoreInit>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e0d0      	b.n	80076a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2100      	movs	r1, #0
 8007508:	4618      	mov	r0, r3
 800750a:	f003 f9ab 	bl	800a864 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
 8007512:	e04a      	b.n	80075aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007514:	7bfa      	ldrb	r2, [r7, #15]
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	4613      	mov	r3, r2
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	333d      	adds	r3, #61	; 0x3d
 8007524:	2201      	movs	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007528:	7bfa      	ldrb	r2, [r7, #15]
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	4613      	mov	r3, r2
 800752e:	00db      	lsls	r3, r3, #3
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	333c      	adds	r3, #60	; 0x3c
 8007538:	7bfa      	ldrb	r2, [r7, #15]
 800753a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800753c:	7bfa      	ldrb	r2, [r7, #15]
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	b298      	uxth	r0, r3
 8007542:	6879      	ldr	r1, [r7, #4]
 8007544:	4613      	mov	r3, r2
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	440b      	add	r3, r1
 800754e:	3344      	adds	r3, #68	; 0x44
 8007550:	4602      	mov	r2, r0
 8007552:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007554:	7bfa      	ldrb	r2, [r7, #15]
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	4613      	mov	r3, r2
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	440b      	add	r3, r1
 8007562:	3340      	adds	r3, #64	; 0x40
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007568:	7bfa      	ldrb	r2, [r7, #15]
 800756a:	6879      	ldr	r1, [r7, #4]
 800756c:	4613      	mov	r3, r2
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	3348      	adds	r3, #72	; 0x48
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800757c:	7bfa      	ldrb	r2, [r7, #15]
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	4613      	mov	r3, r2
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	334c      	adds	r3, #76	; 0x4c
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007590:	7bfa      	ldrb	r2, [r7, #15]
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	4613      	mov	r3, r2
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	4413      	add	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	440b      	add	r3, r1
 800759e:	3354      	adds	r3, #84	; 0x54
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	3301      	adds	r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]
 80075aa:	7bfa      	ldrb	r2, [r7, #15]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d3af      	bcc.n	8007514 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	73fb      	strb	r3, [r7, #15]
 80075b8:	e044      	b.n	8007644 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80075ba:	7bfa      	ldrb	r2, [r7, #15]
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80075cc:	2200      	movs	r2, #0
 80075ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80075d0:	7bfa      	ldrb	r2, [r7, #15]
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	4613      	mov	r3, r2
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	440b      	add	r3, r1
 80075de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80075e2:	7bfa      	ldrb	r2, [r7, #15]
 80075e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80075e6:	7bfa      	ldrb	r2, [r7, #15]
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	4613      	mov	r3, r2
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	440b      	add	r3, r1
 80075f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80075fc:	7bfa      	ldrb	r2, [r7, #15]
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	4613      	mov	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007612:	7bfa      	ldrb	r2, [r7, #15]
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	4613      	mov	r3, r2
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	440b      	add	r3, r1
 8007620:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007628:	7bfa      	ldrb	r2, [r7, #15]
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	4613      	mov	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	3301      	adds	r3, #1
 8007642:	73fb      	strb	r3, [r7, #15]
 8007644:	7bfa      	ldrb	r2, [r7, #15]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	429a      	cmp	r2, r3
 800764c:	d3b5      	bcc.n	80075ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	687e      	ldr	r6, [r7, #4]
 8007656:	466d      	mov	r5, sp
 8007658:	f106 0410 	add.w	r4, r6, #16
 800765c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800765e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007664:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007668:	e885 0003 	stmia.w	r5, {r0, r1}
 800766c:	1d33      	adds	r3, r6, #4
 800766e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007670:	6838      	ldr	r0, [r7, #0]
 8007672:	f003 f943 	bl	800a8fc <USB_DevInit>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e00d      	b.n	80076a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f004 fa92 	bl	800bbc6 <USB_DevDisconnect>

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d101      	bne.n	80076c8 <HAL_PCD_Start+0x1c>
 80076c4:	2302      	movs	r3, #2
 80076c6:	e020      	b.n	800770a <HAL_PCD_Start+0x5e>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d109      	bne.n	80076ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d005      	beq.n	80076ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f003 f895 	bl	800a820 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f004 fa42 	bl	800bb84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007712:	b590      	push	{r4, r7, lr}
 8007714:	b08d      	sub	sp, #52	; 0x34
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4618      	mov	r0, r3
 800772a:	f004 fb00 	bl	800bd2e <USB_GetMode>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	f040 848a 	bne.w	800804a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f004 fa64 	bl	800bc08 <USB_ReadInterrupts>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 8480 	beq.w	8008048 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	0a1b      	lsrs	r3, r3, #8
 8007752:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4618      	mov	r0, r3
 8007762:	f004 fa51 	bl	800bc08 <USB_ReadInterrupts>
 8007766:	4603      	mov	r3, r0
 8007768:	f003 0302 	and.w	r3, r3, #2
 800776c:	2b02      	cmp	r3, #2
 800776e:	d107      	bne.n	8007780 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695a      	ldr	r2, [r3, #20]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f002 0202 	and.w	r2, r2, #2
 800777e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4618      	mov	r0, r3
 8007786:	f004 fa3f 	bl	800bc08 <USB_ReadInterrupts>
 800778a:	4603      	mov	r3, r0
 800778c:	f003 0310 	and.w	r3, r3, #16
 8007790:	2b10      	cmp	r3, #16
 8007792:	d161      	bne.n	8007858 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0210 	bic.w	r2, r2, #16
 80077a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	f003 020f 	and.w	r2, r3, #15
 80077b0:	4613      	mov	r3, r2
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	4413      	add	r3, r2
 80077c0:	3304      	adds	r3, #4
 80077c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	0c5b      	lsrs	r3, r3, #17
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d124      	bne.n	800781a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80077d6:	4013      	ands	r3, r2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d035      	beq.n	8007848 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	091b      	lsrs	r3, r3, #4
 80077e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80077e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	6a38      	ldr	r0, [r7, #32]
 80077f0:	f004 f876 	bl	800b8e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	091b      	lsrs	r3, r3, #4
 80077fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007800:	441a      	add	r2, r3
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	6a1a      	ldr	r2, [r3, #32]
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	091b      	lsrs	r3, r3, #4
 800780e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007812:	441a      	add	r2, r3
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	621a      	str	r2, [r3, #32]
 8007818:	e016      	b.n	8007848 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	0c5b      	lsrs	r3, r3, #17
 800781e:	f003 030f 	and.w	r3, r3, #15
 8007822:	2b06      	cmp	r3, #6
 8007824:	d110      	bne.n	8007848 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800782c:	2208      	movs	r2, #8
 800782e:	4619      	mov	r1, r3
 8007830:	6a38      	ldr	r0, [r7, #32]
 8007832:	f004 f855 	bl	800b8e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	6a1a      	ldr	r2, [r3, #32]
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	091b      	lsrs	r3, r3, #4
 800783e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007842:	441a      	add	r2, r3
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0210 	orr.w	r2, r2, #16
 8007856:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4618      	mov	r0, r3
 800785e:	f004 f9d3 	bl	800bc08 <USB_ReadInterrupts>
 8007862:	4603      	mov	r3, r0
 8007864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007868:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800786c:	f040 80a7 	bne.w	80079be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4618      	mov	r0, r3
 800787a:	f004 f9d8 	bl	800bc2e <USB_ReadDevAllOutEpInterrupt>
 800787e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007880:	e099      	b.n	80079b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 808e 	beq.w	80079aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	4611      	mov	r1, r2
 8007898:	4618      	mov	r0, r3
 800789a:	f004 f9fc 	bl	800bc96 <USB_ReadDevOutEPInterrupt>
 800789e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00c      	beq.n	80078c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b6:	461a      	mov	r2, r3
 80078b8:	2301      	movs	r3, #1
 80078ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80078bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fec2 	bl	8008648 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f003 0308 	and.w	r3, r3, #8
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00c      	beq.n	80078e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078da:	461a      	mov	r2, r3
 80078dc:	2308      	movs	r3, #8
 80078de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80078e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 ff98 	bl	8008818 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f003 0310 	and.w	r3, r3, #16
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d008      	beq.n	8007904 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fe:	461a      	mov	r2, r3
 8007900:	2310      	movs	r3, #16
 8007902:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d030      	beq.n	8007970 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007916:	2b80      	cmp	r3, #128	; 0x80
 8007918:	d109      	bne.n	800792e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007928:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800792c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800792e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007930:	4613      	mov	r3, r2
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	4413      	add	r3, r2
 8007940:	3304      	adds	r3, #4
 8007942:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	78db      	ldrb	r3, [r3, #3]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d108      	bne.n	800795e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2200      	movs	r2, #0
 8007950:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	b2db      	uxtb	r3, r3
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f006 fd8b 	bl	800e474 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796a:	461a      	mov	r2, r3
 800796c:	2302      	movs	r3, #2
 800796e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f003 0320 	and.w	r3, r3, #32
 8007976:	2b00      	cmp	r3, #0
 8007978:	d008      	beq.n	800798c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007986:	461a      	mov	r2, r3
 8007988:	2320      	movs	r3, #32
 800798a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a2:	461a      	mov	r2, r3
 80079a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	3301      	adds	r3, #1
 80079ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f47f af62 	bne.w	8007882 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f004 f920 	bl	800bc08 <USB_ReadInterrupts>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079d2:	f040 80db 	bne.w	8007b8c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f004 f941 	bl	800bc62 <USB_ReadDevAllInEpInterrupt>
 80079e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80079e6:	e0cd      	b.n	8007b84 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 80c2 	beq.w	8007b78 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fa:	b2d2      	uxtb	r2, r2
 80079fc:	4611      	mov	r1, r2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f004 f967 	bl	800bcd2 <USB_ReadDevInEPInterrupt>
 8007a04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d057      	beq.n	8007ac0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	2201      	movs	r2, #1
 8007a18:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	69f9      	ldr	r1, [r7, #28]
 8007a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a30:	4013      	ands	r3, r2
 8007a32:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	461a      	mov	r2, r3
 8007a42:	2301      	movs	r3, #1
 8007a44:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d132      	bne.n	8007ab4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a52:	4613      	mov	r3, r2
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	440b      	add	r3, r1
 8007a5c:	334c      	adds	r3, #76	; 0x4c
 8007a5e:	6819      	ldr	r1, [r3, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a64:	4613      	mov	r3, r2
 8007a66:	00db      	lsls	r3, r3, #3
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4403      	add	r3, r0
 8007a6e:	3348      	adds	r3, #72	; 0x48
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4419      	add	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a78:	4613      	mov	r3, r2
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4403      	add	r3, r0
 8007a82:	334c      	adds	r3, #76	; 0x4c
 8007a84:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d113      	bne.n	8007ab4 <HAL_PCD_IRQHandler+0x3a2>
 8007a8c:	6879      	ldr	r1, [r7, #4]
 8007a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a90:	4613      	mov	r3, r2
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	440b      	add	r3, r1
 8007a9a:	3354      	adds	r3, #84	; 0x54
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d108      	bne.n	8007ab4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6818      	ldr	r0, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007aac:	461a      	mov	r2, r3
 8007aae:	2101      	movs	r1, #1
 8007ab0:	f004 f96e 	bl	800bd90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f006 fc55 	bl	800e36a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d008      	beq.n	8007adc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2308      	movs	r3, #8
 8007ada:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d008      	beq.n	8007af8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af2:	461a      	mov	r2, r3
 8007af4:	2310      	movs	r3, #16
 8007af6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d008      	beq.n	8007b14 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0e:	461a      	mov	r2, r3
 8007b10:	2340      	movs	r3, #64	; 0x40
 8007b12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d023      	beq.n	8007b66 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007b1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b20:	6a38      	ldr	r0, [r7, #32]
 8007b22:	f003 f84f 	bl	800abc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b28:	4613      	mov	r3, r2
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	3338      	adds	r3, #56	; 0x38
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	4413      	add	r3, r2
 8007b36:	3304      	adds	r3, #4
 8007b38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	78db      	ldrb	r3, [r3, #3]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d108      	bne.n	8007b54 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2200      	movs	r2, #0
 8007b46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f006 fca2 	bl	800e498 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b60:	461a      	mov	r2, r3
 8007b62:	2302      	movs	r3, #2
 8007b64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fcdb 	bl	800852e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	085b      	lsrs	r3, r3, #1
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f47f af2e 	bne.w	80079e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f004 f839 	bl	800bc08 <USB_ReadInterrupts>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ba0:	d122      	bne.n	8007be8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bb0:	f023 0301 	bic.w	r3, r3, #1
 8007bb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d108      	bne.n	8007bd2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007bc8:	2100      	movs	r1, #0
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fec2 	bl	8008954 <HAL_PCDEx_LPM_Callback>
 8007bd0:	e002      	b.n	8007bd8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f006 fc40 	bl	800e458 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695a      	ldr	r2, [r3, #20]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f004 f80b 	bl	800bc08 <USB_ReadInterrupts>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bfc:	d112      	bne.n	8007c24 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d102      	bne.n	8007c14 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f006 fbfc 	bl	800e40c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695a      	ldr	r2, [r3, #20]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007c22:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f003 ffed 	bl	800bc08 <USB_ReadInterrupts>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c38:	f040 80b7 	bne.w	8007daa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	69fa      	ldr	r2, [r7, #28]
 8007c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c4a:	f023 0301 	bic.w	r3, r3, #1
 8007c4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2110      	movs	r1, #16
 8007c56:	4618      	mov	r0, r3
 8007c58:	f002 ffb4 	bl	800abc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c60:	e046      	b.n	8007cf0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ca8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cba:	0151      	lsls	r1, r2, #5
 8007cbc:	69fa      	ldr	r2, [r7, #28]
 8007cbe:	440a      	add	r2, r1
 8007cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cda:	0151      	lsls	r1, r2, #5
 8007cdc:	69fa      	ldr	r2, [r7, #28]
 8007cde:	440a      	add	r2, r1
 8007ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ce8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cec:	3301      	adds	r3, #1
 8007cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d3b3      	bcc.n	8007c62 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d08:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007d0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d016      	beq.n	8007d44 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d20:	69fa      	ldr	r2, [r7, #28]
 8007d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d26:	f043 030b 	orr.w	r3, r3, #11
 8007d2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d3c:	f043 030b 	orr.w	r3, r3, #11
 8007d40:	6453      	str	r3, [r2, #68]	; 0x44
 8007d42:	e015      	b.n	8007d70 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007d56:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007d5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	69fa      	ldr	r2, [r7, #28]
 8007d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d6a:	f043 030b 	orr.w	r3, r3, #11
 8007d6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	69fa      	ldr	r2, [r7, #28]
 8007d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d94:	461a      	mov	r2, r3
 8007d96:	f003 fffb 	bl	800bd90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	695a      	ldr	r2, [r3, #20]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f003 ff2a 	bl	800bc08 <USB_ReadInterrupts>
 8007db4:	4603      	mov	r3, r0
 8007db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dbe:	d124      	bne.n	8007e0a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f003 ffc0 	bl	800bd4a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f002 ff75 	bl	800acbe <USB_GetDevSpeed>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681c      	ldr	r4, [r3, #0]
 8007de0:	f001 fa28 	bl	8009234 <HAL_RCC_GetHCLKFreq>
 8007de4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	4620      	mov	r0, r4
 8007df0:	f002 fc74 	bl	800a6dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f006 fae0 	bl	800e3ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	695a      	ldr	r2, [r3, #20]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f003 fefa 	bl	800bc08 <USB_ReadInterrupts>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f003 0308 	and.w	r3, r3, #8
 8007e1a:	2b08      	cmp	r3, #8
 8007e1c:	d10a      	bne.n	8007e34 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f006 fabd 	bl	800e39e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695a      	ldr	r2, [r3, #20]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f002 0208 	and.w	r2, r2, #8
 8007e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f003 fee5 	bl	800bc08 <USB_ReadInterrupts>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e44:	2b80      	cmp	r3, #128	; 0x80
 8007e46:	d122      	bne.n	8007e8e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e54:	2301      	movs	r3, #1
 8007e56:	627b      	str	r3, [r7, #36]	; 0x24
 8007e58:	e014      	b.n	8007e84 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007e5a:	6879      	ldr	r1, [r7, #4]
 8007e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5e:	4613      	mov	r3, r2
 8007e60:	00db      	lsls	r3, r3, #3
 8007e62:	4413      	add	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	440b      	add	r3, r1
 8007e68:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d105      	bne.n	8007e7e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fb27 	bl	80084cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	3301      	adds	r3, #1
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d3e5      	bcc.n	8007e5a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f003 feb8 	bl	800bc08 <USB_ReadInterrupts>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ea2:	d13b      	bne.n	8007f1c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea8:	e02b      	b.n	8007f02 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	00db      	lsls	r3, r3, #3
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	3340      	adds	r3, #64	; 0x40
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d115      	bne.n	8007efc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007ed0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	da12      	bge.n	8007efc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eda:	4613      	mov	r3, r2
 8007edc:	00db      	lsls	r3, r3, #3
 8007ede:	4413      	add	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	333f      	adds	r3, #63	; 0x3f
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fae8 	bl	80084cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	3301      	adds	r3, #1
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d3ce      	bcc.n	8007eaa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	695a      	ldr	r2, [r3, #20]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007f1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f003 fe71 	bl	800bc08 <USB_ReadInterrupts>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f30:	d155      	bne.n	8007fde <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f32:	2301      	movs	r3, #1
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
 8007f36:	e045      	b.n	8007fc4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	440b      	add	r3, r1
 8007f56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d12e      	bne.n	8007fbe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007f60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	da2b      	bge.n	8007fbe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007f72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d121      	bne.n	8007fbe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f7e:	4613      	mov	r3, r2
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	440b      	add	r3, r1
 8007f88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10a      	bne.n	8007fbe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fba:	6053      	str	r3, [r2, #4]
            break;
 8007fbc:	e007      	b.n	8007fce <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d3b4      	bcc.n	8007f38 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	695a      	ldr	r2, [r3, #20]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007fdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f003 fe10 	bl	800bc08 <USB_ReadInterrupts>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff2:	d10a      	bne.n	800800a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f006 fa61 	bl	800e4bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	695a      	ldr	r2, [r3, #20]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f003 fdfa 	bl	800bc08 <USB_ReadInterrupts>
 8008014:	4603      	mov	r3, r0
 8008016:	f003 0304 	and.w	r3, r3, #4
 800801a:	2b04      	cmp	r3, #4
 800801c:	d115      	bne.n	800804a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f006 fa51 	bl	800e4d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6859      	ldr	r1, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	430a      	orrs	r2, r1
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	e000      	b.n	800804a <HAL_PCD_IRQHandler+0x938>
      return;
 8008048:	bf00      	nop
    }
  }
}
 800804a:	3734      	adds	r7, #52	; 0x34
 800804c:	46bd      	mov	sp, r7
 800804e:	bd90      	pop	{r4, r7, pc}

08008050 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008062:	2b01      	cmp	r3, #1
 8008064:	d101      	bne.n	800806a <HAL_PCD_SetAddress+0x1a>
 8008066:	2302      	movs	r3, #2
 8008068:	e013      	b.n	8008092 <HAL_PCD_SetAddress+0x42>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	78fa      	ldrb	r2, [r7, #3]
 8008076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	4611      	mov	r1, r2
 8008082:	4618      	mov	r0, r3
 8008084:	f003 fd58 	bl	800bb38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	4608      	mov	r0, r1
 80080a4:	4611      	mov	r1, r2
 80080a6:	461a      	mov	r2, r3
 80080a8:	4603      	mov	r3, r0
 80080aa:	70fb      	strb	r3, [r7, #3]
 80080ac:	460b      	mov	r3, r1
 80080ae:	803b      	strh	r3, [r7, #0]
 80080b0:	4613      	mov	r3, r2
 80080b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80080b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	da0f      	bge.n	80080e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	f003 020f 	and.w	r2, r3, #15
 80080c6:	4613      	mov	r3, r2
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	3338      	adds	r3, #56	; 0x38
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	4413      	add	r3, r2
 80080d4:	3304      	adds	r3, #4
 80080d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2201      	movs	r2, #1
 80080dc:	705a      	strb	r2, [r3, #1]
 80080de:	e00f      	b.n	8008100 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	f003 020f 	and.w	r2, r3, #15
 80080e6:	4613      	mov	r3, r2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	4413      	add	r3, r2
 80080f6:	3304      	adds	r3, #4
 80080f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	b2da      	uxtb	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800810c:	883a      	ldrh	r2, [r7, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	78ba      	ldrb	r2, [r7, #2]
 8008116:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	785b      	ldrb	r3, [r3, #1]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d004      	beq.n	800812a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800812a:	78bb      	ldrb	r3, [r7, #2]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d102      	bne.n	8008136 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_PCD_EP_Open+0xaa>
 8008140:	2302      	movs	r3, #2
 8008142:	e00e      	b.n	8008162 <HAL_PCD_EP_Open+0xc8>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68f9      	ldr	r1, [r7, #12]
 8008152:	4618      	mov	r0, r3
 8008154:	f002 fdd8 	bl	800ad08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008160:	7afb      	ldrb	r3, [r7, #11]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800817a:	2b00      	cmp	r3, #0
 800817c:	da0f      	bge.n	800819e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800817e:	78fb      	ldrb	r3, [r7, #3]
 8008180:	f003 020f 	and.w	r2, r3, #15
 8008184:	4613      	mov	r3, r2
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	3338      	adds	r3, #56	; 0x38
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	3304      	adds	r3, #4
 8008194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	705a      	strb	r2, [r3, #1]
 800819c:	e00f      	b.n	80081be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	f003 020f 	and.w	r2, r3, #15
 80081a4:	4613      	mov	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	4413      	add	r3, r2
 80081b4:	3304      	adds	r3, #4
 80081b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80081be:	78fb      	ldrb	r3, [r7, #3]
 80081c0:	f003 030f 	and.w	r3, r3, #15
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d101      	bne.n	80081d8 <HAL_PCD_EP_Close+0x6e>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e00e      	b.n	80081f6 <HAL_PCD_EP_Close+0x8c>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68f9      	ldr	r1, [r7, #12]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f002 fe16 	bl	800ae18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b086      	sub	sp, #24
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	603b      	str	r3, [r7, #0]
 800820a:	460b      	mov	r3, r1
 800820c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800820e:	7afb      	ldrb	r3, [r7, #11]
 8008210:	f003 020f 	and.w	r2, r3, #15
 8008214:	4613      	mov	r3, r2
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	4413      	add	r3, r2
 8008224:	3304      	adds	r3, #4
 8008226:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2200      	movs	r2, #0
 8008238:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2200      	movs	r2, #0
 800823e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	f003 030f 	and.w	r3, r3, #15
 8008246:	b2da      	uxtb	r2, r3
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d102      	bne.n	800825a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800825a:	7afb      	ldrb	r3, [r7, #11]
 800825c:	f003 030f 	and.w	r3, r3, #15
 8008260:	2b00      	cmp	r3, #0
 8008262:	d109      	bne.n	8008278 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	461a      	mov	r2, r3
 8008270:	6979      	ldr	r1, [r7, #20]
 8008272:	f003 f8f5 	bl	800b460 <USB_EP0StartXfer>
 8008276:	e008      	b.n	800828a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6818      	ldr	r0, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	b2db      	uxtb	r3, r3
 8008282:	461a      	mov	r2, r3
 8008284:	6979      	ldr	r1, [r7, #20]
 8008286:	f002 fea3 	bl	800afd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	f003 020f 	and.w	r2, r3, #15
 80082a6:	6879      	ldr	r1, [r7, #4]
 80082a8:	4613      	mov	r3, r2
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	4413      	add	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	440b      	add	r3, r1
 80082b2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80082b6:	681b      	ldr	r3, [r3, #0]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	607a      	str	r2, [r7, #4]
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	460b      	mov	r3, r1
 80082d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082d4:	7afb      	ldrb	r3, [r7, #11]
 80082d6:	f003 020f 	and.w	r2, r3, #15
 80082da:	4613      	mov	r3, r2
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	3338      	adds	r3, #56	; 0x38
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	4413      	add	r3, r2
 80082e8:	3304      	adds	r3, #4
 80082ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2200      	movs	r2, #0
 80082fc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2201      	movs	r2, #1
 8008302:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008304:	7afb      	ldrb	r3, [r7, #11]
 8008306:	f003 030f 	and.w	r3, r3, #15
 800830a:	b2da      	uxtb	r2, r3
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d102      	bne.n	800831e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800831e:	7afb      	ldrb	r3, [r7, #11]
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	2b00      	cmp	r3, #0
 8008326:	d109      	bne.n	800833c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	461a      	mov	r2, r3
 8008334:	6979      	ldr	r1, [r7, #20]
 8008336:	f003 f893 	bl	800b460 <USB_EP0StartXfer>
 800833a:	e008      	b.n	800834e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6818      	ldr	r0, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	461a      	mov	r2, r3
 8008348:	6979      	ldr	r1, [r7, #20]
 800834a:	f002 fe41 	bl	800afd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	f003 020f 	and.w	r2, r3, #15
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	429a      	cmp	r2, r3
 8008370:	d901      	bls.n	8008376 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e050      	b.n	8008418 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800837a:	2b00      	cmp	r3, #0
 800837c:	da0f      	bge.n	800839e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800837e:	78fb      	ldrb	r3, [r7, #3]
 8008380:	f003 020f 	and.w	r2, r3, #15
 8008384:	4613      	mov	r3, r2
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	3338      	adds	r3, #56	; 0x38
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	4413      	add	r3, r2
 8008392:	3304      	adds	r3, #4
 8008394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2201      	movs	r2, #1
 800839a:	705a      	strb	r2, [r3, #1]
 800839c:	e00d      	b.n	80083ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800839e:	78fa      	ldrb	r2, [r7, #3]
 80083a0:	4613      	mov	r3, r2
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	4413      	add	r3, r2
 80083b0:	3304      	adds	r3, #4
 80083b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2201      	movs	r2, #1
 80083be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083c0:	78fb      	ldrb	r3, [r7, #3]
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d101      	bne.n	80083da <HAL_PCD_EP_SetStall+0x82>
 80083d6:	2302      	movs	r3, #2
 80083d8:	e01e      	b.n	8008418 <HAL_PCD_EP_SetStall+0xc0>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f003 fad1 	bl	800b990 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80083ee:	78fb      	ldrb	r3, [r7, #3]
 80083f0:	f003 030f 	and.w	r3, r3, #15
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6818      	ldr	r0, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	b2d9      	uxtb	r1, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008408:	461a      	mov	r2, r3
 800840a:	f003 fcc1 	bl	800bd90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	f003 020f 	and.w	r2, r3, #15
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	429a      	cmp	r2, r3
 8008438:	d901      	bls.n	800843e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e042      	b.n	80084c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800843e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008442:	2b00      	cmp	r3, #0
 8008444:	da0f      	bge.n	8008466 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	f003 020f 	and.w	r2, r3, #15
 800844c:	4613      	mov	r3, r2
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	3338      	adds	r3, #56	; 0x38
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	4413      	add	r3, r2
 800845a:	3304      	adds	r3, #4
 800845c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2201      	movs	r2, #1
 8008462:	705a      	strb	r2, [r3, #1]
 8008464:	e00f      	b.n	8008486 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	f003 020f 	and.w	r2, r3, #15
 800846c:	4613      	mov	r3, r2
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	4413      	add	r3, r2
 800847c:	3304      	adds	r3, #4
 800847e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	f003 030f 	and.w	r3, r3, #15
 8008492:	b2da      	uxtb	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d101      	bne.n	80084a6 <HAL_PCD_EP_ClrStall+0x86>
 80084a2:	2302      	movs	r3, #2
 80084a4:	e00e      	b.n	80084c4 <HAL_PCD_EP_ClrStall+0xa4>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68f9      	ldr	r1, [r7, #12]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f003 fad9 	bl	800ba6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80084d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	da0c      	bge.n	80084fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	f003 020f 	and.w	r2, r3, #15
 80084e6:	4613      	mov	r3, r2
 80084e8:	00db      	lsls	r3, r3, #3
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	3338      	adds	r3, #56	; 0x38
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	4413      	add	r3, r2
 80084f4:	3304      	adds	r3, #4
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e00c      	b.n	8008514 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	f003 020f 	and.w	r2, r3, #15
 8008500:	4613      	mov	r3, r2
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	4413      	add	r3, r2
 8008510:	3304      	adds	r3, #4
 8008512:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68f9      	ldr	r1, [r7, #12]
 800851a:	4618      	mov	r0, r3
 800851c:	f003 f8f8 	bl	800b710 <USB_EPStopXfer>
 8008520:	4603      	mov	r3, r0
 8008522:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008524:	7afb      	ldrb	r3, [r7, #11]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b08a      	sub	sp, #40	; 0x28
 8008532:	af02      	add	r7, sp, #8
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	4613      	mov	r3, r2
 8008546:	00db      	lsls	r3, r3, #3
 8008548:	4413      	add	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	3338      	adds	r3, #56	; 0x38
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	4413      	add	r3, r2
 8008552:	3304      	adds	r3, #4
 8008554:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1a      	ldr	r2, [r3, #32]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	429a      	cmp	r2, r3
 8008560:	d901      	bls.n	8008566 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e06c      	b.n	8008640 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	699a      	ldr	r2, [r3, #24]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	429a      	cmp	r2, r3
 800857a:	d902      	bls.n	8008582 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	3303      	adds	r3, #3
 8008586:	089b      	lsrs	r3, r3, #2
 8008588:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800858a:	e02b      	b.n	80085e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	699a      	ldr	r2, [r3, #24]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	69fa      	ldr	r2, [r7, #28]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d902      	bls.n	80085a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	3303      	adds	r3, #3
 80085ac:	089b      	lsrs	r3, r3, #2
 80085ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6919      	ldr	r1, [r3, #16]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	4603      	mov	r3, r0
 80085c6:	6978      	ldr	r0, [r7, #20]
 80085c8:	f003 f94c 	bl	800b864 <USB_WritePacket>

    ep->xfer_buff  += len;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	691a      	ldr	r2, [r3, #16]
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	441a      	add	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6a1a      	ldr	r2, [r3, #32]
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	441a      	add	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d809      	bhi.n	800860e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6a1a      	ldr	r2, [r3, #32]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008602:	429a      	cmp	r2, r3
 8008604:	d203      	bcs.n	800860e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1be      	bne.n	800858c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	699a      	ldr	r2, [r3, #24]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	429a      	cmp	r2, r3
 8008618:	d811      	bhi.n	800863e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	2201      	movs	r2, #1
 8008622:	fa02 f303 	lsl.w	r3, r2, r3
 8008626:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800862e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	43db      	mvns	r3, r3
 8008634:	6939      	ldr	r1, [r7, #16]
 8008636:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800863a:	4013      	ands	r3, r2
 800863c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	333c      	adds	r3, #60	; 0x3c
 8008660:	3304      	adds	r3, #4
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	4413      	add	r3, r2
 800866e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d17b      	bne.n	8008776 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f003 0308 	and.w	r3, r3, #8
 8008684:	2b00      	cmp	r3, #0
 8008686:	d015      	beq.n	80086b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	4a61      	ldr	r2, [pc, #388]	; (8008810 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	f240 80b9 	bls.w	8008804 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 80b3 	beq.w	8008804 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086aa:	461a      	mov	r2, r3
 80086ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086b0:	6093      	str	r3, [r2, #8]
 80086b2:	e0a7      	b.n	8008804 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d009      	beq.n	80086d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ca:	461a      	mov	r2, r3
 80086cc:	2320      	movs	r3, #32
 80086ce:	6093      	str	r3, [r2, #8]
 80086d0:	e098      	b.n	8008804 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f040 8093 	bne.w	8008804 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	4a4b      	ldr	r2, [pc, #300]	; (8008810 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d90f      	bls.n	8008706 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00a      	beq.n	8008706 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fc:	461a      	mov	r2, r3
 80086fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008702:	6093      	str	r3, [r2, #8]
 8008704:	e07e      	b.n	8008804 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	4613      	mov	r3, r2
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	4413      	add	r3, r2
 8008718:	3304      	adds	r3, #4
 800871a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	69da      	ldr	r2, [r3, #28]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	0159      	lsls	r1, r3, #5
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	440b      	add	r3, r1
 8008728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008732:	1ad2      	subs	r2, r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d114      	bne.n	8008768 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d109      	bne.n	800875a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008750:	461a      	mov	r2, r3
 8008752:	2101      	movs	r1, #1
 8008754:	f003 fb1c 	bl	800bd90 <USB_EP0_OutStart>
 8008758:	e006      	b.n	8008768 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	691a      	ldr	r2, [r3, #16]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	441a      	add	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	b2db      	uxtb	r3, r3
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f005 fde0 	bl	800e334 <HAL_PCD_DataOutStageCallback>
 8008774:	e046      	b.n	8008804 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	4a26      	ldr	r2, [pc, #152]	; (8008814 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d124      	bne.n	80087c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00a      	beq.n	800879e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008794:	461a      	mov	r2, r3
 8008796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800879a:	6093      	str	r3, [r2, #8]
 800879c:	e032      	b.n	8008804 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f003 0320 	and.w	r3, r3, #32
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d008      	beq.n	80087ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b4:	461a      	mov	r2, r3
 80087b6:	2320      	movs	r3, #32
 80087b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f005 fdb7 	bl	800e334 <HAL_PCD_DataOutStageCallback>
 80087c6:	e01d      	b.n	8008804 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d114      	bne.n	80087f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	4613      	mov	r3, r2
 80087d4:	00db      	lsls	r3, r3, #3
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	440b      	add	r3, r1
 80087dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d108      	bne.n	80087f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6818      	ldr	r0, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80087f0:	461a      	mov	r2, r3
 80087f2:	2100      	movs	r1, #0
 80087f4:	f003 facc 	bl	800bd90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f005 fd98 	bl	800e334 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3720      	adds	r7, #32
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	4f54300a 	.word	0x4f54300a
 8008814:	4f54310a 	.word	0x4f54310a

08008818 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	333c      	adds	r3, #60	; 0x3c
 8008830:	3304      	adds	r3, #4
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4a15      	ldr	r2, [pc, #84]	; (80088a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d90e      	bls.n	800886c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008854:	2b00      	cmp	r3, #0
 8008856:	d009      	beq.n	800886c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008864:	461a      	mov	r2, r3
 8008866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800886a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f005 fd4f 	bl	800e310 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4a0a      	ldr	r2, [pc, #40]	; (80088a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d90c      	bls.n	8008894 <PCD_EP_OutSetupPacket_int+0x7c>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d108      	bne.n	8008894 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6818      	ldr	r0, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800888c:	461a      	mov	r2, r3
 800888e:	2101      	movs	r1, #1
 8008890:	f003 fa7e 	bl	800bd90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	4f54300a 	.word	0x4f54300a

080088a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
 80088b0:	4613      	mov	r3, r2
 80088b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80088bc:	78fb      	ldrb	r3, [r7, #3]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d107      	bne.n	80088d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80088c2:	883b      	ldrh	r3, [r7, #0]
 80088c4:	0419      	lsls	r1, r3, #16
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	629a      	str	r2, [r3, #40]	; 0x28
 80088d0:	e028      	b.n	8008924 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d8:	0c1b      	lsrs	r3, r3, #16
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	4413      	add	r3, r2
 80088de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80088e0:	2300      	movs	r3, #0
 80088e2:	73fb      	strb	r3, [r7, #15]
 80088e4:	e00d      	b.n	8008902 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	3340      	adds	r3, #64	; 0x40
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	0c1b      	lsrs	r3, r3, #16
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	4413      	add	r3, r2
 80088fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	3301      	adds	r3, #1
 8008900:	73fb      	strb	r3, [r7, #15]
 8008902:	7bfa      	ldrb	r2, [r7, #15]
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	3b01      	subs	r3, #1
 8008908:	429a      	cmp	r2, r3
 800890a:	d3ec      	bcc.n	80088e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800890c:	883b      	ldrh	r3, [r7, #0]
 800890e:	0418      	lsls	r0, r3, #16
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6819      	ldr	r1, [r3, #0]
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	3b01      	subs	r3, #1
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	4302      	orrs	r2, r0
 800891c:	3340      	adds	r3, #64	; 0x40
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	440b      	add	r3, r1
 8008922:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008932:	b480      	push	{r7}
 8008934:	b083      	sub	sp, #12
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	887a      	ldrh	r2, [r7, #2]
 8008944:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e267      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d075      	beq.n	8008a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800898a:	4b88      	ldr	r3, [pc, #544]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f003 030c 	and.w	r3, r3, #12
 8008992:	2b04      	cmp	r3, #4
 8008994:	d00c      	beq.n	80089b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008996:	4b85      	ldr	r3, [pc, #532]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800899e:	2b08      	cmp	r3, #8
 80089a0:	d112      	bne.n	80089c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089a2:	4b82      	ldr	r3, [pc, #520]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089ae:	d10b      	bne.n	80089c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089b0:	4b7e      	ldr	r3, [pc, #504]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d05b      	beq.n	8008a74 <HAL_RCC_OscConfig+0x108>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d157      	bne.n	8008a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e242      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d0:	d106      	bne.n	80089e0 <HAL_RCC_OscConfig+0x74>
 80089d2:	4b76      	ldr	r3, [pc, #472]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a75      	ldr	r2, [pc, #468]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 80089d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089dc:	6013      	str	r3, [r2, #0]
 80089de:	e01d      	b.n	8008a1c <HAL_RCC_OscConfig+0xb0>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089e8:	d10c      	bne.n	8008a04 <HAL_RCC_OscConfig+0x98>
 80089ea:	4b70      	ldr	r3, [pc, #448]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a6f      	ldr	r2, [pc, #444]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 80089f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	4b6d      	ldr	r3, [pc, #436]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a6c      	ldr	r2, [pc, #432]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 80089fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a00:	6013      	str	r3, [r2, #0]
 8008a02:	e00b      	b.n	8008a1c <HAL_RCC_OscConfig+0xb0>
 8008a04:	4b69      	ldr	r3, [pc, #420]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a68      	ldr	r2, [pc, #416]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	4b66      	ldr	r3, [pc, #408]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a65      	ldr	r2, [pc, #404]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d013      	beq.n	8008a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a24:	f7fb fd02 	bl	800442c <HAL_GetTick>
 8008a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a2a:	e008      	b.n	8008a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a2c:	f7fb fcfe 	bl	800442c <HAL_GetTick>
 8008a30:	4602      	mov	r2, r0
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	2b64      	cmp	r3, #100	; 0x64
 8008a38:	d901      	bls.n	8008a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e207      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a3e:	4b5b      	ldr	r3, [pc, #364]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0f0      	beq.n	8008a2c <HAL_RCC_OscConfig+0xc0>
 8008a4a:	e014      	b.n	8008a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a4c:	f7fb fcee 	bl	800442c <HAL_GetTick>
 8008a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a52:	e008      	b.n	8008a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a54:	f7fb fcea 	bl	800442c <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b64      	cmp	r3, #100	; 0x64
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e1f3      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a66:	4b51      	ldr	r3, [pc, #324]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1f0      	bne.n	8008a54 <HAL_RCC_OscConfig+0xe8>
 8008a72:	e000      	b.n	8008a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d063      	beq.n	8008b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a82:	4b4a      	ldr	r3, [pc, #296]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 030c 	and.w	r3, r3, #12
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a8e:	4b47      	ldr	r3, [pc, #284]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a96:	2b08      	cmp	r3, #8
 8008a98:	d11c      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a9a:	4b44      	ldr	r3, [pc, #272]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d116      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008aa6:	4b41      	ldr	r3, [pc, #260]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <HAL_RCC_OscConfig+0x152>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d001      	beq.n	8008abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e1c7      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008abe:	4b3b      	ldr	r3, [pc, #236]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	00db      	lsls	r3, r3, #3
 8008acc:	4937      	ldr	r1, [pc, #220]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ad2:	e03a      	b.n	8008b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d020      	beq.n	8008b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008adc:	4b34      	ldr	r3, [pc, #208]	; (8008bb0 <HAL_RCC_OscConfig+0x244>)
 8008ade:	2201      	movs	r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae2:	f7fb fca3 	bl	800442c <HAL_GetTick>
 8008ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ae8:	e008      	b.n	8008afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008aea:	f7fb fc9f 	bl	800442c <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d901      	bls.n	8008afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e1a8      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008afc:	4b2b      	ldr	r3, [pc, #172]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d0f0      	beq.n	8008aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b08:	4b28      	ldr	r3, [pc, #160]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	00db      	lsls	r3, r3, #3
 8008b16:	4925      	ldr	r1, [pc, #148]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	600b      	str	r3, [r1, #0]
 8008b1c:	e015      	b.n	8008b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b1e:	4b24      	ldr	r3, [pc, #144]	; (8008bb0 <HAL_RCC_OscConfig+0x244>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b24:	f7fb fc82 	bl	800442c <HAL_GetTick>
 8008b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b2a:	e008      	b.n	8008b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b2c:	f7fb fc7e 	bl	800442c <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e187      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b3e:	4b1b      	ldr	r3, [pc, #108]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1f0      	bne.n	8008b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0308 	and.w	r3, r3, #8
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d036      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d016      	beq.n	8008b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b5e:	4b15      	ldr	r3, [pc, #84]	; (8008bb4 <HAL_RCC_OscConfig+0x248>)
 8008b60:	2201      	movs	r2, #1
 8008b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b64:	f7fb fc62 	bl	800442c <HAL_GetTick>
 8008b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b6c:	f7fb fc5e 	bl	800442c <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e167      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b7e:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <HAL_RCC_OscConfig+0x240>)
 8008b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b82:	f003 0302 	and.w	r3, r3, #2
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0f0      	beq.n	8008b6c <HAL_RCC_OscConfig+0x200>
 8008b8a:	e01b      	b.n	8008bc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b8c:	4b09      	ldr	r3, [pc, #36]	; (8008bb4 <HAL_RCC_OscConfig+0x248>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b92:	f7fb fc4b 	bl	800442c <HAL_GetTick>
 8008b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b98:	e00e      	b.n	8008bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b9a:	f7fb fc47 	bl	800442c <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d907      	bls.n	8008bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e150      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
 8008bac:	40023800 	.word	0x40023800
 8008bb0:	42470000 	.word	0x42470000
 8008bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bb8:	4b88      	ldr	r3, [pc, #544]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bbc:	f003 0302 	and.w	r3, r3, #2
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1ea      	bne.n	8008b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 8097 	beq.w	8008d00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bd6:	4b81      	ldr	r3, [pc, #516]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10f      	bne.n	8008c02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008be2:	2300      	movs	r3, #0
 8008be4:	60bb      	str	r3, [r7, #8]
 8008be6:	4b7d      	ldr	r3, [pc, #500]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bea:	4a7c      	ldr	r2, [pc, #496]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8008bf2:	4b7a      	ldr	r3, [pc, #488]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bfa:	60bb      	str	r3, [r7, #8]
 8008bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c02:	4b77      	ldr	r3, [pc, #476]	; (8008de0 <HAL_RCC_OscConfig+0x474>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d118      	bne.n	8008c40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c0e:	4b74      	ldr	r3, [pc, #464]	; (8008de0 <HAL_RCC_OscConfig+0x474>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a73      	ldr	r2, [pc, #460]	; (8008de0 <HAL_RCC_OscConfig+0x474>)
 8008c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c1a:	f7fb fc07 	bl	800442c <HAL_GetTick>
 8008c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c20:	e008      	b.n	8008c34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c22:	f7fb fc03 	bl	800442c <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d901      	bls.n	8008c34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e10c      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c34:	4b6a      	ldr	r3, [pc, #424]	; (8008de0 <HAL_RCC_OscConfig+0x474>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d0f0      	beq.n	8008c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d106      	bne.n	8008c56 <HAL_RCC_OscConfig+0x2ea>
 8008c48:	4b64      	ldr	r3, [pc, #400]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4c:	4a63      	ldr	r2, [pc, #396]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008c4e:	f043 0301 	orr.w	r3, r3, #1
 8008c52:	6713      	str	r3, [r2, #112]	; 0x70
 8008c54:	e01c      	b.n	8008c90 <HAL_RCC_OscConfig+0x324>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	2b05      	cmp	r3, #5
 8008c5c:	d10c      	bne.n	8008c78 <HAL_RCC_OscConfig+0x30c>
 8008c5e:	4b5f      	ldr	r3, [pc, #380]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c62:	4a5e      	ldr	r2, [pc, #376]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008c64:	f043 0304 	orr.w	r3, r3, #4
 8008c68:	6713      	str	r3, [r2, #112]	; 0x70
 8008c6a:	4b5c      	ldr	r3, [pc, #368]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6e:	4a5b      	ldr	r2, [pc, #364]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008c70:	f043 0301 	orr.w	r3, r3, #1
 8008c74:	6713      	str	r3, [r2, #112]	; 0x70
 8008c76:	e00b      	b.n	8008c90 <HAL_RCC_OscConfig+0x324>
 8008c78:	4b58      	ldr	r3, [pc, #352]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7c:	4a57      	ldr	r2, [pc, #348]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008c7e:	f023 0301 	bic.w	r3, r3, #1
 8008c82:	6713      	str	r3, [r2, #112]	; 0x70
 8008c84:	4b55      	ldr	r3, [pc, #340]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c88:	4a54      	ldr	r2, [pc, #336]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008c8a:	f023 0304 	bic.w	r3, r3, #4
 8008c8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d015      	beq.n	8008cc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c98:	f7fb fbc8 	bl	800442c <HAL_GetTick>
 8008c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c9e:	e00a      	b.n	8008cb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ca0:	f7fb fbc4 	bl	800442c <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d901      	bls.n	8008cb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e0cb      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cb6:	4b49      	ldr	r3, [pc, #292]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cba:	f003 0302 	and.w	r3, r3, #2
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d0ee      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x334>
 8008cc2:	e014      	b.n	8008cee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cc4:	f7fb fbb2 	bl	800442c <HAL_GetTick>
 8008cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cca:	e00a      	b.n	8008ce2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ccc:	f7fb fbae 	bl	800442c <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e0b5      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ce2:	4b3e      	ldr	r3, [pc, #248]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce6:	f003 0302 	and.w	r3, r3, #2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1ee      	bne.n	8008ccc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d105      	bne.n	8008d00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cf4:	4b39      	ldr	r3, [pc, #228]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	4a38      	ldr	r2, [pc, #224]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 80a1 	beq.w	8008e4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d0a:	4b34      	ldr	r3, [pc, #208]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f003 030c 	and.w	r3, r3, #12
 8008d12:	2b08      	cmp	r3, #8
 8008d14:	d05c      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d141      	bne.n	8008da2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d1e:	4b31      	ldr	r3, [pc, #196]	; (8008de4 <HAL_RCC_OscConfig+0x478>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d24:	f7fb fb82 	bl	800442c <HAL_GetTick>
 8008d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d2a:	e008      	b.n	8008d3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d2c:	f7fb fb7e 	bl	800442c <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e087      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d3e:	4b27      	ldr	r3, [pc, #156]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1f0      	bne.n	8008d2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	69da      	ldr	r2, [r3, #28]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	431a      	orrs	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	019b      	lsls	r3, r3, #6
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	085b      	lsrs	r3, r3, #1
 8008d62:	3b01      	subs	r3, #1
 8008d64:	041b      	lsls	r3, r3, #16
 8008d66:	431a      	orrs	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	061b      	lsls	r3, r3, #24
 8008d6e:	491b      	ldr	r1, [pc, #108]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d74:	4b1b      	ldr	r3, [pc, #108]	; (8008de4 <HAL_RCC_OscConfig+0x478>)
 8008d76:	2201      	movs	r2, #1
 8008d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d7a:	f7fb fb57 	bl	800442c <HAL_GetTick>
 8008d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d80:	e008      	b.n	8008d94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d82:	f7fb fb53 	bl	800442c <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d901      	bls.n	8008d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e05c      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d94:	4b11      	ldr	r3, [pc, #68]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0f0      	beq.n	8008d82 <HAL_RCC_OscConfig+0x416>
 8008da0:	e054      	b.n	8008e4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008da2:	4b10      	ldr	r3, [pc, #64]	; (8008de4 <HAL_RCC_OscConfig+0x478>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008da8:	f7fb fb40 	bl	800442c <HAL_GetTick>
 8008dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dae:	e008      	b.n	8008dc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008db0:	f7fb fb3c 	bl	800442c <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d901      	bls.n	8008dc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e045      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dc2:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <HAL_RCC_OscConfig+0x470>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1f0      	bne.n	8008db0 <HAL_RCC_OscConfig+0x444>
 8008dce:	e03d      	b.n	8008e4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d107      	bne.n	8008de8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e038      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
 8008ddc:	40023800 	.word	0x40023800
 8008de0:	40007000 	.word	0x40007000
 8008de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008de8:	4b1b      	ldr	r3, [pc, #108]	; (8008e58 <HAL_RCC_OscConfig+0x4ec>)
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d028      	beq.n	8008e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d121      	bne.n	8008e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d11a      	bne.n	8008e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008e18:	4013      	ands	r3, r2
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d111      	bne.n	8008e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2e:	085b      	lsrs	r3, r3, #1
 8008e30:	3b01      	subs	r3, #1
 8008e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d107      	bne.n	8008e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d001      	beq.n	8008e4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e000      	b.n	8008e4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	40023800 	.word	0x40023800

08008e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e0cc      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e70:	4b68      	ldr	r3, [pc, #416]	; (8009014 <HAL_RCC_ClockConfig+0x1b8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 030f 	and.w	r3, r3, #15
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d90c      	bls.n	8008e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e7e:	4b65      	ldr	r3, [pc, #404]	; (8009014 <HAL_RCC_ClockConfig+0x1b8>)
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e86:	4b63      	ldr	r3, [pc, #396]	; (8009014 <HAL_RCC_ClockConfig+0x1b8>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d001      	beq.n	8008e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e0b8      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0302 	and.w	r3, r3, #2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d020      	beq.n	8008ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008eb0:	4b59      	ldr	r3, [pc, #356]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	4a58      	ldr	r2, [pc, #352]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0308 	and.w	r3, r3, #8
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d005      	beq.n	8008ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ec8:	4b53      	ldr	r3, [pc, #332]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	4a52      	ldr	r2, [pc, #328]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ed4:	4b50      	ldr	r3, [pc, #320]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	494d      	ldr	r1, [pc, #308]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d044      	beq.n	8008f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d107      	bne.n	8008f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008efa:	4b47      	ldr	r3, [pc, #284]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d119      	bne.n	8008f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e07f      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d003      	beq.n	8008f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d107      	bne.n	8008f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f1a:	4b3f      	ldr	r3, [pc, #252]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d109      	bne.n	8008f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e06f      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f2a:	4b3b      	ldr	r3, [pc, #236]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e067      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f3a:	4b37      	ldr	r3, [pc, #220]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f023 0203 	bic.w	r2, r3, #3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	4934      	ldr	r1, [pc, #208]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f4c:	f7fb fa6e 	bl	800442c <HAL_GetTick>
 8008f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f52:	e00a      	b.n	8008f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f54:	f7fb fa6a 	bl	800442c <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d901      	bls.n	8008f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e04f      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f6a:	4b2b      	ldr	r3, [pc, #172]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 020c 	and.w	r2, r3, #12
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d1eb      	bne.n	8008f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f7c:	4b25      	ldr	r3, [pc, #148]	; (8009014 <HAL_RCC_ClockConfig+0x1b8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 030f 	and.w	r3, r3, #15
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d20c      	bcs.n	8008fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f8a:	4b22      	ldr	r3, [pc, #136]	; (8009014 <HAL_RCC_ClockConfig+0x1b8>)
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	b2d2      	uxtb	r2, r2
 8008f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f92:	4b20      	ldr	r3, [pc, #128]	; (8009014 <HAL_RCC_ClockConfig+0x1b8>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 030f 	and.w	r3, r3, #15
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d001      	beq.n	8008fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e032      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0304 	and.w	r3, r3, #4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d008      	beq.n	8008fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fb0:	4b19      	ldr	r3, [pc, #100]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	4916      	ldr	r1, [pc, #88]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0308 	and.w	r3, r3, #8
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d009      	beq.n	8008fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fce:	4b12      	ldr	r3, [pc, #72]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	00db      	lsls	r3, r3, #3
 8008fdc:	490e      	ldr	r1, [pc, #56]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008fe2:	f000 f821 	bl	8009028 <HAL_RCC_GetSysClockFreq>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	091b      	lsrs	r3, r3, #4
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	490a      	ldr	r1, [pc, #40]	; (800901c <HAL_RCC_ClockConfig+0x1c0>)
 8008ff4:	5ccb      	ldrb	r3, [r1, r3]
 8008ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8008ffa:	4a09      	ldr	r2, [pc, #36]	; (8009020 <HAL_RCC_ClockConfig+0x1c4>)
 8008ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008ffe:	4b09      	ldr	r3, [pc, #36]	; (8009024 <HAL_RCC_ClockConfig+0x1c8>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4618      	mov	r0, r3
 8009004:	f7fb f9ce 	bl	80043a4 <HAL_InitTick>

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	40023c00 	.word	0x40023c00
 8009018:	40023800 	.word	0x40023800
 800901c:	08014908 	.word	0x08014908
 8009020:	20000014 	.word	0x20000014
 8009024:	20000018 	.word	0x20000018

08009028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800902c:	b094      	sub	sp, #80	; 0x50
 800902e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	647b      	str	r3, [r7, #68]	; 0x44
 8009034:	2300      	movs	r3, #0
 8009036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009038:	2300      	movs	r3, #0
 800903a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009040:	4b79      	ldr	r3, [pc, #484]	; (8009228 <HAL_RCC_GetSysClockFreq+0x200>)
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f003 030c 	and.w	r3, r3, #12
 8009048:	2b08      	cmp	r3, #8
 800904a:	d00d      	beq.n	8009068 <HAL_RCC_GetSysClockFreq+0x40>
 800904c:	2b08      	cmp	r3, #8
 800904e:	f200 80e1 	bhi.w	8009214 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d002      	beq.n	800905c <HAL_RCC_GetSysClockFreq+0x34>
 8009056:	2b04      	cmp	r3, #4
 8009058:	d003      	beq.n	8009062 <HAL_RCC_GetSysClockFreq+0x3a>
 800905a:	e0db      	b.n	8009214 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800905c:	4b73      	ldr	r3, [pc, #460]	; (800922c <HAL_RCC_GetSysClockFreq+0x204>)
 800905e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009060:	e0db      	b.n	800921a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009062:	4b73      	ldr	r3, [pc, #460]	; (8009230 <HAL_RCC_GetSysClockFreq+0x208>)
 8009064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009066:	e0d8      	b.n	800921a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009068:	4b6f      	ldr	r3, [pc, #444]	; (8009228 <HAL_RCC_GetSysClockFreq+0x200>)
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009070:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009072:	4b6d      	ldr	r3, [pc, #436]	; (8009228 <HAL_RCC_GetSysClockFreq+0x200>)
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d063      	beq.n	8009146 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800907e:	4b6a      	ldr	r3, [pc, #424]	; (8009228 <HAL_RCC_GetSysClockFreq+0x200>)
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	099b      	lsrs	r3, r3, #6
 8009084:	2200      	movs	r2, #0
 8009086:	63bb      	str	r3, [r7, #56]	; 0x38
 8009088:	63fa      	str	r2, [r7, #60]	; 0x3c
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009090:	633b      	str	r3, [r7, #48]	; 0x30
 8009092:	2300      	movs	r3, #0
 8009094:	637b      	str	r3, [r7, #52]	; 0x34
 8009096:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800909a:	4622      	mov	r2, r4
 800909c:	462b      	mov	r3, r5
 800909e:	f04f 0000 	mov.w	r0, #0
 80090a2:	f04f 0100 	mov.w	r1, #0
 80090a6:	0159      	lsls	r1, r3, #5
 80090a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090ac:	0150      	lsls	r0, r2, #5
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4621      	mov	r1, r4
 80090b4:	1a51      	subs	r1, r2, r1
 80090b6:	6139      	str	r1, [r7, #16]
 80090b8:	4629      	mov	r1, r5
 80090ba:	eb63 0301 	sbc.w	r3, r3, r1
 80090be:	617b      	str	r3, [r7, #20]
 80090c0:	f04f 0200 	mov.w	r2, #0
 80090c4:	f04f 0300 	mov.w	r3, #0
 80090c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090cc:	4659      	mov	r1, fp
 80090ce:	018b      	lsls	r3, r1, #6
 80090d0:	4651      	mov	r1, sl
 80090d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80090d6:	4651      	mov	r1, sl
 80090d8:	018a      	lsls	r2, r1, #6
 80090da:	4651      	mov	r1, sl
 80090dc:	ebb2 0801 	subs.w	r8, r2, r1
 80090e0:	4659      	mov	r1, fp
 80090e2:	eb63 0901 	sbc.w	r9, r3, r1
 80090e6:	f04f 0200 	mov.w	r2, #0
 80090ea:	f04f 0300 	mov.w	r3, #0
 80090ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090fa:	4690      	mov	r8, r2
 80090fc:	4699      	mov	r9, r3
 80090fe:	4623      	mov	r3, r4
 8009100:	eb18 0303 	adds.w	r3, r8, r3
 8009104:	60bb      	str	r3, [r7, #8]
 8009106:	462b      	mov	r3, r5
 8009108:	eb49 0303 	adc.w	r3, r9, r3
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	f04f 0200 	mov.w	r2, #0
 8009112:	f04f 0300 	mov.w	r3, #0
 8009116:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800911a:	4629      	mov	r1, r5
 800911c:	024b      	lsls	r3, r1, #9
 800911e:	4621      	mov	r1, r4
 8009120:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009124:	4621      	mov	r1, r4
 8009126:	024a      	lsls	r2, r1, #9
 8009128:	4610      	mov	r0, r2
 800912a:	4619      	mov	r1, r3
 800912c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800912e:	2200      	movs	r2, #0
 8009130:	62bb      	str	r3, [r7, #40]	; 0x28
 8009132:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009138:	f7f7 fdc6 	bl	8000cc8 <__aeabi_uldivmod>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4613      	mov	r3, r2
 8009142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009144:	e058      	b.n	80091f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009146:	4b38      	ldr	r3, [pc, #224]	; (8009228 <HAL_RCC_GetSysClockFreq+0x200>)
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	099b      	lsrs	r3, r3, #6
 800914c:	2200      	movs	r2, #0
 800914e:	4618      	mov	r0, r3
 8009150:	4611      	mov	r1, r2
 8009152:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009156:	623b      	str	r3, [r7, #32]
 8009158:	2300      	movs	r3, #0
 800915a:	627b      	str	r3, [r7, #36]	; 0x24
 800915c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009160:	4642      	mov	r2, r8
 8009162:	464b      	mov	r3, r9
 8009164:	f04f 0000 	mov.w	r0, #0
 8009168:	f04f 0100 	mov.w	r1, #0
 800916c:	0159      	lsls	r1, r3, #5
 800916e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009172:	0150      	lsls	r0, r2, #5
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4641      	mov	r1, r8
 800917a:	ebb2 0a01 	subs.w	sl, r2, r1
 800917e:	4649      	mov	r1, r9
 8009180:	eb63 0b01 	sbc.w	fp, r3, r1
 8009184:	f04f 0200 	mov.w	r2, #0
 8009188:	f04f 0300 	mov.w	r3, #0
 800918c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009190:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009194:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009198:	ebb2 040a 	subs.w	r4, r2, sl
 800919c:	eb63 050b 	sbc.w	r5, r3, fp
 80091a0:	f04f 0200 	mov.w	r2, #0
 80091a4:	f04f 0300 	mov.w	r3, #0
 80091a8:	00eb      	lsls	r3, r5, #3
 80091aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091ae:	00e2      	lsls	r2, r4, #3
 80091b0:	4614      	mov	r4, r2
 80091b2:	461d      	mov	r5, r3
 80091b4:	4643      	mov	r3, r8
 80091b6:	18e3      	adds	r3, r4, r3
 80091b8:	603b      	str	r3, [r7, #0]
 80091ba:	464b      	mov	r3, r9
 80091bc:	eb45 0303 	adc.w	r3, r5, r3
 80091c0:	607b      	str	r3, [r7, #4]
 80091c2:	f04f 0200 	mov.w	r2, #0
 80091c6:	f04f 0300 	mov.w	r3, #0
 80091ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80091ce:	4629      	mov	r1, r5
 80091d0:	028b      	lsls	r3, r1, #10
 80091d2:	4621      	mov	r1, r4
 80091d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80091d8:	4621      	mov	r1, r4
 80091da:	028a      	lsls	r2, r1, #10
 80091dc:	4610      	mov	r0, r2
 80091de:	4619      	mov	r1, r3
 80091e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091e2:	2200      	movs	r2, #0
 80091e4:	61bb      	str	r3, [r7, #24]
 80091e6:	61fa      	str	r2, [r7, #28]
 80091e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091ec:	f7f7 fd6c 	bl	8000cc8 <__aeabi_uldivmod>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4613      	mov	r3, r2
 80091f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80091f8:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <HAL_RCC_GetSysClockFreq+0x200>)
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	0c1b      	lsrs	r3, r3, #16
 80091fe:	f003 0303 	and.w	r3, r3, #3
 8009202:	3301      	adds	r3, #1
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800920a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800920c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009210:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009212:	e002      	b.n	800921a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009214:	4b05      	ldr	r3, [pc, #20]	; (800922c <HAL_RCC_GetSysClockFreq+0x204>)
 8009216:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800921a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800921c:	4618      	mov	r0, r3
 800921e:	3750      	adds	r7, #80	; 0x50
 8009220:	46bd      	mov	sp, r7
 8009222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009226:	bf00      	nop
 8009228:	40023800 	.word	0x40023800
 800922c:	00f42400 	.word	0x00f42400
 8009230:	007a1200 	.word	0x007a1200

08009234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009234:	b480      	push	{r7}
 8009236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009238:	4b03      	ldr	r3, [pc, #12]	; (8009248 <HAL_RCC_GetHCLKFreq+0x14>)
 800923a:	681b      	ldr	r3, [r3, #0]
}
 800923c:	4618      	mov	r0, r3
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	20000014 	.word	0x20000014

0800924c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009250:	f7ff fff0 	bl	8009234 <HAL_RCC_GetHCLKFreq>
 8009254:	4602      	mov	r2, r0
 8009256:	4b05      	ldr	r3, [pc, #20]	; (800926c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	0a9b      	lsrs	r3, r3, #10
 800925c:	f003 0307 	and.w	r3, r3, #7
 8009260:	4903      	ldr	r1, [pc, #12]	; (8009270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009262:	5ccb      	ldrb	r3, [r1, r3]
 8009264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009268:	4618      	mov	r0, r3
 800926a:	bd80      	pop	{r7, pc}
 800926c:	40023800 	.word	0x40023800
 8009270:	08014918 	.word	0x08014918

08009274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e07b      	b.n	800937e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928a:	2b00      	cmp	r3, #0
 800928c:	d108      	bne.n	80092a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009296:	d009      	beq.n	80092ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	61da      	str	r2, [r3, #28]
 800929e:	e005      	b.n	80092ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d106      	bne.n	80092cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7fa fcf4 	bl	8003cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80092f4:	431a      	orrs	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092fe:	431a      	orrs	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	f003 0302 	and.w	r3, r3, #2
 8009308:	431a      	orrs	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800931c:	431a      	orrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009326:	431a      	orrs	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009330:	ea42 0103 	orr.w	r1, r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	0c1b      	lsrs	r3, r3, #16
 800934a:	f003 0104 	and.w	r1, r3, #4
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	f003 0210 	and.w	r2, r3, #16
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69da      	ldr	r2, [r3, #28]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800936c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b088      	sub	sp, #32
 800938a:	af00      	add	r7, sp, #0
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	603b      	str	r3, [r7, #0]
 8009392:	4613      	mov	r3, r2
 8009394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d101      	bne.n	80093a8 <HAL_SPI_Transmit+0x22>
 80093a4:	2302      	movs	r3, #2
 80093a6:	e126      	b.n	80095f6 <HAL_SPI_Transmit+0x270>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093b0:	f7fb f83c 	bl	800442c <HAL_GetTick>
 80093b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80093b6:	88fb      	ldrh	r3, [r7, #6]
 80093b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d002      	beq.n	80093cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80093c6:	2302      	movs	r3, #2
 80093c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093ca:	e10b      	b.n	80095e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <HAL_SPI_Transmit+0x52>
 80093d2:	88fb      	ldrh	r3, [r7, #6]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093dc:	e102      	b.n	80095e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2203      	movs	r2, #3
 80093e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	88fa      	ldrh	r2, [r7, #6]
 80093f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	88fa      	ldrh	r2, [r7, #6]
 80093fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009424:	d10f      	bne.n	8009446 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009434:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009444:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009450:	2b40      	cmp	r3, #64	; 0x40
 8009452:	d007      	beq.n	8009464 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009462:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800946c:	d14b      	bne.n	8009506 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <HAL_SPI_Transmit+0xf6>
 8009476:	8afb      	ldrh	r3, [r7, #22]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d13e      	bne.n	80094fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009480:	881a      	ldrh	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948c:	1c9a      	adds	r2, r3, #2
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009496:	b29b      	uxth	r3, r3
 8009498:	3b01      	subs	r3, #1
 800949a:	b29a      	uxth	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80094a0:	e02b      	b.n	80094fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f003 0302 	and.w	r3, r3, #2
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d112      	bne.n	80094d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b4:	881a      	ldrh	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c0:	1c9a      	adds	r2, r3, #2
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	3b01      	subs	r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80094d4:	e011      	b.n	80094fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094d6:	f7fa ffa9 	bl	800442c <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d803      	bhi.n	80094ee <HAL_SPI_Transmit+0x168>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ec:	d102      	bne.n	80094f4 <HAL_SPI_Transmit+0x16e>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d102      	bne.n	80094fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094f8:	e074      	b.n	80095e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094fe:	b29b      	uxth	r3, r3
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1ce      	bne.n	80094a2 <HAL_SPI_Transmit+0x11c>
 8009504:	e04c      	b.n	80095a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d002      	beq.n	8009514 <HAL_SPI_Transmit+0x18e>
 800950e:	8afb      	ldrh	r3, [r7, #22]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d140      	bne.n	8009596 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	330c      	adds	r3, #12
 800951e:	7812      	ldrb	r2, [r2, #0]
 8009520:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009530:	b29b      	uxth	r3, r3
 8009532:	3b01      	subs	r3, #1
 8009534:	b29a      	uxth	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800953a:	e02c      	b.n	8009596 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b02      	cmp	r3, #2
 8009548:	d113      	bne.n	8009572 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	330c      	adds	r3, #12
 8009554:	7812      	ldrb	r2, [r2, #0]
 8009556:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955c:	1c5a      	adds	r2, r3, #1
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009566:	b29b      	uxth	r3, r3
 8009568:	3b01      	subs	r3, #1
 800956a:	b29a      	uxth	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009570:	e011      	b.n	8009596 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009572:	f7fa ff5b 	bl	800442c <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	429a      	cmp	r2, r3
 8009580:	d803      	bhi.n	800958a <HAL_SPI_Transmit+0x204>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009588:	d102      	bne.n	8009590 <HAL_SPI_Transmit+0x20a>
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d102      	bne.n	8009596 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009594:	e026      	b.n	80095e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800959a:	b29b      	uxth	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1cd      	bne.n	800953c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 fb73 	bl	8009c90 <SPI_EndRxTxTransaction>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d002      	beq.n	80095b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2220      	movs	r2, #32
 80095b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10a      	bne.n	80095d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095be:	2300      	movs	r3, #0
 80095c0:	613b      	str	r3, [r7, #16]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	613b      	str	r3, [r7, #16]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	613b      	str	r3, [r7, #16]
 80095d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	77fb      	strb	r3, [r7, #31]
 80095e0:	e000      	b.n	80095e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80095e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80095f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3720      	adds	r7, #32
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b08c      	sub	sp, #48	; 0x30
 8009602:	af00      	add	r7, sp, #0
 8009604:	60f8      	str	r0, [r7, #12]
 8009606:	60b9      	str	r1, [r7, #8]
 8009608:	607a      	str	r2, [r7, #4]
 800960a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800960c:	2301      	movs	r3, #1
 800960e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_SPI_TransmitReceive+0x26>
 8009620:	2302      	movs	r3, #2
 8009622:	e18a      	b.n	800993a <HAL_SPI_TransmitReceive+0x33c>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800962c:	f7fa fefe 	bl	800442c <HAL_GetTick>
 8009630:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009642:	887b      	ldrh	r3, [r7, #2]
 8009644:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009646:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800964a:	2b01      	cmp	r3, #1
 800964c:	d00f      	beq.n	800966e <HAL_SPI_TransmitReceive+0x70>
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009654:	d107      	bne.n	8009666 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d103      	bne.n	8009666 <HAL_SPI_TransmitReceive+0x68>
 800965e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009662:	2b04      	cmp	r3, #4
 8009664:	d003      	beq.n	800966e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009666:	2302      	movs	r3, #2
 8009668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800966c:	e15b      	b.n	8009926 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <HAL_SPI_TransmitReceive+0x82>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <HAL_SPI_TransmitReceive+0x82>
 800967a:	887b      	ldrh	r3, [r7, #2]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d103      	bne.n	8009688 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009686:	e14e      	b.n	8009926 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b04      	cmp	r3, #4
 8009692:	d003      	beq.n	800969c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2205      	movs	r2, #5
 8009698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	887a      	ldrh	r2, [r7, #2]
 80096ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	887a      	ldrh	r2, [r7, #2]
 80096b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	887a      	ldrh	r2, [r7, #2]
 80096be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	887a      	ldrh	r2, [r7, #2]
 80096c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096dc:	2b40      	cmp	r3, #64	; 0x40
 80096de:	d007      	beq.n	80096f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096f8:	d178      	bne.n	80097ec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <HAL_SPI_TransmitReceive+0x10a>
 8009702:	8b7b      	ldrh	r3, [r7, #26]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d166      	bne.n	80097d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970c:	881a      	ldrh	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009718:	1c9a      	adds	r2, r3, #2
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009722:	b29b      	uxth	r3, r3
 8009724:	3b01      	subs	r3, #1
 8009726:	b29a      	uxth	r2, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800972c:	e053      	b.n	80097d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f003 0302 	and.w	r3, r3, #2
 8009738:	2b02      	cmp	r3, #2
 800973a:	d11b      	bne.n	8009774 <HAL_SPI_TransmitReceive+0x176>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009740:	b29b      	uxth	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d016      	beq.n	8009774 <HAL_SPI_TransmitReceive+0x176>
 8009746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009748:	2b01      	cmp	r3, #1
 800974a:	d113      	bne.n	8009774 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009750:	881a      	ldrh	r2, [r3, #0]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975c:	1c9a      	adds	r2, r3, #2
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009766:	b29b      	uxth	r3, r3
 8009768:	3b01      	subs	r3, #1
 800976a:	b29a      	uxth	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b01      	cmp	r3, #1
 8009780:	d119      	bne.n	80097b6 <HAL_SPI_TransmitReceive+0x1b8>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009786:	b29b      	uxth	r3, r3
 8009788:	2b00      	cmp	r3, #0
 800978a:	d014      	beq.n	80097b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68da      	ldr	r2, [r3, #12]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009796:	b292      	uxth	r2, r2
 8009798:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979e:	1c9a      	adds	r2, r3, #2
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	3b01      	subs	r3, #1
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097b2:	2301      	movs	r3, #1
 80097b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80097b6:	f7fa fe39 	bl	800442c <HAL_GetTick>
 80097ba:	4602      	mov	r2, r0
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d807      	bhi.n	80097d6 <HAL_SPI_TransmitReceive+0x1d8>
 80097c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097cc:	d003      	beq.n	80097d6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80097d4:	e0a7      	b.n	8009926 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097da:	b29b      	uxth	r3, r3
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1a6      	bne.n	800972e <HAL_SPI_TransmitReceive+0x130>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1a1      	bne.n	800972e <HAL_SPI_TransmitReceive+0x130>
 80097ea:	e07c      	b.n	80098e6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <HAL_SPI_TransmitReceive+0x1fc>
 80097f4:	8b7b      	ldrh	r3, [r7, #26]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d16b      	bne.n	80098d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	330c      	adds	r3, #12
 8009804:	7812      	ldrb	r2, [r2, #0]
 8009806:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009816:	b29b      	uxth	r3, r3
 8009818:	3b01      	subs	r3, #1
 800981a:	b29a      	uxth	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009820:	e057      	b.n	80098d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	f003 0302 	and.w	r3, r3, #2
 800982c:	2b02      	cmp	r3, #2
 800982e:	d11c      	bne.n	800986a <HAL_SPI_TransmitReceive+0x26c>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009834:	b29b      	uxth	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	d017      	beq.n	800986a <HAL_SPI_TransmitReceive+0x26c>
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	2b01      	cmp	r3, #1
 800983e:	d114      	bne.n	800986a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	330c      	adds	r3, #12
 800984a:	7812      	ldrb	r2, [r2, #0]
 800984c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009852:	1c5a      	adds	r2, r3, #1
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800985c:	b29b      	uxth	r3, r3
 800985e:	3b01      	subs	r3, #1
 8009860:	b29a      	uxth	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009866:	2300      	movs	r3, #0
 8009868:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	2b01      	cmp	r3, #1
 8009876:	d119      	bne.n	80098ac <HAL_SPI_TransmitReceive+0x2ae>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800987c:	b29b      	uxth	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d014      	beq.n	80098ac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988c:	b2d2      	uxtb	r2, r2
 800988e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800989e:	b29b      	uxth	r3, r3
 80098a0:	3b01      	subs	r3, #1
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098a8:	2301      	movs	r3, #1
 80098aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80098ac:	f7fa fdbe 	bl	800442c <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d803      	bhi.n	80098c4 <HAL_SPI_TransmitReceive+0x2c6>
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c2:	d102      	bne.n	80098ca <HAL_SPI_TransmitReceive+0x2cc>
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d103      	bne.n	80098d2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80098d0:	e029      	b.n	8009926 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1a2      	bne.n	8009822 <HAL_SPI_TransmitReceive+0x224>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d19d      	bne.n	8009822 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 f9d0 	bl	8009c90 <SPI_EndRxTxTransaction>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d006      	beq.n	8009904 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2220      	movs	r2, #32
 8009900:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009902:	e010      	b.n	8009926 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10b      	bne.n	8009924 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800990c:	2300      	movs	r3, #0
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	617b      	str	r3, [r7, #20]
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	e000      	b.n	8009926 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009924:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009936:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800993a:	4618      	mov	r0, r3
 800993c:	3730      	adds	r7, #48	; 0x30
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
	...

08009944 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	099b      	lsrs	r3, r3, #6
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10f      	bne.n	8009988 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00a      	beq.n	8009988 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	099b      	lsrs	r3, r3, #6
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	d004      	beq.n	8009988 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	4798      	blx	r3
    return;
 8009986:	e0d7      	b.n	8009b38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	085b      	lsrs	r3, r3, #1
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00a      	beq.n	80099aa <HAL_SPI_IRQHandler+0x66>
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	09db      	lsrs	r3, r3, #7
 8009998:	f003 0301 	and.w	r3, r3, #1
 800999c:	2b00      	cmp	r3, #0
 800999e:	d004      	beq.n	80099aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	4798      	blx	r3
    return;
 80099a8:	e0c6      	b.n	8009b38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	095b      	lsrs	r3, r3, #5
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10c      	bne.n	80099d0 <HAL_SPI_IRQHandler+0x8c>
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	099b      	lsrs	r3, r3, #6
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d106      	bne.n	80099d0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	0a1b      	lsrs	r3, r3, #8
 80099c6:	f003 0301 	and.w	r3, r3, #1
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 80b4 	beq.w	8009b38 <HAL_SPI_IRQHandler+0x1f4>
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	095b      	lsrs	r3, r3, #5
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 80ad 	beq.w	8009b38 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	099b      	lsrs	r3, r3, #6
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d023      	beq.n	8009a32 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d011      	beq.n	8009a1a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fa:	f043 0204 	orr.w	r2, r3, #4
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	617b      	str	r3, [r7, #20]
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	e00b      	b.n	8009a32 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	613b      	str	r3, [r7, #16]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	613b      	str	r3, [r7, #16]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	613b      	str	r3, [r7, #16]
 8009a2e:	693b      	ldr	r3, [r7, #16]
        return;
 8009a30:	e082      	b.n	8009b38 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	095b      	lsrs	r3, r3, #5
 8009a36:	f003 0301 	and.w	r3, r3, #1
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d014      	beq.n	8009a68 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a42:	f043 0201 	orr.w	r2, r3, #1
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60fb      	str	r3, [r7, #12]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	0a1b      	lsrs	r3, r3, #8
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00c      	beq.n	8009a8e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a78:	f043 0208 	orr.w	r2, r3, #8
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a80:	2300      	movs	r3, #0
 8009a82:	60bb      	str	r3, [r7, #8]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	60bb      	str	r3, [r7, #8]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d04f      	beq.n	8009b36 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009aa4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d104      	bne.n	8009ac2 <HAL_SPI_IRQHandler+0x17e>
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d034      	beq.n	8009b2c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f022 0203 	bic.w	r2, r2, #3
 8009ad0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d011      	beq.n	8009afe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ade:	4a18      	ldr	r2, [pc, #96]	; (8009b40 <HAL_SPI_IRQHandler+0x1fc>)
 8009ae0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fa fde1 	bl	80046ae <HAL_DMA_Abort_IT>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d005      	beq.n	8009afe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d016      	beq.n	8009b34 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b0a:	4a0d      	ldr	r2, [pc, #52]	; (8009b40 <HAL_SPI_IRQHandler+0x1fc>)
 8009b0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fa fdcb 	bl	80046ae <HAL_DMA_Abort_IT>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00a      	beq.n	8009b34 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009b2a:	e003      	b.n	8009b34 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f809 	bl	8009b44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009b32:	e000      	b.n	8009b36 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009b34:	bf00      	nop
    return;
 8009b36:	bf00      	nop
  }
}
 8009b38:	3720      	adds	r7, #32
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	08009b59 	.word	0x08009b59

08009b44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f7ff ffe6 	bl	8009b44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b088      	sub	sp, #32
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b90:	f7fa fc4c 	bl	800442c <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b98:	1a9b      	subs	r3, r3, r2
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009ba0:	f7fa fc44 	bl	800442c <HAL_GetTick>
 8009ba4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009ba6:	4b39      	ldr	r3, [pc, #228]	; (8009c8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	015b      	lsls	r3, r3, #5
 8009bac:	0d1b      	lsrs	r3, r3, #20
 8009bae:	69fa      	ldr	r2, [r7, #28]
 8009bb0:	fb02 f303 	mul.w	r3, r2, r3
 8009bb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bb6:	e054      	b.n	8009c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbe:	d050      	beq.n	8009c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009bc0:	f7fa fc34 	bl	800442c <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	69fa      	ldr	r2, [r7, #28]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d902      	bls.n	8009bd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d13d      	bne.n	8009c52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009be4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bee:	d111      	bne.n	8009c14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bf8:	d004      	beq.n	8009c04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c02:	d107      	bne.n	8009c14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c1c:	d10f      	bne.n	8009c3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e017      	b.n	8009c82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	bf0c      	ite	eq
 8009c72:	2301      	moveq	r3, #1
 8009c74:	2300      	movne	r3, #0
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	461a      	mov	r2, r3
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d19b      	bne.n	8009bb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3720      	adds	r7, #32
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20000014 	.word	0x20000014

08009c90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b088      	sub	sp, #32
 8009c94:	af02      	add	r7, sp, #8
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c9c:	4b1b      	ldr	r3, [pc, #108]	; (8009d0c <SPI_EndRxTxTransaction+0x7c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a1b      	ldr	r2, [pc, #108]	; (8009d10 <SPI_EndRxTxTransaction+0x80>)
 8009ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca6:	0d5b      	lsrs	r3, r3, #21
 8009ca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cac:	fb02 f303 	mul.w	r3, r2, r3
 8009cb0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cba:	d112      	bne.n	8009ce2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2180      	movs	r1, #128	; 0x80
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f7ff ff5a 	bl	8009b80 <SPI_WaitFlagStateUntilTimeout>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d016      	beq.n	8009d00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd6:	f043 0220 	orr.w	r2, r3, #32
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	e00f      	b.n	8009d02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00a      	beq.n	8009cfe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf8:	2b80      	cmp	r3, #128	; 0x80
 8009cfa:	d0f2      	beq.n	8009ce2 <SPI_EndRxTxTransaction+0x52>
 8009cfc:	e000      	b.n	8009d00 <SPI_EndRxTxTransaction+0x70>
        break;
 8009cfe:	bf00      	nop
  }

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20000014 	.word	0x20000014
 8009d10:	165e9f81 	.word	0x165e9f81

08009d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e041      	b.n	8009daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d106      	bne.n	8009d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7fa f80a 	bl	8003d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2202      	movs	r2, #2
 8009d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	3304      	adds	r3, #4
 8009d50:	4619      	mov	r1, r3
 8009d52:	4610      	mov	r0, r2
 8009d54:	f000 fa96 	bl	800a284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
	...

08009db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d001      	beq.n	8009dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e04e      	b.n	8009e6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68da      	ldr	r2, [r3, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f042 0201 	orr.w	r2, r2, #1
 8009de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a23      	ldr	r2, [pc, #140]	; (8009e78 <HAL_TIM_Base_Start_IT+0xc4>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d022      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009df6:	d01d      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a1f      	ldr	r2, [pc, #124]	; (8009e7c <HAL_TIM_Base_Start_IT+0xc8>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d018      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a1e      	ldr	r2, [pc, #120]	; (8009e80 <HAL_TIM_Base_Start_IT+0xcc>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d013      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a1c      	ldr	r2, [pc, #112]	; (8009e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00e      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a1b      	ldr	r2, [pc, #108]	; (8009e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d009      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a19      	ldr	r2, [pc, #100]	; (8009e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d004      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0x80>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a18      	ldr	r2, [pc, #96]	; (8009e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d111      	bne.n	8009e58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f003 0307 	and.w	r3, r3, #7
 8009e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b06      	cmp	r3, #6
 8009e44:	d010      	beq.n	8009e68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f042 0201 	orr.w	r2, r2, #1
 8009e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e56:	e007      	b.n	8009e68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0201 	orr.w	r2, r2, #1
 8009e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	40010000 	.word	0x40010000
 8009e7c:	40000400 	.word	0x40000400
 8009e80:	40000800 	.word	0x40000800
 8009e84:	40000c00 	.word	0x40000c00
 8009e88:	40010400 	.word	0x40010400
 8009e8c:	40014000 	.word	0x40014000
 8009e90:	40001800 	.word	0x40001800

08009e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	f003 0302 	and.w	r3, r3, #2
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d122      	bne.n	8009ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f003 0302 	and.w	r3, r3, #2
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d11b      	bne.n	8009ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f06f 0202 	mvn.w	r2, #2
 8009ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	699b      	ldr	r3, [r3, #24]
 8009ece:	f003 0303 	and.w	r3, r3, #3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d003      	beq.n	8009ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f9b5 	bl	800a246 <HAL_TIM_IC_CaptureCallback>
 8009edc:	e005      	b.n	8009eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f9a7 	bl	800a232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f9b8 	bl	800a25a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	f003 0304 	and.w	r3, r3, #4
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d122      	bne.n	8009f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	f003 0304 	and.w	r3, r3, #4
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d11b      	bne.n	8009f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f06f 0204 	mvn.w	r2, #4
 8009f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2202      	movs	r2, #2
 8009f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f98b 	bl	800a246 <HAL_TIM_IC_CaptureCallback>
 8009f30:	e005      	b.n	8009f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f97d 	bl	800a232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f98e 	bl	800a25a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	f003 0308 	and.w	r3, r3, #8
 8009f4e:	2b08      	cmp	r3, #8
 8009f50:	d122      	bne.n	8009f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f003 0308 	and.w	r3, r3, #8
 8009f5c:	2b08      	cmp	r3, #8
 8009f5e:	d11b      	bne.n	8009f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f06f 0208 	mvn.w	r2, #8
 8009f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2204      	movs	r2, #4
 8009f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	69db      	ldr	r3, [r3, #28]
 8009f76:	f003 0303 	and.w	r3, r3, #3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f961 	bl	800a246 <HAL_TIM_IC_CaptureCallback>
 8009f84:	e005      	b.n	8009f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f953 	bl	800a232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f964 	bl	800a25a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	f003 0310 	and.w	r3, r3, #16
 8009fa2:	2b10      	cmp	r3, #16
 8009fa4:	d122      	bne.n	8009fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f003 0310 	and.w	r3, r3, #16
 8009fb0:	2b10      	cmp	r3, #16
 8009fb2:	d11b      	bne.n	8009fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f06f 0210 	mvn.w	r2, #16
 8009fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2208      	movs	r2, #8
 8009fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f937 	bl	800a246 <HAL_TIM_IC_CaptureCallback>
 8009fd8:	e005      	b.n	8009fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f929 	bl	800a232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f93a 	bl	800a25a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d10e      	bne.n	800a018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	2b01      	cmp	r3, #1
 800a006:	d107      	bne.n	800a018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f06f 0201 	mvn.w	r2, #1
 800a010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7f9 f8d6 	bl	80031c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a022:	2b80      	cmp	r3, #128	; 0x80
 800a024:	d10e      	bne.n	800a044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a030:	2b80      	cmp	r3, #128	; 0x80
 800a032:	d107      	bne.n	800a044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a03c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fae0 	bl	800a604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04e:	2b40      	cmp	r3, #64	; 0x40
 800a050:	d10e      	bne.n	800a070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a05c:	2b40      	cmp	r3, #64	; 0x40
 800a05e:	d107      	bne.n	800a070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f8ff 	bl	800a26e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	f003 0320 	and.w	r3, r3, #32
 800a07a:	2b20      	cmp	r3, #32
 800a07c:	d10e      	bne.n	800a09c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f003 0320 	and.w	r3, r3, #32
 800a088:	2b20      	cmp	r3, #32
 800a08a:	d107      	bne.n	800a09c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f06f 0220 	mvn.w	r2, #32
 800a094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 faaa 	bl	800a5f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d101      	bne.n	800a0c0 <HAL_TIM_ConfigClockSource+0x1c>
 800a0bc:	2302      	movs	r3, #2
 800a0be:	e0b4      	b.n	800a22a <HAL_TIM_ConfigClockSource+0x186>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a0de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0f8:	d03e      	beq.n	800a178 <HAL_TIM_ConfigClockSource+0xd4>
 800a0fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0fe:	f200 8087 	bhi.w	800a210 <HAL_TIM_ConfigClockSource+0x16c>
 800a102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a106:	f000 8086 	beq.w	800a216 <HAL_TIM_ConfigClockSource+0x172>
 800a10a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a10e:	d87f      	bhi.n	800a210 <HAL_TIM_ConfigClockSource+0x16c>
 800a110:	2b70      	cmp	r3, #112	; 0x70
 800a112:	d01a      	beq.n	800a14a <HAL_TIM_ConfigClockSource+0xa6>
 800a114:	2b70      	cmp	r3, #112	; 0x70
 800a116:	d87b      	bhi.n	800a210 <HAL_TIM_ConfigClockSource+0x16c>
 800a118:	2b60      	cmp	r3, #96	; 0x60
 800a11a:	d050      	beq.n	800a1be <HAL_TIM_ConfigClockSource+0x11a>
 800a11c:	2b60      	cmp	r3, #96	; 0x60
 800a11e:	d877      	bhi.n	800a210 <HAL_TIM_ConfigClockSource+0x16c>
 800a120:	2b50      	cmp	r3, #80	; 0x50
 800a122:	d03c      	beq.n	800a19e <HAL_TIM_ConfigClockSource+0xfa>
 800a124:	2b50      	cmp	r3, #80	; 0x50
 800a126:	d873      	bhi.n	800a210 <HAL_TIM_ConfigClockSource+0x16c>
 800a128:	2b40      	cmp	r3, #64	; 0x40
 800a12a:	d058      	beq.n	800a1de <HAL_TIM_ConfigClockSource+0x13a>
 800a12c:	2b40      	cmp	r3, #64	; 0x40
 800a12e:	d86f      	bhi.n	800a210 <HAL_TIM_ConfigClockSource+0x16c>
 800a130:	2b30      	cmp	r3, #48	; 0x30
 800a132:	d064      	beq.n	800a1fe <HAL_TIM_ConfigClockSource+0x15a>
 800a134:	2b30      	cmp	r3, #48	; 0x30
 800a136:	d86b      	bhi.n	800a210 <HAL_TIM_ConfigClockSource+0x16c>
 800a138:	2b20      	cmp	r3, #32
 800a13a:	d060      	beq.n	800a1fe <HAL_TIM_ConfigClockSource+0x15a>
 800a13c:	2b20      	cmp	r3, #32
 800a13e:	d867      	bhi.n	800a210 <HAL_TIM_ConfigClockSource+0x16c>
 800a140:	2b00      	cmp	r3, #0
 800a142:	d05c      	beq.n	800a1fe <HAL_TIM_ConfigClockSource+0x15a>
 800a144:	2b10      	cmp	r3, #16
 800a146:	d05a      	beq.n	800a1fe <HAL_TIM_ConfigClockSource+0x15a>
 800a148:	e062      	b.n	800a210 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6818      	ldr	r0, [r3, #0]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	6899      	ldr	r1, [r3, #8]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	f000 f9ad 	bl	800a4b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a16c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	609a      	str	r2, [r3, #8]
      break;
 800a176:	e04f      	b.n	800a218 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6818      	ldr	r0, [r3, #0]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	6899      	ldr	r1, [r3, #8]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	f000 f996 	bl	800a4b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689a      	ldr	r2, [r3, #8]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a19a:	609a      	str	r2, [r3, #8]
      break;
 800a19c:	e03c      	b.n	800a218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6818      	ldr	r0, [r3, #0]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	6859      	ldr	r1, [r3, #4]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	f000 f90a 	bl	800a3c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2150      	movs	r1, #80	; 0x50
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 f963 	bl	800a482 <TIM_ITRx_SetConfig>
      break;
 800a1bc:	e02c      	b.n	800a218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6818      	ldr	r0, [r3, #0]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	6859      	ldr	r1, [r3, #4]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	f000 f929 	bl	800a422 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2160      	movs	r1, #96	; 0x60
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 f953 	bl	800a482 <TIM_ITRx_SetConfig>
      break;
 800a1dc:	e01c      	b.n	800a218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	6859      	ldr	r1, [r3, #4]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f000 f8ea 	bl	800a3c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2140      	movs	r1, #64	; 0x40
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 f943 	bl	800a482 <TIM_ITRx_SetConfig>
      break;
 800a1fc:	e00c      	b.n	800a218 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4619      	mov	r1, r3
 800a208:	4610      	mov	r0, r2
 800a20a:	f000 f93a 	bl	800a482 <TIM_ITRx_SetConfig>
      break;
 800a20e:	e003      	b.n	800a218 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	73fb      	strb	r3, [r7, #15]
      break;
 800a214:	e000      	b.n	800a218 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a228:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a232:	b480      	push	{r7}
 800a234:	b083      	sub	sp, #12
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a23a:	bf00      	nop
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a246:	b480      	push	{r7}
 800a248:	b083      	sub	sp, #12
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a24e:	bf00      	nop
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a262:	bf00      	nop
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a26e:	b480      	push	{r7}
 800a270:	b083      	sub	sp, #12
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a276:	bf00      	nop
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
	...

0800a284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a40      	ldr	r2, [pc, #256]	; (800a398 <TIM_Base_SetConfig+0x114>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d013      	beq.n	800a2c4 <TIM_Base_SetConfig+0x40>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a2:	d00f      	beq.n	800a2c4 <TIM_Base_SetConfig+0x40>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a3d      	ldr	r2, [pc, #244]	; (800a39c <TIM_Base_SetConfig+0x118>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d00b      	beq.n	800a2c4 <TIM_Base_SetConfig+0x40>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a3c      	ldr	r2, [pc, #240]	; (800a3a0 <TIM_Base_SetConfig+0x11c>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d007      	beq.n	800a2c4 <TIM_Base_SetConfig+0x40>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a3b      	ldr	r2, [pc, #236]	; (800a3a4 <TIM_Base_SetConfig+0x120>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d003      	beq.n	800a2c4 <TIM_Base_SetConfig+0x40>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a3a      	ldr	r2, [pc, #232]	; (800a3a8 <TIM_Base_SetConfig+0x124>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d108      	bne.n	800a2d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a2f      	ldr	r2, [pc, #188]	; (800a398 <TIM_Base_SetConfig+0x114>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d02b      	beq.n	800a336 <TIM_Base_SetConfig+0xb2>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2e4:	d027      	beq.n	800a336 <TIM_Base_SetConfig+0xb2>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a2c      	ldr	r2, [pc, #176]	; (800a39c <TIM_Base_SetConfig+0x118>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d023      	beq.n	800a336 <TIM_Base_SetConfig+0xb2>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a2b      	ldr	r2, [pc, #172]	; (800a3a0 <TIM_Base_SetConfig+0x11c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d01f      	beq.n	800a336 <TIM_Base_SetConfig+0xb2>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a2a      	ldr	r2, [pc, #168]	; (800a3a4 <TIM_Base_SetConfig+0x120>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d01b      	beq.n	800a336 <TIM_Base_SetConfig+0xb2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a29      	ldr	r2, [pc, #164]	; (800a3a8 <TIM_Base_SetConfig+0x124>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d017      	beq.n	800a336 <TIM_Base_SetConfig+0xb2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a28      	ldr	r2, [pc, #160]	; (800a3ac <TIM_Base_SetConfig+0x128>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d013      	beq.n	800a336 <TIM_Base_SetConfig+0xb2>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a27      	ldr	r2, [pc, #156]	; (800a3b0 <TIM_Base_SetConfig+0x12c>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d00f      	beq.n	800a336 <TIM_Base_SetConfig+0xb2>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a26      	ldr	r2, [pc, #152]	; (800a3b4 <TIM_Base_SetConfig+0x130>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d00b      	beq.n	800a336 <TIM_Base_SetConfig+0xb2>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a25      	ldr	r2, [pc, #148]	; (800a3b8 <TIM_Base_SetConfig+0x134>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d007      	beq.n	800a336 <TIM_Base_SetConfig+0xb2>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a24      	ldr	r2, [pc, #144]	; (800a3bc <TIM_Base_SetConfig+0x138>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d003      	beq.n	800a336 <TIM_Base_SetConfig+0xb2>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a23      	ldr	r2, [pc, #140]	; (800a3c0 <TIM_Base_SetConfig+0x13c>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d108      	bne.n	800a348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a33c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	4313      	orrs	r3, r2
 800a346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	695b      	ldr	r3, [r3, #20]
 800a352:	4313      	orrs	r3, r2
 800a354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	689a      	ldr	r2, [r3, #8]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a0a      	ldr	r2, [pc, #40]	; (800a398 <TIM_Base_SetConfig+0x114>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d003      	beq.n	800a37c <TIM_Base_SetConfig+0xf8>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a0c      	ldr	r2, [pc, #48]	; (800a3a8 <TIM_Base_SetConfig+0x124>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d103      	bne.n	800a384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	691a      	ldr	r2, [r3, #16]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	615a      	str	r2, [r3, #20]
}
 800a38a:	bf00      	nop
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	40010000 	.word	0x40010000
 800a39c:	40000400 	.word	0x40000400
 800a3a0:	40000800 	.word	0x40000800
 800a3a4:	40000c00 	.word	0x40000c00
 800a3a8:	40010400 	.word	0x40010400
 800a3ac:	40014000 	.word	0x40014000
 800a3b0:	40014400 	.word	0x40014400
 800a3b4:	40014800 	.word	0x40014800
 800a3b8:	40001800 	.word	0x40001800
 800a3bc:	40001c00 	.word	0x40001c00
 800a3c0:	40002000 	.word	0x40002000

0800a3c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6a1b      	ldr	r3, [r3, #32]
 800a3d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	f023 0201 	bic.w	r2, r3, #1
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	011b      	lsls	r3, r3, #4
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f023 030a 	bic.w	r3, r3, #10
 800a400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	4313      	orrs	r3, r2
 800a408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	621a      	str	r2, [r3, #32]
}
 800a416:	bf00      	nop
 800a418:	371c      	adds	r7, #28
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a422:	b480      	push	{r7}
 800a424:	b087      	sub	sp, #28
 800a426:	af00      	add	r7, sp, #0
 800a428:	60f8      	str	r0, [r7, #12]
 800a42a:	60b9      	str	r1, [r7, #8]
 800a42c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	f023 0210 	bic.w	r2, r3, #16
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a44c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	031b      	lsls	r3, r3, #12
 800a452:	697a      	ldr	r2, [r7, #20]
 800a454:	4313      	orrs	r3, r2
 800a456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a45e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	011b      	lsls	r3, r3, #4
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	4313      	orrs	r3, r2
 800a468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	697a      	ldr	r2, [r7, #20]
 800a46e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	621a      	str	r2, [r3, #32]
}
 800a476:	bf00      	nop
 800a478:	371c      	adds	r7, #28
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a482:	b480      	push	{r7}
 800a484:	b085      	sub	sp, #20
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	f043 0307 	orr.w	r3, r3, #7
 800a4a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	609a      	str	r2, [r3, #8]
}
 800a4ac:	bf00      	nop
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
 800a4c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	021a      	lsls	r2, r3, #8
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	609a      	str	r2, [r3, #8]
}
 800a4ec:	bf00      	nop
 800a4ee:	371c      	adds	r7, #28
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d101      	bne.n	800a510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a50c:	2302      	movs	r3, #2
 800a50e:	e05a      	b.n	800a5c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2202      	movs	r2, #2
 800a51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	4313      	orrs	r3, r2
 800a540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a21      	ldr	r2, [pc, #132]	; (800a5d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d022      	beq.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a55c:	d01d      	beq.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a1d      	ldr	r2, [pc, #116]	; (800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d018      	beq.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a1b      	ldr	r2, [pc, #108]	; (800a5dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d013      	beq.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a1a      	ldr	r2, [pc, #104]	; (800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d00e      	beq.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a18      	ldr	r2, [pc, #96]	; (800a5e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d009      	beq.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a17      	ldr	r2, [pc, #92]	; (800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d004      	beq.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a15      	ldr	r2, [pc, #84]	; (800a5ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d10c      	bne.n	800a5b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	40010000 	.word	0x40010000
 800a5d8:	40000400 	.word	0x40000400
 800a5dc:	40000800 	.word	0x40000800
 800a5e0:	40000c00 	.word	0x40000c00
 800a5e4:	40010400 	.word	0x40010400
 800a5e8:	40014000 	.word	0x40014000
 800a5ec:	40001800 	.word	0x40001800

0800a5f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a618:	b084      	sub	sp, #16
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	f107 001c 	add.w	r0, r7, #28
 800a626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d122      	bne.n	800a676 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a634:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d105      	bne.n	800a66a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f001 fbee 	bl	800be4c <USB_CoreReset>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]
 800a674:	e01a      	b.n	800a6ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f001 fbe2 	bl	800be4c <USB_CoreReset>
 800a688:	4603      	mov	r3, r0
 800a68a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d106      	bne.n	800a6a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a696:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	639a      	str	r2, [r3, #56]	; 0x38
 800a69e:	e005      	b.n	800a6ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d10b      	bne.n	800a6ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f043 0206 	orr.w	r2, r3, #6
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f043 0220 	orr.w	r2, r3, #32
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6d6:	b004      	add	sp, #16
 800a6d8:	4770      	bx	lr
	...

0800a6dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d165      	bne.n	800a7bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	4a41      	ldr	r2, [pc, #260]	; (800a7f8 <USB_SetTurnaroundTime+0x11c>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d906      	bls.n	800a706 <USB_SetTurnaroundTime+0x2a>
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4a40      	ldr	r2, [pc, #256]	; (800a7fc <USB_SetTurnaroundTime+0x120>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d202      	bcs.n	800a706 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a700:	230f      	movs	r3, #15
 800a702:	617b      	str	r3, [r7, #20]
 800a704:	e062      	b.n	800a7cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	4a3c      	ldr	r2, [pc, #240]	; (800a7fc <USB_SetTurnaroundTime+0x120>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d306      	bcc.n	800a71c <USB_SetTurnaroundTime+0x40>
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	4a3b      	ldr	r2, [pc, #236]	; (800a800 <USB_SetTurnaroundTime+0x124>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d202      	bcs.n	800a71c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a716:	230e      	movs	r3, #14
 800a718:	617b      	str	r3, [r7, #20]
 800a71a:	e057      	b.n	800a7cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	4a38      	ldr	r2, [pc, #224]	; (800a800 <USB_SetTurnaroundTime+0x124>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d306      	bcc.n	800a732 <USB_SetTurnaroundTime+0x56>
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	4a37      	ldr	r2, [pc, #220]	; (800a804 <USB_SetTurnaroundTime+0x128>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d202      	bcs.n	800a732 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a72c:	230d      	movs	r3, #13
 800a72e:	617b      	str	r3, [r7, #20]
 800a730:	e04c      	b.n	800a7cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	4a33      	ldr	r2, [pc, #204]	; (800a804 <USB_SetTurnaroundTime+0x128>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d306      	bcc.n	800a748 <USB_SetTurnaroundTime+0x6c>
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	4a32      	ldr	r2, [pc, #200]	; (800a808 <USB_SetTurnaroundTime+0x12c>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d802      	bhi.n	800a748 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a742:	230c      	movs	r3, #12
 800a744:	617b      	str	r3, [r7, #20]
 800a746:	e041      	b.n	800a7cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	4a2f      	ldr	r2, [pc, #188]	; (800a808 <USB_SetTurnaroundTime+0x12c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d906      	bls.n	800a75e <USB_SetTurnaroundTime+0x82>
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	4a2e      	ldr	r2, [pc, #184]	; (800a80c <USB_SetTurnaroundTime+0x130>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d802      	bhi.n	800a75e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a758:	230b      	movs	r3, #11
 800a75a:	617b      	str	r3, [r7, #20]
 800a75c:	e036      	b.n	800a7cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	4a2a      	ldr	r2, [pc, #168]	; (800a80c <USB_SetTurnaroundTime+0x130>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d906      	bls.n	800a774 <USB_SetTurnaroundTime+0x98>
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	4a29      	ldr	r2, [pc, #164]	; (800a810 <USB_SetTurnaroundTime+0x134>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d802      	bhi.n	800a774 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a76e:	230a      	movs	r3, #10
 800a770:	617b      	str	r3, [r7, #20]
 800a772:	e02b      	b.n	800a7cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	4a26      	ldr	r2, [pc, #152]	; (800a810 <USB_SetTurnaroundTime+0x134>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d906      	bls.n	800a78a <USB_SetTurnaroundTime+0xae>
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	4a25      	ldr	r2, [pc, #148]	; (800a814 <USB_SetTurnaroundTime+0x138>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d202      	bcs.n	800a78a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a784:	2309      	movs	r3, #9
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	e020      	b.n	800a7cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	4a21      	ldr	r2, [pc, #132]	; (800a814 <USB_SetTurnaroundTime+0x138>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d306      	bcc.n	800a7a0 <USB_SetTurnaroundTime+0xc4>
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	4a20      	ldr	r2, [pc, #128]	; (800a818 <USB_SetTurnaroundTime+0x13c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d802      	bhi.n	800a7a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a79a:	2308      	movs	r3, #8
 800a79c:	617b      	str	r3, [r7, #20]
 800a79e:	e015      	b.n	800a7cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	4a1d      	ldr	r2, [pc, #116]	; (800a818 <USB_SetTurnaroundTime+0x13c>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d906      	bls.n	800a7b6 <USB_SetTurnaroundTime+0xda>
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	4a1c      	ldr	r2, [pc, #112]	; (800a81c <USB_SetTurnaroundTime+0x140>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d202      	bcs.n	800a7b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a7b0:	2307      	movs	r3, #7
 800a7b2:	617b      	str	r3, [r7, #20]
 800a7b4:	e00a      	b.n	800a7cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a7b6:	2306      	movs	r3, #6
 800a7b8:	617b      	str	r3, [r7, #20]
 800a7ba:	e007      	b.n	800a7cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a7bc:	79fb      	ldrb	r3, [r7, #7]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d102      	bne.n	800a7c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a7c2:	2309      	movs	r3, #9
 800a7c4:	617b      	str	r3, [r7, #20]
 800a7c6:	e001      	b.n	800a7cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a7c8:	2309      	movs	r3, #9
 800a7ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	68da      	ldr	r2, [r3, #12]
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	029b      	lsls	r3, r3, #10
 800a7e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a7e4:	431a      	orrs	r2, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	371c      	adds	r7, #28
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	00d8acbf 	.word	0x00d8acbf
 800a7fc:	00e4e1c0 	.word	0x00e4e1c0
 800a800:	00f42400 	.word	0x00f42400
 800a804:	01067380 	.word	0x01067380
 800a808:	011a499f 	.word	0x011a499f
 800a80c:	01312cff 	.word	0x01312cff
 800a810:	014ca43f 	.word	0x014ca43f
 800a814:	016e3600 	.word	0x016e3600
 800a818:	01a6ab1f 	.word	0x01a6ab1f
 800a81c:	01e84800 	.word	0x01e84800

0800a820 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f043 0201 	orr.w	r2, r3, #1
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a842:	b480      	push	{r7}
 800a844:	b083      	sub	sp, #12
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f023 0201 	bic.w	r2, r3, #1
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a870:	2300      	movs	r3, #0
 800a872:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a880:	78fb      	ldrb	r3, [r7, #3]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d115      	bne.n	800a8b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a892:	2001      	movs	r0, #1
 800a894:	f7f9 fdd6 	bl	8004444 <HAL_Delay>
      ms++;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3301      	adds	r3, #1
 800a89c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f001 fa45 	bl	800bd2e <USB_GetMode>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d01e      	beq.n	800a8e8 <USB_SetCurrentMode+0x84>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2b31      	cmp	r3, #49	; 0x31
 800a8ae:	d9f0      	bls.n	800a892 <USB_SetCurrentMode+0x2e>
 800a8b0:	e01a      	b.n	800a8e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8b2:	78fb      	ldrb	r3, [r7, #3]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d115      	bne.n	800a8e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a8c4:	2001      	movs	r0, #1
 800a8c6:	f7f9 fdbd 	bl	8004444 <HAL_Delay>
      ms++;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f001 fa2c 	bl	800bd2e <USB_GetMode>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d005      	beq.n	800a8e8 <USB_SetCurrentMode+0x84>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2b31      	cmp	r3, #49	; 0x31
 800a8e0:	d9f0      	bls.n	800a8c4 <USB_SetCurrentMode+0x60>
 800a8e2:	e001      	b.n	800a8e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e005      	b.n	800a8f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2b32      	cmp	r3, #50	; 0x32
 800a8ec:	d101      	bne.n	800a8f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e000      	b.n	800a8f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b086      	sub	sp, #24
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a90a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a916:	2300      	movs	r3, #0
 800a918:	613b      	str	r3, [r7, #16]
 800a91a:	e009      	b.n	800a930 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	3340      	adds	r3, #64	; 0x40
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	2200      	movs	r2, #0
 800a928:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	3301      	adds	r3, #1
 800a92e:	613b      	str	r3, [r7, #16]
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	2b0e      	cmp	r3, #14
 800a934:	d9f2      	bls.n	800a91c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d11c      	bne.n	800a976 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a94a:	f043 0302 	orr.w	r3, r3, #2
 800a94e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a954:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a960:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	639a      	str	r2, [r3, #56]	; 0x38
 800a974:	e00b      	b.n	800a98e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a986:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a994:	461a      	mov	r2, r3
 800a996:	2300      	movs	r3, #0
 800a998:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	680b      	ldr	r3, [r1, #0]
 800a9ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d10c      	bne.n	800a9ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d104      	bne.n	800a9c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f965 	bl	800ac8c <USB_SetDevSpeed>
 800a9c2:	e008      	b.n	800a9d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f960 	bl	800ac8c <USB_SetDevSpeed>
 800a9cc:	e003      	b.n	800a9d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a9ce:	2103      	movs	r1, #3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f95b 	bl	800ac8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a9d6:	2110      	movs	r1, #16
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f8f3 	bl	800abc4 <USB_FlushTxFifo>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f91f 	bl	800ac2c <USB_FlushRxFifo>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9fe:	461a      	mov	r2, r3
 800aa00:	2300      	movs	r3, #0
 800aa02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa16:	461a      	mov	r2, r3
 800aa18:	2300      	movs	r3, #0
 800aa1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	613b      	str	r3, [r7, #16]
 800aa20:	e043      	b.n	800aaaa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	015a      	lsls	r2, r3, #5
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	4413      	add	r3, r2
 800aa2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa38:	d118      	bne.n	800aa6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10a      	bne.n	800aa56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa52:	6013      	str	r3, [r2, #0]
 800aa54:	e013      	b.n	800aa7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	015a      	lsls	r2, r3, #5
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa62:	461a      	mov	r2, r3
 800aa64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	e008      	b.n	800aa7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa78:	461a      	mov	r2, r3
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aaa2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	613b      	str	r3, [r7, #16]
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d3b7      	bcc.n	800aa22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aab2:	2300      	movs	r3, #0
 800aab4:	613b      	str	r3, [r7, #16]
 800aab6:	e043      	b.n	800ab40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aace:	d118      	bne.n	800ab02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10a      	bne.n	800aaec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	015a      	lsls	r2, r3, #5
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	4413      	add	r3, r2
 800aade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae2:	461a      	mov	r2, r3
 800aae4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	e013      	b.n	800ab14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	015a      	lsls	r2, r3, #5
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf8:	461a      	mov	r2, r3
 800aafa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	e008      	b.n	800ab14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	015a      	lsls	r2, r3, #5
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4413      	add	r3, r2
 800ab0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab0e:	461a      	mov	r2, r3
 800ab10:	2300      	movs	r3, #0
 800ab12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab20:	461a      	mov	r2, r3
 800ab22:	2300      	movs	r3, #0
 800ab24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	015a      	lsls	r2, r3, #5
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab32:	461a      	mov	r2, r3
 800ab34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	613b      	str	r3, [r7, #16]
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d3b7      	bcc.n	800aab8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d105      	bne.n	800ab7c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	f043 0210 	orr.w	r2, r3, #16
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	699a      	ldr	r2, [r3, #24]
 800ab80:	4b0f      	ldr	r3, [pc, #60]	; (800abc0 <USB_DevInit+0x2c4>)
 800ab82:	4313      	orrs	r3, r2
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d005      	beq.n	800ab9a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	699b      	ldr	r3, [r3, #24]
 800ab92:	f043 0208 	orr.w	r2, r3, #8
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d107      	bne.n	800abb0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aba8:	f043 0304 	orr.w	r3, r3, #4
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800abb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3718      	adds	r7, #24
 800abb6:	46bd      	mov	sp, r7
 800abb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abbc:	b004      	add	sp, #16
 800abbe:	4770      	bx	lr
 800abc0:	803c3800 	.word	0x803c3800

0800abc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800abce:	2300      	movs	r3, #0
 800abd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	3301      	adds	r3, #1
 800abd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4a13      	ldr	r2, [pc, #76]	; (800ac28 <USB_FlushTxFifo+0x64>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d901      	bls.n	800abe4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e01b      	b.n	800ac1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	daf2      	bge.n	800abd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800abec:	2300      	movs	r3, #0
 800abee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	019b      	lsls	r3, r3, #6
 800abf4:	f043 0220 	orr.w	r2, r3, #32
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3301      	adds	r3, #1
 800ac00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4a08      	ldr	r2, [pc, #32]	; (800ac28 <USB_FlushTxFifo+0x64>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d901      	bls.n	800ac0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e006      	b.n	800ac1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	f003 0320 	and.w	r3, r3, #32
 800ac16:	2b20      	cmp	r3, #32
 800ac18:	d0f0      	beq.n	800abfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	00030d40 	.word	0x00030d40

0800ac2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac34:	2300      	movs	r3, #0
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	4a11      	ldr	r2, [pc, #68]	; (800ac88 <USB_FlushRxFifo+0x5c>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d901      	bls.n	800ac4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac46:	2303      	movs	r3, #3
 800ac48:	e018      	b.n	800ac7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	daf2      	bge.n	800ac38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac52:	2300      	movs	r3, #0
 800ac54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2210      	movs	r2, #16
 800ac5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	4a08      	ldr	r2, [pc, #32]	; (800ac88 <USB_FlushRxFifo+0x5c>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d901      	bls.n	800ac6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac6a:	2303      	movs	r3, #3
 800ac6c:	e006      	b.n	800ac7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	f003 0310 	and.w	r3, r3, #16
 800ac76:	2b10      	cmp	r3, #16
 800ac78:	d0f0      	beq.n	800ac5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	00030d40 	.word	0x00030d40

0800ac8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	460b      	mov	r3, r1
 800ac96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	78fb      	ldrb	r3, [r7, #3]
 800aca6:	68f9      	ldr	r1, [r7, #12]
 800aca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acac:	4313      	orrs	r3, r2
 800acae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b087      	sub	sp, #28
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	f003 0306 	and.w	r3, r3, #6
 800acd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d102      	bne.n	800ace4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800acde:	2300      	movs	r3, #0
 800ace0:	75fb      	strb	r3, [r7, #23]
 800ace2:	e00a      	b.n	800acfa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d002      	beq.n	800acf0 <USB_GetDevSpeed+0x32>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b06      	cmp	r3, #6
 800acee:	d102      	bne.n	800acf6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800acf0:	2302      	movs	r3, #2
 800acf2:	75fb      	strb	r3, [r7, #23]
 800acf4:	e001      	b.n	800acfa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800acf6:	230f      	movs	r3, #15
 800acf8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	371c      	adds	r7, #28
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	785b      	ldrb	r3, [r3, #1]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d13a      	bne.n	800ad9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad2a:	69da      	ldr	r2, [r3, #28]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	f003 030f 	and.w	r3, r3, #15
 800ad34:	2101      	movs	r1, #1
 800ad36:	fa01 f303 	lsl.w	r3, r1, r3
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	68f9      	ldr	r1, [r7, #12]
 800ad3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad42:	4313      	orrs	r3, r2
 800ad44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	015a      	lsls	r2, r3, #5
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d155      	bne.n	800ae08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	015a      	lsls	r2, r3, #5
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4413      	add	r3, r2
 800ad64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	791b      	ldrb	r3, [r3, #4]
 800ad76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	059b      	lsls	r3, r3, #22
 800ad7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad80:	4313      	orrs	r3, r2
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	0151      	lsls	r1, r2, #5
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	440a      	add	r2, r1
 800ad8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad96:	6013      	str	r3, [r2, #0]
 800ad98:	e036      	b.n	800ae08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada0:	69da      	ldr	r2, [r3, #28]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	f003 030f 	and.w	r3, r3, #15
 800adaa:	2101      	movs	r1, #1
 800adac:	fa01 f303 	lsl.w	r3, r1, r3
 800adb0:	041b      	lsls	r3, r3, #16
 800adb2:	68f9      	ldr	r1, [r7, #12]
 800adb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adb8:	4313      	orrs	r3, r2
 800adba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	015a      	lsls	r2, r3, #5
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	4413      	add	r3, r2
 800adc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adce:	2b00      	cmp	r3, #0
 800add0:	d11a      	bne.n	800ae08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	015a      	lsls	r2, r3, #5
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4413      	add	r3, r2
 800adda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	791b      	ldrb	r3, [r3, #4]
 800adec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800adee:	430b      	orrs	r3, r1
 800adf0:	4313      	orrs	r3, r2
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	0151      	lsls	r1, r2, #5
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	440a      	add	r2, r1
 800adfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
	...

0800ae18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	785b      	ldrb	r3, [r3, #1]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d161      	bne.n	800aef8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae4a:	d11f      	bne.n	800ae8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	015a      	lsls	r2, r3, #5
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	4413      	add	r3, r2
 800ae54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	0151      	lsls	r1, r2, #5
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	440a      	add	r2, r1
 800ae62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	0151      	lsls	r1, r2, #5
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	440a      	add	r2, r1
 800ae82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	f003 030f 	and.w	r3, r3, #15
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	fa01 f303 	lsl.w	r3, r1, r3
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	43db      	mvns	r3, r3
 800aea6:	68f9      	ldr	r1, [r7, #12]
 800aea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aeac:	4013      	ands	r3, r2
 800aeae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeb6:	69da      	ldr	r2, [r3, #28]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	f003 030f 	and.w	r3, r3, #15
 800aec0:	2101      	movs	r1, #1
 800aec2:	fa01 f303 	lsl.w	r3, r1, r3
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	43db      	mvns	r3, r3
 800aeca:	68f9      	ldr	r1, [r7, #12]
 800aecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aed0:	4013      	ands	r3, r2
 800aed2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	015a      	lsls	r2, r3, #5
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	4413      	add	r3, r2
 800aedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	0159      	lsls	r1, r3, #5
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	440b      	add	r3, r1
 800aeea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeee:	4619      	mov	r1, r3
 800aef0:	4b35      	ldr	r3, [pc, #212]	; (800afc8 <USB_DeactivateEndpoint+0x1b0>)
 800aef2:	4013      	ands	r3, r2
 800aef4:	600b      	str	r3, [r1, #0]
 800aef6:	e060      	b.n	800afba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	015a      	lsls	r2, r3, #5
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af0e:	d11f      	bne.n	800af50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	015a      	lsls	r2, r3, #5
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	4413      	add	r3, r2
 800af18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	0151      	lsls	r1, r2, #5
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	440a      	add	r2, r1
 800af26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	0151      	lsls	r1, r2, #5
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	440a      	add	r2, r1
 800af46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	f003 030f 	and.w	r3, r3, #15
 800af60:	2101      	movs	r1, #1
 800af62:	fa01 f303 	lsl.w	r3, r1, r3
 800af66:	041b      	lsls	r3, r3, #16
 800af68:	43db      	mvns	r3, r3
 800af6a:	68f9      	ldr	r1, [r7, #12]
 800af6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af70:	4013      	ands	r3, r2
 800af72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af7a:	69da      	ldr	r2, [r3, #28]
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	f003 030f 	and.w	r3, r3, #15
 800af84:	2101      	movs	r1, #1
 800af86:	fa01 f303 	lsl.w	r3, r1, r3
 800af8a:	041b      	lsls	r3, r3, #16
 800af8c:	43db      	mvns	r3, r3
 800af8e:	68f9      	ldr	r1, [r7, #12]
 800af90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af94:	4013      	ands	r3, r2
 800af96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	0159      	lsls	r1, r3, #5
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	440b      	add	r3, r1
 800afae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb2:	4619      	mov	r1, r3
 800afb4:	4b05      	ldr	r3, [pc, #20]	; (800afcc <USB_DeactivateEndpoint+0x1b4>)
 800afb6:	4013      	ands	r3, r2
 800afb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3714      	adds	r7, #20
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr
 800afc8:	ec337800 	.word	0xec337800
 800afcc:	eff37800 	.word	0xeff37800

0800afd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b08a      	sub	sp, #40	; 0x28
 800afd4:	af02      	add	r7, sp, #8
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	4613      	mov	r3, r2
 800afdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	785b      	ldrb	r3, [r3, #1]
 800afec:	2b01      	cmp	r3, #1
 800afee:	f040 815c 	bne.w	800b2aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d132      	bne.n	800b060 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	015a      	lsls	r2, r3, #5
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	4413      	add	r3, r2
 800b002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	0151      	lsls	r1, r2, #5
 800b00c:	69fa      	ldr	r2, [r7, #28]
 800b00e:	440a      	add	r2, r1
 800b010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b014:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b018:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b01c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	015a      	lsls	r2, r3, #5
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	4413      	add	r3, r2
 800b026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	69ba      	ldr	r2, [r7, #24]
 800b02e:	0151      	lsls	r1, r2, #5
 800b030:	69fa      	ldr	r2, [r7, #28]
 800b032:	440a      	add	r2, r1
 800b034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b03c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	015a      	lsls	r2, r3, #5
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	4413      	add	r3, r2
 800b046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	69ba      	ldr	r2, [r7, #24]
 800b04e:	0151      	lsls	r1, r2, #5
 800b050:	69fa      	ldr	r2, [r7, #28]
 800b052:	440a      	add	r2, r1
 800b054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b058:	0cdb      	lsrs	r3, r3, #19
 800b05a:	04db      	lsls	r3, r3, #19
 800b05c:	6113      	str	r3, [r2, #16]
 800b05e:	e074      	b.n	800b14a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	015a      	lsls	r2, r3, #5
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	4413      	add	r3, r2
 800b068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	69ba      	ldr	r2, [r7, #24]
 800b070:	0151      	lsls	r1, r2, #5
 800b072:	69fa      	ldr	r2, [r7, #28]
 800b074:	440a      	add	r2, r1
 800b076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b07a:	0cdb      	lsrs	r3, r3, #19
 800b07c:	04db      	lsls	r3, r3, #19
 800b07e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	015a      	lsls	r2, r3, #5
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	4413      	add	r3, r2
 800b088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	69ba      	ldr	r2, [r7, #24]
 800b090:	0151      	lsls	r1, r2, #5
 800b092:	69fa      	ldr	r2, [r7, #28]
 800b094:	440a      	add	r2, r1
 800b096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b09a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b09e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	015a      	lsls	r2, r3, #5
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	6999      	ldr	r1, [r3, #24]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	440b      	add	r3, r1
 800b0bc:	1e59      	subs	r1, r3, #1
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b0c8:	4b9d      	ldr	r3, [pc, #628]	; (800b340 <USB_EPStartXfer+0x370>)
 800b0ca:	400b      	ands	r3, r1
 800b0cc:	69b9      	ldr	r1, [r7, #24]
 800b0ce:	0148      	lsls	r0, r1, #5
 800b0d0:	69f9      	ldr	r1, [r7, #28]
 800b0d2:	4401      	add	r1, r0
 800b0d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	015a      	lsls	r2, r3, #5
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e8:	691a      	ldr	r2, [r3, #16]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0f2:	69b9      	ldr	r1, [r7, #24]
 800b0f4:	0148      	lsls	r0, r1, #5
 800b0f6:	69f9      	ldr	r1, [r7, #28]
 800b0f8:	4401      	add	r1, r0
 800b0fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0fe:	4313      	orrs	r3, r2
 800b100:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	791b      	ldrb	r3, [r3, #4]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d11f      	bne.n	800b14a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	015a      	lsls	r2, r3, #5
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	4413      	add	r3, r2
 800b112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	69ba      	ldr	r2, [r7, #24]
 800b11a:	0151      	lsls	r1, r2, #5
 800b11c:	69fa      	ldr	r2, [r7, #28]
 800b11e:	440a      	add	r2, r1
 800b120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b124:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b128:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	015a      	lsls	r2, r3, #5
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	4413      	add	r3, r2
 800b132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	0151      	lsls	r1, r2, #5
 800b13c:	69fa      	ldr	r2, [r7, #28]
 800b13e:	440a      	add	r2, r1
 800b140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b144:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b148:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b14a:	79fb      	ldrb	r3, [r7, #7]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d14b      	bne.n	800b1e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d009      	beq.n	800b16c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b164:	461a      	mov	r2, r3
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	791b      	ldrb	r3, [r3, #4]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d128      	bne.n	800b1c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b180:	2b00      	cmp	r3, #0
 800b182:	d110      	bne.n	800b1a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	015a      	lsls	r2, r3, #5
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	4413      	add	r3, r2
 800b18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	69ba      	ldr	r2, [r7, #24]
 800b194:	0151      	lsls	r1, r2, #5
 800b196:	69fa      	ldr	r2, [r7, #28]
 800b198:	440a      	add	r2, r1
 800b19a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b19e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b1a2:	6013      	str	r3, [r2, #0]
 800b1a4:	e00f      	b.n	800b1c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	015a      	lsls	r2, r3, #5
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	0151      	lsls	r1, r2, #5
 800b1b8:	69fa      	ldr	r2, [r7, #28]
 800b1ba:	440a      	add	r2, r1
 800b1bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	015a      	lsls	r2, r3, #5
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	0151      	lsls	r1, r2, #5
 800b1d8:	69fa      	ldr	r2, [r7, #28]
 800b1da:	440a      	add	r2, r1
 800b1dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1e4:	6013      	str	r3, [r2, #0]
 800b1e6:	e133      	b.n	800b450 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	015a      	lsls	r2, r3, #5
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	0151      	lsls	r1, r2, #5
 800b1fa:	69fa      	ldr	r2, [r7, #28]
 800b1fc:	440a      	add	r2, r1
 800b1fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b202:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b206:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	791b      	ldrb	r3, [r3, #4]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d015      	beq.n	800b23c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	2b00      	cmp	r3, #0
 800b216:	f000 811b 	beq.w	800b450 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	f003 030f 	and.w	r3, r3, #15
 800b22a:	2101      	movs	r1, #1
 800b22c:	fa01 f303 	lsl.w	r3, r1, r3
 800b230:	69f9      	ldr	r1, [r7, #28]
 800b232:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b236:	4313      	orrs	r3, r2
 800b238:	634b      	str	r3, [r1, #52]	; 0x34
 800b23a:	e109      	b.n	800b450 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d110      	bne.n	800b26e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	015a      	lsls	r2, r3, #5
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	4413      	add	r3, r2
 800b254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	69ba      	ldr	r2, [r7, #24]
 800b25c:	0151      	lsls	r1, r2, #5
 800b25e:	69fa      	ldr	r2, [r7, #28]
 800b260:	440a      	add	r2, r1
 800b262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b266:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b26a:	6013      	str	r3, [r2, #0]
 800b26c:	e00f      	b.n	800b28e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	015a      	lsls	r2, r3, #5
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	4413      	add	r3, r2
 800b276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	69ba      	ldr	r2, [r7, #24]
 800b27e:	0151      	lsls	r1, r2, #5
 800b280:	69fa      	ldr	r2, [r7, #28]
 800b282:	440a      	add	r2, r1
 800b284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b28c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	6919      	ldr	r1, [r3, #16]
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	781a      	ldrb	r2, [r3, #0]
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	b298      	uxth	r0, r3
 800b29c:	79fb      	ldrb	r3, [r7, #7]
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f000 fade 	bl	800b864 <USB_WritePacket>
 800b2a8:	e0d2      	b.n	800b450 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	015a      	lsls	r2, r3, #5
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	69ba      	ldr	r2, [r7, #24]
 800b2ba:	0151      	lsls	r1, r2, #5
 800b2bc:	69fa      	ldr	r2, [r7, #28]
 800b2be:	440a      	add	r2, r1
 800b2c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2c4:	0cdb      	lsrs	r3, r3, #19
 800b2c6:	04db      	lsls	r3, r3, #19
 800b2c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	015a      	lsls	r2, r3, #5
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	0151      	lsls	r1, r2, #5
 800b2dc:	69fa      	ldr	r2, [r7, #28]
 800b2de:	440a      	add	r2, r1
 800b2e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d126      	bne.n	800b344 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	015a      	lsls	r2, r3, #5
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b302:	691a      	ldr	r2, [r3, #16]
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b30c:	69b9      	ldr	r1, [r7, #24]
 800b30e:	0148      	lsls	r0, r1, #5
 800b310:	69f9      	ldr	r1, [r7, #28]
 800b312:	4401      	add	r1, r0
 800b314:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b318:	4313      	orrs	r3, r2
 800b31a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	015a      	lsls	r2, r3, #5
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	4413      	add	r3, r2
 800b324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	69ba      	ldr	r2, [r7, #24]
 800b32c:	0151      	lsls	r1, r2, #5
 800b32e:	69fa      	ldr	r2, [r7, #28]
 800b330:	440a      	add	r2, r1
 800b332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b33a:	6113      	str	r3, [r2, #16]
 800b33c:	e03a      	b.n	800b3b4 <USB_EPStartXfer+0x3e4>
 800b33e:	bf00      	nop
 800b340:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	699a      	ldr	r2, [r3, #24]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	4413      	add	r3, r2
 800b34e:	1e5a      	subs	r2, r3, #1
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	fbb2 f3f3 	udiv	r3, r2, r3
 800b358:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	8afa      	ldrh	r2, [r7, #22]
 800b360:	fb03 f202 	mul.w	r2, r3, r2
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b374:	691a      	ldr	r2, [r3, #16]
 800b376:	8afb      	ldrh	r3, [r7, #22]
 800b378:	04d9      	lsls	r1, r3, #19
 800b37a:	4b38      	ldr	r3, [pc, #224]	; (800b45c <USB_EPStartXfer+0x48c>)
 800b37c:	400b      	ands	r3, r1
 800b37e:	69b9      	ldr	r1, [r7, #24]
 800b380:	0148      	lsls	r0, r1, #5
 800b382:	69f9      	ldr	r1, [r7, #28]
 800b384:	4401      	add	r1, r0
 800b386:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b38a:	4313      	orrs	r3, r2
 800b38c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	015a      	lsls	r2, r3, #5
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39a:	691a      	ldr	r2, [r3, #16]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	69db      	ldr	r3, [r3, #28]
 800b3a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3a4:	69b9      	ldr	r1, [r7, #24]
 800b3a6:	0148      	lsls	r0, r1, #5
 800b3a8:	69f9      	ldr	r1, [r7, #28]
 800b3aa:	4401      	add	r1, r0
 800b3ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b3b4:	79fb      	ldrb	r3, [r7, #7]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d10d      	bne.n	800b3d6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d009      	beq.n	800b3d6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	6919      	ldr	r1, [r3, #16]
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d2:	460a      	mov	r2, r1
 800b3d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	791b      	ldrb	r3, [r3, #4]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d128      	bne.n	800b430 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d110      	bne.n	800b410 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	69ba      	ldr	r2, [r7, #24]
 800b3fe:	0151      	lsls	r1, r2, #5
 800b400:	69fa      	ldr	r2, [r7, #28]
 800b402:	440a      	add	r2, r1
 800b404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b40c:	6013      	str	r3, [r2, #0]
 800b40e:	e00f      	b.n	800b430 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	015a      	lsls	r2, r3, #5
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	4413      	add	r3, r2
 800b418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	69ba      	ldr	r2, [r7, #24]
 800b420:	0151      	lsls	r1, r2, #5
 800b422:	69fa      	ldr	r2, [r7, #28]
 800b424:	440a      	add	r2, r1
 800b426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b42a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b42e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	0151      	lsls	r1, r2, #5
 800b442:	69fa      	ldr	r2, [r7, #28]
 800b444:	440a      	add	r2, r1
 800b446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b44a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b44e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3720      	adds	r7, #32
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	1ff80000 	.word	0x1ff80000

0800b460 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b460:	b480      	push	{r7}
 800b462:	b087      	sub	sp, #28
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	4613      	mov	r3, r2
 800b46c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	785b      	ldrb	r3, [r3, #1]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	f040 80ce 	bne.w	800b61e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d132      	bne.n	800b4f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	015a      	lsls	r2, r3, #5
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	4413      	add	r3, r2
 800b492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	693a      	ldr	r2, [r7, #16]
 800b49a:	0151      	lsls	r1, r2, #5
 800b49c:	697a      	ldr	r2, [r7, #20]
 800b49e:	440a      	add	r2, r1
 800b4a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	0151      	lsls	r1, r2, #5
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	440a      	add	r2, r1
 800b4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	015a      	lsls	r2, r3, #5
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	693a      	ldr	r2, [r7, #16]
 800b4de:	0151      	lsls	r1, r2, #5
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	440a      	add	r2, r1
 800b4e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4e8:	0cdb      	lsrs	r3, r3, #19
 800b4ea:	04db      	lsls	r3, r3, #19
 800b4ec:	6113      	str	r3, [r2, #16]
 800b4ee:	e04e      	b.n	800b58e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	015a      	lsls	r2, r3, #5
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	0151      	lsls	r1, r2, #5
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	440a      	add	r2, r1
 800b506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b50a:	0cdb      	lsrs	r3, r3, #19
 800b50c:	04db      	lsls	r3, r3, #19
 800b50e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	693a      	ldr	r2, [r7, #16]
 800b520:	0151      	lsls	r1, r2, #5
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	440a      	add	r2, r1
 800b526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b52a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b52e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b532:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	699a      	ldr	r2, [r3, #24]
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d903      	bls.n	800b548 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	68da      	ldr	r2, [r3, #12]
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	015a      	lsls	r2, r3, #5
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	4413      	add	r3, r2
 800b550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	693a      	ldr	r2, [r7, #16]
 800b558:	0151      	lsls	r1, r2, #5
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	440a      	add	r2, r1
 800b55e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b562:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b566:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	015a      	lsls	r2, r3, #5
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b574:	691a      	ldr	r2, [r3, #16]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b57e:	6939      	ldr	r1, [r7, #16]
 800b580:	0148      	lsls	r0, r1, #5
 800b582:	6979      	ldr	r1, [r7, #20]
 800b584:	4401      	add	r1, r0
 800b586:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b58a:	4313      	orrs	r3, r2
 800b58c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b58e:	79fb      	ldrb	r3, [r7, #7]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d11e      	bne.n	800b5d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	695b      	ldr	r3, [r3, #20]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d009      	beq.n	800b5b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	015a      	lsls	r2, r3, #5
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	015a      	lsls	r2, r3, #5
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	693a      	ldr	r2, [r7, #16]
 800b5c0:	0151      	lsls	r1, r2, #5
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	440a      	add	r2, r1
 800b5c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5ce:	6013      	str	r3, [r2, #0]
 800b5d0:	e097      	b.n	800b702 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	015a      	lsls	r2, r3, #5
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	4413      	add	r3, r2
 800b5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	693a      	ldr	r2, [r7, #16]
 800b5e2:	0151      	lsls	r1, r2, #5
 800b5e4:	697a      	ldr	r2, [r7, #20]
 800b5e6:	440a      	add	r2, r1
 800b5e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 8083 	beq.w	800b702 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	f003 030f 	and.w	r3, r3, #15
 800b60c:	2101      	movs	r1, #1
 800b60e:	fa01 f303 	lsl.w	r3, r1, r3
 800b612:	6979      	ldr	r1, [r7, #20]
 800b614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b618:	4313      	orrs	r3, r2
 800b61a:	634b      	str	r3, [r1, #52]	; 0x34
 800b61c:	e071      	b.n	800b702 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	015a      	lsls	r2, r3, #5
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	4413      	add	r3, r2
 800b626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	0151      	lsls	r1, r2, #5
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	440a      	add	r2, r1
 800b634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b638:	0cdb      	lsrs	r3, r3, #19
 800b63a:	04db      	lsls	r3, r3, #19
 800b63c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	015a      	lsls	r2, r3, #5
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	4413      	add	r3, r2
 800b646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	0151      	lsls	r1, r2, #5
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	440a      	add	r2, r1
 800b654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b658:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b65c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b660:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	699b      	ldr	r3, [r3, #24]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d003      	beq.n	800b672 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	68da      	ldr	r2, [r3, #12]
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	68da      	ldr	r2, [r3, #12]
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	4413      	add	r3, r2
 800b682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	0151      	lsls	r1, r2, #5
 800b68c:	697a      	ldr	r2, [r7, #20]
 800b68e:	440a      	add	r2, r1
 800b690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	015a      	lsls	r2, r3, #5
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a6:	691a      	ldr	r2, [r3, #16]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	69db      	ldr	r3, [r3, #28]
 800b6ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6b0:	6939      	ldr	r1, [r7, #16]
 800b6b2:	0148      	lsls	r0, r1, #5
 800b6b4:	6979      	ldr	r1, [r7, #20]
 800b6b6:	4401      	add	r1, r0
 800b6b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d10d      	bne.n	800b6e2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	691b      	ldr	r3, [r3, #16]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d009      	beq.n	800b6e2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	6919      	ldr	r1, [r3, #16]
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	015a      	lsls	r2, r3, #5
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	4413      	add	r3, r2
 800b6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6de:	460a      	mov	r2, r1
 800b6e0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	015a      	lsls	r2, r3, #5
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	0151      	lsls	r1, r2, #5
 800b6f4:	697a      	ldr	r2, [r7, #20]
 800b6f6:	440a      	add	r2, r1
 800b6f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b700:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	371c      	adds	r7, #28
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b710:	b480      	push	{r7}
 800b712:	b087      	sub	sp, #28
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b71a:	2300      	movs	r3, #0
 800b71c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b71e:	2300      	movs	r3, #0
 800b720:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	785b      	ldrb	r3, [r3, #1]
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d14a      	bne.n	800b7c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	015a      	lsls	r2, r3, #5
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	4413      	add	r3, r2
 800b738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b746:	f040 8086 	bne.w	800b856 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	015a      	lsls	r2, r3, #5
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	4413      	add	r3, r2
 800b754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	7812      	ldrb	r2, [r2, #0]
 800b75e:	0151      	lsls	r1, r2, #5
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	440a      	add	r2, r1
 800b764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b768:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b76c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	015a      	lsls	r2, r3, #5
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	4413      	add	r3, r2
 800b778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	7812      	ldrb	r2, [r2, #0]
 800b782:	0151      	lsls	r1, r2, #5
 800b784:	693a      	ldr	r2, [r7, #16]
 800b786:	440a      	add	r2, r1
 800b788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b78c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b790:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	3301      	adds	r3, #1
 800b796:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d902      	bls.n	800b7a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	75fb      	strb	r3, [r7, #23]
          break;
 800b7a6:	e056      	b.n	800b856 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	015a      	lsls	r2, r3, #5
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7c0:	d0e7      	beq.n	800b792 <USB_EPStopXfer+0x82>
 800b7c2:	e048      	b.n	800b856 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	015a      	lsls	r2, r3, #5
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7dc:	d13b      	bne.n	800b856 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	015a      	lsls	r2, r3, #5
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	7812      	ldrb	r2, [r2, #0]
 800b7f2:	0151      	lsls	r1, r2, #5
 800b7f4:	693a      	ldr	r2, [r7, #16]
 800b7f6:	440a      	add	r2, r1
 800b7f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b800:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	015a      	lsls	r2, r3, #5
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	4413      	add	r3, r2
 800b80c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	683a      	ldr	r2, [r7, #0]
 800b814:	7812      	ldrb	r2, [r2, #0]
 800b816:	0151      	lsls	r1, r2, #5
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	440a      	add	r2, r1
 800b81c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b824:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	3301      	adds	r3, #1
 800b82a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b832:	4293      	cmp	r3, r2
 800b834:	d902      	bls.n	800b83c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	75fb      	strb	r3, [r7, #23]
          break;
 800b83a:	e00c      	b.n	800b856 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	015a      	lsls	r2, r3, #5
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	4413      	add	r3, r2
 800b846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b854:	d0e7      	beq.n	800b826 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b856:	7dfb      	ldrb	r3, [r7, #23]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	371c      	adds	r7, #28
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b864:	b480      	push	{r7}
 800b866:	b089      	sub	sp, #36	; 0x24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	4611      	mov	r1, r2
 800b870:	461a      	mov	r2, r3
 800b872:	460b      	mov	r3, r1
 800b874:	71fb      	strb	r3, [r7, #7]
 800b876:	4613      	mov	r3, r2
 800b878:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b882:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b886:	2b00      	cmp	r3, #0
 800b888:	d123      	bne.n	800b8d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b88a:	88bb      	ldrh	r3, [r7, #4]
 800b88c:	3303      	adds	r3, #3
 800b88e:	089b      	lsrs	r3, r3, #2
 800b890:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b892:	2300      	movs	r3, #0
 800b894:	61bb      	str	r3, [r7, #24]
 800b896:	e018      	b.n	800b8ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b898:	79fb      	ldrb	r3, [r7, #7]
 800b89a:	031a      	lsls	r2, r3, #12
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	4413      	add	r3, r2
 800b8a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	61bb      	str	r3, [r7, #24]
 800b8ca:	69ba      	ldr	r2, [r7, #24]
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d3e2      	bcc.n	800b898 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3724      	adds	r7, #36	; 0x24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b08b      	sub	sp, #44	; 0x2c
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b8f6:	88fb      	ldrh	r3, [r7, #6]
 800b8f8:	089b      	lsrs	r3, r3, #2
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b8fe:	88fb      	ldrh	r3, [r7, #6]
 800b900:	f003 0303 	and.w	r3, r3, #3
 800b904:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b906:	2300      	movs	r3, #0
 800b908:	623b      	str	r3, [r7, #32]
 800b90a:	e014      	b.n	800b936 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	601a      	str	r2, [r3, #0]
    pDest++;
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91a:	3301      	adds	r3, #1
 800b91c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	3301      	adds	r3, #1
 800b922:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	3301      	adds	r3, #1
 800b928:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	3301      	adds	r3, #1
 800b92e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b930:	6a3b      	ldr	r3, [r7, #32]
 800b932:	3301      	adds	r3, #1
 800b934:	623b      	str	r3, [r7, #32]
 800b936:	6a3a      	ldr	r2, [r7, #32]
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d3e6      	bcc.n	800b90c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b93e:	8bfb      	ldrh	r3, [r7, #30]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d01e      	beq.n	800b982 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b944:	2300      	movs	r3, #0
 800b946:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b94e:	461a      	mov	r2, r3
 800b950:	f107 0310 	add.w	r3, r7, #16
 800b954:	6812      	ldr	r2, [r2, #0]
 800b956:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	00db      	lsls	r3, r3, #3
 800b960:	fa22 f303 	lsr.w	r3, r2, r3
 800b964:	b2da      	uxtb	r2, r3
 800b966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b968:	701a      	strb	r2, [r3, #0]
      i++;
 800b96a:	6a3b      	ldr	r3, [r7, #32]
 800b96c:	3301      	adds	r3, #1
 800b96e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	3301      	adds	r3, #1
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b976:	8bfb      	ldrh	r3, [r7, #30]
 800b978:	3b01      	subs	r3, #1
 800b97a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b97c:	8bfb      	ldrh	r3, [r7, #30]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1ea      	bne.n	800b958 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b984:	4618      	mov	r0, r3
 800b986:	372c      	adds	r7, #44	; 0x2c
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	785b      	ldrb	r3, [r3, #1]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d12c      	bne.n	800ba06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	015a      	lsls	r2, r3, #5
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	db12      	blt.n	800b9e4 <USB_EPSetStall+0x54>
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00f      	beq.n	800b9e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	0151      	lsls	r1, r2, #5
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	440a      	add	r2, r1
 800b9da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b9e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	015a      	lsls	r2, r3, #5
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	0151      	lsls	r1, r2, #5
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	440a      	add	r2, r1
 800b9fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba02:	6013      	str	r3, [r2, #0]
 800ba04:	e02b      	b.n	800ba5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	015a      	lsls	r2, r3, #5
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	db12      	blt.n	800ba3e <USB_EPSetStall+0xae>
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00f      	beq.n	800ba3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	015a      	lsls	r2, r3, #5
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	4413      	add	r3, r2
 800ba26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	0151      	lsls	r1, r2, #5
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	440a      	add	r2, r1
 800ba34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	015a      	lsls	r2, r3, #5
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	4413      	add	r3, r2
 800ba46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68ba      	ldr	r2, [r7, #8]
 800ba4e:	0151      	lsls	r1, r2, #5
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	440a      	add	r2, r1
 800ba54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	785b      	ldrb	r3, [r3, #1]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d128      	bne.n	800bada <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	0151      	lsls	r1, r2, #5
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	440a      	add	r2, r1
 800ba9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800baa6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	791b      	ldrb	r3, [r3, #4]
 800baac:	2b03      	cmp	r3, #3
 800baae:	d003      	beq.n	800bab8 <USB_EPClearStall+0x4c>
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	791b      	ldrb	r3, [r3, #4]
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d138      	bne.n	800bb2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	015a      	lsls	r2, r3, #5
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	4413      	add	r3, r2
 800bac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	0151      	lsls	r1, r2, #5
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	440a      	add	r2, r1
 800bace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bad6:	6013      	str	r3, [r2, #0]
 800bad8:	e027      	b.n	800bb2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	015a      	lsls	r2, r3, #5
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	4413      	add	r3, r2
 800bae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	0151      	lsls	r1, r2, #5
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	440a      	add	r2, r1
 800baf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800baf8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	791b      	ldrb	r3, [r3, #4]
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d003      	beq.n	800bb0a <USB_EPClearStall+0x9e>
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	791b      	ldrb	r3, [r3, #4]
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d10f      	bne.n	800bb2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	015a      	lsls	r2, r3, #5
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	4413      	add	r3, r2
 800bb12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	0151      	lsls	r1, r2, #5
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	440a      	add	r2, r1
 800bb20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3714      	adds	r7, #20
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	460b      	mov	r3, r1
 800bb42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bb5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	78fb      	ldrb	r3, [r7, #3]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bb6c:	68f9      	ldr	r1, [r7, #12]
 800bb6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb72:	4313      	orrs	r3, r2
 800bb74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3714      	adds	r7, #20
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb9e:	f023 0303 	bic.w	r3, r3, #3
 800bba2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbb2:	f023 0302 	bic.w	r3, r3, #2
 800bbb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3714      	adds	r7, #20
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b085      	sub	sp, #20
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bbe0:	f023 0303 	bic.w	r3, r3, #3
 800bbe4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbf4:	f043 0302 	orr.w	r3, r3, #2
 800bbf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3714      	adds	r7, #20
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	695b      	ldr	r3, [r3, #20]
 800bc14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	699b      	ldr	r3, [r3, #24]
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bc20:	68fb      	ldr	r3, [r7, #12]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b085      	sub	sp, #20
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc4a:	69db      	ldr	r3, [r3, #28]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	4013      	ands	r3, r2
 800bc50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	0c1b      	lsrs	r3, r3, #16
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b085      	sub	sp, #20
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc7e:	69db      	ldr	r3, [r3, #28]
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	4013      	ands	r3, r2
 800bc84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	b29b      	uxth	r3, r3
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3714      	adds	r7, #20
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b085      	sub	sp, #20
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	460b      	mov	r3, r1
 800bca0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bca6:	78fb      	ldrb	r3, [r7, #3]
 800bca8:	015a      	lsls	r2, r3, #5
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	4413      	add	r3, r2
 800bcae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcbc:	695b      	ldr	r3, [r3, #20]
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bcc4:	68bb      	ldr	r3, [r7, #8]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bcd2:	b480      	push	{r7}
 800bcd4:	b087      	sub	sp, #28
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bcf6:	78fb      	ldrb	r3, [r7, #3]
 800bcf8:	f003 030f 	and.w	r3, r3, #15
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	fa22 f303 	lsr.w	r3, r2, r3
 800bd02:	01db      	lsls	r3, r3, #7
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	693a      	ldr	r2, [r7, #16]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bd0c:	78fb      	ldrb	r3, [r7, #3]
 800bd0e:	015a      	lsls	r2, r3, #5
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	4413      	add	r3, r2
 800bd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	693a      	ldr	r2, [r7, #16]
 800bd1c:	4013      	ands	r3, r2
 800bd1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd20:	68bb      	ldr	r3, [r7, #8]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b083      	sub	sp, #12
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	f003 0301 	and.w	r3, r3, #1
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	370c      	adds	r7, #12
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	b085      	sub	sp, #20
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bd68:	f023 0307 	bic.w	r3, r3, #7
 800bd6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3714      	adds	r7, #20
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b087      	sub	sp, #28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	333c      	adds	r3, #60	; 0x3c
 800bda6:	3304      	adds	r3, #4
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	4a26      	ldr	r2, [pc, #152]	; (800be48 <USB_EP0_OutStart+0xb8>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d90a      	bls.n	800bdca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdc4:	d101      	bne.n	800bdca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e037      	b.n	800be3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bde4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bde8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdf8:	f043 0318 	orr.w	r3, r3, #24
 800bdfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	697a      	ldr	r2, [r7, #20]
 800be08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800be10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800be12:	7afb      	ldrb	r3, [r7, #11]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d10f      	bne.n	800be38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be1e:	461a      	mov	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800be36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	371c      	adds	r7, #28
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	4f54300a 	.word	0x4f54300a

0800be4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be54:	2300      	movs	r3, #0
 800be56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	3301      	adds	r3, #1
 800be5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	4a13      	ldr	r2, [pc, #76]	; (800beb0 <USB_CoreReset+0x64>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d901      	bls.n	800be6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be66:	2303      	movs	r3, #3
 800be68:	e01b      	b.n	800bea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	daf2      	bge.n	800be58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be72:	2300      	movs	r3, #0
 800be74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	f043 0201 	orr.w	r2, r3, #1
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3301      	adds	r3, #1
 800be86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	4a09      	ldr	r2, [pc, #36]	; (800beb0 <USB_CoreReset+0x64>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d901      	bls.n	800be94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be90:	2303      	movs	r3, #3
 800be92:	e006      	b.n	800bea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	f003 0301 	and.w	r3, r3, #1
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d0f0      	beq.n	800be82 <USB_CoreReset+0x36>

  return HAL_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	00030d40 	.word	0x00030d40

0800beb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	460b      	mov	r3, r1
 800bebe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bec0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bec4:	f002 fca0 	bl	800e808 <USBD_static_malloc>
 800bec8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d109      	bne.n	800bee4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	32b0      	adds	r2, #176	; 0xb0
 800beda:	2100      	movs	r1, #0
 800bedc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bee0:	2302      	movs	r3, #2
 800bee2:	e0d4      	b.n	800c08e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bee4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bee8:	2100      	movs	r1, #0
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f002 fd22 	bl	800e934 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	32b0      	adds	r2, #176	; 0xb0
 800befa:	68f9      	ldr	r1, [r7, #12]
 800befc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	32b0      	adds	r2, #176	; 0xb0
 800bf0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	7c1b      	ldrb	r3, [r3, #16]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d138      	bne.n	800bf8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bf1c:	4b5e      	ldr	r3, [pc, #376]	; (800c098 <USBD_CDC_Init+0x1e4>)
 800bf1e:	7819      	ldrb	r1, [r3, #0]
 800bf20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf24:	2202      	movs	r2, #2
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f002 fb4b 	bl	800e5c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf2c:	4b5a      	ldr	r3, [pc, #360]	; (800c098 <USBD_CDC_Init+0x1e4>)
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	f003 020f 	and.w	r2, r3, #15
 800bf34:	6879      	ldr	r1, [r7, #4]
 800bf36:	4613      	mov	r3, r2
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	4413      	add	r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	440b      	add	r3, r1
 800bf40:	3324      	adds	r3, #36	; 0x24
 800bf42:	2201      	movs	r2, #1
 800bf44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf46:	4b55      	ldr	r3, [pc, #340]	; (800c09c <USBD_CDC_Init+0x1e8>)
 800bf48:	7819      	ldrb	r1, [r3, #0]
 800bf4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf4e:	2202      	movs	r2, #2
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f002 fb36 	bl	800e5c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf56:	4b51      	ldr	r3, [pc, #324]	; (800c09c <USBD_CDC_Init+0x1e8>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	f003 020f 	and.w	r2, r3, #15
 800bf5e:	6879      	ldr	r1, [r7, #4]
 800bf60:	4613      	mov	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	440b      	add	r3, r1
 800bf6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf6e:	2201      	movs	r2, #1
 800bf70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bf72:	4b4b      	ldr	r3, [pc, #300]	; (800c0a0 <USBD_CDC_Init+0x1ec>)
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	f003 020f 	and.w	r2, r3, #15
 800bf7a:	6879      	ldr	r1, [r7, #4]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4413      	add	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	440b      	add	r3, r1
 800bf86:	3326      	adds	r3, #38	; 0x26
 800bf88:	2210      	movs	r2, #16
 800bf8a:	801a      	strh	r2, [r3, #0]
 800bf8c:	e035      	b.n	800bffa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bf8e:	4b42      	ldr	r3, [pc, #264]	; (800c098 <USBD_CDC_Init+0x1e4>)
 800bf90:	7819      	ldrb	r1, [r3, #0]
 800bf92:	2340      	movs	r3, #64	; 0x40
 800bf94:	2202      	movs	r2, #2
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f002 fb13 	bl	800e5c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bf9c:	4b3e      	ldr	r3, [pc, #248]	; (800c098 <USBD_CDC_Init+0x1e4>)
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	f003 020f 	and.w	r2, r3, #15
 800bfa4:	6879      	ldr	r1, [r7, #4]
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4413      	add	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	440b      	add	r3, r1
 800bfb0:	3324      	adds	r3, #36	; 0x24
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bfb6:	4b39      	ldr	r3, [pc, #228]	; (800c09c <USBD_CDC_Init+0x1e8>)
 800bfb8:	7819      	ldrb	r1, [r3, #0]
 800bfba:	2340      	movs	r3, #64	; 0x40
 800bfbc:	2202      	movs	r2, #2
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f002 faff 	bl	800e5c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bfc4:	4b35      	ldr	r3, [pc, #212]	; (800c09c <USBD_CDC_Init+0x1e8>)
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	f003 020f 	and.w	r2, r3, #15
 800bfcc:	6879      	ldr	r1, [r7, #4]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	4413      	add	r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	440b      	add	r3, r1
 800bfd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bfdc:	2201      	movs	r2, #1
 800bfde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bfe0:	4b2f      	ldr	r3, [pc, #188]	; (800c0a0 <USBD_CDC_Init+0x1ec>)
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	f003 020f 	and.w	r2, r3, #15
 800bfe8:	6879      	ldr	r1, [r7, #4]
 800bfea:	4613      	mov	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4413      	add	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	440b      	add	r3, r1
 800bff4:	3326      	adds	r3, #38	; 0x26
 800bff6:	2210      	movs	r2, #16
 800bff8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bffa:	4b29      	ldr	r3, [pc, #164]	; (800c0a0 <USBD_CDC_Init+0x1ec>)
 800bffc:	7819      	ldrb	r1, [r3, #0]
 800bffe:	2308      	movs	r3, #8
 800c000:	2203      	movs	r2, #3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f002 fadd 	bl	800e5c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c008:	4b25      	ldr	r3, [pc, #148]	; (800c0a0 <USBD_CDC_Init+0x1ec>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	f003 020f 	and.w	r2, r3, #15
 800c010:	6879      	ldr	r1, [r7, #4]
 800c012:	4613      	mov	r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	4413      	add	r3, r2
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	440b      	add	r3, r1
 800c01c:	3324      	adds	r3, #36	; 0x24
 800c01e:	2201      	movs	r2, #1
 800c020:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2200      	movs	r2, #0
 800c026:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	33b0      	adds	r3, #176	; 0xb0
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4413      	add	r3, r2
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2200      	movs	r2, #0
 800c04a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c054:	2b00      	cmp	r3, #0
 800c056:	d101      	bne.n	800c05c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c058:	2302      	movs	r3, #2
 800c05a:	e018      	b.n	800c08e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	7c1b      	ldrb	r3, [r3, #16]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10a      	bne.n	800c07a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c064:	4b0d      	ldr	r3, [pc, #52]	; (800c09c <USBD_CDC_Init+0x1e8>)
 800c066:	7819      	ldrb	r1, [r3, #0]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c06e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f002 fb94 	bl	800e7a0 <USBD_LL_PrepareReceive>
 800c078:	e008      	b.n	800c08c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c07a:	4b08      	ldr	r3, [pc, #32]	; (800c09c <USBD_CDC_Init+0x1e8>)
 800c07c:	7819      	ldrb	r1, [r3, #0]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c084:	2340      	movs	r3, #64	; 0x40
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f002 fb8a 	bl	800e7a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	200000a7 	.word	0x200000a7
 800c09c:	200000a8 	.word	0x200000a8
 800c0a0:	200000a9 	.word	0x200000a9

0800c0a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c0b0:	4b3a      	ldr	r3, [pc, #232]	; (800c19c <USBD_CDC_DeInit+0xf8>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f002 faa9 	bl	800e60e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c0bc:	4b37      	ldr	r3, [pc, #220]	; (800c19c <USBD_CDC_DeInit+0xf8>)
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	f003 020f 	and.w	r2, r3, #15
 800c0c4:	6879      	ldr	r1, [r7, #4]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	440b      	add	r3, r1
 800c0d0:	3324      	adds	r3, #36	; 0x24
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c0d6:	4b32      	ldr	r3, [pc, #200]	; (800c1a0 <USBD_CDC_DeInit+0xfc>)
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	4619      	mov	r1, r3
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f002 fa96 	bl	800e60e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c0e2:	4b2f      	ldr	r3, [pc, #188]	; (800c1a0 <USBD_CDC_DeInit+0xfc>)
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	f003 020f 	and.w	r2, r3, #15
 800c0ea:	6879      	ldr	r1, [r7, #4]
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	440b      	add	r3, r1
 800c0f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c0fe:	4b29      	ldr	r3, [pc, #164]	; (800c1a4 <USBD_CDC_DeInit+0x100>)
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	4619      	mov	r1, r3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f002 fa82 	bl	800e60e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c10a:	4b26      	ldr	r3, [pc, #152]	; (800c1a4 <USBD_CDC_DeInit+0x100>)
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	f003 020f 	and.w	r2, r3, #15
 800c112:	6879      	ldr	r1, [r7, #4]
 800c114:	4613      	mov	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	440b      	add	r3, r1
 800c11e:	3324      	adds	r3, #36	; 0x24
 800c120:	2200      	movs	r2, #0
 800c122:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c124:	4b1f      	ldr	r3, [pc, #124]	; (800c1a4 <USBD_CDC_DeInit+0x100>)
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	f003 020f 	and.w	r2, r3, #15
 800c12c:	6879      	ldr	r1, [r7, #4]
 800c12e:	4613      	mov	r3, r2
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	4413      	add	r3, r2
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	440b      	add	r3, r1
 800c138:	3326      	adds	r3, #38	; 0x26
 800c13a:	2200      	movs	r2, #0
 800c13c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	32b0      	adds	r2, #176	; 0xb0
 800c148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d01f      	beq.n	800c190 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	33b0      	adds	r3, #176	; 0xb0
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	32b0      	adds	r2, #176	; 0xb0
 800c16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c172:	4618      	mov	r0, r3
 800c174:	f002 fb56 	bl	800e824 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	32b0      	adds	r2, #176	; 0xb0
 800c182:	2100      	movs	r1, #0
 800c184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	200000a7 	.word	0x200000a7
 800c1a0:	200000a8 	.word	0x200000a8
 800c1a4:	200000a9 	.word	0x200000a9

0800c1a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	32b0      	adds	r2, #176	; 0xb0
 800c1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d101      	bne.n	800c1d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e0bf      	b.n	800c358 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d050      	beq.n	800c286 <USBD_CDC_Setup+0xde>
 800c1e4:	2b20      	cmp	r3, #32
 800c1e6:	f040 80af 	bne.w	800c348 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	88db      	ldrh	r3, [r3, #6]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d03a      	beq.n	800c268 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	b25b      	sxtb	r3, r3
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	da1b      	bge.n	800c234 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	33b0      	adds	r3, #176	; 0xb0
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4413      	add	r3, r2
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	683a      	ldr	r2, [r7, #0]
 800c210:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c212:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c214:	683a      	ldr	r2, [r7, #0]
 800c216:	88d2      	ldrh	r2, [r2, #6]
 800c218:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	88db      	ldrh	r3, [r3, #6]
 800c21e:	2b07      	cmp	r3, #7
 800c220:	bf28      	it	cs
 800c222:	2307      	movcs	r3, #7
 800c224:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	89fa      	ldrh	r2, [r7, #14]
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f001 fd89 	bl	800dd44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c232:	e090      	b.n	800c356 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	785a      	ldrb	r2, [r3, #1]
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	88db      	ldrh	r3, [r3, #6]
 800c242:	2b3f      	cmp	r3, #63	; 0x3f
 800c244:	d803      	bhi.n	800c24e <USBD_CDC_Setup+0xa6>
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	88db      	ldrh	r3, [r3, #6]
 800c24a:	b2da      	uxtb	r2, r3
 800c24c:	e000      	b.n	800c250 <USBD_CDC_Setup+0xa8>
 800c24e:	2240      	movs	r2, #64	; 0x40
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c256:	6939      	ldr	r1, [r7, #16]
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c25e:	461a      	mov	r2, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f001 fd9b 	bl	800dd9c <USBD_CtlPrepareRx>
      break;
 800c266:	e076      	b.n	800c356 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	33b0      	adds	r3, #176	; 0xb0
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	7850      	ldrb	r0, [r2, #1]
 800c27e:	2200      	movs	r2, #0
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	4798      	blx	r3
      break;
 800c284:	e067      	b.n	800c356 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	785b      	ldrb	r3, [r3, #1]
 800c28a:	2b0b      	cmp	r3, #11
 800c28c:	d851      	bhi.n	800c332 <USBD_CDC_Setup+0x18a>
 800c28e:	a201      	add	r2, pc, #4	; (adr r2, 800c294 <USBD_CDC_Setup+0xec>)
 800c290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c294:	0800c2c5 	.word	0x0800c2c5
 800c298:	0800c341 	.word	0x0800c341
 800c29c:	0800c333 	.word	0x0800c333
 800c2a0:	0800c333 	.word	0x0800c333
 800c2a4:	0800c333 	.word	0x0800c333
 800c2a8:	0800c333 	.word	0x0800c333
 800c2ac:	0800c333 	.word	0x0800c333
 800c2b0:	0800c333 	.word	0x0800c333
 800c2b4:	0800c333 	.word	0x0800c333
 800c2b8:	0800c333 	.word	0x0800c333
 800c2bc:	0800c2ef 	.word	0x0800c2ef
 800c2c0:	0800c319 	.word	0x0800c319
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	2b03      	cmp	r3, #3
 800c2ce:	d107      	bne.n	800c2e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c2d0:	f107 030a 	add.w	r3, r7, #10
 800c2d4:	2202      	movs	r2, #2
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f001 fd33 	bl	800dd44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2de:	e032      	b.n	800c346 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f001 fcbd 	bl	800dc62 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	75fb      	strb	r3, [r7, #23]
          break;
 800c2ec:	e02b      	b.n	800c346 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	2b03      	cmp	r3, #3
 800c2f8:	d107      	bne.n	800c30a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c2fa:	f107 030d 	add.w	r3, r7, #13
 800c2fe:	2201      	movs	r2, #1
 800c300:	4619      	mov	r1, r3
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f001 fd1e 	bl	800dd44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c308:	e01d      	b.n	800c346 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f001 fca8 	bl	800dc62 <USBD_CtlError>
            ret = USBD_FAIL;
 800c312:	2303      	movs	r3, #3
 800c314:	75fb      	strb	r3, [r7, #23]
          break;
 800c316:	e016      	b.n	800c346 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	2b03      	cmp	r3, #3
 800c322:	d00f      	beq.n	800c344 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f001 fc9b 	bl	800dc62 <USBD_CtlError>
            ret = USBD_FAIL;
 800c32c:	2303      	movs	r3, #3
 800c32e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c330:	e008      	b.n	800c344 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c332:	6839      	ldr	r1, [r7, #0]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f001 fc94 	bl	800dc62 <USBD_CtlError>
          ret = USBD_FAIL;
 800c33a:	2303      	movs	r3, #3
 800c33c:	75fb      	strb	r3, [r7, #23]
          break;
 800c33e:	e002      	b.n	800c346 <USBD_CDC_Setup+0x19e>
          break;
 800c340:	bf00      	nop
 800c342:	e008      	b.n	800c356 <USBD_CDC_Setup+0x1ae>
          break;
 800c344:	bf00      	nop
      }
      break;
 800c346:	e006      	b.n	800c356 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f001 fc89 	bl	800dc62 <USBD_CtlError>
      ret = USBD_FAIL;
 800c350:	2303      	movs	r3, #3
 800c352:	75fb      	strb	r3, [r7, #23]
      break;
 800c354:	bf00      	nop
  }

  return (uint8_t)ret;
 800c356:	7dfb      	ldrb	r3, [r7, #23]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3718      	adds	r7, #24
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	460b      	mov	r3, r1
 800c36a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	32b0      	adds	r2, #176	; 0xb0
 800c37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c386:	2303      	movs	r3, #3
 800c388:	e065      	b.n	800c456 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	32b0      	adds	r2, #176	; 0xb0
 800c394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c398:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c39a:	78fb      	ldrb	r3, [r7, #3]
 800c39c:	f003 020f 	and.w	r2, r3, #15
 800c3a0:	6879      	ldr	r1, [r7, #4]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	440b      	add	r3, r1
 800c3ac:	3318      	adds	r3, #24
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d02f      	beq.n	800c414 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c3b4:	78fb      	ldrb	r3, [r7, #3]
 800c3b6:	f003 020f 	and.w	r2, r3, #15
 800c3ba:	6879      	ldr	r1, [r7, #4]
 800c3bc:	4613      	mov	r3, r2
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	4413      	add	r3, r2
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	440b      	add	r3, r1
 800c3c6:	3318      	adds	r3, #24
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	78fb      	ldrb	r3, [r7, #3]
 800c3cc:	f003 010f 	and.w	r1, r3, #15
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	00db      	lsls	r3, r3, #3
 800c3d6:	440b      	add	r3, r1
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	4403      	add	r3, r0
 800c3dc:	3348      	adds	r3, #72	; 0x48
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800c3e4:	fb01 f303 	mul.w	r3, r1, r3
 800c3e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d112      	bne.n	800c414 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c3ee:	78fb      	ldrb	r3, [r7, #3]
 800c3f0:	f003 020f 	and.w	r2, r3, #15
 800c3f4:	6879      	ldr	r1, [r7, #4]
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	440b      	add	r3, r1
 800c400:	3318      	adds	r3, #24
 800c402:	2200      	movs	r2, #0
 800c404:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c406:	78f9      	ldrb	r1, [r7, #3]
 800c408:	2300      	movs	r3, #0
 800c40a:	2200      	movs	r2, #0
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f002 f9a6 	bl	800e75e <USBD_LL_Transmit>
 800c412:	e01f      	b.n	800c454 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2200      	movs	r2, #0
 800c418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	33b0      	adds	r3, #176	; 0xb0
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	4413      	add	r3, r2
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d010      	beq.n	800c454 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	33b0      	adds	r3, #176	; 0xb0
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4413      	add	r3, r2
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	691b      	ldr	r3, [r3, #16]
 800c444:	68ba      	ldr	r2, [r7, #8]
 800c446:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c450:	78fa      	ldrb	r2, [r7, #3]
 800c452:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b084      	sub	sp, #16
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	460b      	mov	r3, r1
 800c468:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	32b0      	adds	r2, #176	; 0xb0
 800c474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c478:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	32b0      	adds	r2, #176	; 0xb0
 800c484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c48c:	2303      	movs	r3, #3
 800c48e:	e01a      	b.n	800c4c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	4619      	mov	r1, r3
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f002 f9a4 	bl	800e7e2 <USBD_LL_GetRxDataSize>
 800c49a:	4602      	mov	r2, r0
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	33b0      	adds	r3, #176	; 0xb0
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4413      	add	r3, r2
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b084      	sub	sp, #16
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	32b0      	adds	r2, #176	; 0xb0
 800c4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d101      	bne.n	800c4f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e025      	b.n	800c53c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	33b0      	adds	r3, #176	; 0xb0
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d01a      	beq.n	800c53a <USBD_CDC_EP0_RxReady+0x6c>
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c50a:	2bff      	cmp	r3, #255	; 0xff
 800c50c:	d015      	beq.n	800c53a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	33b0      	adds	r3, #176	; 0xb0
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	4413      	add	r3, r2
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c526:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c52e:	b292      	uxth	r2, r2
 800c530:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	22ff      	movs	r2, #255	; 0xff
 800c536:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c53a:	2300      	movs	r3, #0
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b086      	sub	sp, #24
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c54c:	2182      	movs	r1, #130	; 0x82
 800c54e:	4818      	ldr	r0, [pc, #96]	; (800c5b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c550:	f000 fd4f 	bl	800cff2 <USBD_GetEpDesc>
 800c554:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c556:	2101      	movs	r1, #1
 800c558:	4815      	ldr	r0, [pc, #84]	; (800c5b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c55a:	f000 fd4a 	bl	800cff2 <USBD_GetEpDesc>
 800c55e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c560:	2181      	movs	r1, #129	; 0x81
 800c562:	4813      	ldr	r0, [pc, #76]	; (800c5b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c564:	f000 fd45 	bl	800cff2 <USBD_GetEpDesc>
 800c568:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d002      	beq.n	800c576 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	2210      	movs	r2, #16
 800c574:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d006      	beq.n	800c58a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	2200      	movs	r2, #0
 800c580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c584:	711a      	strb	r2, [r3, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d006      	beq.n	800c59e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c598:	711a      	strb	r2, [r3, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2243      	movs	r2, #67	; 0x43
 800c5a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c5a4:	4b02      	ldr	r3, [pc, #8]	; (800c5b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	20000064 	.word	0x20000064

0800c5b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b086      	sub	sp, #24
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c5bc:	2182      	movs	r1, #130	; 0x82
 800c5be:	4818      	ldr	r0, [pc, #96]	; (800c620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c5c0:	f000 fd17 	bl	800cff2 <USBD_GetEpDesc>
 800c5c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c5c6:	2101      	movs	r1, #1
 800c5c8:	4815      	ldr	r0, [pc, #84]	; (800c620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c5ca:	f000 fd12 	bl	800cff2 <USBD_GetEpDesc>
 800c5ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c5d0:	2181      	movs	r1, #129	; 0x81
 800c5d2:	4813      	ldr	r0, [pc, #76]	; (800c620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c5d4:	f000 fd0d 	bl	800cff2 <USBD_GetEpDesc>
 800c5d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	2210      	movs	r2, #16
 800c5e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d006      	beq.n	800c5fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	711a      	strb	r2, [r3, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f042 0202 	orr.w	r2, r2, #2
 800c5f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d006      	beq.n	800c60e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2200      	movs	r2, #0
 800c604:	711a      	strb	r2, [r3, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	f042 0202 	orr.w	r2, r2, #2
 800c60c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2243      	movs	r2, #67	; 0x43
 800c612:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c614:	4b02      	ldr	r3, [pc, #8]	; (800c620 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c616:	4618      	mov	r0, r3
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	20000064 	.word	0x20000064

0800c624 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c62c:	2182      	movs	r1, #130	; 0x82
 800c62e:	4818      	ldr	r0, [pc, #96]	; (800c690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c630:	f000 fcdf 	bl	800cff2 <USBD_GetEpDesc>
 800c634:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c636:	2101      	movs	r1, #1
 800c638:	4815      	ldr	r0, [pc, #84]	; (800c690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c63a:	f000 fcda 	bl	800cff2 <USBD_GetEpDesc>
 800c63e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c640:	2181      	movs	r1, #129	; 0x81
 800c642:	4813      	ldr	r0, [pc, #76]	; (800c690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c644:	f000 fcd5 	bl	800cff2 <USBD_GetEpDesc>
 800c648:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	2210      	movs	r2, #16
 800c654:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d006      	beq.n	800c66a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	2200      	movs	r2, #0
 800c660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c664:	711a      	strb	r2, [r3, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d006      	beq.n	800c67e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2200      	movs	r2, #0
 800c674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c678:	711a      	strb	r2, [r3, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2243      	movs	r2, #67	; 0x43
 800c682:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c684:	4b02      	ldr	r3, [pc, #8]	; (800c690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c686:	4618      	mov	r0, r3
 800c688:	3718      	adds	r7, #24
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	20000064 	.word	0x20000064

0800c694 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	220a      	movs	r2, #10
 800c6a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c6a2:	4b03      	ldr	r3, [pc, #12]	; (800c6b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr
 800c6b0:	20000020 	.word	0x20000020

0800c6b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d101      	bne.n	800c6c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e009      	b.n	800c6dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	33b0      	adds	r3, #176	; 0xb0
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4413      	add	r3, r2
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b087      	sub	sp, #28
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	32b0      	adds	r2, #176	; 0xb0
 800c6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c702:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d101      	bne.n	800c70e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e008      	b.n	800c720 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	371c      	adds	r7, #28
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b085      	sub	sp, #20
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	32b0      	adds	r2, #176	; 0xb0
 800c740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c744:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d101      	bne.n	800c750 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c74c:	2303      	movs	r3, #3
 800c74e:	e004      	b.n	800c75a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c758:	2300      	movs	r3, #0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3714      	adds	r7, #20
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
	...

0800c768 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	32b0      	adds	r2, #176	; 0xb0
 800c77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c77e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c780:	2301      	movs	r3, #1
 800c782:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	32b0      	adds	r2, #176	; 0xb0
 800c78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c796:	2303      	movs	r3, #3
 800c798:	e025      	b.n	800c7e6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d11f      	bne.n	800c7e4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c7ac:	4b10      	ldr	r3, [pc, #64]	; (800c7f0 <USBD_CDC_TransmitPacket+0x88>)
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	f003 020f 	and.w	r2, r3, #15
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	4413      	add	r3, r2
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4403      	add	r3, r0
 800c7c6:	3318      	adds	r3, #24
 800c7c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c7ca:	4b09      	ldr	r3, [pc, #36]	; (800c7f0 <USBD_CDC_TransmitPacket+0x88>)
 800c7cc:	7819      	ldrb	r1, [r3, #0]
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f001 ffbf 	bl	800e75e <USBD_LL_Transmit>

    ret = USBD_OK;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	200000a7 	.word	0x200000a7

0800c7f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	32b0      	adds	r2, #176	; 0xb0
 800c806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c80a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	32b0      	adds	r2, #176	; 0xb0
 800c816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d101      	bne.n	800c822 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c81e:	2303      	movs	r3, #3
 800c820:	e018      	b.n	800c854 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	7c1b      	ldrb	r3, [r3, #16]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10a      	bne.n	800c840 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c82a:	4b0c      	ldr	r3, [pc, #48]	; (800c85c <USBD_CDC_ReceivePacket+0x68>)
 800c82c:	7819      	ldrb	r1, [r3, #0]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c834:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f001 ffb1 	bl	800e7a0 <USBD_LL_PrepareReceive>
 800c83e:	e008      	b.n	800c852 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c840:	4b06      	ldr	r3, [pc, #24]	; (800c85c <USBD_CDC_ReceivePacket+0x68>)
 800c842:	7819      	ldrb	r1, [r3, #0]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c84a:	2340      	movs	r3, #64	; 0x40
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f001 ffa7 	bl	800e7a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	200000a8 	.word	0x200000a8

0800c860 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b086      	sub	sp, #24
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	4613      	mov	r3, r2
 800c86c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c874:	2303      	movs	r3, #3
 800c876:	e01f      	b.n	800c8b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2200      	movs	r2, #0
 800c884:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2200      	movs	r2, #0
 800c88c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	68ba      	ldr	r2, [r7, #8]
 800c89a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	79fa      	ldrb	r2, [r7, #7]
 800c8aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f001 fe21 	bl	800e4f4 <USBD_LL_Init>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c8b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3718      	adds	r7, #24
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d101      	bne.n	800c8d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	e025      	b.n	800c924 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	32ae      	adds	r2, #174	; 0xae
 800c8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00f      	beq.n	800c914 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	32ae      	adds	r2, #174	; 0xae
 800c8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c904:	f107 020e 	add.w	r2, r7, #14
 800c908:	4610      	mov	r0, r2
 800c90a:	4798      	blx	r3
 800c90c:	4602      	mov	r2, r0
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c91a:	1c5a      	adds	r2, r3, #1
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	3710      	adds	r7, #16
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f001 fe29 	bl	800e58c <USBD_LL_Start>
 800c93a:	4603      	mov	r3, r0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c944:	b480      	push	{r7}
 800c946:	b083      	sub	sp, #12
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c94c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c94e:	4618      	mov	r0, r3
 800c950:	370c      	adds	r7, #12
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	460b      	mov	r3, r1
 800c964:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c966:	2300      	movs	r3, #0
 800c968:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c970:	2b00      	cmp	r3, #0
 800c972:	d009      	beq.n	800c988 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	78fa      	ldrb	r2, [r7, #3]
 800c97e:	4611      	mov	r1, r2
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	4798      	blx	r3
 800c984:	4603      	mov	r3, r0
 800c986:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c988:	7bfb      	ldrb	r3, [r7, #15]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b084      	sub	sp, #16
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
 800c99a:	460b      	mov	r3, r1
 800c99c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	78fa      	ldrb	r2, [r7, #3]
 800c9ac:	4611      	mov	r1, r2
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	4798      	blx	r3
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d001      	beq.n	800c9bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c9b8:	2303      	movs	r3, #3
 800c9ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b084      	sub	sp, #16
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
 800c9ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f001 f908 	bl	800dbee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c9fa:	f003 031f 	and.w	r3, r3, #31
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	d01a      	beq.n	800ca38 <USBD_LL_SetupStage+0x72>
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	d822      	bhi.n	800ca4c <USBD_LL_SetupStage+0x86>
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d002      	beq.n	800ca10 <USBD_LL_SetupStage+0x4a>
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d00a      	beq.n	800ca24 <USBD_LL_SetupStage+0x5e>
 800ca0e:	e01d      	b.n	800ca4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca16:	4619      	mov	r1, r3
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 fb5f 	bl	800d0dc <USBD_StdDevReq>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	73fb      	strb	r3, [r7, #15]
      break;
 800ca22:	e020      	b.n	800ca66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fbc7 	bl	800d1c0 <USBD_StdItfReq>
 800ca32:	4603      	mov	r3, r0
 800ca34:	73fb      	strb	r3, [r7, #15]
      break;
 800ca36:	e016      	b.n	800ca66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca3e:	4619      	mov	r1, r3
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 fc29 	bl	800d298 <USBD_StdEPReq>
 800ca46:	4603      	mov	r3, r0
 800ca48:	73fb      	strb	r3, [r7, #15]
      break;
 800ca4a:	e00c      	b.n	800ca66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	4619      	mov	r1, r3
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f001 fdf6 	bl	800e64c <USBD_LL_StallEP>
 800ca60:	4603      	mov	r3, r0
 800ca62:	73fb      	strb	r3, [r7, #15]
      break;
 800ca64:	bf00      	nop
  }

  return ret;
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	607a      	str	r2, [r7, #4]
 800ca7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ca82:	7afb      	ldrb	r3, [r7, #11]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d16e      	bne.n	800cb66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ca8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca96:	2b03      	cmp	r3, #3
 800ca98:	f040 8098 	bne.w	800cbcc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	689a      	ldr	r2, [r3, #8]
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d913      	bls.n	800cad0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	689a      	ldr	r2, [r3, #8]
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	1ad2      	subs	r2, r2, r3
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	68da      	ldr	r2, [r3, #12]
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	4293      	cmp	r3, r2
 800cac0:	bf28      	it	cs
 800cac2:	4613      	movcs	r3, r2
 800cac4:	461a      	mov	r2, r3
 800cac6:	6879      	ldr	r1, [r7, #4]
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f001 f984 	bl	800ddd6 <USBD_CtlContinueRx>
 800cace:	e07d      	b.n	800cbcc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cad6:	f003 031f 	and.w	r3, r3, #31
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d014      	beq.n	800cb08 <USBD_LL_DataOutStage+0x98>
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d81d      	bhi.n	800cb1e <USBD_LL_DataOutStage+0xae>
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d002      	beq.n	800caec <USBD_LL_DataOutStage+0x7c>
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d003      	beq.n	800caf2 <USBD_LL_DataOutStage+0x82>
 800caea:	e018      	b.n	800cb1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800caec:	2300      	movs	r3, #0
 800caee:	75bb      	strb	r3, [r7, #22]
            break;
 800caf0:	e018      	b.n	800cb24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	4619      	mov	r1, r3
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f000 fa5e 	bl	800cfbe <USBD_CoreFindIF>
 800cb02:	4603      	mov	r3, r0
 800cb04:	75bb      	strb	r3, [r7, #22]
            break;
 800cb06:	e00d      	b.n	800cb24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	4619      	mov	r1, r3
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	f000 fa60 	bl	800cfd8 <USBD_CoreFindEP>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	75bb      	strb	r3, [r7, #22]
            break;
 800cb1c:	e002      	b.n	800cb24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	75bb      	strb	r3, [r7, #22]
            break;
 800cb22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cb24:	7dbb      	ldrb	r3, [r7, #22]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d119      	bne.n	800cb5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b03      	cmp	r3, #3
 800cb34:	d113      	bne.n	800cb5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cb36:	7dba      	ldrb	r2, [r7, #22]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	32ae      	adds	r2, #174	; 0xae
 800cb3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00b      	beq.n	800cb5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cb46:	7dba      	ldrb	r2, [r7, #22]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cb4e:	7dba      	ldrb	r2, [r7, #22]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	32ae      	adds	r2, #174	; 0xae
 800cb54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb58:	691b      	ldr	r3, [r3, #16]
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f001 f94a 	bl	800ddf8 <USBD_CtlSendStatus>
 800cb64:	e032      	b.n	800cbcc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cb66:	7afb      	ldrb	r3, [r7, #11]
 800cb68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	4619      	mov	r1, r3
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f000 fa31 	bl	800cfd8 <USBD_CoreFindEP>
 800cb76:	4603      	mov	r3, r0
 800cb78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb7a:	7dbb      	ldrb	r3, [r7, #22]
 800cb7c:	2bff      	cmp	r3, #255	; 0xff
 800cb7e:	d025      	beq.n	800cbcc <USBD_LL_DataOutStage+0x15c>
 800cb80:	7dbb      	ldrb	r3, [r7, #22]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d122      	bne.n	800cbcc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d117      	bne.n	800cbc2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cb92:	7dba      	ldrb	r2, [r7, #22]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	32ae      	adds	r2, #174	; 0xae
 800cb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb9c:	699b      	ldr	r3, [r3, #24]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00f      	beq.n	800cbc2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cba2:	7dba      	ldrb	r2, [r7, #22]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cbaa:	7dba      	ldrb	r2, [r7, #22]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	32ae      	adds	r2, #174	; 0xae
 800cbb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbb4:	699b      	ldr	r3, [r3, #24]
 800cbb6:	7afa      	ldrb	r2, [r7, #11]
 800cbb8:	4611      	mov	r1, r2
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	4798      	blx	r3
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cbc2:	7dfb      	ldrb	r3, [r7, #23]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
 800cbca:	e000      	b.n	800cbce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3718      	adds	r7, #24
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b086      	sub	sp, #24
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	60f8      	str	r0, [r7, #12]
 800cbde:	460b      	mov	r3, r1
 800cbe0:	607a      	str	r2, [r7, #4]
 800cbe2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cbe4:	7afb      	ldrb	r3, [r7, #11]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d16f      	bne.n	800ccca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3314      	adds	r3, #20
 800cbee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	d15a      	bne.n	800ccb0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	689a      	ldr	r2, [r3, #8]
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d914      	bls.n	800cc30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	689a      	ldr	r2, [r3, #8]
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	1ad2      	subs	r2, r2, r3
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	6879      	ldr	r1, [r7, #4]
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f001 f8ac 	bl	800dd7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc22:	2300      	movs	r3, #0
 800cc24:	2200      	movs	r2, #0
 800cc26:	2100      	movs	r1, #0
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f001 fdb9 	bl	800e7a0 <USBD_LL_PrepareReceive>
 800cc2e:	e03f      	b.n	800ccb0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	68da      	ldr	r2, [r3, #12]
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d11c      	bne.n	800cc76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	685a      	ldr	r2, [r3, #4]
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d316      	bcc.n	800cc76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d20f      	bcs.n	800cc76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cc56:	2200      	movs	r2, #0
 800cc58:	2100      	movs	r1, #0
 800cc5a:	68f8      	ldr	r0, [r7, #12]
 800cc5c:	f001 f88d 	bl	800dd7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc68:	2300      	movs	r3, #0
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	f001 fd96 	bl	800e7a0 <USBD_LL_PrepareReceive>
 800cc74:	e01c      	b.n	800ccb0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	2b03      	cmp	r3, #3
 800cc80:	d10f      	bne.n	800cca2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d009      	beq.n	800cca2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cca2:	2180      	movs	r1, #128	; 0x80
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f001 fcd1 	bl	800e64c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f001 f8b7 	bl	800de1e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d03a      	beq.n	800cd30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f7ff fe42 	bl	800c944 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ccc8:	e032      	b.n	800cd30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ccca:	7afb      	ldrb	r3, [r7, #11]
 800cccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f000 f97f 	bl	800cfd8 <USBD_CoreFindEP>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccde:	7dfb      	ldrb	r3, [r7, #23]
 800cce0:	2bff      	cmp	r3, #255	; 0xff
 800cce2:	d025      	beq.n	800cd30 <USBD_LL_DataInStage+0x15a>
 800cce4:	7dfb      	ldrb	r3, [r7, #23]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d122      	bne.n	800cd30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2b03      	cmp	r3, #3
 800ccf4:	d11c      	bne.n	800cd30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ccf6:	7dfa      	ldrb	r2, [r7, #23]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	32ae      	adds	r2, #174	; 0xae
 800ccfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd00:	695b      	ldr	r3, [r3, #20]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d014      	beq.n	800cd30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cd06:	7dfa      	ldrb	r2, [r7, #23]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cd0e:	7dfa      	ldrb	r2, [r7, #23]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	32ae      	adds	r2, #174	; 0xae
 800cd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd18:	695b      	ldr	r3, [r3, #20]
 800cd1a:	7afa      	ldrb	r2, [r7, #11]
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	4798      	blx	r3
 800cd22:	4603      	mov	r3, r0
 800cd24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cd26:	7dbb      	ldrb	r3, [r7, #22]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cd2c:	7dbb      	ldrb	r3, [r7, #22]
 800cd2e:	e000      	b.n	800cd32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b084      	sub	sp, #16
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2201      	movs	r2, #1
 800cd4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d014      	beq.n	800cda0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d00e      	beq.n	800cda0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	6852      	ldr	r2, [r2, #4]
 800cd8e:	b2d2      	uxtb	r2, r2
 800cd90:	4611      	mov	r1, r2
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	4798      	blx	r3
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d001      	beq.n	800cda0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cd9c:	2303      	movs	r3, #3
 800cd9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cda0:	2340      	movs	r3, #64	; 0x40
 800cda2:	2200      	movs	r2, #0
 800cda4:	2100      	movs	r1, #0
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f001 fc0b 	bl	800e5c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2240      	movs	r2, #64	; 0x40
 800cdb8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cdbc:	2340      	movs	r3, #64	; 0x40
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	2180      	movs	r1, #128	; 0x80
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f001 fbfd 	bl	800e5c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2240      	movs	r2, #64	; 0x40
 800cdd2:	621a      	str	r2, [r3, #32]

  return ret;
 800cdd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b083      	sub	sp, #12
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	460b      	mov	r3, r1
 800cde8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	78fa      	ldrb	r2, [r7, #3]
 800cdee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cdfe:	b480      	push	{r7}
 800ce00:	b083      	sub	sp, #12
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2204      	movs	r2, #4
 800ce18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	370c      	adds	r7, #12
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr

0800ce2a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ce2a:	b480      	push	{r7}
 800ce2c:	b083      	sub	sp, #12
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	2b04      	cmp	r3, #4
 800ce3c:	d106      	bne.n	800ce4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	370c      	adds	r7, #12
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr

0800ce5a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b082      	sub	sp, #8
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	d110      	bne.n	800ce90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00b      	beq.n	800ce90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce7e:	69db      	ldr	r3, [r3, #28]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d005      	beq.n	800ce90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce8a:	69db      	ldr	r3, [r3, #28]
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b082      	sub	sp, #8
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	460b      	mov	r3, r1
 800cea4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	32ae      	adds	r2, #174	; 0xae
 800ceb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d101      	bne.n	800cebc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e01c      	b.n	800cef6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	2b03      	cmp	r3, #3
 800cec6:	d115      	bne.n	800cef4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	32ae      	adds	r2, #174	; 0xae
 800ced2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ced6:	6a1b      	ldr	r3, [r3, #32]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00b      	beq.n	800cef4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	32ae      	adds	r2, #174	; 0xae
 800cee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceea:	6a1b      	ldr	r3, [r3, #32]
 800ceec:	78fa      	ldrb	r2, [r7, #3]
 800ceee:	4611      	mov	r1, r2
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b082      	sub	sp, #8
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	460b      	mov	r3, r1
 800cf08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	32ae      	adds	r2, #174	; 0xae
 800cf14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d101      	bne.n	800cf20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	e01c      	b.n	800cf5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	2b03      	cmp	r3, #3
 800cf2a:	d115      	bne.n	800cf58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	32ae      	adds	r2, #174	; 0xae
 800cf36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00b      	beq.n	800cf58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	32ae      	adds	r2, #174	; 0xae
 800cf4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf50:	78fa      	ldrb	r2, [r7, #3]
 800cf52:	4611      	mov	r1, r2
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cf62:	b480      	push	{r7}
 800cf64:	b083      	sub	sp, #12
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf6a:	2300      	movs	r3, #0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cf80:	2300      	movs	r3, #0
 800cf82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2201      	movs	r2, #1
 800cf88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00e      	beq.n	800cfb4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	6852      	ldr	r2, [r2, #4]
 800cfa2:	b2d2      	uxtb	r2, r2
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	4798      	blx	r3
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d001      	beq.n	800cfb4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cfb0:	2303      	movs	r3, #3
 800cfb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cfbe:	b480      	push	{r7}
 800cfc0:	b083      	sub	sp, #12
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cfca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cfe4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b086      	sub	sp, #24
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	460b      	mov	r3, r1
 800cffc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d006:	2300      	movs	r3, #0
 800d008:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	885b      	ldrh	r3, [r3, #2]
 800d00e:	b29a      	uxth	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	b29b      	uxth	r3, r3
 800d016:	429a      	cmp	r2, r3
 800d018:	d920      	bls.n	800d05c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	b29b      	uxth	r3, r3
 800d020:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d022:	e013      	b.n	800d04c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d024:	f107 030a 	add.w	r3, r7, #10
 800d028:	4619      	mov	r1, r3
 800d02a:	6978      	ldr	r0, [r7, #20]
 800d02c:	f000 f81b 	bl	800d066 <USBD_GetNextDesc>
 800d030:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	785b      	ldrb	r3, [r3, #1]
 800d036:	2b05      	cmp	r3, #5
 800d038:	d108      	bne.n	800d04c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	789b      	ldrb	r3, [r3, #2]
 800d042:	78fa      	ldrb	r2, [r7, #3]
 800d044:	429a      	cmp	r2, r3
 800d046:	d008      	beq.n	800d05a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d048:	2300      	movs	r3, #0
 800d04a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	885b      	ldrh	r3, [r3, #2]
 800d050:	b29a      	uxth	r2, r3
 800d052:	897b      	ldrh	r3, [r7, #10]
 800d054:	429a      	cmp	r2, r3
 800d056:	d8e5      	bhi.n	800d024 <USBD_GetEpDesc+0x32>
 800d058:	e000      	b.n	800d05c <USBD_GetEpDesc+0x6a>
          break;
 800d05a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d05c:	693b      	ldr	r3, [r7, #16]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3718      	adds	r7, #24
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d066:	b480      	push	{r7}
 800d068:	b085      	sub	sp, #20
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	881a      	ldrh	r2, [r3, #0]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	4413      	add	r3, r2
 800d080:	b29a      	uxth	r2, r3
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	461a      	mov	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4413      	add	r3, r2
 800d090:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d092:	68fb      	ldr	r3, [r7, #12]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b087      	sub	sp, #28
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d0be:	8a3b      	ldrh	r3, [r7, #16]
 800d0c0:	021b      	lsls	r3, r3, #8
 800d0c2:	b21a      	sxth	r2, r3
 800d0c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	b21b      	sxth	r3, r3
 800d0cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d0ce:	89fb      	ldrh	r3, [r7, #14]
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	371c      	adds	r7, #28
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0f2:	2b40      	cmp	r3, #64	; 0x40
 800d0f4:	d005      	beq.n	800d102 <USBD_StdDevReq+0x26>
 800d0f6:	2b40      	cmp	r3, #64	; 0x40
 800d0f8:	d857      	bhi.n	800d1aa <USBD_StdDevReq+0xce>
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00f      	beq.n	800d11e <USBD_StdDevReq+0x42>
 800d0fe:	2b20      	cmp	r3, #32
 800d100:	d153      	bne.n	800d1aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	32ae      	adds	r2, #174	; 0xae
 800d10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	6839      	ldr	r1, [r7, #0]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	4798      	blx	r3
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]
      break;
 800d11c:	e04a      	b.n	800d1b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	785b      	ldrb	r3, [r3, #1]
 800d122:	2b09      	cmp	r3, #9
 800d124:	d83b      	bhi.n	800d19e <USBD_StdDevReq+0xc2>
 800d126:	a201      	add	r2, pc, #4	; (adr r2, 800d12c <USBD_StdDevReq+0x50>)
 800d128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d12c:	0800d181 	.word	0x0800d181
 800d130:	0800d195 	.word	0x0800d195
 800d134:	0800d19f 	.word	0x0800d19f
 800d138:	0800d18b 	.word	0x0800d18b
 800d13c:	0800d19f 	.word	0x0800d19f
 800d140:	0800d15f 	.word	0x0800d15f
 800d144:	0800d155 	.word	0x0800d155
 800d148:	0800d19f 	.word	0x0800d19f
 800d14c:	0800d177 	.word	0x0800d177
 800d150:	0800d169 	.word	0x0800d169
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d154:	6839      	ldr	r1, [r7, #0]
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fa3c 	bl	800d5d4 <USBD_GetDescriptor>
          break;
 800d15c:	e024      	b.n	800d1a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 fba1 	bl	800d8a8 <USBD_SetAddress>
          break;
 800d166:	e01f      	b.n	800d1a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d168:	6839      	ldr	r1, [r7, #0]
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 fbe0 	bl	800d930 <USBD_SetConfig>
 800d170:	4603      	mov	r3, r0
 800d172:	73fb      	strb	r3, [r7, #15]
          break;
 800d174:	e018      	b.n	800d1a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 fc83 	bl	800da84 <USBD_GetConfig>
          break;
 800d17e:	e013      	b.n	800d1a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fcb4 	bl	800daf0 <USBD_GetStatus>
          break;
 800d188:	e00e      	b.n	800d1a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d18a:	6839      	ldr	r1, [r7, #0]
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 fce3 	bl	800db58 <USBD_SetFeature>
          break;
 800d192:	e009      	b.n	800d1a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d194:	6839      	ldr	r1, [r7, #0]
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 fd07 	bl	800dbaa <USBD_ClrFeature>
          break;
 800d19c:	e004      	b.n	800d1a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d19e:	6839      	ldr	r1, [r7, #0]
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 fd5e 	bl	800dc62 <USBD_CtlError>
          break;
 800d1a6:	bf00      	nop
      }
      break;
 800d1a8:	e004      	b.n	800d1b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d1aa:	6839      	ldr	r1, [r7, #0]
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 fd58 	bl	800dc62 <USBD_CtlError>
      break;
 800d1b2:	bf00      	nop
  }

  return ret;
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop

0800d1c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1d6:	2b40      	cmp	r3, #64	; 0x40
 800d1d8:	d005      	beq.n	800d1e6 <USBD_StdItfReq+0x26>
 800d1da:	2b40      	cmp	r3, #64	; 0x40
 800d1dc:	d852      	bhi.n	800d284 <USBD_StdItfReq+0xc4>
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d001      	beq.n	800d1e6 <USBD_StdItfReq+0x26>
 800d1e2:	2b20      	cmp	r3, #32
 800d1e4:	d14e      	bne.n	800d284 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	2b02      	cmp	r3, #2
 800d1f2:	d840      	bhi.n	800d276 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	889b      	ldrh	r3, [r3, #4]
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d836      	bhi.n	800d26c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	889b      	ldrh	r3, [r3, #4]
 800d202:	b2db      	uxtb	r3, r3
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f7ff fed9 	bl	800cfbe <USBD_CoreFindIF>
 800d20c:	4603      	mov	r3, r0
 800d20e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d210:	7bbb      	ldrb	r3, [r7, #14]
 800d212:	2bff      	cmp	r3, #255	; 0xff
 800d214:	d01d      	beq.n	800d252 <USBD_StdItfReq+0x92>
 800d216:	7bbb      	ldrb	r3, [r7, #14]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d11a      	bne.n	800d252 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d21c:	7bba      	ldrb	r2, [r7, #14]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	32ae      	adds	r2, #174	; 0xae
 800d222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00f      	beq.n	800d24c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d22c:	7bba      	ldrb	r2, [r7, #14]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d234:	7bba      	ldrb	r2, [r7, #14]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	32ae      	adds	r2, #174	; 0xae
 800d23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d23e:	689b      	ldr	r3, [r3, #8]
 800d240:	6839      	ldr	r1, [r7, #0]
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	4798      	blx	r3
 800d246:	4603      	mov	r3, r0
 800d248:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d24a:	e004      	b.n	800d256 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d24c:	2303      	movs	r3, #3
 800d24e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d250:	e001      	b.n	800d256 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d252:	2303      	movs	r3, #3
 800d254:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	88db      	ldrh	r3, [r3, #6]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d110      	bne.n	800d280 <USBD_StdItfReq+0xc0>
 800d25e:	7bfb      	ldrb	r3, [r7, #15]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d10d      	bne.n	800d280 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 fdc7 	bl	800ddf8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d26a:	e009      	b.n	800d280 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d26c:	6839      	ldr	r1, [r7, #0]
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 fcf7 	bl	800dc62 <USBD_CtlError>
          break;
 800d274:	e004      	b.n	800d280 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d276:	6839      	ldr	r1, [r7, #0]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 fcf2 	bl	800dc62 <USBD_CtlError>
          break;
 800d27e:	e000      	b.n	800d282 <USBD_StdItfReq+0xc2>
          break;
 800d280:	bf00      	nop
      }
      break;
 800d282:	e004      	b.n	800d28e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d284:	6839      	ldr	r1, [r7, #0]
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 fceb 	bl	800dc62 <USBD_CtlError>
      break;
 800d28c:	bf00      	nop
  }

  return ret;
 800d28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d290:	4618      	mov	r0, r3
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	889b      	ldrh	r3, [r3, #4]
 800d2aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2b4:	2b40      	cmp	r3, #64	; 0x40
 800d2b6:	d007      	beq.n	800d2c8 <USBD_StdEPReq+0x30>
 800d2b8:	2b40      	cmp	r3, #64	; 0x40
 800d2ba:	f200 817f 	bhi.w	800d5bc <USBD_StdEPReq+0x324>
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d02a      	beq.n	800d318 <USBD_StdEPReq+0x80>
 800d2c2:	2b20      	cmp	r3, #32
 800d2c4:	f040 817a 	bne.w	800d5bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d2c8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7ff fe83 	bl	800cfd8 <USBD_CoreFindEP>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2d6:	7b7b      	ldrb	r3, [r7, #13]
 800d2d8:	2bff      	cmp	r3, #255	; 0xff
 800d2da:	f000 8174 	beq.w	800d5c6 <USBD_StdEPReq+0x32e>
 800d2de:	7b7b      	ldrb	r3, [r7, #13]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f040 8170 	bne.w	800d5c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d2e6:	7b7a      	ldrb	r2, [r7, #13]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d2ee:	7b7a      	ldrb	r2, [r7, #13]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	32ae      	adds	r2, #174	; 0xae
 800d2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f000 8163 	beq.w	800d5c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d300:	7b7a      	ldrb	r2, [r7, #13]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	32ae      	adds	r2, #174	; 0xae
 800d306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	4798      	blx	r3
 800d312:	4603      	mov	r3, r0
 800d314:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d316:	e156      	b.n	800d5c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	785b      	ldrb	r3, [r3, #1]
 800d31c:	2b03      	cmp	r3, #3
 800d31e:	d008      	beq.n	800d332 <USBD_StdEPReq+0x9a>
 800d320:	2b03      	cmp	r3, #3
 800d322:	f300 8145 	bgt.w	800d5b0 <USBD_StdEPReq+0x318>
 800d326:	2b00      	cmp	r3, #0
 800d328:	f000 809b 	beq.w	800d462 <USBD_StdEPReq+0x1ca>
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d03c      	beq.n	800d3aa <USBD_StdEPReq+0x112>
 800d330:	e13e      	b.n	800d5b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	2b02      	cmp	r3, #2
 800d33c:	d002      	beq.n	800d344 <USBD_StdEPReq+0xac>
 800d33e:	2b03      	cmp	r3, #3
 800d340:	d016      	beq.n	800d370 <USBD_StdEPReq+0xd8>
 800d342:	e02c      	b.n	800d39e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d344:	7bbb      	ldrb	r3, [r7, #14]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d00d      	beq.n	800d366 <USBD_StdEPReq+0xce>
 800d34a:	7bbb      	ldrb	r3, [r7, #14]
 800d34c:	2b80      	cmp	r3, #128	; 0x80
 800d34e:	d00a      	beq.n	800d366 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d350:	7bbb      	ldrb	r3, [r7, #14]
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f001 f979 	bl	800e64c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d35a:	2180      	movs	r1, #128	; 0x80
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f001 f975 	bl	800e64c <USBD_LL_StallEP>
 800d362:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d364:	e020      	b.n	800d3a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d366:	6839      	ldr	r1, [r7, #0]
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 fc7a 	bl	800dc62 <USBD_CtlError>
              break;
 800d36e:	e01b      	b.n	800d3a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	885b      	ldrh	r3, [r3, #2]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d10e      	bne.n	800d396 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d378:	7bbb      	ldrb	r3, [r7, #14]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00b      	beq.n	800d396 <USBD_StdEPReq+0xfe>
 800d37e:	7bbb      	ldrb	r3, [r7, #14]
 800d380:	2b80      	cmp	r3, #128	; 0x80
 800d382:	d008      	beq.n	800d396 <USBD_StdEPReq+0xfe>
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	88db      	ldrh	r3, [r3, #6]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d104      	bne.n	800d396 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d38c:	7bbb      	ldrb	r3, [r7, #14]
 800d38e:	4619      	mov	r1, r3
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f001 f95b 	bl	800e64c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 fd2e 	bl	800ddf8 <USBD_CtlSendStatus>

              break;
 800d39c:	e004      	b.n	800d3a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d39e:	6839      	ldr	r1, [r7, #0]
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fc5e 	bl	800dc62 <USBD_CtlError>
              break;
 800d3a6:	bf00      	nop
          }
          break;
 800d3a8:	e107      	b.n	800d5ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	2b02      	cmp	r3, #2
 800d3b4:	d002      	beq.n	800d3bc <USBD_StdEPReq+0x124>
 800d3b6:	2b03      	cmp	r3, #3
 800d3b8:	d016      	beq.n	800d3e8 <USBD_StdEPReq+0x150>
 800d3ba:	e04b      	b.n	800d454 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d3bc:	7bbb      	ldrb	r3, [r7, #14]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d00d      	beq.n	800d3de <USBD_StdEPReq+0x146>
 800d3c2:	7bbb      	ldrb	r3, [r7, #14]
 800d3c4:	2b80      	cmp	r3, #128	; 0x80
 800d3c6:	d00a      	beq.n	800d3de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3c8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f001 f93d 	bl	800e64c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3d2:	2180      	movs	r1, #128	; 0x80
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f001 f939 	bl	800e64c <USBD_LL_StallEP>
 800d3da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d3dc:	e040      	b.n	800d460 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d3de:	6839      	ldr	r1, [r7, #0]
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 fc3e 	bl	800dc62 <USBD_CtlError>
              break;
 800d3e6:	e03b      	b.n	800d460 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	885b      	ldrh	r3, [r3, #2]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d136      	bne.n	800d45e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d3f0:	7bbb      	ldrb	r3, [r7, #14]
 800d3f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d004      	beq.n	800d404 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d3fa:	7bbb      	ldrb	r3, [r7, #14]
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f001 f943 	bl	800e68a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 fcf7 	bl	800ddf8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d40a:	7bbb      	ldrb	r3, [r7, #14]
 800d40c:	4619      	mov	r1, r3
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f7ff fde2 	bl	800cfd8 <USBD_CoreFindEP>
 800d414:	4603      	mov	r3, r0
 800d416:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d418:	7b7b      	ldrb	r3, [r7, #13]
 800d41a:	2bff      	cmp	r3, #255	; 0xff
 800d41c:	d01f      	beq.n	800d45e <USBD_StdEPReq+0x1c6>
 800d41e:	7b7b      	ldrb	r3, [r7, #13]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d11c      	bne.n	800d45e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d424:	7b7a      	ldrb	r2, [r7, #13]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d42c:	7b7a      	ldrb	r2, [r7, #13]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	32ae      	adds	r2, #174	; 0xae
 800d432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d010      	beq.n	800d45e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d43c:	7b7a      	ldrb	r2, [r7, #13]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	32ae      	adds	r2, #174	; 0xae
 800d442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	4798      	blx	r3
 800d44e:	4603      	mov	r3, r0
 800d450:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d452:	e004      	b.n	800d45e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d454:	6839      	ldr	r1, [r7, #0]
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 fc03 	bl	800dc62 <USBD_CtlError>
              break;
 800d45c:	e000      	b.n	800d460 <USBD_StdEPReq+0x1c8>
              break;
 800d45e:	bf00      	nop
          }
          break;
 800d460:	e0ab      	b.n	800d5ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	2b02      	cmp	r3, #2
 800d46c:	d002      	beq.n	800d474 <USBD_StdEPReq+0x1dc>
 800d46e:	2b03      	cmp	r3, #3
 800d470:	d032      	beq.n	800d4d8 <USBD_StdEPReq+0x240>
 800d472:	e097      	b.n	800d5a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d474:	7bbb      	ldrb	r3, [r7, #14]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d007      	beq.n	800d48a <USBD_StdEPReq+0x1f2>
 800d47a:	7bbb      	ldrb	r3, [r7, #14]
 800d47c:	2b80      	cmp	r3, #128	; 0x80
 800d47e:	d004      	beq.n	800d48a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d480:	6839      	ldr	r1, [r7, #0]
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 fbed 	bl	800dc62 <USBD_CtlError>
                break;
 800d488:	e091      	b.n	800d5ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d48a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	da0b      	bge.n	800d4aa <USBD_StdEPReq+0x212>
 800d492:	7bbb      	ldrb	r3, [r7, #14]
 800d494:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d498:	4613      	mov	r3, r2
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	4413      	add	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	3310      	adds	r3, #16
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	e00b      	b.n	800d4c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d4aa:	7bbb      	ldrb	r3, [r7, #14]
 800d4ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	4413      	add	r3, r2
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	4413      	add	r3, r2
 800d4c0:	3304      	adds	r3, #4
 800d4c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	2202      	movs	r2, #2
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fc37 	bl	800dd44 <USBD_CtlSendData>
              break;
 800d4d6:	e06a      	b.n	800d5ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d4d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	da11      	bge.n	800d504 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d4e0:	7bbb      	ldrb	r3, [r7, #14]
 800d4e2:	f003 020f 	and.w	r2, r3, #15
 800d4e6:	6879      	ldr	r1, [r7, #4]
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	4413      	add	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	440b      	add	r3, r1
 800d4f2:	3324      	adds	r3, #36	; 0x24
 800d4f4:	881b      	ldrh	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d117      	bne.n	800d52a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d4fa:	6839      	ldr	r1, [r7, #0]
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 fbb0 	bl	800dc62 <USBD_CtlError>
                  break;
 800d502:	e054      	b.n	800d5ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d504:	7bbb      	ldrb	r3, [r7, #14]
 800d506:	f003 020f 	and.w	r2, r3, #15
 800d50a:	6879      	ldr	r1, [r7, #4]
 800d50c:	4613      	mov	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4413      	add	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	440b      	add	r3, r1
 800d516:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d51a:	881b      	ldrh	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d104      	bne.n	800d52a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fb9d 	bl	800dc62 <USBD_CtlError>
                  break;
 800d528:	e041      	b.n	800d5ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d52a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	da0b      	bge.n	800d54a <USBD_StdEPReq+0x2b2>
 800d532:	7bbb      	ldrb	r3, [r7, #14]
 800d534:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d538:	4613      	mov	r3, r2
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	4413      	add	r3, r2
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	3310      	adds	r3, #16
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	4413      	add	r3, r2
 800d546:	3304      	adds	r3, #4
 800d548:	e00b      	b.n	800d562 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d54a:	7bbb      	ldrb	r3, [r7, #14]
 800d54c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d550:	4613      	mov	r3, r2
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	4413      	add	r3, r2
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	4413      	add	r3, r2
 800d560:	3304      	adds	r3, #4
 800d562:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d564:	7bbb      	ldrb	r3, [r7, #14]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d002      	beq.n	800d570 <USBD_StdEPReq+0x2d8>
 800d56a:	7bbb      	ldrb	r3, [r7, #14]
 800d56c:	2b80      	cmp	r3, #128	; 0x80
 800d56e:	d103      	bne.n	800d578 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	2200      	movs	r2, #0
 800d574:	601a      	str	r2, [r3, #0]
 800d576:	e00e      	b.n	800d596 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d578:	7bbb      	ldrb	r3, [r7, #14]
 800d57a:	4619      	mov	r1, r3
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f001 f8a3 	bl	800e6c8 <USBD_LL_IsStallEP>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d003      	beq.n	800d590 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	2201      	movs	r2, #1
 800d58c:	601a      	str	r2, [r3, #0]
 800d58e:	e002      	b.n	800d596 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	2200      	movs	r2, #0
 800d594:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2202      	movs	r2, #2
 800d59a:	4619      	mov	r1, r3
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 fbd1 	bl	800dd44 <USBD_CtlSendData>
              break;
 800d5a2:	e004      	b.n	800d5ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d5a4:	6839      	ldr	r1, [r7, #0]
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 fb5b 	bl	800dc62 <USBD_CtlError>
              break;
 800d5ac:	bf00      	nop
          }
          break;
 800d5ae:	e004      	b.n	800d5ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 fb55 	bl	800dc62 <USBD_CtlError>
          break;
 800d5b8:	bf00      	nop
      }
      break;
 800d5ba:	e005      	b.n	800d5c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d5bc:	6839      	ldr	r1, [r7, #0]
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 fb4f 	bl	800dc62 <USBD_CtlError>
      break;
 800d5c4:	e000      	b.n	800d5c8 <USBD_StdEPReq+0x330>
      break;
 800d5c6:	bf00      	nop
  }

  return ret;
 800d5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
	...

0800d5d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	885b      	ldrh	r3, [r3, #2]
 800d5ee:	0a1b      	lsrs	r3, r3, #8
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	2b06      	cmp	r3, #6
 800d5f6:	f200 8128 	bhi.w	800d84a <USBD_GetDescriptor+0x276>
 800d5fa:	a201      	add	r2, pc, #4	; (adr r2, 800d600 <USBD_GetDescriptor+0x2c>)
 800d5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d600:	0800d61d 	.word	0x0800d61d
 800d604:	0800d635 	.word	0x0800d635
 800d608:	0800d675 	.word	0x0800d675
 800d60c:	0800d84b 	.word	0x0800d84b
 800d610:	0800d84b 	.word	0x0800d84b
 800d614:	0800d7eb 	.word	0x0800d7eb
 800d618:	0800d817 	.word	0x0800d817
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	7c12      	ldrb	r2, [r2, #16]
 800d628:	f107 0108 	add.w	r1, r7, #8
 800d62c:	4610      	mov	r0, r2
 800d62e:	4798      	blx	r3
 800d630:	60f8      	str	r0, [r7, #12]
      break;
 800d632:	e112      	b.n	800d85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	7c1b      	ldrb	r3, [r3, #16]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10d      	bne.n	800d658 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d644:	f107 0208 	add.w	r2, r7, #8
 800d648:	4610      	mov	r0, r2
 800d64a:	4798      	blx	r3
 800d64c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3301      	adds	r3, #1
 800d652:	2202      	movs	r2, #2
 800d654:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d656:	e100      	b.n	800d85a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d660:	f107 0208 	add.w	r2, r7, #8
 800d664:	4610      	mov	r0, r2
 800d666:	4798      	blx	r3
 800d668:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	3301      	adds	r3, #1
 800d66e:	2202      	movs	r2, #2
 800d670:	701a      	strb	r2, [r3, #0]
      break;
 800d672:	e0f2      	b.n	800d85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	885b      	ldrh	r3, [r3, #2]
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b05      	cmp	r3, #5
 800d67c:	f200 80ac 	bhi.w	800d7d8 <USBD_GetDescriptor+0x204>
 800d680:	a201      	add	r2, pc, #4	; (adr r2, 800d688 <USBD_GetDescriptor+0xb4>)
 800d682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d686:	bf00      	nop
 800d688:	0800d6a1 	.word	0x0800d6a1
 800d68c:	0800d6d5 	.word	0x0800d6d5
 800d690:	0800d709 	.word	0x0800d709
 800d694:	0800d73d 	.word	0x0800d73d
 800d698:	0800d771 	.word	0x0800d771
 800d69c:	0800d7a5 	.word	0x0800d7a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00b      	beq.n	800d6c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	7c12      	ldrb	r2, [r2, #16]
 800d6b8:	f107 0108 	add.w	r1, r7, #8
 800d6bc:	4610      	mov	r0, r2
 800d6be:	4798      	blx	r3
 800d6c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6c2:	e091      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6c4:	6839      	ldr	r1, [r7, #0]
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 facb 	bl	800dc62 <USBD_CtlError>
            err++;
 800d6cc:	7afb      	ldrb	r3, [r7, #11]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d6d2:	e089      	b.n	800d7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d00b      	beq.n	800d6f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	7c12      	ldrb	r2, [r2, #16]
 800d6ec:	f107 0108 	add.w	r1, r7, #8
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	4798      	blx	r3
 800d6f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6f6:	e077      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6f8:	6839      	ldr	r1, [r7, #0]
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fab1 	bl	800dc62 <USBD_CtlError>
            err++;
 800d700:	7afb      	ldrb	r3, [r7, #11]
 800d702:	3301      	adds	r3, #1
 800d704:	72fb      	strb	r3, [r7, #11]
          break;
 800d706:	e06f      	b.n	800d7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d00b      	beq.n	800d72c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	7c12      	ldrb	r2, [r2, #16]
 800d720:	f107 0108 	add.w	r1, r7, #8
 800d724:	4610      	mov	r0, r2
 800d726:	4798      	blx	r3
 800d728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d72a:	e05d      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fa97 	bl	800dc62 <USBD_CtlError>
            err++;
 800d734:	7afb      	ldrb	r3, [r7, #11]
 800d736:	3301      	adds	r3, #1
 800d738:	72fb      	strb	r3, [r7, #11]
          break;
 800d73a:	e055      	b.n	800d7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d00b      	beq.n	800d760 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d74e:	691b      	ldr	r3, [r3, #16]
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	7c12      	ldrb	r2, [r2, #16]
 800d754:	f107 0108 	add.w	r1, r7, #8
 800d758:	4610      	mov	r0, r2
 800d75a:	4798      	blx	r3
 800d75c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d75e:	e043      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 fa7d 	bl	800dc62 <USBD_CtlError>
            err++;
 800d768:	7afb      	ldrb	r3, [r7, #11]
 800d76a:	3301      	adds	r3, #1
 800d76c:	72fb      	strb	r3, [r7, #11]
          break;
 800d76e:	e03b      	b.n	800d7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d776:	695b      	ldr	r3, [r3, #20]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00b      	beq.n	800d794 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d782:	695b      	ldr	r3, [r3, #20]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	7c12      	ldrb	r2, [r2, #16]
 800d788:	f107 0108 	add.w	r1, r7, #8
 800d78c:	4610      	mov	r0, r2
 800d78e:	4798      	blx	r3
 800d790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d792:	e029      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d794:	6839      	ldr	r1, [r7, #0]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 fa63 	bl	800dc62 <USBD_CtlError>
            err++;
 800d79c:	7afb      	ldrb	r3, [r7, #11]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	72fb      	strb	r3, [r7, #11]
          break;
 800d7a2:	e021      	b.n	800d7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7aa:	699b      	ldr	r3, [r3, #24]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00b      	beq.n	800d7c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7b6:	699b      	ldr	r3, [r3, #24]
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	7c12      	ldrb	r2, [r2, #16]
 800d7bc:	f107 0108 	add.w	r1, r7, #8
 800d7c0:	4610      	mov	r0, r2
 800d7c2:	4798      	blx	r3
 800d7c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7c6:	e00f      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7c8:	6839      	ldr	r1, [r7, #0]
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 fa49 	bl	800dc62 <USBD_CtlError>
            err++;
 800d7d0:	7afb      	ldrb	r3, [r7, #11]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	72fb      	strb	r3, [r7, #11]
          break;
 800d7d6:	e007      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d7d8:	6839      	ldr	r1, [r7, #0]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 fa41 	bl	800dc62 <USBD_CtlError>
          err++;
 800d7e0:	7afb      	ldrb	r3, [r7, #11]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d7e6:	bf00      	nop
      }
      break;
 800d7e8:	e037      	b.n	800d85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	7c1b      	ldrb	r3, [r3, #16]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d109      	bne.n	800d806 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7fa:	f107 0208 	add.w	r2, r7, #8
 800d7fe:	4610      	mov	r0, r2
 800d800:	4798      	blx	r3
 800d802:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d804:	e029      	b.n	800d85a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 fa2a 	bl	800dc62 <USBD_CtlError>
        err++;
 800d80e:	7afb      	ldrb	r3, [r7, #11]
 800d810:	3301      	adds	r3, #1
 800d812:	72fb      	strb	r3, [r7, #11]
      break;
 800d814:	e021      	b.n	800d85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	7c1b      	ldrb	r3, [r3, #16]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d10d      	bne.n	800d83a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d826:	f107 0208 	add.w	r2, r7, #8
 800d82a:	4610      	mov	r0, r2
 800d82c:	4798      	blx	r3
 800d82e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	3301      	adds	r3, #1
 800d834:	2207      	movs	r2, #7
 800d836:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d838:	e00f      	b.n	800d85a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d83a:	6839      	ldr	r1, [r7, #0]
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 fa10 	bl	800dc62 <USBD_CtlError>
        err++;
 800d842:	7afb      	ldrb	r3, [r7, #11]
 800d844:	3301      	adds	r3, #1
 800d846:	72fb      	strb	r3, [r7, #11]
      break;
 800d848:	e007      	b.n	800d85a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 fa08 	bl	800dc62 <USBD_CtlError>
      err++;
 800d852:	7afb      	ldrb	r3, [r7, #11]
 800d854:	3301      	adds	r3, #1
 800d856:	72fb      	strb	r3, [r7, #11]
      break;
 800d858:	bf00      	nop
  }

  if (err != 0U)
 800d85a:	7afb      	ldrb	r3, [r7, #11]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d11e      	bne.n	800d89e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	88db      	ldrh	r3, [r3, #6]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d016      	beq.n	800d896 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d868:	893b      	ldrh	r3, [r7, #8]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00e      	beq.n	800d88c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	88da      	ldrh	r2, [r3, #6]
 800d872:	893b      	ldrh	r3, [r7, #8]
 800d874:	4293      	cmp	r3, r2
 800d876:	bf28      	it	cs
 800d878:	4613      	movcs	r3, r2
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d87e:	893b      	ldrh	r3, [r7, #8]
 800d880:	461a      	mov	r2, r3
 800d882:	68f9      	ldr	r1, [r7, #12]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fa5d 	bl	800dd44 <USBD_CtlSendData>
 800d88a:	e009      	b.n	800d8a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d88c:	6839      	ldr	r1, [r7, #0]
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 f9e7 	bl	800dc62 <USBD_CtlError>
 800d894:	e004      	b.n	800d8a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 faae 	bl	800ddf8 <USBD_CtlSendStatus>
 800d89c:	e000      	b.n	800d8a0 <USBD_GetDescriptor+0x2cc>
    return;
 800d89e:	bf00      	nop
  }
}
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop

0800d8a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	889b      	ldrh	r3, [r3, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d131      	bne.n	800d91e <USBD_SetAddress+0x76>
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	88db      	ldrh	r3, [r3, #6]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d12d      	bne.n	800d91e <USBD_SetAddress+0x76>
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	885b      	ldrh	r3, [r3, #2]
 800d8c6:	2b7f      	cmp	r3, #127	; 0x7f
 800d8c8:	d829      	bhi.n	800d91e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	885b      	ldrh	r3, [r3, #2]
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	d104      	bne.n	800d8ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d8e2:	6839      	ldr	r1, [r7, #0]
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 f9bc 	bl	800dc62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ea:	e01d      	b.n	800d928 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	7bfa      	ldrb	r2, [r7, #15]
 800d8f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 ff11 	bl	800e720 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 fa7a 	bl	800ddf8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d904:	7bfb      	ldrb	r3, [r7, #15]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d004      	beq.n	800d914 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2202      	movs	r2, #2
 800d90e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d912:	e009      	b.n	800d928 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d91c:	e004      	b.n	800d928 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 f99e 	bl	800dc62 <USBD_CtlError>
  }
}
 800d926:	bf00      	nop
 800d928:	bf00      	nop
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	885b      	ldrh	r3, [r3, #2]
 800d942:	b2da      	uxtb	r2, r3
 800d944:	4b4e      	ldr	r3, [pc, #312]	; (800da80 <USBD_SetConfig+0x150>)
 800d946:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d948:	4b4d      	ldr	r3, [pc, #308]	; (800da80 <USBD_SetConfig+0x150>)
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d905      	bls.n	800d95c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d950:	6839      	ldr	r1, [r7, #0]
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 f985 	bl	800dc62 <USBD_CtlError>
    return USBD_FAIL;
 800d958:	2303      	movs	r3, #3
 800d95a:	e08c      	b.n	800da76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d962:	b2db      	uxtb	r3, r3
 800d964:	2b02      	cmp	r3, #2
 800d966:	d002      	beq.n	800d96e <USBD_SetConfig+0x3e>
 800d968:	2b03      	cmp	r3, #3
 800d96a:	d029      	beq.n	800d9c0 <USBD_SetConfig+0x90>
 800d96c:	e075      	b.n	800da5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d96e:	4b44      	ldr	r3, [pc, #272]	; (800da80 <USBD_SetConfig+0x150>)
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d020      	beq.n	800d9b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d976:	4b42      	ldr	r3, [pc, #264]	; (800da80 <USBD_SetConfig+0x150>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	461a      	mov	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d980:	4b3f      	ldr	r3, [pc, #252]	; (800da80 <USBD_SetConfig+0x150>)
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	4619      	mov	r1, r3
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f7fe ffe7 	bl	800c95a <USBD_SetClassConfig>
 800d98c:	4603      	mov	r3, r0
 800d98e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d990:	7bfb      	ldrb	r3, [r7, #15]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d008      	beq.n	800d9a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d996:	6839      	ldr	r1, [r7, #0]
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 f962 	bl	800dc62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2202      	movs	r2, #2
 800d9a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d9a6:	e065      	b.n	800da74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f000 fa25 	bl	800ddf8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2203      	movs	r2, #3
 800d9b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d9b6:	e05d      	b.n	800da74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 fa1d 	bl	800ddf8 <USBD_CtlSendStatus>
      break;
 800d9be:	e059      	b.n	800da74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d9c0:	4b2f      	ldr	r3, [pc, #188]	; (800da80 <USBD_SetConfig+0x150>)
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d112      	bne.n	800d9ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2202      	movs	r2, #2
 800d9cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d9d0:	4b2b      	ldr	r3, [pc, #172]	; (800da80 <USBD_SetConfig+0x150>)
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d9da:	4b29      	ldr	r3, [pc, #164]	; (800da80 <USBD_SetConfig+0x150>)
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7fe ffd6 	bl	800c992 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fa06 	bl	800ddf8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d9ec:	e042      	b.n	800da74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d9ee:	4b24      	ldr	r3, [pc, #144]	; (800da80 <USBD_SetConfig+0x150>)
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d02a      	beq.n	800da52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	b2db      	uxtb	r3, r3
 800da02:	4619      	mov	r1, r3
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7fe ffc4 	bl	800c992 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800da0a:	4b1d      	ldr	r3, [pc, #116]	; (800da80 <USBD_SetConfig+0x150>)
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	461a      	mov	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da14:	4b1a      	ldr	r3, [pc, #104]	; (800da80 <USBD_SetConfig+0x150>)
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	4619      	mov	r1, r3
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7fe ff9d 	bl	800c95a <USBD_SetClassConfig>
 800da20:	4603      	mov	r3, r0
 800da22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800da24:	7bfb      	ldrb	r3, [r7, #15]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d00f      	beq.n	800da4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800da2a:	6839      	ldr	r1, [r7, #0]
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 f918 	bl	800dc62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	b2db      	uxtb	r3, r3
 800da38:	4619      	mov	r1, r3
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f7fe ffa9 	bl	800c992 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2202      	movs	r2, #2
 800da44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800da48:	e014      	b.n	800da74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 f9d4 	bl	800ddf8 <USBD_CtlSendStatus>
      break;
 800da50:	e010      	b.n	800da74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f9d0 	bl	800ddf8 <USBD_CtlSendStatus>
      break;
 800da58:	e00c      	b.n	800da74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 f900 	bl	800dc62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da62:	4b07      	ldr	r3, [pc, #28]	; (800da80 <USBD_SetConfig+0x150>)
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	4619      	mov	r1, r3
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7fe ff92 	bl	800c992 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800da6e:	2303      	movs	r3, #3
 800da70:	73fb      	strb	r3, [r7, #15]
      break;
 800da72:	bf00      	nop
  }

  return ret;
 800da74:	7bfb      	ldrb	r3, [r7, #15]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	20001d64 	.word	0x20001d64

0800da84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	88db      	ldrh	r3, [r3, #6]
 800da92:	2b01      	cmp	r3, #1
 800da94:	d004      	beq.n	800daa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800da96:	6839      	ldr	r1, [r7, #0]
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 f8e2 	bl	800dc62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800da9e:	e023      	b.n	800dae8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	dc02      	bgt.n	800dab2 <USBD_GetConfig+0x2e>
 800daac:	2b00      	cmp	r3, #0
 800daae:	dc03      	bgt.n	800dab8 <USBD_GetConfig+0x34>
 800dab0:	e015      	b.n	800dade <USBD_GetConfig+0x5a>
 800dab2:	2b03      	cmp	r3, #3
 800dab4:	d00b      	beq.n	800dace <USBD_GetConfig+0x4a>
 800dab6:	e012      	b.n	800dade <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3308      	adds	r3, #8
 800dac2:	2201      	movs	r2, #1
 800dac4:	4619      	mov	r1, r3
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 f93c 	bl	800dd44 <USBD_CtlSendData>
        break;
 800dacc:	e00c      	b.n	800dae8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	3304      	adds	r3, #4
 800dad2:	2201      	movs	r2, #1
 800dad4:	4619      	mov	r1, r3
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 f934 	bl	800dd44 <USBD_CtlSendData>
        break;
 800dadc:	e004      	b.n	800dae8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dade:	6839      	ldr	r1, [r7, #0]
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 f8be 	bl	800dc62 <USBD_CtlError>
        break;
 800dae6:	bf00      	nop
}
 800dae8:	bf00      	nop
 800daea:	3708      	adds	r7, #8
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db00:	b2db      	uxtb	r3, r3
 800db02:	3b01      	subs	r3, #1
 800db04:	2b02      	cmp	r3, #2
 800db06:	d81e      	bhi.n	800db46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	88db      	ldrh	r3, [r3, #6]
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	d004      	beq.n	800db1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 f8a5 	bl	800dc62 <USBD_CtlError>
        break;
 800db18:	e01a      	b.n	800db50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2201      	movs	r2, #1
 800db1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800db26:	2b00      	cmp	r3, #0
 800db28:	d005      	beq.n	800db36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	f043 0202 	orr.w	r2, r3, #2
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	330c      	adds	r3, #12
 800db3a:	2202      	movs	r2, #2
 800db3c:	4619      	mov	r1, r3
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f900 	bl	800dd44 <USBD_CtlSendData>
      break;
 800db44:	e004      	b.n	800db50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800db46:	6839      	ldr	r1, [r7, #0]
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f88a 	bl	800dc62 <USBD_CtlError>
      break;
 800db4e:	bf00      	nop
  }
}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	885b      	ldrh	r3, [r3, #2]
 800db66:	2b01      	cmp	r3, #1
 800db68:	d107      	bne.n	800db7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2201      	movs	r2, #1
 800db6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f940 	bl	800ddf8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800db78:	e013      	b.n	800dba2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	885b      	ldrh	r3, [r3, #2]
 800db7e:	2b02      	cmp	r3, #2
 800db80:	d10b      	bne.n	800db9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	889b      	ldrh	r3, [r3, #4]
 800db86:	0a1b      	lsrs	r3, r3, #8
 800db88:	b29b      	uxth	r3, r3
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f930 	bl	800ddf8 <USBD_CtlSendStatus>
}
 800db98:	e003      	b.n	800dba2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 f860 	bl	800dc62 <USBD_CtlError>
}
 800dba2:	bf00      	nop
 800dba4:	3708      	adds	r7, #8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b082      	sub	sp, #8
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
 800dbb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	3b01      	subs	r3, #1
 800dbbe:	2b02      	cmp	r3, #2
 800dbc0:	d80b      	bhi.n	800dbda <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	885b      	ldrh	r3, [r3, #2]
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d10c      	bne.n	800dbe4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 f910 	bl	800ddf8 <USBD_CtlSendStatus>
      }
      break;
 800dbd8:	e004      	b.n	800dbe4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dbda:	6839      	ldr	r1, [r7, #0]
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 f840 	bl	800dc62 <USBD_CtlError>
      break;
 800dbe2:	e000      	b.n	800dbe6 <USBD_ClrFeature+0x3c>
      break;
 800dbe4:	bf00      	nop
  }
}
 800dbe6:	bf00      	nop
 800dbe8:	3708      	adds	r7, #8
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
 800dbf6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	781a      	ldrb	r2, [r3, #0]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	3301      	adds	r3, #1
 800dc08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	781a      	ldrb	r2, [r3, #0]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	3301      	adds	r3, #1
 800dc16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f7ff fa41 	bl	800d0a0 <SWAPBYTE>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	461a      	mov	r2, r3
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	f7ff fa34 	bl	800d0a0 <SWAPBYTE>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	3301      	adds	r3, #1
 800dc44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3301      	adds	r3, #1
 800dc4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f7ff fa27 	bl	800d0a0 <SWAPBYTE>
 800dc52:	4603      	mov	r3, r0
 800dc54:	461a      	mov	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	80da      	strh	r2, [r3, #6]
}
 800dc5a:	bf00      	nop
 800dc5c:	3710      	adds	r7, #16
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc62:	b580      	push	{r7, lr}
 800dc64:	b082      	sub	sp, #8
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
 800dc6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc6c:	2180      	movs	r1, #128	; 0x80
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 fcec 	bl	800e64c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dc74:	2100      	movs	r1, #0
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f000 fce8 	bl	800e64c <USBD_LL_StallEP>
}
 800dc7c:	bf00      	nop
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc90:	2300      	movs	r3, #0
 800dc92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d036      	beq.n	800dd08 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dc9e:	6938      	ldr	r0, [r7, #16]
 800dca0:	f000 f836 	bl	800dd10 <USBD_GetLen>
 800dca4:	4603      	mov	r3, r0
 800dca6:	3301      	adds	r3, #1
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	005b      	lsls	r3, r3, #1
 800dcac:	b29a      	uxth	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dcb2:	7dfb      	ldrb	r3, [r7, #23]
 800dcb4:	68ba      	ldr	r2, [r7, #8]
 800dcb6:	4413      	add	r3, r2
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	7812      	ldrb	r2, [r2, #0]
 800dcbc:	701a      	strb	r2, [r3, #0]
  idx++;
 800dcbe:	7dfb      	ldrb	r3, [r7, #23]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dcc4:	7dfb      	ldrb	r3, [r7, #23]
 800dcc6:	68ba      	ldr	r2, [r7, #8]
 800dcc8:	4413      	add	r3, r2
 800dcca:	2203      	movs	r2, #3
 800dccc:	701a      	strb	r2, [r3, #0]
  idx++;
 800dcce:	7dfb      	ldrb	r3, [r7, #23]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dcd4:	e013      	b.n	800dcfe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dcd6:	7dfb      	ldrb	r3, [r7, #23]
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	4413      	add	r3, r2
 800dcdc:	693a      	ldr	r2, [r7, #16]
 800dcde:	7812      	ldrb	r2, [r2, #0]
 800dce0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	3301      	adds	r3, #1
 800dce6:	613b      	str	r3, [r7, #16]
    idx++;
 800dce8:	7dfb      	ldrb	r3, [r7, #23]
 800dcea:	3301      	adds	r3, #1
 800dcec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dcee:	7dfb      	ldrb	r3, [r7, #23]
 800dcf0:	68ba      	ldr	r2, [r7, #8]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	701a      	strb	r2, [r3, #0]
    idx++;
 800dcf8:	7dfb      	ldrb	r3, [r7, #23]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1e7      	bne.n	800dcd6 <USBD_GetString+0x52>
 800dd06:	e000      	b.n	800dd0a <USBD_GetString+0x86>
    return;
 800dd08:	bf00      	nop
  }
}
 800dd0a:	3718      	adds	r7, #24
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b085      	sub	sp, #20
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dd20:	e005      	b.n	800dd2e <USBD_GetLen+0x1e>
  {
    len++;
 800dd22:	7bfb      	ldrb	r3, [r7, #15]
 800dd24:	3301      	adds	r3, #1
 800dd26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d1f5      	bne.n	800dd22 <USBD_GetLen+0x12>
  }

  return len;
 800dd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3714      	adds	r7, #20
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2202      	movs	r2, #2
 800dd54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	68ba      	ldr	r2, [r7, #8]
 800dd68:	2100      	movs	r1, #0
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	f000 fcf7 	bl	800e75e <USBD_LL_Transmit>

  return USBD_OK;
 800dd70:	2300      	movs	r3, #0
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b084      	sub	sp, #16
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	60f8      	str	r0, [r7, #12]
 800dd82:	60b9      	str	r1, [r7, #8]
 800dd84:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	2100      	movs	r1, #0
 800dd8c:	68f8      	ldr	r0, [r7, #12]
 800dd8e:	f000 fce6 	bl	800e75e <USBD_LL_Transmit>

  return USBD_OK;
 800dd92:	2300      	movs	r3, #0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3710      	adds	r7, #16
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2203      	movs	r2, #3
 800ddac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	68ba      	ldr	r2, [r7, #8]
 800ddc4:	2100      	movs	r1, #0
 800ddc6:	68f8      	ldr	r0, [r7, #12]
 800ddc8:	f000 fcea 	bl	800e7a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b084      	sub	sp, #16
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	60f8      	str	r0, [r7, #12]
 800ddde:	60b9      	str	r1, [r7, #8]
 800dde0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	68ba      	ldr	r2, [r7, #8]
 800dde6:	2100      	movs	r1, #0
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f000 fcd9 	bl	800e7a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2204      	movs	r2, #4
 800de04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800de08:	2300      	movs	r3, #0
 800de0a:	2200      	movs	r2, #0
 800de0c:	2100      	movs	r1, #0
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fca5 	bl	800e75e <USBD_LL_Transmit>

  return USBD_OK;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b082      	sub	sp, #8
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2205      	movs	r2, #5
 800de2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de2e:	2300      	movs	r3, #0
 800de30:	2200      	movs	r2, #0
 800de32:	2100      	movs	r1, #0
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 fcb3 	bl	800e7a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3708      	adds	r7, #8
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800de48:	2200      	movs	r2, #0
 800de4a:	4912      	ldr	r1, [pc, #72]	; (800de94 <MX_USB_DEVICE_Init+0x50>)
 800de4c:	4812      	ldr	r0, [pc, #72]	; (800de98 <MX_USB_DEVICE_Init+0x54>)
 800de4e:	f7fe fd07 	bl	800c860 <USBD_Init>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d001      	beq.n	800de5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800de58:	f7f5 fea6 	bl	8003ba8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800de5c:	490f      	ldr	r1, [pc, #60]	; (800de9c <MX_USB_DEVICE_Init+0x58>)
 800de5e:	480e      	ldr	r0, [pc, #56]	; (800de98 <MX_USB_DEVICE_Init+0x54>)
 800de60:	f7fe fd2e 	bl	800c8c0 <USBD_RegisterClass>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d001      	beq.n	800de6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800de6a:	f7f5 fe9d 	bl	8003ba8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800de6e:	490c      	ldr	r1, [pc, #48]	; (800dea0 <MX_USB_DEVICE_Init+0x5c>)
 800de70:	4809      	ldr	r0, [pc, #36]	; (800de98 <MX_USB_DEVICE_Init+0x54>)
 800de72:	f7fe fc1f 	bl	800c6b4 <USBD_CDC_RegisterInterface>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d001      	beq.n	800de80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800de7c:	f7f5 fe94 	bl	8003ba8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800de80:	4805      	ldr	r0, [pc, #20]	; (800de98 <MX_USB_DEVICE_Init+0x54>)
 800de82:	f7fe fd53 	bl	800c92c <USBD_Start>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800de8c:	f7f5 fe8c 	bl	8003ba8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800de90:	bf00      	nop
 800de92:	bd80      	pop	{r7, pc}
 800de94:	200000c0 	.word	0x200000c0
 800de98:	20001d68 	.word	0x20001d68
 800de9c:	2000002c 	.word	0x2000002c
 800dea0:	200000ac 	.word	0x200000ac

0800dea4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dea8:	2200      	movs	r2, #0
 800deaa:	4905      	ldr	r1, [pc, #20]	; (800dec0 <CDC_Init_FS+0x1c>)
 800deac:	4805      	ldr	r0, [pc, #20]	; (800dec4 <CDC_Init_FS+0x20>)
 800deae:	f7fe fc1b 	bl	800c6e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800deb2:	4905      	ldr	r1, [pc, #20]	; (800dec8 <CDC_Init_FS+0x24>)
 800deb4:	4803      	ldr	r0, [pc, #12]	; (800dec4 <CDC_Init_FS+0x20>)
 800deb6:	f7fe fc39 	bl	800c72c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800deba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800debc:	4618      	mov	r0, r3
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	2000242c 	.word	0x2000242c
 800dec4:	20001d68 	.word	0x20001d68
 800dec8:	20002044 	.word	0x20002044

0800decc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800decc:	b480      	push	{r7}
 800dece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ded0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dedc:	b480      	push	{r7}
 800dede:	b083      	sub	sp, #12
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	4603      	mov	r3, r0
 800dee4:	6039      	str	r1, [r7, #0]
 800dee6:	71fb      	strb	r3, [r7, #7]
 800dee8:	4613      	mov	r3, r2
 800deea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800deec:	79fb      	ldrb	r3, [r7, #7]
 800deee:	2b23      	cmp	r3, #35	; 0x23
 800def0:	d84a      	bhi.n	800df88 <CDC_Control_FS+0xac>
 800def2:	a201      	add	r2, pc, #4	; (adr r2, 800def8 <CDC_Control_FS+0x1c>)
 800def4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def8:	0800df89 	.word	0x0800df89
 800defc:	0800df89 	.word	0x0800df89
 800df00:	0800df89 	.word	0x0800df89
 800df04:	0800df89 	.word	0x0800df89
 800df08:	0800df89 	.word	0x0800df89
 800df0c:	0800df89 	.word	0x0800df89
 800df10:	0800df89 	.word	0x0800df89
 800df14:	0800df89 	.word	0x0800df89
 800df18:	0800df89 	.word	0x0800df89
 800df1c:	0800df89 	.word	0x0800df89
 800df20:	0800df89 	.word	0x0800df89
 800df24:	0800df89 	.word	0x0800df89
 800df28:	0800df89 	.word	0x0800df89
 800df2c:	0800df89 	.word	0x0800df89
 800df30:	0800df89 	.word	0x0800df89
 800df34:	0800df89 	.word	0x0800df89
 800df38:	0800df89 	.word	0x0800df89
 800df3c:	0800df89 	.word	0x0800df89
 800df40:	0800df89 	.word	0x0800df89
 800df44:	0800df89 	.word	0x0800df89
 800df48:	0800df89 	.word	0x0800df89
 800df4c:	0800df89 	.word	0x0800df89
 800df50:	0800df89 	.word	0x0800df89
 800df54:	0800df89 	.word	0x0800df89
 800df58:	0800df89 	.word	0x0800df89
 800df5c:	0800df89 	.word	0x0800df89
 800df60:	0800df89 	.word	0x0800df89
 800df64:	0800df89 	.word	0x0800df89
 800df68:	0800df89 	.word	0x0800df89
 800df6c:	0800df89 	.word	0x0800df89
 800df70:	0800df89 	.word	0x0800df89
 800df74:	0800df89 	.word	0x0800df89
 800df78:	0800df89 	.word	0x0800df89
 800df7c:	0800df89 	.word	0x0800df89
 800df80:	0800df89 	.word	0x0800df89
 800df84:	0800df89 	.word	0x0800df89
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800df88:	bf00      	nop
  }

  return (USBD_OK);
 800df8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint16_t len = (uint8_t) *Len;
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	81fb      	strh	r3, [r7, #14]
  StringFIFOAdd(&USBFIFO, Buf, len);
 800dfaa:	89fb      	ldrh	r3, [r7, #14]
 800dfac:	461a      	mov	r2, r3
 800dfae:	6879      	ldr	r1, [r7, #4]
 800dfb0:	4807      	ldr	r0, [pc, #28]	; (800dfd0 <CDC_Receive_FS+0x38>)
 800dfb2:	f7f5 fff3 	bl	8003f9c <StringFIFOAdd>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dfb6:	6879      	ldr	r1, [r7, #4]
 800dfb8:	4806      	ldr	r0, [pc, #24]	; (800dfd4 <CDC_Receive_FS+0x3c>)
 800dfba:	f7fe fbb7 	bl	800c72c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dfbe:	4805      	ldr	r0, [pc, #20]	; (800dfd4 <CDC_Receive_FS+0x3c>)
 800dfc0:	f7fe fc18 	bl	800c7f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dfc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3710      	adds	r7, #16
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	20001c60 	.word	0x20001c60
 800dfd4:	20001d68 	.word	0x20001d68

0800dfd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dfe8:	4b0d      	ldr	r3, [pc, #52]	; (800e020 <CDC_Transmit_FS+0x48>)
 800dfea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dffa:	2301      	movs	r3, #1
 800dffc:	e00b      	b.n	800e016 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dffe:	887b      	ldrh	r3, [r7, #2]
 800e000:	461a      	mov	r2, r3
 800e002:	6879      	ldr	r1, [r7, #4]
 800e004:	4806      	ldr	r0, [pc, #24]	; (800e020 <CDC_Transmit_FS+0x48>)
 800e006:	f7fe fb6f 	bl	800c6e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e00a:	4805      	ldr	r0, [pc, #20]	; (800e020 <CDC_Transmit_FS+0x48>)
 800e00c:	f7fe fbac 	bl	800c768 <USBD_CDC_TransmitPacket>
 800e010:	4603      	mov	r3, r0
 800e012:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e014:	7bfb      	ldrb	r3, [r7, #15]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	20001d68 	.word	0x20001d68

0800e024 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e024:	b480      	push	{r7}
 800e026:	b087      	sub	sp, #28
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	4613      	mov	r3, r2
 800e030:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e032:	2300      	movs	r3, #0
 800e034:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	371c      	adds	r7, #28
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
	...

0800e048 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	4603      	mov	r3, r0
 800e050:	6039      	str	r1, [r7, #0]
 800e052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2212      	movs	r2, #18
 800e058:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e05a:	4b03      	ldr	r3, [pc, #12]	; (800e068 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	370c      	adds	r7, #12
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr
 800e068:	200000dc 	.word	0x200000dc

0800e06c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b083      	sub	sp, #12
 800e070:	af00      	add	r7, sp, #0
 800e072:	4603      	mov	r3, r0
 800e074:	6039      	str	r1, [r7, #0]
 800e076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	2204      	movs	r2, #4
 800e07c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e07e:	4b03      	ldr	r3, [pc, #12]	; (800e08c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e080:	4618      	mov	r0, r3
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr
 800e08c:	200000f0 	.word	0x200000f0

0800e090 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	4603      	mov	r3, r0
 800e098:	6039      	str	r1, [r7, #0]
 800e09a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e09c:	79fb      	ldrb	r3, [r7, #7]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d105      	bne.n	800e0ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e0a2:	683a      	ldr	r2, [r7, #0]
 800e0a4:	4907      	ldr	r1, [pc, #28]	; (800e0c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e0a6:	4808      	ldr	r0, [pc, #32]	; (800e0c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e0a8:	f7ff fdec 	bl	800dc84 <USBD_GetString>
 800e0ac:	e004      	b.n	800e0b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e0ae:	683a      	ldr	r2, [r7, #0]
 800e0b0:	4904      	ldr	r1, [pc, #16]	; (800e0c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e0b2:	4805      	ldr	r0, [pc, #20]	; (800e0c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e0b4:	f7ff fde6 	bl	800dc84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e0b8:	4b02      	ldr	r3, [pc, #8]	; (800e0c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3708      	adds	r7, #8
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	20002814 	.word	0x20002814
 800e0c8:	080148b4 	.word	0x080148b4

0800e0cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	6039      	str	r1, [r7, #0]
 800e0d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e0d8:	683a      	ldr	r2, [r7, #0]
 800e0da:	4904      	ldr	r1, [pc, #16]	; (800e0ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e0dc:	4804      	ldr	r0, [pc, #16]	; (800e0f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e0de:	f7ff fdd1 	bl	800dc84 <USBD_GetString>
  return USBD_StrDesc;
 800e0e2:	4b02      	ldr	r3, [pc, #8]	; (800e0ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	20002814 	.word	0x20002814
 800e0f0:	080148cc 	.word	0x080148cc

0800e0f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	6039      	str	r1, [r7, #0]
 800e0fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	221a      	movs	r2, #26
 800e104:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e106:	f000 f843 	bl	800e190 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e10a:	4b02      	ldr	r3, [pc, #8]	; (800e114 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	200000f4 	.word	0x200000f4

0800e118 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	4603      	mov	r3, r0
 800e120:	6039      	str	r1, [r7, #0]
 800e122:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e124:	79fb      	ldrb	r3, [r7, #7]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d105      	bne.n	800e136 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e12a:	683a      	ldr	r2, [r7, #0]
 800e12c:	4907      	ldr	r1, [pc, #28]	; (800e14c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e12e:	4808      	ldr	r0, [pc, #32]	; (800e150 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e130:	f7ff fda8 	bl	800dc84 <USBD_GetString>
 800e134:	e004      	b.n	800e140 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	4904      	ldr	r1, [pc, #16]	; (800e14c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e13a:	4805      	ldr	r0, [pc, #20]	; (800e150 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e13c:	f7ff fda2 	bl	800dc84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e140:	4b02      	ldr	r3, [pc, #8]	; (800e14c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e142:	4618      	mov	r0, r3
 800e144:	3708      	adds	r7, #8
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	20002814 	.word	0x20002814
 800e150:	080148e0 	.word	0x080148e0

0800e154 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	4603      	mov	r3, r0
 800e15c:	6039      	str	r1, [r7, #0]
 800e15e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e160:	79fb      	ldrb	r3, [r7, #7]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d105      	bne.n	800e172 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e166:	683a      	ldr	r2, [r7, #0]
 800e168:	4907      	ldr	r1, [pc, #28]	; (800e188 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e16a:	4808      	ldr	r0, [pc, #32]	; (800e18c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e16c:	f7ff fd8a 	bl	800dc84 <USBD_GetString>
 800e170:	e004      	b.n	800e17c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	4904      	ldr	r1, [pc, #16]	; (800e188 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e176:	4805      	ldr	r0, [pc, #20]	; (800e18c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e178:	f7ff fd84 	bl	800dc84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e17c:	4b02      	ldr	r3, [pc, #8]	; (800e188 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3708      	adds	r7, #8
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	20002814 	.word	0x20002814
 800e18c:	080148ec 	.word	0x080148ec

0800e190 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e196:	4b0f      	ldr	r3, [pc, #60]	; (800e1d4 <Get_SerialNum+0x44>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e19c:	4b0e      	ldr	r3, [pc, #56]	; (800e1d8 <Get_SerialNum+0x48>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e1a2:	4b0e      	ldr	r3, [pc, #56]	; (800e1dc <Get_SerialNum+0x4c>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d009      	beq.n	800e1ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e1b6:	2208      	movs	r2, #8
 800e1b8:	4909      	ldr	r1, [pc, #36]	; (800e1e0 <Get_SerialNum+0x50>)
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f000 f814 	bl	800e1e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e1c0:	2204      	movs	r2, #4
 800e1c2:	4908      	ldr	r1, [pc, #32]	; (800e1e4 <Get_SerialNum+0x54>)
 800e1c4:	68b8      	ldr	r0, [r7, #8]
 800e1c6:	f000 f80f 	bl	800e1e8 <IntToUnicode>
  }
}
 800e1ca:	bf00      	nop
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	1fff7a10 	.word	0x1fff7a10
 800e1d8:	1fff7a14 	.word	0x1fff7a14
 800e1dc:	1fff7a18 	.word	0x1fff7a18
 800e1e0:	200000f6 	.word	0x200000f6
 800e1e4:	20000106 	.word	0x20000106

0800e1e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b087      	sub	sp, #28
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	75fb      	strb	r3, [r7, #23]
 800e1fe:	e027      	b.n	800e250 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	0f1b      	lsrs	r3, r3, #28
 800e204:	2b09      	cmp	r3, #9
 800e206:	d80b      	bhi.n	800e220 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	0f1b      	lsrs	r3, r3, #28
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	7dfb      	ldrb	r3, [r7, #23]
 800e210:	005b      	lsls	r3, r3, #1
 800e212:	4619      	mov	r1, r3
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	440b      	add	r3, r1
 800e218:	3230      	adds	r2, #48	; 0x30
 800e21a:	b2d2      	uxtb	r2, r2
 800e21c:	701a      	strb	r2, [r3, #0]
 800e21e:	e00a      	b.n	800e236 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	0f1b      	lsrs	r3, r3, #28
 800e224:	b2da      	uxtb	r2, r3
 800e226:	7dfb      	ldrb	r3, [r7, #23]
 800e228:	005b      	lsls	r3, r3, #1
 800e22a:	4619      	mov	r1, r3
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	440b      	add	r3, r1
 800e230:	3237      	adds	r2, #55	; 0x37
 800e232:	b2d2      	uxtb	r2, r2
 800e234:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	011b      	lsls	r3, r3, #4
 800e23a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
 800e23e:	005b      	lsls	r3, r3, #1
 800e240:	3301      	adds	r3, #1
 800e242:	68ba      	ldr	r2, [r7, #8]
 800e244:	4413      	add	r3, r2
 800e246:	2200      	movs	r2, #0
 800e248:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
 800e24c:	3301      	adds	r3, #1
 800e24e:	75fb      	strb	r3, [r7, #23]
 800e250:	7dfa      	ldrb	r2, [r7, #23]
 800e252:	79fb      	ldrb	r3, [r7, #7]
 800e254:	429a      	cmp	r2, r3
 800e256:	d3d3      	bcc.n	800e200 <IntToUnicode+0x18>
  }
}
 800e258:	bf00      	nop
 800e25a:	bf00      	nop
 800e25c:	371c      	adds	r7, #28
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr
	...

0800e268 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b08a      	sub	sp, #40	; 0x28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e270:	f107 0314 	add.w	r3, r7, #20
 800e274:	2200      	movs	r2, #0
 800e276:	601a      	str	r2, [r3, #0]
 800e278:	605a      	str	r2, [r3, #4]
 800e27a:	609a      	str	r2, [r3, #8]
 800e27c:	60da      	str	r2, [r3, #12]
 800e27e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e288:	d13a      	bne.n	800e300 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e28a:	2300      	movs	r3, #0
 800e28c:	613b      	str	r3, [r7, #16]
 800e28e:	4b1e      	ldr	r3, [pc, #120]	; (800e308 <HAL_PCD_MspInit+0xa0>)
 800e290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e292:	4a1d      	ldr	r2, [pc, #116]	; (800e308 <HAL_PCD_MspInit+0xa0>)
 800e294:	f043 0301 	orr.w	r3, r3, #1
 800e298:	6313      	str	r3, [r2, #48]	; 0x30
 800e29a:	4b1b      	ldr	r3, [pc, #108]	; (800e308 <HAL_PCD_MspInit+0xa0>)
 800e29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e29e:	f003 0301 	and.w	r3, r3, #1
 800e2a2:	613b      	str	r3, [r7, #16]
 800e2a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800e2a6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800e2aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2ac:	2302      	movs	r3, #2
 800e2ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2b4:	2303      	movs	r3, #3
 800e2b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e2b8:	230a      	movs	r3, #10
 800e2ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2bc:	f107 0314 	add.w	r3, r7, #20
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	4812      	ldr	r0, [pc, #72]	; (800e30c <HAL_PCD_MspInit+0xa4>)
 800e2c4:	f7f6 fa24 	bl	8004710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e2c8:	4b0f      	ldr	r3, [pc, #60]	; (800e308 <HAL_PCD_MspInit+0xa0>)
 800e2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2cc:	4a0e      	ldr	r2, [pc, #56]	; (800e308 <HAL_PCD_MspInit+0xa0>)
 800e2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2d2:	6353      	str	r3, [r2, #52]	; 0x34
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	4b0b      	ldr	r3, [pc, #44]	; (800e308 <HAL_PCD_MspInit+0xa0>)
 800e2da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2dc:	4a0a      	ldr	r2, [pc, #40]	; (800e308 <HAL_PCD_MspInit+0xa0>)
 800e2de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2e2:	6453      	str	r3, [r2, #68]	; 0x44
 800e2e4:	4b08      	ldr	r3, [pc, #32]	; (800e308 <HAL_PCD_MspInit+0xa0>)
 800e2e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2ec:	60fb      	str	r3, [r7, #12]
 800e2ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	2043      	movs	r0, #67	; 0x43
 800e2f6:	f7f6 f9a4 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e2fa:	2043      	movs	r0, #67	; 0x43
 800e2fc:	f7f6 f9bd 	bl	800467a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e300:	bf00      	nop
 800e302:	3728      	adds	r7, #40	; 0x28
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	40023800 	.word	0x40023800
 800e30c:	40020000 	.word	0x40020000

0800e310 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e324:	4619      	mov	r1, r3
 800e326:	4610      	mov	r0, r2
 800e328:	f7fe fb4d 	bl	800c9c6 <USBD_LL_SetupStage>
}
 800e32c:	bf00      	nop
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	460b      	mov	r3, r1
 800e33e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e346:	78fa      	ldrb	r2, [r7, #3]
 800e348:	6879      	ldr	r1, [r7, #4]
 800e34a:	4613      	mov	r3, r2
 800e34c:	00db      	lsls	r3, r3, #3
 800e34e:	4413      	add	r3, r2
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	440b      	add	r3, r1
 800e354:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	78fb      	ldrb	r3, [r7, #3]
 800e35c:	4619      	mov	r1, r3
 800e35e:	f7fe fb87 	bl	800ca70 <USBD_LL_DataOutStage>
}
 800e362:	bf00      	nop
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b082      	sub	sp, #8
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	460b      	mov	r3, r1
 800e374:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e37c:	78fa      	ldrb	r2, [r7, #3]
 800e37e:	6879      	ldr	r1, [r7, #4]
 800e380:	4613      	mov	r3, r2
 800e382:	00db      	lsls	r3, r3, #3
 800e384:	4413      	add	r3, r2
 800e386:	009b      	lsls	r3, r3, #2
 800e388:	440b      	add	r3, r1
 800e38a:	334c      	adds	r3, #76	; 0x4c
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	78fb      	ldrb	r3, [r7, #3]
 800e390:	4619      	mov	r1, r3
 800e392:	f7fe fc20 	bl	800cbd6 <USBD_LL_DataInStage>
}
 800e396:	bf00      	nop
 800e398:	3708      	adds	r7, #8
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b082      	sub	sp, #8
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fe fd54 	bl	800ce5a <USBD_LL_SOF>
}
 800e3b2:	bf00      	nop
 800e3b4:	3708      	adds	r7, #8
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d102      	bne.n	800e3d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	73fb      	strb	r3, [r7, #15]
 800e3d2:	e008      	b.n	800e3e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	2b02      	cmp	r3, #2
 800e3da:	d102      	bne.n	800e3e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	73fb      	strb	r3, [r7, #15]
 800e3e0:	e001      	b.n	800e3e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e3e2:	f7f5 fbe1 	bl	8003ba8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3ec:	7bfa      	ldrb	r2, [r7, #15]
 800e3ee:	4611      	mov	r1, r2
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fe fcf4 	bl	800cdde <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7fe fc9c 	bl	800cd3a <USBD_LL_Reset>
}
 800e402:	bf00      	nop
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
	...

0800e40c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7fe fcef 	bl	800cdfe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	6812      	ldr	r2, [r2, #0]
 800e42e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e432:	f043 0301 	orr.w	r3, r3, #1
 800e436:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6a1b      	ldr	r3, [r3, #32]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d005      	beq.n	800e44c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e440:	4b04      	ldr	r3, [pc, #16]	; (800e454 <HAL_PCD_SuspendCallback+0x48>)
 800e442:	691b      	ldr	r3, [r3, #16]
 800e444:	4a03      	ldr	r2, [pc, #12]	; (800e454 <HAL_PCD_SuspendCallback+0x48>)
 800e446:	f043 0306 	orr.w	r3, r3, #6
 800e44a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e44c:	bf00      	nop
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	e000ed00 	.word	0xe000ed00

0800e458 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e466:	4618      	mov	r0, r3
 800e468:	f7fe fcdf 	bl	800ce2a <USBD_LL_Resume>
}
 800e46c:	bf00      	nop
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	460b      	mov	r3, r1
 800e47e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e486:	78fa      	ldrb	r2, [r7, #3]
 800e488:	4611      	mov	r1, r2
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fe fd37 	bl	800cefe <USBD_LL_IsoOUTIncomplete>
}
 800e490:	bf00      	nop
 800e492:	3708      	adds	r7, #8
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4aa:	78fa      	ldrb	r2, [r7, #3]
 800e4ac:	4611      	mov	r1, r2
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fe fcf3 	bl	800ce9a <USBD_LL_IsoINIncomplete>
}
 800e4b4:	bf00      	nop
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fe fd49 	bl	800cf62 <USBD_LL_DevConnected>
}
 800e4d0:	bf00      	nop
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fe fd46 	bl	800cf78 <USBD_LL_DevDisconnected>
}
 800e4ec:	bf00      	nop
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d13c      	bne.n	800e57e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e504:	4a20      	ldr	r2, [pc, #128]	; (800e588 <USBD_LL_Init+0x94>)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4a1e      	ldr	r2, [pc, #120]	; (800e588 <USBD_LL_Init+0x94>)
 800e510:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e514:	4b1c      	ldr	r3, [pc, #112]	; (800e588 <USBD_LL_Init+0x94>)
 800e516:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e51a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e51c:	4b1a      	ldr	r3, [pc, #104]	; (800e588 <USBD_LL_Init+0x94>)
 800e51e:	2204      	movs	r2, #4
 800e520:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e522:	4b19      	ldr	r3, [pc, #100]	; (800e588 <USBD_LL_Init+0x94>)
 800e524:	2202      	movs	r2, #2
 800e526:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e528:	4b17      	ldr	r3, [pc, #92]	; (800e588 <USBD_LL_Init+0x94>)
 800e52a:	2200      	movs	r2, #0
 800e52c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e52e:	4b16      	ldr	r3, [pc, #88]	; (800e588 <USBD_LL_Init+0x94>)
 800e530:	2202      	movs	r2, #2
 800e532:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e534:	4b14      	ldr	r3, [pc, #80]	; (800e588 <USBD_LL_Init+0x94>)
 800e536:	2201      	movs	r2, #1
 800e538:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e53a:	4b13      	ldr	r3, [pc, #76]	; (800e588 <USBD_LL_Init+0x94>)
 800e53c:	2200      	movs	r2, #0
 800e53e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e540:	4b11      	ldr	r3, [pc, #68]	; (800e588 <USBD_LL_Init+0x94>)
 800e542:	2200      	movs	r2, #0
 800e544:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e546:	4b10      	ldr	r3, [pc, #64]	; (800e588 <USBD_LL_Init+0x94>)
 800e548:	2200      	movs	r2, #0
 800e54a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e54c:	4b0e      	ldr	r3, [pc, #56]	; (800e588 <USBD_LL_Init+0x94>)
 800e54e:	2200      	movs	r2, #0
 800e550:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e552:	480d      	ldr	r0, [pc, #52]	; (800e588 <USBD_LL_Init+0x94>)
 800e554:	f7f8 ff8d 	bl	8007472 <HAL_PCD_Init>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d001      	beq.n	800e562 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e55e:	f7f5 fb23 	bl	8003ba8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e562:	2180      	movs	r1, #128	; 0x80
 800e564:	4808      	ldr	r0, [pc, #32]	; (800e588 <USBD_LL_Init+0x94>)
 800e566:	f7fa f9e4 	bl	8008932 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e56a:	2240      	movs	r2, #64	; 0x40
 800e56c:	2100      	movs	r1, #0
 800e56e:	4806      	ldr	r0, [pc, #24]	; (800e588 <USBD_LL_Init+0x94>)
 800e570:	f7fa f998 	bl	80088a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e574:	2280      	movs	r2, #128	; 0x80
 800e576:	2101      	movs	r1, #1
 800e578:	4803      	ldr	r0, [pc, #12]	; (800e588 <USBD_LL_Init+0x94>)
 800e57a:	f7fa f993 	bl	80088a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	20002a14 	.word	0x20002a14

0800e58c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e594:	2300      	movs	r3, #0
 800e596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e598:	2300      	movs	r3, #0
 800e59a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7f9 f882 	bl	80076ac <HAL_PCD_Start>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5ac:	7bfb      	ldrb	r3, [r7, #15]
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f000 f942 	bl	800e838 <USBD_Get_USB_Status>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b084      	sub	sp, #16
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
 800e5ca:	4608      	mov	r0, r1
 800e5cc:	4611      	mov	r1, r2
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	70fb      	strb	r3, [r7, #3]
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	70bb      	strb	r3, [r7, #2]
 800e5d8:	4613      	mov	r3, r2
 800e5da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e5ea:	78bb      	ldrb	r3, [r7, #2]
 800e5ec:	883a      	ldrh	r2, [r7, #0]
 800e5ee:	78f9      	ldrb	r1, [r7, #3]
 800e5f0:	f7f9 fd53 	bl	800809a <HAL_PCD_EP_Open>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f000 f91c 	bl	800e838 <USBD_Get_USB_Status>
 800e600:	4603      	mov	r3, r0
 800e602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e604:	7bbb      	ldrb	r3, [r7, #14]
}
 800e606:	4618      	mov	r0, r3
 800e608:	3710      	adds	r7, #16
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}

0800e60e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e60e:	b580      	push	{r7, lr}
 800e610:	b084      	sub	sp, #16
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
 800e616:	460b      	mov	r3, r1
 800e618:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e61a:	2300      	movs	r3, #0
 800e61c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e61e:	2300      	movs	r3, #0
 800e620:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e628:	78fa      	ldrb	r2, [r7, #3]
 800e62a:	4611      	mov	r1, r2
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7f9 fd9c 	bl	800816a <HAL_PCD_EP_Close>
 800e632:	4603      	mov	r3, r0
 800e634:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e636:	7bfb      	ldrb	r3, [r7, #15]
 800e638:	4618      	mov	r0, r3
 800e63a:	f000 f8fd 	bl	800e838 <USBD_Get_USB_Status>
 800e63e:	4603      	mov	r3, r0
 800e640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e642:	7bbb      	ldrb	r3, [r7, #14]
}
 800e644:	4618      	mov	r0, r3
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	460b      	mov	r3, r1
 800e656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e658:	2300      	movs	r3, #0
 800e65a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e65c:	2300      	movs	r3, #0
 800e65e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e666:	78fa      	ldrb	r2, [r7, #3]
 800e668:	4611      	mov	r1, r2
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7f9 fe74 	bl	8008358 <HAL_PCD_EP_SetStall>
 800e670:	4603      	mov	r3, r0
 800e672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e674:	7bfb      	ldrb	r3, [r7, #15]
 800e676:	4618      	mov	r0, r3
 800e678:	f000 f8de 	bl	800e838 <USBD_Get_USB_Status>
 800e67c:	4603      	mov	r3, r0
 800e67e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e680:	7bbb      	ldrb	r3, [r7, #14]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b084      	sub	sp, #16
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
 800e692:	460b      	mov	r3, r1
 800e694:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e696:	2300      	movs	r3, #0
 800e698:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e69a:	2300      	movs	r3, #0
 800e69c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6a4:	78fa      	ldrb	r2, [r7, #3]
 800e6a6:	4611      	mov	r1, r2
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7f9 feb9 	bl	8008420 <HAL_PCD_EP_ClrStall>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6b2:	7bfb      	ldrb	r3, [r7, #15]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f000 f8bf 	bl	800e838 <USBD_Get_USB_Status>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6be:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b085      	sub	sp, #20
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e6dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	da0b      	bge.n	800e6fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e6e4:	78fb      	ldrb	r3, [r7, #3]
 800e6e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6ea:	68f9      	ldr	r1, [r7, #12]
 800e6ec:	4613      	mov	r3, r2
 800e6ee:	00db      	lsls	r3, r3, #3
 800e6f0:	4413      	add	r3, r2
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	440b      	add	r3, r1
 800e6f6:	333e      	adds	r3, #62	; 0x3e
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	e00b      	b.n	800e714 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e6fc:	78fb      	ldrb	r3, [r7, #3]
 800e6fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e702:	68f9      	ldr	r1, [r7, #12]
 800e704:	4613      	mov	r3, r2
 800e706:	00db      	lsls	r3, r3, #3
 800e708:	4413      	add	r3, r2
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	440b      	add	r3, r1
 800e70e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e712:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e714:	4618      	mov	r0, r3
 800e716:	3714      	adds	r7, #20
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	460b      	mov	r3, r1
 800e72a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e72c:	2300      	movs	r3, #0
 800e72e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e730:	2300      	movs	r3, #0
 800e732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e73a:	78fa      	ldrb	r2, [r7, #3]
 800e73c:	4611      	mov	r1, r2
 800e73e:	4618      	mov	r0, r3
 800e740:	f7f9 fc86 	bl	8008050 <HAL_PCD_SetAddress>
 800e744:	4603      	mov	r3, r0
 800e746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e748:	7bfb      	ldrb	r3, [r7, #15]
 800e74a:	4618      	mov	r0, r3
 800e74c:	f000 f874 	bl	800e838 <USBD_Get_USB_Status>
 800e750:	4603      	mov	r3, r0
 800e752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e754:	7bbb      	ldrb	r3, [r7, #14]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b086      	sub	sp, #24
 800e762:	af00      	add	r7, sp, #0
 800e764:	60f8      	str	r0, [r7, #12]
 800e766:	607a      	str	r2, [r7, #4]
 800e768:	603b      	str	r3, [r7, #0]
 800e76a:	460b      	mov	r3, r1
 800e76c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e76e:	2300      	movs	r3, #0
 800e770:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e772:	2300      	movs	r3, #0
 800e774:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e77c:	7af9      	ldrb	r1, [r7, #11]
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	f7f9 fd9f 	bl	80082c4 <HAL_PCD_EP_Transmit>
 800e786:	4603      	mov	r3, r0
 800e788:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e78a:	7dfb      	ldrb	r3, [r7, #23]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 f853 	bl	800e838 <USBD_Get_USB_Status>
 800e792:	4603      	mov	r3, r0
 800e794:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e796:	7dbb      	ldrb	r3, [r7, #22]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3718      	adds	r7, #24
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b086      	sub	sp, #24
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	607a      	str	r2, [r7, #4]
 800e7aa:	603b      	str	r3, [r7, #0]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e7be:	7af9      	ldrb	r1, [r7, #11]
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	f7f9 fd1b 	bl	80081fe <HAL_PCD_EP_Receive>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7cc:	7dfb      	ldrb	r3, [r7, #23]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f000 f832 	bl	800e838 <USBD_Get_USB_Status>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e7d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3718      	adds	r7, #24
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b082      	sub	sp, #8
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7f4:	78fa      	ldrb	r2, [r7, #3]
 800e7f6:	4611      	mov	r1, r2
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7f9 fd4b 	bl	8008294 <HAL_PCD_EP_GetRxCount>
 800e7fe:	4603      	mov	r3, r0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3708      	adds	r7, #8
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e810:	4b03      	ldr	r3, [pc, #12]	; (800e820 <USBD_static_malloc+0x18>)
}
 800e812:	4618      	mov	r0, r3
 800e814:	370c      	adds	r7, #12
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr
 800e81e:	bf00      	nop
 800e820:	20002f20 	.word	0x20002f20

0800e824 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]

}
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e838:	b480      	push	{r7}
 800e83a:	b085      	sub	sp, #20
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	4603      	mov	r3, r0
 800e840:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e842:	2300      	movs	r3, #0
 800e844:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e846:	79fb      	ldrb	r3, [r7, #7]
 800e848:	2b03      	cmp	r3, #3
 800e84a:	d817      	bhi.n	800e87c <USBD_Get_USB_Status+0x44>
 800e84c:	a201      	add	r2, pc, #4	; (adr r2, 800e854 <USBD_Get_USB_Status+0x1c>)
 800e84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e852:	bf00      	nop
 800e854:	0800e865 	.word	0x0800e865
 800e858:	0800e86b 	.word	0x0800e86b
 800e85c:	0800e871 	.word	0x0800e871
 800e860:	0800e877 	.word	0x0800e877
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e864:	2300      	movs	r3, #0
 800e866:	73fb      	strb	r3, [r7, #15]
    break;
 800e868:	e00b      	b.n	800e882 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e86a:	2303      	movs	r3, #3
 800e86c:	73fb      	strb	r3, [r7, #15]
    break;
 800e86e:	e008      	b.n	800e882 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e870:	2301      	movs	r3, #1
 800e872:	73fb      	strb	r3, [r7, #15]
    break;
 800e874:	e005      	b.n	800e882 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e876:	2303      	movs	r3, #3
 800e878:	73fb      	strb	r3, [r7, #15]
    break;
 800e87a:	e002      	b.n	800e882 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e87c:	2303      	movs	r3, #3
 800e87e:	73fb      	strb	r3, [r7, #15]
    break;
 800e880:	bf00      	nop
  }
  return usb_status;
 800e882:	7bfb      	ldrb	r3, [r7, #15]
}
 800e884:	4618      	mov	r0, r3
 800e886:	3714      	adds	r7, #20
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <__errno>:
 800e890:	4b01      	ldr	r3, [pc, #4]	; (800e898 <__errno+0x8>)
 800e892:	6818      	ldr	r0, [r3, #0]
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop
 800e898:	20000110 	.word	0x20000110

0800e89c <__libc_init_array>:
 800e89c:	b570      	push	{r4, r5, r6, lr}
 800e89e:	4d0d      	ldr	r5, [pc, #52]	; (800e8d4 <__libc_init_array+0x38>)
 800e8a0:	4c0d      	ldr	r4, [pc, #52]	; (800e8d8 <__libc_init_array+0x3c>)
 800e8a2:	1b64      	subs	r4, r4, r5
 800e8a4:	10a4      	asrs	r4, r4, #2
 800e8a6:	2600      	movs	r6, #0
 800e8a8:	42a6      	cmp	r6, r4
 800e8aa:	d109      	bne.n	800e8c0 <__libc_init_array+0x24>
 800e8ac:	4d0b      	ldr	r5, [pc, #44]	; (800e8dc <__libc_init_array+0x40>)
 800e8ae:	4c0c      	ldr	r4, [pc, #48]	; (800e8e0 <__libc_init_array+0x44>)
 800e8b0:	f005 f9a2 	bl	8013bf8 <_init>
 800e8b4:	1b64      	subs	r4, r4, r5
 800e8b6:	10a4      	asrs	r4, r4, #2
 800e8b8:	2600      	movs	r6, #0
 800e8ba:	42a6      	cmp	r6, r4
 800e8bc:	d105      	bne.n	800e8ca <__libc_init_array+0x2e>
 800e8be:	bd70      	pop	{r4, r5, r6, pc}
 800e8c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8c4:	4798      	blx	r3
 800e8c6:	3601      	adds	r6, #1
 800e8c8:	e7ee      	b.n	800e8a8 <__libc_init_array+0xc>
 800e8ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8ce:	4798      	blx	r3
 800e8d0:	3601      	adds	r6, #1
 800e8d2:	e7f2      	b.n	800e8ba <__libc_init_array+0x1e>
 800e8d4:	08014de4 	.word	0x08014de4
 800e8d8:	08014de4 	.word	0x08014de4
 800e8dc:	08014de4 	.word	0x08014de4
 800e8e0:	08014de8 	.word	0x08014de8

0800e8e4 <memcpy>:
 800e8e4:	440a      	add	r2, r1
 800e8e6:	4291      	cmp	r1, r2
 800e8e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8ec:	d100      	bne.n	800e8f0 <memcpy+0xc>
 800e8ee:	4770      	bx	lr
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8fa:	4291      	cmp	r1, r2
 800e8fc:	d1f9      	bne.n	800e8f2 <memcpy+0xe>
 800e8fe:	bd10      	pop	{r4, pc}

0800e900 <memmove>:
 800e900:	4288      	cmp	r0, r1
 800e902:	b510      	push	{r4, lr}
 800e904:	eb01 0402 	add.w	r4, r1, r2
 800e908:	d902      	bls.n	800e910 <memmove+0x10>
 800e90a:	4284      	cmp	r4, r0
 800e90c:	4623      	mov	r3, r4
 800e90e:	d807      	bhi.n	800e920 <memmove+0x20>
 800e910:	1e43      	subs	r3, r0, #1
 800e912:	42a1      	cmp	r1, r4
 800e914:	d008      	beq.n	800e928 <memmove+0x28>
 800e916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e91a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e91e:	e7f8      	b.n	800e912 <memmove+0x12>
 800e920:	4402      	add	r2, r0
 800e922:	4601      	mov	r1, r0
 800e924:	428a      	cmp	r2, r1
 800e926:	d100      	bne.n	800e92a <memmove+0x2a>
 800e928:	bd10      	pop	{r4, pc}
 800e92a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e92e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e932:	e7f7      	b.n	800e924 <memmove+0x24>

0800e934 <memset>:
 800e934:	4402      	add	r2, r0
 800e936:	4603      	mov	r3, r0
 800e938:	4293      	cmp	r3, r2
 800e93a:	d100      	bne.n	800e93e <memset+0xa>
 800e93c:	4770      	bx	lr
 800e93e:	f803 1b01 	strb.w	r1, [r3], #1
 800e942:	e7f9      	b.n	800e938 <memset+0x4>

0800e944 <__cvt>:
 800e944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e948:	ec55 4b10 	vmov	r4, r5, d0
 800e94c:	2d00      	cmp	r5, #0
 800e94e:	460e      	mov	r6, r1
 800e950:	4619      	mov	r1, r3
 800e952:	462b      	mov	r3, r5
 800e954:	bfbb      	ittet	lt
 800e956:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e95a:	461d      	movlt	r5, r3
 800e95c:	2300      	movge	r3, #0
 800e95e:	232d      	movlt	r3, #45	; 0x2d
 800e960:	700b      	strb	r3, [r1, #0]
 800e962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e964:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e968:	4691      	mov	r9, r2
 800e96a:	f023 0820 	bic.w	r8, r3, #32
 800e96e:	bfbc      	itt	lt
 800e970:	4622      	movlt	r2, r4
 800e972:	4614      	movlt	r4, r2
 800e974:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e978:	d005      	beq.n	800e986 <__cvt+0x42>
 800e97a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e97e:	d100      	bne.n	800e982 <__cvt+0x3e>
 800e980:	3601      	adds	r6, #1
 800e982:	2102      	movs	r1, #2
 800e984:	e000      	b.n	800e988 <__cvt+0x44>
 800e986:	2103      	movs	r1, #3
 800e988:	ab03      	add	r3, sp, #12
 800e98a:	9301      	str	r3, [sp, #4]
 800e98c:	ab02      	add	r3, sp, #8
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	ec45 4b10 	vmov	d0, r4, r5
 800e994:	4653      	mov	r3, sl
 800e996:	4632      	mov	r2, r6
 800e998:	f001 ffda 	bl	8010950 <_dtoa_r>
 800e99c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e9a0:	4607      	mov	r7, r0
 800e9a2:	d102      	bne.n	800e9aa <__cvt+0x66>
 800e9a4:	f019 0f01 	tst.w	r9, #1
 800e9a8:	d022      	beq.n	800e9f0 <__cvt+0xac>
 800e9aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e9ae:	eb07 0906 	add.w	r9, r7, r6
 800e9b2:	d110      	bne.n	800e9d6 <__cvt+0x92>
 800e9b4:	783b      	ldrb	r3, [r7, #0]
 800e9b6:	2b30      	cmp	r3, #48	; 0x30
 800e9b8:	d10a      	bne.n	800e9d0 <__cvt+0x8c>
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	2300      	movs	r3, #0
 800e9be:	4620      	mov	r0, r4
 800e9c0:	4629      	mov	r1, r5
 800e9c2:	f7f2 f8a1 	bl	8000b08 <__aeabi_dcmpeq>
 800e9c6:	b918      	cbnz	r0, 800e9d0 <__cvt+0x8c>
 800e9c8:	f1c6 0601 	rsb	r6, r6, #1
 800e9cc:	f8ca 6000 	str.w	r6, [sl]
 800e9d0:	f8da 3000 	ldr.w	r3, [sl]
 800e9d4:	4499      	add	r9, r3
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	2300      	movs	r3, #0
 800e9da:	4620      	mov	r0, r4
 800e9dc:	4629      	mov	r1, r5
 800e9de:	f7f2 f893 	bl	8000b08 <__aeabi_dcmpeq>
 800e9e2:	b108      	cbz	r0, 800e9e8 <__cvt+0xa4>
 800e9e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e9e8:	2230      	movs	r2, #48	; 0x30
 800e9ea:	9b03      	ldr	r3, [sp, #12]
 800e9ec:	454b      	cmp	r3, r9
 800e9ee:	d307      	bcc.n	800ea00 <__cvt+0xbc>
 800e9f0:	9b03      	ldr	r3, [sp, #12]
 800e9f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9f4:	1bdb      	subs	r3, r3, r7
 800e9f6:	4638      	mov	r0, r7
 800e9f8:	6013      	str	r3, [r2, #0]
 800e9fa:	b004      	add	sp, #16
 800e9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea00:	1c59      	adds	r1, r3, #1
 800ea02:	9103      	str	r1, [sp, #12]
 800ea04:	701a      	strb	r2, [r3, #0]
 800ea06:	e7f0      	b.n	800e9ea <__cvt+0xa6>

0800ea08 <__exponent>:
 800ea08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2900      	cmp	r1, #0
 800ea0e:	bfb8      	it	lt
 800ea10:	4249      	neglt	r1, r1
 800ea12:	f803 2b02 	strb.w	r2, [r3], #2
 800ea16:	bfb4      	ite	lt
 800ea18:	222d      	movlt	r2, #45	; 0x2d
 800ea1a:	222b      	movge	r2, #43	; 0x2b
 800ea1c:	2909      	cmp	r1, #9
 800ea1e:	7042      	strb	r2, [r0, #1]
 800ea20:	dd2a      	ble.n	800ea78 <__exponent+0x70>
 800ea22:	f10d 0407 	add.w	r4, sp, #7
 800ea26:	46a4      	mov	ip, r4
 800ea28:	270a      	movs	r7, #10
 800ea2a:	46a6      	mov	lr, r4
 800ea2c:	460a      	mov	r2, r1
 800ea2e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ea32:	fb07 1516 	mls	r5, r7, r6, r1
 800ea36:	3530      	adds	r5, #48	; 0x30
 800ea38:	2a63      	cmp	r2, #99	; 0x63
 800ea3a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ea3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ea42:	4631      	mov	r1, r6
 800ea44:	dcf1      	bgt.n	800ea2a <__exponent+0x22>
 800ea46:	3130      	adds	r1, #48	; 0x30
 800ea48:	f1ae 0502 	sub.w	r5, lr, #2
 800ea4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ea50:	1c44      	adds	r4, r0, #1
 800ea52:	4629      	mov	r1, r5
 800ea54:	4561      	cmp	r1, ip
 800ea56:	d30a      	bcc.n	800ea6e <__exponent+0x66>
 800ea58:	f10d 0209 	add.w	r2, sp, #9
 800ea5c:	eba2 020e 	sub.w	r2, r2, lr
 800ea60:	4565      	cmp	r5, ip
 800ea62:	bf88      	it	hi
 800ea64:	2200      	movhi	r2, #0
 800ea66:	4413      	add	r3, r2
 800ea68:	1a18      	subs	r0, r3, r0
 800ea6a:	b003      	add	sp, #12
 800ea6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea72:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ea76:	e7ed      	b.n	800ea54 <__exponent+0x4c>
 800ea78:	2330      	movs	r3, #48	; 0x30
 800ea7a:	3130      	adds	r1, #48	; 0x30
 800ea7c:	7083      	strb	r3, [r0, #2]
 800ea7e:	70c1      	strb	r1, [r0, #3]
 800ea80:	1d03      	adds	r3, r0, #4
 800ea82:	e7f1      	b.n	800ea68 <__exponent+0x60>

0800ea84 <_printf_float>:
 800ea84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea88:	ed2d 8b02 	vpush	{d8}
 800ea8c:	b08d      	sub	sp, #52	; 0x34
 800ea8e:	460c      	mov	r4, r1
 800ea90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ea94:	4616      	mov	r6, r2
 800ea96:	461f      	mov	r7, r3
 800ea98:	4605      	mov	r5, r0
 800ea9a:	f003 fa6d 	bl	8011f78 <_localeconv_r>
 800ea9e:	f8d0 a000 	ldr.w	sl, [r0]
 800eaa2:	4650      	mov	r0, sl
 800eaa4:	f7f1 fbae 	bl	8000204 <strlen>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	930a      	str	r3, [sp, #40]	; 0x28
 800eaac:	6823      	ldr	r3, [r4, #0]
 800eaae:	9305      	str	r3, [sp, #20]
 800eab0:	f8d8 3000 	ldr.w	r3, [r8]
 800eab4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eab8:	3307      	adds	r3, #7
 800eaba:	f023 0307 	bic.w	r3, r3, #7
 800eabe:	f103 0208 	add.w	r2, r3, #8
 800eac2:	f8c8 2000 	str.w	r2, [r8]
 800eac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800eace:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ead2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ead6:	9307      	str	r3, [sp, #28]
 800ead8:	f8cd 8018 	str.w	r8, [sp, #24]
 800eadc:	ee08 0a10 	vmov	s16, r0
 800eae0:	4b9f      	ldr	r3, [pc, #636]	; (800ed60 <_printf_float+0x2dc>)
 800eae2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eae6:	f04f 32ff 	mov.w	r2, #4294967295
 800eaea:	f7f2 f83f 	bl	8000b6c <__aeabi_dcmpun>
 800eaee:	bb88      	cbnz	r0, 800eb54 <_printf_float+0xd0>
 800eaf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eaf4:	4b9a      	ldr	r3, [pc, #616]	; (800ed60 <_printf_float+0x2dc>)
 800eaf6:	f04f 32ff 	mov.w	r2, #4294967295
 800eafa:	f7f2 f819 	bl	8000b30 <__aeabi_dcmple>
 800eafe:	bb48      	cbnz	r0, 800eb54 <_printf_float+0xd0>
 800eb00:	2200      	movs	r2, #0
 800eb02:	2300      	movs	r3, #0
 800eb04:	4640      	mov	r0, r8
 800eb06:	4649      	mov	r1, r9
 800eb08:	f7f2 f808 	bl	8000b1c <__aeabi_dcmplt>
 800eb0c:	b110      	cbz	r0, 800eb14 <_printf_float+0x90>
 800eb0e:	232d      	movs	r3, #45	; 0x2d
 800eb10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb14:	4b93      	ldr	r3, [pc, #588]	; (800ed64 <_printf_float+0x2e0>)
 800eb16:	4894      	ldr	r0, [pc, #592]	; (800ed68 <_printf_float+0x2e4>)
 800eb18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eb1c:	bf94      	ite	ls
 800eb1e:	4698      	movls	r8, r3
 800eb20:	4680      	movhi	r8, r0
 800eb22:	2303      	movs	r3, #3
 800eb24:	6123      	str	r3, [r4, #16]
 800eb26:	9b05      	ldr	r3, [sp, #20]
 800eb28:	f023 0204 	bic.w	r2, r3, #4
 800eb2c:	6022      	str	r2, [r4, #0]
 800eb2e:	f04f 0900 	mov.w	r9, #0
 800eb32:	9700      	str	r7, [sp, #0]
 800eb34:	4633      	mov	r3, r6
 800eb36:	aa0b      	add	r2, sp, #44	; 0x2c
 800eb38:	4621      	mov	r1, r4
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f000 f9d8 	bl	800eef0 <_printf_common>
 800eb40:	3001      	adds	r0, #1
 800eb42:	f040 8090 	bne.w	800ec66 <_printf_float+0x1e2>
 800eb46:	f04f 30ff 	mov.w	r0, #4294967295
 800eb4a:	b00d      	add	sp, #52	; 0x34
 800eb4c:	ecbd 8b02 	vpop	{d8}
 800eb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb54:	4642      	mov	r2, r8
 800eb56:	464b      	mov	r3, r9
 800eb58:	4640      	mov	r0, r8
 800eb5a:	4649      	mov	r1, r9
 800eb5c:	f7f2 f806 	bl	8000b6c <__aeabi_dcmpun>
 800eb60:	b140      	cbz	r0, 800eb74 <_printf_float+0xf0>
 800eb62:	464b      	mov	r3, r9
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	bfbc      	itt	lt
 800eb68:	232d      	movlt	r3, #45	; 0x2d
 800eb6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eb6e:	487f      	ldr	r0, [pc, #508]	; (800ed6c <_printf_float+0x2e8>)
 800eb70:	4b7f      	ldr	r3, [pc, #508]	; (800ed70 <_printf_float+0x2ec>)
 800eb72:	e7d1      	b.n	800eb18 <_printf_float+0x94>
 800eb74:	6863      	ldr	r3, [r4, #4]
 800eb76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eb7a:	9206      	str	r2, [sp, #24]
 800eb7c:	1c5a      	adds	r2, r3, #1
 800eb7e:	d13f      	bne.n	800ec00 <_printf_float+0x17c>
 800eb80:	2306      	movs	r3, #6
 800eb82:	6063      	str	r3, [r4, #4]
 800eb84:	9b05      	ldr	r3, [sp, #20]
 800eb86:	6861      	ldr	r1, [r4, #4]
 800eb88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	9303      	str	r3, [sp, #12]
 800eb90:	ab0a      	add	r3, sp, #40	; 0x28
 800eb92:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eb96:	ab09      	add	r3, sp, #36	; 0x24
 800eb98:	ec49 8b10 	vmov	d0, r8, r9
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	6022      	str	r2, [r4, #0]
 800eba0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eba4:	4628      	mov	r0, r5
 800eba6:	f7ff fecd 	bl	800e944 <__cvt>
 800ebaa:	9b06      	ldr	r3, [sp, #24]
 800ebac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebae:	2b47      	cmp	r3, #71	; 0x47
 800ebb0:	4680      	mov	r8, r0
 800ebb2:	d108      	bne.n	800ebc6 <_printf_float+0x142>
 800ebb4:	1cc8      	adds	r0, r1, #3
 800ebb6:	db02      	blt.n	800ebbe <_printf_float+0x13a>
 800ebb8:	6863      	ldr	r3, [r4, #4]
 800ebba:	4299      	cmp	r1, r3
 800ebbc:	dd41      	ble.n	800ec42 <_printf_float+0x1be>
 800ebbe:	f1ab 0b02 	sub.w	fp, fp, #2
 800ebc2:	fa5f fb8b 	uxtb.w	fp, fp
 800ebc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ebca:	d820      	bhi.n	800ec0e <_printf_float+0x18a>
 800ebcc:	3901      	subs	r1, #1
 800ebce:	465a      	mov	r2, fp
 800ebd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ebd4:	9109      	str	r1, [sp, #36]	; 0x24
 800ebd6:	f7ff ff17 	bl	800ea08 <__exponent>
 800ebda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebdc:	1813      	adds	r3, r2, r0
 800ebde:	2a01      	cmp	r2, #1
 800ebe0:	4681      	mov	r9, r0
 800ebe2:	6123      	str	r3, [r4, #16]
 800ebe4:	dc02      	bgt.n	800ebec <_printf_float+0x168>
 800ebe6:	6822      	ldr	r2, [r4, #0]
 800ebe8:	07d2      	lsls	r2, r2, #31
 800ebea:	d501      	bpl.n	800ebf0 <_printf_float+0x16c>
 800ebec:	3301      	adds	r3, #1
 800ebee:	6123      	str	r3, [r4, #16]
 800ebf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d09c      	beq.n	800eb32 <_printf_float+0xae>
 800ebf8:	232d      	movs	r3, #45	; 0x2d
 800ebfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebfe:	e798      	b.n	800eb32 <_printf_float+0xae>
 800ec00:	9a06      	ldr	r2, [sp, #24]
 800ec02:	2a47      	cmp	r2, #71	; 0x47
 800ec04:	d1be      	bne.n	800eb84 <_printf_float+0x100>
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d1bc      	bne.n	800eb84 <_printf_float+0x100>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e7b9      	b.n	800eb82 <_printf_float+0xfe>
 800ec0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ec12:	d118      	bne.n	800ec46 <_printf_float+0x1c2>
 800ec14:	2900      	cmp	r1, #0
 800ec16:	6863      	ldr	r3, [r4, #4]
 800ec18:	dd0b      	ble.n	800ec32 <_printf_float+0x1ae>
 800ec1a:	6121      	str	r1, [r4, #16]
 800ec1c:	b913      	cbnz	r3, 800ec24 <_printf_float+0x1a0>
 800ec1e:	6822      	ldr	r2, [r4, #0]
 800ec20:	07d0      	lsls	r0, r2, #31
 800ec22:	d502      	bpl.n	800ec2a <_printf_float+0x1a6>
 800ec24:	3301      	adds	r3, #1
 800ec26:	440b      	add	r3, r1
 800ec28:	6123      	str	r3, [r4, #16]
 800ec2a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ec2c:	f04f 0900 	mov.w	r9, #0
 800ec30:	e7de      	b.n	800ebf0 <_printf_float+0x16c>
 800ec32:	b913      	cbnz	r3, 800ec3a <_printf_float+0x1b6>
 800ec34:	6822      	ldr	r2, [r4, #0]
 800ec36:	07d2      	lsls	r2, r2, #31
 800ec38:	d501      	bpl.n	800ec3e <_printf_float+0x1ba>
 800ec3a:	3302      	adds	r3, #2
 800ec3c:	e7f4      	b.n	800ec28 <_printf_float+0x1a4>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	e7f2      	b.n	800ec28 <_printf_float+0x1a4>
 800ec42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ec46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec48:	4299      	cmp	r1, r3
 800ec4a:	db05      	blt.n	800ec58 <_printf_float+0x1d4>
 800ec4c:	6823      	ldr	r3, [r4, #0]
 800ec4e:	6121      	str	r1, [r4, #16]
 800ec50:	07d8      	lsls	r0, r3, #31
 800ec52:	d5ea      	bpl.n	800ec2a <_printf_float+0x1a6>
 800ec54:	1c4b      	adds	r3, r1, #1
 800ec56:	e7e7      	b.n	800ec28 <_printf_float+0x1a4>
 800ec58:	2900      	cmp	r1, #0
 800ec5a:	bfd4      	ite	le
 800ec5c:	f1c1 0202 	rsble	r2, r1, #2
 800ec60:	2201      	movgt	r2, #1
 800ec62:	4413      	add	r3, r2
 800ec64:	e7e0      	b.n	800ec28 <_printf_float+0x1a4>
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	055a      	lsls	r2, r3, #21
 800ec6a:	d407      	bmi.n	800ec7c <_printf_float+0x1f8>
 800ec6c:	6923      	ldr	r3, [r4, #16]
 800ec6e:	4642      	mov	r2, r8
 800ec70:	4631      	mov	r1, r6
 800ec72:	4628      	mov	r0, r5
 800ec74:	47b8      	blx	r7
 800ec76:	3001      	adds	r0, #1
 800ec78:	d12c      	bne.n	800ecd4 <_printf_float+0x250>
 800ec7a:	e764      	b.n	800eb46 <_printf_float+0xc2>
 800ec7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec80:	f240 80e0 	bls.w	800ee44 <_printf_float+0x3c0>
 800ec84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec88:	2200      	movs	r2, #0
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	f7f1 ff3c 	bl	8000b08 <__aeabi_dcmpeq>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	d034      	beq.n	800ecfe <_printf_float+0x27a>
 800ec94:	4a37      	ldr	r2, [pc, #220]	; (800ed74 <_printf_float+0x2f0>)
 800ec96:	2301      	movs	r3, #1
 800ec98:	4631      	mov	r1, r6
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	47b8      	blx	r7
 800ec9e:	3001      	adds	r0, #1
 800eca0:	f43f af51 	beq.w	800eb46 <_printf_float+0xc2>
 800eca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	db02      	blt.n	800ecb2 <_printf_float+0x22e>
 800ecac:	6823      	ldr	r3, [r4, #0]
 800ecae:	07d8      	lsls	r0, r3, #31
 800ecb0:	d510      	bpl.n	800ecd4 <_printf_float+0x250>
 800ecb2:	ee18 3a10 	vmov	r3, s16
 800ecb6:	4652      	mov	r2, sl
 800ecb8:	4631      	mov	r1, r6
 800ecba:	4628      	mov	r0, r5
 800ecbc:	47b8      	blx	r7
 800ecbe:	3001      	adds	r0, #1
 800ecc0:	f43f af41 	beq.w	800eb46 <_printf_float+0xc2>
 800ecc4:	f04f 0800 	mov.w	r8, #0
 800ecc8:	f104 091a 	add.w	r9, r4, #26
 800eccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecce:	3b01      	subs	r3, #1
 800ecd0:	4543      	cmp	r3, r8
 800ecd2:	dc09      	bgt.n	800ece8 <_printf_float+0x264>
 800ecd4:	6823      	ldr	r3, [r4, #0]
 800ecd6:	079b      	lsls	r3, r3, #30
 800ecd8:	f100 8105 	bmi.w	800eee6 <_printf_float+0x462>
 800ecdc:	68e0      	ldr	r0, [r4, #12]
 800ecde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ece0:	4298      	cmp	r0, r3
 800ece2:	bfb8      	it	lt
 800ece4:	4618      	movlt	r0, r3
 800ece6:	e730      	b.n	800eb4a <_printf_float+0xc6>
 800ece8:	2301      	movs	r3, #1
 800ecea:	464a      	mov	r2, r9
 800ecec:	4631      	mov	r1, r6
 800ecee:	4628      	mov	r0, r5
 800ecf0:	47b8      	blx	r7
 800ecf2:	3001      	adds	r0, #1
 800ecf4:	f43f af27 	beq.w	800eb46 <_printf_float+0xc2>
 800ecf8:	f108 0801 	add.w	r8, r8, #1
 800ecfc:	e7e6      	b.n	800eccc <_printf_float+0x248>
 800ecfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	dc39      	bgt.n	800ed78 <_printf_float+0x2f4>
 800ed04:	4a1b      	ldr	r2, [pc, #108]	; (800ed74 <_printf_float+0x2f0>)
 800ed06:	2301      	movs	r3, #1
 800ed08:	4631      	mov	r1, r6
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	47b8      	blx	r7
 800ed0e:	3001      	adds	r0, #1
 800ed10:	f43f af19 	beq.w	800eb46 <_printf_float+0xc2>
 800ed14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed18:	4313      	orrs	r3, r2
 800ed1a:	d102      	bne.n	800ed22 <_printf_float+0x29e>
 800ed1c:	6823      	ldr	r3, [r4, #0]
 800ed1e:	07d9      	lsls	r1, r3, #31
 800ed20:	d5d8      	bpl.n	800ecd4 <_printf_float+0x250>
 800ed22:	ee18 3a10 	vmov	r3, s16
 800ed26:	4652      	mov	r2, sl
 800ed28:	4631      	mov	r1, r6
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	47b8      	blx	r7
 800ed2e:	3001      	adds	r0, #1
 800ed30:	f43f af09 	beq.w	800eb46 <_printf_float+0xc2>
 800ed34:	f04f 0900 	mov.w	r9, #0
 800ed38:	f104 0a1a 	add.w	sl, r4, #26
 800ed3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed3e:	425b      	negs	r3, r3
 800ed40:	454b      	cmp	r3, r9
 800ed42:	dc01      	bgt.n	800ed48 <_printf_float+0x2c4>
 800ed44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed46:	e792      	b.n	800ec6e <_printf_float+0x1ea>
 800ed48:	2301      	movs	r3, #1
 800ed4a:	4652      	mov	r2, sl
 800ed4c:	4631      	mov	r1, r6
 800ed4e:	4628      	mov	r0, r5
 800ed50:	47b8      	blx	r7
 800ed52:	3001      	adds	r0, #1
 800ed54:	f43f aef7 	beq.w	800eb46 <_printf_float+0xc2>
 800ed58:	f109 0901 	add.w	r9, r9, #1
 800ed5c:	e7ee      	b.n	800ed3c <_printf_float+0x2b8>
 800ed5e:	bf00      	nop
 800ed60:	7fefffff 	.word	0x7fefffff
 800ed64:	08014a28 	.word	0x08014a28
 800ed68:	08014a2c 	.word	0x08014a2c
 800ed6c:	08014a34 	.word	0x08014a34
 800ed70:	08014a30 	.word	0x08014a30
 800ed74:	08014d89 	.word	0x08014d89
 800ed78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	bfa8      	it	ge
 800ed80:	461a      	movge	r2, r3
 800ed82:	2a00      	cmp	r2, #0
 800ed84:	4691      	mov	r9, r2
 800ed86:	dc37      	bgt.n	800edf8 <_printf_float+0x374>
 800ed88:	f04f 0b00 	mov.w	fp, #0
 800ed8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed90:	f104 021a 	add.w	r2, r4, #26
 800ed94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed96:	9305      	str	r3, [sp, #20]
 800ed98:	eba3 0309 	sub.w	r3, r3, r9
 800ed9c:	455b      	cmp	r3, fp
 800ed9e:	dc33      	bgt.n	800ee08 <_printf_float+0x384>
 800eda0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eda4:	429a      	cmp	r2, r3
 800eda6:	db3b      	blt.n	800ee20 <_printf_float+0x39c>
 800eda8:	6823      	ldr	r3, [r4, #0]
 800edaa:	07da      	lsls	r2, r3, #31
 800edac:	d438      	bmi.n	800ee20 <_printf_float+0x39c>
 800edae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edb0:	9a05      	ldr	r2, [sp, #20]
 800edb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800edb4:	1a9a      	subs	r2, r3, r2
 800edb6:	eba3 0901 	sub.w	r9, r3, r1
 800edba:	4591      	cmp	r9, r2
 800edbc:	bfa8      	it	ge
 800edbe:	4691      	movge	r9, r2
 800edc0:	f1b9 0f00 	cmp.w	r9, #0
 800edc4:	dc35      	bgt.n	800ee32 <_printf_float+0x3ae>
 800edc6:	f04f 0800 	mov.w	r8, #0
 800edca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800edce:	f104 0a1a 	add.w	sl, r4, #26
 800edd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800edd6:	1a9b      	subs	r3, r3, r2
 800edd8:	eba3 0309 	sub.w	r3, r3, r9
 800eddc:	4543      	cmp	r3, r8
 800edde:	f77f af79 	ble.w	800ecd4 <_printf_float+0x250>
 800ede2:	2301      	movs	r3, #1
 800ede4:	4652      	mov	r2, sl
 800ede6:	4631      	mov	r1, r6
 800ede8:	4628      	mov	r0, r5
 800edea:	47b8      	blx	r7
 800edec:	3001      	adds	r0, #1
 800edee:	f43f aeaa 	beq.w	800eb46 <_printf_float+0xc2>
 800edf2:	f108 0801 	add.w	r8, r8, #1
 800edf6:	e7ec      	b.n	800edd2 <_printf_float+0x34e>
 800edf8:	4613      	mov	r3, r2
 800edfa:	4631      	mov	r1, r6
 800edfc:	4642      	mov	r2, r8
 800edfe:	4628      	mov	r0, r5
 800ee00:	47b8      	blx	r7
 800ee02:	3001      	adds	r0, #1
 800ee04:	d1c0      	bne.n	800ed88 <_printf_float+0x304>
 800ee06:	e69e      	b.n	800eb46 <_printf_float+0xc2>
 800ee08:	2301      	movs	r3, #1
 800ee0a:	4631      	mov	r1, r6
 800ee0c:	4628      	mov	r0, r5
 800ee0e:	9205      	str	r2, [sp, #20]
 800ee10:	47b8      	blx	r7
 800ee12:	3001      	adds	r0, #1
 800ee14:	f43f ae97 	beq.w	800eb46 <_printf_float+0xc2>
 800ee18:	9a05      	ldr	r2, [sp, #20]
 800ee1a:	f10b 0b01 	add.w	fp, fp, #1
 800ee1e:	e7b9      	b.n	800ed94 <_printf_float+0x310>
 800ee20:	ee18 3a10 	vmov	r3, s16
 800ee24:	4652      	mov	r2, sl
 800ee26:	4631      	mov	r1, r6
 800ee28:	4628      	mov	r0, r5
 800ee2a:	47b8      	blx	r7
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	d1be      	bne.n	800edae <_printf_float+0x32a>
 800ee30:	e689      	b.n	800eb46 <_printf_float+0xc2>
 800ee32:	9a05      	ldr	r2, [sp, #20]
 800ee34:	464b      	mov	r3, r9
 800ee36:	4442      	add	r2, r8
 800ee38:	4631      	mov	r1, r6
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	47b8      	blx	r7
 800ee3e:	3001      	adds	r0, #1
 800ee40:	d1c1      	bne.n	800edc6 <_printf_float+0x342>
 800ee42:	e680      	b.n	800eb46 <_printf_float+0xc2>
 800ee44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee46:	2a01      	cmp	r2, #1
 800ee48:	dc01      	bgt.n	800ee4e <_printf_float+0x3ca>
 800ee4a:	07db      	lsls	r3, r3, #31
 800ee4c:	d538      	bpl.n	800eec0 <_printf_float+0x43c>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	4642      	mov	r2, r8
 800ee52:	4631      	mov	r1, r6
 800ee54:	4628      	mov	r0, r5
 800ee56:	47b8      	blx	r7
 800ee58:	3001      	adds	r0, #1
 800ee5a:	f43f ae74 	beq.w	800eb46 <_printf_float+0xc2>
 800ee5e:	ee18 3a10 	vmov	r3, s16
 800ee62:	4652      	mov	r2, sl
 800ee64:	4631      	mov	r1, r6
 800ee66:	4628      	mov	r0, r5
 800ee68:	47b8      	blx	r7
 800ee6a:	3001      	adds	r0, #1
 800ee6c:	f43f ae6b 	beq.w	800eb46 <_printf_float+0xc2>
 800ee70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ee74:	2200      	movs	r2, #0
 800ee76:	2300      	movs	r3, #0
 800ee78:	f7f1 fe46 	bl	8000b08 <__aeabi_dcmpeq>
 800ee7c:	b9d8      	cbnz	r0, 800eeb6 <_printf_float+0x432>
 800ee7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee80:	f108 0201 	add.w	r2, r8, #1
 800ee84:	3b01      	subs	r3, #1
 800ee86:	4631      	mov	r1, r6
 800ee88:	4628      	mov	r0, r5
 800ee8a:	47b8      	blx	r7
 800ee8c:	3001      	adds	r0, #1
 800ee8e:	d10e      	bne.n	800eeae <_printf_float+0x42a>
 800ee90:	e659      	b.n	800eb46 <_printf_float+0xc2>
 800ee92:	2301      	movs	r3, #1
 800ee94:	4652      	mov	r2, sl
 800ee96:	4631      	mov	r1, r6
 800ee98:	4628      	mov	r0, r5
 800ee9a:	47b8      	blx	r7
 800ee9c:	3001      	adds	r0, #1
 800ee9e:	f43f ae52 	beq.w	800eb46 <_printf_float+0xc2>
 800eea2:	f108 0801 	add.w	r8, r8, #1
 800eea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	4543      	cmp	r3, r8
 800eeac:	dcf1      	bgt.n	800ee92 <_printf_float+0x40e>
 800eeae:	464b      	mov	r3, r9
 800eeb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eeb4:	e6dc      	b.n	800ec70 <_printf_float+0x1ec>
 800eeb6:	f04f 0800 	mov.w	r8, #0
 800eeba:	f104 0a1a 	add.w	sl, r4, #26
 800eebe:	e7f2      	b.n	800eea6 <_printf_float+0x422>
 800eec0:	2301      	movs	r3, #1
 800eec2:	4642      	mov	r2, r8
 800eec4:	e7df      	b.n	800ee86 <_printf_float+0x402>
 800eec6:	2301      	movs	r3, #1
 800eec8:	464a      	mov	r2, r9
 800eeca:	4631      	mov	r1, r6
 800eecc:	4628      	mov	r0, r5
 800eece:	47b8      	blx	r7
 800eed0:	3001      	adds	r0, #1
 800eed2:	f43f ae38 	beq.w	800eb46 <_printf_float+0xc2>
 800eed6:	f108 0801 	add.w	r8, r8, #1
 800eeda:	68e3      	ldr	r3, [r4, #12]
 800eedc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eede:	1a5b      	subs	r3, r3, r1
 800eee0:	4543      	cmp	r3, r8
 800eee2:	dcf0      	bgt.n	800eec6 <_printf_float+0x442>
 800eee4:	e6fa      	b.n	800ecdc <_printf_float+0x258>
 800eee6:	f04f 0800 	mov.w	r8, #0
 800eeea:	f104 0919 	add.w	r9, r4, #25
 800eeee:	e7f4      	b.n	800eeda <_printf_float+0x456>

0800eef0 <_printf_common>:
 800eef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eef4:	4616      	mov	r6, r2
 800eef6:	4699      	mov	r9, r3
 800eef8:	688a      	ldr	r2, [r1, #8]
 800eefa:	690b      	ldr	r3, [r1, #16]
 800eefc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef00:	4293      	cmp	r3, r2
 800ef02:	bfb8      	it	lt
 800ef04:	4613      	movlt	r3, r2
 800ef06:	6033      	str	r3, [r6, #0]
 800ef08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef0c:	4607      	mov	r7, r0
 800ef0e:	460c      	mov	r4, r1
 800ef10:	b10a      	cbz	r2, 800ef16 <_printf_common+0x26>
 800ef12:	3301      	adds	r3, #1
 800ef14:	6033      	str	r3, [r6, #0]
 800ef16:	6823      	ldr	r3, [r4, #0]
 800ef18:	0699      	lsls	r1, r3, #26
 800ef1a:	bf42      	ittt	mi
 800ef1c:	6833      	ldrmi	r3, [r6, #0]
 800ef1e:	3302      	addmi	r3, #2
 800ef20:	6033      	strmi	r3, [r6, #0]
 800ef22:	6825      	ldr	r5, [r4, #0]
 800ef24:	f015 0506 	ands.w	r5, r5, #6
 800ef28:	d106      	bne.n	800ef38 <_printf_common+0x48>
 800ef2a:	f104 0a19 	add.w	sl, r4, #25
 800ef2e:	68e3      	ldr	r3, [r4, #12]
 800ef30:	6832      	ldr	r2, [r6, #0]
 800ef32:	1a9b      	subs	r3, r3, r2
 800ef34:	42ab      	cmp	r3, r5
 800ef36:	dc26      	bgt.n	800ef86 <_printf_common+0x96>
 800ef38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef3c:	1e13      	subs	r3, r2, #0
 800ef3e:	6822      	ldr	r2, [r4, #0]
 800ef40:	bf18      	it	ne
 800ef42:	2301      	movne	r3, #1
 800ef44:	0692      	lsls	r2, r2, #26
 800ef46:	d42b      	bmi.n	800efa0 <_printf_common+0xb0>
 800ef48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef4c:	4649      	mov	r1, r9
 800ef4e:	4638      	mov	r0, r7
 800ef50:	47c0      	blx	r8
 800ef52:	3001      	adds	r0, #1
 800ef54:	d01e      	beq.n	800ef94 <_printf_common+0xa4>
 800ef56:	6823      	ldr	r3, [r4, #0]
 800ef58:	68e5      	ldr	r5, [r4, #12]
 800ef5a:	6832      	ldr	r2, [r6, #0]
 800ef5c:	f003 0306 	and.w	r3, r3, #6
 800ef60:	2b04      	cmp	r3, #4
 800ef62:	bf08      	it	eq
 800ef64:	1aad      	subeq	r5, r5, r2
 800ef66:	68a3      	ldr	r3, [r4, #8]
 800ef68:	6922      	ldr	r2, [r4, #16]
 800ef6a:	bf0c      	ite	eq
 800ef6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef70:	2500      	movne	r5, #0
 800ef72:	4293      	cmp	r3, r2
 800ef74:	bfc4      	itt	gt
 800ef76:	1a9b      	subgt	r3, r3, r2
 800ef78:	18ed      	addgt	r5, r5, r3
 800ef7a:	2600      	movs	r6, #0
 800ef7c:	341a      	adds	r4, #26
 800ef7e:	42b5      	cmp	r5, r6
 800ef80:	d11a      	bne.n	800efb8 <_printf_common+0xc8>
 800ef82:	2000      	movs	r0, #0
 800ef84:	e008      	b.n	800ef98 <_printf_common+0xa8>
 800ef86:	2301      	movs	r3, #1
 800ef88:	4652      	mov	r2, sl
 800ef8a:	4649      	mov	r1, r9
 800ef8c:	4638      	mov	r0, r7
 800ef8e:	47c0      	blx	r8
 800ef90:	3001      	adds	r0, #1
 800ef92:	d103      	bne.n	800ef9c <_printf_common+0xac>
 800ef94:	f04f 30ff 	mov.w	r0, #4294967295
 800ef98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef9c:	3501      	adds	r5, #1
 800ef9e:	e7c6      	b.n	800ef2e <_printf_common+0x3e>
 800efa0:	18e1      	adds	r1, r4, r3
 800efa2:	1c5a      	adds	r2, r3, #1
 800efa4:	2030      	movs	r0, #48	; 0x30
 800efa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efaa:	4422      	add	r2, r4
 800efac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efb4:	3302      	adds	r3, #2
 800efb6:	e7c7      	b.n	800ef48 <_printf_common+0x58>
 800efb8:	2301      	movs	r3, #1
 800efba:	4622      	mov	r2, r4
 800efbc:	4649      	mov	r1, r9
 800efbe:	4638      	mov	r0, r7
 800efc0:	47c0      	blx	r8
 800efc2:	3001      	adds	r0, #1
 800efc4:	d0e6      	beq.n	800ef94 <_printf_common+0xa4>
 800efc6:	3601      	adds	r6, #1
 800efc8:	e7d9      	b.n	800ef7e <_printf_common+0x8e>
	...

0800efcc <_printf_i>:
 800efcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efd0:	7e0f      	ldrb	r7, [r1, #24]
 800efd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800efd4:	2f78      	cmp	r7, #120	; 0x78
 800efd6:	4691      	mov	r9, r2
 800efd8:	4680      	mov	r8, r0
 800efda:	460c      	mov	r4, r1
 800efdc:	469a      	mov	sl, r3
 800efde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800efe2:	d807      	bhi.n	800eff4 <_printf_i+0x28>
 800efe4:	2f62      	cmp	r7, #98	; 0x62
 800efe6:	d80a      	bhi.n	800effe <_printf_i+0x32>
 800efe8:	2f00      	cmp	r7, #0
 800efea:	f000 80d8 	beq.w	800f19e <_printf_i+0x1d2>
 800efee:	2f58      	cmp	r7, #88	; 0x58
 800eff0:	f000 80a3 	beq.w	800f13a <_printf_i+0x16e>
 800eff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800effc:	e03a      	b.n	800f074 <_printf_i+0xa8>
 800effe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f002:	2b15      	cmp	r3, #21
 800f004:	d8f6      	bhi.n	800eff4 <_printf_i+0x28>
 800f006:	a101      	add	r1, pc, #4	; (adr r1, 800f00c <_printf_i+0x40>)
 800f008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f00c:	0800f065 	.word	0x0800f065
 800f010:	0800f079 	.word	0x0800f079
 800f014:	0800eff5 	.word	0x0800eff5
 800f018:	0800eff5 	.word	0x0800eff5
 800f01c:	0800eff5 	.word	0x0800eff5
 800f020:	0800eff5 	.word	0x0800eff5
 800f024:	0800f079 	.word	0x0800f079
 800f028:	0800eff5 	.word	0x0800eff5
 800f02c:	0800eff5 	.word	0x0800eff5
 800f030:	0800eff5 	.word	0x0800eff5
 800f034:	0800eff5 	.word	0x0800eff5
 800f038:	0800f185 	.word	0x0800f185
 800f03c:	0800f0a9 	.word	0x0800f0a9
 800f040:	0800f167 	.word	0x0800f167
 800f044:	0800eff5 	.word	0x0800eff5
 800f048:	0800eff5 	.word	0x0800eff5
 800f04c:	0800f1a7 	.word	0x0800f1a7
 800f050:	0800eff5 	.word	0x0800eff5
 800f054:	0800f0a9 	.word	0x0800f0a9
 800f058:	0800eff5 	.word	0x0800eff5
 800f05c:	0800eff5 	.word	0x0800eff5
 800f060:	0800f16f 	.word	0x0800f16f
 800f064:	682b      	ldr	r3, [r5, #0]
 800f066:	1d1a      	adds	r2, r3, #4
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	602a      	str	r2, [r5, #0]
 800f06c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f074:	2301      	movs	r3, #1
 800f076:	e0a3      	b.n	800f1c0 <_printf_i+0x1f4>
 800f078:	6820      	ldr	r0, [r4, #0]
 800f07a:	6829      	ldr	r1, [r5, #0]
 800f07c:	0606      	lsls	r6, r0, #24
 800f07e:	f101 0304 	add.w	r3, r1, #4
 800f082:	d50a      	bpl.n	800f09a <_printf_i+0xce>
 800f084:	680e      	ldr	r6, [r1, #0]
 800f086:	602b      	str	r3, [r5, #0]
 800f088:	2e00      	cmp	r6, #0
 800f08a:	da03      	bge.n	800f094 <_printf_i+0xc8>
 800f08c:	232d      	movs	r3, #45	; 0x2d
 800f08e:	4276      	negs	r6, r6
 800f090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f094:	485e      	ldr	r0, [pc, #376]	; (800f210 <_printf_i+0x244>)
 800f096:	230a      	movs	r3, #10
 800f098:	e019      	b.n	800f0ce <_printf_i+0x102>
 800f09a:	680e      	ldr	r6, [r1, #0]
 800f09c:	602b      	str	r3, [r5, #0]
 800f09e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f0a2:	bf18      	it	ne
 800f0a4:	b236      	sxthne	r6, r6
 800f0a6:	e7ef      	b.n	800f088 <_printf_i+0xbc>
 800f0a8:	682b      	ldr	r3, [r5, #0]
 800f0aa:	6820      	ldr	r0, [r4, #0]
 800f0ac:	1d19      	adds	r1, r3, #4
 800f0ae:	6029      	str	r1, [r5, #0]
 800f0b0:	0601      	lsls	r1, r0, #24
 800f0b2:	d501      	bpl.n	800f0b8 <_printf_i+0xec>
 800f0b4:	681e      	ldr	r6, [r3, #0]
 800f0b6:	e002      	b.n	800f0be <_printf_i+0xf2>
 800f0b8:	0646      	lsls	r6, r0, #25
 800f0ba:	d5fb      	bpl.n	800f0b4 <_printf_i+0xe8>
 800f0bc:	881e      	ldrh	r6, [r3, #0]
 800f0be:	4854      	ldr	r0, [pc, #336]	; (800f210 <_printf_i+0x244>)
 800f0c0:	2f6f      	cmp	r7, #111	; 0x6f
 800f0c2:	bf0c      	ite	eq
 800f0c4:	2308      	moveq	r3, #8
 800f0c6:	230a      	movne	r3, #10
 800f0c8:	2100      	movs	r1, #0
 800f0ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0ce:	6865      	ldr	r5, [r4, #4]
 800f0d0:	60a5      	str	r5, [r4, #8]
 800f0d2:	2d00      	cmp	r5, #0
 800f0d4:	bfa2      	ittt	ge
 800f0d6:	6821      	ldrge	r1, [r4, #0]
 800f0d8:	f021 0104 	bicge.w	r1, r1, #4
 800f0dc:	6021      	strge	r1, [r4, #0]
 800f0de:	b90e      	cbnz	r6, 800f0e4 <_printf_i+0x118>
 800f0e0:	2d00      	cmp	r5, #0
 800f0e2:	d04d      	beq.n	800f180 <_printf_i+0x1b4>
 800f0e4:	4615      	mov	r5, r2
 800f0e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f0ea:	fb03 6711 	mls	r7, r3, r1, r6
 800f0ee:	5dc7      	ldrb	r7, [r0, r7]
 800f0f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f0f4:	4637      	mov	r7, r6
 800f0f6:	42bb      	cmp	r3, r7
 800f0f8:	460e      	mov	r6, r1
 800f0fa:	d9f4      	bls.n	800f0e6 <_printf_i+0x11a>
 800f0fc:	2b08      	cmp	r3, #8
 800f0fe:	d10b      	bne.n	800f118 <_printf_i+0x14c>
 800f100:	6823      	ldr	r3, [r4, #0]
 800f102:	07de      	lsls	r6, r3, #31
 800f104:	d508      	bpl.n	800f118 <_printf_i+0x14c>
 800f106:	6923      	ldr	r3, [r4, #16]
 800f108:	6861      	ldr	r1, [r4, #4]
 800f10a:	4299      	cmp	r1, r3
 800f10c:	bfde      	ittt	le
 800f10e:	2330      	movle	r3, #48	; 0x30
 800f110:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f114:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f118:	1b52      	subs	r2, r2, r5
 800f11a:	6122      	str	r2, [r4, #16]
 800f11c:	f8cd a000 	str.w	sl, [sp]
 800f120:	464b      	mov	r3, r9
 800f122:	aa03      	add	r2, sp, #12
 800f124:	4621      	mov	r1, r4
 800f126:	4640      	mov	r0, r8
 800f128:	f7ff fee2 	bl	800eef0 <_printf_common>
 800f12c:	3001      	adds	r0, #1
 800f12e:	d14c      	bne.n	800f1ca <_printf_i+0x1fe>
 800f130:	f04f 30ff 	mov.w	r0, #4294967295
 800f134:	b004      	add	sp, #16
 800f136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f13a:	4835      	ldr	r0, [pc, #212]	; (800f210 <_printf_i+0x244>)
 800f13c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f140:	6829      	ldr	r1, [r5, #0]
 800f142:	6823      	ldr	r3, [r4, #0]
 800f144:	f851 6b04 	ldr.w	r6, [r1], #4
 800f148:	6029      	str	r1, [r5, #0]
 800f14a:	061d      	lsls	r5, r3, #24
 800f14c:	d514      	bpl.n	800f178 <_printf_i+0x1ac>
 800f14e:	07df      	lsls	r7, r3, #31
 800f150:	bf44      	itt	mi
 800f152:	f043 0320 	orrmi.w	r3, r3, #32
 800f156:	6023      	strmi	r3, [r4, #0]
 800f158:	b91e      	cbnz	r6, 800f162 <_printf_i+0x196>
 800f15a:	6823      	ldr	r3, [r4, #0]
 800f15c:	f023 0320 	bic.w	r3, r3, #32
 800f160:	6023      	str	r3, [r4, #0]
 800f162:	2310      	movs	r3, #16
 800f164:	e7b0      	b.n	800f0c8 <_printf_i+0xfc>
 800f166:	6823      	ldr	r3, [r4, #0]
 800f168:	f043 0320 	orr.w	r3, r3, #32
 800f16c:	6023      	str	r3, [r4, #0]
 800f16e:	2378      	movs	r3, #120	; 0x78
 800f170:	4828      	ldr	r0, [pc, #160]	; (800f214 <_printf_i+0x248>)
 800f172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f176:	e7e3      	b.n	800f140 <_printf_i+0x174>
 800f178:	0659      	lsls	r1, r3, #25
 800f17a:	bf48      	it	mi
 800f17c:	b2b6      	uxthmi	r6, r6
 800f17e:	e7e6      	b.n	800f14e <_printf_i+0x182>
 800f180:	4615      	mov	r5, r2
 800f182:	e7bb      	b.n	800f0fc <_printf_i+0x130>
 800f184:	682b      	ldr	r3, [r5, #0]
 800f186:	6826      	ldr	r6, [r4, #0]
 800f188:	6961      	ldr	r1, [r4, #20]
 800f18a:	1d18      	adds	r0, r3, #4
 800f18c:	6028      	str	r0, [r5, #0]
 800f18e:	0635      	lsls	r5, r6, #24
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	d501      	bpl.n	800f198 <_printf_i+0x1cc>
 800f194:	6019      	str	r1, [r3, #0]
 800f196:	e002      	b.n	800f19e <_printf_i+0x1d2>
 800f198:	0670      	lsls	r0, r6, #25
 800f19a:	d5fb      	bpl.n	800f194 <_printf_i+0x1c8>
 800f19c:	8019      	strh	r1, [r3, #0]
 800f19e:	2300      	movs	r3, #0
 800f1a0:	6123      	str	r3, [r4, #16]
 800f1a2:	4615      	mov	r5, r2
 800f1a4:	e7ba      	b.n	800f11c <_printf_i+0x150>
 800f1a6:	682b      	ldr	r3, [r5, #0]
 800f1a8:	1d1a      	adds	r2, r3, #4
 800f1aa:	602a      	str	r2, [r5, #0]
 800f1ac:	681d      	ldr	r5, [r3, #0]
 800f1ae:	6862      	ldr	r2, [r4, #4]
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	f7f1 f834 	bl	8000220 <memchr>
 800f1b8:	b108      	cbz	r0, 800f1be <_printf_i+0x1f2>
 800f1ba:	1b40      	subs	r0, r0, r5
 800f1bc:	6060      	str	r0, [r4, #4]
 800f1be:	6863      	ldr	r3, [r4, #4]
 800f1c0:	6123      	str	r3, [r4, #16]
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1c8:	e7a8      	b.n	800f11c <_printf_i+0x150>
 800f1ca:	6923      	ldr	r3, [r4, #16]
 800f1cc:	462a      	mov	r2, r5
 800f1ce:	4649      	mov	r1, r9
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	47d0      	blx	sl
 800f1d4:	3001      	adds	r0, #1
 800f1d6:	d0ab      	beq.n	800f130 <_printf_i+0x164>
 800f1d8:	6823      	ldr	r3, [r4, #0]
 800f1da:	079b      	lsls	r3, r3, #30
 800f1dc:	d413      	bmi.n	800f206 <_printf_i+0x23a>
 800f1de:	68e0      	ldr	r0, [r4, #12]
 800f1e0:	9b03      	ldr	r3, [sp, #12]
 800f1e2:	4298      	cmp	r0, r3
 800f1e4:	bfb8      	it	lt
 800f1e6:	4618      	movlt	r0, r3
 800f1e8:	e7a4      	b.n	800f134 <_printf_i+0x168>
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	4632      	mov	r2, r6
 800f1ee:	4649      	mov	r1, r9
 800f1f0:	4640      	mov	r0, r8
 800f1f2:	47d0      	blx	sl
 800f1f4:	3001      	adds	r0, #1
 800f1f6:	d09b      	beq.n	800f130 <_printf_i+0x164>
 800f1f8:	3501      	adds	r5, #1
 800f1fa:	68e3      	ldr	r3, [r4, #12]
 800f1fc:	9903      	ldr	r1, [sp, #12]
 800f1fe:	1a5b      	subs	r3, r3, r1
 800f200:	42ab      	cmp	r3, r5
 800f202:	dcf2      	bgt.n	800f1ea <_printf_i+0x21e>
 800f204:	e7eb      	b.n	800f1de <_printf_i+0x212>
 800f206:	2500      	movs	r5, #0
 800f208:	f104 0619 	add.w	r6, r4, #25
 800f20c:	e7f5      	b.n	800f1fa <_printf_i+0x22e>
 800f20e:	bf00      	nop
 800f210:	08014a38 	.word	0x08014a38
 800f214:	08014a49 	.word	0x08014a49

0800f218 <_scanf_float>:
 800f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f21c:	b087      	sub	sp, #28
 800f21e:	4617      	mov	r7, r2
 800f220:	9303      	str	r3, [sp, #12]
 800f222:	688b      	ldr	r3, [r1, #8]
 800f224:	1e5a      	subs	r2, r3, #1
 800f226:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f22a:	bf83      	ittte	hi
 800f22c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f230:	195b      	addhi	r3, r3, r5
 800f232:	9302      	strhi	r3, [sp, #8]
 800f234:	2300      	movls	r3, #0
 800f236:	bf86      	itte	hi
 800f238:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f23c:	608b      	strhi	r3, [r1, #8]
 800f23e:	9302      	strls	r3, [sp, #8]
 800f240:	680b      	ldr	r3, [r1, #0]
 800f242:	468b      	mov	fp, r1
 800f244:	2500      	movs	r5, #0
 800f246:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f24a:	f84b 3b1c 	str.w	r3, [fp], #28
 800f24e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f252:	4680      	mov	r8, r0
 800f254:	460c      	mov	r4, r1
 800f256:	465e      	mov	r6, fp
 800f258:	46aa      	mov	sl, r5
 800f25a:	46a9      	mov	r9, r5
 800f25c:	9501      	str	r5, [sp, #4]
 800f25e:	68a2      	ldr	r2, [r4, #8]
 800f260:	b152      	cbz	r2, 800f278 <_scanf_float+0x60>
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	2b4e      	cmp	r3, #78	; 0x4e
 800f268:	d864      	bhi.n	800f334 <_scanf_float+0x11c>
 800f26a:	2b40      	cmp	r3, #64	; 0x40
 800f26c:	d83c      	bhi.n	800f2e8 <_scanf_float+0xd0>
 800f26e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f272:	b2c8      	uxtb	r0, r1
 800f274:	280e      	cmp	r0, #14
 800f276:	d93a      	bls.n	800f2ee <_scanf_float+0xd6>
 800f278:	f1b9 0f00 	cmp.w	r9, #0
 800f27c:	d003      	beq.n	800f286 <_scanf_float+0x6e>
 800f27e:	6823      	ldr	r3, [r4, #0]
 800f280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f284:	6023      	str	r3, [r4, #0]
 800f286:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f28a:	f1ba 0f01 	cmp.w	sl, #1
 800f28e:	f200 8113 	bhi.w	800f4b8 <_scanf_float+0x2a0>
 800f292:	455e      	cmp	r6, fp
 800f294:	f200 8105 	bhi.w	800f4a2 <_scanf_float+0x28a>
 800f298:	2501      	movs	r5, #1
 800f29a:	4628      	mov	r0, r5
 800f29c:	b007      	add	sp, #28
 800f29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f2a6:	2a0d      	cmp	r2, #13
 800f2a8:	d8e6      	bhi.n	800f278 <_scanf_float+0x60>
 800f2aa:	a101      	add	r1, pc, #4	; (adr r1, 800f2b0 <_scanf_float+0x98>)
 800f2ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f2b0:	0800f3ef 	.word	0x0800f3ef
 800f2b4:	0800f279 	.word	0x0800f279
 800f2b8:	0800f279 	.word	0x0800f279
 800f2bc:	0800f279 	.word	0x0800f279
 800f2c0:	0800f44f 	.word	0x0800f44f
 800f2c4:	0800f427 	.word	0x0800f427
 800f2c8:	0800f279 	.word	0x0800f279
 800f2cc:	0800f279 	.word	0x0800f279
 800f2d0:	0800f3fd 	.word	0x0800f3fd
 800f2d4:	0800f279 	.word	0x0800f279
 800f2d8:	0800f279 	.word	0x0800f279
 800f2dc:	0800f279 	.word	0x0800f279
 800f2e0:	0800f279 	.word	0x0800f279
 800f2e4:	0800f3b5 	.word	0x0800f3b5
 800f2e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f2ec:	e7db      	b.n	800f2a6 <_scanf_float+0x8e>
 800f2ee:	290e      	cmp	r1, #14
 800f2f0:	d8c2      	bhi.n	800f278 <_scanf_float+0x60>
 800f2f2:	a001      	add	r0, pc, #4	; (adr r0, 800f2f8 <_scanf_float+0xe0>)
 800f2f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f2f8:	0800f3a7 	.word	0x0800f3a7
 800f2fc:	0800f279 	.word	0x0800f279
 800f300:	0800f3a7 	.word	0x0800f3a7
 800f304:	0800f43b 	.word	0x0800f43b
 800f308:	0800f279 	.word	0x0800f279
 800f30c:	0800f355 	.word	0x0800f355
 800f310:	0800f391 	.word	0x0800f391
 800f314:	0800f391 	.word	0x0800f391
 800f318:	0800f391 	.word	0x0800f391
 800f31c:	0800f391 	.word	0x0800f391
 800f320:	0800f391 	.word	0x0800f391
 800f324:	0800f391 	.word	0x0800f391
 800f328:	0800f391 	.word	0x0800f391
 800f32c:	0800f391 	.word	0x0800f391
 800f330:	0800f391 	.word	0x0800f391
 800f334:	2b6e      	cmp	r3, #110	; 0x6e
 800f336:	d809      	bhi.n	800f34c <_scanf_float+0x134>
 800f338:	2b60      	cmp	r3, #96	; 0x60
 800f33a:	d8b2      	bhi.n	800f2a2 <_scanf_float+0x8a>
 800f33c:	2b54      	cmp	r3, #84	; 0x54
 800f33e:	d077      	beq.n	800f430 <_scanf_float+0x218>
 800f340:	2b59      	cmp	r3, #89	; 0x59
 800f342:	d199      	bne.n	800f278 <_scanf_float+0x60>
 800f344:	2d07      	cmp	r5, #7
 800f346:	d197      	bne.n	800f278 <_scanf_float+0x60>
 800f348:	2508      	movs	r5, #8
 800f34a:	e029      	b.n	800f3a0 <_scanf_float+0x188>
 800f34c:	2b74      	cmp	r3, #116	; 0x74
 800f34e:	d06f      	beq.n	800f430 <_scanf_float+0x218>
 800f350:	2b79      	cmp	r3, #121	; 0x79
 800f352:	e7f6      	b.n	800f342 <_scanf_float+0x12a>
 800f354:	6821      	ldr	r1, [r4, #0]
 800f356:	05c8      	lsls	r0, r1, #23
 800f358:	d51a      	bpl.n	800f390 <_scanf_float+0x178>
 800f35a:	9b02      	ldr	r3, [sp, #8]
 800f35c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f360:	6021      	str	r1, [r4, #0]
 800f362:	f109 0901 	add.w	r9, r9, #1
 800f366:	b11b      	cbz	r3, 800f370 <_scanf_float+0x158>
 800f368:	3b01      	subs	r3, #1
 800f36a:	3201      	adds	r2, #1
 800f36c:	9302      	str	r3, [sp, #8]
 800f36e:	60a2      	str	r2, [r4, #8]
 800f370:	68a3      	ldr	r3, [r4, #8]
 800f372:	3b01      	subs	r3, #1
 800f374:	60a3      	str	r3, [r4, #8]
 800f376:	6923      	ldr	r3, [r4, #16]
 800f378:	3301      	adds	r3, #1
 800f37a:	6123      	str	r3, [r4, #16]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	3b01      	subs	r3, #1
 800f380:	2b00      	cmp	r3, #0
 800f382:	607b      	str	r3, [r7, #4]
 800f384:	f340 8084 	ble.w	800f490 <_scanf_float+0x278>
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	3301      	adds	r3, #1
 800f38c:	603b      	str	r3, [r7, #0]
 800f38e:	e766      	b.n	800f25e <_scanf_float+0x46>
 800f390:	eb1a 0f05 	cmn.w	sl, r5
 800f394:	f47f af70 	bne.w	800f278 <_scanf_float+0x60>
 800f398:	6822      	ldr	r2, [r4, #0]
 800f39a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f39e:	6022      	str	r2, [r4, #0]
 800f3a0:	f806 3b01 	strb.w	r3, [r6], #1
 800f3a4:	e7e4      	b.n	800f370 <_scanf_float+0x158>
 800f3a6:	6822      	ldr	r2, [r4, #0]
 800f3a8:	0610      	lsls	r0, r2, #24
 800f3aa:	f57f af65 	bpl.w	800f278 <_scanf_float+0x60>
 800f3ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3b2:	e7f4      	b.n	800f39e <_scanf_float+0x186>
 800f3b4:	f1ba 0f00 	cmp.w	sl, #0
 800f3b8:	d10e      	bne.n	800f3d8 <_scanf_float+0x1c0>
 800f3ba:	f1b9 0f00 	cmp.w	r9, #0
 800f3be:	d10e      	bne.n	800f3de <_scanf_float+0x1c6>
 800f3c0:	6822      	ldr	r2, [r4, #0]
 800f3c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f3c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f3ca:	d108      	bne.n	800f3de <_scanf_float+0x1c6>
 800f3cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f3d0:	6022      	str	r2, [r4, #0]
 800f3d2:	f04f 0a01 	mov.w	sl, #1
 800f3d6:	e7e3      	b.n	800f3a0 <_scanf_float+0x188>
 800f3d8:	f1ba 0f02 	cmp.w	sl, #2
 800f3dc:	d055      	beq.n	800f48a <_scanf_float+0x272>
 800f3de:	2d01      	cmp	r5, #1
 800f3e0:	d002      	beq.n	800f3e8 <_scanf_float+0x1d0>
 800f3e2:	2d04      	cmp	r5, #4
 800f3e4:	f47f af48 	bne.w	800f278 <_scanf_float+0x60>
 800f3e8:	3501      	adds	r5, #1
 800f3ea:	b2ed      	uxtb	r5, r5
 800f3ec:	e7d8      	b.n	800f3a0 <_scanf_float+0x188>
 800f3ee:	f1ba 0f01 	cmp.w	sl, #1
 800f3f2:	f47f af41 	bne.w	800f278 <_scanf_float+0x60>
 800f3f6:	f04f 0a02 	mov.w	sl, #2
 800f3fa:	e7d1      	b.n	800f3a0 <_scanf_float+0x188>
 800f3fc:	b97d      	cbnz	r5, 800f41e <_scanf_float+0x206>
 800f3fe:	f1b9 0f00 	cmp.w	r9, #0
 800f402:	f47f af3c 	bne.w	800f27e <_scanf_float+0x66>
 800f406:	6822      	ldr	r2, [r4, #0]
 800f408:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f40c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f410:	f47f af39 	bne.w	800f286 <_scanf_float+0x6e>
 800f414:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f418:	6022      	str	r2, [r4, #0]
 800f41a:	2501      	movs	r5, #1
 800f41c:	e7c0      	b.n	800f3a0 <_scanf_float+0x188>
 800f41e:	2d03      	cmp	r5, #3
 800f420:	d0e2      	beq.n	800f3e8 <_scanf_float+0x1d0>
 800f422:	2d05      	cmp	r5, #5
 800f424:	e7de      	b.n	800f3e4 <_scanf_float+0x1cc>
 800f426:	2d02      	cmp	r5, #2
 800f428:	f47f af26 	bne.w	800f278 <_scanf_float+0x60>
 800f42c:	2503      	movs	r5, #3
 800f42e:	e7b7      	b.n	800f3a0 <_scanf_float+0x188>
 800f430:	2d06      	cmp	r5, #6
 800f432:	f47f af21 	bne.w	800f278 <_scanf_float+0x60>
 800f436:	2507      	movs	r5, #7
 800f438:	e7b2      	b.n	800f3a0 <_scanf_float+0x188>
 800f43a:	6822      	ldr	r2, [r4, #0]
 800f43c:	0591      	lsls	r1, r2, #22
 800f43e:	f57f af1b 	bpl.w	800f278 <_scanf_float+0x60>
 800f442:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f446:	6022      	str	r2, [r4, #0]
 800f448:	f8cd 9004 	str.w	r9, [sp, #4]
 800f44c:	e7a8      	b.n	800f3a0 <_scanf_float+0x188>
 800f44e:	6822      	ldr	r2, [r4, #0]
 800f450:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f454:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f458:	d006      	beq.n	800f468 <_scanf_float+0x250>
 800f45a:	0550      	lsls	r0, r2, #21
 800f45c:	f57f af0c 	bpl.w	800f278 <_scanf_float+0x60>
 800f460:	f1b9 0f00 	cmp.w	r9, #0
 800f464:	f43f af0f 	beq.w	800f286 <_scanf_float+0x6e>
 800f468:	0591      	lsls	r1, r2, #22
 800f46a:	bf58      	it	pl
 800f46c:	9901      	ldrpl	r1, [sp, #4]
 800f46e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f472:	bf58      	it	pl
 800f474:	eba9 0101 	subpl.w	r1, r9, r1
 800f478:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f47c:	bf58      	it	pl
 800f47e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f482:	6022      	str	r2, [r4, #0]
 800f484:	f04f 0900 	mov.w	r9, #0
 800f488:	e78a      	b.n	800f3a0 <_scanf_float+0x188>
 800f48a:	f04f 0a03 	mov.w	sl, #3
 800f48e:	e787      	b.n	800f3a0 <_scanf_float+0x188>
 800f490:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f494:	4639      	mov	r1, r7
 800f496:	4640      	mov	r0, r8
 800f498:	4798      	blx	r3
 800f49a:	2800      	cmp	r0, #0
 800f49c:	f43f aedf 	beq.w	800f25e <_scanf_float+0x46>
 800f4a0:	e6ea      	b.n	800f278 <_scanf_float+0x60>
 800f4a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f4aa:	463a      	mov	r2, r7
 800f4ac:	4640      	mov	r0, r8
 800f4ae:	4798      	blx	r3
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	3b01      	subs	r3, #1
 800f4b4:	6123      	str	r3, [r4, #16]
 800f4b6:	e6ec      	b.n	800f292 <_scanf_float+0x7a>
 800f4b8:	1e6b      	subs	r3, r5, #1
 800f4ba:	2b06      	cmp	r3, #6
 800f4bc:	d825      	bhi.n	800f50a <_scanf_float+0x2f2>
 800f4be:	2d02      	cmp	r5, #2
 800f4c0:	d836      	bhi.n	800f530 <_scanf_float+0x318>
 800f4c2:	455e      	cmp	r6, fp
 800f4c4:	f67f aee8 	bls.w	800f298 <_scanf_float+0x80>
 800f4c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f4d0:	463a      	mov	r2, r7
 800f4d2:	4640      	mov	r0, r8
 800f4d4:	4798      	blx	r3
 800f4d6:	6923      	ldr	r3, [r4, #16]
 800f4d8:	3b01      	subs	r3, #1
 800f4da:	6123      	str	r3, [r4, #16]
 800f4dc:	e7f1      	b.n	800f4c2 <_scanf_float+0x2aa>
 800f4de:	9802      	ldr	r0, [sp, #8]
 800f4e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f4e8:	9002      	str	r0, [sp, #8]
 800f4ea:	463a      	mov	r2, r7
 800f4ec:	4640      	mov	r0, r8
 800f4ee:	4798      	blx	r3
 800f4f0:	6923      	ldr	r3, [r4, #16]
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	6123      	str	r3, [r4, #16]
 800f4f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f4fa:	fa5f fa8a 	uxtb.w	sl, sl
 800f4fe:	f1ba 0f02 	cmp.w	sl, #2
 800f502:	d1ec      	bne.n	800f4de <_scanf_float+0x2c6>
 800f504:	3d03      	subs	r5, #3
 800f506:	b2ed      	uxtb	r5, r5
 800f508:	1b76      	subs	r6, r6, r5
 800f50a:	6823      	ldr	r3, [r4, #0]
 800f50c:	05da      	lsls	r2, r3, #23
 800f50e:	d52f      	bpl.n	800f570 <_scanf_float+0x358>
 800f510:	055b      	lsls	r3, r3, #21
 800f512:	d510      	bpl.n	800f536 <_scanf_float+0x31e>
 800f514:	455e      	cmp	r6, fp
 800f516:	f67f aebf 	bls.w	800f298 <_scanf_float+0x80>
 800f51a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f51e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f522:	463a      	mov	r2, r7
 800f524:	4640      	mov	r0, r8
 800f526:	4798      	blx	r3
 800f528:	6923      	ldr	r3, [r4, #16]
 800f52a:	3b01      	subs	r3, #1
 800f52c:	6123      	str	r3, [r4, #16]
 800f52e:	e7f1      	b.n	800f514 <_scanf_float+0x2fc>
 800f530:	46aa      	mov	sl, r5
 800f532:	9602      	str	r6, [sp, #8]
 800f534:	e7df      	b.n	800f4f6 <_scanf_float+0x2de>
 800f536:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f53a:	6923      	ldr	r3, [r4, #16]
 800f53c:	2965      	cmp	r1, #101	; 0x65
 800f53e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f542:	f106 35ff 	add.w	r5, r6, #4294967295
 800f546:	6123      	str	r3, [r4, #16]
 800f548:	d00c      	beq.n	800f564 <_scanf_float+0x34c>
 800f54a:	2945      	cmp	r1, #69	; 0x45
 800f54c:	d00a      	beq.n	800f564 <_scanf_float+0x34c>
 800f54e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f552:	463a      	mov	r2, r7
 800f554:	4640      	mov	r0, r8
 800f556:	4798      	blx	r3
 800f558:	6923      	ldr	r3, [r4, #16]
 800f55a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f55e:	3b01      	subs	r3, #1
 800f560:	1eb5      	subs	r5, r6, #2
 800f562:	6123      	str	r3, [r4, #16]
 800f564:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f568:	463a      	mov	r2, r7
 800f56a:	4640      	mov	r0, r8
 800f56c:	4798      	blx	r3
 800f56e:	462e      	mov	r6, r5
 800f570:	6825      	ldr	r5, [r4, #0]
 800f572:	f015 0510 	ands.w	r5, r5, #16
 800f576:	d159      	bne.n	800f62c <_scanf_float+0x414>
 800f578:	7035      	strb	r5, [r6, #0]
 800f57a:	6823      	ldr	r3, [r4, #0]
 800f57c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f584:	d11b      	bne.n	800f5be <_scanf_float+0x3a6>
 800f586:	9b01      	ldr	r3, [sp, #4]
 800f588:	454b      	cmp	r3, r9
 800f58a:	eba3 0209 	sub.w	r2, r3, r9
 800f58e:	d123      	bne.n	800f5d8 <_scanf_float+0x3c0>
 800f590:	2200      	movs	r2, #0
 800f592:	4659      	mov	r1, fp
 800f594:	4640      	mov	r0, r8
 800f596:	f000 ffe1 	bl	801055c <_strtod_r>
 800f59a:	6822      	ldr	r2, [r4, #0]
 800f59c:	9b03      	ldr	r3, [sp, #12]
 800f59e:	f012 0f02 	tst.w	r2, #2
 800f5a2:	ec57 6b10 	vmov	r6, r7, d0
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	d021      	beq.n	800f5ee <_scanf_float+0x3d6>
 800f5aa:	9903      	ldr	r1, [sp, #12]
 800f5ac:	1d1a      	adds	r2, r3, #4
 800f5ae:	600a      	str	r2, [r1, #0]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	e9c3 6700 	strd	r6, r7, [r3]
 800f5b6:	68e3      	ldr	r3, [r4, #12]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	60e3      	str	r3, [r4, #12]
 800f5bc:	e66d      	b.n	800f29a <_scanf_float+0x82>
 800f5be:	9b04      	ldr	r3, [sp, #16]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d0e5      	beq.n	800f590 <_scanf_float+0x378>
 800f5c4:	9905      	ldr	r1, [sp, #20]
 800f5c6:	230a      	movs	r3, #10
 800f5c8:	462a      	mov	r2, r5
 800f5ca:	3101      	adds	r1, #1
 800f5cc:	4640      	mov	r0, r8
 800f5ce:	f001 f84d 	bl	801066c <_strtol_r>
 800f5d2:	9b04      	ldr	r3, [sp, #16]
 800f5d4:	9e05      	ldr	r6, [sp, #20]
 800f5d6:	1ac2      	subs	r2, r0, r3
 800f5d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f5dc:	429e      	cmp	r6, r3
 800f5de:	bf28      	it	cs
 800f5e0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f5e4:	4912      	ldr	r1, [pc, #72]	; (800f630 <_scanf_float+0x418>)
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	f000 f8ee 	bl	800f7c8 <siprintf>
 800f5ec:	e7d0      	b.n	800f590 <_scanf_float+0x378>
 800f5ee:	9903      	ldr	r1, [sp, #12]
 800f5f0:	f012 0f04 	tst.w	r2, #4
 800f5f4:	f103 0204 	add.w	r2, r3, #4
 800f5f8:	600a      	str	r2, [r1, #0]
 800f5fa:	d1d9      	bne.n	800f5b0 <_scanf_float+0x398>
 800f5fc:	f8d3 8000 	ldr.w	r8, [r3]
 800f600:	ee10 2a10 	vmov	r2, s0
 800f604:	ee10 0a10 	vmov	r0, s0
 800f608:	463b      	mov	r3, r7
 800f60a:	4639      	mov	r1, r7
 800f60c:	f7f1 faae 	bl	8000b6c <__aeabi_dcmpun>
 800f610:	b128      	cbz	r0, 800f61e <_scanf_float+0x406>
 800f612:	4808      	ldr	r0, [pc, #32]	; (800f634 <_scanf_float+0x41c>)
 800f614:	f000 f89e 	bl	800f754 <nanf>
 800f618:	ed88 0a00 	vstr	s0, [r8]
 800f61c:	e7cb      	b.n	800f5b6 <_scanf_float+0x39e>
 800f61e:	4630      	mov	r0, r6
 800f620:	4639      	mov	r1, r7
 800f622:	f7f1 fb01 	bl	8000c28 <__aeabi_d2f>
 800f626:	f8c8 0000 	str.w	r0, [r8]
 800f62a:	e7c4      	b.n	800f5b6 <_scanf_float+0x39e>
 800f62c:	2500      	movs	r5, #0
 800f62e:	e634      	b.n	800f29a <_scanf_float+0x82>
 800f630:	08014a5a 	.word	0x08014a5a
 800f634:	08014ddb 	.word	0x08014ddb

0800f638 <iprintf>:
 800f638:	b40f      	push	{r0, r1, r2, r3}
 800f63a:	4b0a      	ldr	r3, [pc, #40]	; (800f664 <iprintf+0x2c>)
 800f63c:	b513      	push	{r0, r1, r4, lr}
 800f63e:	681c      	ldr	r4, [r3, #0]
 800f640:	b124      	cbz	r4, 800f64c <iprintf+0x14>
 800f642:	69a3      	ldr	r3, [r4, #24]
 800f644:	b913      	cbnz	r3, 800f64c <iprintf+0x14>
 800f646:	4620      	mov	r0, r4
 800f648:	f002 f88a 	bl	8011760 <__sinit>
 800f64c:	ab05      	add	r3, sp, #20
 800f64e:	9a04      	ldr	r2, [sp, #16]
 800f650:	68a1      	ldr	r1, [r4, #8]
 800f652:	9301      	str	r3, [sp, #4]
 800f654:	4620      	mov	r0, r4
 800f656:	f003 fe39 	bl	80132cc <_vfiprintf_r>
 800f65a:	b002      	add	sp, #8
 800f65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f660:	b004      	add	sp, #16
 800f662:	4770      	bx	lr
 800f664:	20000110 	.word	0x20000110

0800f668 <_puts_r>:
 800f668:	b570      	push	{r4, r5, r6, lr}
 800f66a:	460e      	mov	r6, r1
 800f66c:	4605      	mov	r5, r0
 800f66e:	b118      	cbz	r0, 800f678 <_puts_r+0x10>
 800f670:	6983      	ldr	r3, [r0, #24]
 800f672:	b90b      	cbnz	r3, 800f678 <_puts_r+0x10>
 800f674:	f002 f874 	bl	8011760 <__sinit>
 800f678:	69ab      	ldr	r3, [r5, #24]
 800f67a:	68ac      	ldr	r4, [r5, #8]
 800f67c:	b913      	cbnz	r3, 800f684 <_puts_r+0x1c>
 800f67e:	4628      	mov	r0, r5
 800f680:	f002 f86e 	bl	8011760 <__sinit>
 800f684:	4b2c      	ldr	r3, [pc, #176]	; (800f738 <_puts_r+0xd0>)
 800f686:	429c      	cmp	r4, r3
 800f688:	d120      	bne.n	800f6cc <_puts_r+0x64>
 800f68a:	686c      	ldr	r4, [r5, #4]
 800f68c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f68e:	07db      	lsls	r3, r3, #31
 800f690:	d405      	bmi.n	800f69e <_puts_r+0x36>
 800f692:	89a3      	ldrh	r3, [r4, #12]
 800f694:	0598      	lsls	r0, r3, #22
 800f696:	d402      	bmi.n	800f69e <_puts_r+0x36>
 800f698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f69a:	f002 fc72 	bl	8011f82 <__retarget_lock_acquire_recursive>
 800f69e:	89a3      	ldrh	r3, [r4, #12]
 800f6a0:	0719      	lsls	r1, r3, #28
 800f6a2:	d51d      	bpl.n	800f6e0 <_puts_r+0x78>
 800f6a4:	6923      	ldr	r3, [r4, #16]
 800f6a6:	b1db      	cbz	r3, 800f6e0 <_puts_r+0x78>
 800f6a8:	3e01      	subs	r6, #1
 800f6aa:	68a3      	ldr	r3, [r4, #8]
 800f6ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f6b0:	3b01      	subs	r3, #1
 800f6b2:	60a3      	str	r3, [r4, #8]
 800f6b4:	bb39      	cbnz	r1, 800f706 <_puts_r+0x9e>
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	da38      	bge.n	800f72c <_puts_r+0xc4>
 800f6ba:	4622      	mov	r2, r4
 800f6bc:	210a      	movs	r1, #10
 800f6be:	4628      	mov	r0, r5
 800f6c0:	f000 ffd6 	bl	8010670 <__swbuf_r>
 800f6c4:	3001      	adds	r0, #1
 800f6c6:	d011      	beq.n	800f6ec <_puts_r+0x84>
 800f6c8:	250a      	movs	r5, #10
 800f6ca:	e011      	b.n	800f6f0 <_puts_r+0x88>
 800f6cc:	4b1b      	ldr	r3, [pc, #108]	; (800f73c <_puts_r+0xd4>)
 800f6ce:	429c      	cmp	r4, r3
 800f6d0:	d101      	bne.n	800f6d6 <_puts_r+0x6e>
 800f6d2:	68ac      	ldr	r4, [r5, #8]
 800f6d4:	e7da      	b.n	800f68c <_puts_r+0x24>
 800f6d6:	4b1a      	ldr	r3, [pc, #104]	; (800f740 <_puts_r+0xd8>)
 800f6d8:	429c      	cmp	r4, r3
 800f6da:	bf08      	it	eq
 800f6dc:	68ec      	ldreq	r4, [r5, #12]
 800f6de:	e7d5      	b.n	800f68c <_puts_r+0x24>
 800f6e0:	4621      	mov	r1, r4
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	f001 f828 	bl	8010738 <__swsetup_r>
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	d0dd      	beq.n	800f6a8 <_puts_r+0x40>
 800f6ec:	f04f 35ff 	mov.w	r5, #4294967295
 800f6f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6f2:	07da      	lsls	r2, r3, #31
 800f6f4:	d405      	bmi.n	800f702 <_puts_r+0x9a>
 800f6f6:	89a3      	ldrh	r3, [r4, #12]
 800f6f8:	059b      	lsls	r3, r3, #22
 800f6fa:	d402      	bmi.n	800f702 <_puts_r+0x9a>
 800f6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6fe:	f002 fc41 	bl	8011f84 <__retarget_lock_release_recursive>
 800f702:	4628      	mov	r0, r5
 800f704:	bd70      	pop	{r4, r5, r6, pc}
 800f706:	2b00      	cmp	r3, #0
 800f708:	da04      	bge.n	800f714 <_puts_r+0xac>
 800f70a:	69a2      	ldr	r2, [r4, #24]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	dc06      	bgt.n	800f71e <_puts_r+0xb6>
 800f710:	290a      	cmp	r1, #10
 800f712:	d004      	beq.n	800f71e <_puts_r+0xb6>
 800f714:	6823      	ldr	r3, [r4, #0]
 800f716:	1c5a      	adds	r2, r3, #1
 800f718:	6022      	str	r2, [r4, #0]
 800f71a:	7019      	strb	r1, [r3, #0]
 800f71c:	e7c5      	b.n	800f6aa <_puts_r+0x42>
 800f71e:	4622      	mov	r2, r4
 800f720:	4628      	mov	r0, r5
 800f722:	f000 ffa5 	bl	8010670 <__swbuf_r>
 800f726:	3001      	adds	r0, #1
 800f728:	d1bf      	bne.n	800f6aa <_puts_r+0x42>
 800f72a:	e7df      	b.n	800f6ec <_puts_r+0x84>
 800f72c:	6823      	ldr	r3, [r4, #0]
 800f72e:	250a      	movs	r5, #10
 800f730:	1c5a      	adds	r2, r3, #1
 800f732:	6022      	str	r2, [r4, #0]
 800f734:	701d      	strb	r5, [r3, #0]
 800f736:	e7db      	b.n	800f6f0 <_puts_r+0x88>
 800f738:	08014b60 	.word	0x08014b60
 800f73c:	08014b80 	.word	0x08014b80
 800f740:	08014b40 	.word	0x08014b40

0800f744 <puts>:
 800f744:	4b02      	ldr	r3, [pc, #8]	; (800f750 <puts+0xc>)
 800f746:	4601      	mov	r1, r0
 800f748:	6818      	ldr	r0, [r3, #0]
 800f74a:	f7ff bf8d 	b.w	800f668 <_puts_r>
 800f74e:	bf00      	nop
 800f750:	20000110 	.word	0x20000110

0800f754 <nanf>:
 800f754:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f75c <nanf+0x8>
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop
 800f75c:	7fc00000 	.word	0x7fc00000

0800f760 <sniprintf>:
 800f760:	b40c      	push	{r2, r3}
 800f762:	b530      	push	{r4, r5, lr}
 800f764:	4b17      	ldr	r3, [pc, #92]	; (800f7c4 <sniprintf+0x64>)
 800f766:	1e0c      	subs	r4, r1, #0
 800f768:	681d      	ldr	r5, [r3, #0]
 800f76a:	b09d      	sub	sp, #116	; 0x74
 800f76c:	da08      	bge.n	800f780 <sniprintf+0x20>
 800f76e:	238b      	movs	r3, #139	; 0x8b
 800f770:	602b      	str	r3, [r5, #0]
 800f772:	f04f 30ff 	mov.w	r0, #4294967295
 800f776:	b01d      	add	sp, #116	; 0x74
 800f778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f77c:	b002      	add	sp, #8
 800f77e:	4770      	bx	lr
 800f780:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f784:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f788:	bf14      	ite	ne
 800f78a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f78e:	4623      	moveq	r3, r4
 800f790:	9304      	str	r3, [sp, #16]
 800f792:	9307      	str	r3, [sp, #28]
 800f794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f798:	9002      	str	r0, [sp, #8]
 800f79a:	9006      	str	r0, [sp, #24]
 800f79c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f7a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f7a2:	ab21      	add	r3, sp, #132	; 0x84
 800f7a4:	a902      	add	r1, sp, #8
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	9301      	str	r3, [sp, #4]
 800f7aa:	f003 fa93 	bl	8012cd4 <_svfiprintf_r>
 800f7ae:	1c43      	adds	r3, r0, #1
 800f7b0:	bfbc      	itt	lt
 800f7b2:	238b      	movlt	r3, #139	; 0x8b
 800f7b4:	602b      	strlt	r3, [r5, #0]
 800f7b6:	2c00      	cmp	r4, #0
 800f7b8:	d0dd      	beq.n	800f776 <sniprintf+0x16>
 800f7ba:	9b02      	ldr	r3, [sp, #8]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	701a      	strb	r2, [r3, #0]
 800f7c0:	e7d9      	b.n	800f776 <sniprintf+0x16>
 800f7c2:	bf00      	nop
 800f7c4:	20000110 	.word	0x20000110

0800f7c8 <siprintf>:
 800f7c8:	b40e      	push	{r1, r2, r3}
 800f7ca:	b500      	push	{lr}
 800f7cc:	b09c      	sub	sp, #112	; 0x70
 800f7ce:	ab1d      	add	r3, sp, #116	; 0x74
 800f7d0:	9002      	str	r0, [sp, #8]
 800f7d2:	9006      	str	r0, [sp, #24]
 800f7d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f7d8:	4809      	ldr	r0, [pc, #36]	; (800f800 <siprintf+0x38>)
 800f7da:	9107      	str	r1, [sp, #28]
 800f7dc:	9104      	str	r1, [sp, #16]
 800f7de:	4909      	ldr	r1, [pc, #36]	; (800f804 <siprintf+0x3c>)
 800f7e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7e4:	9105      	str	r1, [sp, #20]
 800f7e6:	6800      	ldr	r0, [r0, #0]
 800f7e8:	9301      	str	r3, [sp, #4]
 800f7ea:	a902      	add	r1, sp, #8
 800f7ec:	f003 fa72 	bl	8012cd4 <_svfiprintf_r>
 800f7f0:	9b02      	ldr	r3, [sp, #8]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	701a      	strb	r2, [r3, #0]
 800f7f6:	b01c      	add	sp, #112	; 0x70
 800f7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7fc:	b003      	add	sp, #12
 800f7fe:	4770      	bx	lr
 800f800:	20000110 	.word	0x20000110
 800f804:	ffff0208 	.word	0xffff0208

0800f808 <siscanf>:
 800f808:	b40e      	push	{r1, r2, r3}
 800f80a:	b510      	push	{r4, lr}
 800f80c:	b09f      	sub	sp, #124	; 0x7c
 800f80e:	ac21      	add	r4, sp, #132	; 0x84
 800f810:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f814:	f854 2b04 	ldr.w	r2, [r4], #4
 800f818:	9201      	str	r2, [sp, #4]
 800f81a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f81e:	9004      	str	r0, [sp, #16]
 800f820:	9008      	str	r0, [sp, #32]
 800f822:	f7f0 fcef 	bl	8000204 <strlen>
 800f826:	4b0c      	ldr	r3, [pc, #48]	; (800f858 <siscanf+0x50>)
 800f828:	9005      	str	r0, [sp, #20]
 800f82a:	9009      	str	r0, [sp, #36]	; 0x24
 800f82c:	930d      	str	r3, [sp, #52]	; 0x34
 800f82e:	480b      	ldr	r0, [pc, #44]	; (800f85c <siscanf+0x54>)
 800f830:	9a01      	ldr	r2, [sp, #4]
 800f832:	6800      	ldr	r0, [r0, #0]
 800f834:	9403      	str	r4, [sp, #12]
 800f836:	2300      	movs	r3, #0
 800f838:	9311      	str	r3, [sp, #68]	; 0x44
 800f83a:	9316      	str	r3, [sp, #88]	; 0x58
 800f83c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f840:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f844:	a904      	add	r1, sp, #16
 800f846:	4623      	mov	r3, r4
 800f848:	f003 fb9e 	bl	8012f88 <__ssvfiscanf_r>
 800f84c:	b01f      	add	sp, #124	; 0x7c
 800f84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f852:	b003      	add	sp, #12
 800f854:	4770      	bx	lr
 800f856:	bf00      	nop
 800f858:	0800f883 	.word	0x0800f883
 800f85c:	20000110 	.word	0x20000110

0800f860 <__sread>:
 800f860:	b510      	push	{r4, lr}
 800f862:	460c      	mov	r4, r1
 800f864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f868:	f003 ffb2 	bl	80137d0 <_read_r>
 800f86c:	2800      	cmp	r0, #0
 800f86e:	bfab      	itete	ge
 800f870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f872:	89a3      	ldrhlt	r3, [r4, #12]
 800f874:	181b      	addge	r3, r3, r0
 800f876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f87a:	bfac      	ite	ge
 800f87c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f87e:	81a3      	strhlt	r3, [r4, #12]
 800f880:	bd10      	pop	{r4, pc}

0800f882 <__seofread>:
 800f882:	2000      	movs	r0, #0
 800f884:	4770      	bx	lr

0800f886 <__swrite>:
 800f886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f88a:	461f      	mov	r7, r3
 800f88c:	898b      	ldrh	r3, [r1, #12]
 800f88e:	05db      	lsls	r3, r3, #23
 800f890:	4605      	mov	r5, r0
 800f892:	460c      	mov	r4, r1
 800f894:	4616      	mov	r6, r2
 800f896:	d505      	bpl.n	800f8a4 <__swrite+0x1e>
 800f898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f89c:	2302      	movs	r3, #2
 800f89e:	2200      	movs	r2, #0
 800f8a0:	f002 fb72 	bl	8011f88 <_lseek_r>
 800f8a4:	89a3      	ldrh	r3, [r4, #12]
 800f8a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8ae:	81a3      	strh	r3, [r4, #12]
 800f8b0:	4632      	mov	r2, r6
 800f8b2:	463b      	mov	r3, r7
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ba:	f000 bf2b 	b.w	8010714 <_write_r>

0800f8be <__sseek>:
 800f8be:	b510      	push	{r4, lr}
 800f8c0:	460c      	mov	r4, r1
 800f8c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8c6:	f002 fb5f 	bl	8011f88 <_lseek_r>
 800f8ca:	1c43      	adds	r3, r0, #1
 800f8cc:	89a3      	ldrh	r3, [r4, #12]
 800f8ce:	bf15      	itete	ne
 800f8d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f8d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f8d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f8da:	81a3      	strheq	r3, [r4, #12]
 800f8dc:	bf18      	it	ne
 800f8de:	81a3      	strhne	r3, [r4, #12]
 800f8e0:	bd10      	pop	{r4, pc}

0800f8e2 <__sclose>:
 800f8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8e6:	f000 bf95 	b.w	8010814 <_close_r>

0800f8ea <strstr>:
 800f8ea:	780a      	ldrb	r2, [r1, #0]
 800f8ec:	b570      	push	{r4, r5, r6, lr}
 800f8ee:	b96a      	cbnz	r2, 800f90c <strstr+0x22>
 800f8f0:	bd70      	pop	{r4, r5, r6, pc}
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d109      	bne.n	800f90a <strstr+0x20>
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	4605      	mov	r5, r0
 800f8fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d0f6      	beq.n	800f8f0 <strstr+0x6>
 800f902:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f906:	429e      	cmp	r6, r3
 800f908:	d0f7      	beq.n	800f8fa <strstr+0x10>
 800f90a:	3001      	adds	r0, #1
 800f90c:	7803      	ldrb	r3, [r0, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d1ef      	bne.n	800f8f2 <strstr+0x8>
 800f912:	4618      	mov	r0, r3
 800f914:	e7ec      	b.n	800f8f0 <strstr+0x6>

0800f916 <sulp>:
 800f916:	b570      	push	{r4, r5, r6, lr}
 800f918:	4604      	mov	r4, r0
 800f91a:	460d      	mov	r5, r1
 800f91c:	ec45 4b10 	vmov	d0, r4, r5
 800f920:	4616      	mov	r6, r2
 800f922:	f002 ff35 	bl	8012790 <__ulp>
 800f926:	ec51 0b10 	vmov	r0, r1, d0
 800f92a:	b17e      	cbz	r6, 800f94c <sulp+0x36>
 800f92c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f930:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f934:	2b00      	cmp	r3, #0
 800f936:	dd09      	ble.n	800f94c <sulp+0x36>
 800f938:	051b      	lsls	r3, r3, #20
 800f93a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f93e:	2400      	movs	r4, #0
 800f940:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f944:	4622      	mov	r2, r4
 800f946:	462b      	mov	r3, r5
 800f948:	f7f0 fe76 	bl	8000638 <__aeabi_dmul>
 800f94c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f950 <_strtod_l>:
 800f950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f954:	ed2d 8b02 	vpush	{d8}
 800f958:	b09d      	sub	sp, #116	; 0x74
 800f95a:	461f      	mov	r7, r3
 800f95c:	2300      	movs	r3, #0
 800f95e:	9318      	str	r3, [sp, #96]	; 0x60
 800f960:	4ba2      	ldr	r3, [pc, #648]	; (800fbec <_strtod_l+0x29c>)
 800f962:	9213      	str	r2, [sp, #76]	; 0x4c
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	9305      	str	r3, [sp, #20]
 800f968:	4604      	mov	r4, r0
 800f96a:	4618      	mov	r0, r3
 800f96c:	4688      	mov	r8, r1
 800f96e:	f7f0 fc49 	bl	8000204 <strlen>
 800f972:	f04f 0a00 	mov.w	sl, #0
 800f976:	4605      	mov	r5, r0
 800f978:	f04f 0b00 	mov.w	fp, #0
 800f97c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f982:	781a      	ldrb	r2, [r3, #0]
 800f984:	2a2b      	cmp	r2, #43	; 0x2b
 800f986:	d04e      	beq.n	800fa26 <_strtod_l+0xd6>
 800f988:	d83b      	bhi.n	800fa02 <_strtod_l+0xb2>
 800f98a:	2a0d      	cmp	r2, #13
 800f98c:	d834      	bhi.n	800f9f8 <_strtod_l+0xa8>
 800f98e:	2a08      	cmp	r2, #8
 800f990:	d834      	bhi.n	800f9fc <_strtod_l+0xac>
 800f992:	2a00      	cmp	r2, #0
 800f994:	d03e      	beq.n	800fa14 <_strtod_l+0xc4>
 800f996:	2300      	movs	r3, #0
 800f998:	930a      	str	r3, [sp, #40]	; 0x28
 800f99a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f99c:	7833      	ldrb	r3, [r6, #0]
 800f99e:	2b30      	cmp	r3, #48	; 0x30
 800f9a0:	f040 80b0 	bne.w	800fb04 <_strtod_l+0x1b4>
 800f9a4:	7873      	ldrb	r3, [r6, #1]
 800f9a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f9aa:	2b58      	cmp	r3, #88	; 0x58
 800f9ac:	d168      	bne.n	800fa80 <_strtod_l+0x130>
 800f9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9b0:	9301      	str	r3, [sp, #4]
 800f9b2:	ab18      	add	r3, sp, #96	; 0x60
 800f9b4:	9702      	str	r7, [sp, #8]
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	4a8d      	ldr	r2, [pc, #564]	; (800fbf0 <_strtod_l+0x2a0>)
 800f9ba:	ab19      	add	r3, sp, #100	; 0x64
 800f9bc:	a917      	add	r1, sp, #92	; 0x5c
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f001 ffd2 	bl	8011968 <__gethex>
 800f9c4:	f010 0707 	ands.w	r7, r0, #7
 800f9c8:	4605      	mov	r5, r0
 800f9ca:	d005      	beq.n	800f9d8 <_strtod_l+0x88>
 800f9cc:	2f06      	cmp	r7, #6
 800f9ce:	d12c      	bne.n	800fa2a <_strtod_l+0xda>
 800f9d0:	3601      	adds	r6, #1
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800f9d6:	930a      	str	r3, [sp, #40]	; 0x28
 800f9d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f040 8590 	bne.w	8010500 <_strtod_l+0xbb0>
 800f9e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9e2:	b1eb      	cbz	r3, 800fa20 <_strtod_l+0xd0>
 800f9e4:	4652      	mov	r2, sl
 800f9e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f9ea:	ec43 2b10 	vmov	d0, r2, r3
 800f9ee:	b01d      	add	sp, #116	; 0x74
 800f9f0:	ecbd 8b02 	vpop	{d8}
 800f9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f8:	2a20      	cmp	r2, #32
 800f9fa:	d1cc      	bne.n	800f996 <_strtod_l+0x46>
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800fa00:	e7be      	b.n	800f980 <_strtod_l+0x30>
 800fa02:	2a2d      	cmp	r2, #45	; 0x2d
 800fa04:	d1c7      	bne.n	800f996 <_strtod_l+0x46>
 800fa06:	2201      	movs	r2, #1
 800fa08:	920a      	str	r2, [sp, #40]	; 0x28
 800fa0a:	1c5a      	adds	r2, r3, #1
 800fa0c:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa0e:	785b      	ldrb	r3, [r3, #1]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d1c2      	bne.n	800f99a <_strtod_l+0x4a>
 800fa14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa16:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	f040 856e 	bne.w	80104fc <_strtod_l+0xbac>
 800fa20:	4652      	mov	r2, sl
 800fa22:	465b      	mov	r3, fp
 800fa24:	e7e1      	b.n	800f9ea <_strtod_l+0x9a>
 800fa26:	2200      	movs	r2, #0
 800fa28:	e7ee      	b.n	800fa08 <_strtod_l+0xb8>
 800fa2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fa2c:	b13a      	cbz	r2, 800fa3e <_strtod_l+0xee>
 800fa2e:	2135      	movs	r1, #53	; 0x35
 800fa30:	a81a      	add	r0, sp, #104	; 0x68
 800fa32:	f002 ffb8 	bl	80129a6 <__copybits>
 800fa36:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f002 fb77 	bl	801212c <_Bfree>
 800fa3e:	3f01      	subs	r7, #1
 800fa40:	2f04      	cmp	r7, #4
 800fa42:	d806      	bhi.n	800fa52 <_strtod_l+0x102>
 800fa44:	e8df f007 	tbb	[pc, r7]
 800fa48:	1714030a 	.word	0x1714030a
 800fa4c:	0a          	.byte	0x0a
 800fa4d:	00          	.byte	0x00
 800fa4e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800fa52:	0728      	lsls	r0, r5, #28
 800fa54:	d5c0      	bpl.n	800f9d8 <_strtod_l+0x88>
 800fa56:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fa5a:	e7bd      	b.n	800f9d8 <_strtod_l+0x88>
 800fa5c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800fa60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fa62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fa66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fa6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fa6e:	e7f0      	b.n	800fa52 <_strtod_l+0x102>
 800fa70:	f8df b180 	ldr.w	fp, [pc, #384]	; 800fbf4 <_strtod_l+0x2a4>
 800fa74:	e7ed      	b.n	800fa52 <_strtod_l+0x102>
 800fa76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fa7a:	f04f 3aff 	mov.w	sl, #4294967295
 800fa7e:	e7e8      	b.n	800fa52 <_strtod_l+0x102>
 800fa80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa82:	1c5a      	adds	r2, r3, #1
 800fa84:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa86:	785b      	ldrb	r3, [r3, #1]
 800fa88:	2b30      	cmp	r3, #48	; 0x30
 800fa8a:	d0f9      	beq.n	800fa80 <_strtod_l+0x130>
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d0a3      	beq.n	800f9d8 <_strtod_l+0x88>
 800fa90:	2301      	movs	r3, #1
 800fa92:	f04f 0900 	mov.w	r9, #0
 800fa96:	9304      	str	r3, [sp, #16]
 800fa98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa9a:	9308      	str	r3, [sp, #32]
 800fa9c:	f8cd 901c 	str.w	r9, [sp, #28]
 800faa0:	464f      	mov	r7, r9
 800faa2:	220a      	movs	r2, #10
 800faa4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800faa6:	7806      	ldrb	r6, [r0, #0]
 800faa8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800faac:	b2d9      	uxtb	r1, r3
 800faae:	2909      	cmp	r1, #9
 800fab0:	d92a      	bls.n	800fb08 <_strtod_l+0x1b8>
 800fab2:	9905      	ldr	r1, [sp, #20]
 800fab4:	462a      	mov	r2, r5
 800fab6:	f003 feef 	bl	8013898 <strncmp>
 800faba:	b398      	cbz	r0, 800fb24 <_strtod_l+0x1d4>
 800fabc:	2000      	movs	r0, #0
 800fabe:	4632      	mov	r2, r6
 800fac0:	463d      	mov	r5, r7
 800fac2:	9005      	str	r0, [sp, #20]
 800fac4:	4603      	mov	r3, r0
 800fac6:	2a65      	cmp	r2, #101	; 0x65
 800fac8:	d001      	beq.n	800face <_strtod_l+0x17e>
 800faca:	2a45      	cmp	r2, #69	; 0x45
 800facc:	d118      	bne.n	800fb00 <_strtod_l+0x1b0>
 800face:	b91d      	cbnz	r5, 800fad8 <_strtod_l+0x188>
 800fad0:	9a04      	ldr	r2, [sp, #16]
 800fad2:	4302      	orrs	r2, r0
 800fad4:	d09e      	beq.n	800fa14 <_strtod_l+0xc4>
 800fad6:	2500      	movs	r5, #0
 800fad8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800fadc:	f108 0201 	add.w	r2, r8, #1
 800fae0:	9217      	str	r2, [sp, #92]	; 0x5c
 800fae2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800fae6:	2a2b      	cmp	r2, #43	; 0x2b
 800fae8:	d075      	beq.n	800fbd6 <_strtod_l+0x286>
 800faea:	2a2d      	cmp	r2, #45	; 0x2d
 800faec:	d07b      	beq.n	800fbe6 <_strtod_l+0x296>
 800faee:	f04f 0c00 	mov.w	ip, #0
 800faf2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800faf6:	2909      	cmp	r1, #9
 800faf8:	f240 8082 	bls.w	800fc00 <_strtod_l+0x2b0>
 800fafc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fb00:	2600      	movs	r6, #0
 800fb02:	e09d      	b.n	800fc40 <_strtod_l+0x2f0>
 800fb04:	2300      	movs	r3, #0
 800fb06:	e7c4      	b.n	800fa92 <_strtod_l+0x142>
 800fb08:	2f08      	cmp	r7, #8
 800fb0a:	bfd8      	it	le
 800fb0c:	9907      	ldrle	r1, [sp, #28]
 800fb0e:	f100 0001 	add.w	r0, r0, #1
 800fb12:	bfda      	itte	le
 800fb14:	fb02 3301 	mlale	r3, r2, r1, r3
 800fb18:	9307      	strle	r3, [sp, #28]
 800fb1a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fb1e:	3701      	adds	r7, #1
 800fb20:	9017      	str	r0, [sp, #92]	; 0x5c
 800fb22:	e7bf      	b.n	800faa4 <_strtod_l+0x154>
 800fb24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb26:	195a      	adds	r2, r3, r5
 800fb28:	9217      	str	r2, [sp, #92]	; 0x5c
 800fb2a:	5d5a      	ldrb	r2, [r3, r5]
 800fb2c:	2f00      	cmp	r7, #0
 800fb2e:	d037      	beq.n	800fba0 <_strtod_l+0x250>
 800fb30:	9005      	str	r0, [sp, #20]
 800fb32:	463d      	mov	r5, r7
 800fb34:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fb38:	2b09      	cmp	r3, #9
 800fb3a:	d912      	bls.n	800fb62 <_strtod_l+0x212>
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	e7c2      	b.n	800fac6 <_strtod_l+0x176>
 800fb40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb42:	1c5a      	adds	r2, r3, #1
 800fb44:	9217      	str	r2, [sp, #92]	; 0x5c
 800fb46:	785a      	ldrb	r2, [r3, #1]
 800fb48:	3001      	adds	r0, #1
 800fb4a:	2a30      	cmp	r2, #48	; 0x30
 800fb4c:	d0f8      	beq.n	800fb40 <_strtod_l+0x1f0>
 800fb4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fb52:	2b08      	cmp	r3, #8
 800fb54:	f200 84d9 	bhi.w	801050a <_strtod_l+0xbba>
 800fb58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb5a:	9005      	str	r0, [sp, #20]
 800fb5c:	2000      	movs	r0, #0
 800fb5e:	9308      	str	r3, [sp, #32]
 800fb60:	4605      	mov	r5, r0
 800fb62:	3a30      	subs	r2, #48	; 0x30
 800fb64:	f100 0301 	add.w	r3, r0, #1
 800fb68:	d014      	beq.n	800fb94 <_strtod_l+0x244>
 800fb6a:	9905      	ldr	r1, [sp, #20]
 800fb6c:	4419      	add	r1, r3
 800fb6e:	9105      	str	r1, [sp, #20]
 800fb70:	462b      	mov	r3, r5
 800fb72:	eb00 0e05 	add.w	lr, r0, r5
 800fb76:	210a      	movs	r1, #10
 800fb78:	4573      	cmp	r3, lr
 800fb7a:	d113      	bne.n	800fba4 <_strtod_l+0x254>
 800fb7c:	182b      	adds	r3, r5, r0
 800fb7e:	2b08      	cmp	r3, #8
 800fb80:	f105 0501 	add.w	r5, r5, #1
 800fb84:	4405      	add	r5, r0
 800fb86:	dc1c      	bgt.n	800fbc2 <_strtod_l+0x272>
 800fb88:	9907      	ldr	r1, [sp, #28]
 800fb8a:	230a      	movs	r3, #10
 800fb8c:	fb03 2301 	mla	r3, r3, r1, r2
 800fb90:	9307      	str	r3, [sp, #28]
 800fb92:	2300      	movs	r3, #0
 800fb94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb96:	1c51      	adds	r1, r2, #1
 800fb98:	9117      	str	r1, [sp, #92]	; 0x5c
 800fb9a:	7852      	ldrb	r2, [r2, #1]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	e7c9      	b.n	800fb34 <_strtod_l+0x1e4>
 800fba0:	4638      	mov	r0, r7
 800fba2:	e7d2      	b.n	800fb4a <_strtod_l+0x1fa>
 800fba4:	2b08      	cmp	r3, #8
 800fba6:	dc04      	bgt.n	800fbb2 <_strtod_l+0x262>
 800fba8:	9e07      	ldr	r6, [sp, #28]
 800fbaa:	434e      	muls	r6, r1
 800fbac:	9607      	str	r6, [sp, #28]
 800fbae:	3301      	adds	r3, #1
 800fbb0:	e7e2      	b.n	800fb78 <_strtod_l+0x228>
 800fbb2:	f103 0c01 	add.w	ip, r3, #1
 800fbb6:	f1bc 0f10 	cmp.w	ip, #16
 800fbba:	bfd8      	it	le
 800fbbc:	fb01 f909 	mulle.w	r9, r1, r9
 800fbc0:	e7f5      	b.n	800fbae <_strtod_l+0x25e>
 800fbc2:	2d10      	cmp	r5, #16
 800fbc4:	bfdc      	itt	le
 800fbc6:	230a      	movle	r3, #10
 800fbc8:	fb03 2909 	mlale	r9, r3, r9, r2
 800fbcc:	e7e1      	b.n	800fb92 <_strtod_l+0x242>
 800fbce:	2300      	movs	r3, #0
 800fbd0:	9305      	str	r3, [sp, #20]
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	e77c      	b.n	800fad0 <_strtod_l+0x180>
 800fbd6:	f04f 0c00 	mov.w	ip, #0
 800fbda:	f108 0202 	add.w	r2, r8, #2
 800fbde:	9217      	str	r2, [sp, #92]	; 0x5c
 800fbe0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800fbe4:	e785      	b.n	800faf2 <_strtod_l+0x1a2>
 800fbe6:	f04f 0c01 	mov.w	ip, #1
 800fbea:	e7f6      	b.n	800fbda <_strtod_l+0x28a>
 800fbec:	08014c08 	.word	0x08014c08
 800fbf0:	08014a60 	.word	0x08014a60
 800fbf4:	7ff00000 	.word	0x7ff00000
 800fbf8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fbfa:	1c51      	adds	r1, r2, #1
 800fbfc:	9117      	str	r1, [sp, #92]	; 0x5c
 800fbfe:	7852      	ldrb	r2, [r2, #1]
 800fc00:	2a30      	cmp	r2, #48	; 0x30
 800fc02:	d0f9      	beq.n	800fbf8 <_strtod_l+0x2a8>
 800fc04:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fc08:	2908      	cmp	r1, #8
 800fc0a:	f63f af79 	bhi.w	800fb00 <_strtod_l+0x1b0>
 800fc0e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fc12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fc14:	9206      	str	r2, [sp, #24]
 800fc16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fc18:	1c51      	adds	r1, r2, #1
 800fc1a:	9117      	str	r1, [sp, #92]	; 0x5c
 800fc1c:	7852      	ldrb	r2, [r2, #1]
 800fc1e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800fc22:	2e09      	cmp	r6, #9
 800fc24:	d937      	bls.n	800fc96 <_strtod_l+0x346>
 800fc26:	9e06      	ldr	r6, [sp, #24]
 800fc28:	1b89      	subs	r1, r1, r6
 800fc2a:	2908      	cmp	r1, #8
 800fc2c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fc30:	dc02      	bgt.n	800fc38 <_strtod_l+0x2e8>
 800fc32:	4576      	cmp	r6, lr
 800fc34:	bfa8      	it	ge
 800fc36:	4676      	movge	r6, lr
 800fc38:	f1bc 0f00 	cmp.w	ip, #0
 800fc3c:	d000      	beq.n	800fc40 <_strtod_l+0x2f0>
 800fc3e:	4276      	negs	r6, r6
 800fc40:	2d00      	cmp	r5, #0
 800fc42:	d14d      	bne.n	800fce0 <_strtod_l+0x390>
 800fc44:	9904      	ldr	r1, [sp, #16]
 800fc46:	4301      	orrs	r1, r0
 800fc48:	f47f aec6 	bne.w	800f9d8 <_strtod_l+0x88>
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f47f aee1 	bne.w	800fa14 <_strtod_l+0xc4>
 800fc52:	2a69      	cmp	r2, #105	; 0x69
 800fc54:	d027      	beq.n	800fca6 <_strtod_l+0x356>
 800fc56:	dc24      	bgt.n	800fca2 <_strtod_l+0x352>
 800fc58:	2a49      	cmp	r2, #73	; 0x49
 800fc5a:	d024      	beq.n	800fca6 <_strtod_l+0x356>
 800fc5c:	2a4e      	cmp	r2, #78	; 0x4e
 800fc5e:	f47f aed9 	bne.w	800fa14 <_strtod_l+0xc4>
 800fc62:	499f      	ldr	r1, [pc, #636]	; (800fee0 <_strtod_l+0x590>)
 800fc64:	a817      	add	r0, sp, #92	; 0x5c
 800fc66:	f002 f8d7 	bl	8011e18 <__match>
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	f43f aed2 	beq.w	800fa14 <_strtod_l+0xc4>
 800fc70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	2b28      	cmp	r3, #40	; 0x28
 800fc76:	d12d      	bne.n	800fcd4 <_strtod_l+0x384>
 800fc78:	499a      	ldr	r1, [pc, #616]	; (800fee4 <_strtod_l+0x594>)
 800fc7a:	aa1a      	add	r2, sp, #104	; 0x68
 800fc7c:	a817      	add	r0, sp, #92	; 0x5c
 800fc7e:	f002 f8df 	bl	8011e40 <__hexnan>
 800fc82:	2805      	cmp	r0, #5
 800fc84:	d126      	bne.n	800fcd4 <_strtod_l+0x384>
 800fc86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc88:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fc8c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fc90:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fc94:	e6a0      	b.n	800f9d8 <_strtod_l+0x88>
 800fc96:	210a      	movs	r1, #10
 800fc98:	fb01 2e0e 	mla	lr, r1, lr, r2
 800fc9c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fca0:	e7b9      	b.n	800fc16 <_strtod_l+0x2c6>
 800fca2:	2a6e      	cmp	r2, #110	; 0x6e
 800fca4:	e7db      	b.n	800fc5e <_strtod_l+0x30e>
 800fca6:	4990      	ldr	r1, [pc, #576]	; (800fee8 <_strtod_l+0x598>)
 800fca8:	a817      	add	r0, sp, #92	; 0x5c
 800fcaa:	f002 f8b5 	bl	8011e18 <__match>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	f43f aeb0 	beq.w	800fa14 <_strtod_l+0xc4>
 800fcb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fcb6:	498d      	ldr	r1, [pc, #564]	; (800feec <_strtod_l+0x59c>)
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	a817      	add	r0, sp, #92	; 0x5c
 800fcbc:	9317      	str	r3, [sp, #92]	; 0x5c
 800fcbe:	f002 f8ab 	bl	8011e18 <__match>
 800fcc2:	b910      	cbnz	r0, 800fcca <_strtod_l+0x37a>
 800fcc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	9317      	str	r3, [sp, #92]	; 0x5c
 800fcca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fefc <_strtod_l+0x5ac>
 800fcce:	f04f 0a00 	mov.w	sl, #0
 800fcd2:	e681      	b.n	800f9d8 <_strtod_l+0x88>
 800fcd4:	4886      	ldr	r0, [pc, #536]	; (800fef0 <_strtod_l+0x5a0>)
 800fcd6:	f003 fd8f 	bl	80137f8 <nan>
 800fcda:	ec5b ab10 	vmov	sl, fp, d0
 800fcde:	e67b      	b.n	800f9d8 <_strtod_l+0x88>
 800fce0:	9b05      	ldr	r3, [sp, #20]
 800fce2:	9807      	ldr	r0, [sp, #28]
 800fce4:	1af3      	subs	r3, r6, r3
 800fce6:	2f00      	cmp	r7, #0
 800fce8:	bf08      	it	eq
 800fcea:	462f      	moveq	r7, r5
 800fcec:	2d10      	cmp	r5, #16
 800fcee:	9306      	str	r3, [sp, #24]
 800fcf0:	46a8      	mov	r8, r5
 800fcf2:	bfa8      	it	ge
 800fcf4:	f04f 0810 	movge.w	r8, #16
 800fcf8:	f7f0 fc24 	bl	8000544 <__aeabi_ui2d>
 800fcfc:	2d09      	cmp	r5, #9
 800fcfe:	4682      	mov	sl, r0
 800fd00:	468b      	mov	fp, r1
 800fd02:	dd13      	ble.n	800fd2c <_strtod_l+0x3dc>
 800fd04:	4b7b      	ldr	r3, [pc, #492]	; (800fef4 <_strtod_l+0x5a4>)
 800fd06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fd0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fd0e:	f7f0 fc93 	bl	8000638 <__aeabi_dmul>
 800fd12:	4682      	mov	sl, r0
 800fd14:	4648      	mov	r0, r9
 800fd16:	468b      	mov	fp, r1
 800fd18:	f7f0 fc14 	bl	8000544 <__aeabi_ui2d>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	460b      	mov	r3, r1
 800fd20:	4650      	mov	r0, sl
 800fd22:	4659      	mov	r1, fp
 800fd24:	f7f0 fad2 	bl	80002cc <__adddf3>
 800fd28:	4682      	mov	sl, r0
 800fd2a:	468b      	mov	fp, r1
 800fd2c:	2d0f      	cmp	r5, #15
 800fd2e:	dc38      	bgt.n	800fda2 <_strtod_l+0x452>
 800fd30:	9b06      	ldr	r3, [sp, #24]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	f43f ae50 	beq.w	800f9d8 <_strtod_l+0x88>
 800fd38:	dd24      	ble.n	800fd84 <_strtod_l+0x434>
 800fd3a:	2b16      	cmp	r3, #22
 800fd3c:	dc0b      	bgt.n	800fd56 <_strtod_l+0x406>
 800fd3e:	496d      	ldr	r1, [pc, #436]	; (800fef4 <_strtod_l+0x5a4>)
 800fd40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd48:	4652      	mov	r2, sl
 800fd4a:	465b      	mov	r3, fp
 800fd4c:	f7f0 fc74 	bl	8000638 <__aeabi_dmul>
 800fd50:	4682      	mov	sl, r0
 800fd52:	468b      	mov	fp, r1
 800fd54:	e640      	b.n	800f9d8 <_strtod_l+0x88>
 800fd56:	9a06      	ldr	r2, [sp, #24]
 800fd58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	db20      	blt.n	800fda2 <_strtod_l+0x452>
 800fd60:	4c64      	ldr	r4, [pc, #400]	; (800fef4 <_strtod_l+0x5a4>)
 800fd62:	f1c5 050f 	rsb	r5, r5, #15
 800fd66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fd6a:	4652      	mov	r2, sl
 800fd6c:	465b      	mov	r3, fp
 800fd6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd72:	f7f0 fc61 	bl	8000638 <__aeabi_dmul>
 800fd76:	9b06      	ldr	r3, [sp, #24]
 800fd78:	1b5d      	subs	r5, r3, r5
 800fd7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fd7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fd82:	e7e3      	b.n	800fd4c <_strtod_l+0x3fc>
 800fd84:	9b06      	ldr	r3, [sp, #24]
 800fd86:	3316      	adds	r3, #22
 800fd88:	db0b      	blt.n	800fda2 <_strtod_l+0x452>
 800fd8a:	9b05      	ldr	r3, [sp, #20]
 800fd8c:	1b9e      	subs	r6, r3, r6
 800fd8e:	4b59      	ldr	r3, [pc, #356]	; (800fef4 <_strtod_l+0x5a4>)
 800fd90:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800fd94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fd98:	4650      	mov	r0, sl
 800fd9a:	4659      	mov	r1, fp
 800fd9c:	f7f0 fd76 	bl	800088c <__aeabi_ddiv>
 800fda0:	e7d6      	b.n	800fd50 <_strtod_l+0x400>
 800fda2:	9b06      	ldr	r3, [sp, #24]
 800fda4:	eba5 0808 	sub.w	r8, r5, r8
 800fda8:	4498      	add	r8, r3
 800fdaa:	f1b8 0f00 	cmp.w	r8, #0
 800fdae:	dd74      	ble.n	800fe9a <_strtod_l+0x54a>
 800fdb0:	f018 030f 	ands.w	r3, r8, #15
 800fdb4:	d00a      	beq.n	800fdcc <_strtod_l+0x47c>
 800fdb6:	494f      	ldr	r1, [pc, #316]	; (800fef4 <_strtod_l+0x5a4>)
 800fdb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fdbc:	4652      	mov	r2, sl
 800fdbe:	465b      	mov	r3, fp
 800fdc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdc4:	f7f0 fc38 	bl	8000638 <__aeabi_dmul>
 800fdc8:	4682      	mov	sl, r0
 800fdca:	468b      	mov	fp, r1
 800fdcc:	f038 080f 	bics.w	r8, r8, #15
 800fdd0:	d04f      	beq.n	800fe72 <_strtod_l+0x522>
 800fdd2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fdd6:	dd22      	ble.n	800fe1e <_strtod_l+0x4ce>
 800fdd8:	2500      	movs	r5, #0
 800fdda:	462e      	mov	r6, r5
 800fddc:	9507      	str	r5, [sp, #28]
 800fdde:	9505      	str	r5, [sp, #20]
 800fde0:	2322      	movs	r3, #34	; 0x22
 800fde2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fefc <_strtod_l+0x5ac>
 800fde6:	6023      	str	r3, [r4, #0]
 800fde8:	f04f 0a00 	mov.w	sl, #0
 800fdec:	9b07      	ldr	r3, [sp, #28]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f43f adf2 	beq.w	800f9d8 <_strtod_l+0x88>
 800fdf4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f002 f998 	bl	801212c <_Bfree>
 800fdfc:	9905      	ldr	r1, [sp, #20]
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f002 f994 	bl	801212c <_Bfree>
 800fe04:	4631      	mov	r1, r6
 800fe06:	4620      	mov	r0, r4
 800fe08:	f002 f990 	bl	801212c <_Bfree>
 800fe0c:	9907      	ldr	r1, [sp, #28]
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f002 f98c 	bl	801212c <_Bfree>
 800fe14:	4629      	mov	r1, r5
 800fe16:	4620      	mov	r0, r4
 800fe18:	f002 f988 	bl	801212c <_Bfree>
 800fe1c:	e5dc      	b.n	800f9d8 <_strtod_l+0x88>
 800fe1e:	4b36      	ldr	r3, [pc, #216]	; (800fef8 <_strtod_l+0x5a8>)
 800fe20:	9304      	str	r3, [sp, #16]
 800fe22:	2300      	movs	r3, #0
 800fe24:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fe28:	4650      	mov	r0, sl
 800fe2a:	4659      	mov	r1, fp
 800fe2c:	4699      	mov	r9, r3
 800fe2e:	f1b8 0f01 	cmp.w	r8, #1
 800fe32:	dc21      	bgt.n	800fe78 <_strtod_l+0x528>
 800fe34:	b10b      	cbz	r3, 800fe3a <_strtod_l+0x4ea>
 800fe36:	4682      	mov	sl, r0
 800fe38:	468b      	mov	fp, r1
 800fe3a:	4b2f      	ldr	r3, [pc, #188]	; (800fef8 <_strtod_l+0x5a8>)
 800fe3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fe40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fe44:	4652      	mov	r2, sl
 800fe46:	465b      	mov	r3, fp
 800fe48:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fe4c:	f7f0 fbf4 	bl	8000638 <__aeabi_dmul>
 800fe50:	4b2a      	ldr	r3, [pc, #168]	; (800fefc <_strtod_l+0x5ac>)
 800fe52:	460a      	mov	r2, r1
 800fe54:	400b      	ands	r3, r1
 800fe56:	492a      	ldr	r1, [pc, #168]	; (800ff00 <_strtod_l+0x5b0>)
 800fe58:	428b      	cmp	r3, r1
 800fe5a:	4682      	mov	sl, r0
 800fe5c:	d8bc      	bhi.n	800fdd8 <_strtod_l+0x488>
 800fe5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fe62:	428b      	cmp	r3, r1
 800fe64:	bf86      	itte	hi
 800fe66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ff04 <_strtod_l+0x5b4>
 800fe6a:	f04f 3aff 	movhi.w	sl, #4294967295
 800fe6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fe72:	2300      	movs	r3, #0
 800fe74:	9304      	str	r3, [sp, #16]
 800fe76:	e084      	b.n	800ff82 <_strtod_l+0x632>
 800fe78:	f018 0f01 	tst.w	r8, #1
 800fe7c:	d005      	beq.n	800fe8a <_strtod_l+0x53a>
 800fe7e:	9b04      	ldr	r3, [sp, #16]
 800fe80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe84:	f7f0 fbd8 	bl	8000638 <__aeabi_dmul>
 800fe88:	2301      	movs	r3, #1
 800fe8a:	9a04      	ldr	r2, [sp, #16]
 800fe8c:	3208      	adds	r2, #8
 800fe8e:	f109 0901 	add.w	r9, r9, #1
 800fe92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fe96:	9204      	str	r2, [sp, #16]
 800fe98:	e7c9      	b.n	800fe2e <_strtod_l+0x4de>
 800fe9a:	d0ea      	beq.n	800fe72 <_strtod_l+0x522>
 800fe9c:	f1c8 0800 	rsb	r8, r8, #0
 800fea0:	f018 020f 	ands.w	r2, r8, #15
 800fea4:	d00a      	beq.n	800febc <_strtod_l+0x56c>
 800fea6:	4b13      	ldr	r3, [pc, #76]	; (800fef4 <_strtod_l+0x5a4>)
 800fea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800feac:	4650      	mov	r0, sl
 800feae:	4659      	mov	r1, fp
 800feb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb4:	f7f0 fcea 	bl	800088c <__aeabi_ddiv>
 800feb8:	4682      	mov	sl, r0
 800feba:	468b      	mov	fp, r1
 800febc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fec0:	d0d7      	beq.n	800fe72 <_strtod_l+0x522>
 800fec2:	f1b8 0f1f 	cmp.w	r8, #31
 800fec6:	dd1f      	ble.n	800ff08 <_strtod_l+0x5b8>
 800fec8:	2500      	movs	r5, #0
 800feca:	462e      	mov	r6, r5
 800fecc:	9507      	str	r5, [sp, #28]
 800fece:	9505      	str	r5, [sp, #20]
 800fed0:	2322      	movs	r3, #34	; 0x22
 800fed2:	f04f 0a00 	mov.w	sl, #0
 800fed6:	f04f 0b00 	mov.w	fp, #0
 800feda:	6023      	str	r3, [r4, #0]
 800fedc:	e786      	b.n	800fdec <_strtod_l+0x49c>
 800fede:	bf00      	nop
 800fee0:	08014a35 	.word	0x08014a35
 800fee4:	08014a74 	.word	0x08014a74
 800fee8:	08014a2d 	.word	0x08014a2d
 800feec:	08014ab3 	.word	0x08014ab3
 800fef0:	08014ddb 	.word	0x08014ddb
 800fef4:	08014ca0 	.word	0x08014ca0
 800fef8:	08014c78 	.word	0x08014c78
 800fefc:	7ff00000 	.word	0x7ff00000
 800ff00:	7ca00000 	.word	0x7ca00000
 800ff04:	7fefffff 	.word	0x7fefffff
 800ff08:	f018 0310 	ands.w	r3, r8, #16
 800ff0c:	bf18      	it	ne
 800ff0e:	236a      	movne	r3, #106	; 0x6a
 800ff10:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80102c0 <_strtod_l+0x970>
 800ff14:	9304      	str	r3, [sp, #16]
 800ff16:	4650      	mov	r0, sl
 800ff18:	4659      	mov	r1, fp
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	f018 0f01 	tst.w	r8, #1
 800ff20:	d004      	beq.n	800ff2c <_strtod_l+0x5dc>
 800ff22:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ff26:	f7f0 fb87 	bl	8000638 <__aeabi_dmul>
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ff30:	f109 0908 	add.w	r9, r9, #8
 800ff34:	d1f2      	bne.n	800ff1c <_strtod_l+0x5cc>
 800ff36:	b10b      	cbz	r3, 800ff3c <_strtod_l+0x5ec>
 800ff38:	4682      	mov	sl, r0
 800ff3a:	468b      	mov	fp, r1
 800ff3c:	9b04      	ldr	r3, [sp, #16]
 800ff3e:	b1c3      	cbz	r3, 800ff72 <_strtod_l+0x622>
 800ff40:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ff44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	4659      	mov	r1, fp
 800ff4c:	dd11      	ble.n	800ff72 <_strtod_l+0x622>
 800ff4e:	2b1f      	cmp	r3, #31
 800ff50:	f340 8124 	ble.w	801019c <_strtod_l+0x84c>
 800ff54:	2b34      	cmp	r3, #52	; 0x34
 800ff56:	bfde      	ittt	le
 800ff58:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ff5c:	f04f 33ff 	movle.w	r3, #4294967295
 800ff60:	fa03 f202 	lslle.w	r2, r3, r2
 800ff64:	f04f 0a00 	mov.w	sl, #0
 800ff68:	bfcc      	ite	gt
 800ff6a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ff6e:	ea02 0b01 	andle.w	fp, r2, r1
 800ff72:	2200      	movs	r2, #0
 800ff74:	2300      	movs	r3, #0
 800ff76:	4650      	mov	r0, sl
 800ff78:	4659      	mov	r1, fp
 800ff7a:	f7f0 fdc5 	bl	8000b08 <__aeabi_dcmpeq>
 800ff7e:	2800      	cmp	r0, #0
 800ff80:	d1a2      	bne.n	800fec8 <_strtod_l+0x578>
 800ff82:	9b07      	ldr	r3, [sp, #28]
 800ff84:	9300      	str	r3, [sp, #0]
 800ff86:	9908      	ldr	r1, [sp, #32]
 800ff88:	462b      	mov	r3, r5
 800ff8a:	463a      	mov	r2, r7
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f002 f935 	bl	80121fc <__s2b>
 800ff92:	9007      	str	r0, [sp, #28]
 800ff94:	2800      	cmp	r0, #0
 800ff96:	f43f af1f 	beq.w	800fdd8 <_strtod_l+0x488>
 800ff9a:	9b05      	ldr	r3, [sp, #20]
 800ff9c:	1b9e      	subs	r6, r3, r6
 800ff9e:	9b06      	ldr	r3, [sp, #24]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	bfb4      	ite	lt
 800ffa4:	4633      	movlt	r3, r6
 800ffa6:	2300      	movge	r3, #0
 800ffa8:	930c      	str	r3, [sp, #48]	; 0x30
 800ffaa:	9b06      	ldr	r3, [sp, #24]
 800ffac:	2500      	movs	r5, #0
 800ffae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ffb2:	9312      	str	r3, [sp, #72]	; 0x48
 800ffb4:	462e      	mov	r6, r5
 800ffb6:	9b07      	ldr	r3, [sp, #28]
 800ffb8:	4620      	mov	r0, r4
 800ffba:	6859      	ldr	r1, [r3, #4]
 800ffbc:	f002 f876 	bl	80120ac <_Balloc>
 800ffc0:	9005      	str	r0, [sp, #20]
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	f43f af0c 	beq.w	800fde0 <_strtod_l+0x490>
 800ffc8:	9b07      	ldr	r3, [sp, #28]
 800ffca:	691a      	ldr	r2, [r3, #16]
 800ffcc:	3202      	adds	r2, #2
 800ffce:	f103 010c 	add.w	r1, r3, #12
 800ffd2:	0092      	lsls	r2, r2, #2
 800ffd4:	300c      	adds	r0, #12
 800ffd6:	f7fe fc85 	bl	800e8e4 <memcpy>
 800ffda:	ec4b ab10 	vmov	d0, sl, fp
 800ffde:	aa1a      	add	r2, sp, #104	; 0x68
 800ffe0:	a919      	add	r1, sp, #100	; 0x64
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	f002 fc50 	bl	8012888 <__d2b>
 800ffe8:	ec4b ab18 	vmov	d8, sl, fp
 800ffec:	9018      	str	r0, [sp, #96]	; 0x60
 800ffee:	2800      	cmp	r0, #0
 800fff0:	f43f aef6 	beq.w	800fde0 <_strtod_l+0x490>
 800fff4:	2101      	movs	r1, #1
 800fff6:	4620      	mov	r0, r4
 800fff8:	f002 f99a 	bl	8012330 <__i2b>
 800fffc:	4606      	mov	r6, r0
 800fffe:	2800      	cmp	r0, #0
 8010000:	f43f aeee 	beq.w	800fde0 <_strtod_l+0x490>
 8010004:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010006:	9904      	ldr	r1, [sp, #16]
 8010008:	2b00      	cmp	r3, #0
 801000a:	bfab      	itete	ge
 801000c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801000e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010010:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010012:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010016:	bfac      	ite	ge
 8010018:	eb03 0902 	addge.w	r9, r3, r2
 801001c:	1ad7      	sublt	r7, r2, r3
 801001e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010020:	eba3 0801 	sub.w	r8, r3, r1
 8010024:	4490      	add	r8, r2
 8010026:	4ba1      	ldr	r3, [pc, #644]	; (80102ac <_strtod_l+0x95c>)
 8010028:	f108 38ff 	add.w	r8, r8, #4294967295
 801002c:	4598      	cmp	r8, r3
 801002e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010032:	f280 80c7 	bge.w	80101c4 <_strtod_l+0x874>
 8010036:	eba3 0308 	sub.w	r3, r3, r8
 801003a:	2b1f      	cmp	r3, #31
 801003c:	eba2 0203 	sub.w	r2, r2, r3
 8010040:	f04f 0101 	mov.w	r1, #1
 8010044:	f300 80b1 	bgt.w	80101aa <_strtod_l+0x85a>
 8010048:	fa01 f303 	lsl.w	r3, r1, r3
 801004c:	930d      	str	r3, [sp, #52]	; 0x34
 801004e:	2300      	movs	r3, #0
 8010050:	9308      	str	r3, [sp, #32]
 8010052:	eb09 0802 	add.w	r8, r9, r2
 8010056:	9b04      	ldr	r3, [sp, #16]
 8010058:	45c1      	cmp	r9, r8
 801005a:	4417      	add	r7, r2
 801005c:	441f      	add	r7, r3
 801005e:	464b      	mov	r3, r9
 8010060:	bfa8      	it	ge
 8010062:	4643      	movge	r3, r8
 8010064:	42bb      	cmp	r3, r7
 8010066:	bfa8      	it	ge
 8010068:	463b      	movge	r3, r7
 801006a:	2b00      	cmp	r3, #0
 801006c:	bfc2      	ittt	gt
 801006e:	eba8 0803 	subgt.w	r8, r8, r3
 8010072:	1aff      	subgt	r7, r7, r3
 8010074:	eba9 0903 	subgt.w	r9, r9, r3
 8010078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801007a:	2b00      	cmp	r3, #0
 801007c:	dd17      	ble.n	80100ae <_strtod_l+0x75e>
 801007e:	4631      	mov	r1, r6
 8010080:	461a      	mov	r2, r3
 8010082:	4620      	mov	r0, r4
 8010084:	f002 fa14 	bl	80124b0 <__pow5mult>
 8010088:	4606      	mov	r6, r0
 801008a:	2800      	cmp	r0, #0
 801008c:	f43f aea8 	beq.w	800fde0 <_strtod_l+0x490>
 8010090:	4601      	mov	r1, r0
 8010092:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010094:	4620      	mov	r0, r4
 8010096:	f002 f961 	bl	801235c <__multiply>
 801009a:	900b      	str	r0, [sp, #44]	; 0x2c
 801009c:	2800      	cmp	r0, #0
 801009e:	f43f ae9f 	beq.w	800fde0 <_strtod_l+0x490>
 80100a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80100a4:	4620      	mov	r0, r4
 80100a6:	f002 f841 	bl	801212c <_Bfree>
 80100aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100ac:	9318      	str	r3, [sp, #96]	; 0x60
 80100ae:	f1b8 0f00 	cmp.w	r8, #0
 80100b2:	f300 808c 	bgt.w	80101ce <_strtod_l+0x87e>
 80100b6:	9b06      	ldr	r3, [sp, #24]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	dd08      	ble.n	80100ce <_strtod_l+0x77e>
 80100bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80100be:	9905      	ldr	r1, [sp, #20]
 80100c0:	4620      	mov	r0, r4
 80100c2:	f002 f9f5 	bl	80124b0 <__pow5mult>
 80100c6:	9005      	str	r0, [sp, #20]
 80100c8:	2800      	cmp	r0, #0
 80100ca:	f43f ae89 	beq.w	800fde0 <_strtod_l+0x490>
 80100ce:	2f00      	cmp	r7, #0
 80100d0:	dd08      	ble.n	80100e4 <_strtod_l+0x794>
 80100d2:	9905      	ldr	r1, [sp, #20]
 80100d4:	463a      	mov	r2, r7
 80100d6:	4620      	mov	r0, r4
 80100d8:	f002 fa44 	bl	8012564 <__lshift>
 80100dc:	9005      	str	r0, [sp, #20]
 80100de:	2800      	cmp	r0, #0
 80100e0:	f43f ae7e 	beq.w	800fde0 <_strtod_l+0x490>
 80100e4:	f1b9 0f00 	cmp.w	r9, #0
 80100e8:	dd08      	ble.n	80100fc <_strtod_l+0x7ac>
 80100ea:	4631      	mov	r1, r6
 80100ec:	464a      	mov	r2, r9
 80100ee:	4620      	mov	r0, r4
 80100f0:	f002 fa38 	bl	8012564 <__lshift>
 80100f4:	4606      	mov	r6, r0
 80100f6:	2800      	cmp	r0, #0
 80100f8:	f43f ae72 	beq.w	800fde0 <_strtod_l+0x490>
 80100fc:	9a05      	ldr	r2, [sp, #20]
 80100fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010100:	4620      	mov	r0, r4
 8010102:	f002 fabb 	bl	801267c <__mdiff>
 8010106:	4605      	mov	r5, r0
 8010108:	2800      	cmp	r0, #0
 801010a:	f43f ae69 	beq.w	800fde0 <_strtod_l+0x490>
 801010e:	68c3      	ldr	r3, [r0, #12]
 8010110:	930b      	str	r3, [sp, #44]	; 0x2c
 8010112:	2300      	movs	r3, #0
 8010114:	60c3      	str	r3, [r0, #12]
 8010116:	4631      	mov	r1, r6
 8010118:	f002 fa94 	bl	8012644 <__mcmp>
 801011c:	2800      	cmp	r0, #0
 801011e:	da60      	bge.n	80101e2 <_strtod_l+0x892>
 8010120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010122:	ea53 030a 	orrs.w	r3, r3, sl
 8010126:	f040 8082 	bne.w	801022e <_strtod_l+0x8de>
 801012a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801012e:	2b00      	cmp	r3, #0
 8010130:	d17d      	bne.n	801022e <_strtod_l+0x8de>
 8010132:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010136:	0d1b      	lsrs	r3, r3, #20
 8010138:	051b      	lsls	r3, r3, #20
 801013a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801013e:	d976      	bls.n	801022e <_strtod_l+0x8de>
 8010140:	696b      	ldr	r3, [r5, #20]
 8010142:	b913      	cbnz	r3, 801014a <_strtod_l+0x7fa>
 8010144:	692b      	ldr	r3, [r5, #16]
 8010146:	2b01      	cmp	r3, #1
 8010148:	dd71      	ble.n	801022e <_strtod_l+0x8de>
 801014a:	4629      	mov	r1, r5
 801014c:	2201      	movs	r2, #1
 801014e:	4620      	mov	r0, r4
 8010150:	f002 fa08 	bl	8012564 <__lshift>
 8010154:	4631      	mov	r1, r6
 8010156:	4605      	mov	r5, r0
 8010158:	f002 fa74 	bl	8012644 <__mcmp>
 801015c:	2800      	cmp	r0, #0
 801015e:	dd66      	ble.n	801022e <_strtod_l+0x8de>
 8010160:	9904      	ldr	r1, [sp, #16]
 8010162:	4a53      	ldr	r2, [pc, #332]	; (80102b0 <_strtod_l+0x960>)
 8010164:	465b      	mov	r3, fp
 8010166:	2900      	cmp	r1, #0
 8010168:	f000 8081 	beq.w	801026e <_strtod_l+0x91e>
 801016c:	ea02 010b 	and.w	r1, r2, fp
 8010170:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010174:	dc7b      	bgt.n	801026e <_strtod_l+0x91e>
 8010176:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801017a:	f77f aea9 	ble.w	800fed0 <_strtod_l+0x580>
 801017e:	4b4d      	ldr	r3, [pc, #308]	; (80102b4 <_strtod_l+0x964>)
 8010180:	4650      	mov	r0, sl
 8010182:	4659      	mov	r1, fp
 8010184:	2200      	movs	r2, #0
 8010186:	f7f0 fa57 	bl	8000638 <__aeabi_dmul>
 801018a:	460b      	mov	r3, r1
 801018c:	4303      	orrs	r3, r0
 801018e:	bf08      	it	eq
 8010190:	2322      	moveq	r3, #34	; 0x22
 8010192:	4682      	mov	sl, r0
 8010194:	468b      	mov	fp, r1
 8010196:	bf08      	it	eq
 8010198:	6023      	streq	r3, [r4, #0]
 801019a:	e62b      	b.n	800fdf4 <_strtod_l+0x4a4>
 801019c:	f04f 32ff 	mov.w	r2, #4294967295
 80101a0:	fa02 f303 	lsl.w	r3, r2, r3
 80101a4:	ea03 0a0a 	and.w	sl, r3, sl
 80101a8:	e6e3      	b.n	800ff72 <_strtod_l+0x622>
 80101aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80101ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80101b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80101b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80101ba:	fa01 f308 	lsl.w	r3, r1, r8
 80101be:	9308      	str	r3, [sp, #32]
 80101c0:	910d      	str	r1, [sp, #52]	; 0x34
 80101c2:	e746      	b.n	8010052 <_strtod_l+0x702>
 80101c4:	2300      	movs	r3, #0
 80101c6:	9308      	str	r3, [sp, #32]
 80101c8:	2301      	movs	r3, #1
 80101ca:	930d      	str	r3, [sp, #52]	; 0x34
 80101cc:	e741      	b.n	8010052 <_strtod_l+0x702>
 80101ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80101d0:	4642      	mov	r2, r8
 80101d2:	4620      	mov	r0, r4
 80101d4:	f002 f9c6 	bl	8012564 <__lshift>
 80101d8:	9018      	str	r0, [sp, #96]	; 0x60
 80101da:	2800      	cmp	r0, #0
 80101dc:	f47f af6b 	bne.w	80100b6 <_strtod_l+0x766>
 80101e0:	e5fe      	b.n	800fde0 <_strtod_l+0x490>
 80101e2:	465f      	mov	r7, fp
 80101e4:	d16e      	bne.n	80102c4 <_strtod_l+0x974>
 80101e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80101e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101ec:	b342      	cbz	r2, 8010240 <_strtod_l+0x8f0>
 80101ee:	4a32      	ldr	r2, [pc, #200]	; (80102b8 <_strtod_l+0x968>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d128      	bne.n	8010246 <_strtod_l+0x8f6>
 80101f4:	9b04      	ldr	r3, [sp, #16]
 80101f6:	4651      	mov	r1, sl
 80101f8:	b1eb      	cbz	r3, 8010236 <_strtod_l+0x8e6>
 80101fa:	4b2d      	ldr	r3, [pc, #180]	; (80102b0 <_strtod_l+0x960>)
 80101fc:	403b      	ands	r3, r7
 80101fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010202:	f04f 32ff 	mov.w	r2, #4294967295
 8010206:	d819      	bhi.n	801023c <_strtod_l+0x8ec>
 8010208:	0d1b      	lsrs	r3, r3, #20
 801020a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801020e:	fa02 f303 	lsl.w	r3, r2, r3
 8010212:	4299      	cmp	r1, r3
 8010214:	d117      	bne.n	8010246 <_strtod_l+0x8f6>
 8010216:	4b29      	ldr	r3, [pc, #164]	; (80102bc <_strtod_l+0x96c>)
 8010218:	429f      	cmp	r7, r3
 801021a:	d102      	bne.n	8010222 <_strtod_l+0x8d2>
 801021c:	3101      	adds	r1, #1
 801021e:	f43f addf 	beq.w	800fde0 <_strtod_l+0x490>
 8010222:	4b23      	ldr	r3, [pc, #140]	; (80102b0 <_strtod_l+0x960>)
 8010224:	403b      	ands	r3, r7
 8010226:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801022a:	f04f 0a00 	mov.w	sl, #0
 801022e:	9b04      	ldr	r3, [sp, #16]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d1a4      	bne.n	801017e <_strtod_l+0x82e>
 8010234:	e5de      	b.n	800fdf4 <_strtod_l+0x4a4>
 8010236:	f04f 33ff 	mov.w	r3, #4294967295
 801023a:	e7ea      	b.n	8010212 <_strtod_l+0x8c2>
 801023c:	4613      	mov	r3, r2
 801023e:	e7e8      	b.n	8010212 <_strtod_l+0x8c2>
 8010240:	ea53 030a 	orrs.w	r3, r3, sl
 8010244:	d08c      	beq.n	8010160 <_strtod_l+0x810>
 8010246:	9b08      	ldr	r3, [sp, #32]
 8010248:	b1db      	cbz	r3, 8010282 <_strtod_l+0x932>
 801024a:	423b      	tst	r3, r7
 801024c:	d0ef      	beq.n	801022e <_strtod_l+0x8de>
 801024e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010250:	9a04      	ldr	r2, [sp, #16]
 8010252:	4650      	mov	r0, sl
 8010254:	4659      	mov	r1, fp
 8010256:	b1c3      	cbz	r3, 801028a <_strtod_l+0x93a>
 8010258:	f7ff fb5d 	bl	800f916 <sulp>
 801025c:	4602      	mov	r2, r0
 801025e:	460b      	mov	r3, r1
 8010260:	ec51 0b18 	vmov	r0, r1, d8
 8010264:	f7f0 f832 	bl	80002cc <__adddf3>
 8010268:	4682      	mov	sl, r0
 801026a:	468b      	mov	fp, r1
 801026c:	e7df      	b.n	801022e <_strtod_l+0x8de>
 801026e:	4013      	ands	r3, r2
 8010270:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010274:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010278:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801027c:	f04f 3aff 	mov.w	sl, #4294967295
 8010280:	e7d5      	b.n	801022e <_strtod_l+0x8de>
 8010282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010284:	ea13 0f0a 	tst.w	r3, sl
 8010288:	e7e0      	b.n	801024c <_strtod_l+0x8fc>
 801028a:	f7ff fb44 	bl	800f916 <sulp>
 801028e:	4602      	mov	r2, r0
 8010290:	460b      	mov	r3, r1
 8010292:	ec51 0b18 	vmov	r0, r1, d8
 8010296:	f7f0 f817 	bl	80002c8 <__aeabi_dsub>
 801029a:	2200      	movs	r2, #0
 801029c:	2300      	movs	r3, #0
 801029e:	4682      	mov	sl, r0
 80102a0:	468b      	mov	fp, r1
 80102a2:	f7f0 fc31 	bl	8000b08 <__aeabi_dcmpeq>
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d0c1      	beq.n	801022e <_strtod_l+0x8de>
 80102aa:	e611      	b.n	800fed0 <_strtod_l+0x580>
 80102ac:	fffffc02 	.word	0xfffffc02
 80102b0:	7ff00000 	.word	0x7ff00000
 80102b4:	39500000 	.word	0x39500000
 80102b8:	000fffff 	.word	0x000fffff
 80102bc:	7fefffff 	.word	0x7fefffff
 80102c0:	08014a88 	.word	0x08014a88
 80102c4:	4631      	mov	r1, r6
 80102c6:	4628      	mov	r0, r5
 80102c8:	f002 fb3a 	bl	8012940 <__ratio>
 80102cc:	ec59 8b10 	vmov	r8, r9, d0
 80102d0:	ee10 0a10 	vmov	r0, s0
 80102d4:	2200      	movs	r2, #0
 80102d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80102da:	4649      	mov	r1, r9
 80102dc:	f7f0 fc28 	bl	8000b30 <__aeabi_dcmple>
 80102e0:	2800      	cmp	r0, #0
 80102e2:	d07a      	beq.n	80103da <_strtod_l+0xa8a>
 80102e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d04a      	beq.n	8010380 <_strtod_l+0xa30>
 80102ea:	4b95      	ldr	r3, [pc, #596]	; (8010540 <_strtod_l+0xbf0>)
 80102ec:	2200      	movs	r2, #0
 80102ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80102f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010540 <_strtod_l+0xbf0>
 80102f6:	f04f 0800 	mov.w	r8, #0
 80102fa:	4b92      	ldr	r3, [pc, #584]	; (8010544 <_strtod_l+0xbf4>)
 80102fc:	403b      	ands	r3, r7
 80102fe:	930d      	str	r3, [sp, #52]	; 0x34
 8010300:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010302:	4b91      	ldr	r3, [pc, #580]	; (8010548 <_strtod_l+0xbf8>)
 8010304:	429a      	cmp	r2, r3
 8010306:	f040 80b0 	bne.w	801046a <_strtod_l+0xb1a>
 801030a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801030e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010312:	ec4b ab10 	vmov	d0, sl, fp
 8010316:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801031a:	f002 fa39 	bl	8012790 <__ulp>
 801031e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010322:	ec53 2b10 	vmov	r2, r3, d0
 8010326:	f7f0 f987 	bl	8000638 <__aeabi_dmul>
 801032a:	4652      	mov	r2, sl
 801032c:	465b      	mov	r3, fp
 801032e:	f7ef ffcd 	bl	80002cc <__adddf3>
 8010332:	460b      	mov	r3, r1
 8010334:	4983      	ldr	r1, [pc, #524]	; (8010544 <_strtod_l+0xbf4>)
 8010336:	4a85      	ldr	r2, [pc, #532]	; (801054c <_strtod_l+0xbfc>)
 8010338:	4019      	ands	r1, r3
 801033a:	4291      	cmp	r1, r2
 801033c:	4682      	mov	sl, r0
 801033e:	d960      	bls.n	8010402 <_strtod_l+0xab2>
 8010340:	ee18 3a90 	vmov	r3, s17
 8010344:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010348:	4293      	cmp	r3, r2
 801034a:	d104      	bne.n	8010356 <_strtod_l+0xa06>
 801034c:	ee18 3a10 	vmov	r3, s16
 8010350:	3301      	adds	r3, #1
 8010352:	f43f ad45 	beq.w	800fde0 <_strtod_l+0x490>
 8010356:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010558 <_strtod_l+0xc08>
 801035a:	f04f 3aff 	mov.w	sl, #4294967295
 801035e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010360:	4620      	mov	r0, r4
 8010362:	f001 fee3 	bl	801212c <_Bfree>
 8010366:	9905      	ldr	r1, [sp, #20]
 8010368:	4620      	mov	r0, r4
 801036a:	f001 fedf 	bl	801212c <_Bfree>
 801036e:	4631      	mov	r1, r6
 8010370:	4620      	mov	r0, r4
 8010372:	f001 fedb 	bl	801212c <_Bfree>
 8010376:	4629      	mov	r1, r5
 8010378:	4620      	mov	r0, r4
 801037a:	f001 fed7 	bl	801212c <_Bfree>
 801037e:	e61a      	b.n	800ffb6 <_strtod_l+0x666>
 8010380:	f1ba 0f00 	cmp.w	sl, #0
 8010384:	d11b      	bne.n	80103be <_strtod_l+0xa6e>
 8010386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801038a:	b9f3      	cbnz	r3, 80103ca <_strtod_l+0xa7a>
 801038c:	4b6c      	ldr	r3, [pc, #432]	; (8010540 <_strtod_l+0xbf0>)
 801038e:	2200      	movs	r2, #0
 8010390:	4640      	mov	r0, r8
 8010392:	4649      	mov	r1, r9
 8010394:	f7f0 fbc2 	bl	8000b1c <__aeabi_dcmplt>
 8010398:	b9d0      	cbnz	r0, 80103d0 <_strtod_l+0xa80>
 801039a:	4640      	mov	r0, r8
 801039c:	4649      	mov	r1, r9
 801039e:	4b6c      	ldr	r3, [pc, #432]	; (8010550 <_strtod_l+0xc00>)
 80103a0:	2200      	movs	r2, #0
 80103a2:	f7f0 f949 	bl	8000638 <__aeabi_dmul>
 80103a6:	4680      	mov	r8, r0
 80103a8:	4689      	mov	r9, r1
 80103aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80103ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80103b2:	9315      	str	r3, [sp, #84]	; 0x54
 80103b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80103b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80103bc:	e79d      	b.n	80102fa <_strtod_l+0x9aa>
 80103be:	f1ba 0f01 	cmp.w	sl, #1
 80103c2:	d102      	bne.n	80103ca <_strtod_l+0xa7a>
 80103c4:	2f00      	cmp	r7, #0
 80103c6:	f43f ad83 	beq.w	800fed0 <_strtod_l+0x580>
 80103ca:	4b62      	ldr	r3, [pc, #392]	; (8010554 <_strtod_l+0xc04>)
 80103cc:	2200      	movs	r2, #0
 80103ce:	e78e      	b.n	80102ee <_strtod_l+0x99e>
 80103d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010550 <_strtod_l+0xc00>
 80103d4:	f04f 0800 	mov.w	r8, #0
 80103d8:	e7e7      	b.n	80103aa <_strtod_l+0xa5a>
 80103da:	4b5d      	ldr	r3, [pc, #372]	; (8010550 <_strtod_l+0xc00>)
 80103dc:	4640      	mov	r0, r8
 80103de:	4649      	mov	r1, r9
 80103e0:	2200      	movs	r2, #0
 80103e2:	f7f0 f929 	bl	8000638 <__aeabi_dmul>
 80103e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103e8:	4680      	mov	r8, r0
 80103ea:	4689      	mov	r9, r1
 80103ec:	b933      	cbnz	r3, 80103fc <_strtod_l+0xaac>
 80103ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103f2:	900e      	str	r0, [sp, #56]	; 0x38
 80103f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80103f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80103fa:	e7dd      	b.n	80103b8 <_strtod_l+0xa68>
 80103fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010400:	e7f9      	b.n	80103f6 <_strtod_l+0xaa6>
 8010402:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010406:	9b04      	ldr	r3, [sp, #16]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d1a8      	bne.n	801035e <_strtod_l+0xa0e>
 801040c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010410:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010412:	0d1b      	lsrs	r3, r3, #20
 8010414:	051b      	lsls	r3, r3, #20
 8010416:	429a      	cmp	r2, r3
 8010418:	d1a1      	bne.n	801035e <_strtod_l+0xa0e>
 801041a:	4640      	mov	r0, r8
 801041c:	4649      	mov	r1, r9
 801041e:	f7f0 fc6b 	bl	8000cf8 <__aeabi_d2lz>
 8010422:	f7f0 f8db 	bl	80005dc <__aeabi_l2d>
 8010426:	4602      	mov	r2, r0
 8010428:	460b      	mov	r3, r1
 801042a:	4640      	mov	r0, r8
 801042c:	4649      	mov	r1, r9
 801042e:	f7ef ff4b 	bl	80002c8 <__aeabi_dsub>
 8010432:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010434:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010438:	ea43 030a 	orr.w	r3, r3, sl
 801043c:	4313      	orrs	r3, r2
 801043e:	4680      	mov	r8, r0
 8010440:	4689      	mov	r9, r1
 8010442:	d055      	beq.n	80104f0 <_strtod_l+0xba0>
 8010444:	a336      	add	r3, pc, #216	; (adr r3, 8010520 <_strtod_l+0xbd0>)
 8010446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044a:	f7f0 fb67 	bl	8000b1c <__aeabi_dcmplt>
 801044e:	2800      	cmp	r0, #0
 8010450:	f47f acd0 	bne.w	800fdf4 <_strtod_l+0x4a4>
 8010454:	a334      	add	r3, pc, #208	; (adr r3, 8010528 <_strtod_l+0xbd8>)
 8010456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045a:	4640      	mov	r0, r8
 801045c:	4649      	mov	r1, r9
 801045e:	f7f0 fb7b 	bl	8000b58 <__aeabi_dcmpgt>
 8010462:	2800      	cmp	r0, #0
 8010464:	f43f af7b 	beq.w	801035e <_strtod_l+0xa0e>
 8010468:	e4c4      	b.n	800fdf4 <_strtod_l+0x4a4>
 801046a:	9b04      	ldr	r3, [sp, #16]
 801046c:	b333      	cbz	r3, 80104bc <_strtod_l+0xb6c>
 801046e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010470:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010474:	d822      	bhi.n	80104bc <_strtod_l+0xb6c>
 8010476:	a32e      	add	r3, pc, #184	; (adr r3, 8010530 <_strtod_l+0xbe0>)
 8010478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047c:	4640      	mov	r0, r8
 801047e:	4649      	mov	r1, r9
 8010480:	f7f0 fb56 	bl	8000b30 <__aeabi_dcmple>
 8010484:	b1a0      	cbz	r0, 80104b0 <_strtod_l+0xb60>
 8010486:	4649      	mov	r1, r9
 8010488:	4640      	mov	r0, r8
 801048a:	f7f0 fbad 	bl	8000be8 <__aeabi_d2uiz>
 801048e:	2801      	cmp	r0, #1
 8010490:	bf38      	it	cc
 8010492:	2001      	movcc	r0, #1
 8010494:	f7f0 f856 	bl	8000544 <__aeabi_ui2d>
 8010498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801049a:	4680      	mov	r8, r0
 801049c:	4689      	mov	r9, r1
 801049e:	bb23      	cbnz	r3, 80104ea <_strtod_l+0xb9a>
 80104a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104a4:	9010      	str	r0, [sp, #64]	; 0x40
 80104a6:	9311      	str	r3, [sp, #68]	; 0x44
 80104a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80104ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80104b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80104b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80104b8:	1a9b      	subs	r3, r3, r2
 80104ba:	9309      	str	r3, [sp, #36]	; 0x24
 80104bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80104c0:	eeb0 0a48 	vmov.f32	s0, s16
 80104c4:	eef0 0a68 	vmov.f32	s1, s17
 80104c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80104cc:	f002 f960 	bl	8012790 <__ulp>
 80104d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80104d4:	ec53 2b10 	vmov	r2, r3, d0
 80104d8:	f7f0 f8ae 	bl	8000638 <__aeabi_dmul>
 80104dc:	ec53 2b18 	vmov	r2, r3, d8
 80104e0:	f7ef fef4 	bl	80002cc <__adddf3>
 80104e4:	4682      	mov	sl, r0
 80104e6:	468b      	mov	fp, r1
 80104e8:	e78d      	b.n	8010406 <_strtod_l+0xab6>
 80104ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80104ee:	e7db      	b.n	80104a8 <_strtod_l+0xb58>
 80104f0:	a311      	add	r3, pc, #68	; (adr r3, 8010538 <_strtod_l+0xbe8>)
 80104f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f6:	f7f0 fb11 	bl	8000b1c <__aeabi_dcmplt>
 80104fa:	e7b2      	b.n	8010462 <_strtod_l+0xb12>
 80104fc:	2300      	movs	r3, #0
 80104fe:	930a      	str	r3, [sp, #40]	; 0x28
 8010500:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010502:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010504:	6013      	str	r3, [r2, #0]
 8010506:	f7ff ba6b 	b.w	800f9e0 <_strtod_l+0x90>
 801050a:	2a65      	cmp	r2, #101	; 0x65
 801050c:	f43f ab5f 	beq.w	800fbce <_strtod_l+0x27e>
 8010510:	2a45      	cmp	r2, #69	; 0x45
 8010512:	f43f ab5c 	beq.w	800fbce <_strtod_l+0x27e>
 8010516:	2301      	movs	r3, #1
 8010518:	f7ff bb94 	b.w	800fc44 <_strtod_l+0x2f4>
 801051c:	f3af 8000 	nop.w
 8010520:	94a03595 	.word	0x94a03595
 8010524:	3fdfffff 	.word	0x3fdfffff
 8010528:	35afe535 	.word	0x35afe535
 801052c:	3fe00000 	.word	0x3fe00000
 8010530:	ffc00000 	.word	0xffc00000
 8010534:	41dfffff 	.word	0x41dfffff
 8010538:	94a03595 	.word	0x94a03595
 801053c:	3fcfffff 	.word	0x3fcfffff
 8010540:	3ff00000 	.word	0x3ff00000
 8010544:	7ff00000 	.word	0x7ff00000
 8010548:	7fe00000 	.word	0x7fe00000
 801054c:	7c9fffff 	.word	0x7c9fffff
 8010550:	3fe00000 	.word	0x3fe00000
 8010554:	bff00000 	.word	0xbff00000
 8010558:	7fefffff 	.word	0x7fefffff

0801055c <_strtod_r>:
 801055c:	4b01      	ldr	r3, [pc, #4]	; (8010564 <_strtod_r+0x8>)
 801055e:	f7ff b9f7 	b.w	800f950 <_strtod_l>
 8010562:	bf00      	nop
 8010564:	20000178 	.word	0x20000178

08010568 <_strtol_l.constprop.0>:
 8010568:	2b01      	cmp	r3, #1
 801056a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801056e:	d001      	beq.n	8010574 <_strtol_l.constprop.0+0xc>
 8010570:	2b24      	cmp	r3, #36	; 0x24
 8010572:	d906      	bls.n	8010582 <_strtol_l.constprop.0+0x1a>
 8010574:	f7fe f98c 	bl	800e890 <__errno>
 8010578:	2316      	movs	r3, #22
 801057a:	6003      	str	r3, [r0, #0]
 801057c:	2000      	movs	r0, #0
 801057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010582:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010668 <_strtol_l.constprop.0+0x100>
 8010586:	460d      	mov	r5, r1
 8010588:	462e      	mov	r6, r5
 801058a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801058e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010592:	f017 0708 	ands.w	r7, r7, #8
 8010596:	d1f7      	bne.n	8010588 <_strtol_l.constprop.0+0x20>
 8010598:	2c2d      	cmp	r4, #45	; 0x2d
 801059a:	d132      	bne.n	8010602 <_strtol_l.constprop.0+0x9a>
 801059c:	782c      	ldrb	r4, [r5, #0]
 801059e:	2701      	movs	r7, #1
 80105a0:	1cb5      	adds	r5, r6, #2
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d05b      	beq.n	801065e <_strtol_l.constprop.0+0xf6>
 80105a6:	2b10      	cmp	r3, #16
 80105a8:	d109      	bne.n	80105be <_strtol_l.constprop.0+0x56>
 80105aa:	2c30      	cmp	r4, #48	; 0x30
 80105ac:	d107      	bne.n	80105be <_strtol_l.constprop.0+0x56>
 80105ae:	782c      	ldrb	r4, [r5, #0]
 80105b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80105b4:	2c58      	cmp	r4, #88	; 0x58
 80105b6:	d14d      	bne.n	8010654 <_strtol_l.constprop.0+0xec>
 80105b8:	786c      	ldrb	r4, [r5, #1]
 80105ba:	2310      	movs	r3, #16
 80105bc:	3502      	adds	r5, #2
 80105be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80105c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80105c6:	f04f 0c00 	mov.w	ip, #0
 80105ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80105ce:	4666      	mov	r6, ip
 80105d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80105d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80105d8:	f1be 0f09 	cmp.w	lr, #9
 80105dc:	d816      	bhi.n	801060c <_strtol_l.constprop.0+0xa4>
 80105de:	4674      	mov	r4, lr
 80105e0:	42a3      	cmp	r3, r4
 80105e2:	dd24      	ble.n	801062e <_strtol_l.constprop.0+0xc6>
 80105e4:	f1bc 0f00 	cmp.w	ip, #0
 80105e8:	db1e      	blt.n	8010628 <_strtol_l.constprop.0+0xc0>
 80105ea:	45b1      	cmp	r9, r6
 80105ec:	d31c      	bcc.n	8010628 <_strtol_l.constprop.0+0xc0>
 80105ee:	d101      	bne.n	80105f4 <_strtol_l.constprop.0+0x8c>
 80105f0:	45a2      	cmp	sl, r4
 80105f2:	db19      	blt.n	8010628 <_strtol_l.constprop.0+0xc0>
 80105f4:	fb06 4603 	mla	r6, r6, r3, r4
 80105f8:	f04f 0c01 	mov.w	ip, #1
 80105fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010600:	e7e8      	b.n	80105d4 <_strtol_l.constprop.0+0x6c>
 8010602:	2c2b      	cmp	r4, #43	; 0x2b
 8010604:	bf04      	itt	eq
 8010606:	782c      	ldrbeq	r4, [r5, #0]
 8010608:	1cb5      	addeq	r5, r6, #2
 801060a:	e7ca      	b.n	80105a2 <_strtol_l.constprop.0+0x3a>
 801060c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010610:	f1be 0f19 	cmp.w	lr, #25
 8010614:	d801      	bhi.n	801061a <_strtol_l.constprop.0+0xb2>
 8010616:	3c37      	subs	r4, #55	; 0x37
 8010618:	e7e2      	b.n	80105e0 <_strtol_l.constprop.0+0x78>
 801061a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801061e:	f1be 0f19 	cmp.w	lr, #25
 8010622:	d804      	bhi.n	801062e <_strtol_l.constprop.0+0xc6>
 8010624:	3c57      	subs	r4, #87	; 0x57
 8010626:	e7db      	b.n	80105e0 <_strtol_l.constprop.0+0x78>
 8010628:	f04f 3cff 	mov.w	ip, #4294967295
 801062c:	e7e6      	b.n	80105fc <_strtol_l.constprop.0+0x94>
 801062e:	f1bc 0f00 	cmp.w	ip, #0
 8010632:	da05      	bge.n	8010640 <_strtol_l.constprop.0+0xd8>
 8010634:	2322      	movs	r3, #34	; 0x22
 8010636:	6003      	str	r3, [r0, #0]
 8010638:	4646      	mov	r6, r8
 801063a:	b942      	cbnz	r2, 801064e <_strtol_l.constprop.0+0xe6>
 801063c:	4630      	mov	r0, r6
 801063e:	e79e      	b.n	801057e <_strtol_l.constprop.0+0x16>
 8010640:	b107      	cbz	r7, 8010644 <_strtol_l.constprop.0+0xdc>
 8010642:	4276      	negs	r6, r6
 8010644:	2a00      	cmp	r2, #0
 8010646:	d0f9      	beq.n	801063c <_strtol_l.constprop.0+0xd4>
 8010648:	f1bc 0f00 	cmp.w	ip, #0
 801064c:	d000      	beq.n	8010650 <_strtol_l.constprop.0+0xe8>
 801064e:	1e69      	subs	r1, r5, #1
 8010650:	6011      	str	r1, [r2, #0]
 8010652:	e7f3      	b.n	801063c <_strtol_l.constprop.0+0xd4>
 8010654:	2430      	movs	r4, #48	; 0x30
 8010656:	2b00      	cmp	r3, #0
 8010658:	d1b1      	bne.n	80105be <_strtol_l.constprop.0+0x56>
 801065a:	2308      	movs	r3, #8
 801065c:	e7af      	b.n	80105be <_strtol_l.constprop.0+0x56>
 801065e:	2c30      	cmp	r4, #48	; 0x30
 8010660:	d0a5      	beq.n	80105ae <_strtol_l.constprop.0+0x46>
 8010662:	230a      	movs	r3, #10
 8010664:	e7ab      	b.n	80105be <_strtol_l.constprop.0+0x56>
 8010666:	bf00      	nop
 8010668:	08014921 	.word	0x08014921

0801066c <_strtol_r>:
 801066c:	f7ff bf7c 	b.w	8010568 <_strtol_l.constprop.0>

08010670 <__swbuf_r>:
 8010670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010672:	460e      	mov	r6, r1
 8010674:	4614      	mov	r4, r2
 8010676:	4605      	mov	r5, r0
 8010678:	b118      	cbz	r0, 8010682 <__swbuf_r+0x12>
 801067a:	6983      	ldr	r3, [r0, #24]
 801067c:	b90b      	cbnz	r3, 8010682 <__swbuf_r+0x12>
 801067e:	f001 f86f 	bl	8011760 <__sinit>
 8010682:	4b21      	ldr	r3, [pc, #132]	; (8010708 <__swbuf_r+0x98>)
 8010684:	429c      	cmp	r4, r3
 8010686:	d12b      	bne.n	80106e0 <__swbuf_r+0x70>
 8010688:	686c      	ldr	r4, [r5, #4]
 801068a:	69a3      	ldr	r3, [r4, #24]
 801068c:	60a3      	str	r3, [r4, #8]
 801068e:	89a3      	ldrh	r3, [r4, #12]
 8010690:	071a      	lsls	r2, r3, #28
 8010692:	d52f      	bpl.n	80106f4 <__swbuf_r+0x84>
 8010694:	6923      	ldr	r3, [r4, #16]
 8010696:	b36b      	cbz	r3, 80106f4 <__swbuf_r+0x84>
 8010698:	6923      	ldr	r3, [r4, #16]
 801069a:	6820      	ldr	r0, [r4, #0]
 801069c:	1ac0      	subs	r0, r0, r3
 801069e:	6963      	ldr	r3, [r4, #20]
 80106a0:	b2f6      	uxtb	r6, r6
 80106a2:	4283      	cmp	r3, r0
 80106a4:	4637      	mov	r7, r6
 80106a6:	dc04      	bgt.n	80106b2 <__swbuf_r+0x42>
 80106a8:	4621      	mov	r1, r4
 80106aa:	4628      	mov	r0, r5
 80106ac:	f000 ffc4 	bl	8011638 <_fflush_r>
 80106b0:	bb30      	cbnz	r0, 8010700 <__swbuf_r+0x90>
 80106b2:	68a3      	ldr	r3, [r4, #8]
 80106b4:	3b01      	subs	r3, #1
 80106b6:	60a3      	str	r3, [r4, #8]
 80106b8:	6823      	ldr	r3, [r4, #0]
 80106ba:	1c5a      	adds	r2, r3, #1
 80106bc:	6022      	str	r2, [r4, #0]
 80106be:	701e      	strb	r6, [r3, #0]
 80106c0:	6963      	ldr	r3, [r4, #20]
 80106c2:	3001      	adds	r0, #1
 80106c4:	4283      	cmp	r3, r0
 80106c6:	d004      	beq.n	80106d2 <__swbuf_r+0x62>
 80106c8:	89a3      	ldrh	r3, [r4, #12]
 80106ca:	07db      	lsls	r3, r3, #31
 80106cc:	d506      	bpl.n	80106dc <__swbuf_r+0x6c>
 80106ce:	2e0a      	cmp	r6, #10
 80106d0:	d104      	bne.n	80106dc <__swbuf_r+0x6c>
 80106d2:	4621      	mov	r1, r4
 80106d4:	4628      	mov	r0, r5
 80106d6:	f000 ffaf 	bl	8011638 <_fflush_r>
 80106da:	b988      	cbnz	r0, 8010700 <__swbuf_r+0x90>
 80106dc:	4638      	mov	r0, r7
 80106de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106e0:	4b0a      	ldr	r3, [pc, #40]	; (801070c <__swbuf_r+0x9c>)
 80106e2:	429c      	cmp	r4, r3
 80106e4:	d101      	bne.n	80106ea <__swbuf_r+0x7a>
 80106e6:	68ac      	ldr	r4, [r5, #8]
 80106e8:	e7cf      	b.n	801068a <__swbuf_r+0x1a>
 80106ea:	4b09      	ldr	r3, [pc, #36]	; (8010710 <__swbuf_r+0xa0>)
 80106ec:	429c      	cmp	r4, r3
 80106ee:	bf08      	it	eq
 80106f0:	68ec      	ldreq	r4, [r5, #12]
 80106f2:	e7ca      	b.n	801068a <__swbuf_r+0x1a>
 80106f4:	4621      	mov	r1, r4
 80106f6:	4628      	mov	r0, r5
 80106f8:	f000 f81e 	bl	8010738 <__swsetup_r>
 80106fc:	2800      	cmp	r0, #0
 80106fe:	d0cb      	beq.n	8010698 <__swbuf_r+0x28>
 8010700:	f04f 37ff 	mov.w	r7, #4294967295
 8010704:	e7ea      	b.n	80106dc <__swbuf_r+0x6c>
 8010706:	bf00      	nop
 8010708:	08014b60 	.word	0x08014b60
 801070c:	08014b80 	.word	0x08014b80
 8010710:	08014b40 	.word	0x08014b40

08010714 <_write_r>:
 8010714:	b538      	push	{r3, r4, r5, lr}
 8010716:	4d07      	ldr	r5, [pc, #28]	; (8010734 <_write_r+0x20>)
 8010718:	4604      	mov	r4, r0
 801071a:	4608      	mov	r0, r1
 801071c:	4611      	mov	r1, r2
 801071e:	2200      	movs	r2, #0
 8010720:	602a      	str	r2, [r5, #0]
 8010722:	461a      	mov	r2, r3
 8010724:	f7f3 fa0e 	bl	8003b44 <_write>
 8010728:	1c43      	adds	r3, r0, #1
 801072a:	d102      	bne.n	8010732 <_write_r+0x1e>
 801072c:	682b      	ldr	r3, [r5, #0]
 801072e:	b103      	cbz	r3, 8010732 <_write_r+0x1e>
 8010730:	6023      	str	r3, [r4, #0]
 8010732:	bd38      	pop	{r3, r4, r5, pc}
 8010734:	2000314c 	.word	0x2000314c

08010738 <__swsetup_r>:
 8010738:	4b32      	ldr	r3, [pc, #200]	; (8010804 <__swsetup_r+0xcc>)
 801073a:	b570      	push	{r4, r5, r6, lr}
 801073c:	681d      	ldr	r5, [r3, #0]
 801073e:	4606      	mov	r6, r0
 8010740:	460c      	mov	r4, r1
 8010742:	b125      	cbz	r5, 801074e <__swsetup_r+0x16>
 8010744:	69ab      	ldr	r3, [r5, #24]
 8010746:	b913      	cbnz	r3, 801074e <__swsetup_r+0x16>
 8010748:	4628      	mov	r0, r5
 801074a:	f001 f809 	bl	8011760 <__sinit>
 801074e:	4b2e      	ldr	r3, [pc, #184]	; (8010808 <__swsetup_r+0xd0>)
 8010750:	429c      	cmp	r4, r3
 8010752:	d10f      	bne.n	8010774 <__swsetup_r+0x3c>
 8010754:	686c      	ldr	r4, [r5, #4]
 8010756:	89a3      	ldrh	r3, [r4, #12]
 8010758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801075c:	0719      	lsls	r1, r3, #28
 801075e:	d42c      	bmi.n	80107ba <__swsetup_r+0x82>
 8010760:	06dd      	lsls	r5, r3, #27
 8010762:	d411      	bmi.n	8010788 <__swsetup_r+0x50>
 8010764:	2309      	movs	r3, #9
 8010766:	6033      	str	r3, [r6, #0]
 8010768:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801076c:	81a3      	strh	r3, [r4, #12]
 801076e:	f04f 30ff 	mov.w	r0, #4294967295
 8010772:	e03e      	b.n	80107f2 <__swsetup_r+0xba>
 8010774:	4b25      	ldr	r3, [pc, #148]	; (801080c <__swsetup_r+0xd4>)
 8010776:	429c      	cmp	r4, r3
 8010778:	d101      	bne.n	801077e <__swsetup_r+0x46>
 801077a:	68ac      	ldr	r4, [r5, #8]
 801077c:	e7eb      	b.n	8010756 <__swsetup_r+0x1e>
 801077e:	4b24      	ldr	r3, [pc, #144]	; (8010810 <__swsetup_r+0xd8>)
 8010780:	429c      	cmp	r4, r3
 8010782:	bf08      	it	eq
 8010784:	68ec      	ldreq	r4, [r5, #12]
 8010786:	e7e6      	b.n	8010756 <__swsetup_r+0x1e>
 8010788:	0758      	lsls	r0, r3, #29
 801078a:	d512      	bpl.n	80107b2 <__swsetup_r+0x7a>
 801078c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801078e:	b141      	cbz	r1, 80107a2 <__swsetup_r+0x6a>
 8010790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010794:	4299      	cmp	r1, r3
 8010796:	d002      	beq.n	801079e <__swsetup_r+0x66>
 8010798:	4630      	mov	r0, r6
 801079a:	f002 f95f 	bl	8012a5c <_free_r>
 801079e:	2300      	movs	r3, #0
 80107a0:	6363      	str	r3, [r4, #52]	; 0x34
 80107a2:	89a3      	ldrh	r3, [r4, #12]
 80107a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80107a8:	81a3      	strh	r3, [r4, #12]
 80107aa:	2300      	movs	r3, #0
 80107ac:	6063      	str	r3, [r4, #4]
 80107ae:	6923      	ldr	r3, [r4, #16]
 80107b0:	6023      	str	r3, [r4, #0]
 80107b2:	89a3      	ldrh	r3, [r4, #12]
 80107b4:	f043 0308 	orr.w	r3, r3, #8
 80107b8:	81a3      	strh	r3, [r4, #12]
 80107ba:	6923      	ldr	r3, [r4, #16]
 80107bc:	b94b      	cbnz	r3, 80107d2 <__swsetup_r+0x9a>
 80107be:	89a3      	ldrh	r3, [r4, #12]
 80107c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80107c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107c8:	d003      	beq.n	80107d2 <__swsetup_r+0x9a>
 80107ca:	4621      	mov	r1, r4
 80107cc:	4630      	mov	r0, r6
 80107ce:	f001 fc13 	bl	8011ff8 <__smakebuf_r>
 80107d2:	89a0      	ldrh	r0, [r4, #12]
 80107d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107d8:	f010 0301 	ands.w	r3, r0, #1
 80107dc:	d00a      	beq.n	80107f4 <__swsetup_r+0xbc>
 80107de:	2300      	movs	r3, #0
 80107e0:	60a3      	str	r3, [r4, #8]
 80107e2:	6963      	ldr	r3, [r4, #20]
 80107e4:	425b      	negs	r3, r3
 80107e6:	61a3      	str	r3, [r4, #24]
 80107e8:	6923      	ldr	r3, [r4, #16]
 80107ea:	b943      	cbnz	r3, 80107fe <__swsetup_r+0xc6>
 80107ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80107f0:	d1ba      	bne.n	8010768 <__swsetup_r+0x30>
 80107f2:	bd70      	pop	{r4, r5, r6, pc}
 80107f4:	0781      	lsls	r1, r0, #30
 80107f6:	bf58      	it	pl
 80107f8:	6963      	ldrpl	r3, [r4, #20]
 80107fa:	60a3      	str	r3, [r4, #8]
 80107fc:	e7f4      	b.n	80107e8 <__swsetup_r+0xb0>
 80107fe:	2000      	movs	r0, #0
 8010800:	e7f7      	b.n	80107f2 <__swsetup_r+0xba>
 8010802:	bf00      	nop
 8010804:	20000110 	.word	0x20000110
 8010808:	08014b60 	.word	0x08014b60
 801080c:	08014b80 	.word	0x08014b80
 8010810:	08014b40 	.word	0x08014b40

08010814 <_close_r>:
 8010814:	b538      	push	{r3, r4, r5, lr}
 8010816:	4d06      	ldr	r5, [pc, #24]	; (8010830 <_close_r+0x1c>)
 8010818:	2300      	movs	r3, #0
 801081a:	4604      	mov	r4, r0
 801081c:	4608      	mov	r0, r1
 801081e:	602b      	str	r3, [r5, #0]
 8010820:	f7f3 fcf7 	bl	8004212 <_close>
 8010824:	1c43      	adds	r3, r0, #1
 8010826:	d102      	bne.n	801082e <_close_r+0x1a>
 8010828:	682b      	ldr	r3, [r5, #0]
 801082a:	b103      	cbz	r3, 801082e <_close_r+0x1a>
 801082c:	6023      	str	r3, [r4, #0]
 801082e:	bd38      	pop	{r3, r4, r5, pc}
 8010830:	2000314c 	.word	0x2000314c

08010834 <quorem>:
 8010834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010838:	6903      	ldr	r3, [r0, #16]
 801083a:	690c      	ldr	r4, [r1, #16]
 801083c:	42a3      	cmp	r3, r4
 801083e:	4607      	mov	r7, r0
 8010840:	f2c0 8081 	blt.w	8010946 <quorem+0x112>
 8010844:	3c01      	subs	r4, #1
 8010846:	f101 0814 	add.w	r8, r1, #20
 801084a:	f100 0514 	add.w	r5, r0, #20
 801084e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010852:	9301      	str	r3, [sp, #4]
 8010854:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010858:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801085c:	3301      	adds	r3, #1
 801085e:	429a      	cmp	r2, r3
 8010860:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010864:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010868:	fbb2 f6f3 	udiv	r6, r2, r3
 801086c:	d331      	bcc.n	80108d2 <quorem+0x9e>
 801086e:	f04f 0e00 	mov.w	lr, #0
 8010872:	4640      	mov	r0, r8
 8010874:	46ac      	mov	ip, r5
 8010876:	46f2      	mov	sl, lr
 8010878:	f850 2b04 	ldr.w	r2, [r0], #4
 801087c:	b293      	uxth	r3, r2
 801087e:	fb06 e303 	mla	r3, r6, r3, lr
 8010882:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010886:	b29b      	uxth	r3, r3
 8010888:	ebaa 0303 	sub.w	r3, sl, r3
 801088c:	f8dc a000 	ldr.w	sl, [ip]
 8010890:	0c12      	lsrs	r2, r2, #16
 8010892:	fa13 f38a 	uxtah	r3, r3, sl
 8010896:	fb06 e202 	mla	r2, r6, r2, lr
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	9b00      	ldr	r3, [sp, #0]
 801089e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80108a2:	b292      	uxth	r2, r2
 80108a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80108a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80108ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80108b0:	4581      	cmp	r9, r0
 80108b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108b6:	f84c 3b04 	str.w	r3, [ip], #4
 80108ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80108be:	d2db      	bcs.n	8010878 <quorem+0x44>
 80108c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80108c4:	b92b      	cbnz	r3, 80108d2 <quorem+0x9e>
 80108c6:	9b01      	ldr	r3, [sp, #4]
 80108c8:	3b04      	subs	r3, #4
 80108ca:	429d      	cmp	r5, r3
 80108cc:	461a      	mov	r2, r3
 80108ce:	d32e      	bcc.n	801092e <quorem+0xfa>
 80108d0:	613c      	str	r4, [r7, #16]
 80108d2:	4638      	mov	r0, r7
 80108d4:	f001 feb6 	bl	8012644 <__mcmp>
 80108d8:	2800      	cmp	r0, #0
 80108da:	db24      	blt.n	8010926 <quorem+0xf2>
 80108dc:	3601      	adds	r6, #1
 80108de:	4628      	mov	r0, r5
 80108e0:	f04f 0c00 	mov.w	ip, #0
 80108e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80108e8:	f8d0 e000 	ldr.w	lr, [r0]
 80108ec:	b293      	uxth	r3, r2
 80108ee:	ebac 0303 	sub.w	r3, ip, r3
 80108f2:	0c12      	lsrs	r2, r2, #16
 80108f4:	fa13 f38e 	uxtah	r3, r3, lr
 80108f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80108fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010900:	b29b      	uxth	r3, r3
 8010902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010906:	45c1      	cmp	r9, r8
 8010908:	f840 3b04 	str.w	r3, [r0], #4
 801090c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010910:	d2e8      	bcs.n	80108e4 <quorem+0xb0>
 8010912:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801091a:	b922      	cbnz	r2, 8010926 <quorem+0xf2>
 801091c:	3b04      	subs	r3, #4
 801091e:	429d      	cmp	r5, r3
 8010920:	461a      	mov	r2, r3
 8010922:	d30a      	bcc.n	801093a <quorem+0x106>
 8010924:	613c      	str	r4, [r7, #16]
 8010926:	4630      	mov	r0, r6
 8010928:	b003      	add	sp, #12
 801092a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801092e:	6812      	ldr	r2, [r2, #0]
 8010930:	3b04      	subs	r3, #4
 8010932:	2a00      	cmp	r2, #0
 8010934:	d1cc      	bne.n	80108d0 <quorem+0x9c>
 8010936:	3c01      	subs	r4, #1
 8010938:	e7c7      	b.n	80108ca <quorem+0x96>
 801093a:	6812      	ldr	r2, [r2, #0]
 801093c:	3b04      	subs	r3, #4
 801093e:	2a00      	cmp	r2, #0
 8010940:	d1f0      	bne.n	8010924 <quorem+0xf0>
 8010942:	3c01      	subs	r4, #1
 8010944:	e7eb      	b.n	801091e <quorem+0xea>
 8010946:	2000      	movs	r0, #0
 8010948:	e7ee      	b.n	8010928 <quorem+0xf4>
 801094a:	0000      	movs	r0, r0
 801094c:	0000      	movs	r0, r0
	...

08010950 <_dtoa_r>:
 8010950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010954:	ed2d 8b04 	vpush	{d8-d9}
 8010958:	ec57 6b10 	vmov	r6, r7, d0
 801095c:	b093      	sub	sp, #76	; 0x4c
 801095e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010960:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010964:	9106      	str	r1, [sp, #24]
 8010966:	ee10 aa10 	vmov	sl, s0
 801096a:	4604      	mov	r4, r0
 801096c:	9209      	str	r2, [sp, #36]	; 0x24
 801096e:	930c      	str	r3, [sp, #48]	; 0x30
 8010970:	46bb      	mov	fp, r7
 8010972:	b975      	cbnz	r5, 8010992 <_dtoa_r+0x42>
 8010974:	2010      	movs	r0, #16
 8010976:	f001 fb7f 	bl	8012078 <malloc>
 801097a:	4602      	mov	r2, r0
 801097c:	6260      	str	r0, [r4, #36]	; 0x24
 801097e:	b920      	cbnz	r0, 801098a <_dtoa_r+0x3a>
 8010980:	4ba7      	ldr	r3, [pc, #668]	; (8010c20 <_dtoa_r+0x2d0>)
 8010982:	21ea      	movs	r1, #234	; 0xea
 8010984:	48a7      	ldr	r0, [pc, #668]	; (8010c24 <_dtoa_r+0x2d4>)
 8010986:	f003 f857 	bl	8013a38 <__assert_func>
 801098a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801098e:	6005      	str	r5, [r0, #0]
 8010990:	60c5      	str	r5, [r0, #12]
 8010992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010994:	6819      	ldr	r1, [r3, #0]
 8010996:	b151      	cbz	r1, 80109ae <_dtoa_r+0x5e>
 8010998:	685a      	ldr	r2, [r3, #4]
 801099a:	604a      	str	r2, [r1, #4]
 801099c:	2301      	movs	r3, #1
 801099e:	4093      	lsls	r3, r2
 80109a0:	608b      	str	r3, [r1, #8]
 80109a2:	4620      	mov	r0, r4
 80109a4:	f001 fbc2 	bl	801212c <_Bfree>
 80109a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109aa:	2200      	movs	r2, #0
 80109ac:	601a      	str	r2, [r3, #0]
 80109ae:	1e3b      	subs	r3, r7, #0
 80109b0:	bfaa      	itet	ge
 80109b2:	2300      	movge	r3, #0
 80109b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80109b8:	f8c8 3000 	strge.w	r3, [r8]
 80109bc:	4b9a      	ldr	r3, [pc, #616]	; (8010c28 <_dtoa_r+0x2d8>)
 80109be:	bfbc      	itt	lt
 80109c0:	2201      	movlt	r2, #1
 80109c2:	f8c8 2000 	strlt.w	r2, [r8]
 80109c6:	ea33 030b 	bics.w	r3, r3, fp
 80109ca:	d11b      	bne.n	8010a04 <_dtoa_r+0xb4>
 80109cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80109d2:	6013      	str	r3, [r2, #0]
 80109d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80109d8:	4333      	orrs	r3, r6
 80109da:	f000 8592 	beq.w	8011502 <_dtoa_r+0xbb2>
 80109de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109e0:	b963      	cbnz	r3, 80109fc <_dtoa_r+0xac>
 80109e2:	4b92      	ldr	r3, [pc, #584]	; (8010c2c <_dtoa_r+0x2dc>)
 80109e4:	e022      	b.n	8010a2c <_dtoa_r+0xdc>
 80109e6:	4b92      	ldr	r3, [pc, #584]	; (8010c30 <_dtoa_r+0x2e0>)
 80109e8:	9301      	str	r3, [sp, #4]
 80109ea:	3308      	adds	r3, #8
 80109ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80109ee:	6013      	str	r3, [r2, #0]
 80109f0:	9801      	ldr	r0, [sp, #4]
 80109f2:	b013      	add	sp, #76	; 0x4c
 80109f4:	ecbd 8b04 	vpop	{d8-d9}
 80109f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109fc:	4b8b      	ldr	r3, [pc, #556]	; (8010c2c <_dtoa_r+0x2dc>)
 80109fe:	9301      	str	r3, [sp, #4]
 8010a00:	3303      	adds	r3, #3
 8010a02:	e7f3      	b.n	80109ec <_dtoa_r+0x9c>
 8010a04:	2200      	movs	r2, #0
 8010a06:	2300      	movs	r3, #0
 8010a08:	4650      	mov	r0, sl
 8010a0a:	4659      	mov	r1, fp
 8010a0c:	f7f0 f87c 	bl	8000b08 <__aeabi_dcmpeq>
 8010a10:	ec4b ab19 	vmov	d9, sl, fp
 8010a14:	4680      	mov	r8, r0
 8010a16:	b158      	cbz	r0, 8010a30 <_dtoa_r+0xe0>
 8010a18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	6013      	str	r3, [r2, #0]
 8010a1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f000 856b 	beq.w	80114fc <_dtoa_r+0xbac>
 8010a26:	4883      	ldr	r0, [pc, #524]	; (8010c34 <_dtoa_r+0x2e4>)
 8010a28:	6018      	str	r0, [r3, #0]
 8010a2a:	1e43      	subs	r3, r0, #1
 8010a2c:	9301      	str	r3, [sp, #4]
 8010a2e:	e7df      	b.n	80109f0 <_dtoa_r+0xa0>
 8010a30:	ec4b ab10 	vmov	d0, sl, fp
 8010a34:	aa10      	add	r2, sp, #64	; 0x40
 8010a36:	a911      	add	r1, sp, #68	; 0x44
 8010a38:	4620      	mov	r0, r4
 8010a3a:	f001 ff25 	bl	8012888 <__d2b>
 8010a3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010a42:	ee08 0a10 	vmov	s16, r0
 8010a46:	2d00      	cmp	r5, #0
 8010a48:	f000 8084 	beq.w	8010b54 <_dtoa_r+0x204>
 8010a4c:	ee19 3a90 	vmov	r3, s19
 8010a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010a58:	4656      	mov	r6, sl
 8010a5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010a5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010a62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010a66:	4b74      	ldr	r3, [pc, #464]	; (8010c38 <_dtoa_r+0x2e8>)
 8010a68:	2200      	movs	r2, #0
 8010a6a:	4630      	mov	r0, r6
 8010a6c:	4639      	mov	r1, r7
 8010a6e:	f7ef fc2b 	bl	80002c8 <__aeabi_dsub>
 8010a72:	a365      	add	r3, pc, #404	; (adr r3, 8010c08 <_dtoa_r+0x2b8>)
 8010a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a78:	f7ef fdde 	bl	8000638 <__aeabi_dmul>
 8010a7c:	a364      	add	r3, pc, #400	; (adr r3, 8010c10 <_dtoa_r+0x2c0>)
 8010a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a82:	f7ef fc23 	bl	80002cc <__adddf3>
 8010a86:	4606      	mov	r6, r0
 8010a88:	4628      	mov	r0, r5
 8010a8a:	460f      	mov	r7, r1
 8010a8c:	f7ef fd6a 	bl	8000564 <__aeabi_i2d>
 8010a90:	a361      	add	r3, pc, #388	; (adr r3, 8010c18 <_dtoa_r+0x2c8>)
 8010a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a96:	f7ef fdcf 	bl	8000638 <__aeabi_dmul>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	4639      	mov	r1, r7
 8010aa2:	f7ef fc13 	bl	80002cc <__adddf3>
 8010aa6:	4606      	mov	r6, r0
 8010aa8:	460f      	mov	r7, r1
 8010aaa:	f7f0 f875 	bl	8000b98 <__aeabi_d2iz>
 8010aae:	2200      	movs	r2, #0
 8010ab0:	9000      	str	r0, [sp, #0]
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	4630      	mov	r0, r6
 8010ab6:	4639      	mov	r1, r7
 8010ab8:	f7f0 f830 	bl	8000b1c <__aeabi_dcmplt>
 8010abc:	b150      	cbz	r0, 8010ad4 <_dtoa_r+0x184>
 8010abe:	9800      	ldr	r0, [sp, #0]
 8010ac0:	f7ef fd50 	bl	8000564 <__aeabi_i2d>
 8010ac4:	4632      	mov	r2, r6
 8010ac6:	463b      	mov	r3, r7
 8010ac8:	f7f0 f81e 	bl	8000b08 <__aeabi_dcmpeq>
 8010acc:	b910      	cbnz	r0, 8010ad4 <_dtoa_r+0x184>
 8010ace:	9b00      	ldr	r3, [sp, #0]
 8010ad0:	3b01      	subs	r3, #1
 8010ad2:	9300      	str	r3, [sp, #0]
 8010ad4:	9b00      	ldr	r3, [sp, #0]
 8010ad6:	2b16      	cmp	r3, #22
 8010ad8:	d85a      	bhi.n	8010b90 <_dtoa_r+0x240>
 8010ada:	9a00      	ldr	r2, [sp, #0]
 8010adc:	4b57      	ldr	r3, [pc, #348]	; (8010c3c <_dtoa_r+0x2ec>)
 8010ade:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae6:	ec51 0b19 	vmov	r0, r1, d9
 8010aea:	f7f0 f817 	bl	8000b1c <__aeabi_dcmplt>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	d050      	beq.n	8010b94 <_dtoa_r+0x244>
 8010af2:	9b00      	ldr	r3, [sp, #0]
 8010af4:	3b01      	subs	r3, #1
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	2300      	movs	r3, #0
 8010afa:	930b      	str	r3, [sp, #44]	; 0x2c
 8010afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010afe:	1b5d      	subs	r5, r3, r5
 8010b00:	1e6b      	subs	r3, r5, #1
 8010b02:	9305      	str	r3, [sp, #20]
 8010b04:	bf45      	ittet	mi
 8010b06:	f1c5 0301 	rsbmi	r3, r5, #1
 8010b0a:	9304      	strmi	r3, [sp, #16]
 8010b0c:	2300      	movpl	r3, #0
 8010b0e:	2300      	movmi	r3, #0
 8010b10:	bf4c      	ite	mi
 8010b12:	9305      	strmi	r3, [sp, #20]
 8010b14:	9304      	strpl	r3, [sp, #16]
 8010b16:	9b00      	ldr	r3, [sp, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	db3d      	blt.n	8010b98 <_dtoa_r+0x248>
 8010b1c:	9b05      	ldr	r3, [sp, #20]
 8010b1e:	9a00      	ldr	r2, [sp, #0]
 8010b20:	920a      	str	r2, [sp, #40]	; 0x28
 8010b22:	4413      	add	r3, r2
 8010b24:	9305      	str	r3, [sp, #20]
 8010b26:	2300      	movs	r3, #0
 8010b28:	9307      	str	r3, [sp, #28]
 8010b2a:	9b06      	ldr	r3, [sp, #24]
 8010b2c:	2b09      	cmp	r3, #9
 8010b2e:	f200 8089 	bhi.w	8010c44 <_dtoa_r+0x2f4>
 8010b32:	2b05      	cmp	r3, #5
 8010b34:	bfc4      	itt	gt
 8010b36:	3b04      	subgt	r3, #4
 8010b38:	9306      	strgt	r3, [sp, #24]
 8010b3a:	9b06      	ldr	r3, [sp, #24]
 8010b3c:	f1a3 0302 	sub.w	r3, r3, #2
 8010b40:	bfcc      	ite	gt
 8010b42:	2500      	movgt	r5, #0
 8010b44:	2501      	movle	r5, #1
 8010b46:	2b03      	cmp	r3, #3
 8010b48:	f200 8087 	bhi.w	8010c5a <_dtoa_r+0x30a>
 8010b4c:	e8df f003 	tbb	[pc, r3]
 8010b50:	59383a2d 	.word	0x59383a2d
 8010b54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010b58:	441d      	add	r5, r3
 8010b5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010b5e:	2b20      	cmp	r3, #32
 8010b60:	bfc1      	itttt	gt
 8010b62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010b66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010b6a:	fa0b f303 	lslgt.w	r3, fp, r3
 8010b6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010b72:	bfda      	itte	le
 8010b74:	f1c3 0320 	rsble	r3, r3, #32
 8010b78:	fa06 f003 	lslle.w	r0, r6, r3
 8010b7c:	4318      	orrgt	r0, r3
 8010b7e:	f7ef fce1 	bl	8000544 <__aeabi_ui2d>
 8010b82:	2301      	movs	r3, #1
 8010b84:	4606      	mov	r6, r0
 8010b86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010b8a:	3d01      	subs	r5, #1
 8010b8c:	930e      	str	r3, [sp, #56]	; 0x38
 8010b8e:	e76a      	b.n	8010a66 <_dtoa_r+0x116>
 8010b90:	2301      	movs	r3, #1
 8010b92:	e7b2      	b.n	8010afa <_dtoa_r+0x1aa>
 8010b94:	900b      	str	r0, [sp, #44]	; 0x2c
 8010b96:	e7b1      	b.n	8010afc <_dtoa_r+0x1ac>
 8010b98:	9b04      	ldr	r3, [sp, #16]
 8010b9a:	9a00      	ldr	r2, [sp, #0]
 8010b9c:	1a9b      	subs	r3, r3, r2
 8010b9e:	9304      	str	r3, [sp, #16]
 8010ba0:	4253      	negs	r3, r2
 8010ba2:	9307      	str	r3, [sp, #28]
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8010ba8:	e7bf      	b.n	8010b2a <_dtoa_r+0x1da>
 8010baa:	2300      	movs	r3, #0
 8010bac:	9308      	str	r3, [sp, #32]
 8010bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	dc55      	bgt.n	8010c60 <_dtoa_r+0x310>
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010bba:	461a      	mov	r2, r3
 8010bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8010bbe:	e00c      	b.n	8010bda <_dtoa_r+0x28a>
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	e7f3      	b.n	8010bac <_dtoa_r+0x25c>
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bc8:	9308      	str	r3, [sp, #32]
 8010bca:	9b00      	ldr	r3, [sp, #0]
 8010bcc:	4413      	add	r3, r2
 8010bce:	9302      	str	r3, [sp, #8]
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	2b01      	cmp	r3, #1
 8010bd4:	9303      	str	r3, [sp, #12]
 8010bd6:	bfb8      	it	lt
 8010bd8:	2301      	movlt	r3, #1
 8010bda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010bdc:	2200      	movs	r2, #0
 8010bde:	6042      	str	r2, [r0, #4]
 8010be0:	2204      	movs	r2, #4
 8010be2:	f102 0614 	add.w	r6, r2, #20
 8010be6:	429e      	cmp	r6, r3
 8010be8:	6841      	ldr	r1, [r0, #4]
 8010bea:	d93d      	bls.n	8010c68 <_dtoa_r+0x318>
 8010bec:	4620      	mov	r0, r4
 8010bee:	f001 fa5d 	bl	80120ac <_Balloc>
 8010bf2:	9001      	str	r0, [sp, #4]
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	d13b      	bne.n	8010c70 <_dtoa_r+0x320>
 8010bf8:	4b11      	ldr	r3, [pc, #68]	; (8010c40 <_dtoa_r+0x2f0>)
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010c00:	e6c0      	b.n	8010984 <_dtoa_r+0x34>
 8010c02:	2301      	movs	r3, #1
 8010c04:	e7df      	b.n	8010bc6 <_dtoa_r+0x276>
 8010c06:	bf00      	nop
 8010c08:	636f4361 	.word	0x636f4361
 8010c0c:	3fd287a7 	.word	0x3fd287a7
 8010c10:	8b60c8b3 	.word	0x8b60c8b3
 8010c14:	3fc68a28 	.word	0x3fc68a28
 8010c18:	509f79fb 	.word	0x509f79fb
 8010c1c:	3fd34413 	.word	0x3fd34413
 8010c20:	08014abd 	.word	0x08014abd
 8010c24:	08014ad4 	.word	0x08014ad4
 8010c28:	7ff00000 	.word	0x7ff00000
 8010c2c:	08014ab9 	.word	0x08014ab9
 8010c30:	08014ab0 	.word	0x08014ab0
 8010c34:	08014d8a 	.word	0x08014d8a
 8010c38:	3ff80000 	.word	0x3ff80000
 8010c3c:	08014ca0 	.word	0x08014ca0
 8010c40:	08014b2f 	.word	0x08014b2f
 8010c44:	2501      	movs	r5, #1
 8010c46:	2300      	movs	r3, #0
 8010c48:	9306      	str	r3, [sp, #24]
 8010c4a:	9508      	str	r5, [sp, #32]
 8010c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c54:	2200      	movs	r2, #0
 8010c56:	2312      	movs	r3, #18
 8010c58:	e7b0      	b.n	8010bbc <_dtoa_r+0x26c>
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	9308      	str	r3, [sp, #32]
 8010c5e:	e7f5      	b.n	8010c4c <_dtoa_r+0x2fc>
 8010c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c66:	e7b8      	b.n	8010bda <_dtoa_r+0x28a>
 8010c68:	3101      	adds	r1, #1
 8010c6a:	6041      	str	r1, [r0, #4]
 8010c6c:	0052      	lsls	r2, r2, #1
 8010c6e:	e7b8      	b.n	8010be2 <_dtoa_r+0x292>
 8010c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c72:	9a01      	ldr	r2, [sp, #4]
 8010c74:	601a      	str	r2, [r3, #0]
 8010c76:	9b03      	ldr	r3, [sp, #12]
 8010c78:	2b0e      	cmp	r3, #14
 8010c7a:	f200 809d 	bhi.w	8010db8 <_dtoa_r+0x468>
 8010c7e:	2d00      	cmp	r5, #0
 8010c80:	f000 809a 	beq.w	8010db8 <_dtoa_r+0x468>
 8010c84:	9b00      	ldr	r3, [sp, #0]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	dd32      	ble.n	8010cf0 <_dtoa_r+0x3a0>
 8010c8a:	4ab7      	ldr	r2, [pc, #732]	; (8010f68 <_dtoa_r+0x618>)
 8010c8c:	f003 030f 	and.w	r3, r3, #15
 8010c90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c98:	9b00      	ldr	r3, [sp, #0]
 8010c9a:	05d8      	lsls	r0, r3, #23
 8010c9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010ca0:	d516      	bpl.n	8010cd0 <_dtoa_r+0x380>
 8010ca2:	4bb2      	ldr	r3, [pc, #712]	; (8010f6c <_dtoa_r+0x61c>)
 8010ca4:	ec51 0b19 	vmov	r0, r1, d9
 8010ca8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010cac:	f7ef fdee 	bl	800088c <__aeabi_ddiv>
 8010cb0:	f007 070f 	and.w	r7, r7, #15
 8010cb4:	4682      	mov	sl, r0
 8010cb6:	468b      	mov	fp, r1
 8010cb8:	2503      	movs	r5, #3
 8010cba:	4eac      	ldr	r6, [pc, #688]	; (8010f6c <_dtoa_r+0x61c>)
 8010cbc:	b957      	cbnz	r7, 8010cd4 <_dtoa_r+0x384>
 8010cbe:	4642      	mov	r2, r8
 8010cc0:	464b      	mov	r3, r9
 8010cc2:	4650      	mov	r0, sl
 8010cc4:	4659      	mov	r1, fp
 8010cc6:	f7ef fde1 	bl	800088c <__aeabi_ddiv>
 8010cca:	4682      	mov	sl, r0
 8010ccc:	468b      	mov	fp, r1
 8010cce:	e028      	b.n	8010d22 <_dtoa_r+0x3d2>
 8010cd0:	2502      	movs	r5, #2
 8010cd2:	e7f2      	b.n	8010cba <_dtoa_r+0x36a>
 8010cd4:	07f9      	lsls	r1, r7, #31
 8010cd6:	d508      	bpl.n	8010cea <_dtoa_r+0x39a>
 8010cd8:	4640      	mov	r0, r8
 8010cda:	4649      	mov	r1, r9
 8010cdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ce0:	f7ef fcaa 	bl	8000638 <__aeabi_dmul>
 8010ce4:	3501      	adds	r5, #1
 8010ce6:	4680      	mov	r8, r0
 8010ce8:	4689      	mov	r9, r1
 8010cea:	107f      	asrs	r7, r7, #1
 8010cec:	3608      	adds	r6, #8
 8010cee:	e7e5      	b.n	8010cbc <_dtoa_r+0x36c>
 8010cf0:	f000 809b 	beq.w	8010e2a <_dtoa_r+0x4da>
 8010cf4:	9b00      	ldr	r3, [sp, #0]
 8010cf6:	4f9d      	ldr	r7, [pc, #628]	; (8010f6c <_dtoa_r+0x61c>)
 8010cf8:	425e      	negs	r6, r3
 8010cfa:	4b9b      	ldr	r3, [pc, #620]	; (8010f68 <_dtoa_r+0x618>)
 8010cfc:	f006 020f 	and.w	r2, r6, #15
 8010d00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d08:	ec51 0b19 	vmov	r0, r1, d9
 8010d0c:	f7ef fc94 	bl	8000638 <__aeabi_dmul>
 8010d10:	1136      	asrs	r6, r6, #4
 8010d12:	4682      	mov	sl, r0
 8010d14:	468b      	mov	fp, r1
 8010d16:	2300      	movs	r3, #0
 8010d18:	2502      	movs	r5, #2
 8010d1a:	2e00      	cmp	r6, #0
 8010d1c:	d17a      	bne.n	8010e14 <_dtoa_r+0x4c4>
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d1d3      	bne.n	8010cca <_dtoa_r+0x37a>
 8010d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	f000 8082 	beq.w	8010e2e <_dtoa_r+0x4de>
 8010d2a:	4b91      	ldr	r3, [pc, #580]	; (8010f70 <_dtoa_r+0x620>)
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	4650      	mov	r0, sl
 8010d30:	4659      	mov	r1, fp
 8010d32:	f7ef fef3 	bl	8000b1c <__aeabi_dcmplt>
 8010d36:	2800      	cmp	r0, #0
 8010d38:	d079      	beq.n	8010e2e <_dtoa_r+0x4de>
 8010d3a:	9b03      	ldr	r3, [sp, #12]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d076      	beq.n	8010e2e <_dtoa_r+0x4de>
 8010d40:	9b02      	ldr	r3, [sp, #8]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	dd36      	ble.n	8010db4 <_dtoa_r+0x464>
 8010d46:	9b00      	ldr	r3, [sp, #0]
 8010d48:	4650      	mov	r0, sl
 8010d4a:	4659      	mov	r1, fp
 8010d4c:	1e5f      	subs	r7, r3, #1
 8010d4e:	2200      	movs	r2, #0
 8010d50:	4b88      	ldr	r3, [pc, #544]	; (8010f74 <_dtoa_r+0x624>)
 8010d52:	f7ef fc71 	bl	8000638 <__aeabi_dmul>
 8010d56:	9e02      	ldr	r6, [sp, #8]
 8010d58:	4682      	mov	sl, r0
 8010d5a:	468b      	mov	fp, r1
 8010d5c:	3501      	adds	r5, #1
 8010d5e:	4628      	mov	r0, r5
 8010d60:	f7ef fc00 	bl	8000564 <__aeabi_i2d>
 8010d64:	4652      	mov	r2, sl
 8010d66:	465b      	mov	r3, fp
 8010d68:	f7ef fc66 	bl	8000638 <__aeabi_dmul>
 8010d6c:	4b82      	ldr	r3, [pc, #520]	; (8010f78 <_dtoa_r+0x628>)
 8010d6e:	2200      	movs	r2, #0
 8010d70:	f7ef faac 	bl	80002cc <__adddf3>
 8010d74:	46d0      	mov	r8, sl
 8010d76:	46d9      	mov	r9, fp
 8010d78:	4682      	mov	sl, r0
 8010d7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010d7e:	2e00      	cmp	r6, #0
 8010d80:	d158      	bne.n	8010e34 <_dtoa_r+0x4e4>
 8010d82:	4b7e      	ldr	r3, [pc, #504]	; (8010f7c <_dtoa_r+0x62c>)
 8010d84:	2200      	movs	r2, #0
 8010d86:	4640      	mov	r0, r8
 8010d88:	4649      	mov	r1, r9
 8010d8a:	f7ef fa9d 	bl	80002c8 <__aeabi_dsub>
 8010d8e:	4652      	mov	r2, sl
 8010d90:	465b      	mov	r3, fp
 8010d92:	4680      	mov	r8, r0
 8010d94:	4689      	mov	r9, r1
 8010d96:	f7ef fedf 	bl	8000b58 <__aeabi_dcmpgt>
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	f040 8295 	bne.w	80112ca <_dtoa_r+0x97a>
 8010da0:	4652      	mov	r2, sl
 8010da2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010da6:	4640      	mov	r0, r8
 8010da8:	4649      	mov	r1, r9
 8010daa:	f7ef feb7 	bl	8000b1c <__aeabi_dcmplt>
 8010dae:	2800      	cmp	r0, #0
 8010db0:	f040 8289 	bne.w	80112c6 <_dtoa_r+0x976>
 8010db4:	ec5b ab19 	vmov	sl, fp, d9
 8010db8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f2c0 8148 	blt.w	8011050 <_dtoa_r+0x700>
 8010dc0:	9a00      	ldr	r2, [sp, #0]
 8010dc2:	2a0e      	cmp	r2, #14
 8010dc4:	f300 8144 	bgt.w	8011050 <_dtoa_r+0x700>
 8010dc8:	4b67      	ldr	r3, [pc, #412]	; (8010f68 <_dtoa_r+0x618>)
 8010dca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010dce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f280 80d5 	bge.w	8010f84 <_dtoa_r+0x634>
 8010dda:	9b03      	ldr	r3, [sp, #12]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	f300 80d1 	bgt.w	8010f84 <_dtoa_r+0x634>
 8010de2:	f040 826f 	bne.w	80112c4 <_dtoa_r+0x974>
 8010de6:	4b65      	ldr	r3, [pc, #404]	; (8010f7c <_dtoa_r+0x62c>)
 8010de8:	2200      	movs	r2, #0
 8010dea:	4640      	mov	r0, r8
 8010dec:	4649      	mov	r1, r9
 8010dee:	f7ef fc23 	bl	8000638 <__aeabi_dmul>
 8010df2:	4652      	mov	r2, sl
 8010df4:	465b      	mov	r3, fp
 8010df6:	f7ef fea5 	bl	8000b44 <__aeabi_dcmpge>
 8010dfa:	9e03      	ldr	r6, [sp, #12]
 8010dfc:	4637      	mov	r7, r6
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	f040 8245 	bne.w	801128e <_dtoa_r+0x93e>
 8010e04:	9d01      	ldr	r5, [sp, #4]
 8010e06:	2331      	movs	r3, #49	; 0x31
 8010e08:	f805 3b01 	strb.w	r3, [r5], #1
 8010e0c:	9b00      	ldr	r3, [sp, #0]
 8010e0e:	3301      	adds	r3, #1
 8010e10:	9300      	str	r3, [sp, #0]
 8010e12:	e240      	b.n	8011296 <_dtoa_r+0x946>
 8010e14:	07f2      	lsls	r2, r6, #31
 8010e16:	d505      	bpl.n	8010e24 <_dtoa_r+0x4d4>
 8010e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e1c:	f7ef fc0c 	bl	8000638 <__aeabi_dmul>
 8010e20:	3501      	adds	r5, #1
 8010e22:	2301      	movs	r3, #1
 8010e24:	1076      	asrs	r6, r6, #1
 8010e26:	3708      	adds	r7, #8
 8010e28:	e777      	b.n	8010d1a <_dtoa_r+0x3ca>
 8010e2a:	2502      	movs	r5, #2
 8010e2c:	e779      	b.n	8010d22 <_dtoa_r+0x3d2>
 8010e2e:	9f00      	ldr	r7, [sp, #0]
 8010e30:	9e03      	ldr	r6, [sp, #12]
 8010e32:	e794      	b.n	8010d5e <_dtoa_r+0x40e>
 8010e34:	9901      	ldr	r1, [sp, #4]
 8010e36:	4b4c      	ldr	r3, [pc, #304]	; (8010f68 <_dtoa_r+0x618>)
 8010e38:	4431      	add	r1, r6
 8010e3a:	910d      	str	r1, [sp, #52]	; 0x34
 8010e3c:	9908      	ldr	r1, [sp, #32]
 8010e3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010e42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010e46:	2900      	cmp	r1, #0
 8010e48:	d043      	beq.n	8010ed2 <_dtoa_r+0x582>
 8010e4a:	494d      	ldr	r1, [pc, #308]	; (8010f80 <_dtoa_r+0x630>)
 8010e4c:	2000      	movs	r0, #0
 8010e4e:	f7ef fd1d 	bl	800088c <__aeabi_ddiv>
 8010e52:	4652      	mov	r2, sl
 8010e54:	465b      	mov	r3, fp
 8010e56:	f7ef fa37 	bl	80002c8 <__aeabi_dsub>
 8010e5a:	9d01      	ldr	r5, [sp, #4]
 8010e5c:	4682      	mov	sl, r0
 8010e5e:	468b      	mov	fp, r1
 8010e60:	4649      	mov	r1, r9
 8010e62:	4640      	mov	r0, r8
 8010e64:	f7ef fe98 	bl	8000b98 <__aeabi_d2iz>
 8010e68:	4606      	mov	r6, r0
 8010e6a:	f7ef fb7b 	bl	8000564 <__aeabi_i2d>
 8010e6e:	4602      	mov	r2, r0
 8010e70:	460b      	mov	r3, r1
 8010e72:	4640      	mov	r0, r8
 8010e74:	4649      	mov	r1, r9
 8010e76:	f7ef fa27 	bl	80002c8 <__aeabi_dsub>
 8010e7a:	3630      	adds	r6, #48	; 0x30
 8010e7c:	f805 6b01 	strb.w	r6, [r5], #1
 8010e80:	4652      	mov	r2, sl
 8010e82:	465b      	mov	r3, fp
 8010e84:	4680      	mov	r8, r0
 8010e86:	4689      	mov	r9, r1
 8010e88:	f7ef fe48 	bl	8000b1c <__aeabi_dcmplt>
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	d163      	bne.n	8010f58 <_dtoa_r+0x608>
 8010e90:	4642      	mov	r2, r8
 8010e92:	464b      	mov	r3, r9
 8010e94:	4936      	ldr	r1, [pc, #216]	; (8010f70 <_dtoa_r+0x620>)
 8010e96:	2000      	movs	r0, #0
 8010e98:	f7ef fa16 	bl	80002c8 <__aeabi_dsub>
 8010e9c:	4652      	mov	r2, sl
 8010e9e:	465b      	mov	r3, fp
 8010ea0:	f7ef fe3c 	bl	8000b1c <__aeabi_dcmplt>
 8010ea4:	2800      	cmp	r0, #0
 8010ea6:	f040 80b5 	bne.w	8011014 <_dtoa_r+0x6c4>
 8010eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010eac:	429d      	cmp	r5, r3
 8010eae:	d081      	beq.n	8010db4 <_dtoa_r+0x464>
 8010eb0:	4b30      	ldr	r3, [pc, #192]	; (8010f74 <_dtoa_r+0x624>)
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	4650      	mov	r0, sl
 8010eb6:	4659      	mov	r1, fp
 8010eb8:	f7ef fbbe 	bl	8000638 <__aeabi_dmul>
 8010ebc:	4b2d      	ldr	r3, [pc, #180]	; (8010f74 <_dtoa_r+0x624>)
 8010ebe:	4682      	mov	sl, r0
 8010ec0:	468b      	mov	fp, r1
 8010ec2:	4640      	mov	r0, r8
 8010ec4:	4649      	mov	r1, r9
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	f7ef fbb6 	bl	8000638 <__aeabi_dmul>
 8010ecc:	4680      	mov	r8, r0
 8010ece:	4689      	mov	r9, r1
 8010ed0:	e7c6      	b.n	8010e60 <_dtoa_r+0x510>
 8010ed2:	4650      	mov	r0, sl
 8010ed4:	4659      	mov	r1, fp
 8010ed6:	f7ef fbaf 	bl	8000638 <__aeabi_dmul>
 8010eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010edc:	9d01      	ldr	r5, [sp, #4]
 8010ede:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ee0:	4682      	mov	sl, r0
 8010ee2:	468b      	mov	fp, r1
 8010ee4:	4649      	mov	r1, r9
 8010ee6:	4640      	mov	r0, r8
 8010ee8:	f7ef fe56 	bl	8000b98 <__aeabi_d2iz>
 8010eec:	4606      	mov	r6, r0
 8010eee:	f7ef fb39 	bl	8000564 <__aeabi_i2d>
 8010ef2:	3630      	adds	r6, #48	; 0x30
 8010ef4:	4602      	mov	r2, r0
 8010ef6:	460b      	mov	r3, r1
 8010ef8:	4640      	mov	r0, r8
 8010efa:	4649      	mov	r1, r9
 8010efc:	f7ef f9e4 	bl	80002c8 <__aeabi_dsub>
 8010f00:	f805 6b01 	strb.w	r6, [r5], #1
 8010f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f06:	429d      	cmp	r5, r3
 8010f08:	4680      	mov	r8, r0
 8010f0a:	4689      	mov	r9, r1
 8010f0c:	f04f 0200 	mov.w	r2, #0
 8010f10:	d124      	bne.n	8010f5c <_dtoa_r+0x60c>
 8010f12:	4b1b      	ldr	r3, [pc, #108]	; (8010f80 <_dtoa_r+0x630>)
 8010f14:	4650      	mov	r0, sl
 8010f16:	4659      	mov	r1, fp
 8010f18:	f7ef f9d8 	bl	80002cc <__adddf3>
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	460b      	mov	r3, r1
 8010f20:	4640      	mov	r0, r8
 8010f22:	4649      	mov	r1, r9
 8010f24:	f7ef fe18 	bl	8000b58 <__aeabi_dcmpgt>
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	d173      	bne.n	8011014 <_dtoa_r+0x6c4>
 8010f2c:	4652      	mov	r2, sl
 8010f2e:	465b      	mov	r3, fp
 8010f30:	4913      	ldr	r1, [pc, #76]	; (8010f80 <_dtoa_r+0x630>)
 8010f32:	2000      	movs	r0, #0
 8010f34:	f7ef f9c8 	bl	80002c8 <__aeabi_dsub>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	4640      	mov	r0, r8
 8010f3e:	4649      	mov	r1, r9
 8010f40:	f7ef fdec 	bl	8000b1c <__aeabi_dcmplt>
 8010f44:	2800      	cmp	r0, #0
 8010f46:	f43f af35 	beq.w	8010db4 <_dtoa_r+0x464>
 8010f4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010f4c:	1e6b      	subs	r3, r5, #1
 8010f4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010f54:	2b30      	cmp	r3, #48	; 0x30
 8010f56:	d0f8      	beq.n	8010f4a <_dtoa_r+0x5fa>
 8010f58:	9700      	str	r7, [sp, #0]
 8010f5a:	e049      	b.n	8010ff0 <_dtoa_r+0x6a0>
 8010f5c:	4b05      	ldr	r3, [pc, #20]	; (8010f74 <_dtoa_r+0x624>)
 8010f5e:	f7ef fb6b 	bl	8000638 <__aeabi_dmul>
 8010f62:	4680      	mov	r8, r0
 8010f64:	4689      	mov	r9, r1
 8010f66:	e7bd      	b.n	8010ee4 <_dtoa_r+0x594>
 8010f68:	08014ca0 	.word	0x08014ca0
 8010f6c:	08014c78 	.word	0x08014c78
 8010f70:	3ff00000 	.word	0x3ff00000
 8010f74:	40240000 	.word	0x40240000
 8010f78:	401c0000 	.word	0x401c0000
 8010f7c:	40140000 	.word	0x40140000
 8010f80:	3fe00000 	.word	0x3fe00000
 8010f84:	9d01      	ldr	r5, [sp, #4]
 8010f86:	4656      	mov	r6, sl
 8010f88:	465f      	mov	r7, fp
 8010f8a:	4642      	mov	r2, r8
 8010f8c:	464b      	mov	r3, r9
 8010f8e:	4630      	mov	r0, r6
 8010f90:	4639      	mov	r1, r7
 8010f92:	f7ef fc7b 	bl	800088c <__aeabi_ddiv>
 8010f96:	f7ef fdff 	bl	8000b98 <__aeabi_d2iz>
 8010f9a:	4682      	mov	sl, r0
 8010f9c:	f7ef fae2 	bl	8000564 <__aeabi_i2d>
 8010fa0:	4642      	mov	r2, r8
 8010fa2:	464b      	mov	r3, r9
 8010fa4:	f7ef fb48 	bl	8000638 <__aeabi_dmul>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	460b      	mov	r3, r1
 8010fac:	4630      	mov	r0, r6
 8010fae:	4639      	mov	r1, r7
 8010fb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010fb4:	f7ef f988 	bl	80002c8 <__aeabi_dsub>
 8010fb8:	f805 6b01 	strb.w	r6, [r5], #1
 8010fbc:	9e01      	ldr	r6, [sp, #4]
 8010fbe:	9f03      	ldr	r7, [sp, #12]
 8010fc0:	1bae      	subs	r6, r5, r6
 8010fc2:	42b7      	cmp	r7, r6
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	d135      	bne.n	8011036 <_dtoa_r+0x6e6>
 8010fca:	f7ef f97f 	bl	80002cc <__adddf3>
 8010fce:	4642      	mov	r2, r8
 8010fd0:	464b      	mov	r3, r9
 8010fd2:	4606      	mov	r6, r0
 8010fd4:	460f      	mov	r7, r1
 8010fd6:	f7ef fdbf 	bl	8000b58 <__aeabi_dcmpgt>
 8010fda:	b9d0      	cbnz	r0, 8011012 <_dtoa_r+0x6c2>
 8010fdc:	4642      	mov	r2, r8
 8010fde:	464b      	mov	r3, r9
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	4639      	mov	r1, r7
 8010fe4:	f7ef fd90 	bl	8000b08 <__aeabi_dcmpeq>
 8010fe8:	b110      	cbz	r0, 8010ff0 <_dtoa_r+0x6a0>
 8010fea:	f01a 0f01 	tst.w	sl, #1
 8010fee:	d110      	bne.n	8011012 <_dtoa_r+0x6c2>
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	ee18 1a10 	vmov	r1, s16
 8010ff6:	f001 f899 	bl	801212c <_Bfree>
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	9800      	ldr	r0, [sp, #0]
 8010ffe:	702b      	strb	r3, [r5, #0]
 8011000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011002:	3001      	adds	r0, #1
 8011004:	6018      	str	r0, [r3, #0]
 8011006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011008:	2b00      	cmp	r3, #0
 801100a:	f43f acf1 	beq.w	80109f0 <_dtoa_r+0xa0>
 801100e:	601d      	str	r5, [r3, #0]
 8011010:	e4ee      	b.n	80109f0 <_dtoa_r+0xa0>
 8011012:	9f00      	ldr	r7, [sp, #0]
 8011014:	462b      	mov	r3, r5
 8011016:	461d      	mov	r5, r3
 8011018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801101c:	2a39      	cmp	r2, #57	; 0x39
 801101e:	d106      	bne.n	801102e <_dtoa_r+0x6de>
 8011020:	9a01      	ldr	r2, [sp, #4]
 8011022:	429a      	cmp	r2, r3
 8011024:	d1f7      	bne.n	8011016 <_dtoa_r+0x6c6>
 8011026:	9901      	ldr	r1, [sp, #4]
 8011028:	2230      	movs	r2, #48	; 0x30
 801102a:	3701      	adds	r7, #1
 801102c:	700a      	strb	r2, [r1, #0]
 801102e:	781a      	ldrb	r2, [r3, #0]
 8011030:	3201      	adds	r2, #1
 8011032:	701a      	strb	r2, [r3, #0]
 8011034:	e790      	b.n	8010f58 <_dtoa_r+0x608>
 8011036:	4ba6      	ldr	r3, [pc, #664]	; (80112d0 <_dtoa_r+0x980>)
 8011038:	2200      	movs	r2, #0
 801103a:	f7ef fafd 	bl	8000638 <__aeabi_dmul>
 801103e:	2200      	movs	r2, #0
 8011040:	2300      	movs	r3, #0
 8011042:	4606      	mov	r6, r0
 8011044:	460f      	mov	r7, r1
 8011046:	f7ef fd5f 	bl	8000b08 <__aeabi_dcmpeq>
 801104a:	2800      	cmp	r0, #0
 801104c:	d09d      	beq.n	8010f8a <_dtoa_r+0x63a>
 801104e:	e7cf      	b.n	8010ff0 <_dtoa_r+0x6a0>
 8011050:	9a08      	ldr	r2, [sp, #32]
 8011052:	2a00      	cmp	r2, #0
 8011054:	f000 80d7 	beq.w	8011206 <_dtoa_r+0x8b6>
 8011058:	9a06      	ldr	r2, [sp, #24]
 801105a:	2a01      	cmp	r2, #1
 801105c:	f300 80ba 	bgt.w	80111d4 <_dtoa_r+0x884>
 8011060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011062:	2a00      	cmp	r2, #0
 8011064:	f000 80b2 	beq.w	80111cc <_dtoa_r+0x87c>
 8011068:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801106c:	9e07      	ldr	r6, [sp, #28]
 801106e:	9d04      	ldr	r5, [sp, #16]
 8011070:	9a04      	ldr	r2, [sp, #16]
 8011072:	441a      	add	r2, r3
 8011074:	9204      	str	r2, [sp, #16]
 8011076:	9a05      	ldr	r2, [sp, #20]
 8011078:	2101      	movs	r1, #1
 801107a:	441a      	add	r2, r3
 801107c:	4620      	mov	r0, r4
 801107e:	9205      	str	r2, [sp, #20]
 8011080:	f001 f956 	bl	8012330 <__i2b>
 8011084:	4607      	mov	r7, r0
 8011086:	2d00      	cmp	r5, #0
 8011088:	dd0c      	ble.n	80110a4 <_dtoa_r+0x754>
 801108a:	9b05      	ldr	r3, [sp, #20]
 801108c:	2b00      	cmp	r3, #0
 801108e:	dd09      	ble.n	80110a4 <_dtoa_r+0x754>
 8011090:	42ab      	cmp	r3, r5
 8011092:	9a04      	ldr	r2, [sp, #16]
 8011094:	bfa8      	it	ge
 8011096:	462b      	movge	r3, r5
 8011098:	1ad2      	subs	r2, r2, r3
 801109a:	9204      	str	r2, [sp, #16]
 801109c:	9a05      	ldr	r2, [sp, #20]
 801109e:	1aed      	subs	r5, r5, r3
 80110a0:	1ad3      	subs	r3, r2, r3
 80110a2:	9305      	str	r3, [sp, #20]
 80110a4:	9b07      	ldr	r3, [sp, #28]
 80110a6:	b31b      	cbz	r3, 80110f0 <_dtoa_r+0x7a0>
 80110a8:	9b08      	ldr	r3, [sp, #32]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	f000 80af 	beq.w	801120e <_dtoa_r+0x8be>
 80110b0:	2e00      	cmp	r6, #0
 80110b2:	dd13      	ble.n	80110dc <_dtoa_r+0x78c>
 80110b4:	4639      	mov	r1, r7
 80110b6:	4632      	mov	r2, r6
 80110b8:	4620      	mov	r0, r4
 80110ba:	f001 f9f9 	bl	80124b0 <__pow5mult>
 80110be:	ee18 2a10 	vmov	r2, s16
 80110c2:	4601      	mov	r1, r0
 80110c4:	4607      	mov	r7, r0
 80110c6:	4620      	mov	r0, r4
 80110c8:	f001 f948 	bl	801235c <__multiply>
 80110cc:	ee18 1a10 	vmov	r1, s16
 80110d0:	4680      	mov	r8, r0
 80110d2:	4620      	mov	r0, r4
 80110d4:	f001 f82a 	bl	801212c <_Bfree>
 80110d8:	ee08 8a10 	vmov	s16, r8
 80110dc:	9b07      	ldr	r3, [sp, #28]
 80110de:	1b9a      	subs	r2, r3, r6
 80110e0:	d006      	beq.n	80110f0 <_dtoa_r+0x7a0>
 80110e2:	ee18 1a10 	vmov	r1, s16
 80110e6:	4620      	mov	r0, r4
 80110e8:	f001 f9e2 	bl	80124b0 <__pow5mult>
 80110ec:	ee08 0a10 	vmov	s16, r0
 80110f0:	2101      	movs	r1, #1
 80110f2:	4620      	mov	r0, r4
 80110f4:	f001 f91c 	bl	8012330 <__i2b>
 80110f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	4606      	mov	r6, r0
 80110fe:	f340 8088 	ble.w	8011212 <_dtoa_r+0x8c2>
 8011102:	461a      	mov	r2, r3
 8011104:	4601      	mov	r1, r0
 8011106:	4620      	mov	r0, r4
 8011108:	f001 f9d2 	bl	80124b0 <__pow5mult>
 801110c:	9b06      	ldr	r3, [sp, #24]
 801110e:	2b01      	cmp	r3, #1
 8011110:	4606      	mov	r6, r0
 8011112:	f340 8081 	ble.w	8011218 <_dtoa_r+0x8c8>
 8011116:	f04f 0800 	mov.w	r8, #0
 801111a:	6933      	ldr	r3, [r6, #16]
 801111c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011120:	6918      	ldr	r0, [r3, #16]
 8011122:	f001 f8b5 	bl	8012290 <__hi0bits>
 8011126:	f1c0 0020 	rsb	r0, r0, #32
 801112a:	9b05      	ldr	r3, [sp, #20]
 801112c:	4418      	add	r0, r3
 801112e:	f010 001f 	ands.w	r0, r0, #31
 8011132:	f000 8092 	beq.w	801125a <_dtoa_r+0x90a>
 8011136:	f1c0 0320 	rsb	r3, r0, #32
 801113a:	2b04      	cmp	r3, #4
 801113c:	f340 808a 	ble.w	8011254 <_dtoa_r+0x904>
 8011140:	f1c0 001c 	rsb	r0, r0, #28
 8011144:	9b04      	ldr	r3, [sp, #16]
 8011146:	4403      	add	r3, r0
 8011148:	9304      	str	r3, [sp, #16]
 801114a:	9b05      	ldr	r3, [sp, #20]
 801114c:	4403      	add	r3, r0
 801114e:	4405      	add	r5, r0
 8011150:	9305      	str	r3, [sp, #20]
 8011152:	9b04      	ldr	r3, [sp, #16]
 8011154:	2b00      	cmp	r3, #0
 8011156:	dd07      	ble.n	8011168 <_dtoa_r+0x818>
 8011158:	ee18 1a10 	vmov	r1, s16
 801115c:	461a      	mov	r2, r3
 801115e:	4620      	mov	r0, r4
 8011160:	f001 fa00 	bl	8012564 <__lshift>
 8011164:	ee08 0a10 	vmov	s16, r0
 8011168:	9b05      	ldr	r3, [sp, #20]
 801116a:	2b00      	cmp	r3, #0
 801116c:	dd05      	ble.n	801117a <_dtoa_r+0x82a>
 801116e:	4631      	mov	r1, r6
 8011170:	461a      	mov	r2, r3
 8011172:	4620      	mov	r0, r4
 8011174:	f001 f9f6 	bl	8012564 <__lshift>
 8011178:	4606      	mov	r6, r0
 801117a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801117c:	2b00      	cmp	r3, #0
 801117e:	d06e      	beq.n	801125e <_dtoa_r+0x90e>
 8011180:	ee18 0a10 	vmov	r0, s16
 8011184:	4631      	mov	r1, r6
 8011186:	f001 fa5d 	bl	8012644 <__mcmp>
 801118a:	2800      	cmp	r0, #0
 801118c:	da67      	bge.n	801125e <_dtoa_r+0x90e>
 801118e:	9b00      	ldr	r3, [sp, #0]
 8011190:	3b01      	subs	r3, #1
 8011192:	ee18 1a10 	vmov	r1, s16
 8011196:	9300      	str	r3, [sp, #0]
 8011198:	220a      	movs	r2, #10
 801119a:	2300      	movs	r3, #0
 801119c:	4620      	mov	r0, r4
 801119e:	f000 ffe7 	bl	8012170 <__multadd>
 80111a2:	9b08      	ldr	r3, [sp, #32]
 80111a4:	ee08 0a10 	vmov	s16, r0
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	f000 81b1 	beq.w	8011510 <_dtoa_r+0xbc0>
 80111ae:	2300      	movs	r3, #0
 80111b0:	4639      	mov	r1, r7
 80111b2:	220a      	movs	r2, #10
 80111b4:	4620      	mov	r0, r4
 80111b6:	f000 ffdb 	bl	8012170 <__multadd>
 80111ba:	9b02      	ldr	r3, [sp, #8]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	4607      	mov	r7, r0
 80111c0:	f300 808e 	bgt.w	80112e0 <_dtoa_r+0x990>
 80111c4:	9b06      	ldr	r3, [sp, #24]
 80111c6:	2b02      	cmp	r3, #2
 80111c8:	dc51      	bgt.n	801126e <_dtoa_r+0x91e>
 80111ca:	e089      	b.n	80112e0 <_dtoa_r+0x990>
 80111cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80111d2:	e74b      	b.n	801106c <_dtoa_r+0x71c>
 80111d4:	9b03      	ldr	r3, [sp, #12]
 80111d6:	1e5e      	subs	r6, r3, #1
 80111d8:	9b07      	ldr	r3, [sp, #28]
 80111da:	42b3      	cmp	r3, r6
 80111dc:	bfbf      	itttt	lt
 80111de:	9b07      	ldrlt	r3, [sp, #28]
 80111e0:	9607      	strlt	r6, [sp, #28]
 80111e2:	1af2      	sublt	r2, r6, r3
 80111e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80111e6:	bfb6      	itet	lt
 80111e8:	189b      	addlt	r3, r3, r2
 80111ea:	1b9e      	subge	r6, r3, r6
 80111ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80111ee:	9b03      	ldr	r3, [sp, #12]
 80111f0:	bfb8      	it	lt
 80111f2:	2600      	movlt	r6, #0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	bfb7      	itett	lt
 80111f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80111fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011200:	1a9d      	sublt	r5, r3, r2
 8011202:	2300      	movlt	r3, #0
 8011204:	e734      	b.n	8011070 <_dtoa_r+0x720>
 8011206:	9e07      	ldr	r6, [sp, #28]
 8011208:	9d04      	ldr	r5, [sp, #16]
 801120a:	9f08      	ldr	r7, [sp, #32]
 801120c:	e73b      	b.n	8011086 <_dtoa_r+0x736>
 801120e:	9a07      	ldr	r2, [sp, #28]
 8011210:	e767      	b.n	80110e2 <_dtoa_r+0x792>
 8011212:	9b06      	ldr	r3, [sp, #24]
 8011214:	2b01      	cmp	r3, #1
 8011216:	dc18      	bgt.n	801124a <_dtoa_r+0x8fa>
 8011218:	f1ba 0f00 	cmp.w	sl, #0
 801121c:	d115      	bne.n	801124a <_dtoa_r+0x8fa>
 801121e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011222:	b993      	cbnz	r3, 801124a <_dtoa_r+0x8fa>
 8011224:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011228:	0d1b      	lsrs	r3, r3, #20
 801122a:	051b      	lsls	r3, r3, #20
 801122c:	b183      	cbz	r3, 8011250 <_dtoa_r+0x900>
 801122e:	9b04      	ldr	r3, [sp, #16]
 8011230:	3301      	adds	r3, #1
 8011232:	9304      	str	r3, [sp, #16]
 8011234:	9b05      	ldr	r3, [sp, #20]
 8011236:	3301      	adds	r3, #1
 8011238:	9305      	str	r3, [sp, #20]
 801123a:	f04f 0801 	mov.w	r8, #1
 801123e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011240:	2b00      	cmp	r3, #0
 8011242:	f47f af6a 	bne.w	801111a <_dtoa_r+0x7ca>
 8011246:	2001      	movs	r0, #1
 8011248:	e76f      	b.n	801112a <_dtoa_r+0x7da>
 801124a:	f04f 0800 	mov.w	r8, #0
 801124e:	e7f6      	b.n	801123e <_dtoa_r+0x8ee>
 8011250:	4698      	mov	r8, r3
 8011252:	e7f4      	b.n	801123e <_dtoa_r+0x8ee>
 8011254:	f43f af7d 	beq.w	8011152 <_dtoa_r+0x802>
 8011258:	4618      	mov	r0, r3
 801125a:	301c      	adds	r0, #28
 801125c:	e772      	b.n	8011144 <_dtoa_r+0x7f4>
 801125e:	9b03      	ldr	r3, [sp, #12]
 8011260:	2b00      	cmp	r3, #0
 8011262:	dc37      	bgt.n	80112d4 <_dtoa_r+0x984>
 8011264:	9b06      	ldr	r3, [sp, #24]
 8011266:	2b02      	cmp	r3, #2
 8011268:	dd34      	ble.n	80112d4 <_dtoa_r+0x984>
 801126a:	9b03      	ldr	r3, [sp, #12]
 801126c:	9302      	str	r3, [sp, #8]
 801126e:	9b02      	ldr	r3, [sp, #8]
 8011270:	b96b      	cbnz	r3, 801128e <_dtoa_r+0x93e>
 8011272:	4631      	mov	r1, r6
 8011274:	2205      	movs	r2, #5
 8011276:	4620      	mov	r0, r4
 8011278:	f000 ff7a 	bl	8012170 <__multadd>
 801127c:	4601      	mov	r1, r0
 801127e:	4606      	mov	r6, r0
 8011280:	ee18 0a10 	vmov	r0, s16
 8011284:	f001 f9de 	bl	8012644 <__mcmp>
 8011288:	2800      	cmp	r0, #0
 801128a:	f73f adbb 	bgt.w	8010e04 <_dtoa_r+0x4b4>
 801128e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011290:	9d01      	ldr	r5, [sp, #4]
 8011292:	43db      	mvns	r3, r3
 8011294:	9300      	str	r3, [sp, #0]
 8011296:	f04f 0800 	mov.w	r8, #0
 801129a:	4631      	mov	r1, r6
 801129c:	4620      	mov	r0, r4
 801129e:	f000 ff45 	bl	801212c <_Bfree>
 80112a2:	2f00      	cmp	r7, #0
 80112a4:	f43f aea4 	beq.w	8010ff0 <_dtoa_r+0x6a0>
 80112a8:	f1b8 0f00 	cmp.w	r8, #0
 80112ac:	d005      	beq.n	80112ba <_dtoa_r+0x96a>
 80112ae:	45b8      	cmp	r8, r7
 80112b0:	d003      	beq.n	80112ba <_dtoa_r+0x96a>
 80112b2:	4641      	mov	r1, r8
 80112b4:	4620      	mov	r0, r4
 80112b6:	f000 ff39 	bl	801212c <_Bfree>
 80112ba:	4639      	mov	r1, r7
 80112bc:	4620      	mov	r0, r4
 80112be:	f000 ff35 	bl	801212c <_Bfree>
 80112c2:	e695      	b.n	8010ff0 <_dtoa_r+0x6a0>
 80112c4:	2600      	movs	r6, #0
 80112c6:	4637      	mov	r7, r6
 80112c8:	e7e1      	b.n	801128e <_dtoa_r+0x93e>
 80112ca:	9700      	str	r7, [sp, #0]
 80112cc:	4637      	mov	r7, r6
 80112ce:	e599      	b.n	8010e04 <_dtoa_r+0x4b4>
 80112d0:	40240000 	.word	0x40240000
 80112d4:	9b08      	ldr	r3, [sp, #32]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	f000 80ca 	beq.w	8011470 <_dtoa_r+0xb20>
 80112dc:	9b03      	ldr	r3, [sp, #12]
 80112de:	9302      	str	r3, [sp, #8]
 80112e0:	2d00      	cmp	r5, #0
 80112e2:	dd05      	ble.n	80112f0 <_dtoa_r+0x9a0>
 80112e4:	4639      	mov	r1, r7
 80112e6:	462a      	mov	r2, r5
 80112e8:	4620      	mov	r0, r4
 80112ea:	f001 f93b 	bl	8012564 <__lshift>
 80112ee:	4607      	mov	r7, r0
 80112f0:	f1b8 0f00 	cmp.w	r8, #0
 80112f4:	d05b      	beq.n	80113ae <_dtoa_r+0xa5e>
 80112f6:	6879      	ldr	r1, [r7, #4]
 80112f8:	4620      	mov	r0, r4
 80112fa:	f000 fed7 	bl	80120ac <_Balloc>
 80112fe:	4605      	mov	r5, r0
 8011300:	b928      	cbnz	r0, 801130e <_dtoa_r+0x9be>
 8011302:	4b87      	ldr	r3, [pc, #540]	; (8011520 <_dtoa_r+0xbd0>)
 8011304:	4602      	mov	r2, r0
 8011306:	f240 21ea 	movw	r1, #746	; 0x2ea
 801130a:	f7ff bb3b 	b.w	8010984 <_dtoa_r+0x34>
 801130e:	693a      	ldr	r2, [r7, #16]
 8011310:	3202      	adds	r2, #2
 8011312:	0092      	lsls	r2, r2, #2
 8011314:	f107 010c 	add.w	r1, r7, #12
 8011318:	300c      	adds	r0, #12
 801131a:	f7fd fae3 	bl	800e8e4 <memcpy>
 801131e:	2201      	movs	r2, #1
 8011320:	4629      	mov	r1, r5
 8011322:	4620      	mov	r0, r4
 8011324:	f001 f91e 	bl	8012564 <__lshift>
 8011328:	9b01      	ldr	r3, [sp, #4]
 801132a:	f103 0901 	add.w	r9, r3, #1
 801132e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011332:	4413      	add	r3, r2
 8011334:	9305      	str	r3, [sp, #20]
 8011336:	f00a 0301 	and.w	r3, sl, #1
 801133a:	46b8      	mov	r8, r7
 801133c:	9304      	str	r3, [sp, #16]
 801133e:	4607      	mov	r7, r0
 8011340:	4631      	mov	r1, r6
 8011342:	ee18 0a10 	vmov	r0, s16
 8011346:	f7ff fa75 	bl	8010834 <quorem>
 801134a:	4641      	mov	r1, r8
 801134c:	9002      	str	r0, [sp, #8]
 801134e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011352:	ee18 0a10 	vmov	r0, s16
 8011356:	f001 f975 	bl	8012644 <__mcmp>
 801135a:	463a      	mov	r2, r7
 801135c:	9003      	str	r0, [sp, #12]
 801135e:	4631      	mov	r1, r6
 8011360:	4620      	mov	r0, r4
 8011362:	f001 f98b 	bl	801267c <__mdiff>
 8011366:	68c2      	ldr	r2, [r0, #12]
 8011368:	f109 3bff 	add.w	fp, r9, #4294967295
 801136c:	4605      	mov	r5, r0
 801136e:	bb02      	cbnz	r2, 80113b2 <_dtoa_r+0xa62>
 8011370:	4601      	mov	r1, r0
 8011372:	ee18 0a10 	vmov	r0, s16
 8011376:	f001 f965 	bl	8012644 <__mcmp>
 801137a:	4602      	mov	r2, r0
 801137c:	4629      	mov	r1, r5
 801137e:	4620      	mov	r0, r4
 8011380:	9207      	str	r2, [sp, #28]
 8011382:	f000 fed3 	bl	801212c <_Bfree>
 8011386:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801138a:	ea43 0102 	orr.w	r1, r3, r2
 801138e:	9b04      	ldr	r3, [sp, #16]
 8011390:	430b      	orrs	r3, r1
 8011392:	464d      	mov	r5, r9
 8011394:	d10f      	bne.n	80113b6 <_dtoa_r+0xa66>
 8011396:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801139a:	d02a      	beq.n	80113f2 <_dtoa_r+0xaa2>
 801139c:	9b03      	ldr	r3, [sp, #12]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	dd02      	ble.n	80113a8 <_dtoa_r+0xa58>
 80113a2:	9b02      	ldr	r3, [sp, #8]
 80113a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80113a8:	f88b a000 	strb.w	sl, [fp]
 80113ac:	e775      	b.n	801129a <_dtoa_r+0x94a>
 80113ae:	4638      	mov	r0, r7
 80113b0:	e7ba      	b.n	8011328 <_dtoa_r+0x9d8>
 80113b2:	2201      	movs	r2, #1
 80113b4:	e7e2      	b.n	801137c <_dtoa_r+0xa2c>
 80113b6:	9b03      	ldr	r3, [sp, #12]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	db04      	blt.n	80113c6 <_dtoa_r+0xa76>
 80113bc:	9906      	ldr	r1, [sp, #24]
 80113be:	430b      	orrs	r3, r1
 80113c0:	9904      	ldr	r1, [sp, #16]
 80113c2:	430b      	orrs	r3, r1
 80113c4:	d122      	bne.n	801140c <_dtoa_r+0xabc>
 80113c6:	2a00      	cmp	r2, #0
 80113c8:	ddee      	ble.n	80113a8 <_dtoa_r+0xa58>
 80113ca:	ee18 1a10 	vmov	r1, s16
 80113ce:	2201      	movs	r2, #1
 80113d0:	4620      	mov	r0, r4
 80113d2:	f001 f8c7 	bl	8012564 <__lshift>
 80113d6:	4631      	mov	r1, r6
 80113d8:	ee08 0a10 	vmov	s16, r0
 80113dc:	f001 f932 	bl	8012644 <__mcmp>
 80113e0:	2800      	cmp	r0, #0
 80113e2:	dc03      	bgt.n	80113ec <_dtoa_r+0xa9c>
 80113e4:	d1e0      	bne.n	80113a8 <_dtoa_r+0xa58>
 80113e6:	f01a 0f01 	tst.w	sl, #1
 80113ea:	d0dd      	beq.n	80113a8 <_dtoa_r+0xa58>
 80113ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80113f0:	d1d7      	bne.n	80113a2 <_dtoa_r+0xa52>
 80113f2:	2339      	movs	r3, #57	; 0x39
 80113f4:	f88b 3000 	strb.w	r3, [fp]
 80113f8:	462b      	mov	r3, r5
 80113fa:	461d      	mov	r5, r3
 80113fc:	3b01      	subs	r3, #1
 80113fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011402:	2a39      	cmp	r2, #57	; 0x39
 8011404:	d071      	beq.n	80114ea <_dtoa_r+0xb9a>
 8011406:	3201      	adds	r2, #1
 8011408:	701a      	strb	r2, [r3, #0]
 801140a:	e746      	b.n	801129a <_dtoa_r+0x94a>
 801140c:	2a00      	cmp	r2, #0
 801140e:	dd07      	ble.n	8011420 <_dtoa_r+0xad0>
 8011410:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011414:	d0ed      	beq.n	80113f2 <_dtoa_r+0xaa2>
 8011416:	f10a 0301 	add.w	r3, sl, #1
 801141a:	f88b 3000 	strb.w	r3, [fp]
 801141e:	e73c      	b.n	801129a <_dtoa_r+0x94a>
 8011420:	9b05      	ldr	r3, [sp, #20]
 8011422:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011426:	4599      	cmp	r9, r3
 8011428:	d047      	beq.n	80114ba <_dtoa_r+0xb6a>
 801142a:	ee18 1a10 	vmov	r1, s16
 801142e:	2300      	movs	r3, #0
 8011430:	220a      	movs	r2, #10
 8011432:	4620      	mov	r0, r4
 8011434:	f000 fe9c 	bl	8012170 <__multadd>
 8011438:	45b8      	cmp	r8, r7
 801143a:	ee08 0a10 	vmov	s16, r0
 801143e:	f04f 0300 	mov.w	r3, #0
 8011442:	f04f 020a 	mov.w	r2, #10
 8011446:	4641      	mov	r1, r8
 8011448:	4620      	mov	r0, r4
 801144a:	d106      	bne.n	801145a <_dtoa_r+0xb0a>
 801144c:	f000 fe90 	bl	8012170 <__multadd>
 8011450:	4680      	mov	r8, r0
 8011452:	4607      	mov	r7, r0
 8011454:	f109 0901 	add.w	r9, r9, #1
 8011458:	e772      	b.n	8011340 <_dtoa_r+0x9f0>
 801145a:	f000 fe89 	bl	8012170 <__multadd>
 801145e:	4639      	mov	r1, r7
 8011460:	4680      	mov	r8, r0
 8011462:	2300      	movs	r3, #0
 8011464:	220a      	movs	r2, #10
 8011466:	4620      	mov	r0, r4
 8011468:	f000 fe82 	bl	8012170 <__multadd>
 801146c:	4607      	mov	r7, r0
 801146e:	e7f1      	b.n	8011454 <_dtoa_r+0xb04>
 8011470:	9b03      	ldr	r3, [sp, #12]
 8011472:	9302      	str	r3, [sp, #8]
 8011474:	9d01      	ldr	r5, [sp, #4]
 8011476:	ee18 0a10 	vmov	r0, s16
 801147a:	4631      	mov	r1, r6
 801147c:	f7ff f9da 	bl	8010834 <quorem>
 8011480:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011484:	9b01      	ldr	r3, [sp, #4]
 8011486:	f805 ab01 	strb.w	sl, [r5], #1
 801148a:	1aea      	subs	r2, r5, r3
 801148c:	9b02      	ldr	r3, [sp, #8]
 801148e:	4293      	cmp	r3, r2
 8011490:	dd09      	ble.n	80114a6 <_dtoa_r+0xb56>
 8011492:	ee18 1a10 	vmov	r1, s16
 8011496:	2300      	movs	r3, #0
 8011498:	220a      	movs	r2, #10
 801149a:	4620      	mov	r0, r4
 801149c:	f000 fe68 	bl	8012170 <__multadd>
 80114a0:	ee08 0a10 	vmov	s16, r0
 80114a4:	e7e7      	b.n	8011476 <_dtoa_r+0xb26>
 80114a6:	9b02      	ldr	r3, [sp, #8]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	bfc8      	it	gt
 80114ac:	461d      	movgt	r5, r3
 80114ae:	9b01      	ldr	r3, [sp, #4]
 80114b0:	bfd8      	it	le
 80114b2:	2501      	movle	r5, #1
 80114b4:	441d      	add	r5, r3
 80114b6:	f04f 0800 	mov.w	r8, #0
 80114ba:	ee18 1a10 	vmov	r1, s16
 80114be:	2201      	movs	r2, #1
 80114c0:	4620      	mov	r0, r4
 80114c2:	f001 f84f 	bl	8012564 <__lshift>
 80114c6:	4631      	mov	r1, r6
 80114c8:	ee08 0a10 	vmov	s16, r0
 80114cc:	f001 f8ba 	bl	8012644 <__mcmp>
 80114d0:	2800      	cmp	r0, #0
 80114d2:	dc91      	bgt.n	80113f8 <_dtoa_r+0xaa8>
 80114d4:	d102      	bne.n	80114dc <_dtoa_r+0xb8c>
 80114d6:	f01a 0f01 	tst.w	sl, #1
 80114da:	d18d      	bne.n	80113f8 <_dtoa_r+0xaa8>
 80114dc:	462b      	mov	r3, r5
 80114de:	461d      	mov	r5, r3
 80114e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114e4:	2a30      	cmp	r2, #48	; 0x30
 80114e6:	d0fa      	beq.n	80114de <_dtoa_r+0xb8e>
 80114e8:	e6d7      	b.n	801129a <_dtoa_r+0x94a>
 80114ea:	9a01      	ldr	r2, [sp, #4]
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d184      	bne.n	80113fa <_dtoa_r+0xaaa>
 80114f0:	9b00      	ldr	r3, [sp, #0]
 80114f2:	3301      	adds	r3, #1
 80114f4:	9300      	str	r3, [sp, #0]
 80114f6:	2331      	movs	r3, #49	; 0x31
 80114f8:	7013      	strb	r3, [r2, #0]
 80114fa:	e6ce      	b.n	801129a <_dtoa_r+0x94a>
 80114fc:	4b09      	ldr	r3, [pc, #36]	; (8011524 <_dtoa_r+0xbd4>)
 80114fe:	f7ff ba95 	b.w	8010a2c <_dtoa_r+0xdc>
 8011502:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011504:	2b00      	cmp	r3, #0
 8011506:	f47f aa6e 	bne.w	80109e6 <_dtoa_r+0x96>
 801150a:	4b07      	ldr	r3, [pc, #28]	; (8011528 <_dtoa_r+0xbd8>)
 801150c:	f7ff ba8e 	b.w	8010a2c <_dtoa_r+0xdc>
 8011510:	9b02      	ldr	r3, [sp, #8]
 8011512:	2b00      	cmp	r3, #0
 8011514:	dcae      	bgt.n	8011474 <_dtoa_r+0xb24>
 8011516:	9b06      	ldr	r3, [sp, #24]
 8011518:	2b02      	cmp	r3, #2
 801151a:	f73f aea8 	bgt.w	801126e <_dtoa_r+0x91e>
 801151e:	e7a9      	b.n	8011474 <_dtoa_r+0xb24>
 8011520:	08014b2f 	.word	0x08014b2f
 8011524:	08014d89 	.word	0x08014d89
 8011528:	08014ab0 	.word	0x08014ab0

0801152c <__sflush_r>:
 801152c:	898a      	ldrh	r2, [r1, #12]
 801152e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011532:	4605      	mov	r5, r0
 8011534:	0710      	lsls	r0, r2, #28
 8011536:	460c      	mov	r4, r1
 8011538:	d458      	bmi.n	80115ec <__sflush_r+0xc0>
 801153a:	684b      	ldr	r3, [r1, #4]
 801153c:	2b00      	cmp	r3, #0
 801153e:	dc05      	bgt.n	801154c <__sflush_r+0x20>
 8011540:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011542:	2b00      	cmp	r3, #0
 8011544:	dc02      	bgt.n	801154c <__sflush_r+0x20>
 8011546:	2000      	movs	r0, #0
 8011548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801154c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801154e:	2e00      	cmp	r6, #0
 8011550:	d0f9      	beq.n	8011546 <__sflush_r+0x1a>
 8011552:	2300      	movs	r3, #0
 8011554:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011558:	682f      	ldr	r7, [r5, #0]
 801155a:	602b      	str	r3, [r5, #0]
 801155c:	d032      	beq.n	80115c4 <__sflush_r+0x98>
 801155e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011560:	89a3      	ldrh	r3, [r4, #12]
 8011562:	075a      	lsls	r2, r3, #29
 8011564:	d505      	bpl.n	8011572 <__sflush_r+0x46>
 8011566:	6863      	ldr	r3, [r4, #4]
 8011568:	1ac0      	subs	r0, r0, r3
 801156a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801156c:	b10b      	cbz	r3, 8011572 <__sflush_r+0x46>
 801156e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011570:	1ac0      	subs	r0, r0, r3
 8011572:	2300      	movs	r3, #0
 8011574:	4602      	mov	r2, r0
 8011576:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011578:	6a21      	ldr	r1, [r4, #32]
 801157a:	4628      	mov	r0, r5
 801157c:	47b0      	blx	r6
 801157e:	1c43      	adds	r3, r0, #1
 8011580:	89a3      	ldrh	r3, [r4, #12]
 8011582:	d106      	bne.n	8011592 <__sflush_r+0x66>
 8011584:	6829      	ldr	r1, [r5, #0]
 8011586:	291d      	cmp	r1, #29
 8011588:	d82c      	bhi.n	80115e4 <__sflush_r+0xb8>
 801158a:	4a2a      	ldr	r2, [pc, #168]	; (8011634 <__sflush_r+0x108>)
 801158c:	40ca      	lsrs	r2, r1
 801158e:	07d6      	lsls	r6, r2, #31
 8011590:	d528      	bpl.n	80115e4 <__sflush_r+0xb8>
 8011592:	2200      	movs	r2, #0
 8011594:	6062      	str	r2, [r4, #4]
 8011596:	04d9      	lsls	r1, r3, #19
 8011598:	6922      	ldr	r2, [r4, #16]
 801159a:	6022      	str	r2, [r4, #0]
 801159c:	d504      	bpl.n	80115a8 <__sflush_r+0x7c>
 801159e:	1c42      	adds	r2, r0, #1
 80115a0:	d101      	bne.n	80115a6 <__sflush_r+0x7a>
 80115a2:	682b      	ldr	r3, [r5, #0]
 80115a4:	b903      	cbnz	r3, 80115a8 <__sflush_r+0x7c>
 80115a6:	6560      	str	r0, [r4, #84]	; 0x54
 80115a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115aa:	602f      	str	r7, [r5, #0]
 80115ac:	2900      	cmp	r1, #0
 80115ae:	d0ca      	beq.n	8011546 <__sflush_r+0x1a>
 80115b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115b4:	4299      	cmp	r1, r3
 80115b6:	d002      	beq.n	80115be <__sflush_r+0x92>
 80115b8:	4628      	mov	r0, r5
 80115ba:	f001 fa4f 	bl	8012a5c <_free_r>
 80115be:	2000      	movs	r0, #0
 80115c0:	6360      	str	r0, [r4, #52]	; 0x34
 80115c2:	e7c1      	b.n	8011548 <__sflush_r+0x1c>
 80115c4:	6a21      	ldr	r1, [r4, #32]
 80115c6:	2301      	movs	r3, #1
 80115c8:	4628      	mov	r0, r5
 80115ca:	47b0      	blx	r6
 80115cc:	1c41      	adds	r1, r0, #1
 80115ce:	d1c7      	bne.n	8011560 <__sflush_r+0x34>
 80115d0:	682b      	ldr	r3, [r5, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d0c4      	beq.n	8011560 <__sflush_r+0x34>
 80115d6:	2b1d      	cmp	r3, #29
 80115d8:	d001      	beq.n	80115de <__sflush_r+0xb2>
 80115da:	2b16      	cmp	r3, #22
 80115dc:	d101      	bne.n	80115e2 <__sflush_r+0xb6>
 80115de:	602f      	str	r7, [r5, #0]
 80115e0:	e7b1      	b.n	8011546 <__sflush_r+0x1a>
 80115e2:	89a3      	ldrh	r3, [r4, #12]
 80115e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115e8:	81a3      	strh	r3, [r4, #12]
 80115ea:	e7ad      	b.n	8011548 <__sflush_r+0x1c>
 80115ec:	690f      	ldr	r7, [r1, #16]
 80115ee:	2f00      	cmp	r7, #0
 80115f0:	d0a9      	beq.n	8011546 <__sflush_r+0x1a>
 80115f2:	0793      	lsls	r3, r2, #30
 80115f4:	680e      	ldr	r6, [r1, #0]
 80115f6:	bf08      	it	eq
 80115f8:	694b      	ldreq	r3, [r1, #20]
 80115fa:	600f      	str	r7, [r1, #0]
 80115fc:	bf18      	it	ne
 80115fe:	2300      	movne	r3, #0
 8011600:	eba6 0807 	sub.w	r8, r6, r7
 8011604:	608b      	str	r3, [r1, #8]
 8011606:	f1b8 0f00 	cmp.w	r8, #0
 801160a:	dd9c      	ble.n	8011546 <__sflush_r+0x1a>
 801160c:	6a21      	ldr	r1, [r4, #32]
 801160e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011610:	4643      	mov	r3, r8
 8011612:	463a      	mov	r2, r7
 8011614:	4628      	mov	r0, r5
 8011616:	47b0      	blx	r6
 8011618:	2800      	cmp	r0, #0
 801161a:	dc06      	bgt.n	801162a <__sflush_r+0xfe>
 801161c:	89a3      	ldrh	r3, [r4, #12]
 801161e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011622:	81a3      	strh	r3, [r4, #12]
 8011624:	f04f 30ff 	mov.w	r0, #4294967295
 8011628:	e78e      	b.n	8011548 <__sflush_r+0x1c>
 801162a:	4407      	add	r7, r0
 801162c:	eba8 0800 	sub.w	r8, r8, r0
 8011630:	e7e9      	b.n	8011606 <__sflush_r+0xda>
 8011632:	bf00      	nop
 8011634:	20400001 	.word	0x20400001

08011638 <_fflush_r>:
 8011638:	b538      	push	{r3, r4, r5, lr}
 801163a:	690b      	ldr	r3, [r1, #16]
 801163c:	4605      	mov	r5, r0
 801163e:	460c      	mov	r4, r1
 8011640:	b913      	cbnz	r3, 8011648 <_fflush_r+0x10>
 8011642:	2500      	movs	r5, #0
 8011644:	4628      	mov	r0, r5
 8011646:	bd38      	pop	{r3, r4, r5, pc}
 8011648:	b118      	cbz	r0, 8011652 <_fflush_r+0x1a>
 801164a:	6983      	ldr	r3, [r0, #24]
 801164c:	b90b      	cbnz	r3, 8011652 <_fflush_r+0x1a>
 801164e:	f000 f887 	bl	8011760 <__sinit>
 8011652:	4b14      	ldr	r3, [pc, #80]	; (80116a4 <_fflush_r+0x6c>)
 8011654:	429c      	cmp	r4, r3
 8011656:	d11b      	bne.n	8011690 <_fflush_r+0x58>
 8011658:	686c      	ldr	r4, [r5, #4]
 801165a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d0ef      	beq.n	8011642 <_fflush_r+0xa>
 8011662:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011664:	07d0      	lsls	r0, r2, #31
 8011666:	d404      	bmi.n	8011672 <_fflush_r+0x3a>
 8011668:	0599      	lsls	r1, r3, #22
 801166a:	d402      	bmi.n	8011672 <_fflush_r+0x3a>
 801166c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801166e:	f000 fc88 	bl	8011f82 <__retarget_lock_acquire_recursive>
 8011672:	4628      	mov	r0, r5
 8011674:	4621      	mov	r1, r4
 8011676:	f7ff ff59 	bl	801152c <__sflush_r>
 801167a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801167c:	07da      	lsls	r2, r3, #31
 801167e:	4605      	mov	r5, r0
 8011680:	d4e0      	bmi.n	8011644 <_fflush_r+0xc>
 8011682:	89a3      	ldrh	r3, [r4, #12]
 8011684:	059b      	lsls	r3, r3, #22
 8011686:	d4dd      	bmi.n	8011644 <_fflush_r+0xc>
 8011688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801168a:	f000 fc7b 	bl	8011f84 <__retarget_lock_release_recursive>
 801168e:	e7d9      	b.n	8011644 <_fflush_r+0xc>
 8011690:	4b05      	ldr	r3, [pc, #20]	; (80116a8 <_fflush_r+0x70>)
 8011692:	429c      	cmp	r4, r3
 8011694:	d101      	bne.n	801169a <_fflush_r+0x62>
 8011696:	68ac      	ldr	r4, [r5, #8]
 8011698:	e7df      	b.n	801165a <_fflush_r+0x22>
 801169a:	4b04      	ldr	r3, [pc, #16]	; (80116ac <_fflush_r+0x74>)
 801169c:	429c      	cmp	r4, r3
 801169e:	bf08      	it	eq
 80116a0:	68ec      	ldreq	r4, [r5, #12]
 80116a2:	e7da      	b.n	801165a <_fflush_r+0x22>
 80116a4:	08014b60 	.word	0x08014b60
 80116a8:	08014b80 	.word	0x08014b80
 80116ac:	08014b40 	.word	0x08014b40

080116b0 <std>:
 80116b0:	2300      	movs	r3, #0
 80116b2:	b510      	push	{r4, lr}
 80116b4:	4604      	mov	r4, r0
 80116b6:	e9c0 3300 	strd	r3, r3, [r0]
 80116ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80116be:	6083      	str	r3, [r0, #8]
 80116c0:	8181      	strh	r1, [r0, #12]
 80116c2:	6643      	str	r3, [r0, #100]	; 0x64
 80116c4:	81c2      	strh	r2, [r0, #14]
 80116c6:	6183      	str	r3, [r0, #24]
 80116c8:	4619      	mov	r1, r3
 80116ca:	2208      	movs	r2, #8
 80116cc:	305c      	adds	r0, #92	; 0x5c
 80116ce:	f7fd f931 	bl	800e934 <memset>
 80116d2:	4b05      	ldr	r3, [pc, #20]	; (80116e8 <std+0x38>)
 80116d4:	6263      	str	r3, [r4, #36]	; 0x24
 80116d6:	4b05      	ldr	r3, [pc, #20]	; (80116ec <std+0x3c>)
 80116d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80116da:	4b05      	ldr	r3, [pc, #20]	; (80116f0 <std+0x40>)
 80116dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80116de:	4b05      	ldr	r3, [pc, #20]	; (80116f4 <std+0x44>)
 80116e0:	6224      	str	r4, [r4, #32]
 80116e2:	6323      	str	r3, [r4, #48]	; 0x30
 80116e4:	bd10      	pop	{r4, pc}
 80116e6:	bf00      	nop
 80116e8:	0800f861 	.word	0x0800f861
 80116ec:	0800f887 	.word	0x0800f887
 80116f0:	0800f8bf 	.word	0x0800f8bf
 80116f4:	0800f8e3 	.word	0x0800f8e3

080116f8 <_cleanup_r>:
 80116f8:	4901      	ldr	r1, [pc, #4]	; (8011700 <_cleanup_r+0x8>)
 80116fa:	f000 b8af 	b.w	801185c <_fwalk_reent>
 80116fe:	bf00      	nop
 8011700:	08011639 	.word	0x08011639

08011704 <__sfmoreglue>:
 8011704:	b570      	push	{r4, r5, r6, lr}
 8011706:	2268      	movs	r2, #104	; 0x68
 8011708:	1e4d      	subs	r5, r1, #1
 801170a:	4355      	muls	r5, r2
 801170c:	460e      	mov	r6, r1
 801170e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011712:	f001 fa0f 	bl	8012b34 <_malloc_r>
 8011716:	4604      	mov	r4, r0
 8011718:	b140      	cbz	r0, 801172c <__sfmoreglue+0x28>
 801171a:	2100      	movs	r1, #0
 801171c:	e9c0 1600 	strd	r1, r6, [r0]
 8011720:	300c      	adds	r0, #12
 8011722:	60a0      	str	r0, [r4, #8]
 8011724:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011728:	f7fd f904 	bl	800e934 <memset>
 801172c:	4620      	mov	r0, r4
 801172e:	bd70      	pop	{r4, r5, r6, pc}

08011730 <__sfp_lock_acquire>:
 8011730:	4801      	ldr	r0, [pc, #4]	; (8011738 <__sfp_lock_acquire+0x8>)
 8011732:	f000 bc26 	b.w	8011f82 <__retarget_lock_acquire_recursive>
 8011736:	bf00      	nop
 8011738:	20003141 	.word	0x20003141

0801173c <__sfp_lock_release>:
 801173c:	4801      	ldr	r0, [pc, #4]	; (8011744 <__sfp_lock_release+0x8>)
 801173e:	f000 bc21 	b.w	8011f84 <__retarget_lock_release_recursive>
 8011742:	bf00      	nop
 8011744:	20003141 	.word	0x20003141

08011748 <__sinit_lock_acquire>:
 8011748:	4801      	ldr	r0, [pc, #4]	; (8011750 <__sinit_lock_acquire+0x8>)
 801174a:	f000 bc1a 	b.w	8011f82 <__retarget_lock_acquire_recursive>
 801174e:	bf00      	nop
 8011750:	20003142 	.word	0x20003142

08011754 <__sinit_lock_release>:
 8011754:	4801      	ldr	r0, [pc, #4]	; (801175c <__sinit_lock_release+0x8>)
 8011756:	f000 bc15 	b.w	8011f84 <__retarget_lock_release_recursive>
 801175a:	bf00      	nop
 801175c:	20003142 	.word	0x20003142

08011760 <__sinit>:
 8011760:	b510      	push	{r4, lr}
 8011762:	4604      	mov	r4, r0
 8011764:	f7ff fff0 	bl	8011748 <__sinit_lock_acquire>
 8011768:	69a3      	ldr	r3, [r4, #24]
 801176a:	b11b      	cbz	r3, 8011774 <__sinit+0x14>
 801176c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011770:	f7ff bff0 	b.w	8011754 <__sinit_lock_release>
 8011774:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011778:	6523      	str	r3, [r4, #80]	; 0x50
 801177a:	4b13      	ldr	r3, [pc, #76]	; (80117c8 <__sinit+0x68>)
 801177c:	4a13      	ldr	r2, [pc, #76]	; (80117cc <__sinit+0x6c>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	62a2      	str	r2, [r4, #40]	; 0x28
 8011782:	42a3      	cmp	r3, r4
 8011784:	bf04      	itt	eq
 8011786:	2301      	moveq	r3, #1
 8011788:	61a3      	streq	r3, [r4, #24]
 801178a:	4620      	mov	r0, r4
 801178c:	f000 f820 	bl	80117d0 <__sfp>
 8011790:	6060      	str	r0, [r4, #4]
 8011792:	4620      	mov	r0, r4
 8011794:	f000 f81c 	bl	80117d0 <__sfp>
 8011798:	60a0      	str	r0, [r4, #8]
 801179a:	4620      	mov	r0, r4
 801179c:	f000 f818 	bl	80117d0 <__sfp>
 80117a0:	2200      	movs	r2, #0
 80117a2:	60e0      	str	r0, [r4, #12]
 80117a4:	2104      	movs	r1, #4
 80117a6:	6860      	ldr	r0, [r4, #4]
 80117a8:	f7ff ff82 	bl	80116b0 <std>
 80117ac:	68a0      	ldr	r0, [r4, #8]
 80117ae:	2201      	movs	r2, #1
 80117b0:	2109      	movs	r1, #9
 80117b2:	f7ff ff7d 	bl	80116b0 <std>
 80117b6:	68e0      	ldr	r0, [r4, #12]
 80117b8:	2202      	movs	r2, #2
 80117ba:	2112      	movs	r1, #18
 80117bc:	f7ff ff78 	bl	80116b0 <std>
 80117c0:	2301      	movs	r3, #1
 80117c2:	61a3      	str	r3, [r4, #24]
 80117c4:	e7d2      	b.n	801176c <__sinit+0xc>
 80117c6:	bf00      	nop
 80117c8:	08014a24 	.word	0x08014a24
 80117cc:	080116f9 	.word	0x080116f9

080117d0 <__sfp>:
 80117d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117d2:	4607      	mov	r7, r0
 80117d4:	f7ff ffac 	bl	8011730 <__sfp_lock_acquire>
 80117d8:	4b1e      	ldr	r3, [pc, #120]	; (8011854 <__sfp+0x84>)
 80117da:	681e      	ldr	r6, [r3, #0]
 80117dc:	69b3      	ldr	r3, [r6, #24]
 80117de:	b913      	cbnz	r3, 80117e6 <__sfp+0x16>
 80117e0:	4630      	mov	r0, r6
 80117e2:	f7ff ffbd 	bl	8011760 <__sinit>
 80117e6:	3648      	adds	r6, #72	; 0x48
 80117e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80117ec:	3b01      	subs	r3, #1
 80117ee:	d503      	bpl.n	80117f8 <__sfp+0x28>
 80117f0:	6833      	ldr	r3, [r6, #0]
 80117f2:	b30b      	cbz	r3, 8011838 <__sfp+0x68>
 80117f4:	6836      	ldr	r6, [r6, #0]
 80117f6:	e7f7      	b.n	80117e8 <__sfp+0x18>
 80117f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80117fc:	b9d5      	cbnz	r5, 8011834 <__sfp+0x64>
 80117fe:	4b16      	ldr	r3, [pc, #88]	; (8011858 <__sfp+0x88>)
 8011800:	60e3      	str	r3, [r4, #12]
 8011802:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011806:	6665      	str	r5, [r4, #100]	; 0x64
 8011808:	f000 fbba 	bl	8011f80 <__retarget_lock_init_recursive>
 801180c:	f7ff ff96 	bl	801173c <__sfp_lock_release>
 8011810:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011814:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011818:	6025      	str	r5, [r4, #0]
 801181a:	61a5      	str	r5, [r4, #24]
 801181c:	2208      	movs	r2, #8
 801181e:	4629      	mov	r1, r5
 8011820:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011824:	f7fd f886 	bl	800e934 <memset>
 8011828:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801182c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011830:	4620      	mov	r0, r4
 8011832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011834:	3468      	adds	r4, #104	; 0x68
 8011836:	e7d9      	b.n	80117ec <__sfp+0x1c>
 8011838:	2104      	movs	r1, #4
 801183a:	4638      	mov	r0, r7
 801183c:	f7ff ff62 	bl	8011704 <__sfmoreglue>
 8011840:	4604      	mov	r4, r0
 8011842:	6030      	str	r0, [r6, #0]
 8011844:	2800      	cmp	r0, #0
 8011846:	d1d5      	bne.n	80117f4 <__sfp+0x24>
 8011848:	f7ff ff78 	bl	801173c <__sfp_lock_release>
 801184c:	230c      	movs	r3, #12
 801184e:	603b      	str	r3, [r7, #0]
 8011850:	e7ee      	b.n	8011830 <__sfp+0x60>
 8011852:	bf00      	nop
 8011854:	08014a24 	.word	0x08014a24
 8011858:	ffff0001 	.word	0xffff0001

0801185c <_fwalk_reent>:
 801185c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011860:	4606      	mov	r6, r0
 8011862:	4688      	mov	r8, r1
 8011864:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011868:	2700      	movs	r7, #0
 801186a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801186e:	f1b9 0901 	subs.w	r9, r9, #1
 8011872:	d505      	bpl.n	8011880 <_fwalk_reent+0x24>
 8011874:	6824      	ldr	r4, [r4, #0]
 8011876:	2c00      	cmp	r4, #0
 8011878:	d1f7      	bne.n	801186a <_fwalk_reent+0xe>
 801187a:	4638      	mov	r0, r7
 801187c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011880:	89ab      	ldrh	r3, [r5, #12]
 8011882:	2b01      	cmp	r3, #1
 8011884:	d907      	bls.n	8011896 <_fwalk_reent+0x3a>
 8011886:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801188a:	3301      	adds	r3, #1
 801188c:	d003      	beq.n	8011896 <_fwalk_reent+0x3a>
 801188e:	4629      	mov	r1, r5
 8011890:	4630      	mov	r0, r6
 8011892:	47c0      	blx	r8
 8011894:	4307      	orrs	r7, r0
 8011896:	3568      	adds	r5, #104	; 0x68
 8011898:	e7e9      	b.n	801186e <_fwalk_reent+0x12>

0801189a <rshift>:
 801189a:	6903      	ldr	r3, [r0, #16]
 801189c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80118a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118a4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80118a8:	f100 0414 	add.w	r4, r0, #20
 80118ac:	dd45      	ble.n	801193a <rshift+0xa0>
 80118ae:	f011 011f 	ands.w	r1, r1, #31
 80118b2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80118b6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80118ba:	d10c      	bne.n	80118d6 <rshift+0x3c>
 80118bc:	f100 0710 	add.w	r7, r0, #16
 80118c0:	4629      	mov	r1, r5
 80118c2:	42b1      	cmp	r1, r6
 80118c4:	d334      	bcc.n	8011930 <rshift+0x96>
 80118c6:	1a9b      	subs	r3, r3, r2
 80118c8:	009b      	lsls	r3, r3, #2
 80118ca:	1eea      	subs	r2, r5, #3
 80118cc:	4296      	cmp	r6, r2
 80118ce:	bf38      	it	cc
 80118d0:	2300      	movcc	r3, #0
 80118d2:	4423      	add	r3, r4
 80118d4:	e015      	b.n	8011902 <rshift+0x68>
 80118d6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80118da:	f1c1 0820 	rsb	r8, r1, #32
 80118de:	40cf      	lsrs	r7, r1
 80118e0:	f105 0e04 	add.w	lr, r5, #4
 80118e4:	46a1      	mov	r9, r4
 80118e6:	4576      	cmp	r6, lr
 80118e8:	46f4      	mov	ip, lr
 80118ea:	d815      	bhi.n	8011918 <rshift+0x7e>
 80118ec:	1a9a      	subs	r2, r3, r2
 80118ee:	0092      	lsls	r2, r2, #2
 80118f0:	3a04      	subs	r2, #4
 80118f2:	3501      	adds	r5, #1
 80118f4:	42ae      	cmp	r6, r5
 80118f6:	bf38      	it	cc
 80118f8:	2200      	movcc	r2, #0
 80118fa:	18a3      	adds	r3, r4, r2
 80118fc:	50a7      	str	r7, [r4, r2]
 80118fe:	b107      	cbz	r7, 8011902 <rshift+0x68>
 8011900:	3304      	adds	r3, #4
 8011902:	1b1a      	subs	r2, r3, r4
 8011904:	42a3      	cmp	r3, r4
 8011906:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801190a:	bf08      	it	eq
 801190c:	2300      	moveq	r3, #0
 801190e:	6102      	str	r2, [r0, #16]
 8011910:	bf08      	it	eq
 8011912:	6143      	streq	r3, [r0, #20]
 8011914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011918:	f8dc c000 	ldr.w	ip, [ip]
 801191c:	fa0c fc08 	lsl.w	ip, ip, r8
 8011920:	ea4c 0707 	orr.w	r7, ip, r7
 8011924:	f849 7b04 	str.w	r7, [r9], #4
 8011928:	f85e 7b04 	ldr.w	r7, [lr], #4
 801192c:	40cf      	lsrs	r7, r1
 801192e:	e7da      	b.n	80118e6 <rshift+0x4c>
 8011930:	f851 cb04 	ldr.w	ip, [r1], #4
 8011934:	f847 cf04 	str.w	ip, [r7, #4]!
 8011938:	e7c3      	b.n	80118c2 <rshift+0x28>
 801193a:	4623      	mov	r3, r4
 801193c:	e7e1      	b.n	8011902 <rshift+0x68>

0801193e <__hexdig_fun>:
 801193e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011942:	2b09      	cmp	r3, #9
 8011944:	d802      	bhi.n	801194c <__hexdig_fun+0xe>
 8011946:	3820      	subs	r0, #32
 8011948:	b2c0      	uxtb	r0, r0
 801194a:	4770      	bx	lr
 801194c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011950:	2b05      	cmp	r3, #5
 8011952:	d801      	bhi.n	8011958 <__hexdig_fun+0x1a>
 8011954:	3847      	subs	r0, #71	; 0x47
 8011956:	e7f7      	b.n	8011948 <__hexdig_fun+0xa>
 8011958:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801195c:	2b05      	cmp	r3, #5
 801195e:	d801      	bhi.n	8011964 <__hexdig_fun+0x26>
 8011960:	3827      	subs	r0, #39	; 0x27
 8011962:	e7f1      	b.n	8011948 <__hexdig_fun+0xa>
 8011964:	2000      	movs	r0, #0
 8011966:	4770      	bx	lr

08011968 <__gethex>:
 8011968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801196c:	ed2d 8b02 	vpush	{d8}
 8011970:	b089      	sub	sp, #36	; 0x24
 8011972:	ee08 0a10 	vmov	s16, r0
 8011976:	9304      	str	r3, [sp, #16]
 8011978:	4bb4      	ldr	r3, [pc, #720]	; (8011c4c <__gethex+0x2e4>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	9301      	str	r3, [sp, #4]
 801197e:	4618      	mov	r0, r3
 8011980:	468b      	mov	fp, r1
 8011982:	4690      	mov	r8, r2
 8011984:	f7ee fc3e 	bl	8000204 <strlen>
 8011988:	9b01      	ldr	r3, [sp, #4]
 801198a:	f8db 2000 	ldr.w	r2, [fp]
 801198e:	4403      	add	r3, r0
 8011990:	4682      	mov	sl, r0
 8011992:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011996:	9305      	str	r3, [sp, #20]
 8011998:	1c93      	adds	r3, r2, #2
 801199a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801199e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80119a2:	32fe      	adds	r2, #254	; 0xfe
 80119a4:	18d1      	adds	r1, r2, r3
 80119a6:	461f      	mov	r7, r3
 80119a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80119ac:	9100      	str	r1, [sp, #0]
 80119ae:	2830      	cmp	r0, #48	; 0x30
 80119b0:	d0f8      	beq.n	80119a4 <__gethex+0x3c>
 80119b2:	f7ff ffc4 	bl	801193e <__hexdig_fun>
 80119b6:	4604      	mov	r4, r0
 80119b8:	2800      	cmp	r0, #0
 80119ba:	d13a      	bne.n	8011a32 <__gethex+0xca>
 80119bc:	9901      	ldr	r1, [sp, #4]
 80119be:	4652      	mov	r2, sl
 80119c0:	4638      	mov	r0, r7
 80119c2:	f001 ff69 	bl	8013898 <strncmp>
 80119c6:	4605      	mov	r5, r0
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d168      	bne.n	8011a9e <__gethex+0x136>
 80119cc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80119d0:	eb07 060a 	add.w	r6, r7, sl
 80119d4:	f7ff ffb3 	bl	801193e <__hexdig_fun>
 80119d8:	2800      	cmp	r0, #0
 80119da:	d062      	beq.n	8011aa2 <__gethex+0x13a>
 80119dc:	4633      	mov	r3, r6
 80119de:	7818      	ldrb	r0, [r3, #0]
 80119e0:	2830      	cmp	r0, #48	; 0x30
 80119e2:	461f      	mov	r7, r3
 80119e4:	f103 0301 	add.w	r3, r3, #1
 80119e8:	d0f9      	beq.n	80119de <__gethex+0x76>
 80119ea:	f7ff ffa8 	bl	801193e <__hexdig_fun>
 80119ee:	2301      	movs	r3, #1
 80119f0:	fab0 f480 	clz	r4, r0
 80119f4:	0964      	lsrs	r4, r4, #5
 80119f6:	4635      	mov	r5, r6
 80119f8:	9300      	str	r3, [sp, #0]
 80119fa:	463a      	mov	r2, r7
 80119fc:	4616      	mov	r6, r2
 80119fe:	3201      	adds	r2, #1
 8011a00:	7830      	ldrb	r0, [r6, #0]
 8011a02:	f7ff ff9c 	bl	801193e <__hexdig_fun>
 8011a06:	2800      	cmp	r0, #0
 8011a08:	d1f8      	bne.n	80119fc <__gethex+0x94>
 8011a0a:	9901      	ldr	r1, [sp, #4]
 8011a0c:	4652      	mov	r2, sl
 8011a0e:	4630      	mov	r0, r6
 8011a10:	f001 ff42 	bl	8013898 <strncmp>
 8011a14:	b980      	cbnz	r0, 8011a38 <__gethex+0xd0>
 8011a16:	b94d      	cbnz	r5, 8011a2c <__gethex+0xc4>
 8011a18:	eb06 050a 	add.w	r5, r6, sl
 8011a1c:	462a      	mov	r2, r5
 8011a1e:	4616      	mov	r6, r2
 8011a20:	3201      	adds	r2, #1
 8011a22:	7830      	ldrb	r0, [r6, #0]
 8011a24:	f7ff ff8b 	bl	801193e <__hexdig_fun>
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	d1f8      	bne.n	8011a1e <__gethex+0xb6>
 8011a2c:	1bad      	subs	r5, r5, r6
 8011a2e:	00ad      	lsls	r5, r5, #2
 8011a30:	e004      	b.n	8011a3c <__gethex+0xd4>
 8011a32:	2400      	movs	r4, #0
 8011a34:	4625      	mov	r5, r4
 8011a36:	e7e0      	b.n	80119fa <__gethex+0x92>
 8011a38:	2d00      	cmp	r5, #0
 8011a3a:	d1f7      	bne.n	8011a2c <__gethex+0xc4>
 8011a3c:	7833      	ldrb	r3, [r6, #0]
 8011a3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011a42:	2b50      	cmp	r3, #80	; 0x50
 8011a44:	d13b      	bne.n	8011abe <__gethex+0x156>
 8011a46:	7873      	ldrb	r3, [r6, #1]
 8011a48:	2b2b      	cmp	r3, #43	; 0x2b
 8011a4a:	d02c      	beq.n	8011aa6 <__gethex+0x13e>
 8011a4c:	2b2d      	cmp	r3, #45	; 0x2d
 8011a4e:	d02e      	beq.n	8011aae <__gethex+0x146>
 8011a50:	1c71      	adds	r1, r6, #1
 8011a52:	f04f 0900 	mov.w	r9, #0
 8011a56:	7808      	ldrb	r0, [r1, #0]
 8011a58:	f7ff ff71 	bl	801193e <__hexdig_fun>
 8011a5c:	1e43      	subs	r3, r0, #1
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	2b18      	cmp	r3, #24
 8011a62:	d82c      	bhi.n	8011abe <__gethex+0x156>
 8011a64:	f1a0 0210 	sub.w	r2, r0, #16
 8011a68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011a6c:	f7ff ff67 	bl	801193e <__hexdig_fun>
 8011a70:	1e43      	subs	r3, r0, #1
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	2b18      	cmp	r3, #24
 8011a76:	d91d      	bls.n	8011ab4 <__gethex+0x14c>
 8011a78:	f1b9 0f00 	cmp.w	r9, #0
 8011a7c:	d000      	beq.n	8011a80 <__gethex+0x118>
 8011a7e:	4252      	negs	r2, r2
 8011a80:	4415      	add	r5, r2
 8011a82:	f8cb 1000 	str.w	r1, [fp]
 8011a86:	b1e4      	cbz	r4, 8011ac2 <__gethex+0x15a>
 8011a88:	9b00      	ldr	r3, [sp, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	bf14      	ite	ne
 8011a8e:	2700      	movne	r7, #0
 8011a90:	2706      	moveq	r7, #6
 8011a92:	4638      	mov	r0, r7
 8011a94:	b009      	add	sp, #36	; 0x24
 8011a96:	ecbd 8b02 	vpop	{d8}
 8011a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a9e:	463e      	mov	r6, r7
 8011aa0:	4625      	mov	r5, r4
 8011aa2:	2401      	movs	r4, #1
 8011aa4:	e7ca      	b.n	8011a3c <__gethex+0xd4>
 8011aa6:	f04f 0900 	mov.w	r9, #0
 8011aaa:	1cb1      	adds	r1, r6, #2
 8011aac:	e7d3      	b.n	8011a56 <__gethex+0xee>
 8011aae:	f04f 0901 	mov.w	r9, #1
 8011ab2:	e7fa      	b.n	8011aaa <__gethex+0x142>
 8011ab4:	230a      	movs	r3, #10
 8011ab6:	fb03 0202 	mla	r2, r3, r2, r0
 8011aba:	3a10      	subs	r2, #16
 8011abc:	e7d4      	b.n	8011a68 <__gethex+0x100>
 8011abe:	4631      	mov	r1, r6
 8011ac0:	e7df      	b.n	8011a82 <__gethex+0x11a>
 8011ac2:	1bf3      	subs	r3, r6, r7
 8011ac4:	3b01      	subs	r3, #1
 8011ac6:	4621      	mov	r1, r4
 8011ac8:	2b07      	cmp	r3, #7
 8011aca:	dc0b      	bgt.n	8011ae4 <__gethex+0x17c>
 8011acc:	ee18 0a10 	vmov	r0, s16
 8011ad0:	f000 faec 	bl	80120ac <_Balloc>
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	b940      	cbnz	r0, 8011aea <__gethex+0x182>
 8011ad8:	4b5d      	ldr	r3, [pc, #372]	; (8011c50 <__gethex+0x2e8>)
 8011ada:	4602      	mov	r2, r0
 8011adc:	21de      	movs	r1, #222	; 0xde
 8011ade:	485d      	ldr	r0, [pc, #372]	; (8011c54 <__gethex+0x2ec>)
 8011ae0:	f001 ffaa 	bl	8013a38 <__assert_func>
 8011ae4:	3101      	adds	r1, #1
 8011ae6:	105b      	asrs	r3, r3, #1
 8011ae8:	e7ee      	b.n	8011ac8 <__gethex+0x160>
 8011aea:	f100 0914 	add.w	r9, r0, #20
 8011aee:	f04f 0b00 	mov.w	fp, #0
 8011af2:	f1ca 0301 	rsb	r3, sl, #1
 8011af6:	f8cd 9008 	str.w	r9, [sp, #8]
 8011afa:	f8cd b000 	str.w	fp, [sp]
 8011afe:	9306      	str	r3, [sp, #24]
 8011b00:	42b7      	cmp	r7, r6
 8011b02:	d340      	bcc.n	8011b86 <__gethex+0x21e>
 8011b04:	9802      	ldr	r0, [sp, #8]
 8011b06:	9b00      	ldr	r3, [sp, #0]
 8011b08:	f840 3b04 	str.w	r3, [r0], #4
 8011b0c:	eba0 0009 	sub.w	r0, r0, r9
 8011b10:	1080      	asrs	r0, r0, #2
 8011b12:	0146      	lsls	r6, r0, #5
 8011b14:	6120      	str	r0, [r4, #16]
 8011b16:	4618      	mov	r0, r3
 8011b18:	f000 fbba 	bl	8012290 <__hi0bits>
 8011b1c:	1a30      	subs	r0, r6, r0
 8011b1e:	f8d8 6000 	ldr.w	r6, [r8]
 8011b22:	42b0      	cmp	r0, r6
 8011b24:	dd63      	ble.n	8011bee <__gethex+0x286>
 8011b26:	1b87      	subs	r7, r0, r6
 8011b28:	4639      	mov	r1, r7
 8011b2a:	4620      	mov	r0, r4
 8011b2c:	f000 ff5e 	bl	80129ec <__any_on>
 8011b30:	4682      	mov	sl, r0
 8011b32:	b1a8      	cbz	r0, 8011b60 <__gethex+0x1f8>
 8011b34:	1e7b      	subs	r3, r7, #1
 8011b36:	1159      	asrs	r1, r3, #5
 8011b38:	f003 021f 	and.w	r2, r3, #31
 8011b3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011b40:	f04f 0a01 	mov.w	sl, #1
 8011b44:	fa0a f202 	lsl.w	r2, sl, r2
 8011b48:	420a      	tst	r2, r1
 8011b4a:	d009      	beq.n	8011b60 <__gethex+0x1f8>
 8011b4c:	4553      	cmp	r3, sl
 8011b4e:	dd05      	ble.n	8011b5c <__gethex+0x1f4>
 8011b50:	1eb9      	subs	r1, r7, #2
 8011b52:	4620      	mov	r0, r4
 8011b54:	f000 ff4a 	bl	80129ec <__any_on>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	d145      	bne.n	8011be8 <__gethex+0x280>
 8011b5c:	f04f 0a02 	mov.w	sl, #2
 8011b60:	4639      	mov	r1, r7
 8011b62:	4620      	mov	r0, r4
 8011b64:	f7ff fe99 	bl	801189a <rshift>
 8011b68:	443d      	add	r5, r7
 8011b6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b6e:	42ab      	cmp	r3, r5
 8011b70:	da4c      	bge.n	8011c0c <__gethex+0x2a4>
 8011b72:	ee18 0a10 	vmov	r0, s16
 8011b76:	4621      	mov	r1, r4
 8011b78:	f000 fad8 	bl	801212c <_Bfree>
 8011b7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011b7e:	2300      	movs	r3, #0
 8011b80:	6013      	str	r3, [r2, #0]
 8011b82:	27a3      	movs	r7, #163	; 0xa3
 8011b84:	e785      	b.n	8011a92 <__gethex+0x12a>
 8011b86:	1e73      	subs	r3, r6, #1
 8011b88:	9a05      	ldr	r2, [sp, #20]
 8011b8a:	9303      	str	r3, [sp, #12]
 8011b8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011b90:	4293      	cmp	r3, r2
 8011b92:	d019      	beq.n	8011bc8 <__gethex+0x260>
 8011b94:	f1bb 0f20 	cmp.w	fp, #32
 8011b98:	d107      	bne.n	8011baa <__gethex+0x242>
 8011b9a:	9b02      	ldr	r3, [sp, #8]
 8011b9c:	9a00      	ldr	r2, [sp, #0]
 8011b9e:	f843 2b04 	str.w	r2, [r3], #4
 8011ba2:	9302      	str	r3, [sp, #8]
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	9300      	str	r3, [sp, #0]
 8011ba8:	469b      	mov	fp, r3
 8011baa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011bae:	f7ff fec6 	bl	801193e <__hexdig_fun>
 8011bb2:	9b00      	ldr	r3, [sp, #0]
 8011bb4:	f000 000f 	and.w	r0, r0, #15
 8011bb8:	fa00 f00b 	lsl.w	r0, r0, fp
 8011bbc:	4303      	orrs	r3, r0
 8011bbe:	9300      	str	r3, [sp, #0]
 8011bc0:	f10b 0b04 	add.w	fp, fp, #4
 8011bc4:	9b03      	ldr	r3, [sp, #12]
 8011bc6:	e00d      	b.n	8011be4 <__gethex+0x27c>
 8011bc8:	9b03      	ldr	r3, [sp, #12]
 8011bca:	9a06      	ldr	r2, [sp, #24]
 8011bcc:	4413      	add	r3, r2
 8011bce:	42bb      	cmp	r3, r7
 8011bd0:	d3e0      	bcc.n	8011b94 <__gethex+0x22c>
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	9901      	ldr	r1, [sp, #4]
 8011bd6:	9307      	str	r3, [sp, #28]
 8011bd8:	4652      	mov	r2, sl
 8011bda:	f001 fe5d 	bl	8013898 <strncmp>
 8011bde:	9b07      	ldr	r3, [sp, #28]
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d1d7      	bne.n	8011b94 <__gethex+0x22c>
 8011be4:	461e      	mov	r6, r3
 8011be6:	e78b      	b.n	8011b00 <__gethex+0x198>
 8011be8:	f04f 0a03 	mov.w	sl, #3
 8011bec:	e7b8      	b.n	8011b60 <__gethex+0x1f8>
 8011bee:	da0a      	bge.n	8011c06 <__gethex+0x29e>
 8011bf0:	1a37      	subs	r7, r6, r0
 8011bf2:	4621      	mov	r1, r4
 8011bf4:	ee18 0a10 	vmov	r0, s16
 8011bf8:	463a      	mov	r2, r7
 8011bfa:	f000 fcb3 	bl	8012564 <__lshift>
 8011bfe:	1bed      	subs	r5, r5, r7
 8011c00:	4604      	mov	r4, r0
 8011c02:	f100 0914 	add.w	r9, r0, #20
 8011c06:	f04f 0a00 	mov.w	sl, #0
 8011c0a:	e7ae      	b.n	8011b6a <__gethex+0x202>
 8011c0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011c10:	42a8      	cmp	r0, r5
 8011c12:	dd72      	ble.n	8011cfa <__gethex+0x392>
 8011c14:	1b45      	subs	r5, r0, r5
 8011c16:	42ae      	cmp	r6, r5
 8011c18:	dc36      	bgt.n	8011c88 <__gethex+0x320>
 8011c1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c1e:	2b02      	cmp	r3, #2
 8011c20:	d02a      	beq.n	8011c78 <__gethex+0x310>
 8011c22:	2b03      	cmp	r3, #3
 8011c24:	d02c      	beq.n	8011c80 <__gethex+0x318>
 8011c26:	2b01      	cmp	r3, #1
 8011c28:	d11c      	bne.n	8011c64 <__gethex+0x2fc>
 8011c2a:	42ae      	cmp	r6, r5
 8011c2c:	d11a      	bne.n	8011c64 <__gethex+0x2fc>
 8011c2e:	2e01      	cmp	r6, #1
 8011c30:	d112      	bne.n	8011c58 <__gethex+0x2f0>
 8011c32:	9a04      	ldr	r2, [sp, #16]
 8011c34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011c38:	6013      	str	r3, [r2, #0]
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	6123      	str	r3, [r4, #16]
 8011c3e:	f8c9 3000 	str.w	r3, [r9]
 8011c42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c44:	2762      	movs	r7, #98	; 0x62
 8011c46:	601c      	str	r4, [r3, #0]
 8011c48:	e723      	b.n	8011a92 <__gethex+0x12a>
 8011c4a:	bf00      	nop
 8011c4c:	08014c08 	.word	0x08014c08
 8011c50:	08014b2f 	.word	0x08014b2f
 8011c54:	08014ba0 	.word	0x08014ba0
 8011c58:	1e71      	subs	r1, r6, #1
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	f000 fec6 	bl	80129ec <__any_on>
 8011c60:	2800      	cmp	r0, #0
 8011c62:	d1e6      	bne.n	8011c32 <__gethex+0x2ca>
 8011c64:	ee18 0a10 	vmov	r0, s16
 8011c68:	4621      	mov	r1, r4
 8011c6a:	f000 fa5f 	bl	801212c <_Bfree>
 8011c6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c70:	2300      	movs	r3, #0
 8011c72:	6013      	str	r3, [r2, #0]
 8011c74:	2750      	movs	r7, #80	; 0x50
 8011c76:	e70c      	b.n	8011a92 <__gethex+0x12a>
 8011c78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d1f2      	bne.n	8011c64 <__gethex+0x2fc>
 8011c7e:	e7d8      	b.n	8011c32 <__gethex+0x2ca>
 8011c80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d1d5      	bne.n	8011c32 <__gethex+0x2ca>
 8011c86:	e7ed      	b.n	8011c64 <__gethex+0x2fc>
 8011c88:	1e6f      	subs	r7, r5, #1
 8011c8a:	f1ba 0f00 	cmp.w	sl, #0
 8011c8e:	d131      	bne.n	8011cf4 <__gethex+0x38c>
 8011c90:	b127      	cbz	r7, 8011c9c <__gethex+0x334>
 8011c92:	4639      	mov	r1, r7
 8011c94:	4620      	mov	r0, r4
 8011c96:	f000 fea9 	bl	80129ec <__any_on>
 8011c9a:	4682      	mov	sl, r0
 8011c9c:	117b      	asrs	r3, r7, #5
 8011c9e:	2101      	movs	r1, #1
 8011ca0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011ca4:	f007 071f 	and.w	r7, r7, #31
 8011ca8:	fa01 f707 	lsl.w	r7, r1, r7
 8011cac:	421f      	tst	r7, r3
 8011cae:	4629      	mov	r1, r5
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	bf18      	it	ne
 8011cb4:	f04a 0a02 	orrne.w	sl, sl, #2
 8011cb8:	1b76      	subs	r6, r6, r5
 8011cba:	f7ff fdee 	bl	801189a <rshift>
 8011cbe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011cc2:	2702      	movs	r7, #2
 8011cc4:	f1ba 0f00 	cmp.w	sl, #0
 8011cc8:	d048      	beq.n	8011d5c <__gethex+0x3f4>
 8011cca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011cce:	2b02      	cmp	r3, #2
 8011cd0:	d015      	beq.n	8011cfe <__gethex+0x396>
 8011cd2:	2b03      	cmp	r3, #3
 8011cd4:	d017      	beq.n	8011d06 <__gethex+0x39e>
 8011cd6:	2b01      	cmp	r3, #1
 8011cd8:	d109      	bne.n	8011cee <__gethex+0x386>
 8011cda:	f01a 0f02 	tst.w	sl, #2
 8011cde:	d006      	beq.n	8011cee <__gethex+0x386>
 8011ce0:	f8d9 0000 	ldr.w	r0, [r9]
 8011ce4:	ea4a 0a00 	orr.w	sl, sl, r0
 8011ce8:	f01a 0f01 	tst.w	sl, #1
 8011cec:	d10e      	bne.n	8011d0c <__gethex+0x3a4>
 8011cee:	f047 0710 	orr.w	r7, r7, #16
 8011cf2:	e033      	b.n	8011d5c <__gethex+0x3f4>
 8011cf4:	f04f 0a01 	mov.w	sl, #1
 8011cf8:	e7d0      	b.n	8011c9c <__gethex+0x334>
 8011cfa:	2701      	movs	r7, #1
 8011cfc:	e7e2      	b.n	8011cc4 <__gethex+0x35c>
 8011cfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d00:	f1c3 0301 	rsb	r3, r3, #1
 8011d04:	9315      	str	r3, [sp, #84]	; 0x54
 8011d06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d0f0      	beq.n	8011cee <__gethex+0x386>
 8011d0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011d10:	f104 0314 	add.w	r3, r4, #20
 8011d14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011d18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011d1c:	f04f 0c00 	mov.w	ip, #0
 8011d20:	4618      	mov	r0, r3
 8011d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d26:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011d2a:	d01c      	beq.n	8011d66 <__gethex+0x3fe>
 8011d2c:	3201      	adds	r2, #1
 8011d2e:	6002      	str	r2, [r0, #0]
 8011d30:	2f02      	cmp	r7, #2
 8011d32:	f104 0314 	add.w	r3, r4, #20
 8011d36:	d13f      	bne.n	8011db8 <__gethex+0x450>
 8011d38:	f8d8 2000 	ldr.w	r2, [r8]
 8011d3c:	3a01      	subs	r2, #1
 8011d3e:	42b2      	cmp	r2, r6
 8011d40:	d10a      	bne.n	8011d58 <__gethex+0x3f0>
 8011d42:	1171      	asrs	r1, r6, #5
 8011d44:	2201      	movs	r2, #1
 8011d46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d4a:	f006 061f 	and.w	r6, r6, #31
 8011d4e:	fa02 f606 	lsl.w	r6, r2, r6
 8011d52:	421e      	tst	r6, r3
 8011d54:	bf18      	it	ne
 8011d56:	4617      	movne	r7, r2
 8011d58:	f047 0720 	orr.w	r7, r7, #32
 8011d5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d5e:	601c      	str	r4, [r3, #0]
 8011d60:	9b04      	ldr	r3, [sp, #16]
 8011d62:	601d      	str	r5, [r3, #0]
 8011d64:	e695      	b.n	8011a92 <__gethex+0x12a>
 8011d66:	4299      	cmp	r1, r3
 8011d68:	f843 cc04 	str.w	ip, [r3, #-4]
 8011d6c:	d8d8      	bhi.n	8011d20 <__gethex+0x3b8>
 8011d6e:	68a3      	ldr	r3, [r4, #8]
 8011d70:	459b      	cmp	fp, r3
 8011d72:	db19      	blt.n	8011da8 <__gethex+0x440>
 8011d74:	6861      	ldr	r1, [r4, #4]
 8011d76:	ee18 0a10 	vmov	r0, s16
 8011d7a:	3101      	adds	r1, #1
 8011d7c:	f000 f996 	bl	80120ac <_Balloc>
 8011d80:	4681      	mov	r9, r0
 8011d82:	b918      	cbnz	r0, 8011d8c <__gethex+0x424>
 8011d84:	4b1a      	ldr	r3, [pc, #104]	; (8011df0 <__gethex+0x488>)
 8011d86:	4602      	mov	r2, r0
 8011d88:	2184      	movs	r1, #132	; 0x84
 8011d8a:	e6a8      	b.n	8011ade <__gethex+0x176>
 8011d8c:	6922      	ldr	r2, [r4, #16]
 8011d8e:	3202      	adds	r2, #2
 8011d90:	f104 010c 	add.w	r1, r4, #12
 8011d94:	0092      	lsls	r2, r2, #2
 8011d96:	300c      	adds	r0, #12
 8011d98:	f7fc fda4 	bl	800e8e4 <memcpy>
 8011d9c:	4621      	mov	r1, r4
 8011d9e:	ee18 0a10 	vmov	r0, s16
 8011da2:	f000 f9c3 	bl	801212c <_Bfree>
 8011da6:	464c      	mov	r4, r9
 8011da8:	6923      	ldr	r3, [r4, #16]
 8011daa:	1c5a      	adds	r2, r3, #1
 8011dac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011db0:	6122      	str	r2, [r4, #16]
 8011db2:	2201      	movs	r2, #1
 8011db4:	615a      	str	r2, [r3, #20]
 8011db6:	e7bb      	b.n	8011d30 <__gethex+0x3c8>
 8011db8:	6922      	ldr	r2, [r4, #16]
 8011dba:	455a      	cmp	r2, fp
 8011dbc:	dd0b      	ble.n	8011dd6 <__gethex+0x46e>
 8011dbe:	2101      	movs	r1, #1
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f7ff fd6a 	bl	801189a <rshift>
 8011dc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011dca:	3501      	adds	r5, #1
 8011dcc:	42ab      	cmp	r3, r5
 8011dce:	f6ff aed0 	blt.w	8011b72 <__gethex+0x20a>
 8011dd2:	2701      	movs	r7, #1
 8011dd4:	e7c0      	b.n	8011d58 <__gethex+0x3f0>
 8011dd6:	f016 061f 	ands.w	r6, r6, #31
 8011dda:	d0fa      	beq.n	8011dd2 <__gethex+0x46a>
 8011ddc:	4453      	add	r3, sl
 8011dde:	f1c6 0620 	rsb	r6, r6, #32
 8011de2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011de6:	f000 fa53 	bl	8012290 <__hi0bits>
 8011dea:	42b0      	cmp	r0, r6
 8011dec:	dbe7      	blt.n	8011dbe <__gethex+0x456>
 8011dee:	e7f0      	b.n	8011dd2 <__gethex+0x46a>
 8011df0:	08014b2f 	.word	0x08014b2f

08011df4 <L_shift>:
 8011df4:	f1c2 0208 	rsb	r2, r2, #8
 8011df8:	0092      	lsls	r2, r2, #2
 8011dfa:	b570      	push	{r4, r5, r6, lr}
 8011dfc:	f1c2 0620 	rsb	r6, r2, #32
 8011e00:	6843      	ldr	r3, [r0, #4]
 8011e02:	6804      	ldr	r4, [r0, #0]
 8011e04:	fa03 f506 	lsl.w	r5, r3, r6
 8011e08:	432c      	orrs	r4, r5
 8011e0a:	40d3      	lsrs	r3, r2
 8011e0c:	6004      	str	r4, [r0, #0]
 8011e0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011e12:	4288      	cmp	r0, r1
 8011e14:	d3f4      	bcc.n	8011e00 <L_shift+0xc>
 8011e16:	bd70      	pop	{r4, r5, r6, pc}

08011e18 <__match>:
 8011e18:	b530      	push	{r4, r5, lr}
 8011e1a:	6803      	ldr	r3, [r0, #0]
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e22:	b914      	cbnz	r4, 8011e2a <__match+0x12>
 8011e24:	6003      	str	r3, [r0, #0]
 8011e26:	2001      	movs	r0, #1
 8011e28:	bd30      	pop	{r4, r5, pc}
 8011e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011e32:	2d19      	cmp	r5, #25
 8011e34:	bf98      	it	ls
 8011e36:	3220      	addls	r2, #32
 8011e38:	42a2      	cmp	r2, r4
 8011e3a:	d0f0      	beq.n	8011e1e <__match+0x6>
 8011e3c:	2000      	movs	r0, #0
 8011e3e:	e7f3      	b.n	8011e28 <__match+0x10>

08011e40 <__hexnan>:
 8011e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e44:	680b      	ldr	r3, [r1, #0]
 8011e46:	115e      	asrs	r6, r3, #5
 8011e48:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011e4c:	f013 031f 	ands.w	r3, r3, #31
 8011e50:	b087      	sub	sp, #28
 8011e52:	bf18      	it	ne
 8011e54:	3604      	addne	r6, #4
 8011e56:	2500      	movs	r5, #0
 8011e58:	1f37      	subs	r7, r6, #4
 8011e5a:	4690      	mov	r8, r2
 8011e5c:	6802      	ldr	r2, [r0, #0]
 8011e5e:	9301      	str	r3, [sp, #4]
 8011e60:	4682      	mov	sl, r0
 8011e62:	f846 5c04 	str.w	r5, [r6, #-4]
 8011e66:	46b9      	mov	r9, r7
 8011e68:	463c      	mov	r4, r7
 8011e6a:	9502      	str	r5, [sp, #8]
 8011e6c:	46ab      	mov	fp, r5
 8011e6e:	7851      	ldrb	r1, [r2, #1]
 8011e70:	1c53      	adds	r3, r2, #1
 8011e72:	9303      	str	r3, [sp, #12]
 8011e74:	b341      	cbz	r1, 8011ec8 <__hexnan+0x88>
 8011e76:	4608      	mov	r0, r1
 8011e78:	9205      	str	r2, [sp, #20]
 8011e7a:	9104      	str	r1, [sp, #16]
 8011e7c:	f7ff fd5f 	bl	801193e <__hexdig_fun>
 8011e80:	2800      	cmp	r0, #0
 8011e82:	d14f      	bne.n	8011f24 <__hexnan+0xe4>
 8011e84:	9904      	ldr	r1, [sp, #16]
 8011e86:	9a05      	ldr	r2, [sp, #20]
 8011e88:	2920      	cmp	r1, #32
 8011e8a:	d818      	bhi.n	8011ebe <__hexnan+0x7e>
 8011e8c:	9b02      	ldr	r3, [sp, #8]
 8011e8e:	459b      	cmp	fp, r3
 8011e90:	dd13      	ble.n	8011eba <__hexnan+0x7a>
 8011e92:	454c      	cmp	r4, r9
 8011e94:	d206      	bcs.n	8011ea4 <__hexnan+0x64>
 8011e96:	2d07      	cmp	r5, #7
 8011e98:	dc04      	bgt.n	8011ea4 <__hexnan+0x64>
 8011e9a:	462a      	mov	r2, r5
 8011e9c:	4649      	mov	r1, r9
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f7ff ffa8 	bl	8011df4 <L_shift>
 8011ea4:	4544      	cmp	r4, r8
 8011ea6:	d950      	bls.n	8011f4a <__hexnan+0x10a>
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	f1a4 0904 	sub.w	r9, r4, #4
 8011eae:	f844 3c04 	str.w	r3, [r4, #-4]
 8011eb2:	f8cd b008 	str.w	fp, [sp, #8]
 8011eb6:	464c      	mov	r4, r9
 8011eb8:	461d      	mov	r5, r3
 8011eba:	9a03      	ldr	r2, [sp, #12]
 8011ebc:	e7d7      	b.n	8011e6e <__hexnan+0x2e>
 8011ebe:	2929      	cmp	r1, #41	; 0x29
 8011ec0:	d156      	bne.n	8011f70 <__hexnan+0x130>
 8011ec2:	3202      	adds	r2, #2
 8011ec4:	f8ca 2000 	str.w	r2, [sl]
 8011ec8:	f1bb 0f00 	cmp.w	fp, #0
 8011ecc:	d050      	beq.n	8011f70 <__hexnan+0x130>
 8011ece:	454c      	cmp	r4, r9
 8011ed0:	d206      	bcs.n	8011ee0 <__hexnan+0xa0>
 8011ed2:	2d07      	cmp	r5, #7
 8011ed4:	dc04      	bgt.n	8011ee0 <__hexnan+0xa0>
 8011ed6:	462a      	mov	r2, r5
 8011ed8:	4649      	mov	r1, r9
 8011eda:	4620      	mov	r0, r4
 8011edc:	f7ff ff8a 	bl	8011df4 <L_shift>
 8011ee0:	4544      	cmp	r4, r8
 8011ee2:	d934      	bls.n	8011f4e <__hexnan+0x10e>
 8011ee4:	f1a8 0204 	sub.w	r2, r8, #4
 8011ee8:	4623      	mov	r3, r4
 8011eea:	f853 1b04 	ldr.w	r1, [r3], #4
 8011eee:	f842 1f04 	str.w	r1, [r2, #4]!
 8011ef2:	429f      	cmp	r7, r3
 8011ef4:	d2f9      	bcs.n	8011eea <__hexnan+0xaa>
 8011ef6:	1b3b      	subs	r3, r7, r4
 8011ef8:	f023 0303 	bic.w	r3, r3, #3
 8011efc:	3304      	adds	r3, #4
 8011efe:	3401      	adds	r4, #1
 8011f00:	3e03      	subs	r6, #3
 8011f02:	42b4      	cmp	r4, r6
 8011f04:	bf88      	it	hi
 8011f06:	2304      	movhi	r3, #4
 8011f08:	4443      	add	r3, r8
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	f843 2b04 	str.w	r2, [r3], #4
 8011f10:	429f      	cmp	r7, r3
 8011f12:	d2fb      	bcs.n	8011f0c <__hexnan+0xcc>
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	b91b      	cbnz	r3, 8011f20 <__hexnan+0xe0>
 8011f18:	4547      	cmp	r7, r8
 8011f1a:	d127      	bne.n	8011f6c <__hexnan+0x12c>
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	603b      	str	r3, [r7, #0]
 8011f20:	2005      	movs	r0, #5
 8011f22:	e026      	b.n	8011f72 <__hexnan+0x132>
 8011f24:	3501      	adds	r5, #1
 8011f26:	2d08      	cmp	r5, #8
 8011f28:	f10b 0b01 	add.w	fp, fp, #1
 8011f2c:	dd06      	ble.n	8011f3c <__hexnan+0xfc>
 8011f2e:	4544      	cmp	r4, r8
 8011f30:	d9c3      	bls.n	8011eba <__hexnan+0x7a>
 8011f32:	2300      	movs	r3, #0
 8011f34:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f38:	2501      	movs	r5, #1
 8011f3a:	3c04      	subs	r4, #4
 8011f3c:	6822      	ldr	r2, [r4, #0]
 8011f3e:	f000 000f 	and.w	r0, r0, #15
 8011f42:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011f46:	6022      	str	r2, [r4, #0]
 8011f48:	e7b7      	b.n	8011eba <__hexnan+0x7a>
 8011f4a:	2508      	movs	r5, #8
 8011f4c:	e7b5      	b.n	8011eba <__hexnan+0x7a>
 8011f4e:	9b01      	ldr	r3, [sp, #4]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d0df      	beq.n	8011f14 <__hexnan+0xd4>
 8011f54:	f04f 32ff 	mov.w	r2, #4294967295
 8011f58:	f1c3 0320 	rsb	r3, r3, #32
 8011f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8011f60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011f64:	401a      	ands	r2, r3
 8011f66:	f846 2c04 	str.w	r2, [r6, #-4]
 8011f6a:	e7d3      	b.n	8011f14 <__hexnan+0xd4>
 8011f6c:	3f04      	subs	r7, #4
 8011f6e:	e7d1      	b.n	8011f14 <__hexnan+0xd4>
 8011f70:	2004      	movs	r0, #4
 8011f72:	b007      	add	sp, #28
 8011f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f78 <_localeconv_r>:
 8011f78:	4800      	ldr	r0, [pc, #0]	; (8011f7c <_localeconv_r+0x4>)
 8011f7a:	4770      	bx	lr
 8011f7c:	20000268 	.word	0x20000268

08011f80 <__retarget_lock_init_recursive>:
 8011f80:	4770      	bx	lr

08011f82 <__retarget_lock_acquire_recursive>:
 8011f82:	4770      	bx	lr

08011f84 <__retarget_lock_release_recursive>:
 8011f84:	4770      	bx	lr
	...

08011f88 <_lseek_r>:
 8011f88:	b538      	push	{r3, r4, r5, lr}
 8011f8a:	4d07      	ldr	r5, [pc, #28]	; (8011fa8 <_lseek_r+0x20>)
 8011f8c:	4604      	mov	r4, r0
 8011f8e:	4608      	mov	r0, r1
 8011f90:	4611      	mov	r1, r2
 8011f92:	2200      	movs	r2, #0
 8011f94:	602a      	str	r2, [r5, #0]
 8011f96:	461a      	mov	r2, r3
 8011f98:	f7f2 f962 	bl	8004260 <_lseek>
 8011f9c:	1c43      	adds	r3, r0, #1
 8011f9e:	d102      	bne.n	8011fa6 <_lseek_r+0x1e>
 8011fa0:	682b      	ldr	r3, [r5, #0]
 8011fa2:	b103      	cbz	r3, 8011fa6 <_lseek_r+0x1e>
 8011fa4:	6023      	str	r3, [r4, #0]
 8011fa6:	bd38      	pop	{r3, r4, r5, pc}
 8011fa8:	2000314c 	.word	0x2000314c

08011fac <__swhatbuf_r>:
 8011fac:	b570      	push	{r4, r5, r6, lr}
 8011fae:	460e      	mov	r6, r1
 8011fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fb4:	2900      	cmp	r1, #0
 8011fb6:	b096      	sub	sp, #88	; 0x58
 8011fb8:	4614      	mov	r4, r2
 8011fba:	461d      	mov	r5, r3
 8011fbc:	da08      	bge.n	8011fd0 <__swhatbuf_r+0x24>
 8011fbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	602a      	str	r2, [r5, #0]
 8011fc6:	061a      	lsls	r2, r3, #24
 8011fc8:	d410      	bmi.n	8011fec <__swhatbuf_r+0x40>
 8011fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fce:	e00e      	b.n	8011fee <__swhatbuf_r+0x42>
 8011fd0:	466a      	mov	r2, sp
 8011fd2:	f001 fd61 	bl	8013a98 <_fstat_r>
 8011fd6:	2800      	cmp	r0, #0
 8011fd8:	dbf1      	blt.n	8011fbe <__swhatbuf_r+0x12>
 8011fda:	9a01      	ldr	r2, [sp, #4]
 8011fdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011fe0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011fe4:	425a      	negs	r2, r3
 8011fe6:	415a      	adcs	r2, r3
 8011fe8:	602a      	str	r2, [r5, #0]
 8011fea:	e7ee      	b.n	8011fca <__swhatbuf_r+0x1e>
 8011fec:	2340      	movs	r3, #64	; 0x40
 8011fee:	2000      	movs	r0, #0
 8011ff0:	6023      	str	r3, [r4, #0]
 8011ff2:	b016      	add	sp, #88	; 0x58
 8011ff4:	bd70      	pop	{r4, r5, r6, pc}
	...

08011ff8 <__smakebuf_r>:
 8011ff8:	898b      	ldrh	r3, [r1, #12]
 8011ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ffc:	079d      	lsls	r5, r3, #30
 8011ffe:	4606      	mov	r6, r0
 8012000:	460c      	mov	r4, r1
 8012002:	d507      	bpl.n	8012014 <__smakebuf_r+0x1c>
 8012004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012008:	6023      	str	r3, [r4, #0]
 801200a:	6123      	str	r3, [r4, #16]
 801200c:	2301      	movs	r3, #1
 801200e:	6163      	str	r3, [r4, #20]
 8012010:	b002      	add	sp, #8
 8012012:	bd70      	pop	{r4, r5, r6, pc}
 8012014:	ab01      	add	r3, sp, #4
 8012016:	466a      	mov	r2, sp
 8012018:	f7ff ffc8 	bl	8011fac <__swhatbuf_r>
 801201c:	9900      	ldr	r1, [sp, #0]
 801201e:	4605      	mov	r5, r0
 8012020:	4630      	mov	r0, r6
 8012022:	f000 fd87 	bl	8012b34 <_malloc_r>
 8012026:	b948      	cbnz	r0, 801203c <__smakebuf_r+0x44>
 8012028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801202c:	059a      	lsls	r2, r3, #22
 801202e:	d4ef      	bmi.n	8012010 <__smakebuf_r+0x18>
 8012030:	f023 0303 	bic.w	r3, r3, #3
 8012034:	f043 0302 	orr.w	r3, r3, #2
 8012038:	81a3      	strh	r3, [r4, #12]
 801203a:	e7e3      	b.n	8012004 <__smakebuf_r+0xc>
 801203c:	4b0d      	ldr	r3, [pc, #52]	; (8012074 <__smakebuf_r+0x7c>)
 801203e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012040:	89a3      	ldrh	r3, [r4, #12]
 8012042:	6020      	str	r0, [r4, #0]
 8012044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012048:	81a3      	strh	r3, [r4, #12]
 801204a:	9b00      	ldr	r3, [sp, #0]
 801204c:	6163      	str	r3, [r4, #20]
 801204e:	9b01      	ldr	r3, [sp, #4]
 8012050:	6120      	str	r0, [r4, #16]
 8012052:	b15b      	cbz	r3, 801206c <__smakebuf_r+0x74>
 8012054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012058:	4630      	mov	r0, r6
 801205a:	f001 fd2f 	bl	8013abc <_isatty_r>
 801205e:	b128      	cbz	r0, 801206c <__smakebuf_r+0x74>
 8012060:	89a3      	ldrh	r3, [r4, #12]
 8012062:	f023 0303 	bic.w	r3, r3, #3
 8012066:	f043 0301 	orr.w	r3, r3, #1
 801206a:	81a3      	strh	r3, [r4, #12]
 801206c:	89a0      	ldrh	r0, [r4, #12]
 801206e:	4305      	orrs	r5, r0
 8012070:	81a5      	strh	r5, [r4, #12]
 8012072:	e7cd      	b.n	8012010 <__smakebuf_r+0x18>
 8012074:	080116f9 	.word	0x080116f9

08012078 <malloc>:
 8012078:	4b02      	ldr	r3, [pc, #8]	; (8012084 <malloc+0xc>)
 801207a:	4601      	mov	r1, r0
 801207c:	6818      	ldr	r0, [r3, #0]
 801207e:	f000 bd59 	b.w	8012b34 <_malloc_r>
 8012082:	bf00      	nop
 8012084:	20000110 	.word	0x20000110

08012088 <__ascii_mbtowc>:
 8012088:	b082      	sub	sp, #8
 801208a:	b901      	cbnz	r1, 801208e <__ascii_mbtowc+0x6>
 801208c:	a901      	add	r1, sp, #4
 801208e:	b142      	cbz	r2, 80120a2 <__ascii_mbtowc+0x1a>
 8012090:	b14b      	cbz	r3, 80120a6 <__ascii_mbtowc+0x1e>
 8012092:	7813      	ldrb	r3, [r2, #0]
 8012094:	600b      	str	r3, [r1, #0]
 8012096:	7812      	ldrb	r2, [r2, #0]
 8012098:	1e10      	subs	r0, r2, #0
 801209a:	bf18      	it	ne
 801209c:	2001      	movne	r0, #1
 801209e:	b002      	add	sp, #8
 80120a0:	4770      	bx	lr
 80120a2:	4610      	mov	r0, r2
 80120a4:	e7fb      	b.n	801209e <__ascii_mbtowc+0x16>
 80120a6:	f06f 0001 	mvn.w	r0, #1
 80120aa:	e7f8      	b.n	801209e <__ascii_mbtowc+0x16>

080120ac <_Balloc>:
 80120ac:	b570      	push	{r4, r5, r6, lr}
 80120ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120b0:	4604      	mov	r4, r0
 80120b2:	460d      	mov	r5, r1
 80120b4:	b976      	cbnz	r6, 80120d4 <_Balloc+0x28>
 80120b6:	2010      	movs	r0, #16
 80120b8:	f7ff ffde 	bl	8012078 <malloc>
 80120bc:	4602      	mov	r2, r0
 80120be:	6260      	str	r0, [r4, #36]	; 0x24
 80120c0:	b920      	cbnz	r0, 80120cc <_Balloc+0x20>
 80120c2:	4b18      	ldr	r3, [pc, #96]	; (8012124 <_Balloc+0x78>)
 80120c4:	4818      	ldr	r0, [pc, #96]	; (8012128 <_Balloc+0x7c>)
 80120c6:	2166      	movs	r1, #102	; 0x66
 80120c8:	f001 fcb6 	bl	8013a38 <__assert_func>
 80120cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120d0:	6006      	str	r6, [r0, #0]
 80120d2:	60c6      	str	r6, [r0, #12]
 80120d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80120d6:	68f3      	ldr	r3, [r6, #12]
 80120d8:	b183      	cbz	r3, 80120fc <_Balloc+0x50>
 80120da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80120dc:	68db      	ldr	r3, [r3, #12]
 80120de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80120e2:	b9b8      	cbnz	r0, 8012114 <_Balloc+0x68>
 80120e4:	2101      	movs	r1, #1
 80120e6:	fa01 f605 	lsl.w	r6, r1, r5
 80120ea:	1d72      	adds	r2, r6, #5
 80120ec:	0092      	lsls	r2, r2, #2
 80120ee:	4620      	mov	r0, r4
 80120f0:	f000 fc9d 	bl	8012a2e <_calloc_r>
 80120f4:	b160      	cbz	r0, 8012110 <_Balloc+0x64>
 80120f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80120fa:	e00e      	b.n	801211a <_Balloc+0x6e>
 80120fc:	2221      	movs	r2, #33	; 0x21
 80120fe:	2104      	movs	r1, #4
 8012100:	4620      	mov	r0, r4
 8012102:	f000 fc94 	bl	8012a2e <_calloc_r>
 8012106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012108:	60f0      	str	r0, [r6, #12]
 801210a:	68db      	ldr	r3, [r3, #12]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d1e4      	bne.n	80120da <_Balloc+0x2e>
 8012110:	2000      	movs	r0, #0
 8012112:	bd70      	pop	{r4, r5, r6, pc}
 8012114:	6802      	ldr	r2, [r0, #0]
 8012116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801211a:	2300      	movs	r3, #0
 801211c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012120:	e7f7      	b.n	8012112 <_Balloc+0x66>
 8012122:	bf00      	nop
 8012124:	08014abd 	.word	0x08014abd
 8012128:	08014c1c 	.word	0x08014c1c

0801212c <_Bfree>:
 801212c:	b570      	push	{r4, r5, r6, lr}
 801212e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012130:	4605      	mov	r5, r0
 8012132:	460c      	mov	r4, r1
 8012134:	b976      	cbnz	r6, 8012154 <_Bfree+0x28>
 8012136:	2010      	movs	r0, #16
 8012138:	f7ff ff9e 	bl	8012078 <malloc>
 801213c:	4602      	mov	r2, r0
 801213e:	6268      	str	r0, [r5, #36]	; 0x24
 8012140:	b920      	cbnz	r0, 801214c <_Bfree+0x20>
 8012142:	4b09      	ldr	r3, [pc, #36]	; (8012168 <_Bfree+0x3c>)
 8012144:	4809      	ldr	r0, [pc, #36]	; (801216c <_Bfree+0x40>)
 8012146:	218a      	movs	r1, #138	; 0x8a
 8012148:	f001 fc76 	bl	8013a38 <__assert_func>
 801214c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012150:	6006      	str	r6, [r0, #0]
 8012152:	60c6      	str	r6, [r0, #12]
 8012154:	b13c      	cbz	r4, 8012166 <_Bfree+0x3a>
 8012156:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012158:	6862      	ldr	r2, [r4, #4]
 801215a:	68db      	ldr	r3, [r3, #12]
 801215c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012160:	6021      	str	r1, [r4, #0]
 8012162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012166:	bd70      	pop	{r4, r5, r6, pc}
 8012168:	08014abd 	.word	0x08014abd
 801216c:	08014c1c 	.word	0x08014c1c

08012170 <__multadd>:
 8012170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012174:	690d      	ldr	r5, [r1, #16]
 8012176:	4607      	mov	r7, r0
 8012178:	460c      	mov	r4, r1
 801217a:	461e      	mov	r6, r3
 801217c:	f101 0c14 	add.w	ip, r1, #20
 8012180:	2000      	movs	r0, #0
 8012182:	f8dc 3000 	ldr.w	r3, [ip]
 8012186:	b299      	uxth	r1, r3
 8012188:	fb02 6101 	mla	r1, r2, r1, r6
 801218c:	0c1e      	lsrs	r6, r3, #16
 801218e:	0c0b      	lsrs	r3, r1, #16
 8012190:	fb02 3306 	mla	r3, r2, r6, r3
 8012194:	b289      	uxth	r1, r1
 8012196:	3001      	adds	r0, #1
 8012198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801219c:	4285      	cmp	r5, r0
 801219e:	f84c 1b04 	str.w	r1, [ip], #4
 80121a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80121a6:	dcec      	bgt.n	8012182 <__multadd+0x12>
 80121a8:	b30e      	cbz	r6, 80121ee <__multadd+0x7e>
 80121aa:	68a3      	ldr	r3, [r4, #8]
 80121ac:	42ab      	cmp	r3, r5
 80121ae:	dc19      	bgt.n	80121e4 <__multadd+0x74>
 80121b0:	6861      	ldr	r1, [r4, #4]
 80121b2:	4638      	mov	r0, r7
 80121b4:	3101      	adds	r1, #1
 80121b6:	f7ff ff79 	bl	80120ac <_Balloc>
 80121ba:	4680      	mov	r8, r0
 80121bc:	b928      	cbnz	r0, 80121ca <__multadd+0x5a>
 80121be:	4602      	mov	r2, r0
 80121c0:	4b0c      	ldr	r3, [pc, #48]	; (80121f4 <__multadd+0x84>)
 80121c2:	480d      	ldr	r0, [pc, #52]	; (80121f8 <__multadd+0x88>)
 80121c4:	21b5      	movs	r1, #181	; 0xb5
 80121c6:	f001 fc37 	bl	8013a38 <__assert_func>
 80121ca:	6922      	ldr	r2, [r4, #16]
 80121cc:	3202      	adds	r2, #2
 80121ce:	f104 010c 	add.w	r1, r4, #12
 80121d2:	0092      	lsls	r2, r2, #2
 80121d4:	300c      	adds	r0, #12
 80121d6:	f7fc fb85 	bl	800e8e4 <memcpy>
 80121da:	4621      	mov	r1, r4
 80121dc:	4638      	mov	r0, r7
 80121de:	f7ff ffa5 	bl	801212c <_Bfree>
 80121e2:	4644      	mov	r4, r8
 80121e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80121e8:	3501      	adds	r5, #1
 80121ea:	615e      	str	r6, [r3, #20]
 80121ec:	6125      	str	r5, [r4, #16]
 80121ee:	4620      	mov	r0, r4
 80121f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121f4:	08014b2f 	.word	0x08014b2f
 80121f8:	08014c1c 	.word	0x08014c1c

080121fc <__s2b>:
 80121fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012200:	460c      	mov	r4, r1
 8012202:	4615      	mov	r5, r2
 8012204:	461f      	mov	r7, r3
 8012206:	2209      	movs	r2, #9
 8012208:	3308      	adds	r3, #8
 801220a:	4606      	mov	r6, r0
 801220c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012210:	2100      	movs	r1, #0
 8012212:	2201      	movs	r2, #1
 8012214:	429a      	cmp	r2, r3
 8012216:	db09      	blt.n	801222c <__s2b+0x30>
 8012218:	4630      	mov	r0, r6
 801221a:	f7ff ff47 	bl	80120ac <_Balloc>
 801221e:	b940      	cbnz	r0, 8012232 <__s2b+0x36>
 8012220:	4602      	mov	r2, r0
 8012222:	4b19      	ldr	r3, [pc, #100]	; (8012288 <__s2b+0x8c>)
 8012224:	4819      	ldr	r0, [pc, #100]	; (801228c <__s2b+0x90>)
 8012226:	21ce      	movs	r1, #206	; 0xce
 8012228:	f001 fc06 	bl	8013a38 <__assert_func>
 801222c:	0052      	lsls	r2, r2, #1
 801222e:	3101      	adds	r1, #1
 8012230:	e7f0      	b.n	8012214 <__s2b+0x18>
 8012232:	9b08      	ldr	r3, [sp, #32]
 8012234:	6143      	str	r3, [r0, #20]
 8012236:	2d09      	cmp	r5, #9
 8012238:	f04f 0301 	mov.w	r3, #1
 801223c:	6103      	str	r3, [r0, #16]
 801223e:	dd16      	ble.n	801226e <__s2b+0x72>
 8012240:	f104 0909 	add.w	r9, r4, #9
 8012244:	46c8      	mov	r8, r9
 8012246:	442c      	add	r4, r5
 8012248:	f818 3b01 	ldrb.w	r3, [r8], #1
 801224c:	4601      	mov	r1, r0
 801224e:	3b30      	subs	r3, #48	; 0x30
 8012250:	220a      	movs	r2, #10
 8012252:	4630      	mov	r0, r6
 8012254:	f7ff ff8c 	bl	8012170 <__multadd>
 8012258:	45a0      	cmp	r8, r4
 801225a:	d1f5      	bne.n	8012248 <__s2b+0x4c>
 801225c:	f1a5 0408 	sub.w	r4, r5, #8
 8012260:	444c      	add	r4, r9
 8012262:	1b2d      	subs	r5, r5, r4
 8012264:	1963      	adds	r3, r4, r5
 8012266:	42bb      	cmp	r3, r7
 8012268:	db04      	blt.n	8012274 <__s2b+0x78>
 801226a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801226e:	340a      	adds	r4, #10
 8012270:	2509      	movs	r5, #9
 8012272:	e7f6      	b.n	8012262 <__s2b+0x66>
 8012274:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012278:	4601      	mov	r1, r0
 801227a:	3b30      	subs	r3, #48	; 0x30
 801227c:	220a      	movs	r2, #10
 801227e:	4630      	mov	r0, r6
 8012280:	f7ff ff76 	bl	8012170 <__multadd>
 8012284:	e7ee      	b.n	8012264 <__s2b+0x68>
 8012286:	bf00      	nop
 8012288:	08014b2f 	.word	0x08014b2f
 801228c:	08014c1c 	.word	0x08014c1c

08012290 <__hi0bits>:
 8012290:	0c03      	lsrs	r3, r0, #16
 8012292:	041b      	lsls	r3, r3, #16
 8012294:	b9d3      	cbnz	r3, 80122cc <__hi0bits+0x3c>
 8012296:	0400      	lsls	r0, r0, #16
 8012298:	2310      	movs	r3, #16
 801229a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801229e:	bf04      	itt	eq
 80122a0:	0200      	lsleq	r0, r0, #8
 80122a2:	3308      	addeq	r3, #8
 80122a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80122a8:	bf04      	itt	eq
 80122aa:	0100      	lsleq	r0, r0, #4
 80122ac:	3304      	addeq	r3, #4
 80122ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80122b2:	bf04      	itt	eq
 80122b4:	0080      	lsleq	r0, r0, #2
 80122b6:	3302      	addeq	r3, #2
 80122b8:	2800      	cmp	r0, #0
 80122ba:	db05      	blt.n	80122c8 <__hi0bits+0x38>
 80122bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80122c0:	f103 0301 	add.w	r3, r3, #1
 80122c4:	bf08      	it	eq
 80122c6:	2320      	moveq	r3, #32
 80122c8:	4618      	mov	r0, r3
 80122ca:	4770      	bx	lr
 80122cc:	2300      	movs	r3, #0
 80122ce:	e7e4      	b.n	801229a <__hi0bits+0xa>

080122d0 <__lo0bits>:
 80122d0:	6803      	ldr	r3, [r0, #0]
 80122d2:	f013 0207 	ands.w	r2, r3, #7
 80122d6:	4601      	mov	r1, r0
 80122d8:	d00b      	beq.n	80122f2 <__lo0bits+0x22>
 80122da:	07da      	lsls	r2, r3, #31
 80122dc:	d423      	bmi.n	8012326 <__lo0bits+0x56>
 80122de:	0798      	lsls	r0, r3, #30
 80122e0:	bf49      	itett	mi
 80122e2:	085b      	lsrmi	r3, r3, #1
 80122e4:	089b      	lsrpl	r3, r3, #2
 80122e6:	2001      	movmi	r0, #1
 80122e8:	600b      	strmi	r3, [r1, #0]
 80122ea:	bf5c      	itt	pl
 80122ec:	600b      	strpl	r3, [r1, #0]
 80122ee:	2002      	movpl	r0, #2
 80122f0:	4770      	bx	lr
 80122f2:	b298      	uxth	r0, r3
 80122f4:	b9a8      	cbnz	r0, 8012322 <__lo0bits+0x52>
 80122f6:	0c1b      	lsrs	r3, r3, #16
 80122f8:	2010      	movs	r0, #16
 80122fa:	b2da      	uxtb	r2, r3
 80122fc:	b90a      	cbnz	r2, 8012302 <__lo0bits+0x32>
 80122fe:	3008      	adds	r0, #8
 8012300:	0a1b      	lsrs	r3, r3, #8
 8012302:	071a      	lsls	r2, r3, #28
 8012304:	bf04      	itt	eq
 8012306:	091b      	lsreq	r3, r3, #4
 8012308:	3004      	addeq	r0, #4
 801230a:	079a      	lsls	r2, r3, #30
 801230c:	bf04      	itt	eq
 801230e:	089b      	lsreq	r3, r3, #2
 8012310:	3002      	addeq	r0, #2
 8012312:	07da      	lsls	r2, r3, #31
 8012314:	d403      	bmi.n	801231e <__lo0bits+0x4e>
 8012316:	085b      	lsrs	r3, r3, #1
 8012318:	f100 0001 	add.w	r0, r0, #1
 801231c:	d005      	beq.n	801232a <__lo0bits+0x5a>
 801231e:	600b      	str	r3, [r1, #0]
 8012320:	4770      	bx	lr
 8012322:	4610      	mov	r0, r2
 8012324:	e7e9      	b.n	80122fa <__lo0bits+0x2a>
 8012326:	2000      	movs	r0, #0
 8012328:	4770      	bx	lr
 801232a:	2020      	movs	r0, #32
 801232c:	4770      	bx	lr
	...

08012330 <__i2b>:
 8012330:	b510      	push	{r4, lr}
 8012332:	460c      	mov	r4, r1
 8012334:	2101      	movs	r1, #1
 8012336:	f7ff feb9 	bl	80120ac <_Balloc>
 801233a:	4602      	mov	r2, r0
 801233c:	b928      	cbnz	r0, 801234a <__i2b+0x1a>
 801233e:	4b05      	ldr	r3, [pc, #20]	; (8012354 <__i2b+0x24>)
 8012340:	4805      	ldr	r0, [pc, #20]	; (8012358 <__i2b+0x28>)
 8012342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012346:	f001 fb77 	bl	8013a38 <__assert_func>
 801234a:	2301      	movs	r3, #1
 801234c:	6144      	str	r4, [r0, #20]
 801234e:	6103      	str	r3, [r0, #16]
 8012350:	bd10      	pop	{r4, pc}
 8012352:	bf00      	nop
 8012354:	08014b2f 	.word	0x08014b2f
 8012358:	08014c1c 	.word	0x08014c1c

0801235c <__multiply>:
 801235c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012360:	4691      	mov	r9, r2
 8012362:	690a      	ldr	r2, [r1, #16]
 8012364:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012368:	429a      	cmp	r2, r3
 801236a:	bfb8      	it	lt
 801236c:	460b      	movlt	r3, r1
 801236e:	460c      	mov	r4, r1
 8012370:	bfbc      	itt	lt
 8012372:	464c      	movlt	r4, r9
 8012374:	4699      	movlt	r9, r3
 8012376:	6927      	ldr	r7, [r4, #16]
 8012378:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801237c:	68a3      	ldr	r3, [r4, #8]
 801237e:	6861      	ldr	r1, [r4, #4]
 8012380:	eb07 060a 	add.w	r6, r7, sl
 8012384:	42b3      	cmp	r3, r6
 8012386:	b085      	sub	sp, #20
 8012388:	bfb8      	it	lt
 801238a:	3101      	addlt	r1, #1
 801238c:	f7ff fe8e 	bl	80120ac <_Balloc>
 8012390:	b930      	cbnz	r0, 80123a0 <__multiply+0x44>
 8012392:	4602      	mov	r2, r0
 8012394:	4b44      	ldr	r3, [pc, #272]	; (80124a8 <__multiply+0x14c>)
 8012396:	4845      	ldr	r0, [pc, #276]	; (80124ac <__multiply+0x150>)
 8012398:	f240 115d 	movw	r1, #349	; 0x15d
 801239c:	f001 fb4c 	bl	8013a38 <__assert_func>
 80123a0:	f100 0514 	add.w	r5, r0, #20
 80123a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80123a8:	462b      	mov	r3, r5
 80123aa:	2200      	movs	r2, #0
 80123ac:	4543      	cmp	r3, r8
 80123ae:	d321      	bcc.n	80123f4 <__multiply+0x98>
 80123b0:	f104 0314 	add.w	r3, r4, #20
 80123b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80123b8:	f109 0314 	add.w	r3, r9, #20
 80123bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80123c0:	9202      	str	r2, [sp, #8]
 80123c2:	1b3a      	subs	r2, r7, r4
 80123c4:	3a15      	subs	r2, #21
 80123c6:	f022 0203 	bic.w	r2, r2, #3
 80123ca:	3204      	adds	r2, #4
 80123cc:	f104 0115 	add.w	r1, r4, #21
 80123d0:	428f      	cmp	r7, r1
 80123d2:	bf38      	it	cc
 80123d4:	2204      	movcc	r2, #4
 80123d6:	9201      	str	r2, [sp, #4]
 80123d8:	9a02      	ldr	r2, [sp, #8]
 80123da:	9303      	str	r3, [sp, #12]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d80c      	bhi.n	80123fa <__multiply+0x9e>
 80123e0:	2e00      	cmp	r6, #0
 80123e2:	dd03      	ble.n	80123ec <__multiply+0x90>
 80123e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d05a      	beq.n	80124a2 <__multiply+0x146>
 80123ec:	6106      	str	r6, [r0, #16]
 80123ee:	b005      	add	sp, #20
 80123f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f4:	f843 2b04 	str.w	r2, [r3], #4
 80123f8:	e7d8      	b.n	80123ac <__multiply+0x50>
 80123fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80123fe:	f1ba 0f00 	cmp.w	sl, #0
 8012402:	d024      	beq.n	801244e <__multiply+0xf2>
 8012404:	f104 0e14 	add.w	lr, r4, #20
 8012408:	46a9      	mov	r9, r5
 801240a:	f04f 0c00 	mov.w	ip, #0
 801240e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012412:	f8d9 1000 	ldr.w	r1, [r9]
 8012416:	fa1f fb82 	uxth.w	fp, r2
 801241a:	b289      	uxth	r1, r1
 801241c:	fb0a 110b 	mla	r1, sl, fp, r1
 8012420:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012424:	f8d9 2000 	ldr.w	r2, [r9]
 8012428:	4461      	add	r1, ip
 801242a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801242e:	fb0a c20b 	mla	r2, sl, fp, ip
 8012432:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012436:	b289      	uxth	r1, r1
 8012438:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801243c:	4577      	cmp	r7, lr
 801243e:	f849 1b04 	str.w	r1, [r9], #4
 8012442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012446:	d8e2      	bhi.n	801240e <__multiply+0xb2>
 8012448:	9a01      	ldr	r2, [sp, #4]
 801244a:	f845 c002 	str.w	ip, [r5, r2]
 801244e:	9a03      	ldr	r2, [sp, #12]
 8012450:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012454:	3304      	adds	r3, #4
 8012456:	f1b9 0f00 	cmp.w	r9, #0
 801245a:	d020      	beq.n	801249e <__multiply+0x142>
 801245c:	6829      	ldr	r1, [r5, #0]
 801245e:	f104 0c14 	add.w	ip, r4, #20
 8012462:	46ae      	mov	lr, r5
 8012464:	f04f 0a00 	mov.w	sl, #0
 8012468:	f8bc b000 	ldrh.w	fp, [ip]
 801246c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012470:	fb09 220b 	mla	r2, r9, fp, r2
 8012474:	4492      	add	sl, r2
 8012476:	b289      	uxth	r1, r1
 8012478:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801247c:	f84e 1b04 	str.w	r1, [lr], #4
 8012480:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012484:	f8be 1000 	ldrh.w	r1, [lr]
 8012488:	0c12      	lsrs	r2, r2, #16
 801248a:	fb09 1102 	mla	r1, r9, r2, r1
 801248e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012492:	4567      	cmp	r7, ip
 8012494:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012498:	d8e6      	bhi.n	8012468 <__multiply+0x10c>
 801249a:	9a01      	ldr	r2, [sp, #4]
 801249c:	50a9      	str	r1, [r5, r2]
 801249e:	3504      	adds	r5, #4
 80124a0:	e79a      	b.n	80123d8 <__multiply+0x7c>
 80124a2:	3e01      	subs	r6, #1
 80124a4:	e79c      	b.n	80123e0 <__multiply+0x84>
 80124a6:	bf00      	nop
 80124a8:	08014b2f 	.word	0x08014b2f
 80124ac:	08014c1c 	.word	0x08014c1c

080124b0 <__pow5mult>:
 80124b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124b4:	4615      	mov	r5, r2
 80124b6:	f012 0203 	ands.w	r2, r2, #3
 80124ba:	4606      	mov	r6, r0
 80124bc:	460f      	mov	r7, r1
 80124be:	d007      	beq.n	80124d0 <__pow5mult+0x20>
 80124c0:	4c25      	ldr	r4, [pc, #148]	; (8012558 <__pow5mult+0xa8>)
 80124c2:	3a01      	subs	r2, #1
 80124c4:	2300      	movs	r3, #0
 80124c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124ca:	f7ff fe51 	bl	8012170 <__multadd>
 80124ce:	4607      	mov	r7, r0
 80124d0:	10ad      	asrs	r5, r5, #2
 80124d2:	d03d      	beq.n	8012550 <__pow5mult+0xa0>
 80124d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80124d6:	b97c      	cbnz	r4, 80124f8 <__pow5mult+0x48>
 80124d8:	2010      	movs	r0, #16
 80124da:	f7ff fdcd 	bl	8012078 <malloc>
 80124de:	4602      	mov	r2, r0
 80124e0:	6270      	str	r0, [r6, #36]	; 0x24
 80124e2:	b928      	cbnz	r0, 80124f0 <__pow5mult+0x40>
 80124e4:	4b1d      	ldr	r3, [pc, #116]	; (801255c <__pow5mult+0xac>)
 80124e6:	481e      	ldr	r0, [pc, #120]	; (8012560 <__pow5mult+0xb0>)
 80124e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80124ec:	f001 faa4 	bl	8013a38 <__assert_func>
 80124f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124f4:	6004      	str	r4, [r0, #0]
 80124f6:	60c4      	str	r4, [r0, #12]
 80124f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80124fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012500:	b94c      	cbnz	r4, 8012516 <__pow5mult+0x66>
 8012502:	f240 2171 	movw	r1, #625	; 0x271
 8012506:	4630      	mov	r0, r6
 8012508:	f7ff ff12 	bl	8012330 <__i2b>
 801250c:	2300      	movs	r3, #0
 801250e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012512:	4604      	mov	r4, r0
 8012514:	6003      	str	r3, [r0, #0]
 8012516:	f04f 0900 	mov.w	r9, #0
 801251a:	07eb      	lsls	r3, r5, #31
 801251c:	d50a      	bpl.n	8012534 <__pow5mult+0x84>
 801251e:	4639      	mov	r1, r7
 8012520:	4622      	mov	r2, r4
 8012522:	4630      	mov	r0, r6
 8012524:	f7ff ff1a 	bl	801235c <__multiply>
 8012528:	4639      	mov	r1, r7
 801252a:	4680      	mov	r8, r0
 801252c:	4630      	mov	r0, r6
 801252e:	f7ff fdfd 	bl	801212c <_Bfree>
 8012532:	4647      	mov	r7, r8
 8012534:	106d      	asrs	r5, r5, #1
 8012536:	d00b      	beq.n	8012550 <__pow5mult+0xa0>
 8012538:	6820      	ldr	r0, [r4, #0]
 801253a:	b938      	cbnz	r0, 801254c <__pow5mult+0x9c>
 801253c:	4622      	mov	r2, r4
 801253e:	4621      	mov	r1, r4
 8012540:	4630      	mov	r0, r6
 8012542:	f7ff ff0b 	bl	801235c <__multiply>
 8012546:	6020      	str	r0, [r4, #0]
 8012548:	f8c0 9000 	str.w	r9, [r0]
 801254c:	4604      	mov	r4, r0
 801254e:	e7e4      	b.n	801251a <__pow5mult+0x6a>
 8012550:	4638      	mov	r0, r7
 8012552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012556:	bf00      	nop
 8012558:	08014d68 	.word	0x08014d68
 801255c:	08014abd 	.word	0x08014abd
 8012560:	08014c1c 	.word	0x08014c1c

08012564 <__lshift>:
 8012564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012568:	460c      	mov	r4, r1
 801256a:	6849      	ldr	r1, [r1, #4]
 801256c:	6923      	ldr	r3, [r4, #16]
 801256e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012572:	68a3      	ldr	r3, [r4, #8]
 8012574:	4607      	mov	r7, r0
 8012576:	4691      	mov	r9, r2
 8012578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801257c:	f108 0601 	add.w	r6, r8, #1
 8012580:	42b3      	cmp	r3, r6
 8012582:	db0b      	blt.n	801259c <__lshift+0x38>
 8012584:	4638      	mov	r0, r7
 8012586:	f7ff fd91 	bl	80120ac <_Balloc>
 801258a:	4605      	mov	r5, r0
 801258c:	b948      	cbnz	r0, 80125a2 <__lshift+0x3e>
 801258e:	4602      	mov	r2, r0
 8012590:	4b2a      	ldr	r3, [pc, #168]	; (801263c <__lshift+0xd8>)
 8012592:	482b      	ldr	r0, [pc, #172]	; (8012640 <__lshift+0xdc>)
 8012594:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012598:	f001 fa4e 	bl	8013a38 <__assert_func>
 801259c:	3101      	adds	r1, #1
 801259e:	005b      	lsls	r3, r3, #1
 80125a0:	e7ee      	b.n	8012580 <__lshift+0x1c>
 80125a2:	2300      	movs	r3, #0
 80125a4:	f100 0114 	add.w	r1, r0, #20
 80125a8:	f100 0210 	add.w	r2, r0, #16
 80125ac:	4618      	mov	r0, r3
 80125ae:	4553      	cmp	r3, sl
 80125b0:	db37      	blt.n	8012622 <__lshift+0xbe>
 80125b2:	6920      	ldr	r0, [r4, #16]
 80125b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125b8:	f104 0314 	add.w	r3, r4, #20
 80125bc:	f019 091f 	ands.w	r9, r9, #31
 80125c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80125c8:	d02f      	beq.n	801262a <__lshift+0xc6>
 80125ca:	f1c9 0e20 	rsb	lr, r9, #32
 80125ce:	468a      	mov	sl, r1
 80125d0:	f04f 0c00 	mov.w	ip, #0
 80125d4:	681a      	ldr	r2, [r3, #0]
 80125d6:	fa02 f209 	lsl.w	r2, r2, r9
 80125da:	ea42 020c 	orr.w	r2, r2, ip
 80125de:	f84a 2b04 	str.w	r2, [sl], #4
 80125e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80125e6:	4298      	cmp	r0, r3
 80125e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80125ec:	d8f2      	bhi.n	80125d4 <__lshift+0x70>
 80125ee:	1b03      	subs	r3, r0, r4
 80125f0:	3b15      	subs	r3, #21
 80125f2:	f023 0303 	bic.w	r3, r3, #3
 80125f6:	3304      	adds	r3, #4
 80125f8:	f104 0215 	add.w	r2, r4, #21
 80125fc:	4290      	cmp	r0, r2
 80125fe:	bf38      	it	cc
 8012600:	2304      	movcc	r3, #4
 8012602:	f841 c003 	str.w	ip, [r1, r3]
 8012606:	f1bc 0f00 	cmp.w	ip, #0
 801260a:	d001      	beq.n	8012610 <__lshift+0xac>
 801260c:	f108 0602 	add.w	r6, r8, #2
 8012610:	3e01      	subs	r6, #1
 8012612:	4638      	mov	r0, r7
 8012614:	612e      	str	r6, [r5, #16]
 8012616:	4621      	mov	r1, r4
 8012618:	f7ff fd88 	bl	801212c <_Bfree>
 801261c:	4628      	mov	r0, r5
 801261e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012622:	f842 0f04 	str.w	r0, [r2, #4]!
 8012626:	3301      	adds	r3, #1
 8012628:	e7c1      	b.n	80125ae <__lshift+0x4a>
 801262a:	3904      	subs	r1, #4
 801262c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012630:	f841 2f04 	str.w	r2, [r1, #4]!
 8012634:	4298      	cmp	r0, r3
 8012636:	d8f9      	bhi.n	801262c <__lshift+0xc8>
 8012638:	e7ea      	b.n	8012610 <__lshift+0xac>
 801263a:	bf00      	nop
 801263c:	08014b2f 	.word	0x08014b2f
 8012640:	08014c1c 	.word	0x08014c1c

08012644 <__mcmp>:
 8012644:	b530      	push	{r4, r5, lr}
 8012646:	6902      	ldr	r2, [r0, #16]
 8012648:	690c      	ldr	r4, [r1, #16]
 801264a:	1b12      	subs	r2, r2, r4
 801264c:	d10e      	bne.n	801266c <__mcmp+0x28>
 801264e:	f100 0314 	add.w	r3, r0, #20
 8012652:	3114      	adds	r1, #20
 8012654:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012658:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801265c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012660:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012664:	42a5      	cmp	r5, r4
 8012666:	d003      	beq.n	8012670 <__mcmp+0x2c>
 8012668:	d305      	bcc.n	8012676 <__mcmp+0x32>
 801266a:	2201      	movs	r2, #1
 801266c:	4610      	mov	r0, r2
 801266e:	bd30      	pop	{r4, r5, pc}
 8012670:	4283      	cmp	r3, r0
 8012672:	d3f3      	bcc.n	801265c <__mcmp+0x18>
 8012674:	e7fa      	b.n	801266c <__mcmp+0x28>
 8012676:	f04f 32ff 	mov.w	r2, #4294967295
 801267a:	e7f7      	b.n	801266c <__mcmp+0x28>

0801267c <__mdiff>:
 801267c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012680:	460c      	mov	r4, r1
 8012682:	4606      	mov	r6, r0
 8012684:	4611      	mov	r1, r2
 8012686:	4620      	mov	r0, r4
 8012688:	4690      	mov	r8, r2
 801268a:	f7ff ffdb 	bl	8012644 <__mcmp>
 801268e:	1e05      	subs	r5, r0, #0
 8012690:	d110      	bne.n	80126b4 <__mdiff+0x38>
 8012692:	4629      	mov	r1, r5
 8012694:	4630      	mov	r0, r6
 8012696:	f7ff fd09 	bl	80120ac <_Balloc>
 801269a:	b930      	cbnz	r0, 80126aa <__mdiff+0x2e>
 801269c:	4b3a      	ldr	r3, [pc, #232]	; (8012788 <__mdiff+0x10c>)
 801269e:	4602      	mov	r2, r0
 80126a0:	f240 2132 	movw	r1, #562	; 0x232
 80126a4:	4839      	ldr	r0, [pc, #228]	; (801278c <__mdiff+0x110>)
 80126a6:	f001 f9c7 	bl	8013a38 <__assert_func>
 80126aa:	2301      	movs	r3, #1
 80126ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80126b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126b4:	bfa4      	itt	ge
 80126b6:	4643      	movge	r3, r8
 80126b8:	46a0      	movge	r8, r4
 80126ba:	4630      	mov	r0, r6
 80126bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80126c0:	bfa6      	itte	ge
 80126c2:	461c      	movge	r4, r3
 80126c4:	2500      	movge	r5, #0
 80126c6:	2501      	movlt	r5, #1
 80126c8:	f7ff fcf0 	bl	80120ac <_Balloc>
 80126cc:	b920      	cbnz	r0, 80126d8 <__mdiff+0x5c>
 80126ce:	4b2e      	ldr	r3, [pc, #184]	; (8012788 <__mdiff+0x10c>)
 80126d0:	4602      	mov	r2, r0
 80126d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80126d6:	e7e5      	b.n	80126a4 <__mdiff+0x28>
 80126d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80126dc:	6926      	ldr	r6, [r4, #16]
 80126de:	60c5      	str	r5, [r0, #12]
 80126e0:	f104 0914 	add.w	r9, r4, #20
 80126e4:	f108 0514 	add.w	r5, r8, #20
 80126e8:	f100 0e14 	add.w	lr, r0, #20
 80126ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80126f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80126f4:	f108 0210 	add.w	r2, r8, #16
 80126f8:	46f2      	mov	sl, lr
 80126fa:	2100      	movs	r1, #0
 80126fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8012700:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012704:	fa1f f883 	uxth.w	r8, r3
 8012708:	fa11 f18b 	uxtah	r1, r1, fp
 801270c:	0c1b      	lsrs	r3, r3, #16
 801270e:	eba1 0808 	sub.w	r8, r1, r8
 8012712:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012716:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801271a:	fa1f f888 	uxth.w	r8, r8
 801271e:	1419      	asrs	r1, r3, #16
 8012720:	454e      	cmp	r6, r9
 8012722:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012726:	f84a 3b04 	str.w	r3, [sl], #4
 801272a:	d8e7      	bhi.n	80126fc <__mdiff+0x80>
 801272c:	1b33      	subs	r3, r6, r4
 801272e:	3b15      	subs	r3, #21
 8012730:	f023 0303 	bic.w	r3, r3, #3
 8012734:	3304      	adds	r3, #4
 8012736:	3415      	adds	r4, #21
 8012738:	42a6      	cmp	r6, r4
 801273a:	bf38      	it	cc
 801273c:	2304      	movcc	r3, #4
 801273e:	441d      	add	r5, r3
 8012740:	4473      	add	r3, lr
 8012742:	469e      	mov	lr, r3
 8012744:	462e      	mov	r6, r5
 8012746:	4566      	cmp	r6, ip
 8012748:	d30e      	bcc.n	8012768 <__mdiff+0xec>
 801274a:	f10c 0203 	add.w	r2, ip, #3
 801274e:	1b52      	subs	r2, r2, r5
 8012750:	f022 0203 	bic.w	r2, r2, #3
 8012754:	3d03      	subs	r5, #3
 8012756:	45ac      	cmp	ip, r5
 8012758:	bf38      	it	cc
 801275a:	2200      	movcc	r2, #0
 801275c:	441a      	add	r2, r3
 801275e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012762:	b17b      	cbz	r3, 8012784 <__mdiff+0x108>
 8012764:	6107      	str	r7, [r0, #16]
 8012766:	e7a3      	b.n	80126b0 <__mdiff+0x34>
 8012768:	f856 8b04 	ldr.w	r8, [r6], #4
 801276c:	fa11 f288 	uxtah	r2, r1, r8
 8012770:	1414      	asrs	r4, r2, #16
 8012772:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012776:	b292      	uxth	r2, r2
 8012778:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801277c:	f84e 2b04 	str.w	r2, [lr], #4
 8012780:	1421      	asrs	r1, r4, #16
 8012782:	e7e0      	b.n	8012746 <__mdiff+0xca>
 8012784:	3f01      	subs	r7, #1
 8012786:	e7ea      	b.n	801275e <__mdiff+0xe2>
 8012788:	08014b2f 	.word	0x08014b2f
 801278c:	08014c1c 	.word	0x08014c1c

08012790 <__ulp>:
 8012790:	b082      	sub	sp, #8
 8012792:	ed8d 0b00 	vstr	d0, [sp]
 8012796:	9b01      	ldr	r3, [sp, #4]
 8012798:	4912      	ldr	r1, [pc, #72]	; (80127e4 <__ulp+0x54>)
 801279a:	4019      	ands	r1, r3
 801279c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80127a0:	2900      	cmp	r1, #0
 80127a2:	dd05      	ble.n	80127b0 <__ulp+0x20>
 80127a4:	2200      	movs	r2, #0
 80127a6:	460b      	mov	r3, r1
 80127a8:	ec43 2b10 	vmov	d0, r2, r3
 80127ac:	b002      	add	sp, #8
 80127ae:	4770      	bx	lr
 80127b0:	4249      	negs	r1, r1
 80127b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80127b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80127ba:	f04f 0200 	mov.w	r2, #0
 80127be:	f04f 0300 	mov.w	r3, #0
 80127c2:	da04      	bge.n	80127ce <__ulp+0x3e>
 80127c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80127c8:	fa41 f300 	asr.w	r3, r1, r0
 80127cc:	e7ec      	b.n	80127a8 <__ulp+0x18>
 80127ce:	f1a0 0114 	sub.w	r1, r0, #20
 80127d2:	291e      	cmp	r1, #30
 80127d4:	bfda      	itte	le
 80127d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80127da:	fa20 f101 	lsrle.w	r1, r0, r1
 80127de:	2101      	movgt	r1, #1
 80127e0:	460a      	mov	r2, r1
 80127e2:	e7e1      	b.n	80127a8 <__ulp+0x18>
 80127e4:	7ff00000 	.word	0x7ff00000

080127e8 <__b2d>:
 80127e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ea:	6905      	ldr	r5, [r0, #16]
 80127ec:	f100 0714 	add.w	r7, r0, #20
 80127f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80127f4:	1f2e      	subs	r6, r5, #4
 80127f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80127fa:	4620      	mov	r0, r4
 80127fc:	f7ff fd48 	bl	8012290 <__hi0bits>
 8012800:	f1c0 0320 	rsb	r3, r0, #32
 8012804:	280a      	cmp	r0, #10
 8012806:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012884 <__b2d+0x9c>
 801280a:	600b      	str	r3, [r1, #0]
 801280c:	dc14      	bgt.n	8012838 <__b2d+0x50>
 801280e:	f1c0 0e0b 	rsb	lr, r0, #11
 8012812:	fa24 f10e 	lsr.w	r1, r4, lr
 8012816:	42b7      	cmp	r7, r6
 8012818:	ea41 030c 	orr.w	r3, r1, ip
 801281c:	bf34      	ite	cc
 801281e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012822:	2100      	movcs	r1, #0
 8012824:	3015      	adds	r0, #21
 8012826:	fa04 f000 	lsl.w	r0, r4, r0
 801282a:	fa21 f10e 	lsr.w	r1, r1, lr
 801282e:	ea40 0201 	orr.w	r2, r0, r1
 8012832:	ec43 2b10 	vmov	d0, r2, r3
 8012836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012838:	42b7      	cmp	r7, r6
 801283a:	bf3a      	itte	cc
 801283c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012840:	f1a5 0608 	subcc.w	r6, r5, #8
 8012844:	2100      	movcs	r1, #0
 8012846:	380b      	subs	r0, #11
 8012848:	d017      	beq.n	801287a <__b2d+0x92>
 801284a:	f1c0 0c20 	rsb	ip, r0, #32
 801284e:	fa04 f500 	lsl.w	r5, r4, r0
 8012852:	42be      	cmp	r6, r7
 8012854:	fa21 f40c 	lsr.w	r4, r1, ip
 8012858:	ea45 0504 	orr.w	r5, r5, r4
 801285c:	bf8c      	ite	hi
 801285e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012862:	2400      	movls	r4, #0
 8012864:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012868:	fa01 f000 	lsl.w	r0, r1, r0
 801286c:	fa24 f40c 	lsr.w	r4, r4, ip
 8012870:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012874:	ea40 0204 	orr.w	r2, r0, r4
 8012878:	e7db      	b.n	8012832 <__b2d+0x4a>
 801287a:	ea44 030c 	orr.w	r3, r4, ip
 801287e:	460a      	mov	r2, r1
 8012880:	e7d7      	b.n	8012832 <__b2d+0x4a>
 8012882:	bf00      	nop
 8012884:	3ff00000 	.word	0x3ff00000

08012888 <__d2b>:
 8012888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801288c:	4689      	mov	r9, r1
 801288e:	2101      	movs	r1, #1
 8012890:	ec57 6b10 	vmov	r6, r7, d0
 8012894:	4690      	mov	r8, r2
 8012896:	f7ff fc09 	bl	80120ac <_Balloc>
 801289a:	4604      	mov	r4, r0
 801289c:	b930      	cbnz	r0, 80128ac <__d2b+0x24>
 801289e:	4602      	mov	r2, r0
 80128a0:	4b25      	ldr	r3, [pc, #148]	; (8012938 <__d2b+0xb0>)
 80128a2:	4826      	ldr	r0, [pc, #152]	; (801293c <__d2b+0xb4>)
 80128a4:	f240 310a 	movw	r1, #778	; 0x30a
 80128a8:	f001 f8c6 	bl	8013a38 <__assert_func>
 80128ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80128b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80128b4:	bb35      	cbnz	r5, 8012904 <__d2b+0x7c>
 80128b6:	2e00      	cmp	r6, #0
 80128b8:	9301      	str	r3, [sp, #4]
 80128ba:	d028      	beq.n	801290e <__d2b+0x86>
 80128bc:	4668      	mov	r0, sp
 80128be:	9600      	str	r6, [sp, #0]
 80128c0:	f7ff fd06 	bl	80122d0 <__lo0bits>
 80128c4:	9900      	ldr	r1, [sp, #0]
 80128c6:	b300      	cbz	r0, 801290a <__d2b+0x82>
 80128c8:	9a01      	ldr	r2, [sp, #4]
 80128ca:	f1c0 0320 	rsb	r3, r0, #32
 80128ce:	fa02 f303 	lsl.w	r3, r2, r3
 80128d2:	430b      	orrs	r3, r1
 80128d4:	40c2      	lsrs	r2, r0
 80128d6:	6163      	str	r3, [r4, #20]
 80128d8:	9201      	str	r2, [sp, #4]
 80128da:	9b01      	ldr	r3, [sp, #4]
 80128dc:	61a3      	str	r3, [r4, #24]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	bf14      	ite	ne
 80128e2:	2202      	movne	r2, #2
 80128e4:	2201      	moveq	r2, #1
 80128e6:	6122      	str	r2, [r4, #16]
 80128e8:	b1d5      	cbz	r5, 8012920 <__d2b+0x98>
 80128ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80128ee:	4405      	add	r5, r0
 80128f0:	f8c9 5000 	str.w	r5, [r9]
 80128f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80128f8:	f8c8 0000 	str.w	r0, [r8]
 80128fc:	4620      	mov	r0, r4
 80128fe:	b003      	add	sp, #12
 8012900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012908:	e7d5      	b.n	80128b6 <__d2b+0x2e>
 801290a:	6161      	str	r1, [r4, #20]
 801290c:	e7e5      	b.n	80128da <__d2b+0x52>
 801290e:	a801      	add	r0, sp, #4
 8012910:	f7ff fcde 	bl	80122d0 <__lo0bits>
 8012914:	9b01      	ldr	r3, [sp, #4]
 8012916:	6163      	str	r3, [r4, #20]
 8012918:	2201      	movs	r2, #1
 801291a:	6122      	str	r2, [r4, #16]
 801291c:	3020      	adds	r0, #32
 801291e:	e7e3      	b.n	80128e8 <__d2b+0x60>
 8012920:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012924:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012928:	f8c9 0000 	str.w	r0, [r9]
 801292c:	6918      	ldr	r0, [r3, #16]
 801292e:	f7ff fcaf 	bl	8012290 <__hi0bits>
 8012932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012936:	e7df      	b.n	80128f8 <__d2b+0x70>
 8012938:	08014b2f 	.word	0x08014b2f
 801293c:	08014c1c 	.word	0x08014c1c

08012940 <__ratio>:
 8012940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012944:	4688      	mov	r8, r1
 8012946:	4669      	mov	r1, sp
 8012948:	4681      	mov	r9, r0
 801294a:	f7ff ff4d 	bl	80127e8 <__b2d>
 801294e:	a901      	add	r1, sp, #4
 8012950:	4640      	mov	r0, r8
 8012952:	ec55 4b10 	vmov	r4, r5, d0
 8012956:	f7ff ff47 	bl	80127e8 <__b2d>
 801295a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801295e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012962:	eba3 0c02 	sub.w	ip, r3, r2
 8012966:	e9dd 3200 	ldrd	r3, r2, [sp]
 801296a:	1a9b      	subs	r3, r3, r2
 801296c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012970:	ec51 0b10 	vmov	r0, r1, d0
 8012974:	2b00      	cmp	r3, #0
 8012976:	bfd6      	itet	le
 8012978:	460a      	movle	r2, r1
 801297a:	462a      	movgt	r2, r5
 801297c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012980:	468b      	mov	fp, r1
 8012982:	462f      	mov	r7, r5
 8012984:	bfd4      	ite	le
 8012986:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801298a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801298e:	4620      	mov	r0, r4
 8012990:	ee10 2a10 	vmov	r2, s0
 8012994:	465b      	mov	r3, fp
 8012996:	4639      	mov	r1, r7
 8012998:	f7ed ff78 	bl	800088c <__aeabi_ddiv>
 801299c:	ec41 0b10 	vmov	d0, r0, r1
 80129a0:	b003      	add	sp, #12
 80129a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129a6 <__copybits>:
 80129a6:	3901      	subs	r1, #1
 80129a8:	b570      	push	{r4, r5, r6, lr}
 80129aa:	1149      	asrs	r1, r1, #5
 80129ac:	6914      	ldr	r4, [r2, #16]
 80129ae:	3101      	adds	r1, #1
 80129b0:	f102 0314 	add.w	r3, r2, #20
 80129b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80129b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80129bc:	1f05      	subs	r5, r0, #4
 80129be:	42a3      	cmp	r3, r4
 80129c0:	d30c      	bcc.n	80129dc <__copybits+0x36>
 80129c2:	1aa3      	subs	r3, r4, r2
 80129c4:	3b11      	subs	r3, #17
 80129c6:	f023 0303 	bic.w	r3, r3, #3
 80129ca:	3211      	adds	r2, #17
 80129cc:	42a2      	cmp	r2, r4
 80129ce:	bf88      	it	hi
 80129d0:	2300      	movhi	r3, #0
 80129d2:	4418      	add	r0, r3
 80129d4:	2300      	movs	r3, #0
 80129d6:	4288      	cmp	r0, r1
 80129d8:	d305      	bcc.n	80129e6 <__copybits+0x40>
 80129da:	bd70      	pop	{r4, r5, r6, pc}
 80129dc:	f853 6b04 	ldr.w	r6, [r3], #4
 80129e0:	f845 6f04 	str.w	r6, [r5, #4]!
 80129e4:	e7eb      	b.n	80129be <__copybits+0x18>
 80129e6:	f840 3b04 	str.w	r3, [r0], #4
 80129ea:	e7f4      	b.n	80129d6 <__copybits+0x30>

080129ec <__any_on>:
 80129ec:	f100 0214 	add.w	r2, r0, #20
 80129f0:	6900      	ldr	r0, [r0, #16]
 80129f2:	114b      	asrs	r3, r1, #5
 80129f4:	4298      	cmp	r0, r3
 80129f6:	b510      	push	{r4, lr}
 80129f8:	db11      	blt.n	8012a1e <__any_on+0x32>
 80129fa:	dd0a      	ble.n	8012a12 <__any_on+0x26>
 80129fc:	f011 011f 	ands.w	r1, r1, #31
 8012a00:	d007      	beq.n	8012a12 <__any_on+0x26>
 8012a02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012a06:	fa24 f001 	lsr.w	r0, r4, r1
 8012a0a:	fa00 f101 	lsl.w	r1, r0, r1
 8012a0e:	428c      	cmp	r4, r1
 8012a10:	d10b      	bne.n	8012a2a <__any_on+0x3e>
 8012a12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a16:	4293      	cmp	r3, r2
 8012a18:	d803      	bhi.n	8012a22 <__any_on+0x36>
 8012a1a:	2000      	movs	r0, #0
 8012a1c:	bd10      	pop	{r4, pc}
 8012a1e:	4603      	mov	r3, r0
 8012a20:	e7f7      	b.n	8012a12 <__any_on+0x26>
 8012a22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a26:	2900      	cmp	r1, #0
 8012a28:	d0f5      	beq.n	8012a16 <__any_on+0x2a>
 8012a2a:	2001      	movs	r0, #1
 8012a2c:	e7f6      	b.n	8012a1c <__any_on+0x30>

08012a2e <_calloc_r>:
 8012a2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a30:	fba1 2402 	umull	r2, r4, r1, r2
 8012a34:	b94c      	cbnz	r4, 8012a4a <_calloc_r+0x1c>
 8012a36:	4611      	mov	r1, r2
 8012a38:	9201      	str	r2, [sp, #4]
 8012a3a:	f000 f87b 	bl	8012b34 <_malloc_r>
 8012a3e:	9a01      	ldr	r2, [sp, #4]
 8012a40:	4605      	mov	r5, r0
 8012a42:	b930      	cbnz	r0, 8012a52 <_calloc_r+0x24>
 8012a44:	4628      	mov	r0, r5
 8012a46:	b003      	add	sp, #12
 8012a48:	bd30      	pop	{r4, r5, pc}
 8012a4a:	220c      	movs	r2, #12
 8012a4c:	6002      	str	r2, [r0, #0]
 8012a4e:	2500      	movs	r5, #0
 8012a50:	e7f8      	b.n	8012a44 <_calloc_r+0x16>
 8012a52:	4621      	mov	r1, r4
 8012a54:	f7fb ff6e 	bl	800e934 <memset>
 8012a58:	e7f4      	b.n	8012a44 <_calloc_r+0x16>
	...

08012a5c <_free_r>:
 8012a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a5e:	2900      	cmp	r1, #0
 8012a60:	d044      	beq.n	8012aec <_free_r+0x90>
 8012a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a66:	9001      	str	r0, [sp, #4]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	f1a1 0404 	sub.w	r4, r1, #4
 8012a6e:	bfb8      	it	lt
 8012a70:	18e4      	addlt	r4, r4, r3
 8012a72:	f001 f833 	bl	8013adc <__malloc_lock>
 8012a76:	4a1e      	ldr	r2, [pc, #120]	; (8012af0 <_free_r+0x94>)
 8012a78:	9801      	ldr	r0, [sp, #4]
 8012a7a:	6813      	ldr	r3, [r2, #0]
 8012a7c:	b933      	cbnz	r3, 8012a8c <_free_r+0x30>
 8012a7e:	6063      	str	r3, [r4, #4]
 8012a80:	6014      	str	r4, [r2, #0]
 8012a82:	b003      	add	sp, #12
 8012a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a88:	f001 b82e 	b.w	8013ae8 <__malloc_unlock>
 8012a8c:	42a3      	cmp	r3, r4
 8012a8e:	d908      	bls.n	8012aa2 <_free_r+0x46>
 8012a90:	6825      	ldr	r5, [r4, #0]
 8012a92:	1961      	adds	r1, r4, r5
 8012a94:	428b      	cmp	r3, r1
 8012a96:	bf01      	itttt	eq
 8012a98:	6819      	ldreq	r1, [r3, #0]
 8012a9a:	685b      	ldreq	r3, [r3, #4]
 8012a9c:	1949      	addeq	r1, r1, r5
 8012a9e:	6021      	streq	r1, [r4, #0]
 8012aa0:	e7ed      	b.n	8012a7e <_free_r+0x22>
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	685b      	ldr	r3, [r3, #4]
 8012aa6:	b10b      	cbz	r3, 8012aac <_free_r+0x50>
 8012aa8:	42a3      	cmp	r3, r4
 8012aaa:	d9fa      	bls.n	8012aa2 <_free_r+0x46>
 8012aac:	6811      	ldr	r1, [r2, #0]
 8012aae:	1855      	adds	r5, r2, r1
 8012ab0:	42a5      	cmp	r5, r4
 8012ab2:	d10b      	bne.n	8012acc <_free_r+0x70>
 8012ab4:	6824      	ldr	r4, [r4, #0]
 8012ab6:	4421      	add	r1, r4
 8012ab8:	1854      	adds	r4, r2, r1
 8012aba:	42a3      	cmp	r3, r4
 8012abc:	6011      	str	r1, [r2, #0]
 8012abe:	d1e0      	bne.n	8012a82 <_free_r+0x26>
 8012ac0:	681c      	ldr	r4, [r3, #0]
 8012ac2:	685b      	ldr	r3, [r3, #4]
 8012ac4:	6053      	str	r3, [r2, #4]
 8012ac6:	4421      	add	r1, r4
 8012ac8:	6011      	str	r1, [r2, #0]
 8012aca:	e7da      	b.n	8012a82 <_free_r+0x26>
 8012acc:	d902      	bls.n	8012ad4 <_free_r+0x78>
 8012ace:	230c      	movs	r3, #12
 8012ad0:	6003      	str	r3, [r0, #0]
 8012ad2:	e7d6      	b.n	8012a82 <_free_r+0x26>
 8012ad4:	6825      	ldr	r5, [r4, #0]
 8012ad6:	1961      	adds	r1, r4, r5
 8012ad8:	428b      	cmp	r3, r1
 8012ada:	bf04      	itt	eq
 8012adc:	6819      	ldreq	r1, [r3, #0]
 8012ade:	685b      	ldreq	r3, [r3, #4]
 8012ae0:	6063      	str	r3, [r4, #4]
 8012ae2:	bf04      	itt	eq
 8012ae4:	1949      	addeq	r1, r1, r5
 8012ae6:	6021      	streq	r1, [r4, #0]
 8012ae8:	6054      	str	r4, [r2, #4]
 8012aea:	e7ca      	b.n	8012a82 <_free_r+0x26>
 8012aec:	b003      	add	sp, #12
 8012aee:	bd30      	pop	{r4, r5, pc}
 8012af0:	20003144 	.word	0x20003144

08012af4 <sbrk_aligned>:
 8012af4:	b570      	push	{r4, r5, r6, lr}
 8012af6:	4e0e      	ldr	r6, [pc, #56]	; (8012b30 <sbrk_aligned+0x3c>)
 8012af8:	460c      	mov	r4, r1
 8012afa:	6831      	ldr	r1, [r6, #0]
 8012afc:	4605      	mov	r5, r0
 8012afe:	b911      	cbnz	r1, 8012b06 <sbrk_aligned+0x12>
 8012b00:	f000 fe82 	bl	8013808 <_sbrk_r>
 8012b04:	6030      	str	r0, [r6, #0]
 8012b06:	4621      	mov	r1, r4
 8012b08:	4628      	mov	r0, r5
 8012b0a:	f000 fe7d 	bl	8013808 <_sbrk_r>
 8012b0e:	1c43      	adds	r3, r0, #1
 8012b10:	d00a      	beq.n	8012b28 <sbrk_aligned+0x34>
 8012b12:	1cc4      	adds	r4, r0, #3
 8012b14:	f024 0403 	bic.w	r4, r4, #3
 8012b18:	42a0      	cmp	r0, r4
 8012b1a:	d007      	beq.n	8012b2c <sbrk_aligned+0x38>
 8012b1c:	1a21      	subs	r1, r4, r0
 8012b1e:	4628      	mov	r0, r5
 8012b20:	f000 fe72 	bl	8013808 <_sbrk_r>
 8012b24:	3001      	adds	r0, #1
 8012b26:	d101      	bne.n	8012b2c <sbrk_aligned+0x38>
 8012b28:	f04f 34ff 	mov.w	r4, #4294967295
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	bd70      	pop	{r4, r5, r6, pc}
 8012b30:	20003148 	.word	0x20003148

08012b34 <_malloc_r>:
 8012b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b38:	1ccd      	adds	r5, r1, #3
 8012b3a:	f025 0503 	bic.w	r5, r5, #3
 8012b3e:	3508      	adds	r5, #8
 8012b40:	2d0c      	cmp	r5, #12
 8012b42:	bf38      	it	cc
 8012b44:	250c      	movcc	r5, #12
 8012b46:	2d00      	cmp	r5, #0
 8012b48:	4607      	mov	r7, r0
 8012b4a:	db01      	blt.n	8012b50 <_malloc_r+0x1c>
 8012b4c:	42a9      	cmp	r1, r5
 8012b4e:	d905      	bls.n	8012b5c <_malloc_r+0x28>
 8012b50:	230c      	movs	r3, #12
 8012b52:	603b      	str	r3, [r7, #0]
 8012b54:	2600      	movs	r6, #0
 8012b56:	4630      	mov	r0, r6
 8012b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b5c:	4e2e      	ldr	r6, [pc, #184]	; (8012c18 <_malloc_r+0xe4>)
 8012b5e:	f000 ffbd 	bl	8013adc <__malloc_lock>
 8012b62:	6833      	ldr	r3, [r6, #0]
 8012b64:	461c      	mov	r4, r3
 8012b66:	bb34      	cbnz	r4, 8012bb6 <_malloc_r+0x82>
 8012b68:	4629      	mov	r1, r5
 8012b6a:	4638      	mov	r0, r7
 8012b6c:	f7ff ffc2 	bl	8012af4 <sbrk_aligned>
 8012b70:	1c43      	adds	r3, r0, #1
 8012b72:	4604      	mov	r4, r0
 8012b74:	d14d      	bne.n	8012c12 <_malloc_r+0xde>
 8012b76:	6834      	ldr	r4, [r6, #0]
 8012b78:	4626      	mov	r6, r4
 8012b7a:	2e00      	cmp	r6, #0
 8012b7c:	d140      	bne.n	8012c00 <_malloc_r+0xcc>
 8012b7e:	6823      	ldr	r3, [r4, #0]
 8012b80:	4631      	mov	r1, r6
 8012b82:	4638      	mov	r0, r7
 8012b84:	eb04 0803 	add.w	r8, r4, r3
 8012b88:	f000 fe3e 	bl	8013808 <_sbrk_r>
 8012b8c:	4580      	cmp	r8, r0
 8012b8e:	d13a      	bne.n	8012c06 <_malloc_r+0xd2>
 8012b90:	6821      	ldr	r1, [r4, #0]
 8012b92:	3503      	adds	r5, #3
 8012b94:	1a6d      	subs	r5, r5, r1
 8012b96:	f025 0503 	bic.w	r5, r5, #3
 8012b9a:	3508      	adds	r5, #8
 8012b9c:	2d0c      	cmp	r5, #12
 8012b9e:	bf38      	it	cc
 8012ba0:	250c      	movcc	r5, #12
 8012ba2:	4629      	mov	r1, r5
 8012ba4:	4638      	mov	r0, r7
 8012ba6:	f7ff ffa5 	bl	8012af4 <sbrk_aligned>
 8012baa:	3001      	adds	r0, #1
 8012bac:	d02b      	beq.n	8012c06 <_malloc_r+0xd2>
 8012bae:	6823      	ldr	r3, [r4, #0]
 8012bb0:	442b      	add	r3, r5
 8012bb2:	6023      	str	r3, [r4, #0]
 8012bb4:	e00e      	b.n	8012bd4 <_malloc_r+0xa0>
 8012bb6:	6822      	ldr	r2, [r4, #0]
 8012bb8:	1b52      	subs	r2, r2, r5
 8012bba:	d41e      	bmi.n	8012bfa <_malloc_r+0xc6>
 8012bbc:	2a0b      	cmp	r2, #11
 8012bbe:	d916      	bls.n	8012bee <_malloc_r+0xba>
 8012bc0:	1961      	adds	r1, r4, r5
 8012bc2:	42a3      	cmp	r3, r4
 8012bc4:	6025      	str	r5, [r4, #0]
 8012bc6:	bf18      	it	ne
 8012bc8:	6059      	strne	r1, [r3, #4]
 8012bca:	6863      	ldr	r3, [r4, #4]
 8012bcc:	bf08      	it	eq
 8012bce:	6031      	streq	r1, [r6, #0]
 8012bd0:	5162      	str	r2, [r4, r5]
 8012bd2:	604b      	str	r3, [r1, #4]
 8012bd4:	4638      	mov	r0, r7
 8012bd6:	f104 060b 	add.w	r6, r4, #11
 8012bda:	f000 ff85 	bl	8013ae8 <__malloc_unlock>
 8012bde:	f026 0607 	bic.w	r6, r6, #7
 8012be2:	1d23      	adds	r3, r4, #4
 8012be4:	1af2      	subs	r2, r6, r3
 8012be6:	d0b6      	beq.n	8012b56 <_malloc_r+0x22>
 8012be8:	1b9b      	subs	r3, r3, r6
 8012bea:	50a3      	str	r3, [r4, r2]
 8012bec:	e7b3      	b.n	8012b56 <_malloc_r+0x22>
 8012bee:	6862      	ldr	r2, [r4, #4]
 8012bf0:	42a3      	cmp	r3, r4
 8012bf2:	bf0c      	ite	eq
 8012bf4:	6032      	streq	r2, [r6, #0]
 8012bf6:	605a      	strne	r2, [r3, #4]
 8012bf8:	e7ec      	b.n	8012bd4 <_malloc_r+0xa0>
 8012bfa:	4623      	mov	r3, r4
 8012bfc:	6864      	ldr	r4, [r4, #4]
 8012bfe:	e7b2      	b.n	8012b66 <_malloc_r+0x32>
 8012c00:	4634      	mov	r4, r6
 8012c02:	6876      	ldr	r6, [r6, #4]
 8012c04:	e7b9      	b.n	8012b7a <_malloc_r+0x46>
 8012c06:	230c      	movs	r3, #12
 8012c08:	603b      	str	r3, [r7, #0]
 8012c0a:	4638      	mov	r0, r7
 8012c0c:	f000 ff6c 	bl	8013ae8 <__malloc_unlock>
 8012c10:	e7a1      	b.n	8012b56 <_malloc_r+0x22>
 8012c12:	6025      	str	r5, [r4, #0]
 8012c14:	e7de      	b.n	8012bd4 <_malloc_r+0xa0>
 8012c16:	bf00      	nop
 8012c18:	20003144 	.word	0x20003144

08012c1c <__ssputs_r>:
 8012c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c20:	688e      	ldr	r6, [r1, #8]
 8012c22:	429e      	cmp	r6, r3
 8012c24:	4682      	mov	sl, r0
 8012c26:	460c      	mov	r4, r1
 8012c28:	4690      	mov	r8, r2
 8012c2a:	461f      	mov	r7, r3
 8012c2c:	d838      	bhi.n	8012ca0 <__ssputs_r+0x84>
 8012c2e:	898a      	ldrh	r2, [r1, #12]
 8012c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012c34:	d032      	beq.n	8012c9c <__ssputs_r+0x80>
 8012c36:	6825      	ldr	r5, [r4, #0]
 8012c38:	6909      	ldr	r1, [r1, #16]
 8012c3a:	eba5 0901 	sub.w	r9, r5, r1
 8012c3e:	6965      	ldr	r5, [r4, #20]
 8012c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012c48:	3301      	adds	r3, #1
 8012c4a:	444b      	add	r3, r9
 8012c4c:	106d      	asrs	r5, r5, #1
 8012c4e:	429d      	cmp	r5, r3
 8012c50:	bf38      	it	cc
 8012c52:	461d      	movcc	r5, r3
 8012c54:	0553      	lsls	r3, r2, #21
 8012c56:	d531      	bpl.n	8012cbc <__ssputs_r+0xa0>
 8012c58:	4629      	mov	r1, r5
 8012c5a:	f7ff ff6b 	bl	8012b34 <_malloc_r>
 8012c5e:	4606      	mov	r6, r0
 8012c60:	b950      	cbnz	r0, 8012c78 <__ssputs_r+0x5c>
 8012c62:	230c      	movs	r3, #12
 8012c64:	f8ca 3000 	str.w	r3, [sl]
 8012c68:	89a3      	ldrh	r3, [r4, #12]
 8012c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c6e:	81a3      	strh	r3, [r4, #12]
 8012c70:	f04f 30ff 	mov.w	r0, #4294967295
 8012c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c78:	6921      	ldr	r1, [r4, #16]
 8012c7a:	464a      	mov	r2, r9
 8012c7c:	f7fb fe32 	bl	800e8e4 <memcpy>
 8012c80:	89a3      	ldrh	r3, [r4, #12]
 8012c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c8a:	81a3      	strh	r3, [r4, #12]
 8012c8c:	6126      	str	r6, [r4, #16]
 8012c8e:	6165      	str	r5, [r4, #20]
 8012c90:	444e      	add	r6, r9
 8012c92:	eba5 0509 	sub.w	r5, r5, r9
 8012c96:	6026      	str	r6, [r4, #0]
 8012c98:	60a5      	str	r5, [r4, #8]
 8012c9a:	463e      	mov	r6, r7
 8012c9c:	42be      	cmp	r6, r7
 8012c9e:	d900      	bls.n	8012ca2 <__ssputs_r+0x86>
 8012ca0:	463e      	mov	r6, r7
 8012ca2:	6820      	ldr	r0, [r4, #0]
 8012ca4:	4632      	mov	r2, r6
 8012ca6:	4641      	mov	r1, r8
 8012ca8:	f7fb fe2a 	bl	800e900 <memmove>
 8012cac:	68a3      	ldr	r3, [r4, #8]
 8012cae:	1b9b      	subs	r3, r3, r6
 8012cb0:	60a3      	str	r3, [r4, #8]
 8012cb2:	6823      	ldr	r3, [r4, #0]
 8012cb4:	4433      	add	r3, r6
 8012cb6:	6023      	str	r3, [r4, #0]
 8012cb8:	2000      	movs	r0, #0
 8012cba:	e7db      	b.n	8012c74 <__ssputs_r+0x58>
 8012cbc:	462a      	mov	r2, r5
 8012cbe:	f000 ff19 	bl	8013af4 <_realloc_r>
 8012cc2:	4606      	mov	r6, r0
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	d1e1      	bne.n	8012c8c <__ssputs_r+0x70>
 8012cc8:	6921      	ldr	r1, [r4, #16]
 8012cca:	4650      	mov	r0, sl
 8012ccc:	f7ff fec6 	bl	8012a5c <_free_r>
 8012cd0:	e7c7      	b.n	8012c62 <__ssputs_r+0x46>
	...

08012cd4 <_svfiprintf_r>:
 8012cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd8:	4698      	mov	r8, r3
 8012cda:	898b      	ldrh	r3, [r1, #12]
 8012cdc:	061b      	lsls	r3, r3, #24
 8012cde:	b09d      	sub	sp, #116	; 0x74
 8012ce0:	4607      	mov	r7, r0
 8012ce2:	460d      	mov	r5, r1
 8012ce4:	4614      	mov	r4, r2
 8012ce6:	d50e      	bpl.n	8012d06 <_svfiprintf_r+0x32>
 8012ce8:	690b      	ldr	r3, [r1, #16]
 8012cea:	b963      	cbnz	r3, 8012d06 <_svfiprintf_r+0x32>
 8012cec:	2140      	movs	r1, #64	; 0x40
 8012cee:	f7ff ff21 	bl	8012b34 <_malloc_r>
 8012cf2:	6028      	str	r0, [r5, #0]
 8012cf4:	6128      	str	r0, [r5, #16]
 8012cf6:	b920      	cbnz	r0, 8012d02 <_svfiprintf_r+0x2e>
 8012cf8:	230c      	movs	r3, #12
 8012cfa:	603b      	str	r3, [r7, #0]
 8012cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8012d00:	e0d1      	b.n	8012ea6 <_svfiprintf_r+0x1d2>
 8012d02:	2340      	movs	r3, #64	; 0x40
 8012d04:	616b      	str	r3, [r5, #20]
 8012d06:	2300      	movs	r3, #0
 8012d08:	9309      	str	r3, [sp, #36]	; 0x24
 8012d0a:	2320      	movs	r3, #32
 8012d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d14:	2330      	movs	r3, #48	; 0x30
 8012d16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012ec0 <_svfiprintf_r+0x1ec>
 8012d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d1e:	f04f 0901 	mov.w	r9, #1
 8012d22:	4623      	mov	r3, r4
 8012d24:	469a      	mov	sl, r3
 8012d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d2a:	b10a      	cbz	r2, 8012d30 <_svfiprintf_r+0x5c>
 8012d2c:	2a25      	cmp	r2, #37	; 0x25
 8012d2e:	d1f9      	bne.n	8012d24 <_svfiprintf_r+0x50>
 8012d30:	ebba 0b04 	subs.w	fp, sl, r4
 8012d34:	d00b      	beq.n	8012d4e <_svfiprintf_r+0x7a>
 8012d36:	465b      	mov	r3, fp
 8012d38:	4622      	mov	r2, r4
 8012d3a:	4629      	mov	r1, r5
 8012d3c:	4638      	mov	r0, r7
 8012d3e:	f7ff ff6d 	bl	8012c1c <__ssputs_r>
 8012d42:	3001      	adds	r0, #1
 8012d44:	f000 80aa 	beq.w	8012e9c <_svfiprintf_r+0x1c8>
 8012d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d4a:	445a      	add	r2, fp
 8012d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8012d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f000 80a2 	beq.w	8012e9c <_svfiprintf_r+0x1c8>
 8012d58:	2300      	movs	r3, #0
 8012d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8012d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d62:	f10a 0a01 	add.w	sl, sl, #1
 8012d66:	9304      	str	r3, [sp, #16]
 8012d68:	9307      	str	r3, [sp, #28]
 8012d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8012d70:	4654      	mov	r4, sl
 8012d72:	2205      	movs	r2, #5
 8012d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d78:	4851      	ldr	r0, [pc, #324]	; (8012ec0 <_svfiprintf_r+0x1ec>)
 8012d7a:	f7ed fa51 	bl	8000220 <memchr>
 8012d7e:	9a04      	ldr	r2, [sp, #16]
 8012d80:	b9d8      	cbnz	r0, 8012dba <_svfiprintf_r+0xe6>
 8012d82:	06d0      	lsls	r0, r2, #27
 8012d84:	bf44      	itt	mi
 8012d86:	2320      	movmi	r3, #32
 8012d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d8c:	0711      	lsls	r1, r2, #28
 8012d8e:	bf44      	itt	mi
 8012d90:	232b      	movmi	r3, #43	; 0x2b
 8012d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d96:	f89a 3000 	ldrb.w	r3, [sl]
 8012d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d9c:	d015      	beq.n	8012dca <_svfiprintf_r+0xf6>
 8012d9e:	9a07      	ldr	r2, [sp, #28]
 8012da0:	4654      	mov	r4, sl
 8012da2:	2000      	movs	r0, #0
 8012da4:	f04f 0c0a 	mov.w	ip, #10
 8012da8:	4621      	mov	r1, r4
 8012daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012dae:	3b30      	subs	r3, #48	; 0x30
 8012db0:	2b09      	cmp	r3, #9
 8012db2:	d94e      	bls.n	8012e52 <_svfiprintf_r+0x17e>
 8012db4:	b1b0      	cbz	r0, 8012de4 <_svfiprintf_r+0x110>
 8012db6:	9207      	str	r2, [sp, #28]
 8012db8:	e014      	b.n	8012de4 <_svfiprintf_r+0x110>
 8012dba:	eba0 0308 	sub.w	r3, r0, r8
 8012dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8012dc2:	4313      	orrs	r3, r2
 8012dc4:	9304      	str	r3, [sp, #16]
 8012dc6:	46a2      	mov	sl, r4
 8012dc8:	e7d2      	b.n	8012d70 <_svfiprintf_r+0x9c>
 8012dca:	9b03      	ldr	r3, [sp, #12]
 8012dcc:	1d19      	adds	r1, r3, #4
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	9103      	str	r1, [sp, #12]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	bfbb      	ittet	lt
 8012dd6:	425b      	neglt	r3, r3
 8012dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8012ddc:	9307      	strge	r3, [sp, #28]
 8012dde:	9307      	strlt	r3, [sp, #28]
 8012de0:	bfb8      	it	lt
 8012de2:	9204      	strlt	r2, [sp, #16]
 8012de4:	7823      	ldrb	r3, [r4, #0]
 8012de6:	2b2e      	cmp	r3, #46	; 0x2e
 8012de8:	d10c      	bne.n	8012e04 <_svfiprintf_r+0x130>
 8012dea:	7863      	ldrb	r3, [r4, #1]
 8012dec:	2b2a      	cmp	r3, #42	; 0x2a
 8012dee:	d135      	bne.n	8012e5c <_svfiprintf_r+0x188>
 8012df0:	9b03      	ldr	r3, [sp, #12]
 8012df2:	1d1a      	adds	r2, r3, #4
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	9203      	str	r2, [sp, #12]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	bfb8      	it	lt
 8012dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e00:	3402      	adds	r4, #2
 8012e02:	9305      	str	r3, [sp, #20]
 8012e04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012ed0 <_svfiprintf_r+0x1fc>
 8012e08:	7821      	ldrb	r1, [r4, #0]
 8012e0a:	2203      	movs	r2, #3
 8012e0c:	4650      	mov	r0, sl
 8012e0e:	f7ed fa07 	bl	8000220 <memchr>
 8012e12:	b140      	cbz	r0, 8012e26 <_svfiprintf_r+0x152>
 8012e14:	2340      	movs	r3, #64	; 0x40
 8012e16:	eba0 000a 	sub.w	r0, r0, sl
 8012e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8012e1e:	9b04      	ldr	r3, [sp, #16]
 8012e20:	4303      	orrs	r3, r0
 8012e22:	3401      	adds	r4, #1
 8012e24:	9304      	str	r3, [sp, #16]
 8012e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e2a:	4826      	ldr	r0, [pc, #152]	; (8012ec4 <_svfiprintf_r+0x1f0>)
 8012e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e30:	2206      	movs	r2, #6
 8012e32:	f7ed f9f5 	bl	8000220 <memchr>
 8012e36:	2800      	cmp	r0, #0
 8012e38:	d038      	beq.n	8012eac <_svfiprintf_r+0x1d8>
 8012e3a:	4b23      	ldr	r3, [pc, #140]	; (8012ec8 <_svfiprintf_r+0x1f4>)
 8012e3c:	bb1b      	cbnz	r3, 8012e86 <_svfiprintf_r+0x1b2>
 8012e3e:	9b03      	ldr	r3, [sp, #12]
 8012e40:	3307      	adds	r3, #7
 8012e42:	f023 0307 	bic.w	r3, r3, #7
 8012e46:	3308      	adds	r3, #8
 8012e48:	9303      	str	r3, [sp, #12]
 8012e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e4c:	4433      	add	r3, r6
 8012e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8012e50:	e767      	b.n	8012d22 <_svfiprintf_r+0x4e>
 8012e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e56:	460c      	mov	r4, r1
 8012e58:	2001      	movs	r0, #1
 8012e5a:	e7a5      	b.n	8012da8 <_svfiprintf_r+0xd4>
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	3401      	adds	r4, #1
 8012e60:	9305      	str	r3, [sp, #20]
 8012e62:	4619      	mov	r1, r3
 8012e64:	f04f 0c0a 	mov.w	ip, #10
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e6e:	3a30      	subs	r2, #48	; 0x30
 8012e70:	2a09      	cmp	r2, #9
 8012e72:	d903      	bls.n	8012e7c <_svfiprintf_r+0x1a8>
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d0c5      	beq.n	8012e04 <_svfiprintf_r+0x130>
 8012e78:	9105      	str	r1, [sp, #20]
 8012e7a:	e7c3      	b.n	8012e04 <_svfiprintf_r+0x130>
 8012e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e80:	4604      	mov	r4, r0
 8012e82:	2301      	movs	r3, #1
 8012e84:	e7f0      	b.n	8012e68 <_svfiprintf_r+0x194>
 8012e86:	ab03      	add	r3, sp, #12
 8012e88:	9300      	str	r3, [sp, #0]
 8012e8a:	462a      	mov	r2, r5
 8012e8c:	4b0f      	ldr	r3, [pc, #60]	; (8012ecc <_svfiprintf_r+0x1f8>)
 8012e8e:	a904      	add	r1, sp, #16
 8012e90:	4638      	mov	r0, r7
 8012e92:	f7fb fdf7 	bl	800ea84 <_printf_float>
 8012e96:	1c42      	adds	r2, r0, #1
 8012e98:	4606      	mov	r6, r0
 8012e9a:	d1d6      	bne.n	8012e4a <_svfiprintf_r+0x176>
 8012e9c:	89ab      	ldrh	r3, [r5, #12]
 8012e9e:	065b      	lsls	r3, r3, #25
 8012ea0:	f53f af2c 	bmi.w	8012cfc <_svfiprintf_r+0x28>
 8012ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ea6:	b01d      	add	sp, #116	; 0x74
 8012ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eac:	ab03      	add	r3, sp, #12
 8012eae:	9300      	str	r3, [sp, #0]
 8012eb0:	462a      	mov	r2, r5
 8012eb2:	4b06      	ldr	r3, [pc, #24]	; (8012ecc <_svfiprintf_r+0x1f8>)
 8012eb4:	a904      	add	r1, sp, #16
 8012eb6:	4638      	mov	r0, r7
 8012eb8:	f7fc f888 	bl	800efcc <_printf_i>
 8012ebc:	e7eb      	b.n	8012e96 <_svfiprintf_r+0x1c2>
 8012ebe:	bf00      	nop
 8012ec0:	08014d74 	.word	0x08014d74
 8012ec4:	08014d7e 	.word	0x08014d7e
 8012ec8:	0800ea85 	.word	0x0800ea85
 8012ecc:	08012c1d 	.word	0x08012c1d
 8012ed0:	08014d7a 	.word	0x08014d7a

08012ed4 <_sungetc_r>:
 8012ed4:	b538      	push	{r3, r4, r5, lr}
 8012ed6:	1c4b      	adds	r3, r1, #1
 8012ed8:	4614      	mov	r4, r2
 8012eda:	d103      	bne.n	8012ee4 <_sungetc_r+0x10>
 8012edc:	f04f 35ff 	mov.w	r5, #4294967295
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	bd38      	pop	{r3, r4, r5, pc}
 8012ee4:	8993      	ldrh	r3, [r2, #12]
 8012ee6:	f023 0320 	bic.w	r3, r3, #32
 8012eea:	8193      	strh	r3, [r2, #12]
 8012eec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012eee:	6852      	ldr	r2, [r2, #4]
 8012ef0:	b2cd      	uxtb	r5, r1
 8012ef2:	b18b      	cbz	r3, 8012f18 <_sungetc_r+0x44>
 8012ef4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012ef6:	4293      	cmp	r3, r2
 8012ef8:	dd08      	ble.n	8012f0c <_sungetc_r+0x38>
 8012efa:	6823      	ldr	r3, [r4, #0]
 8012efc:	1e5a      	subs	r2, r3, #1
 8012efe:	6022      	str	r2, [r4, #0]
 8012f00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012f04:	6863      	ldr	r3, [r4, #4]
 8012f06:	3301      	adds	r3, #1
 8012f08:	6063      	str	r3, [r4, #4]
 8012f0a:	e7e9      	b.n	8012ee0 <_sungetc_r+0xc>
 8012f0c:	4621      	mov	r1, r4
 8012f0e:	f000 fd4b 	bl	80139a8 <__submore>
 8012f12:	2800      	cmp	r0, #0
 8012f14:	d0f1      	beq.n	8012efa <_sungetc_r+0x26>
 8012f16:	e7e1      	b.n	8012edc <_sungetc_r+0x8>
 8012f18:	6921      	ldr	r1, [r4, #16]
 8012f1a:	6823      	ldr	r3, [r4, #0]
 8012f1c:	b151      	cbz	r1, 8012f34 <_sungetc_r+0x60>
 8012f1e:	4299      	cmp	r1, r3
 8012f20:	d208      	bcs.n	8012f34 <_sungetc_r+0x60>
 8012f22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012f26:	42a9      	cmp	r1, r5
 8012f28:	d104      	bne.n	8012f34 <_sungetc_r+0x60>
 8012f2a:	3b01      	subs	r3, #1
 8012f2c:	3201      	adds	r2, #1
 8012f2e:	6023      	str	r3, [r4, #0]
 8012f30:	6062      	str	r2, [r4, #4]
 8012f32:	e7d5      	b.n	8012ee0 <_sungetc_r+0xc>
 8012f34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f3c:	6363      	str	r3, [r4, #52]	; 0x34
 8012f3e:	2303      	movs	r3, #3
 8012f40:	63a3      	str	r3, [r4, #56]	; 0x38
 8012f42:	4623      	mov	r3, r4
 8012f44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012f48:	6023      	str	r3, [r4, #0]
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	e7dc      	b.n	8012f08 <_sungetc_r+0x34>

08012f4e <__ssrefill_r>:
 8012f4e:	b510      	push	{r4, lr}
 8012f50:	460c      	mov	r4, r1
 8012f52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012f54:	b169      	cbz	r1, 8012f72 <__ssrefill_r+0x24>
 8012f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f5a:	4299      	cmp	r1, r3
 8012f5c:	d001      	beq.n	8012f62 <__ssrefill_r+0x14>
 8012f5e:	f7ff fd7d 	bl	8012a5c <_free_r>
 8012f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f64:	6063      	str	r3, [r4, #4]
 8012f66:	2000      	movs	r0, #0
 8012f68:	6360      	str	r0, [r4, #52]	; 0x34
 8012f6a:	b113      	cbz	r3, 8012f72 <__ssrefill_r+0x24>
 8012f6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012f6e:	6023      	str	r3, [r4, #0]
 8012f70:	bd10      	pop	{r4, pc}
 8012f72:	6923      	ldr	r3, [r4, #16]
 8012f74:	6023      	str	r3, [r4, #0]
 8012f76:	2300      	movs	r3, #0
 8012f78:	6063      	str	r3, [r4, #4]
 8012f7a:	89a3      	ldrh	r3, [r4, #12]
 8012f7c:	f043 0320 	orr.w	r3, r3, #32
 8012f80:	81a3      	strh	r3, [r4, #12]
 8012f82:	f04f 30ff 	mov.w	r0, #4294967295
 8012f86:	e7f3      	b.n	8012f70 <__ssrefill_r+0x22>

08012f88 <__ssvfiscanf_r>:
 8012f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f8c:	460c      	mov	r4, r1
 8012f8e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012f92:	2100      	movs	r1, #0
 8012f94:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012f98:	49a6      	ldr	r1, [pc, #664]	; (8013234 <__ssvfiscanf_r+0x2ac>)
 8012f9a:	91a0      	str	r1, [sp, #640]	; 0x280
 8012f9c:	f10d 0804 	add.w	r8, sp, #4
 8012fa0:	49a5      	ldr	r1, [pc, #660]	; (8013238 <__ssvfiscanf_r+0x2b0>)
 8012fa2:	4fa6      	ldr	r7, [pc, #664]	; (801323c <__ssvfiscanf_r+0x2b4>)
 8012fa4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013240 <__ssvfiscanf_r+0x2b8>
 8012fa8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012fac:	4606      	mov	r6, r0
 8012fae:	91a1      	str	r1, [sp, #644]	; 0x284
 8012fb0:	9300      	str	r3, [sp, #0]
 8012fb2:	7813      	ldrb	r3, [r2, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	f000 815a 	beq.w	801326e <__ssvfiscanf_r+0x2e6>
 8012fba:	5dd9      	ldrb	r1, [r3, r7]
 8012fbc:	f011 0108 	ands.w	r1, r1, #8
 8012fc0:	f102 0501 	add.w	r5, r2, #1
 8012fc4:	d019      	beq.n	8012ffa <__ssvfiscanf_r+0x72>
 8012fc6:	6863      	ldr	r3, [r4, #4]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	dd0f      	ble.n	8012fec <__ssvfiscanf_r+0x64>
 8012fcc:	6823      	ldr	r3, [r4, #0]
 8012fce:	781a      	ldrb	r2, [r3, #0]
 8012fd0:	5cba      	ldrb	r2, [r7, r2]
 8012fd2:	0712      	lsls	r2, r2, #28
 8012fd4:	d401      	bmi.n	8012fda <__ssvfiscanf_r+0x52>
 8012fd6:	462a      	mov	r2, r5
 8012fd8:	e7eb      	b.n	8012fb2 <__ssvfiscanf_r+0x2a>
 8012fda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012fdc:	3201      	adds	r2, #1
 8012fde:	9245      	str	r2, [sp, #276]	; 0x114
 8012fe0:	6862      	ldr	r2, [r4, #4]
 8012fe2:	3301      	adds	r3, #1
 8012fe4:	3a01      	subs	r2, #1
 8012fe6:	6062      	str	r2, [r4, #4]
 8012fe8:	6023      	str	r3, [r4, #0]
 8012fea:	e7ec      	b.n	8012fc6 <__ssvfiscanf_r+0x3e>
 8012fec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012fee:	4621      	mov	r1, r4
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	4798      	blx	r3
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	d0e9      	beq.n	8012fcc <__ssvfiscanf_r+0x44>
 8012ff8:	e7ed      	b.n	8012fd6 <__ssvfiscanf_r+0x4e>
 8012ffa:	2b25      	cmp	r3, #37	; 0x25
 8012ffc:	d012      	beq.n	8013024 <__ssvfiscanf_r+0x9c>
 8012ffe:	469a      	mov	sl, r3
 8013000:	6863      	ldr	r3, [r4, #4]
 8013002:	2b00      	cmp	r3, #0
 8013004:	f340 8091 	ble.w	801312a <__ssvfiscanf_r+0x1a2>
 8013008:	6822      	ldr	r2, [r4, #0]
 801300a:	7813      	ldrb	r3, [r2, #0]
 801300c:	4553      	cmp	r3, sl
 801300e:	f040 812e 	bne.w	801326e <__ssvfiscanf_r+0x2e6>
 8013012:	6863      	ldr	r3, [r4, #4]
 8013014:	3b01      	subs	r3, #1
 8013016:	6063      	str	r3, [r4, #4]
 8013018:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801301a:	3201      	adds	r2, #1
 801301c:	3301      	adds	r3, #1
 801301e:	6022      	str	r2, [r4, #0]
 8013020:	9345      	str	r3, [sp, #276]	; 0x114
 8013022:	e7d8      	b.n	8012fd6 <__ssvfiscanf_r+0x4e>
 8013024:	9141      	str	r1, [sp, #260]	; 0x104
 8013026:	9143      	str	r1, [sp, #268]	; 0x10c
 8013028:	7853      	ldrb	r3, [r2, #1]
 801302a:	2b2a      	cmp	r3, #42	; 0x2a
 801302c:	bf02      	ittt	eq
 801302e:	2310      	moveq	r3, #16
 8013030:	1c95      	addeq	r5, r2, #2
 8013032:	9341      	streq	r3, [sp, #260]	; 0x104
 8013034:	220a      	movs	r2, #10
 8013036:	46aa      	mov	sl, r5
 8013038:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801303c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013040:	2b09      	cmp	r3, #9
 8013042:	d91d      	bls.n	8013080 <__ssvfiscanf_r+0xf8>
 8013044:	487e      	ldr	r0, [pc, #504]	; (8013240 <__ssvfiscanf_r+0x2b8>)
 8013046:	2203      	movs	r2, #3
 8013048:	f7ed f8ea 	bl	8000220 <memchr>
 801304c:	b140      	cbz	r0, 8013060 <__ssvfiscanf_r+0xd8>
 801304e:	2301      	movs	r3, #1
 8013050:	eba0 0009 	sub.w	r0, r0, r9
 8013054:	fa03 f000 	lsl.w	r0, r3, r0
 8013058:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801305a:	4318      	orrs	r0, r3
 801305c:	9041      	str	r0, [sp, #260]	; 0x104
 801305e:	4655      	mov	r5, sl
 8013060:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013064:	2b78      	cmp	r3, #120	; 0x78
 8013066:	d806      	bhi.n	8013076 <__ssvfiscanf_r+0xee>
 8013068:	2b57      	cmp	r3, #87	; 0x57
 801306a:	d810      	bhi.n	801308e <__ssvfiscanf_r+0x106>
 801306c:	2b25      	cmp	r3, #37	; 0x25
 801306e:	d0c6      	beq.n	8012ffe <__ssvfiscanf_r+0x76>
 8013070:	d856      	bhi.n	8013120 <__ssvfiscanf_r+0x198>
 8013072:	2b00      	cmp	r3, #0
 8013074:	d064      	beq.n	8013140 <__ssvfiscanf_r+0x1b8>
 8013076:	2303      	movs	r3, #3
 8013078:	9347      	str	r3, [sp, #284]	; 0x11c
 801307a:	230a      	movs	r3, #10
 801307c:	9342      	str	r3, [sp, #264]	; 0x108
 801307e:	e071      	b.n	8013164 <__ssvfiscanf_r+0x1dc>
 8013080:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013082:	fb02 1103 	mla	r1, r2, r3, r1
 8013086:	3930      	subs	r1, #48	; 0x30
 8013088:	9143      	str	r1, [sp, #268]	; 0x10c
 801308a:	4655      	mov	r5, sl
 801308c:	e7d3      	b.n	8013036 <__ssvfiscanf_r+0xae>
 801308e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013092:	2a20      	cmp	r2, #32
 8013094:	d8ef      	bhi.n	8013076 <__ssvfiscanf_r+0xee>
 8013096:	a101      	add	r1, pc, #4	; (adr r1, 801309c <__ssvfiscanf_r+0x114>)
 8013098:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801309c:	0801314f 	.word	0x0801314f
 80130a0:	08013077 	.word	0x08013077
 80130a4:	08013077 	.word	0x08013077
 80130a8:	080131ad 	.word	0x080131ad
 80130ac:	08013077 	.word	0x08013077
 80130b0:	08013077 	.word	0x08013077
 80130b4:	08013077 	.word	0x08013077
 80130b8:	08013077 	.word	0x08013077
 80130bc:	08013077 	.word	0x08013077
 80130c0:	08013077 	.word	0x08013077
 80130c4:	08013077 	.word	0x08013077
 80130c8:	080131c3 	.word	0x080131c3
 80130cc:	08013199 	.word	0x08013199
 80130d0:	08013127 	.word	0x08013127
 80130d4:	08013127 	.word	0x08013127
 80130d8:	08013127 	.word	0x08013127
 80130dc:	08013077 	.word	0x08013077
 80130e0:	0801319d 	.word	0x0801319d
 80130e4:	08013077 	.word	0x08013077
 80130e8:	08013077 	.word	0x08013077
 80130ec:	08013077 	.word	0x08013077
 80130f0:	08013077 	.word	0x08013077
 80130f4:	080131d3 	.word	0x080131d3
 80130f8:	080131a5 	.word	0x080131a5
 80130fc:	08013147 	.word	0x08013147
 8013100:	08013077 	.word	0x08013077
 8013104:	08013077 	.word	0x08013077
 8013108:	080131cf 	.word	0x080131cf
 801310c:	08013077 	.word	0x08013077
 8013110:	08013199 	.word	0x08013199
 8013114:	08013077 	.word	0x08013077
 8013118:	08013077 	.word	0x08013077
 801311c:	0801314f 	.word	0x0801314f
 8013120:	3b45      	subs	r3, #69	; 0x45
 8013122:	2b02      	cmp	r3, #2
 8013124:	d8a7      	bhi.n	8013076 <__ssvfiscanf_r+0xee>
 8013126:	2305      	movs	r3, #5
 8013128:	e01b      	b.n	8013162 <__ssvfiscanf_r+0x1da>
 801312a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801312c:	4621      	mov	r1, r4
 801312e:	4630      	mov	r0, r6
 8013130:	4798      	blx	r3
 8013132:	2800      	cmp	r0, #0
 8013134:	f43f af68 	beq.w	8013008 <__ssvfiscanf_r+0x80>
 8013138:	9844      	ldr	r0, [sp, #272]	; 0x110
 801313a:	2800      	cmp	r0, #0
 801313c:	f040 808d 	bne.w	801325a <__ssvfiscanf_r+0x2d2>
 8013140:	f04f 30ff 	mov.w	r0, #4294967295
 8013144:	e08f      	b.n	8013266 <__ssvfiscanf_r+0x2de>
 8013146:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013148:	f042 0220 	orr.w	r2, r2, #32
 801314c:	9241      	str	r2, [sp, #260]	; 0x104
 801314e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013154:	9241      	str	r2, [sp, #260]	; 0x104
 8013156:	2210      	movs	r2, #16
 8013158:	2b6f      	cmp	r3, #111	; 0x6f
 801315a:	9242      	str	r2, [sp, #264]	; 0x108
 801315c:	bf34      	ite	cc
 801315e:	2303      	movcc	r3, #3
 8013160:	2304      	movcs	r3, #4
 8013162:	9347      	str	r3, [sp, #284]	; 0x11c
 8013164:	6863      	ldr	r3, [r4, #4]
 8013166:	2b00      	cmp	r3, #0
 8013168:	dd42      	ble.n	80131f0 <__ssvfiscanf_r+0x268>
 801316a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801316c:	0659      	lsls	r1, r3, #25
 801316e:	d404      	bmi.n	801317a <__ssvfiscanf_r+0x1f2>
 8013170:	6823      	ldr	r3, [r4, #0]
 8013172:	781a      	ldrb	r2, [r3, #0]
 8013174:	5cba      	ldrb	r2, [r7, r2]
 8013176:	0712      	lsls	r2, r2, #28
 8013178:	d441      	bmi.n	80131fe <__ssvfiscanf_r+0x276>
 801317a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801317c:	2b02      	cmp	r3, #2
 801317e:	dc50      	bgt.n	8013222 <__ssvfiscanf_r+0x29a>
 8013180:	466b      	mov	r3, sp
 8013182:	4622      	mov	r2, r4
 8013184:	a941      	add	r1, sp, #260	; 0x104
 8013186:	4630      	mov	r0, r6
 8013188:	f000 f9d0 	bl	801352c <_scanf_chars>
 801318c:	2801      	cmp	r0, #1
 801318e:	d06e      	beq.n	801326e <__ssvfiscanf_r+0x2e6>
 8013190:	2802      	cmp	r0, #2
 8013192:	f47f af20 	bne.w	8012fd6 <__ssvfiscanf_r+0x4e>
 8013196:	e7cf      	b.n	8013138 <__ssvfiscanf_r+0x1b0>
 8013198:	220a      	movs	r2, #10
 801319a:	e7dd      	b.n	8013158 <__ssvfiscanf_r+0x1d0>
 801319c:	2300      	movs	r3, #0
 801319e:	9342      	str	r3, [sp, #264]	; 0x108
 80131a0:	2303      	movs	r3, #3
 80131a2:	e7de      	b.n	8013162 <__ssvfiscanf_r+0x1da>
 80131a4:	2308      	movs	r3, #8
 80131a6:	9342      	str	r3, [sp, #264]	; 0x108
 80131a8:	2304      	movs	r3, #4
 80131aa:	e7da      	b.n	8013162 <__ssvfiscanf_r+0x1da>
 80131ac:	4629      	mov	r1, r5
 80131ae:	4640      	mov	r0, r8
 80131b0:	f000 fb3a 	bl	8013828 <__sccl>
 80131b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80131b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131ba:	9341      	str	r3, [sp, #260]	; 0x104
 80131bc:	4605      	mov	r5, r0
 80131be:	2301      	movs	r3, #1
 80131c0:	e7cf      	b.n	8013162 <__ssvfiscanf_r+0x1da>
 80131c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80131c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131c8:	9341      	str	r3, [sp, #260]	; 0x104
 80131ca:	2300      	movs	r3, #0
 80131cc:	e7c9      	b.n	8013162 <__ssvfiscanf_r+0x1da>
 80131ce:	2302      	movs	r3, #2
 80131d0:	e7c7      	b.n	8013162 <__ssvfiscanf_r+0x1da>
 80131d2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80131d4:	06c3      	lsls	r3, r0, #27
 80131d6:	f53f aefe 	bmi.w	8012fd6 <__ssvfiscanf_r+0x4e>
 80131da:	9b00      	ldr	r3, [sp, #0]
 80131dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80131de:	1d19      	adds	r1, r3, #4
 80131e0:	9100      	str	r1, [sp, #0]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f010 0f01 	tst.w	r0, #1
 80131e8:	bf14      	ite	ne
 80131ea:	801a      	strhne	r2, [r3, #0]
 80131ec:	601a      	streq	r2, [r3, #0]
 80131ee:	e6f2      	b.n	8012fd6 <__ssvfiscanf_r+0x4e>
 80131f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80131f2:	4621      	mov	r1, r4
 80131f4:	4630      	mov	r0, r6
 80131f6:	4798      	blx	r3
 80131f8:	2800      	cmp	r0, #0
 80131fa:	d0b6      	beq.n	801316a <__ssvfiscanf_r+0x1e2>
 80131fc:	e79c      	b.n	8013138 <__ssvfiscanf_r+0x1b0>
 80131fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013200:	3201      	adds	r2, #1
 8013202:	9245      	str	r2, [sp, #276]	; 0x114
 8013204:	6862      	ldr	r2, [r4, #4]
 8013206:	3a01      	subs	r2, #1
 8013208:	2a00      	cmp	r2, #0
 801320a:	6062      	str	r2, [r4, #4]
 801320c:	dd02      	ble.n	8013214 <__ssvfiscanf_r+0x28c>
 801320e:	3301      	adds	r3, #1
 8013210:	6023      	str	r3, [r4, #0]
 8013212:	e7ad      	b.n	8013170 <__ssvfiscanf_r+0x1e8>
 8013214:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013216:	4621      	mov	r1, r4
 8013218:	4630      	mov	r0, r6
 801321a:	4798      	blx	r3
 801321c:	2800      	cmp	r0, #0
 801321e:	d0a7      	beq.n	8013170 <__ssvfiscanf_r+0x1e8>
 8013220:	e78a      	b.n	8013138 <__ssvfiscanf_r+0x1b0>
 8013222:	2b04      	cmp	r3, #4
 8013224:	dc0e      	bgt.n	8013244 <__ssvfiscanf_r+0x2bc>
 8013226:	466b      	mov	r3, sp
 8013228:	4622      	mov	r2, r4
 801322a:	a941      	add	r1, sp, #260	; 0x104
 801322c:	4630      	mov	r0, r6
 801322e:	f000 f9d7 	bl	80135e0 <_scanf_i>
 8013232:	e7ab      	b.n	801318c <__ssvfiscanf_r+0x204>
 8013234:	08012ed5 	.word	0x08012ed5
 8013238:	08012f4f 	.word	0x08012f4f
 801323c:	08014921 	.word	0x08014921
 8013240:	08014d7a 	.word	0x08014d7a
 8013244:	4b0b      	ldr	r3, [pc, #44]	; (8013274 <__ssvfiscanf_r+0x2ec>)
 8013246:	2b00      	cmp	r3, #0
 8013248:	f43f aec5 	beq.w	8012fd6 <__ssvfiscanf_r+0x4e>
 801324c:	466b      	mov	r3, sp
 801324e:	4622      	mov	r2, r4
 8013250:	a941      	add	r1, sp, #260	; 0x104
 8013252:	4630      	mov	r0, r6
 8013254:	f7fb ffe0 	bl	800f218 <_scanf_float>
 8013258:	e798      	b.n	801318c <__ssvfiscanf_r+0x204>
 801325a:	89a3      	ldrh	r3, [r4, #12]
 801325c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013260:	bf18      	it	ne
 8013262:	f04f 30ff 	movne.w	r0, #4294967295
 8013266:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801326a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801326e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013270:	e7f9      	b.n	8013266 <__ssvfiscanf_r+0x2de>
 8013272:	bf00      	nop
 8013274:	0800f219 	.word	0x0800f219

08013278 <__sfputc_r>:
 8013278:	6893      	ldr	r3, [r2, #8]
 801327a:	3b01      	subs	r3, #1
 801327c:	2b00      	cmp	r3, #0
 801327e:	b410      	push	{r4}
 8013280:	6093      	str	r3, [r2, #8]
 8013282:	da08      	bge.n	8013296 <__sfputc_r+0x1e>
 8013284:	6994      	ldr	r4, [r2, #24]
 8013286:	42a3      	cmp	r3, r4
 8013288:	db01      	blt.n	801328e <__sfputc_r+0x16>
 801328a:	290a      	cmp	r1, #10
 801328c:	d103      	bne.n	8013296 <__sfputc_r+0x1e>
 801328e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013292:	f7fd b9ed 	b.w	8010670 <__swbuf_r>
 8013296:	6813      	ldr	r3, [r2, #0]
 8013298:	1c58      	adds	r0, r3, #1
 801329a:	6010      	str	r0, [r2, #0]
 801329c:	7019      	strb	r1, [r3, #0]
 801329e:	4608      	mov	r0, r1
 80132a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132a4:	4770      	bx	lr

080132a6 <__sfputs_r>:
 80132a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132a8:	4606      	mov	r6, r0
 80132aa:	460f      	mov	r7, r1
 80132ac:	4614      	mov	r4, r2
 80132ae:	18d5      	adds	r5, r2, r3
 80132b0:	42ac      	cmp	r4, r5
 80132b2:	d101      	bne.n	80132b8 <__sfputs_r+0x12>
 80132b4:	2000      	movs	r0, #0
 80132b6:	e007      	b.n	80132c8 <__sfputs_r+0x22>
 80132b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132bc:	463a      	mov	r2, r7
 80132be:	4630      	mov	r0, r6
 80132c0:	f7ff ffda 	bl	8013278 <__sfputc_r>
 80132c4:	1c43      	adds	r3, r0, #1
 80132c6:	d1f3      	bne.n	80132b0 <__sfputs_r+0xa>
 80132c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080132cc <_vfiprintf_r>:
 80132cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d0:	460d      	mov	r5, r1
 80132d2:	b09d      	sub	sp, #116	; 0x74
 80132d4:	4614      	mov	r4, r2
 80132d6:	4698      	mov	r8, r3
 80132d8:	4606      	mov	r6, r0
 80132da:	b118      	cbz	r0, 80132e4 <_vfiprintf_r+0x18>
 80132dc:	6983      	ldr	r3, [r0, #24]
 80132de:	b90b      	cbnz	r3, 80132e4 <_vfiprintf_r+0x18>
 80132e0:	f7fe fa3e 	bl	8011760 <__sinit>
 80132e4:	4b89      	ldr	r3, [pc, #548]	; (801350c <_vfiprintf_r+0x240>)
 80132e6:	429d      	cmp	r5, r3
 80132e8:	d11b      	bne.n	8013322 <_vfiprintf_r+0x56>
 80132ea:	6875      	ldr	r5, [r6, #4]
 80132ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132ee:	07d9      	lsls	r1, r3, #31
 80132f0:	d405      	bmi.n	80132fe <_vfiprintf_r+0x32>
 80132f2:	89ab      	ldrh	r3, [r5, #12]
 80132f4:	059a      	lsls	r2, r3, #22
 80132f6:	d402      	bmi.n	80132fe <_vfiprintf_r+0x32>
 80132f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132fa:	f7fe fe42 	bl	8011f82 <__retarget_lock_acquire_recursive>
 80132fe:	89ab      	ldrh	r3, [r5, #12]
 8013300:	071b      	lsls	r3, r3, #28
 8013302:	d501      	bpl.n	8013308 <_vfiprintf_r+0x3c>
 8013304:	692b      	ldr	r3, [r5, #16]
 8013306:	b9eb      	cbnz	r3, 8013344 <_vfiprintf_r+0x78>
 8013308:	4629      	mov	r1, r5
 801330a:	4630      	mov	r0, r6
 801330c:	f7fd fa14 	bl	8010738 <__swsetup_r>
 8013310:	b1c0      	cbz	r0, 8013344 <_vfiprintf_r+0x78>
 8013312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013314:	07dc      	lsls	r4, r3, #31
 8013316:	d50e      	bpl.n	8013336 <_vfiprintf_r+0x6a>
 8013318:	f04f 30ff 	mov.w	r0, #4294967295
 801331c:	b01d      	add	sp, #116	; 0x74
 801331e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013322:	4b7b      	ldr	r3, [pc, #492]	; (8013510 <_vfiprintf_r+0x244>)
 8013324:	429d      	cmp	r5, r3
 8013326:	d101      	bne.n	801332c <_vfiprintf_r+0x60>
 8013328:	68b5      	ldr	r5, [r6, #8]
 801332a:	e7df      	b.n	80132ec <_vfiprintf_r+0x20>
 801332c:	4b79      	ldr	r3, [pc, #484]	; (8013514 <_vfiprintf_r+0x248>)
 801332e:	429d      	cmp	r5, r3
 8013330:	bf08      	it	eq
 8013332:	68f5      	ldreq	r5, [r6, #12]
 8013334:	e7da      	b.n	80132ec <_vfiprintf_r+0x20>
 8013336:	89ab      	ldrh	r3, [r5, #12]
 8013338:	0598      	lsls	r0, r3, #22
 801333a:	d4ed      	bmi.n	8013318 <_vfiprintf_r+0x4c>
 801333c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801333e:	f7fe fe21 	bl	8011f84 <__retarget_lock_release_recursive>
 8013342:	e7e9      	b.n	8013318 <_vfiprintf_r+0x4c>
 8013344:	2300      	movs	r3, #0
 8013346:	9309      	str	r3, [sp, #36]	; 0x24
 8013348:	2320      	movs	r3, #32
 801334a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801334e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013352:	2330      	movs	r3, #48	; 0x30
 8013354:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013518 <_vfiprintf_r+0x24c>
 8013358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801335c:	f04f 0901 	mov.w	r9, #1
 8013360:	4623      	mov	r3, r4
 8013362:	469a      	mov	sl, r3
 8013364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013368:	b10a      	cbz	r2, 801336e <_vfiprintf_r+0xa2>
 801336a:	2a25      	cmp	r2, #37	; 0x25
 801336c:	d1f9      	bne.n	8013362 <_vfiprintf_r+0x96>
 801336e:	ebba 0b04 	subs.w	fp, sl, r4
 8013372:	d00b      	beq.n	801338c <_vfiprintf_r+0xc0>
 8013374:	465b      	mov	r3, fp
 8013376:	4622      	mov	r2, r4
 8013378:	4629      	mov	r1, r5
 801337a:	4630      	mov	r0, r6
 801337c:	f7ff ff93 	bl	80132a6 <__sfputs_r>
 8013380:	3001      	adds	r0, #1
 8013382:	f000 80aa 	beq.w	80134da <_vfiprintf_r+0x20e>
 8013386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013388:	445a      	add	r2, fp
 801338a:	9209      	str	r2, [sp, #36]	; 0x24
 801338c:	f89a 3000 	ldrb.w	r3, [sl]
 8013390:	2b00      	cmp	r3, #0
 8013392:	f000 80a2 	beq.w	80134da <_vfiprintf_r+0x20e>
 8013396:	2300      	movs	r3, #0
 8013398:	f04f 32ff 	mov.w	r2, #4294967295
 801339c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133a0:	f10a 0a01 	add.w	sl, sl, #1
 80133a4:	9304      	str	r3, [sp, #16]
 80133a6:	9307      	str	r3, [sp, #28]
 80133a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133ac:	931a      	str	r3, [sp, #104]	; 0x68
 80133ae:	4654      	mov	r4, sl
 80133b0:	2205      	movs	r2, #5
 80133b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133b6:	4858      	ldr	r0, [pc, #352]	; (8013518 <_vfiprintf_r+0x24c>)
 80133b8:	f7ec ff32 	bl	8000220 <memchr>
 80133bc:	9a04      	ldr	r2, [sp, #16]
 80133be:	b9d8      	cbnz	r0, 80133f8 <_vfiprintf_r+0x12c>
 80133c0:	06d1      	lsls	r1, r2, #27
 80133c2:	bf44      	itt	mi
 80133c4:	2320      	movmi	r3, #32
 80133c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133ca:	0713      	lsls	r3, r2, #28
 80133cc:	bf44      	itt	mi
 80133ce:	232b      	movmi	r3, #43	; 0x2b
 80133d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133d4:	f89a 3000 	ldrb.w	r3, [sl]
 80133d8:	2b2a      	cmp	r3, #42	; 0x2a
 80133da:	d015      	beq.n	8013408 <_vfiprintf_r+0x13c>
 80133dc:	9a07      	ldr	r2, [sp, #28]
 80133de:	4654      	mov	r4, sl
 80133e0:	2000      	movs	r0, #0
 80133e2:	f04f 0c0a 	mov.w	ip, #10
 80133e6:	4621      	mov	r1, r4
 80133e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133ec:	3b30      	subs	r3, #48	; 0x30
 80133ee:	2b09      	cmp	r3, #9
 80133f0:	d94e      	bls.n	8013490 <_vfiprintf_r+0x1c4>
 80133f2:	b1b0      	cbz	r0, 8013422 <_vfiprintf_r+0x156>
 80133f4:	9207      	str	r2, [sp, #28]
 80133f6:	e014      	b.n	8013422 <_vfiprintf_r+0x156>
 80133f8:	eba0 0308 	sub.w	r3, r0, r8
 80133fc:	fa09 f303 	lsl.w	r3, r9, r3
 8013400:	4313      	orrs	r3, r2
 8013402:	9304      	str	r3, [sp, #16]
 8013404:	46a2      	mov	sl, r4
 8013406:	e7d2      	b.n	80133ae <_vfiprintf_r+0xe2>
 8013408:	9b03      	ldr	r3, [sp, #12]
 801340a:	1d19      	adds	r1, r3, #4
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	9103      	str	r1, [sp, #12]
 8013410:	2b00      	cmp	r3, #0
 8013412:	bfbb      	ittet	lt
 8013414:	425b      	neglt	r3, r3
 8013416:	f042 0202 	orrlt.w	r2, r2, #2
 801341a:	9307      	strge	r3, [sp, #28]
 801341c:	9307      	strlt	r3, [sp, #28]
 801341e:	bfb8      	it	lt
 8013420:	9204      	strlt	r2, [sp, #16]
 8013422:	7823      	ldrb	r3, [r4, #0]
 8013424:	2b2e      	cmp	r3, #46	; 0x2e
 8013426:	d10c      	bne.n	8013442 <_vfiprintf_r+0x176>
 8013428:	7863      	ldrb	r3, [r4, #1]
 801342a:	2b2a      	cmp	r3, #42	; 0x2a
 801342c:	d135      	bne.n	801349a <_vfiprintf_r+0x1ce>
 801342e:	9b03      	ldr	r3, [sp, #12]
 8013430:	1d1a      	adds	r2, r3, #4
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	9203      	str	r2, [sp, #12]
 8013436:	2b00      	cmp	r3, #0
 8013438:	bfb8      	it	lt
 801343a:	f04f 33ff 	movlt.w	r3, #4294967295
 801343e:	3402      	adds	r4, #2
 8013440:	9305      	str	r3, [sp, #20]
 8013442:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013528 <_vfiprintf_r+0x25c>
 8013446:	7821      	ldrb	r1, [r4, #0]
 8013448:	2203      	movs	r2, #3
 801344a:	4650      	mov	r0, sl
 801344c:	f7ec fee8 	bl	8000220 <memchr>
 8013450:	b140      	cbz	r0, 8013464 <_vfiprintf_r+0x198>
 8013452:	2340      	movs	r3, #64	; 0x40
 8013454:	eba0 000a 	sub.w	r0, r0, sl
 8013458:	fa03 f000 	lsl.w	r0, r3, r0
 801345c:	9b04      	ldr	r3, [sp, #16]
 801345e:	4303      	orrs	r3, r0
 8013460:	3401      	adds	r4, #1
 8013462:	9304      	str	r3, [sp, #16]
 8013464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013468:	482c      	ldr	r0, [pc, #176]	; (801351c <_vfiprintf_r+0x250>)
 801346a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801346e:	2206      	movs	r2, #6
 8013470:	f7ec fed6 	bl	8000220 <memchr>
 8013474:	2800      	cmp	r0, #0
 8013476:	d03f      	beq.n	80134f8 <_vfiprintf_r+0x22c>
 8013478:	4b29      	ldr	r3, [pc, #164]	; (8013520 <_vfiprintf_r+0x254>)
 801347a:	bb1b      	cbnz	r3, 80134c4 <_vfiprintf_r+0x1f8>
 801347c:	9b03      	ldr	r3, [sp, #12]
 801347e:	3307      	adds	r3, #7
 8013480:	f023 0307 	bic.w	r3, r3, #7
 8013484:	3308      	adds	r3, #8
 8013486:	9303      	str	r3, [sp, #12]
 8013488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801348a:	443b      	add	r3, r7
 801348c:	9309      	str	r3, [sp, #36]	; 0x24
 801348e:	e767      	b.n	8013360 <_vfiprintf_r+0x94>
 8013490:	fb0c 3202 	mla	r2, ip, r2, r3
 8013494:	460c      	mov	r4, r1
 8013496:	2001      	movs	r0, #1
 8013498:	e7a5      	b.n	80133e6 <_vfiprintf_r+0x11a>
 801349a:	2300      	movs	r3, #0
 801349c:	3401      	adds	r4, #1
 801349e:	9305      	str	r3, [sp, #20]
 80134a0:	4619      	mov	r1, r3
 80134a2:	f04f 0c0a 	mov.w	ip, #10
 80134a6:	4620      	mov	r0, r4
 80134a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134ac:	3a30      	subs	r2, #48	; 0x30
 80134ae:	2a09      	cmp	r2, #9
 80134b0:	d903      	bls.n	80134ba <_vfiprintf_r+0x1ee>
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d0c5      	beq.n	8013442 <_vfiprintf_r+0x176>
 80134b6:	9105      	str	r1, [sp, #20]
 80134b8:	e7c3      	b.n	8013442 <_vfiprintf_r+0x176>
 80134ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80134be:	4604      	mov	r4, r0
 80134c0:	2301      	movs	r3, #1
 80134c2:	e7f0      	b.n	80134a6 <_vfiprintf_r+0x1da>
 80134c4:	ab03      	add	r3, sp, #12
 80134c6:	9300      	str	r3, [sp, #0]
 80134c8:	462a      	mov	r2, r5
 80134ca:	4b16      	ldr	r3, [pc, #88]	; (8013524 <_vfiprintf_r+0x258>)
 80134cc:	a904      	add	r1, sp, #16
 80134ce:	4630      	mov	r0, r6
 80134d0:	f7fb fad8 	bl	800ea84 <_printf_float>
 80134d4:	4607      	mov	r7, r0
 80134d6:	1c78      	adds	r0, r7, #1
 80134d8:	d1d6      	bne.n	8013488 <_vfiprintf_r+0x1bc>
 80134da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134dc:	07d9      	lsls	r1, r3, #31
 80134de:	d405      	bmi.n	80134ec <_vfiprintf_r+0x220>
 80134e0:	89ab      	ldrh	r3, [r5, #12]
 80134e2:	059a      	lsls	r2, r3, #22
 80134e4:	d402      	bmi.n	80134ec <_vfiprintf_r+0x220>
 80134e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134e8:	f7fe fd4c 	bl	8011f84 <__retarget_lock_release_recursive>
 80134ec:	89ab      	ldrh	r3, [r5, #12]
 80134ee:	065b      	lsls	r3, r3, #25
 80134f0:	f53f af12 	bmi.w	8013318 <_vfiprintf_r+0x4c>
 80134f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134f6:	e711      	b.n	801331c <_vfiprintf_r+0x50>
 80134f8:	ab03      	add	r3, sp, #12
 80134fa:	9300      	str	r3, [sp, #0]
 80134fc:	462a      	mov	r2, r5
 80134fe:	4b09      	ldr	r3, [pc, #36]	; (8013524 <_vfiprintf_r+0x258>)
 8013500:	a904      	add	r1, sp, #16
 8013502:	4630      	mov	r0, r6
 8013504:	f7fb fd62 	bl	800efcc <_printf_i>
 8013508:	e7e4      	b.n	80134d4 <_vfiprintf_r+0x208>
 801350a:	bf00      	nop
 801350c:	08014b60 	.word	0x08014b60
 8013510:	08014b80 	.word	0x08014b80
 8013514:	08014b40 	.word	0x08014b40
 8013518:	08014d74 	.word	0x08014d74
 801351c:	08014d7e 	.word	0x08014d7e
 8013520:	0800ea85 	.word	0x0800ea85
 8013524:	080132a7 	.word	0x080132a7
 8013528:	08014d7a 	.word	0x08014d7a

0801352c <_scanf_chars>:
 801352c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013530:	4615      	mov	r5, r2
 8013532:	688a      	ldr	r2, [r1, #8]
 8013534:	4680      	mov	r8, r0
 8013536:	460c      	mov	r4, r1
 8013538:	b932      	cbnz	r2, 8013548 <_scanf_chars+0x1c>
 801353a:	698a      	ldr	r2, [r1, #24]
 801353c:	2a00      	cmp	r2, #0
 801353e:	bf0c      	ite	eq
 8013540:	2201      	moveq	r2, #1
 8013542:	f04f 32ff 	movne.w	r2, #4294967295
 8013546:	608a      	str	r2, [r1, #8]
 8013548:	6822      	ldr	r2, [r4, #0]
 801354a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80135dc <_scanf_chars+0xb0>
 801354e:	06d1      	lsls	r1, r2, #27
 8013550:	bf5f      	itttt	pl
 8013552:	681a      	ldrpl	r2, [r3, #0]
 8013554:	1d11      	addpl	r1, r2, #4
 8013556:	6019      	strpl	r1, [r3, #0]
 8013558:	6816      	ldrpl	r6, [r2, #0]
 801355a:	2700      	movs	r7, #0
 801355c:	69a0      	ldr	r0, [r4, #24]
 801355e:	b188      	cbz	r0, 8013584 <_scanf_chars+0x58>
 8013560:	2801      	cmp	r0, #1
 8013562:	d107      	bne.n	8013574 <_scanf_chars+0x48>
 8013564:	682a      	ldr	r2, [r5, #0]
 8013566:	7811      	ldrb	r1, [r2, #0]
 8013568:	6962      	ldr	r2, [r4, #20]
 801356a:	5c52      	ldrb	r2, [r2, r1]
 801356c:	b952      	cbnz	r2, 8013584 <_scanf_chars+0x58>
 801356e:	2f00      	cmp	r7, #0
 8013570:	d031      	beq.n	80135d6 <_scanf_chars+0xaa>
 8013572:	e022      	b.n	80135ba <_scanf_chars+0x8e>
 8013574:	2802      	cmp	r0, #2
 8013576:	d120      	bne.n	80135ba <_scanf_chars+0x8e>
 8013578:	682b      	ldr	r3, [r5, #0]
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013580:	071b      	lsls	r3, r3, #28
 8013582:	d41a      	bmi.n	80135ba <_scanf_chars+0x8e>
 8013584:	6823      	ldr	r3, [r4, #0]
 8013586:	06da      	lsls	r2, r3, #27
 8013588:	bf5e      	ittt	pl
 801358a:	682b      	ldrpl	r3, [r5, #0]
 801358c:	781b      	ldrbpl	r3, [r3, #0]
 801358e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013592:	682a      	ldr	r2, [r5, #0]
 8013594:	686b      	ldr	r3, [r5, #4]
 8013596:	3201      	adds	r2, #1
 8013598:	602a      	str	r2, [r5, #0]
 801359a:	68a2      	ldr	r2, [r4, #8]
 801359c:	3b01      	subs	r3, #1
 801359e:	3a01      	subs	r2, #1
 80135a0:	606b      	str	r3, [r5, #4]
 80135a2:	3701      	adds	r7, #1
 80135a4:	60a2      	str	r2, [r4, #8]
 80135a6:	b142      	cbz	r2, 80135ba <_scanf_chars+0x8e>
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	dcd7      	bgt.n	801355c <_scanf_chars+0x30>
 80135ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80135b0:	4629      	mov	r1, r5
 80135b2:	4640      	mov	r0, r8
 80135b4:	4798      	blx	r3
 80135b6:	2800      	cmp	r0, #0
 80135b8:	d0d0      	beq.n	801355c <_scanf_chars+0x30>
 80135ba:	6823      	ldr	r3, [r4, #0]
 80135bc:	f013 0310 	ands.w	r3, r3, #16
 80135c0:	d105      	bne.n	80135ce <_scanf_chars+0xa2>
 80135c2:	68e2      	ldr	r2, [r4, #12]
 80135c4:	3201      	adds	r2, #1
 80135c6:	60e2      	str	r2, [r4, #12]
 80135c8:	69a2      	ldr	r2, [r4, #24]
 80135ca:	b102      	cbz	r2, 80135ce <_scanf_chars+0xa2>
 80135cc:	7033      	strb	r3, [r6, #0]
 80135ce:	6923      	ldr	r3, [r4, #16]
 80135d0:	443b      	add	r3, r7
 80135d2:	6123      	str	r3, [r4, #16]
 80135d4:	2000      	movs	r0, #0
 80135d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135da:	bf00      	nop
 80135dc:	08014921 	.word	0x08014921

080135e0 <_scanf_i>:
 80135e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e4:	4698      	mov	r8, r3
 80135e6:	4b76      	ldr	r3, [pc, #472]	; (80137c0 <_scanf_i+0x1e0>)
 80135e8:	460c      	mov	r4, r1
 80135ea:	4682      	mov	sl, r0
 80135ec:	4616      	mov	r6, r2
 80135ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80135f2:	b087      	sub	sp, #28
 80135f4:	ab03      	add	r3, sp, #12
 80135f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80135fa:	4b72      	ldr	r3, [pc, #456]	; (80137c4 <_scanf_i+0x1e4>)
 80135fc:	69a1      	ldr	r1, [r4, #24]
 80135fe:	4a72      	ldr	r2, [pc, #456]	; (80137c8 <_scanf_i+0x1e8>)
 8013600:	2903      	cmp	r1, #3
 8013602:	bf18      	it	ne
 8013604:	461a      	movne	r2, r3
 8013606:	68a3      	ldr	r3, [r4, #8]
 8013608:	9201      	str	r2, [sp, #4]
 801360a:	1e5a      	subs	r2, r3, #1
 801360c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013610:	bf88      	it	hi
 8013612:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013616:	4627      	mov	r7, r4
 8013618:	bf82      	ittt	hi
 801361a:	eb03 0905 	addhi.w	r9, r3, r5
 801361e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013622:	60a3      	strhi	r3, [r4, #8]
 8013624:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013628:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801362c:	bf98      	it	ls
 801362e:	f04f 0900 	movls.w	r9, #0
 8013632:	6023      	str	r3, [r4, #0]
 8013634:	463d      	mov	r5, r7
 8013636:	f04f 0b00 	mov.w	fp, #0
 801363a:	6831      	ldr	r1, [r6, #0]
 801363c:	ab03      	add	r3, sp, #12
 801363e:	7809      	ldrb	r1, [r1, #0]
 8013640:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013644:	2202      	movs	r2, #2
 8013646:	f7ec fdeb 	bl	8000220 <memchr>
 801364a:	b328      	cbz	r0, 8013698 <_scanf_i+0xb8>
 801364c:	f1bb 0f01 	cmp.w	fp, #1
 8013650:	d159      	bne.n	8013706 <_scanf_i+0x126>
 8013652:	6862      	ldr	r2, [r4, #4]
 8013654:	b92a      	cbnz	r2, 8013662 <_scanf_i+0x82>
 8013656:	6822      	ldr	r2, [r4, #0]
 8013658:	2308      	movs	r3, #8
 801365a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801365e:	6063      	str	r3, [r4, #4]
 8013660:	6022      	str	r2, [r4, #0]
 8013662:	6822      	ldr	r2, [r4, #0]
 8013664:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013668:	6022      	str	r2, [r4, #0]
 801366a:	68a2      	ldr	r2, [r4, #8]
 801366c:	1e51      	subs	r1, r2, #1
 801366e:	60a1      	str	r1, [r4, #8]
 8013670:	b192      	cbz	r2, 8013698 <_scanf_i+0xb8>
 8013672:	6832      	ldr	r2, [r6, #0]
 8013674:	1c51      	adds	r1, r2, #1
 8013676:	6031      	str	r1, [r6, #0]
 8013678:	7812      	ldrb	r2, [r2, #0]
 801367a:	f805 2b01 	strb.w	r2, [r5], #1
 801367e:	6872      	ldr	r2, [r6, #4]
 8013680:	3a01      	subs	r2, #1
 8013682:	2a00      	cmp	r2, #0
 8013684:	6072      	str	r2, [r6, #4]
 8013686:	dc07      	bgt.n	8013698 <_scanf_i+0xb8>
 8013688:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801368c:	4631      	mov	r1, r6
 801368e:	4650      	mov	r0, sl
 8013690:	4790      	blx	r2
 8013692:	2800      	cmp	r0, #0
 8013694:	f040 8085 	bne.w	80137a2 <_scanf_i+0x1c2>
 8013698:	f10b 0b01 	add.w	fp, fp, #1
 801369c:	f1bb 0f03 	cmp.w	fp, #3
 80136a0:	d1cb      	bne.n	801363a <_scanf_i+0x5a>
 80136a2:	6863      	ldr	r3, [r4, #4]
 80136a4:	b90b      	cbnz	r3, 80136aa <_scanf_i+0xca>
 80136a6:	230a      	movs	r3, #10
 80136a8:	6063      	str	r3, [r4, #4]
 80136aa:	6863      	ldr	r3, [r4, #4]
 80136ac:	4947      	ldr	r1, [pc, #284]	; (80137cc <_scanf_i+0x1ec>)
 80136ae:	6960      	ldr	r0, [r4, #20]
 80136b0:	1ac9      	subs	r1, r1, r3
 80136b2:	f000 f8b9 	bl	8013828 <__sccl>
 80136b6:	f04f 0b00 	mov.w	fp, #0
 80136ba:	68a3      	ldr	r3, [r4, #8]
 80136bc:	6822      	ldr	r2, [r4, #0]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d03d      	beq.n	801373e <_scanf_i+0x15e>
 80136c2:	6831      	ldr	r1, [r6, #0]
 80136c4:	6960      	ldr	r0, [r4, #20]
 80136c6:	f891 c000 	ldrb.w	ip, [r1]
 80136ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80136ce:	2800      	cmp	r0, #0
 80136d0:	d035      	beq.n	801373e <_scanf_i+0x15e>
 80136d2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80136d6:	d124      	bne.n	8013722 <_scanf_i+0x142>
 80136d8:	0510      	lsls	r0, r2, #20
 80136da:	d522      	bpl.n	8013722 <_scanf_i+0x142>
 80136dc:	f10b 0b01 	add.w	fp, fp, #1
 80136e0:	f1b9 0f00 	cmp.w	r9, #0
 80136e4:	d003      	beq.n	80136ee <_scanf_i+0x10e>
 80136e6:	3301      	adds	r3, #1
 80136e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80136ec:	60a3      	str	r3, [r4, #8]
 80136ee:	6873      	ldr	r3, [r6, #4]
 80136f0:	3b01      	subs	r3, #1
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	6073      	str	r3, [r6, #4]
 80136f6:	dd1b      	ble.n	8013730 <_scanf_i+0x150>
 80136f8:	6833      	ldr	r3, [r6, #0]
 80136fa:	3301      	adds	r3, #1
 80136fc:	6033      	str	r3, [r6, #0]
 80136fe:	68a3      	ldr	r3, [r4, #8]
 8013700:	3b01      	subs	r3, #1
 8013702:	60a3      	str	r3, [r4, #8]
 8013704:	e7d9      	b.n	80136ba <_scanf_i+0xda>
 8013706:	f1bb 0f02 	cmp.w	fp, #2
 801370a:	d1ae      	bne.n	801366a <_scanf_i+0x8a>
 801370c:	6822      	ldr	r2, [r4, #0]
 801370e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013712:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013716:	d1bf      	bne.n	8013698 <_scanf_i+0xb8>
 8013718:	2310      	movs	r3, #16
 801371a:	6063      	str	r3, [r4, #4]
 801371c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013720:	e7a2      	b.n	8013668 <_scanf_i+0x88>
 8013722:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013726:	6022      	str	r2, [r4, #0]
 8013728:	780b      	ldrb	r3, [r1, #0]
 801372a:	f805 3b01 	strb.w	r3, [r5], #1
 801372e:	e7de      	b.n	80136ee <_scanf_i+0x10e>
 8013730:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013734:	4631      	mov	r1, r6
 8013736:	4650      	mov	r0, sl
 8013738:	4798      	blx	r3
 801373a:	2800      	cmp	r0, #0
 801373c:	d0df      	beq.n	80136fe <_scanf_i+0x11e>
 801373e:	6823      	ldr	r3, [r4, #0]
 8013740:	05db      	lsls	r3, r3, #23
 8013742:	d50d      	bpl.n	8013760 <_scanf_i+0x180>
 8013744:	42bd      	cmp	r5, r7
 8013746:	d909      	bls.n	801375c <_scanf_i+0x17c>
 8013748:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801374c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013750:	4632      	mov	r2, r6
 8013752:	4650      	mov	r0, sl
 8013754:	4798      	blx	r3
 8013756:	f105 39ff 	add.w	r9, r5, #4294967295
 801375a:	464d      	mov	r5, r9
 801375c:	42bd      	cmp	r5, r7
 801375e:	d02d      	beq.n	80137bc <_scanf_i+0x1dc>
 8013760:	6822      	ldr	r2, [r4, #0]
 8013762:	f012 0210 	ands.w	r2, r2, #16
 8013766:	d113      	bne.n	8013790 <_scanf_i+0x1b0>
 8013768:	702a      	strb	r2, [r5, #0]
 801376a:	6863      	ldr	r3, [r4, #4]
 801376c:	9e01      	ldr	r6, [sp, #4]
 801376e:	4639      	mov	r1, r7
 8013770:	4650      	mov	r0, sl
 8013772:	47b0      	blx	r6
 8013774:	6821      	ldr	r1, [r4, #0]
 8013776:	f8d8 3000 	ldr.w	r3, [r8]
 801377a:	f011 0f20 	tst.w	r1, #32
 801377e:	d013      	beq.n	80137a8 <_scanf_i+0x1c8>
 8013780:	1d1a      	adds	r2, r3, #4
 8013782:	f8c8 2000 	str.w	r2, [r8]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	6018      	str	r0, [r3, #0]
 801378a:	68e3      	ldr	r3, [r4, #12]
 801378c:	3301      	adds	r3, #1
 801378e:	60e3      	str	r3, [r4, #12]
 8013790:	1bed      	subs	r5, r5, r7
 8013792:	44ab      	add	fp, r5
 8013794:	6925      	ldr	r5, [r4, #16]
 8013796:	445d      	add	r5, fp
 8013798:	6125      	str	r5, [r4, #16]
 801379a:	2000      	movs	r0, #0
 801379c:	b007      	add	sp, #28
 801379e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a2:	f04f 0b00 	mov.w	fp, #0
 80137a6:	e7ca      	b.n	801373e <_scanf_i+0x15e>
 80137a8:	1d1a      	adds	r2, r3, #4
 80137aa:	f8c8 2000 	str.w	r2, [r8]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	f011 0f01 	tst.w	r1, #1
 80137b4:	bf14      	ite	ne
 80137b6:	8018      	strhne	r0, [r3, #0]
 80137b8:	6018      	streq	r0, [r3, #0]
 80137ba:	e7e6      	b.n	801378a <_scanf_i+0x1aa>
 80137bc:	2001      	movs	r0, #1
 80137be:	e7ed      	b.n	801379c <_scanf_i+0x1bc>
 80137c0:	080148fc 	.word	0x080148fc
 80137c4:	080139a5 	.word	0x080139a5
 80137c8:	0801066d 	.word	0x0801066d
 80137cc:	08014d9e 	.word	0x08014d9e

080137d0 <_read_r>:
 80137d0:	b538      	push	{r3, r4, r5, lr}
 80137d2:	4d07      	ldr	r5, [pc, #28]	; (80137f0 <_read_r+0x20>)
 80137d4:	4604      	mov	r4, r0
 80137d6:	4608      	mov	r0, r1
 80137d8:	4611      	mov	r1, r2
 80137da:	2200      	movs	r2, #0
 80137dc:	602a      	str	r2, [r5, #0]
 80137de:	461a      	mov	r2, r3
 80137e0:	f7f0 fcfa 	bl	80041d8 <_read>
 80137e4:	1c43      	adds	r3, r0, #1
 80137e6:	d102      	bne.n	80137ee <_read_r+0x1e>
 80137e8:	682b      	ldr	r3, [r5, #0]
 80137ea:	b103      	cbz	r3, 80137ee <_read_r+0x1e>
 80137ec:	6023      	str	r3, [r4, #0]
 80137ee:	bd38      	pop	{r3, r4, r5, pc}
 80137f0:	2000314c 	.word	0x2000314c
 80137f4:	00000000 	.word	0x00000000

080137f8 <nan>:
 80137f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013800 <nan+0x8>
 80137fc:	4770      	bx	lr
 80137fe:	bf00      	nop
 8013800:	00000000 	.word	0x00000000
 8013804:	7ff80000 	.word	0x7ff80000

08013808 <_sbrk_r>:
 8013808:	b538      	push	{r3, r4, r5, lr}
 801380a:	4d06      	ldr	r5, [pc, #24]	; (8013824 <_sbrk_r+0x1c>)
 801380c:	2300      	movs	r3, #0
 801380e:	4604      	mov	r4, r0
 8013810:	4608      	mov	r0, r1
 8013812:	602b      	str	r3, [r5, #0]
 8013814:	f7f0 fd32 	bl	800427c <_sbrk>
 8013818:	1c43      	adds	r3, r0, #1
 801381a:	d102      	bne.n	8013822 <_sbrk_r+0x1a>
 801381c:	682b      	ldr	r3, [r5, #0]
 801381e:	b103      	cbz	r3, 8013822 <_sbrk_r+0x1a>
 8013820:	6023      	str	r3, [r4, #0]
 8013822:	bd38      	pop	{r3, r4, r5, pc}
 8013824:	2000314c 	.word	0x2000314c

08013828 <__sccl>:
 8013828:	b570      	push	{r4, r5, r6, lr}
 801382a:	780b      	ldrb	r3, [r1, #0]
 801382c:	4604      	mov	r4, r0
 801382e:	2b5e      	cmp	r3, #94	; 0x5e
 8013830:	bf0b      	itete	eq
 8013832:	784b      	ldrbeq	r3, [r1, #1]
 8013834:	1c48      	addne	r0, r1, #1
 8013836:	1c88      	addeq	r0, r1, #2
 8013838:	2200      	movne	r2, #0
 801383a:	bf08      	it	eq
 801383c:	2201      	moveq	r2, #1
 801383e:	1e61      	subs	r1, r4, #1
 8013840:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013844:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013848:	42a9      	cmp	r1, r5
 801384a:	d1fb      	bne.n	8013844 <__sccl+0x1c>
 801384c:	b90b      	cbnz	r3, 8013852 <__sccl+0x2a>
 801384e:	3801      	subs	r0, #1
 8013850:	bd70      	pop	{r4, r5, r6, pc}
 8013852:	f082 0201 	eor.w	r2, r2, #1
 8013856:	54e2      	strb	r2, [r4, r3]
 8013858:	4605      	mov	r5, r0
 801385a:	4628      	mov	r0, r5
 801385c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013860:	292d      	cmp	r1, #45	; 0x2d
 8013862:	d006      	beq.n	8013872 <__sccl+0x4a>
 8013864:	295d      	cmp	r1, #93	; 0x5d
 8013866:	d0f3      	beq.n	8013850 <__sccl+0x28>
 8013868:	b909      	cbnz	r1, 801386e <__sccl+0x46>
 801386a:	4628      	mov	r0, r5
 801386c:	e7f0      	b.n	8013850 <__sccl+0x28>
 801386e:	460b      	mov	r3, r1
 8013870:	e7f1      	b.n	8013856 <__sccl+0x2e>
 8013872:	786e      	ldrb	r6, [r5, #1]
 8013874:	2e5d      	cmp	r6, #93	; 0x5d
 8013876:	d0fa      	beq.n	801386e <__sccl+0x46>
 8013878:	42b3      	cmp	r3, r6
 801387a:	dcf8      	bgt.n	801386e <__sccl+0x46>
 801387c:	3502      	adds	r5, #2
 801387e:	4619      	mov	r1, r3
 8013880:	3101      	adds	r1, #1
 8013882:	428e      	cmp	r6, r1
 8013884:	5462      	strb	r2, [r4, r1]
 8013886:	dcfb      	bgt.n	8013880 <__sccl+0x58>
 8013888:	1af1      	subs	r1, r6, r3
 801388a:	3901      	subs	r1, #1
 801388c:	1c58      	adds	r0, r3, #1
 801388e:	42b3      	cmp	r3, r6
 8013890:	bfa8      	it	ge
 8013892:	2100      	movge	r1, #0
 8013894:	1843      	adds	r3, r0, r1
 8013896:	e7e0      	b.n	801385a <__sccl+0x32>

08013898 <strncmp>:
 8013898:	b510      	push	{r4, lr}
 801389a:	b17a      	cbz	r2, 80138bc <strncmp+0x24>
 801389c:	4603      	mov	r3, r0
 801389e:	3901      	subs	r1, #1
 80138a0:	1884      	adds	r4, r0, r2
 80138a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80138a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80138aa:	4290      	cmp	r0, r2
 80138ac:	d101      	bne.n	80138b2 <strncmp+0x1a>
 80138ae:	42a3      	cmp	r3, r4
 80138b0:	d101      	bne.n	80138b6 <strncmp+0x1e>
 80138b2:	1a80      	subs	r0, r0, r2
 80138b4:	bd10      	pop	{r4, pc}
 80138b6:	2800      	cmp	r0, #0
 80138b8:	d1f3      	bne.n	80138a2 <strncmp+0xa>
 80138ba:	e7fa      	b.n	80138b2 <strncmp+0x1a>
 80138bc:	4610      	mov	r0, r2
 80138be:	e7f9      	b.n	80138b4 <strncmp+0x1c>

080138c0 <_strtoul_l.constprop.0>:
 80138c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138c4:	4f36      	ldr	r7, [pc, #216]	; (80139a0 <_strtoul_l.constprop.0+0xe0>)
 80138c6:	4686      	mov	lr, r0
 80138c8:	460d      	mov	r5, r1
 80138ca:	4628      	mov	r0, r5
 80138cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80138d0:	5de6      	ldrb	r6, [r4, r7]
 80138d2:	f016 0608 	ands.w	r6, r6, #8
 80138d6:	d1f8      	bne.n	80138ca <_strtoul_l.constprop.0+0xa>
 80138d8:	2c2d      	cmp	r4, #45	; 0x2d
 80138da:	d12f      	bne.n	801393c <_strtoul_l.constprop.0+0x7c>
 80138dc:	782c      	ldrb	r4, [r5, #0]
 80138de:	2601      	movs	r6, #1
 80138e0:	1c85      	adds	r5, r0, #2
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d057      	beq.n	8013996 <_strtoul_l.constprop.0+0xd6>
 80138e6:	2b10      	cmp	r3, #16
 80138e8:	d109      	bne.n	80138fe <_strtoul_l.constprop.0+0x3e>
 80138ea:	2c30      	cmp	r4, #48	; 0x30
 80138ec:	d107      	bne.n	80138fe <_strtoul_l.constprop.0+0x3e>
 80138ee:	7828      	ldrb	r0, [r5, #0]
 80138f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80138f4:	2858      	cmp	r0, #88	; 0x58
 80138f6:	d149      	bne.n	801398c <_strtoul_l.constprop.0+0xcc>
 80138f8:	786c      	ldrb	r4, [r5, #1]
 80138fa:	2310      	movs	r3, #16
 80138fc:	3502      	adds	r5, #2
 80138fe:	f04f 38ff 	mov.w	r8, #4294967295
 8013902:	2700      	movs	r7, #0
 8013904:	fbb8 f8f3 	udiv	r8, r8, r3
 8013908:	fb03 f908 	mul.w	r9, r3, r8
 801390c:	ea6f 0909 	mvn.w	r9, r9
 8013910:	4638      	mov	r0, r7
 8013912:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013916:	f1bc 0f09 	cmp.w	ip, #9
 801391a:	d814      	bhi.n	8013946 <_strtoul_l.constprop.0+0x86>
 801391c:	4664      	mov	r4, ip
 801391e:	42a3      	cmp	r3, r4
 8013920:	dd22      	ble.n	8013968 <_strtoul_l.constprop.0+0xa8>
 8013922:	2f00      	cmp	r7, #0
 8013924:	db1d      	blt.n	8013962 <_strtoul_l.constprop.0+0xa2>
 8013926:	4580      	cmp	r8, r0
 8013928:	d31b      	bcc.n	8013962 <_strtoul_l.constprop.0+0xa2>
 801392a:	d101      	bne.n	8013930 <_strtoul_l.constprop.0+0x70>
 801392c:	45a1      	cmp	r9, r4
 801392e:	db18      	blt.n	8013962 <_strtoul_l.constprop.0+0xa2>
 8013930:	fb00 4003 	mla	r0, r0, r3, r4
 8013934:	2701      	movs	r7, #1
 8013936:	f815 4b01 	ldrb.w	r4, [r5], #1
 801393a:	e7ea      	b.n	8013912 <_strtoul_l.constprop.0+0x52>
 801393c:	2c2b      	cmp	r4, #43	; 0x2b
 801393e:	bf04      	itt	eq
 8013940:	782c      	ldrbeq	r4, [r5, #0]
 8013942:	1c85      	addeq	r5, r0, #2
 8013944:	e7cd      	b.n	80138e2 <_strtoul_l.constprop.0+0x22>
 8013946:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801394a:	f1bc 0f19 	cmp.w	ip, #25
 801394e:	d801      	bhi.n	8013954 <_strtoul_l.constprop.0+0x94>
 8013950:	3c37      	subs	r4, #55	; 0x37
 8013952:	e7e4      	b.n	801391e <_strtoul_l.constprop.0+0x5e>
 8013954:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013958:	f1bc 0f19 	cmp.w	ip, #25
 801395c:	d804      	bhi.n	8013968 <_strtoul_l.constprop.0+0xa8>
 801395e:	3c57      	subs	r4, #87	; 0x57
 8013960:	e7dd      	b.n	801391e <_strtoul_l.constprop.0+0x5e>
 8013962:	f04f 37ff 	mov.w	r7, #4294967295
 8013966:	e7e6      	b.n	8013936 <_strtoul_l.constprop.0+0x76>
 8013968:	2f00      	cmp	r7, #0
 801396a:	da07      	bge.n	801397c <_strtoul_l.constprop.0+0xbc>
 801396c:	2322      	movs	r3, #34	; 0x22
 801396e:	f8ce 3000 	str.w	r3, [lr]
 8013972:	f04f 30ff 	mov.w	r0, #4294967295
 8013976:	b932      	cbnz	r2, 8013986 <_strtoul_l.constprop.0+0xc6>
 8013978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801397c:	b106      	cbz	r6, 8013980 <_strtoul_l.constprop.0+0xc0>
 801397e:	4240      	negs	r0, r0
 8013980:	2a00      	cmp	r2, #0
 8013982:	d0f9      	beq.n	8013978 <_strtoul_l.constprop.0+0xb8>
 8013984:	b107      	cbz	r7, 8013988 <_strtoul_l.constprop.0+0xc8>
 8013986:	1e69      	subs	r1, r5, #1
 8013988:	6011      	str	r1, [r2, #0]
 801398a:	e7f5      	b.n	8013978 <_strtoul_l.constprop.0+0xb8>
 801398c:	2430      	movs	r4, #48	; 0x30
 801398e:	2b00      	cmp	r3, #0
 8013990:	d1b5      	bne.n	80138fe <_strtoul_l.constprop.0+0x3e>
 8013992:	2308      	movs	r3, #8
 8013994:	e7b3      	b.n	80138fe <_strtoul_l.constprop.0+0x3e>
 8013996:	2c30      	cmp	r4, #48	; 0x30
 8013998:	d0a9      	beq.n	80138ee <_strtoul_l.constprop.0+0x2e>
 801399a:	230a      	movs	r3, #10
 801399c:	e7af      	b.n	80138fe <_strtoul_l.constprop.0+0x3e>
 801399e:	bf00      	nop
 80139a0:	08014921 	.word	0x08014921

080139a4 <_strtoul_r>:
 80139a4:	f7ff bf8c 	b.w	80138c0 <_strtoul_l.constprop.0>

080139a8 <__submore>:
 80139a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139ac:	460c      	mov	r4, r1
 80139ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80139b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139b4:	4299      	cmp	r1, r3
 80139b6:	d11d      	bne.n	80139f4 <__submore+0x4c>
 80139b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80139bc:	f7ff f8ba 	bl	8012b34 <_malloc_r>
 80139c0:	b918      	cbnz	r0, 80139ca <__submore+0x22>
 80139c2:	f04f 30ff 	mov.w	r0, #4294967295
 80139c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80139ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80139d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80139d4:	6360      	str	r0, [r4, #52]	; 0x34
 80139d6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80139da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80139de:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80139e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80139e6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80139ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80139ee:	6020      	str	r0, [r4, #0]
 80139f0:	2000      	movs	r0, #0
 80139f2:	e7e8      	b.n	80139c6 <__submore+0x1e>
 80139f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80139f6:	0077      	lsls	r7, r6, #1
 80139f8:	463a      	mov	r2, r7
 80139fa:	f000 f87b 	bl	8013af4 <_realloc_r>
 80139fe:	4605      	mov	r5, r0
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d0de      	beq.n	80139c2 <__submore+0x1a>
 8013a04:	eb00 0806 	add.w	r8, r0, r6
 8013a08:	4601      	mov	r1, r0
 8013a0a:	4632      	mov	r2, r6
 8013a0c:	4640      	mov	r0, r8
 8013a0e:	f7fa ff69 	bl	800e8e4 <memcpy>
 8013a12:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013a16:	f8c4 8000 	str.w	r8, [r4]
 8013a1a:	e7e9      	b.n	80139f0 <__submore+0x48>

08013a1c <__ascii_wctomb>:
 8013a1c:	b149      	cbz	r1, 8013a32 <__ascii_wctomb+0x16>
 8013a1e:	2aff      	cmp	r2, #255	; 0xff
 8013a20:	bf85      	ittet	hi
 8013a22:	238a      	movhi	r3, #138	; 0x8a
 8013a24:	6003      	strhi	r3, [r0, #0]
 8013a26:	700a      	strbls	r2, [r1, #0]
 8013a28:	f04f 30ff 	movhi.w	r0, #4294967295
 8013a2c:	bf98      	it	ls
 8013a2e:	2001      	movls	r0, #1
 8013a30:	4770      	bx	lr
 8013a32:	4608      	mov	r0, r1
 8013a34:	4770      	bx	lr
	...

08013a38 <__assert_func>:
 8013a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a3a:	4614      	mov	r4, r2
 8013a3c:	461a      	mov	r2, r3
 8013a3e:	4b09      	ldr	r3, [pc, #36]	; (8013a64 <__assert_func+0x2c>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	4605      	mov	r5, r0
 8013a44:	68d8      	ldr	r0, [r3, #12]
 8013a46:	b14c      	cbz	r4, 8013a5c <__assert_func+0x24>
 8013a48:	4b07      	ldr	r3, [pc, #28]	; (8013a68 <__assert_func+0x30>)
 8013a4a:	9100      	str	r1, [sp, #0]
 8013a4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a50:	4906      	ldr	r1, [pc, #24]	; (8013a6c <__assert_func+0x34>)
 8013a52:	462b      	mov	r3, r5
 8013a54:	f000 f80e 	bl	8013a74 <fiprintf>
 8013a58:	f000 f87b 	bl	8013b52 <abort>
 8013a5c:	4b04      	ldr	r3, [pc, #16]	; (8013a70 <__assert_func+0x38>)
 8013a5e:	461c      	mov	r4, r3
 8013a60:	e7f3      	b.n	8013a4a <__assert_func+0x12>
 8013a62:	bf00      	nop
 8013a64:	20000110 	.word	0x20000110
 8013a68:	08014da0 	.word	0x08014da0
 8013a6c:	08014dad 	.word	0x08014dad
 8013a70:	08014ddb 	.word	0x08014ddb

08013a74 <fiprintf>:
 8013a74:	b40e      	push	{r1, r2, r3}
 8013a76:	b503      	push	{r0, r1, lr}
 8013a78:	4601      	mov	r1, r0
 8013a7a:	ab03      	add	r3, sp, #12
 8013a7c:	4805      	ldr	r0, [pc, #20]	; (8013a94 <fiprintf+0x20>)
 8013a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a82:	6800      	ldr	r0, [r0, #0]
 8013a84:	9301      	str	r3, [sp, #4]
 8013a86:	f7ff fc21 	bl	80132cc <_vfiprintf_r>
 8013a8a:	b002      	add	sp, #8
 8013a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a90:	b003      	add	sp, #12
 8013a92:	4770      	bx	lr
 8013a94:	20000110 	.word	0x20000110

08013a98 <_fstat_r>:
 8013a98:	b538      	push	{r3, r4, r5, lr}
 8013a9a:	4d07      	ldr	r5, [pc, #28]	; (8013ab8 <_fstat_r+0x20>)
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	4604      	mov	r4, r0
 8013aa0:	4608      	mov	r0, r1
 8013aa2:	4611      	mov	r1, r2
 8013aa4:	602b      	str	r3, [r5, #0]
 8013aa6:	f7f0 fbc0 	bl	800422a <_fstat>
 8013aaa:	1c43      	adds	r3, r0, #1
 8013aac:	d102      	bne.n	8013ab4 <_fstat_r+0x1c>
 8013aae:	682b      	ldr	r3, [r5, #0]
 8013ab0:	b103      	cbz	r3, 8013ab4 <_fstat_r+0x1c>
 8013ab2:	6023      	str	r3, [r4, #0]
 8013ab4:	bd38      	pop	{r3, r4, r5, pc}
 8013ab6:	bf00      	nop
 8013ab8:	2000314c 	.word	0x2000314c

08013abc <_isatty_r>:
 8013abc:	b538      	push	{r3, r4, r5, lr}
 8013abe:	4d06      	ldr	r5, [pc, #24]	; (8013ad8 <_isatty_r+0x1c>)
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	4604      	mov	r4, r0
 8013ac4:	4608      	mov	r0, r1
 8013ac6:	602b      	str	r3, [r5, #0]
 8013ac8:	f7f0 fbbf 	bl	800424a <_isatty>
 8013acc:	1c43      	adds	r3, r0, #1
 8013ace:	d102      	bne.n	8013ad6 <_isatty_r+0x1a>
 8013ad0:	682b      	ldr	r3, [r5, #0]
 8013ad2:	b103      	cbz	r3, 8013ad6 <_isatty_r+0x1a>
 8013ad4:	6023      	str	r3, [r4, #0]
 8013ad6:	bd38      	pop	{r3, r4, r5, pc}
 8013ad8:	2000314c 	.word	0x2000314c

08013adc <__malloc_lock>:
 8013adc:	4801      	ldr	r0, [pc, #4]	; (8013ae4 <__malloc_lock+0x8>)
 8013ade:	f7fe ba50 	b.w	8011f82 <__retarget_lock_acquire_recursive>
 8013ae2:	bf00      	nop
 8013ae4:	20003140 	.word	0x20003140

08013ae8 <__malloc_unlock>:
 8013ae8:	4801      	ldr	r0, [pc, #4]	; (8013af0 <__malloc_unlock+0x8>)
 8013aea:	f7fe ba4b 	b.w	8011f84 <__retarget_lock_release_recursive>
 8013aee:	bf00      	nop
 8013af0:	20003140 	.word	0x20003140

08013af4 <_realloc_r>:
 8013af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013af8:	4680      	mov	r8, r0
 8013afa:	4614      	mov	r4, r2
 8013afc:	460e      	mov	r6, r1
 8013afe:	b921      	cbnz	r1, 8013b0a <_realloc_r+0x16>
 8013b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b04:	4611      	mov	r1, r2
 8013b06:	f7ff b815 	b.w	8012b34 <_malloc_r>
 8013b0a:	b92a      	cbnz	r2, 8013b18 <_realloc_r+0x24>
 8013b0c:	f7fe ffa6 	bl	8012a5c <_free_r>
 8013b10:	4625      	mov	r5, r4
 8013b12:	4628      	mov	r0, r5
 8013b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b18:	f000 f822 	bl	8013b60 <_malloc_usable_size_r>
 8013b1c:	4284      	cmp	r4, r0
 8013b1e:	4607      	mov	r7, r0
 8013b20:	d802      	bhi.n	8013b28 <_realloc_r+0x34>
 8013b22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013b26:	d812      	bhi.n	8013b4e <_realloc_r+0x5a>
 8013b28:	4621      	mov	r1, r4
 8013b2a:	4640      	mov	r0, r8
 8013b2c:	f7ff f802 	bl	8012b34 <_malloc_r>
 8013b30:	4605      	mov	r5, r0
 8013b32:	2800      	cmp	r0, #0
 8013b34:	d0ed      	beq.n	8013b12 <_realloc_r+0x1e>
 8013b36:	42bc      	cmp	r4, r7
 8013b38:	4622      	mov	r2, r4
 8013b3a:	4631      	mov	r1, r6
 8013b3c:	bf28      	it	cs
 8013b3e:	463a      	movcs	r2, r7
 8013b40:	f7fa fed0 	bl	800e8e4 <memcpy>
 8013b44:	4631      	mov	r1, r6
 8013b46:	4640      	mov	r0, r8
 8013b48:	f7fe ff88 	bl	8012a5c <_free_r>
 8013b4c:	e7e1      	b.n	8013b12 <_realloc_r+0x1e>
 8013b4e:	4635      	mov	r5, r6
 8013b50:	e7df      	b.n	8013b12 <_realloc_r+0x1e>

08013b52 <abort>:
 8013b52:	b508      	push	{r3, lr}
 8013b54:	2006      	movs	r0, #6
 8013b56:	f000 f833 	bl	8013bc0 <raise>
 8013b5a:	2001      	movs	r0, #1
 8013b5c:	f7f0 fb32 	bl	80041c4 <_exit>

08013b60 <_malloc_usable_size_r>:
 8013b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b64:	1f18      	subs	r0, r3, #4
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	bfbc      	itt	lt
 8013b6a:	580b      	ldrlt	r3, [r1, r0]
 8013b6c:	18c0      	addlt	r0, r0, r3
 8013b6e:	4770      	bx	lr

08013b70 <_raise_r>:
 8013b70:	291f      	cmp	r1, #31
 8013b72:	b538      	push	{r3, r4, r5, lr}
 8013b74:	4604      	mov	r4, r0
 8013b76:	460d      	mov	r5, r1
 8013b78:	d904      	bls.n	8013b84 <_raise_r+0x14>
 8013b7a:	2316      	movs	r3, #22
 8013b7c:	6003      	str	r3, [r0, #0]
 8013b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b82:	bd38      	pop	{r3, r4, r5, pc}
 8013b84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b86:	b112      	cbz	r2, 8013b8e <_raise_r+0x1e>
 8013b88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b8c:	b94b      	cbnz	r3, 8013ba2 <_raise_r+0x32>
 8013b8e:	4620      	mov	r0, r4
 8013b90:	f000 f830 	bl	8013bf4 <_getpid_r>
 8013b94:	462a      	mov	r2, r5
 8013b96:	4601      	mov	r1, r0
 8013b98:	4620      	mov	r0, r4
 8013b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b9e:	f000 b817 	b.w	8013bd0 <_kill_r>
 8013ba2:	2b01      	cmp	r3, #1
 8013ba4:	d00a      	beq.n	8013bbc <_raise_r+0x4c>
 8013ba6:	1c59      	adds	r1, r3, #1
 8013ba8:	d103      	bne.n	8013bb2 <_raise_r+0x42>
 8013baa:	2316      	movs	r3, #22
 8013bac:	6003      	str	r3, [r0, #0]
 8013bae:	2001      	movs	r0, #1
 8013bb0:	e7e7      	b.n	8013b82 <_raise_r+0x12>
 8013bb2:	2400      	movs	r4, #0
 8013bb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013bb8:	4628      	mov	r0, r5
 8013bba:	4798      	blx	r3
 8013bbc:	2000      	movs	r0, #0
 8013bbe:	e7e0      	b.n	8013b82 <_raise_r+0x12>

08013bc0 <raise>:
 8013bc0:	4b02      	ldr	r3, [pc, #8]	; (8013bcc <raise+0xc>)
 8013bc2:	4601      	mov	r1, r0
 8013bc4:	6818      	ldr	r0, [r3, #0]
 8013bc6:	f7ff bfd3 	b.w	8013b70 <_raise_r>
 8013bca:	bf00      	nop
 8013bcc:	20000110 	.word	0x20000110

08013bd0 <_kill_r>:
 8013bd0:	b538      	push	{r3, r4, r5, lr}
 8013bd2:	4d07      	ldr	r5, [pc, #28]	; (8013bf0 <_kill_r+0x20>)
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	4604      	mov	r4, r0
 8013bd8:	4608      	mov	r0, r1
 8013bda:	4611      	mov	r1, r2
 8013bdc:	602b      	str	r3, [r5, #0]
 8013bde:	f7f0 fae1 	bl	80041a4 <_kill>
 8013be2:	1c43      	adds	r3, r0, #1
 8013be4:	d102      	bne.n	8013bec <_kill_r+0x1c>
 8013be6:	682b      	ldr	r3, [r5, #0]
 8013be8:	b103      	cbz	r3, 8013bec <_kill_r+0x1c>
 8013bea:	6023      	str	r3, [r4, #0]
 8013bec:	bd38      	pop	{r3, r4, r5, pc}
 8013bee:	bf00      	nop
 8013bf0:	2000314c 	.word	0x2000314c

08013bf4 <_getpid_r>:
 8013bf4:	f7f0 bace 	b.w	8004194 <_getpid>

08013bf8 <_init>:
 8013bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bfa:	bf00      	nop
 8013bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bfe:	bc08      	pop	{r3}
 8013c00:	469e      	mov	lr, r3
 8013c02:	4770      	bx	lr

08013c04 <_fini>:
 8013c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c06:	bf00      	nop
 8013c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c0a:	bc08      	pop	{r3}
 8013c0c:	469e      	mov	lr, r3
 8013c0e:	4770      	bx	lr
