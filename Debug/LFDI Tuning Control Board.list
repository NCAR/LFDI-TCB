
LFDI Tuning Control Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000197c  08013d38  08013d38  00023d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080156b4  080156b4  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  080156b4  080156b4  000256b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080156bc  080156bc  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080156bc  080156bc  000256bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080156c0  080156c0  000256c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  080156c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302e4  2**0
                  CONTENTS
 10 .bss          00002e68  200002e8  200002e8  000302e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003150  20003150  000302e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000203e7  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cb4  00000000  00000000  000506fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  000553b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f8  00000000  00000000  00056dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029eb3  00000000  00000000  000585d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022e33  00000000  00000000  00082483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0d31  00000000  00000000  000a52b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00185fe7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085e8  00000000  00000000  00186038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013d20 	.word	0x08013d20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	08013d20 	.word	0x08013d20

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <DAC_InitStruct>:
//Reference Voltage scales the Ouput Voltage
float REFERENCE_VOLTAGE = 3.3;


//
void DAC_InitStruct(struct sDAC* s, SPI_HandleTypeDef* hspi){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	
	s->spi = hspi;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	601a      	str	r2, [r3, #0]
	Set_Config(s);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f833 	bl	80010b4 <Set_Config>
	Set_Max_Peak_To_Peak_Voltage(s, 0);
 800104e:	2100      	movs	r1, #0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f99b 	bl	800138c <Set_Max_Peak_To_Peak_Voltage>
	/* USER CODE BEGIN 1 */
	//Set all DAC Channels Up. Should probably be put into TCB init
	for (int i = 0; i < 6; i++){
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e022      	b.n	80010a2 <DAC_InitStruct+0x6a>
		s->DAC_Channels[i].DAC_number = i;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3302      	adds	r3, #2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	460a      	mov	r2, r1
 800106c:	721a      	strb	r2, [r3, #8]
		s->DAC_Channels[i].upper_bound = 0x7FFF;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3302      	adds	r3, #2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800107c:	809a      	strh	r2, [r3, #4]
		s->DAC_Channels[i].lower_bound = 0x7FFF;
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3302      	adds	r3, #2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800108c:	80da      	strh	r2, [r3, #6]
		s->DAC_Channels[i].enabled = true;
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3302      	adds	r3, #2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	2201      	movs	r2, #1
 800109a:	729a      	strb	r2, [r3, #10]
	for (int i = 0; i < 6; i++){
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	ddd9      	ble.n	800105c <DAC_InitStruct+0x24>
	}

}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <Set_Config>:
//@brief: This function will set a configuration value to the configuration register
//@param s: The DAC struct to use
//@return: None
void Set_Config(struct sDAC* s){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uint8_t Data[3] = {0x00, 0x00, 0x00};
 80010bc:	4a30      	ldr	r2, [pc, #192]	; (8001180 <Set_Config+0xcc>)
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	4611      	mov	r1, r2
 80010c6:	8019      	strh	r1, [r3, #0]
 80010c8:	3302      	adds	r3, #2
 80010ca:	0c12      	lsrs	r2, r2, #16
 80010cc:	701a      	strb	r2, [r3, #0]
	uint8_t read_command[3] = {READ|CONFIG, 0x00, 0x00};
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <Set_Config+0xd0>)
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <Set_Config+0xd4>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	743b      	strb	r3, [r7, #16]
 80010dc:	2300      	movs	r3, #0
 80010de:	747b      	strb	r3, [r7, #17]
 80010e0:	2300      	movs	r3, #0
 80010e2:	74bb      	strb	r3, [r7, #18]
	
	Hardware_Reset(s);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f923 	bl	8001330 <Hardware_Reset>
	//Make sure SCE is 0. This will make it so that the DAC will use the Values direclty written to it
	//rather than trying to use the individual offset and gain of each register to re-adjust
	//the value
	//Gain_A = 1 -> gain is set to 4xVref GAIN_A = 0 -> gain is set to 6xVref
	
	uint8_t tx_data[3] = {WRITE|CONFIG, AB, 0x00};
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <Set_Config+0xd8>)
 80010ec:	781a      	ldrb	r2, [r3, #0]
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <Set_Config+0xd4>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	733b      	strb	r3, [r7, #12]
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <Set_Config+0xdc>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	737b      	strb	r3, [r7, #13]
 80010fe:	2300      	movs	r3, #0
 8001100:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f843 	bl	8001194 <Send_Command>
	Send_Command(s, read_command);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f83d 	bl	8001194 <Send_Command>
	Recieve_Data(s, Data);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f85b 	bl	80011dc <Recieve_Data>
	
	//if Data is the same as tx_data then the command was successful
	if(Data[1] == tx_data[1] && Data[2] == tx_data[2]){
 8001126:	7d7a      	ldrb	r2, [r7, #21]
 8001128:	7b7b      	ldrb	r3, [r7, #13]
 800112a:	429a      	cmp	r2, r3
 800112c:	d117      	bne.n	800115e <Set_Config+0xaa>
 800112e:	7dba      	ldrb	r2, [r7, #22]
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	429a      	cmp	r2, r3
 8001134:	d113      	bne.n	800115e <Set_Config+0xaa>
		s->config = (Data[1] << 8) | Data[2];
 8001136:	7d7b      	ldrb	r3, [r7, #21]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7dbb      	ldrb	r3, [r7, #22]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21b      	sxth	r3, r3
 8001144:	b29a      	uxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	809a      	strh	r2, [r3, #4]
		s->Configured = true;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	729a      	strb	r2, [r3, #10]
		s->State = DAC_STATE_OK;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2204      	movs	r2, #4
 8001154:	72da      	strb	r2, [r3, #11]
		s->Ready = true;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	731a      	strb	r2, [r3, #12]
 800115c:	e00c      	b.n	8001178 <Set_Config+0xc4>
	}else{
		s->State = DAC_STATE_INITFAILED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	72da      	strb	r2, [r3, #11]
		s->Ready = false;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	731a      	strb	r2, [r3, #12]
		s->Errors++;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	89db      	ldrh	r3, [r3, #14]
 800116e:	3301      	adds	r3, #1
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	81da      	strh	r2, [r3, #14]
	}
			

}
 8001176:	bf00      	nop
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	08013d38 	.word	0x08013d38
 8001184:	20000000 	.word	0x20000000
 8001188:	20000305 	.word	0x20000305
 800118c:	20000304 	.word	0x20000304
 8001190:	20000002 	.word	0x20000002

08001194 <Send_Command>:
//        The second byte is the MSB of the register
//        The third byte is the LSB of the register
//@param: spi: The spi handle to use
//@param: command: The command to send
//@return: none
void Send_Command(struct sDAC* s, uint8_t* Command){
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f8aa 	bl	80012f8 <Set_nCS_high>
	hal_status = HAL_SPI_Transmit(s->spi, Command, 3, 1);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	f008 f97e 	bl	80094ae <HAL_SPI_Transmit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
	while (!(s->spi->Instance->SR & SPI_SR_TXE));
 80011b6:	bf00      	nop
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f7      	beq.n	80011b8 <Send_Command+0x24>
	Set_nCS_high(true);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f000 f895 	bl	80012f8 <Set_nCS_high>
	Delay_us(10);
 80011ce:	200a      	movs	r0, #10
 80011d0:	f002 f812 	bl	80031f8 <Delay_us>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <Recieve_Data>:

//@brief: This function recieves data from the DAC and stores it in the data array
//@param: spi: The spi handle
//@param: Data: buffer to store the data in
//@return: None
void Recieve_Data(struct sDAC* s, uint8_t* Data){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f886 	bl	80012f8 <Set_nCS_high>
	hal_status = HAL_SPI_TransmitReceive(s->spi,NOP_Send, Data, 3, 100);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2303      	movs	r3, #3
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	490b      	ldr	r1, [pc, #44]	; (8001228 <Recieve_Data+0x4c>)
 80011fa:	f008 fa94 	bl	8009726 <HAL_SPI_TransmitReceive>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
	while ((s->spi->Instance->SR & SPI_SR_RXNE));
 8001202:	bf00      	nop
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f7      	bne.n	8001204 <Recieve_Data+0x28>
	Set_nCS_high(true);
 8001214:	2001      	movs	r0, #1
 8001216:	f000 f86f 	bl	80012f8 <Set_nCS_high>
	Delay_us(10);
 800121a:	200a      	movs	r0, #10
 800121c:	f001 ffec 	bl	80031f8 <Delay_us>

}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000004 	.word	0x20000004

0800122c <Set_DAC_Value>:
//@brief: This function sets the value of the given dac
//@param: DAC_Num: The DAC number to set the offset of
//@param: val: The value to set the dac to
//@param spi: The spi handle to use
//@return: None
void Set_DAC_Value(struct sDAC* s, uint8_t DAC_Num, uint16_t val){
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
 8001238:	4613      	mov	r3, r2
 800123a:	803b      	strh	r3, [r7, #0]
	//Make sure DAC is between 0 and 7
	if(DAC_Num > 7){
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	2b07      	cmp	r3, #7
 8001240:	d819      	bhi.n	8001276 <Set_DAC_Value+0x4a>
		return;
	}
	uint8_t DAC_REG = Set_DAC0+DAC_Num;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <Set_DAC_Value+0x54>)
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	4413      	add	r3, r2
 800124a:	73fb      	strb	r3, [r7, #15]
	//Set the DAC to the correct value by adding the DAC number to the Set_DAC0 command
	uint8_t tx_data[3] = {WRITE|DAC_REG, (val >> 8), (val & 0xFF)};
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <Set_DAC_Value+0x58>)
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	4313      	orrs	r3, r2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	733b      	strb	r3, [r7, #12]
 8001258:	883b      	ldrh	r3, [r7, #0]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	b29b      	uxth	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	737b      	strb	r3, [r7, #13]
 8001262:	883b      	ldrh	r3, [r7, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4619      	mov	r1, r3
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff90 	bl	8001194 <Send_Command>
 8001274:	e000      	b.n	8001278 <Set_DAC_Value+0x4c>
		return;
 8001276:	bf00      	nop
	
}
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000001 	.word	0x20000001
 8001284:	20000304 	.word	0x20000304

08001288 <Set_nLDAC_high>:
}

//@brief: This function sets the nLDAC pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nLDAC_high(bool HIGH){
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <Set_nLDAC_high+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <Set_nLDAC_high+0x34>)
 80012a0:	f003 fc76 	bl	8004b90 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
	}
}
 80012a4:	e005      	b.n	80012b2 <Set_nLDAC_high+0x2a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <Set_nLDAC_high+0x34>)
 80012ae:	f003 fc6f 	bl	8004b90 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020c00 	.word	0x40020c00

080012c0 <Set_nRST_high>:
}

//@brief: This function sets the nRST pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nRST_high(bool HIGH){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <Set_nRST_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <Set_nRST_high+0x34>)
 80012d8:	f003 fc5a 	bl	8004b90 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
	}

}
 80012dc:	e005      	b.n	80012ea <Set_nRST_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <Set_nRST_high+0x34>)
 80012e6:	f003 fc53 	bl	8004b90 <HAL_GPIO_WritePin>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <Set_nCS_high>:
}

//@brief: This function sets the nCS pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nCS_high(bool HIGH){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <Set_nCS_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <Set_nCS_high+0x34>)
 8001310:	f003 fc3e 	bl	8004b90 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
	}

}
 8001314:	e005      	b.n	8001322 <Set_nCS_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <Set_nCS_high+0x34>)
 800131e:	f003 fc37 	bl	8004b90 <HAL_GPIO_WritePin>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <Hardware_Reset>:
	return state;
}


//Reset the DAC Values using the nRST Pin
void Hardware_Reset(struct sDAC* s){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	Set_nRST_high(false);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ffc1 	bl	80012c0 <Set_nRST_high>
	Delay_us(10);
 800133e:	200a      	movs	r0, #10
 8001340:	f001 ff5a 	bl	80031f8 <Delay_us>
	Set_nRST_high(true);
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff ffbb 	bl	80012c0 <Set_nRST_high>
	Delay_us(10);
 800134a:	200a      	movs	r0, #10
 800134c:	f001 ff54 	bl	80031f8 <Delay_us>
	s->State = DAC_STATE_UNKNOWN;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	72da      	strb	r2, [r3, #11]
	s->Ready= false;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	731a      	strb	r2, [r3, #12]
	s->Errors = 0;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	81da      	strh	r2, [r3, #14]
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <Syncronous_Update>:


//Syncronous Update of LDAC using the nLDAC Pin NOTE: Only Needed if nLDAC is tied High
void Syncronous_Update(void){
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
	Set_nLDAC_high(false);
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff ff8a 	bl	8001288 <Set_nLDAC_high>
	Delay_us(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f001 ff3f 	bl	80031f8 <Delay_us>
	Set_nLDAC_high(true);
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff ff84 	bl	8001288 <Set_nLDAC_high>
	Delay_us(10);
 8001380:	200a      	movs	r0, #10
 8001382:	f001 ff39 	bl	80031f8 <Delay_us>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <Set_Max_Peak_To_Peak_Voltage>:


//@brief: This function calculates the max peak to peak voltage that can be achieved
void Set_Max_Peak_To_Peak_Voltage(struct sDAC* s, bool Gain){
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
	//The max Voltage is 11.2V so we need to scale the voltage to fit in 16 bits
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	if(Gain){
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00a      	beq.n	80013b4 <Set_Max_Peak_To_Peak_Voltage+0x28>
		s->max_peak2peak = REFERENCE_VOLTAGE*4;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80013a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edc3 7a04 	vstr	s15, [r3, #16]
	}else
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
	return;
 80013b2:	e00a      	b.n	80013ca <Set_Max_Peak_To_Peak_Voltage+0x3e>
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edc3 7a04 	vstr	s15, [r3, #16]
	return;
 80013c8:	bf00      	nop
}
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20000008 	.word	0x20000008

080013d8 <Set_Voltage_Peak_to_Peak>:

//@brief: This function sets the upper and lower bounds of a DAC Channel
//@param: s: The DAC Channel to set the bounds of
//@param: voltage: The voltage to set the bounds to
void Set_Voltage_Peak_to_Peak(struct sDAC* sDAC, uint8_t Channel_Number, float* voltage){
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	460b      	mov	r3, r1
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	72fb      	strb	r3, [r7, #11]
	//The max Voltage Peak to Peak is 22.4V so we need to scale the voltage to fit in 16 bits
	//Find the upper and lower bounds of the voltage with Zero Bias
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	float percentage = (*voltage/(float)sDAC->max_peak2peak)/2;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edd3 6a00 	vldr	s13, [r3]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80013f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fe:	edc7 7a05 	vstr	s15, [r7, #20]
	sDAC->DAC_Channels[Channel_Number].upper_bound = 0xFFFF/2 + percentage*0xFFFF;
 8001402:	edd7 7a05 	vldr	s15, [r7, #20]
 8001406:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001468 <Set_Voltage_Peak_to_Peak+0x90>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800146c <Set_Voltage_Peak_to_Peak+0x94>
 8001412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141c:	ee17 2a90 	vmov	r2, s15
 8001420:	b291      	uxth	r1, r2
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	3302      	adds	r3, #2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	460a      	mov	r2, r1
 800142c:	809a      	strh	r2, [r3, #4]
	sDAC->DAC_Channels[Channel_Number].lower_bound = 0xFFFF/2 - percentage*0xFFFF;
 800142e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001432:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001468 <Set_Voltage_Peak_to_Peak+0x90>
 8001436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800146c <Set_Voltage_Peak_to_Peak+0x94>
 800143e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001448:	ee17 2a90 	vmov	r2, s15
 800144c:	b291      	uxth	r1, r2
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	3302      	adds	r3, #2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4413      	add	r3, r2
 8001456:	460a      	mov	r2, r1
 8001458:	80da      	strh	r2, [r3, #6]
	return;
 800145a:	bf00      	nop

}
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	477fff00 	.word	0x477fff00
 800146c:	46fffe00 	.word	0x46fffe00

08001470 <PID_InitStruct>:
 */

#include "pid.h"

void PID_InitStruct(struct sPID* s)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->Config.Kp = 0.0f;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
  s->Config.Ki = 0.0f;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
  s->Config.Kd = 0.0f;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
  s->Config.Li = 1.0f;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80014a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014a6:	601a      	str	r2, [r3, #0]
  s->Config.TargetP = -273.0f;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80014ae:	4a22      	ldr	r2, [pc, #136]	; (8001538 <PID_InitStruct+0xc8>)
 80014b0:	601a      	str	r2, [r3, #0]
  s->Config.Enabled = false;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
  s->Config.History = 16;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2210      	movs	r2, #16
 80014be:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
  s->DeltaT = 0.013f;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <PID_InitStruct+0xcc>)
 80014ca:	601a      	str	r2, [r3, #0]
  s->IntegratorCount = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  for (i=0;i<255;i++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	e009      	b.n	80014ee <PID_InitStruct+0x7e>
    s->LastP[i]=0.0f;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
  for (i=0;i<255;i++)
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	3301      	adds	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	2bff      	cmp	r3, #255	; 0xff
 80014f2:	d1f2      	bne.n	80014da <PID_InitStruct+0x6a>
  s->Effort = 0.0f;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
  s->Ep = 0.0f;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
  s->Ei = 0.0f;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
  s->Ed = 0.0f;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
  s->Config.Frequency = 200;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	22c8      	movs	r2, #200	; 0xc8
 8001528:	f8a3 242e 	strh.w	r2, [r3, #1070]	; 0x42e
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	c3888000 	.word	0xc3888000
 800153c:	3c54fdf4 	.word	0x3c54fdf4

08001540 <PID_SavePoint>:

void PID_SavePoint(struct sPID* s, float p)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	ed87 0a00 	vstr	s0, [r7]
  uint8_t i;
  for (i=(s->Config.History-1); i>0; i--)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001552:	3b01      	subs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e00d      	b.n	8001574 <PID_SavePoint+0x34>
    s->LastP[i] = s->LastP[i-1];
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	440a      	add	r2, r1
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	601a      	str	r2, [r3, #0]
  for (i=(s->Config.History-1); i>0; i--)
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	3b01      	subs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ee      	bne.n	8001558 <PID_SavePoint+0x18>
  s->LastP[0] = p;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <PID_SumError>:

float PID_SumError(struct sPID* s)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->IntegratorCount++;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800159a:	3301      	adds	r3, #1
 800159c:	b2da      	uxtb	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  if (s->IntegratorCount < s->Config.History)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d202      	bcs.n	80015ba <PID_SumError+0x2e>
    return 0;
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	e05b      	b.n	8001672 <PID_SumError+0xe6>
  else
    s->IntegratorCount = s->Config.History;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 242d 	ldrb.w	r2, [r3, #1069]	; 0x42d
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  float err = 0;
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e015      	b.n	80015fe <PID_SumError+0x72>
    err += (s->Config.TargetP - s->LastP[i]);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80015d8:	ed93 7a00 	vldr	s14, [r3]
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80015f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f4:	edc7 7a02 	vstr	s15, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	3301      	adds	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	429a      	cmp	r2, r3
 8001608:	d3e3      	bcc.n	80015d2 <PID_SumError+0x46>
  err *= (s->Config.Ki);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ed97 7a02 	vldr	s14, [r7, #8]
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err < (-s->Config.Li))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	eef1 7a67 	vneg.f32	s15, s15
 800162e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	d508      	bpl.n	800164e <PID_SumError+0xc2>
    err = -(s->Config.Li);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	eef1 7a67 	vneg.f32	s15, s15
 800164a:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err > s->Config.Li)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ed97 7a02 	vldr	s14, [r7, #8]
 800165c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	dd04      	ble.n	8001670 <PID_SumError+0xe4>
    err = s->Config.Li;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60bb      	str	r3, [r7, #8]
  return err;
 8001670:	68bb      	ldr	r3, [r7, #8]
}
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <PID_Velocity>:


float PID_Velocity(struct sPID* s)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint8_t periods = 4;
 800168c:	2304      	movs	r3, #4
 800168e:	73fb      	strb	r3, [r7, #15]
  if (s->IntegratorCount > periods)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	429a      	cmp	r2, r3
 800169a:	d219      	bcs.n	80016d0 <PID_Velocity+0x4c>
    return (s->LastP[0]-s->LastP[periods])/(s->DeltaT*periods);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	ed93 7a00 	vldr	s14, [r3]
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b8:	edd3 6a00 	vldr	s13, [r3]
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016ce:	e001      	b.n	80016d4 <PID_Velocity+0x50>
  else
    return 0;
 80016d0:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016e8 <PID_Velocity+0x64>
}
 80016d4:	eef0 7a66 	vmov.f32	s15, s13
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	00000000 	.word	0x00000000

080016ec <PID_CalculateEffort>:

// calculate the error and return a value between 0 and 1
float PID_CalculateEffort(struct sPID* s, float p)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	ed87 0a00 	vstr	s0, [r7]
  float eff;
  if ((s->Config.Enabled == false) ||
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 342c 	ldrb.w	r3, [r3, #1068]	; 0x42c
 80016fe:	f083 0301 	eor.w	r3, r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d115      	bne.n	8001734 <PID_CalculateEffort+0x48>
      (s->Config.TargetP < -200) ||
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800170e:	edd3 7a00 	vldr	s15, [r3]
  if ((s->Config.Enabled == false) ||
 8001712:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001848 <PID_CalculateEffort+0x15c>
 8001716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	d409      	bmi.n	8001734 <PID_CalculateEffort+0x48>
      (s->DeltaT == 0))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001726:	edd3 7a00 	vldr	s15, [r3]
      (s->Config.TargetP < -200) ||
 800172a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	d117      	bne.n	8001764 <PID_CalculateEffort+0x78>
  {
    s->Ep = -1;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800173a:	4a44      	ldr	r2, [pc, #272]	; (800184c <PID_CalculateEffort+0x160>)
 800173c:	601a      	str	r2, [r3, #0]
    s->Ed = -1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001744:	4a41      	ldr	r2, [pc, #260]	; (800184c <PID_CalculateEffort+0x160>)
 8001746:	601a      	str	r2, [r3, #0]
    s->Ei = -1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800174e:	4a3f      	ldr	r2, [pc, #252]	; (800184c <PID_CalculateEffort+0x160>)
 8001750:	601a      	str	r2, [r3, #0]
    s->Effort = 0;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
    return 0;
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	e069      	b.n	8001838 <PID_CalculateEffort+0x14c>
  }
  s->Ep = (s->Config.TargetP - p) * (s->Config.Kp);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800176a:	ed93 7a00 	vldr	s14, [r3]
 800176e:	edd7 7a00 	vldr	s15, [r7]
 8001772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800178a:	edc3 7a00 	vstr	s15, [r3]
  s->Ed = (0 - PID_Velocity(s)) * (s->Config.Kd);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff78 	bl	8001684 <PID_Velocity>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001850 <PID_CalculateEffort+0x164>
 800179c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017b4:	edc3 7a00 	vstr	s15, [r3]
  s->Ei = PID_SumError(s);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fee7 	bl	800158c <PID_SumError>
 80017be:	eef0 7a40 	vmov.f32	s15, s0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017c8:	edc3 7a00 	vstr	s15, [r3]
  eff = s->Ep + s->Ed + s->Ei;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80017d2:	ed93 7a00 	vldr	s14, [r3]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (eff > 1)
 80017f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	dd02      	ble.n	800180e <PID_CalculateEffort+0x122>
    eff = 1;
 8001808:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800180c:	60fb      	str	r3, [r7, #12]
  if (eff < 0)
 800180e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001812:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	d502      	bpl.n	8001822 <PID_CalculateEffort+0x136>
    eff = 0;
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  PID_SavePoint(s, p);
 8001822:	ed97 0a00 	vldr	s0, [r7]
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fe8a 	bl	8001540 <PID_SavePoint>
  s->Effort = eff;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	601a      	str	r2, [r3, #0]
  return eff;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eeb0 0a67 	vmov.f32	s0, s15
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	c3480000 	.word	0xc3480000
 800184c:	bf800000 	.word	0xbf800000
	...

08001858 <TMP117_InitStruct>:
//@param s Pointer to the structure to initialize
//@param interface Pointer to the I2C interface to use
//@param addpin Value of the address pin
//@return None
void TMP117_InitStruct(struct sTMP117* s, I2C_HandleTypeDef* interface, uint8_t addpin)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	4613      	mov	r3, r2
 8001864:	71fb      	strb	r3, [r7, #7]
   * 0x01 V+
   * 0x10 SDA
   * 0x11 SCL
   */
  uint8_t i;
  s->Address = 0b1001000 | addpin;
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 800186c:	b2da      	uxtb	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	701a      	strb	r2, [r3, #0]
  s->Interface = interface;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	605a      	str	r2, [r3, #4]
  s->Average = -273;
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	a31f      	add	r3, pc, #124	; (adr r3, 80018f8 <TMP117_InitStruct+0xa0>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
  s->Configured = false;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
  s->SamplesInAverage = 16;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2210      	movs	r2, #16
 8001890:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
  s->Index = 0;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  s->State = TMP117_STATE_UNKNOWN;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  for (i=0;i<64;i++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	75fb      	strb	r3, [r7, #23]
 80018a8:	e00c      	b.n	80018c4 <TMP117_InitStruct+0x6c>
    s->Temperature[i] = -273;
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	18d1      	adds	r1, r2, r3
 80018b4:	a310      	add	r3, pc, #64	; (adr r3, 80018f8 <TMP117_InitStruct+0xa0>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	e9c1 2300 	strd	r2, r3, [r1]
  for (i=0;i<64;i++)
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	3301      	adds	r3, #1
 80018c2:	75fb      	strb	r3, [r7, #23]
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
 80018c6:	2b3f      	cmp	r3, #63	; 0x3f
 80018c8:	d9ef      	bls.n	80018aa <TMP117_InitStruct+0x52>
  s->LastTemperature = -273;
 80018ca:	68f9      	ldr	r1, [r7, #12]
 80018cc:	a30a      	add	r3, pc, #40	; (adr r3, 80018f8 <TMP117_InitStruct+0xa0>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Ready = false;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  s->Errors = 0;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	f3af 8000 	nop.w
 80018f8:	00000000 	.word	0x00000000
 80018fc:	c0711000 	.word	0xc0711000

08001900 <TMP117_Configure>:

//@brief Configure the TMP117
//@param s Pointer to the structure to configure
//@return None
void TMP117_Configure(struct sTMP117* s)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af02      	add	r7, sp, #8
 8001906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef res;
  printf("Attempting to init... ");
 8001908:	481c      	ldr	r0, [pc, #112]	; (800197c <TMP117_Configure+0x7c>)
 800190a:	f00d ff29 	bl	800f760 <iprintf>
  uint8_t buffer[3] = {0};
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <TMP117_Configure+0x80>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	81bb      	strh	r3, [r7, #12]
 8001914:	2300      	movs	r3, #0
 8001916:	73bb      	strb	r3, [r7, #14]
  buffer[0] = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	733b      	strb	r3, [r7, #12]
  buffer[2] = 1 << 5;
 800191c:	2320      	movs	r3, #32
 800191e:	73bb      	strb	r3, [r7, #14]
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 3, 10); // 8 samples averaged
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6858      	ldr	r0, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	b299      	uxth	r1, r3
 800192e:	f107 020c 	add.w	r2, r7, #12
 8001932:	230a      	movs	r3, #10
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2303      	movs	r3, #3
 8001938:	f003 fa88 	bl	8004e4c <HAL_I2C_Master_Transmit>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
  if (res == HAL_OK)
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d107      	bne.n	8001956 <TMP117_Configure+0x56>
  {
    s->Configured = true;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    printf("OK!\n");
 800194e:	480d      	ldr	r0, [pc, #52]	; (8001984 <TMP117_Configure+0x84>)
 8001950:	f00d ff8c 	bl	800f86c <puts>
  {
    s->Errors++;
    s->State = TMP117_STATE_INITFAILED;
    printf("Failed!\n");
  }
}
 8001954:	e00e      	b.n	8001974 <TMP117_Configure+0x74>
    s->Errors++;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 800195c:	3301      	adds	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    s->State = TMP117_STATE_INITFAILED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    printf("Failed!\n");
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <TMP117_Configure+0x88>)
 8001970:	f00d ff7c 	bl	800f86c <puts>
}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	08013d60 	.word	0x08013d60
 8001980:	08013d84 	.word	0x08013d84
 8001984:	08013d78 	.word	0x08013d78
 8001988:	08013d7c 	.word	0x08013d7c

0800198c <TMP117_GetTemperature>:

//@brief Get the temperature from the TMP117
//@param s Pointer to the structure to get the temperature from
//@return None
void TMP117_GetTemperature(struct sTMP117* s)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b08b      	sub	sp, #44	; 0x2c
 8001990:	af02      	add	r7, sp, #8
 8001992:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t u;
  double t = 0;
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  //setup an empty Buffer to request the temperature
  uint8_t buffer[2] = {0};
 80019a0:	2300      	movs	r3, #0
 80019a2:	81bb      	strh	r3, [r7, #12]
  uint16_t data = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef res;
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 1, 10); // request temperature
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6858      	ldr	r0, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	b299      	uxth	r1, r3
 80019b6:	f107 020c 	add.w	r2, r7, #12
 80019ba:	230a      	movs	r3, #10
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	f003 fa44 	bl	8004e4c <HAL_I2C_Master_Transmit>
 80019c4:	4603      	mov	r3, r0
 80019c6:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 80019c8:	7cfb      	ldrb	r3, [r7, #19]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01a      	beq.n	8001a04 <TMP117_GetTemperature+0x78>
  {
    s->State = TMP117_STATE_REQUESTNOACK;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2202      	movs	r2, #2
 80019d2:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019dc:	3301      	adds	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    //If this temperature sensor gets more than 100 errors in a row, it's probably not connected
    if (s->Errors > 100)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	f240 80b3 	bls.w	8001b58 <TMP117_GetTemperature+0x1cc>
    {
      s->Configured = false;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 8001a02:	e0a9      	b.n	8001b58 <TMP117_GetTemperature+0x1cc>
  }

  res = HAL_I2C_Master_Receive(s->Interface, (s->Address << 1), buffer, 2, 10); // receive temperature
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6858      	ldr	r0, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	b299      	uxth	r1, r3
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	230a      	movs	r3, #10
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f003 fb14 	bl	8005048 <HAL_I2C_Master_Receive>
 8001a20:	4603      	mov	r3, r0
 8001a22:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 8001a24:	7cfb      	ldrb	r3, [r7, #19]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01a      	beq.n	8001a60 <TMP117_GetTemperature+0xd4>
  {
    s->State = TMP117_STATE_RECEIVEFAIL;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a38:	3301      	adds	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    if (s->Errors > 100)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a48:	2b64      	cmp	r3, #100	; 0x64
 8001a4a:	f240 8087 	bls.w	8001b5c <TMP117_GetTemperature+0x1d0>
    {
      s->Configured = false;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 8001a5e:	e07d      	b.n	8001b5c <TMP117_GetTemperature+0x1d0>
  }

  
  s->State = TMP117_STATE_VALIDTEMP;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2204      	movs	r2, #4
 8001a64:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  data = (buffer[0] << 8) | buffer[1];
 8001a68:	7b3b      	ldrb	r3, [r7, #12]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	7b7b      	ldrb	r3, [r7, #13]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	817b      	strh	r3, [r7, #10]
  u = *(&(data));
 8001a7a:	897b      	ldrh	r3, [r7, #10]
 8001a7c:	823b      	strh	r3, [r7, #16]
  //Conver the Temp as per documentation
  s->Temperature[s->Index] = ((double)u) * 0.0078125;
 8001a7e:	8a3b      	ldrh	r3, [r7, #16]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd5f 	bl	8000544 <__aeabi_ui2d>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001a8c:	461c      	mov	r4, r3
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a96:	f7fe fdcf 	bl	8000638 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	1c61      	adds	r1, r4, #1
 8001aa2:	00c9      	lsls	r1, r1, #3
 8001aa4:	4401      	add	r1, r0
 8001aa6:	e9c1 2300 	strd	r2, r3, [r1]
  s->LastTemperature = s->Temperature[s->Index];
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Index++;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  //If we finally have enough Temperatures to average, set the Ready flag
  //if we have engough samples, set the flags
  if (s->Index >= s->SamplesInAverage)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 2211 	ldrb.w	r2, [r3, #529]	; 0x211
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d307      	bcc.n	8001af2 <TMP117_GetTemperature+0x166>
  {
    s->Ready = true;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
    s->Index = 0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  }
  
  //average the Temperatures
  if (s->Ready)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d030      	beq.n	8001b5e <TMP117_GetTemperature+0x1d2>
  {
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e011      	b.n	8001b26 <TMP117_GetTemperature+0x19a>
    {
      t += s->Temperature[i];
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b14:	f7fe fbda 	bl	80002cc <__adddf3>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	4293      	cmp	r3, r2
 8001b32:	dbe6      	blt.n	8001b02 <TMP117_GetTemperature+0x176>
    }
    s->Average = t / s->SamplesInAverage;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd12 	bl	8000564 <__aeabi_i2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b48:	f7fe fea0 	bl	800088c <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
 8001b56:	e002      	b.n	8001b5e <TMP117_GetTemperature+0x1d2>
    return;
 8001b58:	bf00      	nop
 8001b5a:	e000      	b.n	8001b5e <TMP117_GetTemperature+0x1d2>
    return;
 8001b5c:	bf00      	nop
  }


}
 8001b5e:	3724      	adds	r7, #36	; 0x24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}

08001b64 <BaseT_Position_to_BaseT_Voltage>:
	return pos;
}


//Lookup Table to convert a pixel position to a voltage at the base Temperature. 25C
float BaseT_Position_to_BaseT_Voltage(uint16_t position){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80fb      	strh	r3, [r7, #6]
	if(position > 982){
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	f240 32d6 	movw	r2, #982	; 0x3d6
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d902      	bls.n	8001b7e <BaseT_Position_to_BaseT_Voltage+0x1a>
		return 0.0;
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	e014      	b.n	8001ba8 <BaseT_Position_to_BaseT_Voltage+0x44>
	2819,2816,2812,2808,2805,2801,2800,2800,2800,2796,2793,2789,2785,2782,2778,2774,2771,2767,2763,2759,2751,2744,2738,
	2734,2731,2727,2723,2719,2716,2712,2708,2704,2700,2700,2700,2699,2695,2691,2687,2684,2680,2676,2672,2667,2659,2651,
	2647,2643,2639,2635,2631,2627,2624,2620,2616,2612,2608,2604,2600,2600,2600,2599,2595,2591,2587,2583,2579,2575,2572,
	2565,2557,2550,2546,2542,2538,2534,2530,2527,2523,2519,2515,2511,2507,2503,2500,2500,2500,2498,2494,2490,2486,2482,
	2478,2474,2470,2466,2462,2457,2449,2441,2437,2433,2429,2425,2421,2417,2413,2409};
	float volts = lookup[position]/1000.0;
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <BaseT_Position_to_BaseT_Voltage+0x54>)
 8001b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fcec 	bl	8000564 <__aeabi_i2d>
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <BaseT_Position_to_BaseT_Voltage+0x58>)
 8001b92:	f7fe fe7b 	bl	800088c <__aeabi_ddiv>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff f843 	bl	8000c28 <__aeabi_d2f>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60fb      	str	r3, [r7, #12]
	return volts;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	08014a30 	.word	0x08014a30
 8001bbc:	408f4000 	.word	0x408f4000

08001bc0 <temperature_position_offset>:

//This Function Will Convert the temperature to a positional offset
//This is based on the Found relation ship between Position and Temperature
uint16_t temperature_position_offset(double* temp){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

	uint16_t offset =(uint16_t)(46.09*(*temp)-978.1);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bce:	a30e      	add	r3, pc, #56	; (adr r3, 8001c08 <temperature_position_offset+0x48>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fd30 	bl	8000638 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	a30b      	add	r3, pc, #44	; (adr r3, 8001c10 <temperature_position_offset+0x50>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fb6f 	bl	80002c8 <__aeabi_dsub>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe fff9 	bl	8000be8 <__aeabi_d2uiz>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	81fb      	strh	r3, [r7, #14]
	return offset;
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	f3af 8000 	nop.w
 8001c08:	1eb851ec 	.word	0x1eb851ec
 8001c0c:	40470b85 	.word	0x40470b85
 8001c10:	cccccccd 	.word	0xcccccccd
 8001c14:	408e90cc 	.word	0x408e90cc

08001c18 <Wavelength_to_Voltage>:


//This Function Will Convert a Wavelength and a temperature to a Voltage
float Wavelength_to_Voltage(float* wavelength, double* temp){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
	//Skip this For now we need a translation table
	//uint16_t base_position = NM_to_Position(wavelength);
	double base_temp = 25;
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <Wavelength_to_Voltage+0x64>)
 8001c28:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t base_position = 100;
 8001c2c:	2364      	movs	r3, #100	; 0x64
 8001c2e:	83fb      	strh	r3, [r7, #30]
	base_position= base_position + 415;
 8001c30:	8bfb      	ldrh	r3, [r7, #30]
 8001c32:	f203 139f 	addw	r3, r3, #415	; 0x19f
 8001c36:	83fb      	strh	r3, [r7, #30]
	uint16_t absolute_BaseT_Offset = temperature_position_offset(&base_temp);
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ffbf 	bl	8001bc0 <temperature_position_offset>
 8001c42:	4603      	mov	r3, r0
 8001c44:	83bb      	strh	r3, [r7, #28]
	uint16_t absolute_Offset = temperature_position_offset(temp);
 8001c46:	6838      	ldr	r0, [r7, #0]
 8001c48:	f7ff ffba 	bl	8001bc0 <temperature_position_offset>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	837b      	strh	r3, [r7, #26]
	uint16_t position = base_position + (absolute_BaseT_Offset - absolute_Offset);
 8001c50:	8bba      	ldrh	r2, [r7, #28]
 8001c52:	8b7b      	ldrh	r3, [r7, #26]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	8bfb      	ldrh	r3, [r7, #30]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	833b      	strh	r3, [r7, #24]
	float Voltage = BaseT_Position_to_BaseT_Voltage(position);
 8001c5e:	8b3b      	ldrh	r3, [r7, #24]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff7f 	bl	8001b64 <BaseT_Position_to_BaseT_Voltage>
 8001c66:	ed87 0a05 	vstr	s0, [r7, #20]
	return Voltage;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	ee07 3a90 	vmov	s15, r3
}
 8001c70:	eeb0 0a67 	vmov.f32	s0, s15
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40390000 	.word	0x40390000

08001c80 <TCB_InitStruct>:
#include "DAC.h"



//This Will Setup the TCB structer by initiallizing the DAC and the TMP117 and the Controller
void TCB_InitStruct(struct sTuningControlBoard* s, I2C_HandleTypeDef* hi2c, SPI_HandleTypeDef* hspi){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]

    //For each of the Seven Temperature sensors initialize the struct
    for(int i = 0; i < 4; i++){
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e011      	b.n	8001cb6 <TCB_InitStruct+0x36>
        TMP117_InitStruct(&s->Sensor[i], hi2c, i);
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f44f 720a 	mov.w	r2, #552	; 0x228
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fdd4 	bl	8001858 <TMP117_InitStruct>
    for(int i = 0; i < 4; i++){
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	ddea      	ble.n	8001c92 <TCB_InitStruct+0x12>
    }   
    Controller_InitStruct(&s->Controller,&s->Sensor[0], 0);
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f001 f98e 	bl	8002fe8 <Controller_InitStruct>
    DAC_InitStruct(&s->DAC8718, hspi);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff f9af 	bl	8001038 <DAC_InitStruct>

}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce8:	f3bf 8f4f 	dsb	sy
}
 8001cec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <__NVIC_SystemReset+0x24>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001cf6:	4904      	ldr	r1, [pc, #16]	; (8001d08 <__NVIC_SystemReset+0x24>)
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_SystemReset+0x28>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cfe:	f3bf 8f4f 	dsb	sy
}
 8001d02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <__NVIC_SystemReset+0x20>
 8001d08:	e000ed00 	.word	0xe000ed00
 8001d0c:	05fa0004 	.word	0x05fa0004

08001d10 <ProcessUserInput>:

//Get the User Input and process it
//@param Controller: pointer to the controller struct
//@param buffer: pointer to the buffer
void ProcessUserInput(struct sController* Controller, uint8_t* buffer, struct sTuningControlBoard* TCB)
{
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b0ca      	sub	sp, #296	; 0x128
 8001d14:	af04      	add	r7, sp, #16
 8001d16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d1e:	6018      	str	r0, [r3, #0]
 8001d20:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d28:	6019      	str	r1, [r3, #0]
 8001d2a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d32:	601a      	str	r2, [r3, #0]
  uint16_t i = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  uint8_t u = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
  char output[250];
  char c;
  float f = 0;
 8001d40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
  for (i=0; buffer[i]; i++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001d54:	e02b      	b.n	8001dae <ProcessUserInput+0x9e>
    buffer[i] = tolower(buffer[i]);
 8001d56:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001d5a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001d5e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
 8001d6c:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001d70:	3301      	adds	r3, #1
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <ProcessUserInput+0x78>)
 8001d74:	4413      	add	r3, r2
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <ProcessUserInput+0x7c>
 8001d80:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001d84:	3320      	adds	r3, #32
 8001d86:	e003      	b.n	8001d90 <ProcessUserInput+0x80>
 8001d88:	080151f8 	.word	0x080151f8
 8001d8c:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001d90:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8001d94:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001d98:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001d9c:	6809      	ldr	r1, [r1, #0]
 8001d9e:	440a      	add	r2, r1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	7013      	strb	r3, [r2, #0]
  for (i=0; buffer[i]; i++)
 8001da4:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001dae:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001db2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001db6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1c8      	bne.n	8001d56 <ProcessUserInput+0x46>
//  printf("String: %s\n", buffer);

  replacestr(buffer, "=", "");
 8001dc4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dcc:	4ab4      	ldr	r2, [pc, #720]	; (80020a0 <ProcessUserInput+0x390>)
 8001dce:	49b5      	ldr	r1, [pc, #724]	; (80020a4 <ProcessUserInput+0x394>)
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	f001 fa37 	bl	8003244 <replacestr>
  replacestr(buffer, " ", "");
 8001dd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dde:	4ab0      	ldr	r2, [pc, #704]	; (80020a0 <ProcessUserInput+0x390>)
 8001de0:	49b1      	ldr	r1, [pc, #708]	; (80020a8 <ProcessUserInput+0x398>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	f001 fa2e 	bl	8003244 <replacestr>
  replacestr(buffer, " ", "");
 8001de8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001df0:	4aab      	ldr	r2, [pc, #684]	; (80020a0 <ProcessUserInput+0x390>)
 8001df2:	49ad      	ldr	r1, [pc, #692]	; (80020a8 <ProcessUserInput+0x398>)
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	f001 fa25 	bl	8003244 <replacestr>
  replacestr(buffer, " ", "");
 8001dfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dfe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e02:	4aa7      	ldr	r2, [pc, #668]	; (80020a0 <ProcessUserInput+0x390>)
 8001e04:	49a8      	ldr	r1, [pc, #672]	; (80020a8 <ProcessUserInput+0x398>)
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	f001 fa1c 	bl	8003244 <replacestr>
  replacestr(buffer, " ", "");
 8001e0c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e14:	4aa2      	ldr	r2, [pc, #648]	; (80020a0 <ProcessUserInput+0x390>)
 8001e16:	49a4      	ldr	r1, [pc, #656]	; (80020a8 <ProcessUserInput+0x398>)
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	f001 fa13 	bl	8003244 <replacestr>
  replacestr(buffer, " ", "");
 8001e1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e26:	4a9e      	ldr	r2, [pc, #632]	; (80020a0 <ProcessUserInput+0x390>)
 8001e28:	499f      	ldr	r1, [pc, #636]	; (80020a8 <ProcessUserInput+0x398>)
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	f001 fa0a 	bl	8003244 <replacestr>
  replacestr(buffer, "channel", "c");
 8001e30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e38:	4a9c      	ldr	r2, [pc, #624]	; (80020ac <ProcessUserInput+0x39c>)
 8001e3a:	499d      	ldr	r1, [pc, #628]	; (80020b0 <ProcessUserInput+0x3a0>)
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	f001 fa01 	bl	8003244 <replacestr>
//  replacestr(buffer, "controller", "c");
  replacestr(buffer, "chan", "c");
 8001e42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e46:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e4a:	4a98      	ldr	r2, [pc, #608]	; (80020ac <ProcessUserInput+0x39c>)
 8001e4c:	4999      	ldr	r1, [pc, #612]	; (80020b4 <ProcessUserInput+0x3a4>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	f001 f9f8 	bl	8003244 <replacestr>
//  replacestr(buffer, "con", "c");
  replacestr(buffer, "address", "a");
 8001e54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e5c:	4a96      	ldr	r2, [pc, #600]	; (80020b8 <ProcessUserInput+0x3a8>)
 8001e5e:	4997      	ldr	r1, [pc, #604]	; (80020bc <ProcessUserInput+0x3ac>)
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	f001 f9ef 	bl	8003244 <replacestr>
  replacestr(buffer, "kp", "p");
 8001e66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e6a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e6e:	4a94      	ldr	r2, [pc, #592]	; (80020c0 <ProcessUserInput+0x3b0>)
 8001e70:	4994      	ldr	r1, [pc, #592]	; (80020c4 <ProcessUserInput+0x3b4>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	f001 f9e6 	bl	8003244 <replacestr>
  replacestr(buffer, "kd", "d");
 8001e78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e80:	4a91      	ldr	r2, [pc, #580]	; (80020c8 <ProcessUserInput+0x3b8>)
 8001e82:	4992      	ldr	r1, [pc, #584]	; (80020cc <ProcessUserInput+0x3bc>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f001 f9dd 	bl	8003244 <replacestr>
  replacestr(buffer, "ki", "i");
 8001e8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e92:	4a8f      	ldr	r2, [pc, #572]	; (80020d0 <ProcessUserInput+0x3c0>)
 8001e94:	498f      	ldr	r1, [pc, #572]	; (80020d4 <ProcessUserInput+0x3c4>)
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	f001 f9d4 	bl	8003244 <replacestr>
  replacestr(buffer, "li", "l");
 8001e9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ea0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ea4:	4a8c      	ldr	r2, [pc, #560]	; (80020d8 <ProcessUserInput+0x3c8>)
 8001ea6:	498d      	ldr	r1, [pc, #564]	; (80020dc <ProcessUserInput+0x3cc>)
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	f001 f9cb 	bl	8003244 <replacestr>
  replacestr(buffer, "target", "t");
 8001eae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001eb2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001eb6:	4a8a      	ldr	r2, [pc, #552]	; (80020e0 <ProcessUserInput+0x3d0>)
 8001eb8:	498a      	ldr	r1, [pc, #552]	; (80020e4 <ProcessUserInput+0x3d4>)
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	f001 f9c2 	bl	8003244 <replacestr>
  replacestr(buffer, "temperature", "t");
 8001ec0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ec4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ec8:	4a85      	ldr	r2, [pc, #532]	; (80020e0 <ProcessUserInput+0x3d0>)
 8001eca:	4987      	ldr	r1, [pc, #540]	; (80020e8 <ProcessUserInput+0x3d8>)
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	f001 f9b9 	bl	8003244 <replacestr>
  replacestr(buffer, "temp", "t");
 8001ed2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ed6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001eda:	4a81      	ldr	r2, [pc, #516]	; (80020e0 <ProcessUserInput+0x3d0>)
 8001edc:	4983      	ldr	r1, [pc, #524]	; (80020ec <ProcessUserInput+0x3dc>)
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	f001 f9b0 	bl	8003244 <replacestr>
  replacestr(buffer, "frequency", "f");
 8001ee4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ee8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001eec:	4a80      	ldr	r2, [pc, #512]	; (80020f0 <ProcessUserInput+0x3e0>)
 8001eee:	4981      	ldr	r1, [pc, #516]	; (80020f4 <ProcessUserInput+0x3e4>)
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	f001 f9a7 	bl	8003244 <replacestr>
  replacestr(buffer, "freq", "f");
 8001ef6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001efa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001efe:	4a7c      	ldr	r2, [pc, #496]	; (80020f0 <ProcessUserInput+0x3e0>)
 8001f00:	497d      	ldr	r1, [pc, #500]	; (80020f8 <ProcessUserInput+0x3e8>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	f001 f99e 	bl	8003244 <replacestr>
  replacestr(buffer, "enable", "n");
 8001f08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f10:	4a7a      	ldr	r2, [pc, #488]	; (80020fc <ProcessUserInput+0x3ec>)
 8001f12:	497b      	ldr	r1, [pc, #492]	; (8002100 <ProcessUserInput+0x3f0>)
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	f001 f995 	bl	8003244 <replacestr>
  replacestr(buffer, "disable", "f");
 8001f1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f1e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f22:	4a73      	ldr	r2, [pc, #460]	; (80020f0 <ProcessUserInput+0x3e0>)
 8001f24:	4977      	ldr	r1, [pc, #476]	; (8002104 <ProcessUserInput+0x3f4>)
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	f001 f98c 	bl	8003244 <replacestr>
  replacestr(buffer, "save", "s");
 8001f2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f34:	4a74      	ldr	r2, [pc, #464]	; (8002108 <ProcessUserInput+0x3f8>)
 8001f36:	4975      	ldr	r1, [pc, #468]	; (800210c <ProcessUserInput+0x3fc>)
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	f001 f983 	bl	8003244 <replacestr>
  replacestr(buffer, "load", "l");
 8001f3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f42:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f46:	4a64      	ldr	r2, [pc, #400]	; (80020d8 <ProcessUserInput+0x3c8>)
 8001f48:	4971      	ldr	r1, [pc, #452]	; (8002110 <ProcessUserInput+0x400>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	f001 f97a 	bl	8003244 <replacestr>
  replacestr(buffer, "history", "h");
 8001f50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f58:	4a6e      	ldr	r2, [pc, #440]	; (8002114 <ProcessUserInput+0x404>)
 8001f5a:	496f      	ldr	r1, [pc, #444]	; (8002118 <ProcessUserInput+0x408>)
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	f001 f971 	bl	8003244 <replacestr>
  replacestr(buffer, "update", "u");
 8001f62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f66:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f6a:	4a6c      	ldr	r2, [pc, #432]	; (800211c <ProcessUserInput+0x40c>)
 8001f6c:	496c      	ldr	r1, [pc, #432]	; (8002120 <ProcessUserInput+0x410>)
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	f001 f968 	bl	8003244 <replacestr>
  replacestr(buffer, "raw", "r");
 8001f74:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f7c:	4a69      	ldr	r2, [pc, #420]	; (8002124 <ProcessUserInput+0x414>)
 8001f7e:	496a      	ldr	r1, [pc, #424]	; (8002128 <ProcessUserInput+0x418>)
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	f001 f95f 	bl	8003244 <replacestr>
  replacestr(buffer, "bounce", "b");
 8001f86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f8a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f8e:	4a67      	ldr	r2, [pc, #412]	; (800212c <ProcessUserInput+0x41c>)
 8001f90:	4967      	ldr	r1, [pc, #412]	; (8002130 <ProcessUserInput+0x420>)
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	f001 f956 	bl	8003244 <replacestr>
  replacestr(buffer, "wipe", "w");
 8001f98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fa0:	4a64      	ldr	r2, [pc, #400]	; (8002134 <ProcessUserInput+0x424>)
 8001fa2:	4965      	ldr	r1, [pc, #404]	; (8002138 <ProcessUserInput+0x428>)
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	f001 f94d 	bl	8003244 <replacestr>
  replacestr(buffer, "voltage", "v");
 8001faa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001fae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fb2:	4a62      	ldr	r2, [pc, #392]	; (800213c <ProcessUserInput+0x42c>)
 8001fb4:	4962      	ldr	r1, [pc, #392]	; (8002140 <ProcessUserInput+0x430>)
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	f001 f944 	bl	8003244 <replacestr>


//  printf("New String: %s\n", buffer);

  if ((strcmp((char*) buffer, "?") == 0) || (strcmp((char*) buffer, "help") == 0))
 8001fbc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001fc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fc4:	495f      	ldr	r1, [pc, #380]	; (8002144 <ProcessUserInput+0x434>)
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	f7fe f912 	bl	80001f0 <strcmp>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <ProcessUserInput+0x2da>
 8001fd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001fd6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fda:	495b      	ldr	r1, [pc, #364]	; (8002148 <ProcessUserInput+0x438>)
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	f7fe f907 	bl	80001f0 <strcmp>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f040 80e3 	bne.w	80021b0 <ProcessUserInput+0x4a0>
  {
    USBSendString("\nLFDI TCB Firmware v1.2\n");
 8001fea:	4858      	ldr	r0, [pc, #352]	; (800214c <ProcessUserInput+0x43c>)
 8001fec:	f001 f8c6 	bl	800317c <USBSendString>
    USBSendString("Commands can be upper or lower case. Variables can be set with an equals sign or space or nothing.\n");
 8001ff0:	4857      	ldr	r0, [pc, #348]	; (8002150 <ProcessUserInput+0x440>)
 8001ff2:	f001 f8c3 	bl	800317c <USBSendString>
    USBSendString("\"channel=1\", \"channel 1\", \"channel1\", \"c1\" are all treated the same.\n");
 8001ff6:	4857      	ldr	r0, [pc, #348]	; (8002154 <ProcessUserInput+0x444>)
 8001ff8:	f001 f8c0 	bl	800317c <USBSendString>
    USBSendString("\n");
 8001ffc:	4856      	ldr	r0, [pc, #344]	; (8002158 <ProcessUserInput+0x448>)
 8001ffe:	f001 f8bd 	bl	800317c <USBSendString>
//    USBSendString("Controller = n  -- chooses which controller to configure\n");
    USBSendString("Channel = n     -- chooses which channel to configure\n");
 8002002:	4856      	ldr	r0, [pc, #344]	; (800215c <ProcessUserInput+0x44c>)
 8002004:	f001 f8ba 	bl	800317c <USBSendString>
    USBSendString("Address = nn    -- sets the address of the temperature sensor (00, 01, 10, or 11)\n");
 8002008:	4855      	ldr	r0, [pc, #340]	; (8002160 <ProcessUserInput+0x450>)
 800200a:	f001 f8b7 	bl	800317c <USBSendString>
    USBSendString("kP = n.nn       -- sets the proportional gain\n");
 800200e:	4855      	ldr	r0, [pc, #340]	; (8002164 <ProcessUserInput+0x454>)
 8002010:	f001 f8b4 	bl	800317c <USBSendString>
    USBSendString("kD = n.nn       -- sets the derivative gain\n");
 8002014:	4854      	ldr	r0, [pc, #336]	; (8002168 <ProcessUserInput+0x458>)
 8002016:	f001 f8b1 	bl	800317c <USBSendString>
    USBSendString("kI = n.nn       -- sets the integral gain\n");
 800201a:	4854      	ldr	r0, [pc, #336]	; (800216c <ProcessUserInput+0x45c>)
 800201c:	f001 f8ae 	bl	800317c <USBSendString>
    USBSendString("Li = n.nn       -- sets the integral gain limit\n");
 8002020:	4853      	ldr	r0, [pc, #332]	; (8002170 <ProcessUserInput+0x460>)
 8002022:	f001 f8ab 	bl	800317c <USBSendString>
    USBSendString("History = nn    -- sets the number of points used in the integral (1-255)\n");
 8002026:	4853      	ldr	r0, [pc, #332]	; (8002174 <ProcessUserInput+0x464>)
 8002028:	f001 f8a8 	bl	800317c <USBSendString>
    USBSendString("Target = n      -- sets the target temperature\n");
 800202c:	4852      	ldr	r0, [pc, #328]	; (8002178 <ProcessUserInput+0x468>)
 800202e:	f001 f8a5 	bl	800317c <USBSendString>
    USBSendString("Temperature = n -- sets the target temperature\n");
 8002032:	4852      	ldr	r0, [pc, #328]	; (800217c <ProcessUserInput+0x46c>)
 8002034:	f001 f8a2 	bl	800317c <USBSendString>
    USBSendString("Freq = n        -- sets the PWM frequency (40 = 1 second)\n");
 8002038:	4851      	ldr	r0, [pc, #324]	; (8002180 <ProcessUserInput+0x470>)
 800203a:	f001 f89f 	bl	800317c <USBSendString>
    USBSendString("Enable          -- starts the temperature control loop\n");
 800203e:	4851      	ldr	r0, [pc, #324]	; (8002184 <ProcessUserInput+0x474>)
 8002040:	f001 f89c 	bl	800317c <USBSendString>
    USBSendString("Disable         -- stops the temperature control loop\n");
 8002044:	4850      	ldr	r0, [pc, #320]	; (8002188 <ProcessUserInput+0x478>)
 8002046:	f001 f899 	bl	800317c <USBSendString>
    USBSendString("Update          -- shows the status of all of the controllers\n");
 800204a:	4850      	ldr	r0, [pc, #320]	; (800218c <ProcessUserInput+0x47c>)
 800204c:	f001 f896 	bl	800317c <USBSendString>
    USBSendString("Raw             -- shows an easily parsable version of Update\n");
 8002050:	484f      	ldr	r0, [pc, #316]	; (8002190 <ProcessUserInput+0x480>)
 8002052:	f001 f893 	bl	800317c <USBSendString>
    USBSendString("Wipe            -- wipes the existing configuration and load new defaults\n");
 8002056:	484f      	ldr	r0, [pc, #316]	; (8002194 <ProcessUserInput+0x484>)
 8002058:	f001 f890 	bl	800317c <USBSendString>
    USBSendString("Bounce          -- performs a power-cycle / reboot on the system\n");
 800205c:	484e      	ldr	r0, [pc, #312]	; (8002198 <ProcessUserInput+0x488>)
 800205e:	f001 f88d 	bl	800317c <USBSendString>
    USBSendString("Load            -- reloads the previously saved values (automatic at power-on)\n");
 8002062:	484e      	ldr	r0, [pc, #312]	; (800219c <ProcessUserInput+0x48c>)
 8002064:	f001 f88a 	bl	800317c <USBSendString>
    USBSendString("Save            -- saves the currently configured values\n");
 8002068:	484d      	ldr	r0, [pc, #308]	; (80021a0 <ProcessUserInput+0x490>)
 800206a:	f001 f887 	bl	800317c <USBSendString>
    USBSendString("Voltage         -- Set the Peak to Peak Voltage to output on DAC Channel 0\n");
 800206e:	484d      	ldr	r0, [pc, #308]	; (80021a4 <ProcessUserInput+0x494>)
 8002070:	f001 f884 	bl	800317c <USBSendString>
    USBSendString("\n");
 8002074:	4838      	ldr	r0, [pc, #224]	; (8002158 <ProcessUserInput+0x448>)
 8002076:	f001 f881 	bl	800317c <USBSendString>
    if (UI_Controller == 9)
 800207a:	4b4b      	ldr	r3, [pc, #300]	; (80021a8 <ProcessUserInput+0x498>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b09      	cmp	r3, #9
 8002080:	d104      	bne.n	800208c <ProcessUserInput+0x37c>
      USBSendString("No controller selected.\n");
 8002082:	484a      	ldr	r0, [pc, #296]	; (80021ac <ProcessUserInput+0x49c>)
 8002084:	f001 f87a 	bl	800317c <USBSendString>
      ShowEffort(&TCB.Controller);
      USBSendString("\n");
      */
      ShowAll(Controller, true);
    }
    return;
 8002088:	f000 bc61 	b.w	800294e <ProcessUserInput+0xc3e>
      ShowAll(Controller, true);
 800208c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002090:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002094:	2101      	movs	r1, #1
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	f000 fd2e 	bl	8002af8 <ShowAll>
    return;
 800209c:	f000 bc57 	b.w	800294e <ProcessUserInput+0xc3e>
 80020a0:	08013d88 	.word	0x08013d88
 80020a4:	08013d8c 	.word	0x08013d8c
 80020a8:	08013d90 	.word	0x08013d90
 80020ac:	08013d94 	.word	0x08013d94
 80020b0:	08013d98 	.word	0x08013d98
 80020b4:	08013da0 	.word	0x08013da0
 80020b8:	08013da8 	.word	0x08013da8
 80020bc:	08013dac 	.word	0x08013dac
 80020c0:	08013db4 	.word	0x08013db4
 80020c4:	08013db8 	.word	0x08013db8
 80020c8:	08013dbc 	.word	0x08013dbc
 80020cc:	08013dc0 	.word	0x08013dc0
 80020d0:	08013dc4 	.word	0x08013dc4
 80020d4:	08013dc8 	.word	0x08013dc8
 80020d8:	08013dcc 	.word	0x08013dcc
 80020dc:	08013dd0 	.word	0x08013dd0
 80020e0:	08013dd4 	.word	0x08013dd4
 80020e4:	08013dd8 	.word	0x08013dd8
 80020e8:	08013de0 	.word	0x08013de0
 80020ec:	08013dec 	.word	0x08013dec
 80020f0:	08013df4 	.word	0x08013df4
 80020f4:	08013df8 	.word	0x08013df8
 80020f8:	08013e04 	.word	0x08013e04
 80020fc:	08013e0c 	.word	0x08013e0c
 8002100:	08013e10 	.word	0x08013e10
 8002104:	08013e18 	.word	0x08013e18
 8002108:	08013e20 	.word	0x08013e20
 800210c:	08013e24 	.word	0x08013e24
 8002110:	08013e2c 	.word	0x08013e2c
 8002114:	08013e34 	.word	0x08013e34
 8002118:	08013e38 	.word	0x08013e38
 800211c:	08013e40 	.word	0x08013e40
 8002120:	08013e44 	.word	0x08013e44
 8002124:	08013e4c 	.word	0x08013e4c
 8002128:	08013e50 	.word	0x08013e50
 800212c:	08013e54 	.word	0x08013e54
 8002130:	08013e58 	.word	0x08013e58
 8002134:	08013e60 	.word	0x08013e60
 8002138:	08013e64 	.word	0x08013e64
 800213c:	08013e6c 	.word	0x08013e6c
 8002140:	08013e70 	.word	0x08013e70
 8002144:	08013e78 	.word	0x08013e78
 8002148:	08013e7c 	.word	0x08013e7c
 800214c:	08013e84 	.word	0x08013e84
 8002150:	08013ea0 	.word	0x08013ea0
 8002154:	08013f04 	.word	0x08013f04
 8002158:	08013f4c 	.word	0x08013f4c
 800215c:	08013f50 	.word	0x08013f50
 8002160:	08013f88 	.word	0x08013f88
 8002164:	08013fdc 	.word	0x08013fdc
 8002168:	0801400c 	.word	0x0801400c
 800216c:	0801403c 	.word	0x0801403c
 8002170:	08014068 	.word	0x08014068
 8002174:	0801409c 	.word	0x0801409c
 8002178:	080140e8 	.word	0x080140e8
 800217c:	08014118 	.word	0x08014118
 8002180:	08014148 	.word	0x08014148
 8002184:	08014184 	.word	0x08014184
 8002188:	080141bc 	.word	0x080141bc
 800218c:	080141f4 	.word	0x080141f4
 8002190:	08014234 	.word	0x08014234
 8002194:	08014274 	.word	0x08014274
 8002198:	080142c0 	.word	0x080142c0
 800219c:	08014304 	.word	0x08014304
 80021a0:	08014354 	.word	0x08014354
 80021a4:	08014390 	.word	0x08014390
 80021a8:	2000000c 	.word	0x2000000c
 80021ac:	080143dc 	.word	0x080143dc
  }

  //Print the Status all the Controllers
  if ((strcmp((char*) buffer, "u") == 0) || (strcmp((char*) buffer, "/") == 0))
 80021b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021b8:	49c1      	ldr	r1, [pc, #772]	; (80024c0 <ProcessUserInput+0x7b0>)
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	f7fe f818 	bl	80001f0 <strcmp>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <ProcessUserInput+0x4cc>
 80021c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ce:	49bd      	ldr	r1, [pc, #756]	; (80024c4 <ProcessUserInput+0x7b4>)
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	f7fe f80d 	bl	80001f0 <strcmp>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d108      	bne.n	80021ee <ProcessUserInput+0x4de>
  {
    ShowAll(Controller, true);
 80021dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021e4:	2101      	movs	r1, #1
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	f000 fc86 	bl	8002af8 <ShowAll>
    return;
 80021ec:	e3af      	b.n	800294e <ProcessUserInput+0xc3e>
  }
  //Print the Status all the Controllers in non readable format
  if (strcmp((char*) buffer, "r") == 0)
 80021ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021f2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021f6:	49b4      	ldr	r1, [pc, #720]	; (80024c8 <ProcessUserInput+0x7b8>)
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	f7fd fff9 	bl	80001f0 <strcmp>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d108      	bne.n	8002216 <ProcessUserInput+0x506>
  {
    ShowAll(Controller, false);
 8002204:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002208:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800220c:	2100      	movs	r1, #0
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	f000 fc72 	bl	8002af8 <ShowAll>
    return;
 8002214:	e39b      	b.n	800294e <ProcessUserInput+0xc3e>
  }
  //Save the Configuration of a controller
  if (strcmp((char*) buffer, "s") == 0)
 8002216:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800221a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800221e:	49ab      	ldr	r1, [pc, #684]	; (80024cc <ProcessUserInput+0x7bc>)
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	f7fd ffe5 	bl	80001f0 <strcmp>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d103      	bne.n	8002234 <ProcessUserInput+0x524>
  {

    USBSendString("Cannot Save, No EEPROM.\n");
 800222c:	48a8      	ldr	r0, [pc, #672]	; (80024d0 <ProcessUserInput+0x7c0>)
 800222e:	f000 ffa5 	bl	800317c <USBSendString>
    return;
 8002232:	e38c      	b.n	800294e <ProcessUserInput+0xc3e>
  }

  if (strcmp((char*) buffer, "l") == 0)
 8002234:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002238:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800223c:	49a5      	ldr	r1, [pc, #660]	; (80024d4 <ProcessUserInput+0x7c4>)
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	f7fd ffd6 	bl	80001f0 <strcmp>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <ProcessUserInput+0x542>
  {
    USBSendString("Cannot load Configuration, No EEPROM.\n");
 800224a:	48a3      	ldr	r0, [pc, #652]	; (80024d8 <ProcessUserInput+0x7c8>)
 800224c:	f000 ff96 	bl	800317c <USBSendString>
    return;
 8002250:	e37d      	b.n	800294e <ProcessUserInput+0xc3e>
  }

  if (strcmp((char*) buffer, "b") == 0)
 8002252:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002256:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800225a:	49a0      	ldr	r1, [pc, #640]	; (80024dc <ProcessUserInput+0x7cc>)
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	f7fd ffc7 	bl	80001f0 <strcmp>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <ProcessUserInput+0x55c>
  {
    NVIC_SystemReset();
 8002268:	f7ff fd3c 	bl	8001ce4 <__NVIC_SystemReset>
  }

  if (strcmp((char*) buffer, "w") == 0)
 800226c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002270:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002274:	499a      	ldr	r1, [pc, #616]	; (80024e0 <ProcessUserInput+0x7d0>)
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	f7fd ffba 	bl	80001f0 <strcmp>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10a      	bne.n	8002298 <ProcessUserInput+0x588>
  {
    Controller_WipeConfig(Controller);
 8002282:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002286:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	f000 ff18 	bl	80030c0 <Controller_WipeConfig>
    USBSendString("Configuration wiped.\n");
 8002290:	4894      	ldr	r0, [pc, #592]	; (80024e4 <ProcessUserInput+0x7d4>)
 8002292:	f000 ff73 	bl	800317c <USBSendString>
    return;
 8002296:	e35a      	b.n	800294e <ProcessUserInput+0xc3e>
  }

  if ((strcmp((char*) buffer, "1") == 0) || (strcmp((char*) buffer, "c1") == 0))
 8002298:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800229c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022a0:	4991      	ldr	r1, [pc, #580]	; (80024e8 <ProcessUserInput+0x7d8>)
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	f7fd ffa4 	bl	80001f0 <strcmp>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <ProcessUserInput+0x5b4>
 80022ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022b6:	498d      	ldr	r1, [pc, #564]	; (80024ec <ProcessUserInput+0x7dc>)
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	f7fd ff99 	bl	80001f0 <strcmp>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <ProcessUserInput+0x5ca>
  {
    UI_Controller = 0;
 80022c4:	4b8a      	ldr	r3, [pc, #552]	; (80024f0 <ProcessUserInput+0x7e0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 80022ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	f000 fb46 	bl	8002964 <ShowControllerConfig>
    return;
 80022d8:	e339      	b.n	800294e <ProcessUserInput+0xc3e>
  }

  if ((strcmp((char*) buffer, "2") == 0) || (strcmp((char*) buffer, "c2") == 0))
 80022da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022de:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022e2:	4984      	ldr	r1, [pc, #528]	; (80024f4 <ProcessUserInput+0x7e4>)
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	f7fd ff83 	bl	80001f0 <strcmp>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <ProcessUserInput+0x5f6>
 80022f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022f8:	497f      	ldr	r1, [pc, #508]	; (80024f8 <ProcessUserInput+0x7e8>)
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	f7fd ff78 	bl	80001f0 <strcmp>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10a      	bne.n	800231c <ProcessUserInput+0x60c>
  {
    UI_Controller = 1;
 8002306:	4b7a      	ldr	r3, [pc, #488]	; (80024f0 <ProcessUserInput+0x7e0>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 800230c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002310:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	f000 fb25 	bl	8002964 <ShowControllerConfig>
    return;
 800231a:	e318      	b.n	800294e <ProcessUserInput+0xc3e>
  }

  if ((strcmp((char*) buffer, "3") == 0) || (strcmp((char*) buffer, "c3") == 0))
 800231c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002320:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002324:	4975      	ldr	r1, [pc, #468]	; (80024fc <ProcessUserInput+0x7ec>)
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	f7fd ff62 	bl	80001f0 <strcmp>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <ProcessUserInput+0x638>
 8002332:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002336:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800233a:	4971      	ldr	r1, [pc, #452]	; (8002500 <ProcessUserInput+0x7f0>)
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	f7fd ff57 	bl	80001f0 <strcmp>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10a      	bne.n	800235e <ProcessUserInput+0x64e>
  {
    UI_Controller = 2;
 8002348:	4b69      	ldr	r3, [pc, #420]	; (80024f0 <ProcessUserInput+0x7e0>)
 800234a:	2202      	movs	r2, #2
 800234c:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 800234e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002352:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	f000 fb04 	bl	8002964 <ShowControllerConfig>
    return;
 800235c:	e2f7      	b.n	800294e <ProcessUserInput+0xc3e>
  }

  if ((strcmp((char*) buffer, "4") == 0) || (strcmp((char*) buffer, "c4") == 0))
 800235e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002362:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002366:	4967      	ldr	r1, [pc, #412]	; (8002504 <ProcessUserInput+0x7f4>)
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	f7fd ff41 	bl	80001f0 <strcmp>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <ProcessUserInput+0x67a>
 8002374:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002378:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800237c:	4962      	ldr	r1, [pc, #392]	; (8002508 <ProcessUserInput+0x7f8>)
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	f7fd ff36 	bl	80001f0 <strcmp>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10a      	bne.n	80023a0 <ProcessUserInput+0x690>
  {
    UI_Controller = 3;
 800238a:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <ProcessUserInput+0x7e0>)
 800238c:	2203      	movs	r2, #3
 800238e:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 8002390:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002394:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	f000 fae3 	bl	8002964 <ShowControllerConfig>
    return;
 800239e:	e2d6      	b.n	800294e <ProcessUserInput+0xc3e>
  }

  if (UI_Controller == 9)
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <ProcessUserInput+0x7e0>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	d103      	bne.n	80023b0 <ProcessUserInput+0x6a0>
  {
    USBSendString("No controller selected.\n");
 80023a8:	4858      	ldr	r0, [pc, #352]	; (800250c <ProcessUserInput+0x7fc>)
 80023aa:	f000 fee7 	bl	800317c <USBSendString>
    return;
 80023ae:	e2ce      	b.n	800294e <ProcessUserInput+0xc3e>
  }


  if (strcmp((char*) buffer, "e") == 0)
 80023b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023b8:	4955      	ldr	r1, [pc, #340]	; (8002510 <ProcessUserInput+0x800>)
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	f7fd ff18 	bl	80001f0 <strcmp>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <ProcessUserInput+0x6ce>
  {
    USBSendString("Controller enabled.\n");
 80023c6:	4853      	ldr	r0, [pc, #332]	; (8002514 <ProcessUserInput+0x804>)
 80023c8:	f000 fed8 	bl	800317c <USBSendString>
    Controller->PID.Config.Enabled = true;
 80023cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 80023dc:	e2b7      	b.n	800294e <ProcessUserInput+0xc3e>
  }

  if (strcmp((char*) buffer, "d") == 0)
 80023de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023e6:	494c      	ldr	r1, [pc, #304]	; (8002518 <ProcessUserInput+0x808>)
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	f7fd ff01 	bl	80001f0 <strcmp>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <ProcessUserInput+0x6fc>
  {
    USBSendString("Controller disabled.\n");
 80023f4:	4849      	ldr	r0, [pc, #292]	; (800251c <ProcessUserInput+0x80c>)
 80023f6:	f000 fec1 	bl	800317c <USBSendString>
    Controller->PID.Config.Enabled = false;
 80023fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 800240a:	e2a0      	b.n	800294e <ProcessUserInput+0xc3e>
  }

  if (sscanf((char*) buffer, "%c%f", &c, &f) == 2)
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	f107 0217 	add.w	r2, r7, #23
 8002414:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002418:	f5a1 7088 	sub.w	r0, r1, #272	; 0x110
 800241c:	4940      	ldr	r1, [pc, #256]	; (8002520 <ProcessUserInput+0x810>)
 800241e:	6800      	ldr	r0, [r0, #0]
 8002420:	f00d fa86 	bl	800f930 <siscanf>
 8002424:	4603      	mov	r3, r0
 8002426:	2b02      	cmp	r3, #2
 8002428:	f040 828a 	bne.w	8002940 <ProcessUserInput+0xc30>
  {
    u = (uint8_t) f;
 800242c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800243c:	edc7 7a00 	vstr	s15, [r7]
 8002440:	783b      	ldrb	r3, [r7, #0]
 8002442:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
    switch (c)
 8002446:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800244a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	3b61      	subs	r3, #97	; 0x61
 8002452:	2b15      	cmp	r3, #21
 8002454:	f200 8276 	bhi.w	8002944 <ProcessUserInput+0xc34>
 8002458:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <ProcessUserInput+0x750>)
 800245a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245e:	bf00      	nop
 8002460:	08002529 	.word	0x08002529
 8002464:	08002945 	.word	0x08002945
 8002468:	080024b9 	.word	0x080024b9
 800246c:	08002699 	.word	0x08002699
 8002470:	08002945 	.word	0x08002945
 8002474:	08002701 	.word	0x08002701
 8002478:	08002945 	.word	0x08002945
 800247c:	08002819 	.word	0x08002819
 8002480:	08002631 	.word	0x08002631
 8002484:	08002945 	.word	0x08002945
 8002488:	08002945 	.word	0x08002945
 800248c:	080027b1 	.word	0x080027b1
 8002490:	08002945 	.word	0x08002945
 8002494:	08002945 	.word	0x08002945
 8002498:	08002945 	.word	0x08002945
 800249c:	080025c9 	.word	0x080025c9
 80024a0:	08002945 	.word	0x08002945
 80024a4:	08002945 	.word	0x08002945
 80024a8:	08002945 	.word	0x08002945
 80024ac:	08002891 	.word	0x08002891
 80024b0:	08002945 	.word	0x08002945
 80024b4:	080028db 	.word	0x080028db
    {
      case 'c':
        // we shouldn't get here if a valid number was used
        USBSendString("Invalid controller number.\n");
 80024b8:	481a      	ldr	r0, [pc, #104]	; (8002524 <ProcessUserInput+0x814>)
 80024ba:	f000 fe5f 	bl	800317c <USBSendString>
        return;
 80024be:	e246      	b.n	800294e <ProcessUserInput+0xc3e>
 80024c0:	08013e40 	.word	0x08013e40
 80024c4:	080143f8 	.word	0x080143f8
 80024c8:	08013e4c 	.word	0x08013e4c
 80024cc:	08013e20 	.word	0x08013e20
 80024d0:	080143fc 	.word	0x080143fc
 80024d4:	08013dcc 	.word	0x08013dcc
 80024d8:	08014418 	.word	0x08014418
 80024dc:	08013e54 	.word	0x08013e54
 80024e0:	08013e60 	.word	0x08013e60
 80024e4:	08014440 	.word	0x08014440
 80024e8:	08014458 	.word	0x08014458
 80024ec:	0801445c 	.word	0x0801445c
 80024f0:	2000000c 	.word	0x2000000c
 80024f4:	08014460 	.word	0x08014460
 80024f8:	08014464 	.word	0x08014464
 80024fc:	08014468 	.word	0x08014468
 8002500:	0801446c 	.word	0x0801446c
 8002504:	08014470 	.word	0x08014470
 8002508:	08014474 	.word	0x08014474
 800250c:	080143dc 	.word	0x080143dc
 8002510:	08014478 	.word	0x08014478
 8002514:	0801447c 	.word	0x0801447c
 8002518:	08013dbc 	.word	0x08013dbc
 800251c:	08014494 	.word	0x08014494
 8002520:	080144ac 	.word	0x080144ac
 8002524:	080144b4 	.word	0x080144b4
        break;
      case 'a':
        switch (u)
 8002528:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800252c:	2b0b      	cmp	r3, #11
 800252e:	d847      	bhi.n	80025c0 <ProcessUserInput+0x8b0>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <ProcessUserInput+0x828>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002569 	.word	0x08002569
 800253c:	08002595 	.word	0x08002595
 8002540:	080025c1 	.word	0x080025c1
 8002544:	080025c1 	.word	0x080025c1
 8002548:	080025c1 	.word	0x080025c1
 800254c:	080025c1 	.word	0x080025c1
 8002550:	080025c1 	.word	0x080025c1
 8002554:	080025c1 	.word	0x080025c1
 8002558:	080025c1 	.word	0x080025c1
 800255c:	080025c1 	.word	0x080025c1
 8002560:	0800257f 	.word	0x0800257f
 8002564:	080025ab 	.word	0x080025ab
        {
          case 0:
            USBSendString("Address set to 0b 10 01 00 0x.\n");
 8002568:	48bb      	ldr	r0, [pc, #748]	; (8002858 <ProcessUserInput+0xb48>)
 800256a:	f000 fe07 	bl	800317c <USBSendString>
            Controller->Sensor.Address = 0b1001000;
 800256e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002572:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2248      	movs	r2, #72	; 0x48
 800257a:	721a      	strb	r2, [r3, #8]
            return;
 800257c:	e1e7      	b.n	800294e <ProcessUserInput+0xc3e>
            break;
          case 10:
            USBSendString("Address set to 0b 10 01 01 0x.\n");
 800257e:	48b7      	ldr	r0, [pc, #732]	; (800285c <ProcessUserInput+0xb4c>)
 8002580:	f000 fdfc 	bl	800317c <USBSendString>
            Controller->Sensor.Address = 0b1001010;
 8002584:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002588:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	224a      	movs	r2, #74	; 0x4a
 8002590:	721a      	strb	r2, [r3, #8]
            return;
 8002592:	e1dc      	b.n	800294e <ProcessUserInput+0xc3e>
            break;
          case 1:
            USBSendString("Address set to 0b 10 01 00 1x.\n");
 8002594:	48b2      	ldr	r0, [pc, #712]	; (8002860 <ProcessUserInput+0xb50>)
 8002596:	f000 fdf1 	bl	800317c <USBSendString>
            Controller->Sensor.Address = 0b1001001;
 800259a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800259e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2249      	movs	r2, #73	; 0x49
 80025a6:	721a      	strb	r2, [r3, #8]
            return;
 80025a8:	e1d1      	b.n	800294e <ProcessUserInput+0xc3e>
            break;
          case 11:
            USBSendString("Address set to 0b 10 01 01 1x.\n");
 80025aa:	48ae      	ldr	r0, [pc, #696]	; (8002864 <ProcessUserInput+0xb54>)
 80025ac:	f000 fde6 	bl	800317c <USBSendString>
            Controller->Sensor.Address = 0b1001011;
 80025b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	224b      	movs	r2, #75	; 0x4b
 80025bc:	721a      	strb	r2, [r3, #8]
            return;
 80025be:	e1c6      	b.n	800294e <ProcessUserInput+0xc3e>
            break;
          default:
            USBSendString("Invalid Address.\n");
 80025c0:	48a9      	ldr	r0, [pc, #676]	; (8002868 <ProcessUserInput+0xb58>)
 80025c2:	f000 fddb 	bl	800317c <USBSendString>
            return;
 80025c6:	e1c2      	b.n	800294e <ProcessUserInput+0xc3e>
        Controller->Sensor.Configured = false;
        Controller->Sensor.State = 0;
        Controller->PID.IntegratorCount = 0;
        break;
      case 'p':
        if (f < 0)
 80025c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025dc:	d503      	bpl.n	80025e6 <ProcessUserInput+0x8d6>
          USBSendString("Invalid value.");
 80025de:	48a3      	ldr	r0, [pc, #652]	; (800286c <ProcessUserInput+0xb5c>)
 80025e0:	f000 fdcc 	bl	800317c <USBSendString>
        {
          snprintf(output, 200, "kp set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Kp = f;
        }
        return;
 80025e4:	e1b3      	b.n	800294e <ProcessUserInput+0xc3e>
          snprintf(output, 200, "kp set to %f.\n", f);
 80025e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd ffc9 	bl	8000588 <__aeabi_f2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	f107 0018 	add.w	r0, r7, #24
 80025fe:	e9cd 2300 	strd	r2, r3, [sp]
 8002602:	4a9b      	ldr	r2, [pc, #620]	; (8002870 <ProcessUserInput+0xb60>)
 8002604:	21c8      	movs	r1, #200	; 0xc8
 8002606:	f00d f93f 	bl	800f888 <sniprintf>
          USBSendString(output);
 800260a:	f107 0318 	add.w	r3, r7, #24
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fdb4 	bl	800317c <USBSendString>
          Controller->PID.Config.Kp = f;
 8002614:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002622:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 800262c:	601a      	str	r2, [r3, #0]
        return;
 800262e:	e18e      	b.n	800294e <ProcessUserInput+0xc3e>
        break;

      case 'i':
        if (f < 0)
 8002630:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002644:	d503      	bpl.n	800264e <ProcessUserInput+0x93e>
          USBSendString("Invalid value.");
 8002646:	4889      	ldr	r0, [pc, #548]	; (800286c <ProcessUserInput+0xb5c>)
 8002648:	f000 fd98 	bl	800317c <USBSendString>
        {
          snprintf(output, 200, "ki set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Ki = f;
        }
        return;
 800264c:	e17f      	b.n	800294e <ProcessUserInput+0xc3e>
          snprintf(output, 200, "ki set to %f.\n", f);
 800264e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd ff95 	bl	8000588 <__aeabi_f2d>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	f107 0018 	add.w	r0, r7, #24
 8002666:	e9cd 2300 	strd	r2, r3, [sp]
 800266a:	4a82      	ldr	r2, [pc, #520]	; (8002874 <ProcessUserInput+0xb64>)
 800266c:	21c8      	movs	r1, #200	; 0xc8
 800266e:	f00d f90b 	bl	800f888 <sniprintf>
          USBSendString(output);
 8002672:	f107 0318 	add.w	r3, r7, #24
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fd80 	bl	800317c <USBSendString>
          Controller->PID.Config.Ki = f;
 800267c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800268a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002694:	601a      	str	r2, [r3, #0]
        return;
 8002696:	e15a      	b.n	800294e <ProcessUserInput+0xc3e>
        break;

      case 'd':
        if (f < 0)
 8002698:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800269c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ac:	d503      	bpl.n	80026b6 <ProcessUserInput+0x9a6>
          USBSendString("Invalid value.");
 80026ae:	486f      	ldr	r0, [pc, #444]	; (800286c <ProcessUserInput+0xb5c>)
 80026b0:	f000 fd64 	bl	800317c <USBSendString>
        {
          snprintf(output, 200, "kd set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Kd = f;
        }
        return;
 80026b4:	e14b      	b.n	800294e <ProcessUserInput+0xc3e>
          snprintf(output, 200, "kd set to %f.\n", f);
 80026b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff61 	bl	8000588 <__aeabi_f2d>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	f107 0018 	add.w	r0, r7, #24
 80026ce:	e9cd 2300 	strd	r2, r3, [sp]
 80026d2:	4a69      	ldr	r2, [pc, #420]	; (8002878 <ProcessUserInput+0xb68>)
 80026d4:	21c8      	movs	r1, #200	; 0xc8
 80026d6:	f00d f8d7 	bl	800f888 <sniprintf>
          USBSendString(output);
 80026da:	f107 0318 	add.w	r3, r7, #24
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fd4c 	bl	800317c <USBSendString>
          Controller->PID.Config.Kd = f;
 80026e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80026fc:	601a      	str	r2, [r3, #0]
        return;
 80026fe:	e126      	b.n	800294e <ProcessUserInput+0xc3e>
        break;

      case 'f':
        if ((f < 0) || (f > 600))
 8002700:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	d40c      	bmi.n	8002730 <ProcessUserInput+0xa20>
 8002716:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800271a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800287c <ProcessUserInput+0xb6c>
 8002726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800272a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272e:	dd03      	ble.n	8002738 <ProcessUserInput+0xa28>
          USBSendString("Invalid value.");
 8002730:	484e      	ldr	r0, [pc, #312]	; (800286c <ProcessUserInput+0xb5c>)
 8002732:	f000 fd23 	bl	800317c <USBSendString>
        {
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
          USBSendString(output);
          Controller->PID.Config.Frequency = f;
        }
        return;
 8002736:	e10a      	b.n	800294e <ProcessUserInput+0xc3e>
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
 8002738:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800273c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fd ff20 	bl	8000588 <__aeabi_f2d>
 8002748:	4604      	mov	r4, r0
 800274a:	460d      	mov	r5, r1
 800274c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002880 <ProcessUserInput+0xb70>
 800275c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002760:	ee16 0a90 	vmov	r0, s13
 8002764:	f7fd ff10 	bl	8000588 <__aeabi_f2d>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	f107 0018 	add.w	r0, r7, #24
 8002770:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002774:	e9cd 4500 	strd	r4, r5, [sp]
 8002778:	4a42      	ldr	r2, [pc, #264]	; (8002884 <ProcessUserInput+0xb74>)
 800277a:	21c8      	movs	r1, #200	; 0xc8
 800277c:	f00d f884 	bl	800f888 <sniprintf>
          USBSendString(output);
 8002780:	f107 0318 	add.w	r3, r7, #24
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fcf9 	bl	800317c <USBSendString>
          Controller->PID.Config.Frequency = f;
 800278a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800278e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002792:	edd3 7a00 	vldr	s15, [r3]
 8002796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800279a:	ee17 3a90 	vmov	r3, s15
 800279e:	b29a      	uxth	r2, r3
 80027a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8a3 265e 	strh.w	r2, [r3, #1630]	; 0x65e
        return;
 80027ae:	e0ce      	b.n	800294e <ProcessUserInput+0xc3e>
        break;


      case 'l':
        if (f < 0)
 80027b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c4:	d503      	bpl.n	80027ce <ProcessUserInput+0xabe>
          USBSendString("Invalid value.");
 80027c6:	4829      	ldr	r0, [pc, #164]	; (800286c <ProcessUserInput+0xb5c>)
 80027c8:	f000 fcd8 	bl	800317c <USBSendString>
        {
          snprintf(output, 200, "Li set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Li = f;
        }
        return;
 80027cc:	e0bf      	b.n	800294e <ProcessUserInput+0xc3e>
          snprintf(output, 200, "Li set to %f.\n", f);
 80027ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fed5 	bl	8000588 <__aeabi_f2d>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	f107 0018 	add.w	r0, r7, #24
 80027e6:	e9cd 2300 	strd	r2, r3, [sp]
 80027ea:	4a27      	ldr	r2, [pc, #156]	; (8002888 <ProcessUserInput+0xb78>)
 80027ec:	21c8      	movs	r1, #200	; 0xc8
 80027ee:	f00d f84b 	bl	800f888 <sniprintf>
          USBSendString(output);
 80027f2:	f107 0318 	add.w	r3, r7, #24
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 fcc0 	bl	800317c <USBSendString>
          Controller->PID.Config.Li = f;
 80027fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800280a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002814:	601a      	str	r2, [r3, #0]
        return;
 8002816:	e09a      	b.n	800294e <ProcessUserInput+0xc3e>
        break;
      case 'h':
        if (u == 0)
 8002818:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800281c:	2b00      	cmp	r3, #0
 800281e:	d103      	bne.n	8002828 <ProcessUserInput+0xb18>
          USBSendString("Invalid value.");
 8002820:	4812      	ldr	r0, [pc, #72]	; (800286c <ProcessUserInput+0xb5c>)
 8002822:	f000 fcab 	bl	800317c <USBSendString>
        {
          snprintf(output, 200, "History set to %u.\n", u);
          USBSendString(output);
          Controller->PID.Config.History = u;
        }
        return;
 8002826:	e092      	b.n	800294e <ProcessUserInput+0xc3e>
          snprintf(output, 200, "History set to %u.\n", u);
 8002828:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800282c:	f107 0018 	add.w	r0, r7, #24
 8002830:	4a16      	ldr	r2, [pc, #88]	; (800288c <ProcessUserInput+0xb7c>)
 8002832:	21c8      	movs	r1, #200	; 0xc8
 8002834:	f00d f828 	bl	800f888 <sniprintf>
          USBSendString(output);
 8002838:	f107 0318 	add.w	r3, r7, #24
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fc9d 	bl	800317c <USBSendString>
          Controller->PID.Config.History = u;
 8002842:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002846:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 8002850:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
        return;
 8002854:	e07b      	b.n	800294e <ProcessUserInput+0xc3e>
 8002856:	bf00      	nop
 8002858:	080144d0 	.word	0x080144d0
 800285c:	080144f0 	.word	0x080144f0
 8002860:	08014510 	.word	0x08014510
 8002864:	08014530 	.word	0x08014530
 8002868:	08014550 	.word	0x08014550
 800286c:	08014564 	.word	0x08014564
 8002870:	08014574 	.word	0x08014574
 8002874:	08014584 	.word	0x08014584
 8002878:	08014594 	.word	0x08014594
 800287c:	44160000 	.word	0x44160000
 8002880:	42200000 	.word	0x42200000
 8002884:	080145a4 	.word	0x080145a4
 8002888:	080145c8 	.word	0x080145c8
 800288c:	080145d8 	.word	0x080145d8
        break;

      case 't':
        snprintf(output, 200, "Target temperature set to %f.\n", f);
 8002890:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fe74 	bl	8000588 <__aeabi_f2d>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	f107 0018 	add.w	r0, r7, #24
 80028a8:	e9cd 2300 	strd	r2, r3, [sp]
 80028ac:	4a2a      	ldr	r2, [pc, #168]	; (8002958 <ProcessUserInput+0xc48>)
 80028ae:	21c8      	movs	r1, #200	; 0xc8
 80028b0:	f00c ffea 	bl	800f888 <sniprintf>
        USBSendString(output);
 80028b4:	f107 0318 	add.w	r3, r7, #24
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fc5f 	bl	800317c <USBSendString>
        Controller->PID.Config.TargetP = f;
 80028be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 80028d6:	601a      	str	r2, [r3, #0]
        return;
 80028d8:	e039      	b.n	800294e <ProcessUserInput+0xc3e>
        break;

      case 'v':
    	  snprintf(output, 200, "Voltage of DAC Channel 0 set to %f.\n", f);
 80028da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fe4f 	bl	8000588 <__aeabi_f2d>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	f107 0018 	add.w	r0, r7, #24
 80028f2:	e9cd 2300 	strd	r2, r3, [sp]
 80028f6:	4a19      	ldr	r2, [pc, #100]	; (800295c <ProcessUserInput+0xc4c>)
 80028f8:	21c8      	movs	r1, #200	; 0xc8
 80028fa:	f00c ffc5 	bl	800f888 <sniprintf>
    	  USBSendString(output);
 80028fe:	f107 0318 	add.w	r3, r7, #24
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fc3a 	bl	800317c <USBSendString>
    	  //Need to implement Voltage for the Dac Channels
        for (uint8_t i = 0; i < 6; i++)
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800290e:	e012      	b.n	8002936 <ProcessUserInput+0xc26>
        {
          Set_Voltage_Peak_to_Peak(&TCB->DAC8718, i, &f);
 8002910:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002914:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800291e:	f107 0210 	add.w	r2, r7, #16
 8002922:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fd56 	bl	80013d8 <Set_Voltage_Peak_to_Peak>
        for (uint8_t i = 0; i < 6; i++)
 800292c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002930:	3301      	adds	r3, #1
 8002932:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8002936:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800293a:	2b05      	cmp	r3, #5
 800293c:	d9e8      	bls.n	8002910 <ProcessUserInput+0xc00>
        }
    	  return;
 800293e:	e006      	b.n	800294e <ProcessUserInput+0xc3e>
    	  break;

      default:
        break;
    }
  }
 8002940:	bf00      	nop
 8002942:	e000      	b.n	8002946 <ProcessUserInput+0xc36>
        break;
 8002944:	bf00      	nop
  USBSendString("Unknown command.\n");
 8002946:	4806      	ldr	r0, [pc, #24]	; (8002960 <ProcessUserInput+0xc50>)
 8002948:	f000 fc18 	bl	800317c <USBSendString>
  return;
 800294c:	bf00      	nop
}
 800294e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002952:	46bd      	mov	sp, r7
 8002954:	bdb0      	pop	{r4, r5, r7, pc}
 8002956:	bf00      	nop
 8002958:	080145ec 	.word	0x080145ec
 800295c:	0801460c 	.word	0x0801460c
 8002960:	08014634 	.word	0x08014634

08002964 <ShowControllerConfig>:

//Show the Configuration of a Controller
void ShowControllerConfig(struct sController* Controller)
{
 8002964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002968:	b0d1      	sub	sp, #324	; 0x144
 800296a:	af0c      	add	r7, sp, #48	; 0x30
 800296c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002970:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002974:	6018      	str	r0, [r3, #0]
  char s1[12];
  char buffer[250];
  FormatTemperature(s1, Controller->PID.Config.TargetP);
 8002976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800297a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fdfe 	bl	8000588 <__aeabi_f2d>
 800298c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002990:	ec41 0b10 	vmov	d0, r0, r1
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fafd 	bl	8002f94 <FormatTemperature>
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 800299a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800299e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	603b      	str	r3, [r7, #0]
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80029a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 80029b6:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fde5 	bl	8000588 <__aeabi_f2d>
 80029be:	4604      	mov	r4, r0
 80029c0:	460d      	mov	r5, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80029c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80029d0:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fdd8 	bl	8000588 <__aeabi_f2d>
 80029d8:	4680      	mov	r8, r0
 80029da:	4689      	mov	r9, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80029dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 80029ea:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fdcb 	bl	8000588 <__aeabi_f2d>
 80029f2:	4682      	mov	sl, r0
 80029f4:	468b      	mov	fp, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80029f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002a04:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fdbe 	bl	8000588 <__aeabi_f2d>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002a10:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002a14:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002a18:	6809      	ldr	r1, [r1, #0]
 8002a1a:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002a1e:	460e      	mov	r6, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002a20:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002a24:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002a28:	6809      	ldr	r1, [r1, #0]
 8002a2a:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002a2e:	f107 0008 	add.w	r0, r7, #8
 8002a32:	910a      	str	r1, [sp, #40]	; 0x28
 8002a34:	9609      	str	r6, [sp, #36]	; 0x24
 8002a36:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002a3a:	9108      	str	r1, [sp, #32]
 8002a3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002a40:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002a44:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a48:	e9cd 4500 	strd	r4, r5, [sp]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4a23      	ldr	r2, [pc, #140]	; (8002adc <ShowControllerConfig+0x178>)
 8002a50:	21c8      	movs	r1, #200	; 0xc8
 8002a52:	f00c ff19 	bl	800f888 <sniprintf>
  USBSendString(buffer);
 8002a56:	f107 0308 	add.w	r3, r7, #8
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fb8e 	bl	800317c <USBSendString>
  switch (Controller->Sensor.Address & 0x03)
 8002a60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	7a1b      	ldrb	r3, [r3, #8]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d81b      	bhi.n	8002aac <ShowControllerConfig+0x148>
 8002a74:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <ShowControllerConfig+0x118>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002a8d 	.word	0x08002a8d
 8002a80:	08002a95 	.word	0x08002a95
 8002a84:	08002a9d 	.word	0x08002a9d
 8002a88:	08002aa5 	.word	0x08002aa5
  {
    case 0:
      USBSendString("00");
 8002a8c:	4814      	ldr	r0, [pc, #80]	; (8002ae0 <ShowControllerConfig+0x17c>)
 8002a8e:	f000 fb75 	bl	800317c <USBSendString>
      break;
 8002a92:	e00c      	b.n	8002aae <ShowControllerConfig+0x14a>
    case 1:
      USBSendString("01");
 8002a94:	4813      	ldr	r0, [pc, #76]	; (8002ae4 <ShowControllerConfig+0x180>)
 8002a96:	f000 fb71 	bl	800317c <USBSendString>
      break;
 8002a9a:	e008      	b.n	8002aae <ShowControllerConfig+0x14a>
    case 2:
      USBSendString("10");
 8002a9c:	4812      	ldr	r0, [pc, #72]	; (8002ae8 <ShowControllerConfig+0x184>)
 8002a9e:	f000 fb6d 	bl	800317c <USBSendString>
      break;
 8002aa2:	e004      	b.n	8002aae <ShowControllerConfig+0x14a>
    case 3:
      USBSendString("11");
 8002aa4:	4811      	ldr	r0, [pc, #68]	; (8002aec <ShowControllerConfig+0x188>)
 8002aa6:	f000 fb69 	bl	800317c <USBSendString>
      break;
 8002aaa:	e000      	b.n	8002aae <ShowControllerConfig+0x14a>
    default:
      break;
 8002aac:	bf00      	nop
  }
  if (Controller->PID.Config.Enabled)
 8002aae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ab2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <ShowControllerConfig+0x164>
    USBSendString("  ENABLED\n");
 8002ac0:	480b      	ldr	r0, [pc, #44]	; (8002af0 <ShowControllerConfig+0x18c>)
 8002ac2:	f000 fb5b 	bl	800317c <USBSendString>
  else
    USBSendString("  DISABLED\n");
}
 8002ac6:	e002      	b.n	8002ace <ShowControllerConfig+0x16a>
    USBSendString("  DISABLED\n");
 8002ac8:	480a      	ldr	r0, [pc, #40]	; (8002af4 <ShowControllerConfig+0x190>)
 8002aca:	f000 fb57 	bl	800317c <USBSendString>
}
 8002ace:	bf00      	nop
 8002ad0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ada:	bf00      	nop
 8002adc:	08014648 	.word	0x08014648
 8002ae0:	080146ac 	.word	0x080146ac
 8002ae4:	080146b0 	.word	0x080146b0
 8002ae8:	080146b4 	.word	0x080146b4
 8002aec:	080146b8 	.word	0x080146b8
 8002af0:	080146bc 	.word	0x080146bc
 8002af4:	080146c8 	.word	0x080146c8

08002af8 <ShowAll>:
//Show the Status of a Controller
//@brief Show the Status of a Controller
//@param Controller The Controller to show
//@param readable If true, show the status in human readable form
void ShowAll(struct sController* Controller, bool readable)
{
 8002af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002afc:	b0b7      	sub	sp, #220	; 0xdc
 8002afe:	af16      	add	r7, sp, #88	; 0x58
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24
 8002b02:	460b      	mov	r3, r1
 8002b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint32_t ADCVal = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint8_t i;
    char target[12];
    FormatTemperature(target, Controller->PID.Config.TargetP);
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fd fd37 	bl	8000588 <__aeabi_f2d>
 8002b1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b1e:	ec41 0b10 	vmov	d0, r0, r1
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fa36 	bl	8002f94 <FormatTemperature>
    char address[3];
    switch (Controller->Sensor.Address & 0x03)
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	7a1b      	ldrb	r3, [r3, #8]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d833      	bhi.n	8002b9c <ShowAll+0xa4>
 8002b34:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <ShowAll+0x44>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b4d 	.word	0x08002b4d
 8002b40:	08002b61 	.word	0x08002b61
 8002b44:	08002b75 	.word	0x08002b75
 8002b48:	08002b89 	.word	0x08002b89
    {
      case 0: strcpy(address, "00"); break;
 8002b4c:	4aaa      	ldr	r2, [pc, #680]	; (8002df8 <ShowAll+0x300>)
 8002b4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	4611      	mov	r1, r2
 8002b56:	8019      	strh	r1, [r3, #0]
 8002b58:	3302      	adds	r3, #2
 8002b5a:	0c12      	lsrs	r2, r2, #16
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	e01e      	b.n	8002b9e <ShowAll+0xa6>
      case 1: strcpy(address, "01"); break;
 8002b60:	4aa6      	ldr	r2, [pc, #664]	; (8002dfc <ShowAll+0x304>)
 8002b62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	4611      	mov	r1, r2
 8002b6a:	8019      	strh	r1, [r3, #0]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	0c12      	lsrs	r2, r2, #16
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e014      	b.n	8002b9e <ShowAll+0xa6>
      case 2: strcpy(address, "10"); break;
 8002b74:	4aa2      	ldr	r2, [pc, #648]	; (8002e00 <ShowAll+0x308>)
 8002b76:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	8019      	strh	r1, [r3, #0]
 8002b80:	3302      	adds	r3, #2
 8002b82:	0c12      	lsrs	r2, r2, #16
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e00a      	b.n	8002b9e <ShowAll+0xa6>
      case 3: strcpy(address, "11"); break;
 8002b88:	4a9e      	ldr	r2, [pc, #632]	; (8002e04 <ShowAll+0x30c>)
 8002b8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	4611      	mov	r1, r2
 8002b92:	8019      	strh	r1, [r3, #0]
 8002b94:	3302      	adds	r3, #2
 8002b96:	0c12      	lsrs	r2, r2, #16
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e000      	b.n	8002b9e <ShowAll+0xa6>
      default: break;
 8002b9c:	bf00      	nop
    }
    char enabled[10];
    if (Controller->PID.Config.Enabled)
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <ShowAll+0xbe>
      strcpy(enabled, "ENABLED ");
 8002ba8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002bac:	4a96      	ldr	r2, [pc, #600]	; (8002e08 <ShowAll+0x310>)
 8002bae:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bb0:	c303      	stmia	r3!, {r0, r1}
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e005      	b.n	8002bc2 <ShowAll+0xca>
    else
      strcpy(enabled, "DISABLED");
 8002bb6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002bba:	4a94      	ldr	r2, [pc, #592]	; (8002e0c <ShowAll+0x314>)
 8002bbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bbe:	c303      	stmia	r3!, {r0, r1}
 8002bc0:	701a      	strb	r2, [r3, #0]
    char average[12], last[12], targetp[12];
    FormatTemperature(average, Controller->Sensor.Average);
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8002bc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd0:	eef0 0a67 	vmov.f32	s1, s15
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 f9dd 	bl	8002f94 <FormatTemperature>
    FormatTemperature(last, Controller->Sensor.LastTemperature);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
 8002be0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002be4:	eeb0 0a47 	vmov.f32	s0, s14
 8002be8:	eef0 0a67 	vmov.f32	s1, s15
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 f9d1 	bl	8002f94 <FormatTemperature>
    FormatTemperature(targetp, Controller->PID.Config.TargetP);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fcc4 	bl	8000588 <__aeabi_f2d>
 8002c00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c04:	ec41 0b10 	vmov	d0, r0, r1
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f9c3 	bl	8002f94 <FormatTemperature>

    char sensor[15];
    switch (Controller->Sensor.State)
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d839      	bhi.n	8002c8c <ShowAll+0x194>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <ShowAll+0x128>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c35 	.word	0x08002c35
 8002c24:	08002c45 	.word	0x08002c45
 8002c28:	08002c57 	.word	0x08002c57
 8002c2c:	08002c6b 	.word	0x08002c6b
 8002c30:	08002c79 	.word	0x08002c79
    {
      case TMP117_STATE_UNKNOWN:      strcpy(sensor, "Unknown");       break;
 8002c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c38:	4a75      	ldr	r2, [pc, #468]	; (8002e10 <ShowAll+0x318>)
 8002c3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c42:	e024      	b.n	8002c8e <ShowAll+0x196>
      case TMP117_STATE_INITFAILED:   strcpy(sensor, "Config failed"); break;
 8002c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c48:	4a72      	ldr	r2, [pc, #456]	; (8002e14 <ShowAll+0x31c>)
 8002c4a:	461c      	mov	r4, r3
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c50:	c407      	stmia	r4!, {r0, r1, r2}
 8002c52:	8023      	strh	r3, [r4, #0]
 8002c54:	e01b      	b.n	8002c8e <ShowAll+0x196>
      case TMP117_STATE_REQUESTNOACK: strcpy(sensor, "Req failed");    break;
 8002c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c5a:	4a6f      	ldr	r2, [pc, #444]	; (8002e18 <ShowAll+0x320>)
 8002c5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c5e:	c303      	stmia	r3!, {r0, r1}
 8002c60:	801a      	strh	r2, [r3, #0]
 8002c62:	3302      	adds	r3, #2
 8002c64:	0c12      	lsrs	r2, r2, #16
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e011      	b.n	8002c8e <ShowAll+0x196>
      case TMP117_STATE_RECEIVEFAIL:  strcpy(sensor, "No response");   break;
 8002c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c6e:	4a6b      	ldr	r2, [pc, #428]	; (8002e1c <ShowAll+0x324>)
 8002c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c76:	e00a      	b.n	8002c8e <ShowAll+0x196>
      case TMP117_STATE_VALIDTEMP:    strcpy(sensor, "OK");            break;
 8002c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c7c:	4a68      	ldr	r2, [pc, #416]	; (8002e20 <ShowAll+0x328>)
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	4611      	mov	r1, r2
 8002c82:	8019      	strh	r1, [r3, #0]
 8002c84:	3302      	adds	r3, #2
 8002c86:	0c12      	lsrs	r2, r2, #16
 8002c88:	701a      	strb	r2, [r3, #0]
 8002c8a:	e000      	b.n	8002c8e <ShowAll+0x196>
      default: break;
 8002c8c:	bf00      	nop
    }

    static char buffer[250];

    if (readable)
 8002c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80d2 	beq.w	8002e3c <ShowAll+0x344>
    {
      snprintf(buffer, 200, "C%u: kp=%5.2f   ep=% 7.1f    temp=%8s  freq: %04u  %s\n", Controller->Heater, Controller->PID.Config.Kp, 100 * Controller->PID.Ep, last, Controller->PID.Config.Frequency, enabled);
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	461e      	mov	r6, r3
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc6e 	bl	8000588 <__aeabi_f2d>
 8002cac:	4604      	mov	r4, r0
 8002cae:	460d      	mov	r5, r1
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002e38 <ShowAll+0x340>
 8002cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc2:	ee17 0a90 	vmov	r0, s15
 8002cc6:	f7fd fc5f 	bl	8000588 <__aeabi_f2d>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd0:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002cda:	9106      	str	r1, [sp, #24]
 8002cdc:	9005      	str	r0, [sp, #20]
 8002cde:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002ce2:	9104      	str	r1, [sp, #16]
 8002ce4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ce8:	e9cd 4500 	strd	r4, r5, [sp]
 8002cec:	4633      	mov	r3, r6
 8002cee:	4a4d      	ldr	r2, [pc, #308]	; (8002e24 <ShowAll+0x32c>)
 8002cf0:	21c8      	movs	r1, #200	; 0xc8
 8002cf2:	484d      	ldr	r0, [pc, #308]	; (8002e28 <ShowAll+0x330>)
 8002cf4:	f00c fdc8 	bl	800f888 <sniprintf>
      USBSendString(buffer);
 8002cf8:	484b      	ldr	r0, [pc, #300]	; (8002e28 <ShowAll+0x330>)
 8002cfa:	f000 fa3f 	bl	800317c <USBSendString>
      snprintf(buffer, 200,  "  : kd=%5.2f   ed=% 7.1f     avg=%8s  i2c: %2s\n", Controller->PID.Config.Kd, 100 * Controller->PID.Ed, average, address);
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fc3e 	bl	8000588 <__aeabi_f2d>
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	460d      	mov	r5, r1
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002e38 <ShowAll+0x340>
 8002d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d22:	ee17 0a90 	vmov	r0, s15
 8002d26:	f7fd fc2f 	bl	8000588 <__aeabi_f2d>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002d32:	9105      	str	r1, [sp, #20]
 8002d34:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002d38:	9104      	str	r1, [sp, #16]
 8002d3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d3e:	e9cd 4500 	strd	r4, r5, [sp]
 8002d42:	4a3a      	ldr	r2, [pc, #232]	; (8002e2c <ShowAll+0x334>)
 8002d44:	21c8      	movs	r1, #200	; 0xc8
 8002d46:	4838      	ldr	r0, [pc, #224]	; (8002e28 <ShowAll+0x330>)
 8002d48:	f00c fd9e 	bl	800f888 <sniprintf>
      USBSendString(buffer);
 8002d4c:	4836      	ldr	r0, [pc, #216]	; (8002e28 <ShowAll+0x330>)
 8002d4e:	f000 fa15 	bl	800317c <USBSendString>
      snprintf(buffer, 200,  "  : ki=%5.2f   ei=% 7.1f  target=%8s  history=%3u\n", Controller->PID.Config.Ki, 100 * Controller->PID.Ei, target, Controller->PID.Config.History);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fc14 	bl	8000588 <__aeabi_f2d>
 8002d60:	4604      	mov	r4, r0
 8002d62:	460d      	mov	r5, r1
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002d6a:	edd3 7a00 	vldr	s15, [r3]
 8002d6e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002e38 <ShowAll+0x340>
 8002d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d76:	ee17 0a90 	vmov	r0, s15
 8002d7a:	f7fd fc05 	bl	8000588 <__aeabi_f2d>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d84:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
 8002d88:	9105      	str	r1, [sp, #20]
 8002d8a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002d8e:	9104      	str	r1, [sp, #16]
 8002d90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d94:	e9cd 4500 	strd	r4, r5, [sp]
 8002d98:	4a25      	ldr	r2, [pc, #148]	; (8002e30 <ShowAll+0x338>)
 8002d9a:	21c8      	movs	r1, #200	; 0xc8
 8002d9c:	4822      	ldr	r0, [pc, #136]	; (8002e28 <ShowAll+0x330>)
 8002d9e:	f00c fd73 	bl	800f888 <sniprintf>
      USBSendString(buffer);
 8002da2:	4821      	ldr	r0, [pc, #132]	; (8002e28 <ShowAll+0x330>)
 8002da4:	f000 f9ea 	bl	800317c <USBSendString>
      snprintf(buffer, 200,  "  : li=%5.2f  eff=% 7.1f  sensor: %s\n\n", Controller->PID.Config.Li, 100 * Controller->PID.Effort, sensor);
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fbe9 	bl	8000588 <__aeabi_f2d>
 8002db6:	4604      	mov	r4, r0
 8002db8:	460d      	mov	r5, r1
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002dc0:	edd3 7a00 	vldr	s15, [r3]
 8002dc4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002e38 <ShowAll+0x340>
 8002dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dcc:	ee17 0a90 	vmov	r0, s15
 8002dd0:	f7fd fbda 	bl	8000588 <__aeabi_f2d>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002ddc:	9104      	str	r1, [sp, #16]
 8002dde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002de2:	e9cd 4500 	strd	r4, r5, [sp]
 8002de6:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <ShowAll+0x33c>)
 8002de8:	21c8      	movs	r1, #200	; 0xc8
 8002dea:	480f      	ldr	r0, [pc, #60]	; (8002e28 <ShowAll+0x330>)
 8002dec:	f00c fd4c 	bl	800f888 <sniprintf>
      USBSendString(buffer);
 8002df0:	480d      	ldr	r0, [pc, #52]	; (8002e28 <ShowAll+0x330>)
 8002df2:	f000 f9c3 	bl	800317c <USBSendString>
      USBSendString(buffer);
      //}

//      HAL_Delay(1); // don't butcher our buffer before we're done with it
    }
}
 8002df6:	e0b4      	b.n	8002f62 <ShowAll+0x46a>
 8002df8:	080146ac 	.word	0x080146ac
 8002dfc:	080146b0 	.word	0x080146b0
 8002e00:	080146b4 	.word	0x080146b4
 8002e04:	080146b8 	.word	0x080146b8
 8002e08:	0801477c 	.word	0x0801477c
 8002e0c:	08014788 	.word	0x08014788
 8002e10:	08014794 	.word	0x08014794
 8002e14:	0801479c 	.word	0x0801479c
 8002e18:	080147ac 	.word	0x080147ac
 8002e1c:	080147b8 	.word	0x080147b8
 8002e20:	080147c4 	.word	0x080147c4
 8002e24:	080147c8 	.word	0x080147c8
 8002e28:	20000308 	.word	0x20000308
 8002e2c:	08014800 	.word	0x08014800
 8002e30:	08014830 	.word	0x08014830
 8002e34:	08014864 	.word	0x08014864
 8002e38:	42c80000 	.word	0x42c80000
        ShowRawHeader();
 8002e3c:	f000 f89a 	bl	8002f74 <ShowRawHeader>
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	781b      	ldrb	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002e44:	61fb      	str	r3, [r7, #28]
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002e4c:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fb9a 	bl	8000588 <__aeabi_f2d>
 8002e54:	4680      	mov	r8, r0
 8002e56:	4689      	mov	r9, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002e5e:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fb91 	bl	8000588 <__aeabi_f2d>
 8002e66:	4682      	mov	sl, r0
 8002e68:	468b      	mov	fp, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002e70:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd fb88 	bl	8000588 <__aeabi_f2d>
 8002e78:	e9c7 0104 	strd	r0, r1, [r7, #16]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002e82:	edd3 7a00 	vldr	s15, [r3]
 8002e86:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 8002e38 <ShowAll+0x340>
 8002e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002e8e:	ee17 0a90 	vmov	r0, s15
 8002e92:	f7fd fb79 	bl	8000588 <__aeabi_f2d>
 8002e96:	e9c7 0102 	strd	r0, r1, [r7, #8]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002ea0:	edd3 7a00 	vldr	s15, [r3]
 8002ea4:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 8002e38 <ShowAll+0x340>
 8002ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002eac:	ee17 0a90 	vmov	r0, s15
 8002eb0:	f7fd fb6a 	bl	8000588 <__aeabi_f2d>
 8002eb4:	e9c7 0100 	strd	r0, r1, [r7]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002ebe:	edd3 7a00 	vldr	s15, [r3]
 8002ec2:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8002e38 <ShowAll+0x340>
 8002ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002eca:	ee17 0a90 	vmov	r0, s15
 8002ece:	f7fd fb5b 	bl	8000588 <__aeabi_f2d>
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	460d      	mov	r5, r1
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 8002e38 <ShowAll+0x340>
 8002ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002ee8:	ee17 0a90 	vmov	r0, s15
 8002eec:	f7fd fb4c 	bl	8000588 <__aeabi_f2d>
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	f893 365d 	ldrb.w	r3, [r3, #1629]	; 0x65d
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002ef6:	461e      	mov	r6, r3
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	f8b3 365e 	ldrh.w	r3, [r3, #1630]	; 0x65e
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002efe:	461a      	mov	r2, r3
 8002f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f04:	9315      	str	r3, [sp, #84]	; 0x54
 8002f06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002f0a:	9314      	str	r3, [sp, #80]	; 0x50
 8002f0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8002f0e:	9612      	str	r6, [sp, #72]	; 0x48
 8002f10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f14:	9311      	str	r3, [sp, #68]	; 0x44
 8002f16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f1a:	9310      	str	r3, [sp, #64]	; 0x40
 8002f1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f20:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f26:	930e      	str	r3, [sp, #56]	; 0x38
 8002f28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002f2c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002f30:	ed97 7b00 	vldr	d7, [r7]
 8002f34:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002f38:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002f40:	ed97 7b04 	vldr	d7, [r7, #16]
 8002f44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002f48:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002f4c:	e9cd 8900 	strd	r8, r9, [sp]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	4a06      	ldr	r2, [pc, #24]	; (8002f6c <ShowAll+0x474>)
 8002f54:	21c8      	movs	r1, #200	; 0xc8
 8002f56:	4806      	ldr	r0, [pc, #24]	; (8002f70 <ShowAll+0x478>)
 8002f58:	f00c fc96 	bl	800f888 <sniprintf>
      USBSendString(buffer);
 8002f5c:	4804      	ldr	r0, [pc, #16]	; (8002f70 <ShowAll+0x478>)
 8002f5e:	f000 f90d 	bl	800317c <USBSendString>
}
 8002f62:	bf00      	nop
 8002f64:	3784      	adds	r7, #132	; 0x84
 8002f66:	46bd      	mov	sp, r7
 8002f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f6c:	0801488c 	.word	0x0801488c
 8002f70:	20000308 	.word	0x20000308

08002f74 <ShowRawHeader>:


//Prints the header for the raw data
void ShowRawHeader(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  static char buffer[250];
  snprintf(buffer, 200,  "Chan\t  kp\t  kd\t  ki\t    ep\t    ed\t    ei\t  effort temp\t         average          target        i2c\thist\tfreq\tenabled\t       sensor\n");
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <ShowRawHeader+0x18>)
 8002f7a:	21c8      	movs	r1, #200	; 0xc8
 8002f7c:	4804      	ldr	r0, [pc, #16]	; (8002f90 <ShowRawHeader+0x1c>)
 8002f7e:	f00c fc83 	bl	800f888 <sniprintf>
  USBSendString(buffer);
 8002f82:	4803      	ldr	r0, [pc, #12]	; (8002f90 <ShowRawHeader+0x1c>)
 8002f84:	f000 f8fa 	bl	800317c <USBSendString>
//  HAL_Delay(1); // don't butcher our buffer before we're done with it
}
 8002f88:	bf00      	nop
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	080148dc 	.word	0x080148dc
 8002f90:	20000404 	.word	0x20000404

08002f94 <FormatTemperature>:


//Formats the Float to fit into the Temperature Display
void FormatTemperature(char* buffer, double temp)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	ed87 0b00 	vstr	d0, [r7]
  if (temp > -100)
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <FormatTemperature+0x48>)
 8002fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002faa:	f7fd fdd5 	bl	8000b58 <__aeabi_dcmpgt>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d009      	beq.n	8002fc8 <FormatTemperature+0x34>
    snprintf(buffer, 10, "% 7.3fC", temp);
 8002fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fb8:	e9cd 2300 	strd	r2, r3, [sp]
 8002fbc:	4a08      	ldr	r2, [pc, #32]	; (8002fe0 <FormatTemperature+0x4c>)
 8002fbe:	210a      	movs	r1, #10
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f00c fc61 	bl	800f888 <sniprintf>
  else
    snprintf(buffer, 10, "  error ");
}
 8002fc6:	e004      	b.n	8002fd2 <FormatTemperature+0x3e>
    snprintf(buffer, 10, "  error ");
 8002fc8:	4a06      	ldr	r2, [pc, #24]	; (8002fe4 <FormatTemperature+0x50>)
 8002fca:	210a      	movs	r1, #10
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f00c fc5b 	bl	800f888 <sniprintf>
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	c0590000 	.word	0xc0590000
 8002fe0:	08014960 	.word	0x08014960
 8002fe4:	08014968 	.word	0x08014968

08002fe8 <Controller_InitStruct>:
#include "Controller.h"




void Controller_InitStruct(struct sController* s, struct sTMP117 *t,uint8_t heater){
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002ff4:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002ff8:	6018      	str	r0, [r3, #0]
 8002ffa:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002ffe:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8003002:	6019      	str	r1, [r3, #0]
 8003004:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003008:	f2a3 4339 	subw	r3, r3, #1081	; 0x439
 800300c:	701a      	strb	r2, [r3, #0]
  struct sPID PID;
  PID_InitStruct(&PID);
 800300e:	f107 0310 	add.w	r3, r7, #16
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fa2c 	bl	8001470 <PID_InitStruct>

  s->Heater = heater;
 8003018:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800301c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8003026:	f2a2 4239 	subw	r2, r2, #1081	; 0x439
 800302a:	7812      	ldrb	r2, [r2, #0]
 800302c:	701a      	strb	r2, [r3, #0]
  s->Sensor = *t;
 800302e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003032:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800303c:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	3308      	adds	r3, #8
 8003044:	4611      	mov	r1, r2
 8003046:	f44f 720a 	mov.w	r2, #552	; 0x228
 800304a:	4618      	mov	r0, r3
 800304c:	f00b fcde 	bl	800ea0c <memcpy>
  s->PID = PID;
 8003050:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003054:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800305e:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8003062:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003066:	4611      	mov	r1, r2
 8003068:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800306c:	4618      	mov	r0, r3
 800306e:	f00b fccd 	bl	800ea0c <memcpy>
}
 8003072:	bf00      	nop
 8003074:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <Controller_SetHeater>:

// this doesn't sit in the struct because we want something global that the interrupt can call
//This Has been Edited so that it can be used in the TCB
void Controller_SetHeater(uint8_t heater, bool state)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	460a      	mov	r2, r1
 8003086:	71fb      	strb	r3, [r7, #7]
 8003088:	4613      	mov	r3, r2
 800308a:	71bb      	strb	r3, [r7, #6]
  //For the TCB
  uint16_t Pin;
  GPIO_TypeDef* Port;
  Port = GPIOC;
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <Controller_SetHeater+0x40>)
 800308e:	60fb      	str	r3, [r7, #12]
  Pin = GPIO_PIN_5;
 8003090:	2320      	movs	r3, #32
 8003092:	817b      	strh	r3, [r7, #10]
  
  if (state)
 8003094:	79bb      	ldrb	r3, [r7, #6]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <Controller_SetHeater+0x2c>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 800309a:	897b      	ldrh	r3, [r7, #10]
 800309c:	2201      	movs	r2, #1
 800309e:	4619      	mov	r1, r3
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f001 fd75 	bl	8004b90 <HAL_GPIO_WritePin>
  else
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);

}
 80030a6:	e005      	b.n	80030b4 <Controller_SetHeater+0x38>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 80030a8:	897b      	ldrh	r3, [r7, #10]
 80030aa:	2200      	movs	r2, #0
 80030ac:	4619      	mov	r1, r3
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f001 fd6e 	bl	8004b90 <HAL_GPIO_WritePin>
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40020800 	.word	0x40020800

080030c0 <Controller_WipeConfig>:

void Controller_WipeConfig(struct sController* Controller)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  Controller_InitStruct(Controller, &Controller->Sensor, 0);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3308      	adds	r3, #8
 80030cc:	2200      	movs	r2, #0
 80030ce:	4619      	mov	r1, r3
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff89 	bl	8002fe8 <Controller_InitStruct>
  printf("Cannot Save No EEPROM");
 80030d6:	4803      	ldr	r0, [pc, #12]	; (80030e4 <Controller_WipeConfig+0x24>)
 80030d8:	f00c fb42 	bl	800f760 <iprintf>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	08014974 	.word	0x08014974

080030e8 <Controller_Step>:



void Controller_Step(struct sController* Controller)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint8_t i = Controller->Heater - 1;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	75fb      	strb	r3, [r7, #23]
  float temp, eff;
  if (Controller->PID.Config.Enabled == false)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <Controller_Step+0x28>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <Controller_Step+0x8c>)
 800310a:	2264      	movs	r2, #100	; 0x64
 800310c:	701a      	strb	r2, [r3, #0]
    return;
 800310e:	e02d      	b.n	800316c <Controller_Step+0x84>
  }
  if (Controller->Sensor.State != TMP117_STATE_VALIDTEMP)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8003116:	2b04      	cmp	r3, #4
 8003118:	d003      	beq.n	8003122 <Controller_Step+0x3a>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <Controller_Step+0x8c>)
 800311c:	2264      	movs	r2, #100	; 0x64
 800311e:	701a      	strb	r2, [r3, #0]
    return;
 8003120:	e024      	b.n	800316c <Controller_Step+0x84>
  }

  temp = Controller->Sensor.Average;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	f7fd fd7c 	bl	8000c28 <__aeabi_d2f>
 8003130:	4603      	mov	r3, r0
 8003132:	613b      	str	r3, [r7, #16]
  eff = PID_CalculateEffort(&Controller->PID, temp);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800313a:	ed97 0a04 	vldr	s0, [r7, #16]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fad4 	bl	80016ec <PID_CalculateEffort>
 8003144:	ed87 0a03 	vstr	s0, [r7, #12]
  // dwell is a value between 0 and 100 which tells the heater controller how many
  // heater ticks the heater spends off. A complete heater cycle is 200 ticks.
  // For a 40% duty cycle (effort), dwell becomes 60, making the heater off for 60,
  // on for 80, and off for another 60. This weird design causes heaters with
  // different effort values to turn on and off at different times.
  HeaterDwell = 100 * (1 - eff);
 8003148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800314c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003154:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003178 <Controller_Step+0x90>
 8003158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800315c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003160:	edc7 7a00 	vstr	s15, [r7]
 8003164:	783b      	ldrb	r3, [r7, #0]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	4b02      	ldr	r3, [pc, #8]	; (8003174 <Controller_Step+0x8c>)
 800316a:	701a      	strb	r2, [r3, #0]
}
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000010 	.word	0x20000010
 8003178:	42c80000 	.word	0x42c80000

0800317c <USBSendString>:
   }
   return --i;
}

void USBSendString(char* buf)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  int i, res;
  for (i=0;i<50; i++)
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	e013      	b.n	80031b2 <USBSendString+0x36>
  {
    res = CDC_Transmit_FS((uint8_t *)buf, strlen(buf));
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd f83a 	bl	8000204 <strlen>
 8003190:	4603      	mov	r3, r0
 8003192:	b29b      	uxth	r3, r3
 8003194:	4619      	mov	r1, r3
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f00a ffb2 	bl	800e100 <CDC_Transmit_FS>
 800319c:	4603      	mov	r3, r0
 800319e:	60bb      	str	r3, [r7, #8]
    if (res == USBD_OK)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <USBSendString+0x3e>
      return;

    HAL_Delay(1);
 80031a6:	2001      	movs	r0, #1
 80031a8:	f001 f9e0 	bl	800456c <HAL_Delay>
  for (i=0;i<50; i++)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3301      	adds	r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b31      	cmp	r3, #49	; 0x31
 80031b6:	dde8      	ble.n	800318a <USBSendString+0xe>
 80031b8:	e000      	b.n	80031bc <USBSendString+0x40>
      return;
 80031ba:	bf00      	nop
  }
}
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <InitDWTTimer>:

void InitDWTTimer(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <InitDWTTimer+0x2c>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a08      	ldr	r2, [pc, #32]	; (80031f0 <InitDWTTimer+0x2c>)
 80031ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d2:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <InitDWTTimer+0x30>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk ; // enable the counter
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <InitDWTTimer+0x30>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a05      	ldr	r2, [pc, #20]	; (80031f4 <InitDWTTimer+0x30>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6013      	str	r3, [r2, #0]
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000edf0 	.word	0xe000edf0
 80031f4:	e0001000 	.word	0xe0001000

080031f8 <Delay_us>:

void Delay_us(uint32_t us)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <Delay_us+0x40>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0d      	ldr	r2, [pc, #52]	; (800323c <Delay_us+0x44>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0c9b      	lsrs	r3, r3, #18
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	60fb      	str	r3, [r7, #12]
  volatile uint32_t start = DWT->CYCCNT;
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <Delay_us+0x48>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	60bb      	str	r3, [r7, #8]
  do  {
  } while((DWT->CYCCNT - start) < cycles);
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <Delay_us+0x48>)
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	1ad2      	subs	r2, r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	429a      	cmp	r2, r3
 8003226:	d3f8      	bcc.n	800321a <Delay_us+0x22>
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000014 	.word	0x20000014
 800323c:	431bde83 	.word	0x431bde83
 8003240:	e0001000 	.word	0xe0001000

08003244 <replacestr>:
    return un.u;
}

// in-place string replacement which only works if the new string is smaller than the old string
void replacestr(uint8_t *buffer, const char *search, const char *replace)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
     char *sp;
     char* line = (char*) buffer;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
     if ((sp = strstr(line, search)) == NULL) {
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003258:	f00c fbdb 	bl	800fa12 <strstr>
 800325c:	6238      	str	r0, [r7, #32]
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d023      	beq.n	80032ac <replacestr+0x68>
         return;
     }
     int search_len = strlen(search);
 8003264:	68b8      	ldr	r0, [r7, #8]
 8003266:	f7fc ffcd 	bl	8000204 <strlen>
 800326a:	4603      	mov	r3, r0
 800326c:	61fb      	str	r3, [r7, #28]
     int replace_len = strlen(replace);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fc ffc8 	bl	8000204 <strlen>
 8003274:	4603      	mov	r3, r0
 8003276:	61bb      	str	r3, [r7, #24]
     int tail_len = strlen(sp+search_len);
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	6a3a      	ldr	r2, [r7, #32]
 800327c:	4413      	add	r3, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f7fc ffc0 	bl	8000204 <strlen>
 8003284:	4603      	mov	r3, r0
 8003286:	617b      	str	r3, [r7, #20]

     memmove(sp+replace_len,sp+search_len,tail_len+1);
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	18d0      	adds	r0, r2, r3
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	6a3a      	ldr	r2, [r7, #32]
 8003292:	18d1      	adds	r1, r2, r3
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	3301      	adds	r3, #1
 8003298:	461a      	mov	r2, r3
 800329a:	f00b fbc5 	bl	800ea28 <memmove>
     memcpy(sp, replace, replace_len);
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	461a      	mov	r2, r3
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	6a38      	ldr	r0, [r7, #32]
 80032a6:	f00b fbb1 	bl	800ea0c <memcpy>
 80032aa:	e000      	b.n	80032ae <replacestr+0x6a>
         return;
 80032ac:	bf00      	nop
}
 80032ae:	3728      	adds	r7, #40	; 0x28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80032bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80032c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80032cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80032d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80032d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80032dc:	e000      	b.n	80032e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80032de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80032e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f9      	beq.n	80032de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80032ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80032f4:	687b      	ldr	r3, [r7, #4]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This Intterupot is called every .25ms Will Toggle the State of the Dac Channels
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a6c      	ldr	r2, [pc, #432]	; (80034c0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d149      	bne.n	80033a8 <HAL_TIM_PeriodElapsedCallback+0xa4>
  {
    //Syncronous Update of the DACs
    for (int i = 0; i < 6; i++){
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	e041      	b.n	800339e <HAL_TIM_PeriodElapsedCallback+0x9a>
      if(TCB.DAC8718.DAC_Channels[i].enabled){
 800331a:	4a6a      	ldr	r2, [pc, #424]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	33ce      	adds	r3, #206	; 0xce
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	7a9b      	ldrb	r3, [r3, #10]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d036      	beq.n	8003398 <HAL_TIM_PeriodElapsedCallback+0x94>
        if(TCB.DAC8718.DAC_Channels[i].state_high){
 800332a:	4a66      	ldr	r2, [pc, #408]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	33ce      	adds	r3, #206	; 0xce
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	7a5b      	ldrb	r3, [r3, #9]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d017      	beq.n	800336a <HAL_TIM_PeriodElapsedCallback+0x66>

          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].lower_bound);
 800333a:	4a62      	ldr	r2, [pc, #392]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	33ce      	adds	r3, #206	; 0xce
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4413      	add	r3, r2
 8003344:	7a19      	ldrb	r1, [r3, #8]
 8003346:	4a5f      	ldr	r2, [pc, #380]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	33ce      	adds	r3, #206	; 0xce
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	88db      	ldrh	r3, [r3, #6]
 8003352:	461a      	mov	r2, r3
 8003354:	485c      	ldr	r0, [pc, #368]	; (80034c8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003356:	f7fd ff69 	bl	800122c <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = false;
 800335a:	4a5a      	ldr	r2, [pc, #360]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	33ce      	adds	r3, #206	; 0xce
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	2200      	movs	r2, #0
 8003366:	725a      	strb	r2, [r3, #9]
 8003368:	e016      	b.n	8003398 <HAL_TIM_PeriodElapsedCallback+0x94>
        }else{
          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].upper_bound);
 800336a:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	33ce      	adds	r3, #206	; 0xce
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	7a19      	ldrb	r1, [r3, #8]
 8003376:	4a53      	ldr	r2, [pc, #332]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	33ce      	adds	r3, #206	; 0xce
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4413      	add	r3, r2
 8003380:	889b      	ldrh	r3, [r3, #4]
 8003382:	461a      	mov	r2, r3
 8003384:	4850      	ldr	r0, [pc, #320]	; (80034c8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003386:	f7fd ff51 	bl	800122c <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = true;
 800338a:	4a4e      	ldr	r2, [pc, #312]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	33ce      	adds	r3, #206	; 0xce
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	2201      	movs	r2, #1
 8003396:	725a      	strb	r2, [r3, #9]
    for (int i = 0; i < 6; i++){
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b05      	cmp	r3, #5
 80033a2:	ddba      	ble.n	800331a <HAL_TIM_PeriodElapsedCallback+0x16>

        }
      }
    }//End For
    Syncronous_Update();
 80033a4:	f7fd ffe1 	bl	800136a <Syncronous_Update>
  }//End Timer 2


//--------------------This is from Damons Code-----------------------
  uint8_t i;
  if (htim == &htim6)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a48      	ldr	r2, [pc, #288]	; (80034cc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d123      	bne.n	80033f8 <HAL_TIM_PeriodElapsedCallback+0xf4>
  {
    HeaterSubtick += HeaterFrequency;
 80033b0:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4413      	add	r3, r2
 80033be:	b29a      	uxth	r2, r3
 80033c0:	4b44      	ldr	r3, [pc, #272]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80033c2:	801a      	strh	r2, [r3, #0]
    if (HeaterSubtick > 1000){
 80033c4:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033ce:	d913      	bls.n	80033f8 <HAL_TIM_PeriodElapsedCallback+0xf4>
        HeaterTick = (HeaterTick + 1) % 200;
 80033d0:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3301      	adds	r3, #1
 80033d8:	4a40      	ldr	r2, [pc, #256]	; (80034dc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80033da:	fb82 1203 	smull	r1, r2, r2, r3
 80033de:	1191      	asrs	r1, r2, #6
 80033e0:	17da      	asrs	r2, r3, #31
 80033e2:	1a8a      	subs	r2, r1, r2
 80033e4:	21c8      	movs	r1, #200	; 0xc8
 80033e6:	fb01 f202 	mul.w	r2, r1, r2
 80033ea:	1a9a      	subs	r2, r3, r2
 80033ec:	b292      	uxth	r2, r2
 80033ee:	4b3a      	ldr	r3, [pc, #232]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80033f0:	801a      	strh	r2, [r3, #0]
        HeaterSubtick = 0;
 80033f2:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	801a      	strh	r2, [r3, #0]
    }
  }//End Timer 3

  if ((HeaterTick > HeaterDwell)&& (HeaterTick < (200 - HeaterDwell))){
 80033f8:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	b29a      	uxth	r2, r3
 8003400:	4b35      	ldr	r3, [pc, #212]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	429a      	cmp	r2, r3
 8003408:	d210      	bcs.n	800342c <HAL_TIM_PeriodElapsedCallback+0x128>
 800340a:	4b33      	ldr	r3, [pc, #204]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800341c:	429a      	cmp	r2, r3
 800341e:	da05      	bge.n	800342c <HAL_TIM_PeriodElapsedCallback+0x128>
        Controller_SetHeater(i, true);
 8003420:	7afb      	ldrb	r3, [r7, #11]
 8003422:	2101      	movs	r1, #1
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fe29 	bl	800307c <Controller_SetHeater>
 800342a:	e004      	b.n	8003436 <HAL_TIM_PeriodElapsedCallback+0x132>
  }else{
        Controller_SetHeater(i, false);
 800342c:	7afb      	ldrb	r3, [r7, #11]
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fe23 	bl	800307c <Controller_SetHeater>
  }//Dictates If heater is on or off

  //Removed ADC stuff

  if (htim == &htim4)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a2a      	ldr	r2, [pc, #168]	; (80034e4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d13c      	bne.n	80034b8 <HAL_TIM_PeriodElapsedCallback+0x1b4>
  {
    ClockTick = (ClockTick + 1) % 100;
 800343e:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	3301      	adds	r3, #1
 8003446:	4a25      	ldr	r2, [pc, #148]	; (80034dc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003448:	fb82 1203 	smull	r1, r2, r2, r3
 800344c:	1151      	asrs	r1, r2, #5
 800344e:	17da      	asrs	r2, r3, #31
 8003450:	1a8a      	subs	r2, r1, r2
 8003452:	2164      	movs	r1, #100	; 0x64
 8003454:	fb01 f202 	mul.w	r2, r1, r2
 8003458:	1a9a      	subs	r2, r3, r2
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800345e:	701a      	strb	r2, [r3, #0]
    // this should be after the ClockTick increment
    if (ClockTick == 0)
 8003460:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_TIM_PeriodElapsedCallback+0x174>
      ElapsedSeconds++;
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	3301      	adds	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8003476:	801a      	strh	r2, [r3, #0]

    if (++Ticks_TMP117 >= 13)
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	3301      	adds	r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8003484:	4619      	mov	r1, r3
 8003486:	7011      	strb	r1, [r2, #0]
 8003488:	2b0c      	cmp	r3, #12
 800348a:	d905      	bls.n	8003498 <HAL_TIM_PeriodElapsedCallback+0x194>
    {
      Ticks_TMP117 = 0;
 800348c:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
      DoSampleTMP117 = true;
 8003492:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]
    }

    if (++Ticks_CalculatePWM >= 100)
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034a4:	4619      	mov	r1, r3
 80034a6:	7011      	strb	r1, [r2, #0]
 80034a8:	2b63      	cmp	r3, #99	; 0x63
 80034aa:	d905      	bls.n	80034b8 <HAL_TIM_PeriodElapsedCallback+0x1b4>
    {
      Ticks_CalculatePWM = 0;
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
      DoCalculatePWM = true;
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
    }

  }
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	200005ac 	.word	0x200005ac
 80034c4:	20000690 	.word	0x20000690
 80034c8:	20000cf0 	.word	0x20000cf0
 80034cc:	2000063c 	.word	0x2000063c
 80034d0:	2000000e 	.word	0x2000000e
 80034d4:	20000688 	.word	0x20000688
 80034d8:	20000686 	.word	0x20000686
 80034dc:	51eb851f 	.word	0x51eb851f
 80034e0:	20000010 	.word	0x20000010
 80034e4:	200005f4 	.word	0x200005f4
 80034e8:	2000068c 	.word	0x2000068c
 80034ec:	2000068e 	.word	0x2000068e
 80034f0:	2000068a 	.word	0x2000068a
 80034f4:	20000684 	.word	0x20000684
 80034f8:	2000068b 	.word	0x2000068b
 80034fc:	20000685 	.word	0x20000685

08003500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b094      	sub	sp, #80	; 0x50
 8003504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003506:	f000 ffbf 	bl	8004488 <HAL_Init>

  /* USER CODE BEGIN Init */
  
  StringFIFOInit(&USBFIFO);
 800350a:	4862      	ldr	r0, [pc, #392]	; (8003694 <main+0x194>)
 800350c:	f000 fd88 	bl	8004020 <StringFIFOInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003510:	f000 f8de 	bl	80036d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  InitDWTTimer(); // we need this for delay_us
 8003514:	f7ff fe56 	bl	80031c4 <InitDWTTimer>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003518:	f000 fa8a 	bl	8003a30 <MX_GPIO_Init>
  MX_SPI4_Init();
 800351c:	f000 f982 	bl	8003824 <MX_SPI4_Init>
  MX_I2C1_Init();
 8003520:	f000 f940 	bl	80037a4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003524:	f000 f9b4 	bl	8003890 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8003528:	f00a fd20 	bl	800df6c <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800352c:	f000 f9fc 	bl	8003928 <MX_TIM4_Init>
  MX_TIM6_Init();
 8003530:	f000 fa48 	bl	80039c4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  TCB_InitStruct(&TCB, &hi2c1, &hspi4);
 8003534:	4a58      	ldr	r2, [pc, #352]	; (8003698 <main+0x198>)
 8003536:	4959      	ldr	r1, [pc, #356]	; (800369c <main+0x19c>)
 8003538:	4859      	ldr	r0, [pc, #356]	; (80036a0 <main+0x1a0>)
 800353a:	f7fe fba1 	bl	8001c80 <TCB_InitStruct>
  for (int i = 0; i < 6; i++){
 800353e:	2300      	movs	r3, #0
 8003540:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003542:	e029      	b.n	8003598 <main+0x98>
    TCB.DAC8718.DAC_Channels[i].enabled = true;
 8003544:	4a56      	ldr	r2, [pc, #344]	; (80036a0 <main+0x1a0>)
 8003546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003548:	33ce      	adds	r3, #206	; 0xce
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	2201      	movs	r2, #1
 8003550:	729a      	strb	r2, [r3, #10]
    TCB.DAC8718.DAC_Channels[i].DAC_number = i;
 8003552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003554:	b2d9      	uxtb	r1, r3
 8003556:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <main+0x1a0>)
 8003558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800355a:	33ce      	adds	r3, #206	; 0xce
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4413      	add	r3, r2
 8003560:	460a      	mov	r2, r1
 8003562:	721a      	strb	r2, [r3, #8]
    TCB.DAC8718.DAC_Channels[i].lower_bound = 0x7FFF;
 8003564:	4a4e      	ldr	r2, [pc, #312]	; (80036a0 <main+0x1a0>)
 8003566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003568:	33ce      	adds	r3, #206	; 0xce
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003572:	80da      	strh	r2, [r3, #6]
    TCB.DAC8718.DAC_Channels[i].upper_bound = 0x7FFF;
 8003574:	4a4a      	ldr	r2, [pc, #296]	; (80036a0 <main+0x1a0>)
 8003576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003578:	33ce      	adds	r3, #206	; 0xce
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003582:	809a      	strh	r2, [r3, #4]
    TCB.DAC8718.DAC_Channels[i].state_high = false;
 8003584:	4a46      	ldr	r2, [pc, #280]	; (80036a0 <main+0x1a0>)
 8003586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003588:	33ce      	adds	r3, #206	; 0xce
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	2200      	movs	r2, #0
 8003590:	725a      	strb	r2, [r3, #9]
  for (int i = 0; i < 6; i++){
 8003592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003594:	3301      	adds	r3, #1
 8003596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359a:	2b05      	cmp	r3, #5
 800359c:	ddd2      	ble.n	8003544 <main+0x44>
  }
  HAL_Delay(500);
 800359e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035a2:	f000 ffe3 	bl	800456c <HAL_Delay>
  printf("-- REBOOT --\n");
 80035a6:	483f      	ldr	r0, [pc, #252]	; (80036a4 <main+0x1a4>)
 80035a8:	f00c f960 	bl	800f86c <puts>

// if you rearrange the PID.CONFIG struct, you should force rewriting defaults
  // over the EEPROM on next startup. This will *probably* be caught by checking
  // the address of the last controller rather than the first.
  //Welcome to OOP hell
  if (!(TCB.Controller.Sensor.Address & 0b1001000)) // if the stored address is not valid, we probably have invalid data.
 80035ac:	4b3c      	ldr	r3, [pc, #240]	; (80036a0 <main+0x1a0>)
 80035ae:	7a1b      	ldrb	r3, [r3, #8]
 80035b0:	f003 0348 	and.w	r3, r3, #72	; 0x48
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <main+0xbe>
  {
    printf("The configuration is invalid. Rewriting defaults.");
 80035b8:	483b      	ldr	r0, [pc, #236]	; (80036a8 <main+0x1a8>)
 80035ba:	f00c f8d1 	bl	800f760 <iprintf>
  }

  TMP117_Configure(&TCB.Controller.Sensor);
 80035be:	483b      	ldr	r0, [pc, #236]	; (80036ac <main+0x1ac>)
 80035c0:	f7fe f99e 	bl	8001900 <TMP117_Configure>
  HAL_TIM_Base_Start_IT(&htim2); //DAC Timer
 80035c4:	483a      	ldr	r0, [pc, #232]	; (80036b0 <main+0x1b0>)
 80035c6:	f006 fc89 	bl	8009edc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6); // Heater Timer
 80035ca:	483a      	ldr	r0, [pc, #232]	; (80036b4 <main+0x1b4>)
 80035cc:	f006 fc86 	bl	8009edc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); // Main Timer
 80035d0:	4839      	ldr	r0, [pc, #228]	; (80036b8 <main+0x1b8>)
 80035d2:	f006 fc83 	bl	8009edc <HAL_TIM_Base_Start_IT>
		//   }
		//   //HAL_Delay(100);
	  // }
    //Set the heater to the opposite state its currently in
	  //Just to Test. Here is the
	  float dummyWave = 100.0;
 80035d6:	4b39      	ldr	r3, [pc, #228]	; (80036bc <main+0x1bc>)
 80035d8:	613b      	str	r3, [r7, #16]
	  double temp = TCB.Controller.Sensor.LastTemperature;
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <main+0x1a0>)
 80035dc:	e9d3 2388 	ldrd	r2, r3, [r3, #544]	; 0x220
 80035e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  float voltage = Wavelength_to_Voltage(&dummyWave, &temp);
 80035e4:	f107 0208 	add.w	r2, r7, #8
 80035e8:	f107 0310 	add.w	r3, r7, #16
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe fb12 	bl	8001c18 <Wavelength_to_Voltage>
 80035f4:	eef0 7a40 	vmov.f32	s15, s0
 80035f8:	edc7 7a01 	vstr	s15, [r7, #4]
	  for(int i = 0; i<6; i++){
 80035fc:	2300      	movs	r3, #0
 80035fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003600:	e009      	b.n	8003616 <main+0x116>
		  Set_Voltage_Peak_to_Peak(&TCB.DAC8718, i, &voltage);
 8003602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003604:	b2db      	uxtb	r3, r3
 8003606:	1d3a      	adds	r2, r7, #4
 8003608:	4619      	mov	r1, r3
 800360a:	482d      	ldr	r0, [pc, #180]	; (80036c0 <main+0x1c0>)
 800360c:	f7fd fee4 	bl	80013d8 <Set_Voltage_Peak_to_Peak>
	  for(int i = 0; i<6; i++){
 8003610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003612:	3301      	adds	r3, #1
 8003614:	64bb      	str	r3, [r7, #72]	; 0x48
 8003616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003618:	2b05      	cmp	r3, #5
 800361a:	ddf2      	ble.n	8003602 <main+0x102>
	  }

    //-------- Damons Code ----------------------
    // we keep a global copy of this for the timer interrupt
    HeaterFrequency = TCB.Controller.PID.Config.Frequency;
 800361c:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <main+0x1a0>)
 800361e:	f8b3 265e 	ldrh.w	r2, [r3, #1630]	; 0x65e
 8003622:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <main+0x1c4>)
 8003624:	801a      	strh	r2, [r3, #0]

    if (TCB.Controller.Sensor.Errors > 10)
 8003626:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <main+0x1a0>)
 8003628:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 800362c:	2b0a      	cmp	r3, #10
 800362e:	d901      	bls.n	8003634 <main+0x134>
      MX_I2C1_Init();
 8003630:	f000 f8b8 	bl	80037a4 <MX_I2C1_Init>

    if (DoSampleTMP117)
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <main+0x1c8>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00e      	beq.n	800365c <main+0x15c>
    {
      DoSampleTMP117 = false;
 800363e:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <main+0x1c8>)
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
      if (TCB.Controller.Sensor.Configured){
 8003644:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <main+0x1a0>)
 8003646:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <main+0x156>
          TMP117_GetTemperature(&TCB.Controller.Sensor);
 800364e:	4817      	ldr	r0, [pc, #92]	; (80036ac <main+0x1ac>)
 8003650:	f7fe f99c 	bl	800198c <TMP117_GetTemperature>
 8003654:	e002      	b.n	800365c <main+0x15c>
      }else{
          TMP117_Configure(&TCB.Controller.Sensor);
 8003656:	4815      	ldr	r0, [pc, #84]	; (80036ac <main+0x1ac>)
 8003658:	f7fe f952 	bl	8001900 <TMP117_Configure>
      }
    }


    if (DoCalculatePWM)
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <main+0x1cc>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <main+0x172>
    {
      DoCalculatePWM = false;
 8003666:	4b19      	ldr	r3, [pc, #100]	; (80036cc <main+0x1cc>)
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
      Controller_Step(&TCB.Controller);
 800366c:	480c      	ldr	r0, [pc, #48]	; (80036a0 <main+0x1a0>)
 800366e:	f7ff fd3b 	bl	80030e8 <Controller_Step>
    }

    if (StringFIFORemove(&USBFIFO, buffer) == 0)
 8003672:	f107 0314 	add.w	r3, r7, #20
 8003676:	4619      	mov	r1, r3
 8003678:	4806      	ldr	r0, [pc, #24]	; (8003694 <main+0x194>)
 800367a:	f000 fd65 	bl	8004148 <StringFIFORemove>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1a8      	bne.n	80035d6 <main+0xd6>
    {
      ProcessUserInput(&TCB.Controller, buffer, &TCB);
 8003684:	f107 0314 	add.w	r3, r7, #20
 8003688:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <main+0x1a0>)
 800368a:	4619      	mov	r1, r3
 800368c:	4804      	ldr	r0, [pc, #16]	; (80036a0 <main+0x1a0>)
 800368e:	f7fe fb3f 	bl	8001d10 <ProcessUserInput>
  {
 8003692:	e7a0      	b.n	80035d6 <main+0xd6>
 8003694:	20001c60 	.word	0x20001c60
 8003698:	20000554 	.word	0x20000554
 800369c:	20000500 	.word	0x20000500
 80036a0:	20000690 	.word	0x20000690
 80036a4:	0801498c 	.word	0x0801498c
 80036a8:	0801499c 	.word	0x0801499c
 80036ac:	20000698 	.word	0x20000698
 80036b0:	200005ac 	.word	0x200005ac
 80036b4:	2000063c 	.word	0x2000063c
 80036b8:	200005f4 	.word	0x200005f4
 80036bc:	42c80000 	.word	0x42c80000
 80036c0:	20000cf0 	.word	0x20000cf0
 80036c4:	2000000e 	.word	0x2000000e
 80036c8:	20000684 	.word	0x20000684
 80036cc:	20000685 	.word	0x20000685

080036d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b094      	sub	sp, #80	; 0x50
 80036d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036d6:	f107 0320 	add.w	r3, r7, #32
 80036da:	2230      	movs	r2, #48	; 0x30
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f00b f9bc 	bl	800ea5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	4b28      	ldr	r3, [pc, #160]	; (800379c <SystemClock_Config+0xcc>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	4a27      	ldr	r2, [pc, #156]	; (800379c <SystemClock_Config+0xcc>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	6413      	str	r3, [r2, #64]	; 0x40
 8003704:	4b25      	ldr	r3, [pc, #148]	; (800379c <SystemClock_Config+0xcc>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003710:	2300      	movs	r3, #0
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <SystemClock_Config+0xd0>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a21      	ldr	r2, [pc, #132]	; (80037a0 <SystemClock_Config+0xd0>)
 800371a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b1f      	ldr	r3, [pc, #124]	; (80037a0 <SystemClock_Config+0xd0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800372c:	2301      	movs	r3, #1
 800372e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003736:	2302      	movs	r3, #2
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800373a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800373e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003740:	2304      	movs	r3, #4
 8003742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003744:	23a8      	movs	r3, #168	; 0xa8
 8003746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003748:	2302      	movs	r3, #2
 800374a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800374c:	2307      	movs	r3, #7
 800374e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003750:	f107 0320 	add.w	r3, r7, #32
 8003754:	4618      	mov	r0, r3
 8003756:	f005 f99d 	bl	8008a94 <HAL_RCC_OscConfig>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003760:	f000 fab6 	bl	8003cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003764:	230f      	movs	r3, #15
 8003766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003768:	2302      	movs	r3, #2
 800376a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003770:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800377a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	2105      	movs	r1, #5
 8003782:	4618      	mov	r0, r3
 8003784:	f005 fbfe 	bl	8008f84 <HAL_RCC_ClockConfig>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800378e:	f000 fa9f 	bl	8003cd0 <Error_Handler>
  }
}
 8003792:	bf00      	nop
 8003794:	3750      	adds	r7, #80	; 0x50
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
 80037a0:	40007000 	.word	0x40007000

080037a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <MX_I2C1_Init+0x74>)
 80037aa:	4a1c      	ldr	r2, [pc, #112]	; (800381c <MX_I2C1_Init+0x78>)
 80037ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80037ae:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <MX_I2C1_Init+0x74>)
 80037b0:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <MX_I2C1_Init+0x7c>)
 80037b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037b4:	4b18      	ldr	r3, [pc, #96]	; (8003818 <MX_I2C1_Init+0x74>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80037ba:	4b17      	ldr	r3, [pc, #92]	; (8003818 <MX_I2C1_Init+0x74>)
 80037bc:	2200      	movs	r2, #0
 80037be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037c0:	4b15      	ldr	r3, [pc, #84]	; (8003818 <MX_I2C1_Init+0x74>)
 80037c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <MX_I2C1_Init+0x74>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <MX_I2C1_Init+0x74>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037d4:	4b10      	ldr	r3, [pc, #64]	; (8003818 <MX_I2C1_Init+0x74>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <MX_I2C1_Init+0x74>)
 80037dc:	2200      	movs	r2, #0
 80037de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037e0:	480d      	ldr	r0, [pc, #52]	; (8003818 <MX_I2C1_Init+0x74>)
 80037e2:	f001 f9ef 	bl	8004bc4 <HAL_I2C_Init>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80037ec:	f000 fa70 	bl	8003cd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037f0:	2100      	movs	r1, #0
 80037f2:	4809      	ldr	r0, [pc, #36]	; (8003818 <MX_I2C1_Init+0x74>)
 80037f4:	f003 fe56 	bl	80074a4 <HAL_I2CEx_ConfigAnalogFilter>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80037fe:	f000 fa67 	bl	8003cd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003802:	2100      	movs	r1, #0
 8003804:	4804      	ldr	r0, [pc, #16]	; (8003818 <MX_I2C1_Init+0x74>)
 8003806:	f003 fe89 	bl	800751c <HAL_I2CEx_ConfigDigitalFilter>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003810:	f000 fa5e 	bl	8003cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20000500 	.word	0x20000500
 800381c:	40005400 	.word	0x40005400
 8003820:	000186a0 	.word	0x000186a0

08003824 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003828:	4b17      	ldr	r3, [pc, #92]	; (8003888 <MX_SPI4_Init+0x64>)
 800382a:	4a18      	ldr	r2, [pc, #96]	; (800388c <MX_SPI4_Init+0x68>)
 800382c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800382e:	4b16      	ldr	r3, [pc, #88]	; (8003888 <MX_SPI4_Init+0x64>)
 8003830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003834:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <MX_SPI4_Init+0x64>)
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800383c:	4b12      	ldr	r3, [pc, #72]	; (8003888 <MX_SPI4_Init+0x64>)
 800383e:	2200      	movs	r2, #0
 8003840:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003842:	4b11      	ldr	r3, [pc, #68]	; (8003888 <MX_SPI4_Init+0x64>)
 8003844:	2200      	movs	r2, #0
 8003846:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003848:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <MX_SPI4_Init+0x64>)
 800384a:	2201      	movs	r2, #1
 800384c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800384e:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <MX_SPI4_Init+0x64>)
 8003850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003854:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003856:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <MX_SPI4_Init+0x64>)
 8003858:	2220      	movs	r2, #32
 800385a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <MX_SPI4_Init+0x64>)
 800385e:	2200      	movs	r2, #0
 8003860:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003862:	4b09      	ldr	r3, [pc, #36]	; (8003888 <MX_SPI4_Init+0x64>)
 8003864:	2200      	movs	r2, #0
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003868:	4b07      	ldr	r3, [pc, #28]	; (8003888 <MX_SPI4_Init+0x64>)
 800386a:	2200      	movs	r2, #0
 800386c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <MX_SPI4_Init+0x64>)
 8003870:	220a      	movs	r2, #10
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003874:	4804      	ldr	r0, [pc, #16]	; (8003888 <MX_SPI4_Init+0x64>)
 8003876:	f005 fd91 	bl	800939c <HAL_SPI_Init>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003880:	f000 fa26 	bl	8003cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000554 	.word	0x20000554
 800388c:	40013400 	.word	0x40013400

08003890 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003896:	f107 0308 	add.w	r3, r7, #8
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	605a      	str	r2, [r3, #4]
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038a4:	463b      	mov	r3, r7
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038ac:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <MX_TIM2_Init+0x94>)
 80038ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420;
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <MX_TIM2_Init+0x94>)
 80038b6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80038ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <MX_TIM2_Init+0x94>)
 80038be:	2200      	movs	r2, #0
 80038c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <MX_TIM2_Init+0x94>)
 80038c4:	2232      	movs	r2, #50	; 0x32
 80038c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c8:	4b16      	ldr	r3, [pc, #88]	; (8003924 <MX_TIM2_Init+0x94>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <MX_TIM2_Init+0x94>)
 80038d0:	2280      	movs	r2, #128	; 0x80
 80038d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038d4:	4813      	ldr	r0, [pc, #76]	; (8003924 <MX_TIM2_Init+0x94>)
 80038d6:	f006 fab1 	bl	8009e3c <HAL_TIM_Base_Init>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80038e0:	f000 f9f6 	bl	8003cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038ea:	f107 0308 	add.w	r3, r7, #8
 80038ee:	4619      	mov	r1, r3
 80038f0:	480c      	ldr	r0, [pc, #48]	; (8003924 <MX_TIM2_Init+0x94>)
 80038f2:	f006 fc6b 	bl	800a1cc <HAL_TIM_ConfigClockSource>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80038fc:	f000 f9e8 	bl	8003cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003900:	2300      	movs	r3, #0
 8003902:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003904:	2300      	movs	r3, #0
 8003906:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003908:	463b      	mov	r3, r7
 800390a:	4619      	mov	r1, r3
 800390c:	4805      	ldr	r0, [pc, #20]	; (8003924 <MX_TIM2_Init+0x94>)
 800390e:	f006 fe87 	bl	800a620 <HAL_TIMEx_MasterConfigSynchronization>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003918:	f000 f9da 	bl	8003cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800391c:	bf00      	nop
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	200005ac 	.word	0x200005ac

08003928 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800392e:	f107 0308 	add.w	r3, r7, #8
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	609a      	str	r2, [r3, #8]
 800393a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800393c:	463b      	mov	r3, r7
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <MX_TIM4_Init+0x94>)
 8003946:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <MX_TIM4_Init+0x98>)
 8003948:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4200;
 800394a:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <MX_TIM4_Init+0x94>)
 800394c:	f241 0268 	movw	r2, #4200	; 0x1068
 8003950:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003952:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <MX_TIM4_Init+0x94>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003958:	4b18      	ldr	r3, [pc, #96]	; (80039bc <MX_TIM4_Init+0x94>)
 800395a:	2264      	movs	r2, #100	; 0x64
 800395c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800395e:	4b17      	ldr	r3, [pc, #92]	; (80039bc <MX_TIM4_Init+0x94>)
 8003960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003964:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <MX_TIM4_Init+0x94>)
 8003968:	2280      	movs	r2, #128	; 0x80
 800396a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800396c:	4813      	ldr	r0, [pc, #76]	; (80039bc <MX_TIM4_Init+0x94>)
 800396e:	f006 fa65 	bl	8009e3c <HAL_TIM_Base_Init>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003978:	f000 f9aa 	bl	8003cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800397c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003980:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003982:	f107 0308 	add.w	r3, r7, #8
 8003986:	4619      	mov	r1, r3
 8003988:	480c      	ldr	r0, [pc, #48]	; (80039bc <MX_TIM4_Init+0x94>)
 800398a:	f006 fc1f 	bl	800a1cc <HAL_TIM_ConfigClockSource>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003994:	f000 f99c 	bl	8003cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003998:	2300      	movs	r3, #0
 800399a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800399c:	2300      	movs	r3, #0
 800399e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80039a0:	463b      	mov	r3, r7
 80039a2:	4619      	mov	r1, r3
 80039a4:	4805      	ldr	r0, [pc, #20]	; (80039bc <MX_TIM4_Init+0x94>)
 80039a6:	f006 fe3b 	bl	800a620 <HAL_TIMEx_MasterConfigSynchronization>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80039b0:	f000 f98e 	bl	8003cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80039b4:	bf00      	nop
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	200005f4 	.word	0x200005f4
 80039c0:	40000800 	.word	0x40000800

080039c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ca:	463b      	mov	r3, r7
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80039d2:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <MX_TIM6_Init+0x64>)
 80039d4:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <MX_TIM6_Init+0x68>)
 80039d6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1680;
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <MX_TIM6_Init+0x64>)
 80039da:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80039de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <MX_TIM6_Init+0x64>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <MX_TIM6_Init+0x64>)
 80039e8:	2264      	movs	r2, #100	; 0x64
 80039ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <MX_TIM6_Init+0x64>)
 80039ee:	2280      	movs	r2, #128	; 0x80
 80039f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80039f2:	480d      	ldr	r0, [pc, #52]	; (8003a28 <MX_TIM6_Init+0x64>)
 80039f4:	f006 fa22 	bl	8009e3c <HAL_TIM_Base_Init>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80039fe:	f000 f967 	bl	8003cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4806      	ldr	r0, [pc, #24]	; (8003a28 <MX_TIM6_Init+0x64>)
 8003a10:	f006 fe06 	bl	800a620 <HAL_TIMEx_MasterConfigSynchronization>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003a1a:	f000 f959 	bl	8003cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	2000063c 	.word	0x2000063c
 8003a2c:	40001000 	.word	0x40001000

08003a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08c      	sub	sp, #48	; 0x30
 8003a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a36:	f107 031c 	add.w	r3, r7, #28
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	609a      	str	r2, [r3, #8]
 8003a42:	60da      	str	r2, [r3, #12]
 8003a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	4b83      	ldr	r3, [pc, #524]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	4a82      	ldr	r2, [pc, #520]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003a50:	f043 0310 	orr.w	r3, r3, #16
 8003a54:	6313      	str	r3, [r2, #48]	; 0x30
 8003a56:	4b80      	ldr	r3, [pc, #512]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	4b7c      	ldr	r3, [pc, #496]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	4a7b      	ldr	r2, [pc, #492]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a70:	6313      	str	r3, [r2, #48]	; 0x30
 8003a72:	4b79      	ldr	r3, [pc, #484]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	4b75      	ldr	r3, [pc, #468]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a74      	ldr	r2, [pc, #464]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b72      	ldr	r3, [pc, #456]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	4b6e      	ldr	r3, [pc, #440]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a6d      	ldr	r2, [pc, #436]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003aa4:	f043 0304 	orr.w	r3, r3, #4
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b6b      	ldr	r3, [pc, #428]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	4b67      	ldr	r3, [pc, #412]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	4a66      	ldr	r2, [pc, #408]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003ac0:	f043 0308 	orr.w	r3, r3, #8
 8003ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac6:	4b64      	ldr	r3, [pc, #400]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	607b      	str	r3, [r7, #4]
 8003ad6:	4b60      	ldr	r3, [pc, #384]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	4a5f      	ldr	r2, [pc, #380]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003adc:	f043 0302 	orr.w	r3, r3, #2
 8003ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae2:	4b5d      	ldr	r3, [pc, #372]	; (8003c58 <MX_GPIO_Init+0x228>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|nWakeUp_Pin, GPIO_PIN_RESET);
 8003aee:	2200      	movs	r2, #0
 8003af0:	f44f 7184 	mov.w	r1, #264	; 0x108
 8003af4:	4859      	ldr	r0, [pc, #356]	; (8003c5c <MX_GPIO_Init+0x22c>)
 8003af6:	f001 f84b 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, GPIO_PIN_RESET);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2120      	movs	r1, #32
 8003afe:	4858      	ldr	r0, [pc, #352]	; (8003c60 <MX_GPIO_Init+0x230>)
 8003b00:	f001 f846 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, nRst_Pin|nClr_Pin|nCS_Pin, GPIO_PIN_SET);
 8003b04:	2201      	movs	r2, #1
 8003b06:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8003b0a:	4854      	ldr	r0, [pc, #336]	; (8003c5c <MX_GPIO_Init+0x22c>)
 8003b0c:	f001 f840 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLDAC_GPIO_Port, nLDAC_Pin, GPIO_PIN_SET);
 8003b10:	2201      	movs	r2, #1
 8003b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b16:	4853      	ldr	r0, [pc, #332]	; (8003c64 <MX_GPIO_Init+0x234>)
 8003b18:	f001 f83a 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2101      	movs	r1, #1
 8003b20:	4850      	ldr	r0, [pc, #320]	; (8003c64 <MX_GPIO_Init+0x234>)
 8003b22:	f001 f835 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b26:	2308      	movs	r3, #8
 8003b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b32:	2300      	movs	r3, #0
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b36:	f107 031c 	add.w	r3, r7, #28
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4847      	ldr	r0, [pc, #284]	; (8003c5c <MX_GPIO_Init+0x22c>)
 8003b3e:	f000 fe7b 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b42:	2303      	movs	r3, #3
 8003b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b46:	2302      	movs	r3, #2
 8003b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b52:	2308      	movs	r3, #8
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b56:	f107 031c 	add.w	r3, r7, #28
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4842      	ldr	r0, [pc, #264]	; (8003c68 <MX_GPIO_Init+0x238>)
 8003b5e:	f000 fe6b 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b62:	23f0      	movs	r3, #240	; 0xf0
 8003b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b66:	2302      	movs	r3, #2
 8003b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b72:	2305      	movs	r3, #5
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b76:	f107 031c 	add.w	r3, r7, #28
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	483a      	ldr	r0, [pc, #232]	; (8003c68 <MX_GPIO_Init+0x238>)
 8003b7e:	f000 fe5b 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b82:	2310      	movs	r3, #16
 8003b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b86:	2303      	movs	r3, #3
 8003b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b8e:	f107 031c 	add.w	r3, r7, #28
 8003b92:	4619      	mov	r1, r3
 8003b94:	4832      	ldr	r0, [pc, #200]	; (8003c60 <MX_GPIO_Init+0x230>)
 8003b96:	f000 fe4f 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Pin */
  GPIO_InitStruct.Pin = Heater_Pin;
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Heater_GPIO_Port, &GPIO_InitStruct);
 8003baa:	f107 031c 	add.w	r3, r7, #28
 8003bae:	4619      	mov	r1, r3
 8003bb0:	482b      	ldr	r0, [pc, #172]	; (8003c60 <MX_GPIO_Init+0x230>)
 8003bb2:	f000 fe41 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : nWakeUp_Pin nRst_Pin nClr_Pin nCS_Pin */
  GPIO_InitStruct.Pin = nWakeUp_Pin|nRst_Pin|nClr_Pin|nCS_Pin;
 8003bb6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bc8:	f107 031c 	add.w	r3, r7, #28
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4823      	ldr	r0, [pc, #140]	; (8003c5c <MX_GPIO_Init+0x22c>)
 8003bd0:	f000 fe32 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : nLDAC_Pin */
  GPIO_InitStruct.Pin = nLDAC_Pin;
 8003bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003be2:	2302      	movs	r3, #2
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nLDAC_GPIO_Port, &GPIO_InitStruct);
 8003be6:	f107 031c 	add.w	r3, r7, #28
 8003bea:	4619      	mov	r1, r3
 8003bec:	481d      	ldr	r0, [pc, #116]	; (8003c64 <MX_GPIO_Init+0x234>)
 8003bee:	f000 fe23 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003bf2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003bf6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c00:	2303      	movs	r3, #3
 8003c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c04:	230c      	movs	r3, #12
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c08:	f107 031c 	add.w	r3, r7, #28
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4814      	ldr	r0, [pc, #80]	; (8003c60 <MX_GPIO_Init+0x230>)
 8003c10:	f000 fe12 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c14:	2301      	movs	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c20:	2300      	movs	r3, #0
 8003c22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c24:	f107 031c 	add.w	r3, r7, #28
 8003c28:	4619      	mov	r1, r3
 8003c2a:	480e      	ldr	r0, [pc, #56]	; (8003c64 <MX_GPIO_Init+0x234>)
 8003c2c:	f000 fe04 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c30:	2304      	movs	r3, #4
 8003c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c34:	2302      	movs	r3, #2
 8003c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c40:	230c      	movs	r3, #12
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c44:	f107 031c 	add.w	r3, r7, #28
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4806      	ldr	r0, [pc, #24]	; (8003c64 <MX_GPIO_Init+0x234>)
 8003c4c:	f000 fdf4 	bl	8004838 <HAL_GPIO_Init>

}
 8003c50:	bf00      	nop
 8003c52:	3730      	adds	r7, #48	; 0x30
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40020800 	.word	0x40020800
 8003c64:	40020c00 	.word	0x40020c00
 8003c68:	40020000 	.word	0x40020000

08003c6c <_write>:

/* This allows printf to write to the debugger and USB */
/* USB needs #include "usbd_cdc_if.h" */
/* ITM Stimulus port 0 must be enabled in your trace settings */
int _write(int file, char *ptr, int len)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  int i, res;

  for (i=0;i<20; i++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	e00d      	b.n	8003c9a <_write+0x2e>
  {
    res = CDC_Transmit_FS((uint8_t*) ptr, len);  // USB out
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	4619      	mov	r1, r3
 8003c84:	68b8      	ldr	r0, [r7, #8]
 8003c86:	f00a fa3b 	bl	800e100 <CDC_Transmit_FS>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	617b      	str	r3, [r7, #20]
    if (res == USBD_OK)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d006      	beq.n	8003ca2 <_write+0x36>
  for (i=0;i<20; i++)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	3301      	adds	r3, #1
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	2b13      	cmp	r3, #19
 8003c9e:	ddee      	ble.n	8003c7e <_write+0x12>
 8003ca0:	e000      	b.n	8003ca4 <_write+0x38>
      break;
 8003ca2:	bf00      	nop
  }

  for (int i = 0; i < len; i++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61bb      	str	r3, [r7, #24]
 8003ca8:	e009      	b.n	8003cbe <_write+0x52>
    ITM_SendChar((*ptr++));              // debugger out
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	60ba      	str	r2, [r7, #8]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fafe 	bl	80032b4 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	dbf1      	blt.n	8003caa <_write+0x3e>
  return len;
 8003cc6:	687b      	ldr	r3, [r7, #4]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3720      	adds	r7, #32
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd4:	b672      	cpsid	i
}
 8003cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cd8:	e7fe      	b.n	8003cd8 <Error_Handler+0x8>
	...

08003cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <HAL_MspInit+0x4c>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	4a0f      	ldr	r2, [pc, #60]	; (8003d28 <HAL_MspInit+0x4c>)
 8003cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_MspInit+0x4c>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_MspInit+0x4c>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <HAL_MspInit+0x4c>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_MspInit+0x4c>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800

08003d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	f107 0314 	add.w	r3, r7, #20
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a21      	ldr	r2, [pc, #132]	; (8003dd0 <HAL_I2C_MspInit+0xa4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d13b      	bne.n	8003dc6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_I2C_MspInit+0xa8>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <HAL_I2C_MspInit+0xa8>)
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5e:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <HAL_I2C_MspInit+0xa8>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d6a:	23c0      	movs	r3, #192	; 0xc0
 8003d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d6e:	2312      	movs	r3, #18
 8003d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d76:	2303      	movs	r3, #3
 8003d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7e:	f107 0314 	add.w	r3, r7, #20
 8003d82:	4619      	mov	r1, r3
 8003d84:	4814      	ldr	r0, [pc, #80]	; (8003dd8 <HAL_I2C_MspInit+0xac>)
 8003d86:	f000 fd57 	bl	8004838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <HAL_I2C_MspInit+0xa8>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	4a10      	ldr	r2, [pc, #64]	; (8003dd4 <HAL_I2C_MspInit+0xa8>)
 8003d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d98:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <HAL_I2C_MspInit+0xa8>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003da6:	2200      	movs	r2, #0
 8003da8:	2100      	movs	r1, #0
 8003daa:	201f      	movs	r0, #31
 8003dac:	f000 fcdd 	bl	800476a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003db0:	201f      	movs	r0, #31
 8003db2:	f000 fcf6 	bl	80047a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003db6:	2200      	movs	r2, #0
 8003db8:	2100      	movs	r1, #0
 8003dba:	2020      	movs	r0, #32
 8003dbc:	f000 fcd5 	bl	800476a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003dc0:	2020      	movs	r0, #32
 8003dc2:	f000 fcee 	bl	80047a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003dc6:	bf00      	nop
 8003dc8:	3728      	adds	r7, #40	; 0x28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40005400 	.word	0x40005400
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40020400 	.word	0x40020400

08003ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	; 0x28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <HAL_SPI_MspInit+0x94>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d134      	bne.n	8003e68 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	4b1c      	ldr	r3, [pc, #112]	; (8003e74 <HAL_SPI_MspInit+0x98>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	4a1b      	ldr	r2, [pc, #108]	; (8003e74 <HAL_SPI_MspInit+0x98>)
 8003e08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e0e:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_SPI_MspInit+0x98>)
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <HAL_SPI_MspInit+0x98>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	4a14      	ldr	r2, [pc, #80]	; (8003e74 <HAL_SPI_MspInit+0x98>)
 8003e24:	f043 0310 	orr.w	r3, r3, #16
 8003e28:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2a:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <HAL_SPI_MspInit+0x98>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003e36:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e44:	2303      	movs	r3, #3
 8003e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003e48:	2305      	movs	r3, #5
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e4c:	f107 0314 	add.w	r3, r7, #20
 8003e50:	4619      	mov	r1, r3
 8003e52:	4809      	ldr	r0, [pc, #36]	; (8003e78 <HAL_SPI_MspInit+0x9c>)
 8003e54:	f000 fcf0 	bl	8004838 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	2054      	movs	r0, #84	; 0x54
 8003e5e:	f000 fc84 	bl	800476a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8003e62:	2054      	movs	r0, #84	; 0x54
 8003e64:	f000 fc9d 	bl	80047a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003e68:	bf00      	nop
 8003e6a:	3728      	adds	r7, #40	; 0x28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40013400 	.word	0x40013400
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40021000 	.word	0x40021000

08003e7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8c:	d116      	bne.n	8003ebc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	4b28      	ldr	r3, [pc, #160]	; (8003f34 <HAL_TIM_Base_MspInit+0xb8>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4a27      	ldr	r2, [pc, #156]	; (8003f34 <HAL_TIM_Base_MspInit+0xb8>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9e:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <HAL_TIM_Base_MspInit+0xb8>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2100      	movs	r1, #0
 8003eae:	201c      	movs	r0, #28
 8003eb0:	f000 fc5b 	bl	800476a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003eb4:	201c      	movs	r0, #28
 8003eb6:	f000 fc74 	bl	80047a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003eba:	e036      	b.n	8003f2a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <HAL_TIM_Base_MspInit+0xbc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d116      	bne.n	8003ef4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <HAL_TIM_Base_MspInit+0xb8>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a19      	ldr	r2, [pc, #100]	; (8003f34 <HAL_TIM_Base_MspInit+0xb8>)
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed6:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <HAL_TIM_Base_MspInit+0xb8>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	201e      	movs	r0, #30
 8003ee8:	f000 fc3f 	bl	800476a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003eec:	201e      	movs	r0, #30
 8003eee:	f000 fc58 	bl	80047a2 <HAL_NVIC_EnableIRQ>
}
 8003ef2:	e01a      	b.n	8003f2a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <HAL_TIM_Base_MspInit+0xc0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d115      	bne.n	8003f2a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_TIM_Base_MspInit+0xb8>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a0b      	ldr	r2, [pc, #44]	; (8003f34 <HAL_TIM_Base_MspInit+0xb8>)
 8003f08:	f043 0310 	orr.w	r3, r3, #16
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_TIM_Base_MspInit+0xb8>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	2036      	movs	r0, #54	; 0x36
 8003f20:	f000 fc23 	bl	800476a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f24:	2036      	movs	r0, #54	; 0x36
 8003f26:	f000 fc3c 	bl	80047a2 <HAL_NVIC_EnableIRQ>
}
 8003f2a:	bf00      	nop
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40001000 	.word	0x40001000

08003f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f44:	e7fe      	b.n	8003f44 <NMI_Handler+0x4>

08003f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f46:	b480      	push	{r7}
 8003f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f4a:	e7fe      	b.n	8003f4a <HardFault_Handler+0x4>

08003f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f50:	e7fe      	b.n	8003f50 <MemManage_Handler+0x4>

08003f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f52:	b480      	push	{r7}
 8003f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f56:	e7fe      	b.n	8003f56 <BusFault_Handler+0x4>

08003f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f5c:	e7fe      	b.n	8003f5c <UsageFault_Handler+0x4>

08003f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f7e:	bf00      	nop
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f8c:	f000 face 	bl	800452c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f98:	4802      	ldr	r0, [pc, #8]	; (8003fa4 <TIM2_IRQHandler+0x10>)
 8003f9a:	f006 f80f 	bl	8009fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200005ac 	.word	0x200005ac

08003fa8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003fac:	4802      	ldr	r0, [pc, #8]	; (8003fb8 <TIM4_IRQHandler+0x10>)
 8003fae:	f006 f805 	bl	8009fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	200005f4 	.word	0x200005f4

08003fbc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003fc0:	4802      	ldr	r0, [pc, #8]	; (8003fcc <I2C1_EV_IRQHandler+0x10>)
 8003fc2:	f001 fa67 	bl	8005494 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000500 	.word	0x20000500

08003fd0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003fd4:	4802      	ldr	r0, [pc, #8]	; (8003fe0 <I2C1_ER_IRQHandler+0x10>)
 8003fd6:	f001 fbce 	bl	8005776 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000500 	.word	0x20000500

08003fe4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003fe8:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <TIM6_DAC_IRQHandler+0x10>)
 8003fea:	f005 ffe7 	bl	8009fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	2000063c 	.word	0x2000063c

08003ff8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <OTG_FS_IRQHandler+0x10>)
 8003ffe:	f003 fc1c 	bl	800783a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20002a14 	.word	0x20002a14

0800400c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8004010:	4802      	ldr	r0, [pc, #8]	; (800401c <SPI4_IRQHandler+0x10>)
 8004012:	f005 fd2b 	bl	8009a6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000554 	.word	0x20000554

08004020 <StringFIFOInit>:

#include <stringfifo.h>
#include "string.h"

void StringFIFOInit(struct sStringFIFO* fifo)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint16_t i;
  fifo->head = 0;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  fifo->tail = 0;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 8004038:	2300      	movs	r3, #0
 800403a:	81fb      	strh	r3, [r7, #14]
 800403c:	e006      	b.n	800404c <StringFIFOInit+0x2c>
    fifo->buffer[i]=0;
 800403e:	89fb      	ldrh	r3, [r7, #14]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	2100      	movs	r1, #0
 8004044:	54d1      	strb	r1, [r2, r3]
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 8004046:	89fb      	ldrh	r3, [r7, #14]
 8004048:	3301      	adds	r3, #1
 800404a:	81fb      	strh	r3, [r7, #14]
 800404c:	89fb      	ldrh	r3, [r7, #14]
 800404e:	2bf9      	cmp	r3, #249	; 0xf9
 8004050:	d9f5      	bls.n	800403e <StringFIFOInit+0x1e>
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <StringFIFOUsed>:

uint16_t StringFIFOUsed(struct sStringFIFO* fifo)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  int16_t used = fifo->tail - fifo->head;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800406e:	b29a      	uxth	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004076:	b29b      	uxth	r3, r3
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	b29b      	uxth	r3, r3
 800407c:	81fb      	strh	r3, [r7, #14]
  if (used < 0)
 800407e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004082:	2b00      	cmp	r3, #0
 8004084:	da03      	bge.n	800408e <StringFIFOUsed+0x2e>
    used += FIFO_BUFFER_SIZE;
 8004086:	89fb      	ldrh	r3, [r7, #14]
 8004088:	33fa      	adds	r3, #250	; 0xfa
 800408a:	b29b      	uxth	r3, r3
 800408c:	81fb      	strh	r3, [r7, #14]
  return (uint16_t) used;
 800408e:	89fb      	ldrh	r3, [r7, #14]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <StringFIFOAvailable>:

uint16_t StringFIFOAvailable(struct sStringFIFO* fifo)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint16_t used = StringFIFOUsed(fifo);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ffdb 	bl	8004060 <StringFIFOUsed>
 80040aa:	4603      	mov	r3, r0
 80040ac:	81fb      	strh	r3, [r7, #14]
  int16_t available = FIFO_BUFFER_SIZE - used - 1; // don't use the last byte, otherwise we won't know that we're full
 80040ae:	89fb      	ldrh	r3, [r7, #14]
 80040b0:	f1c3 03f9 	rsb	r3, r3, #249	; 0xf9
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	81bb      	strh	r3, [r7, #12]
  return available;
 80040b8:	89bb      	ldrh	r3, [r7, #12]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <StringFIFOAdd>:

uint8_t StringFIFOAdd(struct sStringFIFO* fifo, uint8_t* item, size_t size)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  int16_t available = StringFIFOAvailable(fifo);
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7ff ffe3 	bl	800409c <StringFIFOAvailable>
 80040d6:	4603      	mov	r3, r0
 80040d8:	82fb      	strh	r3, [r7, #22]

  if (available == 0)
 80040da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <StringFIFOAdd+0x28>
  {
    printf("Fifo full\n");
 80040e2:	4817      	ldr	r0, [pc, #92]	; (8004140 <StringFIFOAdd+0x7c>)
 80040e4:	f00b fbc2 	bl	800f86c <puts>
    return 1;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e025      	b.n	8004138 <StringFIFOAdd+0x74>
  }

  if (size > available)
 80040ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d902      	bls.n	80040fc <StringFIFOAdd+0x38>
    size = available;
 80040f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040fa:	607b      	str	r3, [r7, #4]

  memcpy(&fifo->buffer[fifo->tail], item, size);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004102:	461a      	mov	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	4618      	mov	r0, r3
 800410e:	f00a fc7d 	bl	800ea0c <memcpy>
  fifo->tail = (fifo->tail + size) % FIFO_BUFFER_SIZE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004118:	461a      	mov	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	441a      	add	r2, r3
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <StringFIFOAdd+0x80>)
 8004120:	fba3 1302 	umull	r1, r3, r3, r2
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	21fa      	movs	r1, #250	; 0xfa
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  return 0;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	080149d0 	.word	0x080149d0
 8004144:	10624dd3 	.word	0x10624dd3

08004148 <StringFIFORemove>:

uint8_t StringFIFORemove(struct sStringFIFO* fifo, uint8_t* string)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint16_t i, pos;
  uint16_t used = StringFIFOUsed(fifo);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff ff84 	bl	8004060 <StringFIFOUsed>
 8004158:	4603      	mov	r3, r0
 800415a:	81fb      	strh	r3, [r7, #14]
  uint16_t h_length, t_length;
  int16_t len;

  if (fifo->head == fifo->tail)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 20fa 	ldrb.w	r2, [r3, #250]	; 0xfa
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004168:	429a      	cmp	r2, r3
 800416a:	d101      	bne.n	8004170 <StringFIFORemove+0x28>
  {
	  //printf("Empty fifo.\n");
    return 3;
 800416c:	2303      	movs	r3, #3
 800416e:	e09e      	b.n	80042ae <StringFIFORemove+0x166>
  }

  for (i=0; i<used; i++)
 8004170:	2300      	movs	r3, #0
 8004172:	82fb      	strh	r3, [r7, #22]
 8004174:	e095      	b.n	80042a2 <StringFIFORemove+0x15a>
  {
    pos = (fifo->head + i) % FIFO_BUFFER_SIZE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800417c:	461a      	mov	r2, r3
 800417e:	8afb      	ldrh	r3, [r7, #22]
 8004180:	4413      	add	r3, r2
 8004182:	4a4d      	ldr	r2, [pc, #308]	; (80042b8 <StringFIFORemove+0x170>)
 8004184:	fb82 1203 	smull	r1, r2, r2, r3
 8004188:	1111      	asrs	r1, r2, #4
 800418a:	17da      	asrs	r2, r3, #31
 800418c:	1a8a      	subs	r2, r1, r2
 800418e:	21fa      	movs	r1, #250	; 0xfa
 8004190:	fb01 f202 	mul.w	r2, r1, r2
 8004194:	1a9a      	subs	r2, r3, r2
 8004196:	4613      	mov	r3, r2
 8004198:	81bb      	strh	r3, [r7, #12]
    if ((fifo->buffer[pos] == '\n') || (fifo->buffer[pos] == '\r'))
 800419a:	89bb      	ldrh	r3, [r7, #12]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	5cd3      	ldrb	r3, [r2, r3]
 80041a0:	2b0a      	cmp	r3, #10
 80041a2:	d004      	beq.n	80041ae <StringFIFORemove+0x66>
 80041a4:	89bb      	ldrh	r3, [r7, #12]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	5cd3      	ldrb	r3, [r2, r3]
 80041aa:	2b0d      	cmp	r3, #13
 80041ac:	d176      	bne.n	800429c <StringFIFORemove+0x154>
    {
      if (i == 0)
 80041ae:	8afb      	ldrh	r3, [r7, #22]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d116      	bne.n	80041e2 <StringFIFORemove+0x9a>
      {
        fifo->head = (fifo->head + 1) % FIFO_BUFFER_SIZE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80041ba:	3301      	adds	r3, #1
 80041bc:	4a3e      	ldr	r2, [pc, #248]	; (80042b8 <StringFIFORemove+0x170>)
 80041be:	fb82 1203 	smull	r1, r2, r2, r3
 80041c2:	1111      	asrs	r1, r2, #4
 80041c4:	17da      	asrs	r2, r3, #31
 80041c6:	1a8a      	subs	r2, r1, r2
 80041c8:	21fa      	movs	r1, #250	; 0xfa
 80041ca:	fb01 f202 	mul.w	r2, r1, r2
 80041ce:	1a9a      	subs	r2, r3, r2
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        string[0] = 0;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
//        printf("Zero length string in fifo.\n");
        return 1;
 80041de:	2301      	movs	r3, #1
 80041e0:	e065      	b.n	80042ae <StringFIFORemove+0x166>
      }
      len = (pos - fifo->head);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	89ba      	ldrh	r2, [r7, #12]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	823b      	strh	r3, [r7, #16]
      if (len < 0)
 80041f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da03      	bge.n	8004202 <StringFIFORemove+0xba>
        len += FIFO_BUFFER_SIZE;
 80041fa:	8a3b      	ldrh	r3, [r7, #16]
 80041fc:	33fa      	adds	r3, #250	; 0xfa
 80041fe:	b29b      	uxth	r3, r3
 8004200:	823b      	strh	r3, [r7, #16]
      if (len > (FIFO_BUFFER_SIZE - fifo->head))
 8004202:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800420c:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8004210:	429a      	cmp	r2, r3
 8004212:	dd0b      	ble.n	800422c <StringFIFORemove+0xe4>
      {
        h_length = FIFO_BUFFER_SIZE - fifo->head;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800421a:	b29b      	uxth	r3, r3
 800421c:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8004220:	82bb      	strh	r3, [r7, #20]
        t_length = len - h_length;
 8004222:	8a3a      	ldrh	r2, [r7, #16]
 8004224:	8abb      	ldrh	r3, [r7, #20]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	827b      	strh	r3, [r7, #18]
 800422a:	e003      	b.n	8004234 <StringFIFORemove+0xec>
      }
      else
      {
        h_length = len;
 800422c:	8a3b      	ldrh	r3, [r7, #16]
 800422e:	82bb      	strh	r3, [r7, #20]
        t_length = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	827b      	strh	r3, [r7, #18]
      }
      memcpy(string, &fifo->buffer[fifo->head], h_length);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800423a:	461a      	mov	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4413      	add	r3, r2
 8004240:	8aba      	ldrh	r2, [r7, #20]
 8004242:	4619      	mov	r1, r3
 8004244:	6838      	ldr	r0, [r7, #0]
 8004246:	f00a fbe1 	bl	800ea0c <memcpy>
      if (t_length)
 800424a:	8a7b      	ldrh	r3, [r7, #18]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <StringFIFORemove+0x118>
        memcpy(&string[h_length], fifo->buffer, t_length);
 8004250:	8abb      	ldrh	r3, [r7, #20]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	4413      	add	r3, r2
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	8a7a      	ldrh	r2, [r7, #18]
 800425a:	4618      	mov	r0, r3
 800425c:	f00a fbd6 	bl	800ea0c <memcpy>
      fifo->head = (fifo->head + len + 1) % FIFO_BUFFER_SIZE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004266:	461a      	mov	r2, r3
 8004268:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800426c:	4413      	add	r3, r2
 800426e:	3301      	adds	r3, #1
 8004270:	4a11      	ldr	r2, [pc, #68]	; (80042b8 <StringFIFORemove+0x170>)
 8004272:	fb82 1203 	smull	r1, r2, r2, r3
 8004276:	1111      	asrs	r1, r2, #4
 8004278:	17da      	asrs	r2, r3, #31
 800427a:	1a8a      	subs	r2, r1, r2
 800427c:	21fa      	movs	r1, #250	; 0xfa
 800427e:	fb01 f202 	mul.w	r2, r1, r2
 8004282:	1a9a      	subs	r2, r3, r2
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      string[len] = 0;
 800428c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	4413      	add	r3, r2
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
      return 0;
 8004298:	2300      	movs	r3, #0
 800429a:	e008      	b.n	80042ae <StringFIFORemove+0x166>
  for (i=0; i<used; i++)
 800429c:	8afb      	ldrh	r3, [r7, #22]
 800429e:	3301      	adds	r3, #1
 80042a0:	82fb      	strh	r3, [r7, #22]
 80042a2:	8afa      	ldrh	r2, [r7, #22]
 80042a4:	89fb      	ldrh	r3, [r7, #14]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	f4ff af65 	bcc.w	8004176 <StringFIFORemove+0x2e>
    }
  }
//  printf("Fifo has no terminator\n");
  return 2;
 80042ac:	2302      	movs	r3, #2
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	10624dd3 	.word	0x10624dd3

080042bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
	return 1;
 80042c0:	2301      	movs	r3, #1
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <_kill>:

int _kill(int pid, int sig)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042d6:	f00a fb6f 	bl	800e9b8 <__errno>
 80042da:	4603      	mov	r3, r0
 80042dc:	2216      	movs	r2, #22
 80042de:	601a      	str	r2, [r3, #0]
	return -1;
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <_exit>:

void _exit (int status)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042f4:	f04f 31ff 	mov.w	r1, #4294967295
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ffe7 	bl	80042cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80042fe:	e7fe      	b.n	80042fe <_exit+0x12>

08004300 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e00a      	b.n	8004328 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004312:	f3af 8000 	nop.w
 8004316:	4601      	mov	r1, r0
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	60ba      	str	r2, [r7, #8]
 800431e:	b2ca      	uxtb	r2, r1
 8004320:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	3301      	adds	r3, #1
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	dbf0      	blt.n	8004312 <_read+0x12>
	}

return len;
 8004330:	687b      	ldr	r3, [r7, #4]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <_close>:
	}
	return len;
}

int _close(int file)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
	return -1;
 8004342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004362:	605a      	str	r2, [r3, #4]
	return 0;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <_isatty>:

int _isatty(int file)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
	return 1;
 800437a:	2301      	movs	r3, #1
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
	return 0;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043ac:	4a14      	ldr	r2, [pc, #80]	; (8004400 <_sbrk+0x5c>)
 80043ae:	4b15      	ldr	r3, [pc, #84]	; (8004404 <_sbrk+0x60>)
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043b8:	4b13      	ldr	r3, [pc, #76]	; (8004408 <_sbrk+0x64>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d102      	bne.n	80043c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043c0:	4b11      	ldr	r3, [pc, #68]	; (8004408 <_sbrk+0x64>)
 80043c2:	4a12      	ldr	r2, [pc, #72]	; (800440c <_sbrk+0x68>)
 80043c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043c6:	4b10      	ldr	r3, [pc, #64]	; (8004408 <_sbrk+0x64>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4413      	add	r3, r2
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d207      	bcs.n	80043e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043d4:	f00a faf0 	bl	800e9b8 <__errno>
 80043d8:	4603      	mov	r3, r0
 80043da:	220c      	movs	r2, #12
 80043dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043de:	f04f 33ff 	mov.w	r3, #4294967295
 80043e2:	e009      	b.n	80043f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <_sbrk+0x64>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043ea:	4b07      	ldr	r3, [pc, #28]	; (8004408 <_sbrk+0x64>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	4a05      	ldr	r2, [pc, #20]	; (8004408 <_sbrk+0x64>)
 80043f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043f6:	68fb      	ldr	r3, [r7, #12]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20030000 	.word	0x20030000
 8004404:	00000400 	.word	0x00000400
 8004408:	20001d5c 	.word	0x20001d5c
 800440c:	20003150 	.word	0x20003150

08004410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <SystemInit+0x20>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	4a05      	ldr	r2, [pc, #20]	; (8004430 <SystemInit+0x20>)
 800441c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800446c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004438:	480d      	ldr	r0, [pc, #52]	; (8004470 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800443a:	490e      	ldr	r1, [pc, #56]	; (8004474 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800443c:	4a0e      	ldr	r2, [pc, #56]	; (8004478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800443e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004440:	e002      	b.n	8004448 <LoopCopyDataInit>

08004442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004446:	3304      	adds	r3, #4

08004448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800444a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800444c:	d3f9      	bcc.n	8004442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800444e:	4a0b      	ldr	r2, [pc, #44]	; (800447c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004450:	4c0b      	ldr	r4, [pc, #44]	; (8004480 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004454:	e001      	b.n	800445a <LoopFillZerobss>

08004456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004458:	3204      	adds	r2, #4

0800445a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800445a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800445c:	d3fb      	bcc.n	8004456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800445e:	f7ff ffd7 	bl	8004410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004462:	f00a faaf 	bl	800e9c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004466:	f7ff f84b 	bl	8003500 <main>
  bx  lr    
 800446a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800446c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004474:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8004478:	080156c4 	.word	0x080156c4
  ldr r2, =_sbss
 800447c:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8004480:	20003150 	.word	0x20003150

08004484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004484:	e7fe      	b.n	8004484 <ADC_IRQHandler>
	...

08004488 <HAL_Init>:
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
 800448c:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <HAL_Init+0x40>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0d      	ldr	r2, [pc, #52]	; (80044c8 <HAL_Init+0x40>)
 8004492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_Init+0x40>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <HAL_Init+0x40>)
 800449e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <HAL_Init+0x40>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a07      	ldr	r2, [pc, #28]	; (80044c8 <HAL_Init+0x40>)
 80044aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	2003      	movs	r0, #3
 80044b2:	f000 f94f 	bl	8004754 <HAL_NVIC_SetPriorityGrouping>
 80044b6:	200f      	movs	r0, #15
 80044b8:	f000 f808 	bl	80044cc <HAL_InitTick>
 80044bc:	f7ff fc0e 	bl	8003cdc <HAL_MspInit>
 80044c0:	2300      	movs	r3, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40023c00 	.word	0x40023c00

080044cc <HAL_InitTick>:
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	4b12      	ldr	r3, [pc, #72]	; (8004520 <HAL_InitTick+0x54>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b12      	ldr	r3, [pc, #72]	; (8004524 <HAL_InitTick+0x58>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	4619      	mov	r1, r3
 80044de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f967 	bl	80047be <HAL_SYSTICK_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_InitTick+0x2e>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e00e      	b.n	8004518 <HAL_InitTick+0x4c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b0f      	cmp	r3, #15
 80044fe:	d80a      	bhi.n	8004516 <HAL_InitTick+0x4a>
 8004500:	2200      	movs	r2, #0
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	f000 f92f 	bl	800476a <HAL_NVIC_SetPriority>
 800450c:	4a06      	ldr	r2, [pc, #24]	; (8004528 <HAL_InitTick+0x5c>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	2300      	movs	r3, #0
 8004514:	e000      	b.n	8004518 <HAL_InitTick+0x4c>
 8004516:	2301      	movs	r3, #1
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000014 	.word	0x20000014
 8004524:	2000001c 	.word	0x2000001c
 8004528:	20000018 	.word	0x20000018

0800452c <HAL_IncTick>:
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_IncTick+0x20>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_IncTick+0x24>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4413      	add	r3, r2
 800453c:	4a04      	ldr	r2, [pc, #16]	; (8004550 <HAL_IncTick+0x24>)
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	2000001c 	.word	0x2000001c
 8004550:	20001d60 	.word	0x20001d60

08004554 <HAL_GetTick>:
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
 8004558:	4b03      	ldr	r3, [pc, #12]	; (8004568 <HAL_GetTick+0x14>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20001d60 	.word	0x20001d60

0800456c <HAL_Delay>:
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	f7ff ffee 	bl	8004554 <HAL_GetTick>
 8004578:	60b8      	str	r0, [r7, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d005      	beq.n	8004592 <HAL_Delay+0x26>
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <HAL_Delay+0x44>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	bf00      	nop
 8004594:	f7ff ffde 	bl	8004554 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d8f7      	bhi.n	8004594 <HAL_Delay+0x28>
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	2000001c 	.word	0x2000001c

080045b4 <__NVIC_SetPriorityGrouping>:
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <__NVIC_SetPriorityGrouping+0x44>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045d0:	4013      	ands	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	021a      	lsls	r2, r3, #8
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
 80045dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <__NVIC_SetPriorityGrouping+0x44>)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	60d3      	str	r3, [r2, #12]
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <__NVIC_GetPriorityGrouping>:
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <__NVIC_GetPriorityGrouping+0x18>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	0a1b      	lsrs	r3, r3, #8
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	4618      	mov	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	e000ed00 	.word	0xe000ed00

08004618 <__NVIC_EnableIRQ>:
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	71fb      	strb	r3, [r7, #7]
 8004622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004626:	2b00      	cmp	r3, #0
 8004628:	db0b      	blt.n	8004642 <__NVIC_EnableIRQ+0x2a>
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	f003 021f 	and.w	r2, r3, #31
 8004630:	4907      	ldr	r1, [pc, #28]	; (8004650 <__NVIC_EnableIRQ+0x38>)
 8004632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	2001      	movs	r0, #1
 800463a:	fa00 f202 	lsl.w	r2, r0, r2
 800463e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000e100 	.word	0xe000e100

08004654 <__NVIC_SetPriority>:
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	6039      	str	r1, [r7, #0]
 800465e:	71fb      	strb	r3, [r7, #7]
 8004660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004664:	2b00      	cmp	r3, #0
 8004666:	db0a      	blt.n	800467e <__NVIC_SetPriority+0x2a>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	b2da      	uxtb	r2, r3
 800466c:	490c      	ldr	r1, [pc, #48]	; (80046a0 <__NVIC_SetPriority+0x4c>)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	0112      	lsls	r2, r2, #4
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	440b      	add	r3, r1
 8004678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800467c:	e00a      	b.n	8004694 <__NVIC_SetPriority+0x40>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	4908      	ldr	r1, [pc, #32]	; (80046a4 <__NVIC_SetPriority+0x50>)
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	3b04      	subs	r3, #4
 800468c:	0112      	lsls	r2, r2, #4
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	440b      	add	r3, r1
 8004692:	761a      	strb	r2, [r3, #24]
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	e000e100 	.word	0xe000e100
 80046a4:	e000ed00 	.word	0xe000ed00

080046a8 <NVIC_EncodePriority>:
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f1c3 0307 	rsb	r3, r3, #7
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	bf28      	it	cs
 80046c6:	2304      	movcs	r3, #4
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	3304      	adds	r3, #4
 80046ce:	2b06      	cmp	r3, #6
 80046d0:	d902      	bls.n	80046d8 <NVIC_EncodePriority+0x30>
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3b03      	subs	r3, #3
 80046d6:	e000      	b.n	80046da <NVIC_EncodePriority+0x32>
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	f04f 32ff 	mov.w	r2, #4294967295
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43da      	mvns	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	401a      	ands	r2, r3
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	409a      	lsls	r2, r3
 80046f0:	f04f 31ff 	mov.w	r1, #4294967295
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	fa01 f303 	lsl.w	r3, r1, r3
 80046fa:	43d9      	mvns	r1, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	400b      	ands	r3, r1
 8004700:	4313      	orrs	r3, r2
 8004702:	4618      	mov	r0, r3
 8004704:	3724      	adds	r7, #36	; 0x24
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <SysTick_Config>:
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3b01      	subs	r3, #1
 800471c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004720:	d301      	bcc.n	8004726 <SysTick_Config+0x16>
 8004722:	2301      	movs	r3, #1
 8004724:	e00f      	b.n	8004746 <SysTick_Config+0x36>
 8004726:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <SysTick_Config+0x40>)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3b01      	subs	r3, #1
 800472c:	6053      	str	r3, [r2, #4]
 800472e:	210f      	movs	r1, #15
 8004730:	f04f 30ff 	mov.w	r0, #4294967295
 8004734:	f7ff ff8e 	bl	8004654 <__NVIC_SetPriority>
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <SysTick_Config+0x40>)
 800473a:	2200      	movs	r2, #0
 800473c:	609a      	str	r2, [r3, #8]
 800473e:	4b04      	ldr	r3, [pc, #16]	; (8004750 <SysTick_Config+0x40>)
 8004740:	2207      	movs	r2, #7
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	2300      	movs	r3, #0
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	e000e010 	.word	0xe000e010

08004754 <HAL_NVIC_SetPriorityGrouping>:
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff ff29 	bl	80045b4 <__NVIC_SetPriorityGrouping>
 8004762:	bf00      	nop
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_NVIC_SetPriority>:
 800476a:	b580      	push	{r7, lr}
 800476c:	b086      	sub	sp, #24
 800476e:	af00      	add	r7, sp, #0
 8004770:	4603      	mov	r3, r0
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	73fb      	strb	r3, [r7, #15]
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	f7ff ff3e 	bl	80045fc <__NVIC_GetPriorityGrouping>
 8004780:	6178      	str	r0, [r7, #20]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	6978      	ldr	r0, [r7, #20]
 8004788:	f7ff ff8e 	bl	80046a8 <NVIC_EncodePriority>
 800478c:	4602      	mov	r2, r0
 800478e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff ff5d 	bl	8004654 <__NVIC_SetPriority>
 800479a:	bf00      	nop
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_NVIC_EnableIRQ>:
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	4603      	mov	r3, r0
 80047aa:	71fb      	strb	r3, [r7, #7]
 80047ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff ff31 	bl	8004618 <__NVIC_EnableIRQ>
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_SYSTICK_Config>:
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff ffa2 	bl	8004710 <SysTick_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_DMA_Abort_IT>:
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d004      	beq.n	80047f4 <HAL_DMA_Abort_IT+0x1e>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2280      	movs	r2, #128	; 0x80
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
 80047f0:	2301      	movs	r3, #1
 80047f2:	e00c      	b.n	800480e <HAL_DMA_Abort_IT+0x38>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2205      	movs	r2, #5
 80047f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	2300      	movs	r3, #0
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_DMA_GetState>:
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004828:	b2db      	uxtb	r3, r3
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <HAL_GPIO_Init>:
 8004838:	b480      	push	{r7}
 800483a:	b089      	sub	sp, #36	; 0x24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e177      	b.n	8004b44 <HAL_GPIO_Init+0x30c>
 8004854:	2201      	movs	r2, #1
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	429a      	cmp	r2, r3
 800486e:	f040 8166 	bne.w	8004b3e <HAL_GPIO_Init+0x306>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d005      	beq.n	800488a <HAL_GPIO_Init+0x52>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d130      	bne.n	80048ec <HAL_GPIO_Init+0xb4>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	2203      	movs	r2, #3
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	609a      	str	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	2201      	movs	r2, #1
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 0201 	and.w	r2, r3, #1
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d017      	beq.n	8004928 <HAL_GPIO_Init+0xf0>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	60da      	str	r2, [r3, #12]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d123      	bne.n	800497c <HAL_GPIO_Init+0x144>
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	08da      	lsrs	r2, r3, #3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3208      	adds	r2, #8
 800493c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	220f      	movs	r2, #15
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	08da      	lsrs	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3208      	adds	r2, #8
 8004976:	69b9      	ldr	r1, [r7, #24]
 8004978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	2203      	movs	r2, #3
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0203 	and.w	r2, r3, #3
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80c0 	beq.w	8004b3e <HAL_GPIO_Init+0x306>
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	4b66      	ldr	r3, [pc, #408]	; (8004b5c <HAL_GPIO_Init+0x324>)
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	4a65      	ldr	r2, [pc, #404]	; (8004b5c <HAL_GPIO_Init+0x324>)
 80049c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049cc:	6453      	str	r3, [r2, #68]	; 0x44
 80049ce:	4b63      	ldr	r3, [pc, #396]	; (8004b5c <HAL_GPIO_Init+0x324>)
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4a61      	ldr	r2, [pc, #388]	; (8004b60 <HAL_GPIO_Init+0x328>)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	3302      	adds	r3, #2
 80049e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	220f      	movs	r2, #15
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4013      	ands	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a58      	ldr	r2, [pc, #352]	; (8004b64 <HAL_GPIO_Init+0x32c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d037      	beq.n	8004a76 <HAL_GPIO_Init+0x23e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a57      	ldr	r2, [pc, #348]	; (8004b68 <HAL_GPIO_Init+0x330>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d031      	beq.n	8004a72 <HAL_GPIO_Init+0x23a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a56      	ldr	r2, [pc, #344]	; (8004b6c <HAL_GPIO_Init+0x334>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d02b      	beq.n	8004a6e <HAL_GPIO_Init+0x236>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a55      	ldr	r2, [pc, #340]	; (8004b70 <HAL_GPIO_Init+0x338>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d025      	beq.n	8004a6a <HAL_GPIO_Init+0x232>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a54      	ldr	r2, [pc, #336]	; (8004b74 <HAL_GPIO_Init+0x33c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d01f      	beq.n	8004a66 <HAL_GPIO_Init+0x22e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a53      	ldr	r2, [pc, #332]	; (8004b78 <HAL_GPIO_Init+0x340>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d019      	beq.n	8004a62 <HAL_GPIO_Init+0x22a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a52      	ldr	r2, [pc, #328]	; (8004b7c <HAL_GPIO_Init+0x344>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <HAL_GPIO_Init+0x226>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a51      	ldr	r2, [pc, #324]	; (8004b80 <HAL_GPIO_Init+0x348>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00d      	beq.n	8004a5a <HAL_GPIO_Init+0x222>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a50      	ldr	r2, [pc, #320]	; (8004b84 <HAL_GPIO_Init+0x34c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d007      	beq.n	8004a56 <HAL_GPIO_Init+0x21e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a4f      	ldr	r2, [pc, #316]	; (8004b88 <HAL_GPIO_Init+0x350>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d101      	bne.n	8004a52 <HAL_GPIO_Init+0x21a>
 8004a4e:	2309      	movs	r3, #9
 8004a50:	e012      	b.n	8004a78 <HAL_GPIO_Init+0x240>
 8004a52:	230a      	movs	r3, #10
 8004a54:	e010      	b.n	8004a78 <HAL_GPIO_Init+0x240>
 8004a56:	2308      	movs	r3, #8
 8004a58:	e00e      	b.n	8004a78 <HAL_GPIO_Init+0x240>
 8004a5a:	2307      	movs	r3, #7
 8004a5c:	e00c      	b.n	8004a78 <HAL_GPIO_Init+0x240>
 8004a5e:	2306      	movs	r3, #6
 8004a60:	e00a      	b.n	8004a78 <HAL_GPIO_Init+0x240>
 8004a62:	2305      	movs	r3, #5
 8004a64:	e008      	b.n	8004a78 <HAL_GPIO_Init+0x240>
 8004a66:	2304      	movs	r3, #4
 8004a68:	e006      	b.n	8004a78 <HAL_GPIO_Init+0x240>
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e004      	b.n	8004a78 <HAL_GPIO_Init+0x240>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e002      	b.n	8004a78 <HAL_GPIO_Init+0x240>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_GPIO_Init+0x240>
 8004a76:	2300      	movs	r3, #0
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	f002 0203 	and.w	r2, r2, #3
 8004a7e:	0092      	lsls	r2, r2, #2
 8004a80:	4093      	lsls	r3, r2
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	4935      	ldr	r1, [pc, #212]	; (8004b60 <HAL_GPIO_Init+0x328>)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	089b      	lsrs	r3, r3, #2
 8004a8e:	3302      	adds	r3, #2
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004a96:	4b3d      	ldr	r3, [pc, #244]	; (8004b8c <HAL_GPIO_Init+0x354>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_Init+0x282>
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	4a34      	ldr	r2, [pc, #208]	; (8004b8c <HAL_GPIO_Init+0x354>)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	6093      	str	r3, [r2, #8]
 8004ac0:	4b32      	ldr	r3, [pc, #200]	; (8004b8c <HAL_GPIO_Init+0x354>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x2ac>
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	4a29      	ldr	r2, [pc, #164]	; (8004b8c <HAL_GPIO_Init+0x354>)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	60d3      	str	r3, [r2, #12]
 8004aea:	4b28      	ldr	r3, [pc, #160]	; (8004b8c <HAL_GPIO_Init+0x354>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	43db      	mvns	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4013      	ands	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_Init+0x2d6>
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
 8004b0e:	4a1f      	ldr	r2, [pc, #124]	; (8004b8c <HAL_GPIO_Init+0x354>)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	6053      	str	r3, [r2, #4]
 8004b14:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <HAL_GPIO_Init+0x354>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_GPIO_Init+0x300>
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <HAL_GPIO_Init+0x354>)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3301      	adds	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	f67f ae84 	bls.w	8004854 <HAL_GPIO_Init+0x1c>
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	3724      	adds	r7, #36	; 0x24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40013800 	.word	0x40013800
 8004b64:	40020000 	.word	0x40020000
 8004b68:	40020400 	.word	0x40020400
 8004b6c:	40020800 	.word	0x40020800
 8004b70:	40020c00 	.word	0x40020c00
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40021400 	.word	0x40021400
 8004b7c:	40021800 	.word	0x40021800
 8004b80:	40021c00 	.word	0x40021c00
 8004b84:	40022000 	.word	0x40022000
 8004b88:	40022400 	.word	0x40022400
 8004b8c:	40013c00 	.word	0x40013c00

08004b90 <HAL_GPIO_WritePin>:
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	707b      	strb	r3, [r7, #1]
 8004ba0:	787b      	ldrb	r3, [r7, #1]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_WritePin+0x1e>
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	619a      	str	r2, [r3, #24]
 8004bac:	e003      	b.n	8004bb6 <HAL_GPIO_WritePin+0x26>
 8004bae:	887b      	ldrh	r3, [r7, #2]
 8004bb0:	041a      	lsls	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	619a      	str	r2, [r3, #24]
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <HAL_I2C_Init>:
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_I2C_Init+0x12>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e12b      	b.n	8004e2e <HAL_I2C_Init+0x26a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_I2C_Init+0x2c>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff f89e 	bl	8003d2c <HAL_I2C_MspInit>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2224      	movs	r2, #36	; 0x24
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0201 	bic.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	f004 fba4 	bl	8009374 <HAL_RCC_GetPCLK1Freq>
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4a81      	ldr	r2, [pc, #516]	; (8004e38 <HAL_I2C_Init+0x274>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d807      	bhi.n	8004c48 <HAL_I2C_Init+0x84>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4a80      	ldr	r2, [pc, #512]	; (8004e3c <HAL_I2C_Init+0x278>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	bf94      	ite	ls
 8004c40:	2301      	movls	r3, #1
 8004c42:	2300      	movhi	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e006      	b.n	8004c56 <HAL_I2C_Init+0x92>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4a7d      	ldr	r2, [pc, #500]	; (8004e40 <HAL_I2C_Init+0x27c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	bf94      	ite	ls
 8004c50:	2301      	movls	r3, #1
 8004c52:	2300      	movhi	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_I2C_Init+0x9a>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e0e7      	b.n	8004e2e <HAL_I2C_Init+0x26a>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4a78      	ldr	r2, [pc, #480]	; (8004e44 <HAL_I2C_Init+0x280>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	0c9b      	lsrs	r3, r3, #18
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a6a      	ldr	r2, [pc, #424]	; (8004e38 <HAL_I2C_Init+0x274>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d802      	bhi.n	8004c98 <HAL_I2C_Init+0xd4>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	3301      	adds	r3, #1
 8004c96:	e009      	b.n	8004cac <HAL_I2C_Init+0xe8>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	4a69      	ldr	r2, [pc, #420]	; (8004e48 <HAL_I2C_Init+0x284>)
 8004ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca8:	099b      	lsrs	r3, r3, #6
 8004caa:	3301      	adds	r3, #1
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6213      	str	r3, [r2, #32]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	495c      	ldr	r1, [pc, #368]	; (8004e38 <HAL_I2C_Init+0x274>)
 8004cc8:	428b      	cmp	r3, r1
 8004cca:	d819      	bhi.n	8004d00 <HAL_I2C_Init+0x13c>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1e59      	subs	r1, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cda:	1c59      	adds	r1, r3, #1
 8004cdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ce0:	400b      	ands	r3, r1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_I2C_Init+0x138>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1e59      	subs	r1, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfa:	e051      	b.n	8004da0 <HAL_I2C_Init+0x1dc>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	e04f      	b.n	8004da0 <HAL_I2C_Init+0x1dc>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d111      	bne.n	8004d2c <HAL_I2C_Init+0x168>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1e58      	subs	r0, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	440b      	add	r3, r1
 8004d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bf0c      	ite	eq
 8004d24:	2301      	moveq	r3, #1
 8004d26:	2300      	movne	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	e012      	b.n	8004d52 <HAL_I2C_Init+0x18e>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1e58      	subs	r0, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6859      	ldr	r1, [r3, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	0099      	lsls	r1, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d42:	3301      	adds	r3, #1
 8004d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_I2C_Init+0x196>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e022      	b.n	8004da0 <HAL_I2C_Init+0x1dc>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10e      	bne.n	8004d80 <HAL_I2C_Init+0x1bc>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1e58      	subs	r0, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6859      	ldr	r1, [r3, #4]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	440b      	add	r3, r1
 8004d70:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d74:	3301      	adds	r3, #1
 8004d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7e:	e00f      	b.n	8004da0 <HAL_I2C_Init+0x1dc>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	1e58      	subs	r0, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6859      	ldr	r1, [r3, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	0099      	lsls	r1, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d96:	3301      	adds	r3, #1
 8004d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	6809      	ldr	r1, [r1, #0]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	61cb      	str	r3, [r1, #28]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004dce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6911      	ldr	r1, [r2, #16]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68d2      	ldr	r2, [r2, #12]
 8004dda:	4311      	orrs	r1, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6812      	ldr	r2, [r2, #0]
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6093      	str	r3, [r2, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	60da      	str	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	000186a0 	.word	0x000186a0
 8004e3c:	001e847f 	.word	0x001e847f
 8004e40:	003d08ff 	.word	0x003d08ff
 8004e44:	431bde83 	.word	0x431bde83
 8004e48:	10624dd3 	.word	0x10624dd3

08004e4c <HAL_I2C_Master_Transmit>:
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	461a      	mov	r2, r3
 8004e58:	460b      	mov	r3, r1
 8004e5a:	817b      	strh	r3, [r7, #10]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	813b      	strh	r3, [r7, #8]
 8004e60:	f7ff fb78 	bl	8004554 <HAL_GetTick>
 8004e64:	6178      	str	r0, [r7, #20]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	f040 80e0 	bne.w	8005034 <HAL_I2C_Master_Transmit+0x1e8>
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	2319      	movs	r3, #25
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	4970      	ldr	r1, [pc, #448]	; (8005040 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f002 f8e6 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_I2C_Master_Transmit+0x42>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e0d3      	b.n	8005036 <HAL_I2C_Master_Transmit+0x1ea>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_I2C_Master_Transmit+0x50>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e0cc      	b.n	8005036 <HAL_I2C_Master_Transmit+0x1ea>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d007      	beq.n	8004ec2 <HAL_I2C_Master_Transmit+0x76>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0201 	orr.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2221      	movs	r2, #33	; 0x21
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2210      	movs	r2, #16
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	893a      	ldrh	r2, [r7, #8]
 8004ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	851a      	strh	r2, [r3, #40]	; 0x28
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4a50      	ldr	r2, [pc, #320]	; (8005044 <HAL_I2C_Master_Transmit+0x1f8>)
 8004f02:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f04:	8979      	ldrh	r1, [r7, #10]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	6a3a      	ldr	r2, [r7, #32]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f001 fea8 	bl	8006c60 <I2C_MasterRequestWrite>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_I2C_Master_Transmit+0xce>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e08d      	b.n	8005036 <HAL_I2C_Master_Transmit+0x1ea>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	e066      	b.n	8005000 <HAL_I2C_Master_Transmit+0x1b4>
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6a39      	ldr	r1, [r7, #32]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f002 f960 	bl	80071fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <HAL_I2C_Master_Transmit+0x112>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d107      	bne.n	8004f5a <HAL_I2C_Master_Transmit+0x10e>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e06b      	b.n	8005036 <HAL_I2C_Master_Transmit+0x1ea>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	781a      	ldrb	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	611a      	str	r2, [r3, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_I2C_Master_Transmit+0x188>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d017      	beq.n	8004fd4 <HAL_I2C_Master_Transmit+0x188>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	781a      	ldrb	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	611a      	str	r2, [r3, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	851a      	strh	r2, [r3, #40]	; 0x28
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	6a39      	ldr	r1, [r7, #32]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f002 f950 	bl	800727e <I2C_WaitOnBTFFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00d      	beq.n	8005000 <HAL_I2C_Master_Transmit+0x1b4>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d107      	bne.n	8004ffc <HAL_I2C_Master_Transmit+0x1b0>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e01a      	b.n	8005036 <HAL_I2C_Master_Transmit+0x1ea>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005004:	2b00      	cmp	r3, #0
 8005006:	d194      	bne.n	8004f32 <HAL_I2C_Master_Transmit+0xe6>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <HAL_I2C_Master_Transmit+0x1ea>
 8005034:	2302      	movs	r3, #2
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	00100002 	.word	0x00100002
 8005044:	ffff0000 	.word	0xffff0000

08005048 <HAL_I2C_Master_Receive>:
 8005048:	b580      	push	{r7, lr}
 800504a:	b08c      	sub	sp, #48	; 0x30
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	461a      	mov	r2, r3
 8005054:	460b      	mov	r3, r1
 8005056:	817b      	strh	r3, [r7, #10]
 8005058:	4613      	mov	r3, r2
 800505a:	813b      	strh	r3, [r7, #8]
 800505c:	f7ff fa7a 	bl	8004554 <HAL_GetTick>
 8005060:	6278      	str	r0, [r7, #36]	; 0x24
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b20      	cmp	r3, #32
 800506c:	f040 820b 	bne.w	8005486 <HAL_I2C_Master_Receive+0x43e>
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	2319      	movs	r3, #25
 8005076:	2201      	movs	r2, #1
 8005078:	497c      	ldr	r1, [pc, #496]	; (800526c <HAL_I2C_Master_Receive+0x224>)
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f001 ffe8 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_I2C_Master_Receive+0x42>
 8005086:	2302      	movs	r3, #2
 8005088:	e1fe      	b.n	8005488 <HAL_I2C_Master_Receive+0x440>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_I2C_Master_Receive+0x50>
 8005094:	2302      	movs	r3, #2
 8005096:	e1f7      	b.n	8005488 <HAL_I2C_Master_Receive+0x440>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d007      	beq.n	80050be <HAL_I2C_Master_Receive+0x76>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2222      	movs	r2, #34	; 0x22
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2210      	movs	r2, #16
 80050da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	625a      	str	r2, [r3, #36]	; 0x24
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	893a      	ldrh	r2, [r7, #8]
 80050ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	851a      	strh	r2, [r3, #40]	; 0x28
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4a5c      	ldr	r2, [pc, #368]	; (8005270 <HAL_I2C_Master_Receive+0x228>)
 80050fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8005100:	8979      	ldrh	r1, [r7, #10]
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f001 fe2c 	bl	8006d64 <I2C_MasterRequestRead>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_I2C_Master_Receive+0xce>
 8005112:	2301      	movs	r3, #1
 8005114:	e1b8      	b.n	8005488 <HAL_I2C_Master_Receive+0x440>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d113      	bne.n	8005146 <HAL_I2C_Master_Receive+0xfe>
 800511e:	2300      	movs	r3, #0
 8005120:	623b      	str	r3, [r7, #32]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	623b      	str	r3, [r7, #32]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	e18c      	b.n	8005460 <HAL_I2C_Master_Receive+0x418>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514a:	2b01      	cmp	r3, #1
 800514c:	d11b      	bne.n	8005186 <HAL_I2C_Master_Receive+0x13e>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	e16c      	b.n	8005460 <HAL_I2C_Master_Receive+0x418>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518a:	2b02      	cmp	r3, #2
 800518c:	d11b      	bne.n	80051c6 <HAL_I2C_Master_Receive+0x17e>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	2300      	movs	r3, #0
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	e14c      	b.n	8005460 <HAL_I2C_Master_Receive+0x418>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	e138      	b.n	8005460 <HAL_I2C_Master_Receive+0x418>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	f200 80f1 	bhi.w	80053da <HAL_I2C_Master_Receive+0x392>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d123      	bne.n	8005248 <HAL_I2C_Master_Receive+0x200>
 8005200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005202:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f002 f8ad 	bl	8007364 <I2C_WaitOnRXNEFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_I2C_Master_Receive+0x1cc>
 8005210:	2301      	movs	r3, #1
 8005212:	e139      	b.n	8005488 <HAL_I2C_Master_Receive+0x440>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	625a      	str	r2, [r3, #36]	; 0x24
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	851a      	strh	r2, [r3, #40]	; 0x28
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005246:	e10b      	b.n	8005460 <HAL_I2C_Master_Receive+0x418>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524c:	2b02      	cmp	r3, #2
 800524e:	d14e      	bne.n	80052ee <HAL_I2C_Master_Receive+0x2a6>
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	2200      	movs	r2, #0
 8005258:	4906      	ldr	r1, [pc, #24]	; (8005274 <HAL_I2C_Master_Receive+0x22c>)
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f001 fef8 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <HAL_I2C_Master_Receive+0x230>
 8005266:	2301      	movs	r3, #1
 8005268:	e10e      	b.n	8005488 <HAL_I2C_Master_Receive+0x440>
 800526a:	bf00      	nop
 800526c:	00100002 	.word	0x00100002
 8005270:	ffff0000 	.word	0xffff0000
 8005274:	00010004 	.word	0x00010004
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	625a      	str	r2, [r3, #36]	; 0x24
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	851a      	strh	r2, [r3, #40]	; 0x28
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	851a      	strh	r2, [r3, #40]	; 0x28
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052ec:	e0b8      	b.n	8005460 <HAL_I2C_Master_Receive+0x418>
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	2200      	movs	r2, #0
 80052f6:	4966      	ldr	r1, [pc, #408]	; (8005490 <HAL_I2C_Master_Receive+0x448>)
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f001 fea9 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <HAL_I2C_Master_Receive+0x2c0>
 8005304:	2301      	movs	r3, #1
 8005306:	e0bf      	b.n	8005488 <HAL_I2C_Master_Receive+0x440>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	625a      	str	r2, [r3, #36]	; 0x24
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	851a      	strh	r2, [r3, #40]	; 0x28
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	855a      	strh	r2, [r3, #42]	; 0x2a
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	2200      	movs	r2, #0
 8005352:	494f      	ldr	r1, [pc, #316]	; (8005490 <HAL_I2C_Master_Receive+0x448>)
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f001 fe7b 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_I2C_Master_Receive+0x31c>
 8005360:	2301      	movs	r3, #1
 8005362:	e091      	b.n	8005488 <HAL_I2C_Master_Receive+0x440>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	851a      	strh	r2, [r3, #40]	; 0x28
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	851a      	strh	r2, [r3, #40]	; 0x28
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053d8:	e042      	b.n	8005460 <HAL_I2C_Master_Receive+0x418>
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f001 ffc0 	bl	8007364 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <HAL_I2C_Master_Receive+0x3a6>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e04c      	b.n	8005488 <HAL_I2C_Master_Receive+0x440>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691a      	ldr	r2, [r3, #16]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	625a      	str	r2, [r3, #36]	; 0x24
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540a:	3b01      	subs	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	851a      	strh	r2, [r3, #40]	; 0x28
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b04      	cmp	r3, #4
 800542c:	d118      	bne.n	8005460 <HAL_I2C_Master_Receive+0x418>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	625a      	str	r2, [r3, #36]	; 0x24
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	851a      	strh	r2, [r3, #40]	; 0x28
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005464:	2b00      	cmp	r3, #0
 8005466:	f47f aec2 	bne.w	80051ee <HAL_I2C_Master_Receive+0x1a6>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005482:	2300      	movs	r3, #0
 8005484:	e000      	b.n	8005488 <HAL_I2C_Master_Receive+0x440>
 8005486:	2302      	movs	r3, #2
 8005488:	4618      	mov	r0, r3
 800548a:	3728      	adds	r7, #40	; 0x28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	00010004 	.word	0x00010004

08005494 <HAL_I2C_EV_IRQHandler>:
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	2300      	movs	r3, #0
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054b4:	73fb      	strb	r3, [r7, #15]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054bc:	73bb      	strb	r3, [r7, #14]
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d003      	beq.n	80054cc <HAL_I2C_EV_IRQHandler+0x38>
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	f040 80c1 	bne.w	800564e <HAL_I2C_EV_IRQHandler+0x1ba>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10d      	bne.n	8005502 <HAL_I2C_EV_IRQHandler+0x6e>
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80054ec:	d003      	beq.n	80054f6 <HAL_I2C_EV_IRQHandler+0x62>
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80054f4:	d101      	bne.n	80054fa <HAL_I2C_EV_IRQHandler+0x66>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <HAL_I2C_EV_IRQHandler+0x68>
 80054fa:	2300      	movs	r3, #0
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	f000 8132 	beq.w	8005766 <HAL_I2C_EV_IRQHandler+0x2d2>
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00c      	beq.n	8005526 <HAL_I2C_EV_IRQHandler+0x92>
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	0a5b      	lsrs	r3, r3, #9
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <HAL_I2C_EV_IRQHandler+0x92>
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f001 ffa8 	bl	800746e <I2C_ConvertOtherXferOptions>
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fd83 	bl	800602a <I2C_Master_SB>
 8005524:	e092      	b.n	800564c <HAL_I2C_EV_IRQHandler+0x1b8>
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	08db      	lsrs	r3, r3, #3
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <HAL_I2C_EV_IRQHandler+0xb2>
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	0a5b      	lsrs	r3, r3, #9
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_I2C_EV_IRQHandler+0xb2>
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fdf9 	bl	8006136 <I2C_Master_ADD10>
 8005544:	e082      	b.n	800564c <HAL_I2C_EV_IRQHandler+0x1b8>
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <HAL_I2C_EV_IRQHandler+0xd2>
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	0a5b      	lsrs	r3, r3, #9
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_I2C_EV_IRQHandler+0xd2>
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fe13 	bl	800618a <I2C_Master_ADDR>
 8005564:	e072      	b.n	800564c <HAL_I2C_EV_IRQHandler+0x1b8>
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	089b      	lsrs	r3, r3, #2
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d03b      	beq.n	80055ea <HAL_I2C_EV_IRQHandler+0x156>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800557c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005580:	f000 80f3 	beq.w	800576a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	09db      	lsrs	r3, r3, #7
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00f      	beq.n	80055b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	0a9b      	lsrs	r3, r3, #10
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	089b      	lsrs	r3, r3, #2
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d103      	bne.n	80055b0 <HAL_I2C_EV_IRQHandler+0x11c>
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f9f3 	bl	8005994 <I2C_MasterTransmit_TXE>
 80055ae:	e04d      	b.n	800564c <HAL_I2C_EV_IRQHandler+0x1b8>
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	089b      	lsrs	r3, r3, #2
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 80d6 	beq.w	800576a <HAL_I2C_EV_IRQHandler+0x2d6>
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	0a5b      	lsrs	r3, r3, #9
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80cf 	beq.w	800576a <HAL_I2C_EV_IRQHandler+0x2d6>
 80055cc:	7bbb      	ldrb	r3, [r7, #14]
 80055ce:	2b21      	cmp	r3, #33	; 0x21
 80055d0:	d103      	bne.n	80055da <HAL_I2C_EV_IRQHandler+0x146>
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa7a 	bl	8005acc <I2C_MasterTransmit_BTF>
 80055d8:	e0c7      	b.n	800576a <HAL_I2C_EV_IRQHandler+0x2d6>
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	f040 80c4 	bne.w	800576a <HAL_I2C_EV_IRQHandler+0x2d6>
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fae8 	bl	8005bb8 <I2C_MemoryTransmit_TXE_BTF>
 80055e8:	e0bf      	b.n	800576a <HAL_I2C_EV_IRQHandler+0x2d6>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f8:	f000 80b7 	beq.w	800576a <HAL_I2C_EV_IRQHandler+0x2d6>
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	099b      	lsrs	r3, r3, #6
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00f      	beq.n	8005628 <HAL_I2C_EV_IRQHandler+0x194>
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	0a9b      	lsrs	r3, r3, #10
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <HAL_I2C_EV_IRQHandler+0x194>
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	089b      	lsrs	r3, r3, #2
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <HAL_I2C_EV_IRQHandler+0x194>
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fb5d 	bl	8005ce0 <I2C_MasterReceive_RXNE>
 8005626:	e011      	b.n	800564c <HAL_I2C_EV_IRQHandler+0x1b8>
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	089b      	lsrs	r3, r3, #2
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 809a 	beq.w	800576a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	0a5b      	lsrs	r3, r3, #9
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 8093 	beq.w	800576a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fc06 	bl	8005e56 <I2C_MasterReceive_BTF>
 800564a:	e08e      	b.n	800576a <HAL_I2C_EV_IRQHandler+0x2d6>
 800564c:	e08d      	b.n	800576a <HAL_I2C_EV_IRQHandler+0x2d6>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <HAL_I2C_EV_IRQHandler+0x1cc>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	e007      	b.n	8005670 <HAL_I2C_EV_IRQHandler+0x1dc>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d012      	beq.n	80056a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	0a5b      	lsrs	r3, r3, #9
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00c      	beq.n	80056a2 <HAL_I2C_EV_IRQHandler+0x20e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_I2C_EV_IRQHandler+0x204>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	69b9      	ldr	r1, [r7, #24]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 ffc4 	bl	8006628 <I2C_Slave_ADDR>
 80056a0:	e066      	b.n	8005770 <HAL_I2C_EV_IRQHandler+0x2dc>
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	091b      	lsrs	r3, r3, #4
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	0a5b      	lsrs	r3, r3, #9
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fffe 	bl	80066bc <I2C_Slave_STOPF>
 80056c0:	e056      	b.n	8005770 <HAL_I2C_EV_IRQHandler+0x2dc>
 80056c2:	7bbb      	ldrb	r3, [r7, #14]
 80056c4:	2b21      	cmp	r3, #33	; 0x21
 80056c6:	d002      	beq.n	80056ce <HAL_I2C_EV_IRQHandler+0x23a>
 80056c8:	7bbb      	ldrb	r3, [r7, #14]
 80056ca:	2b29      	cmp	r3, #41	; 0x29
 80056cc:	d125      	bne.n	800571a <HAL_I2C_EV_IRQHandler+0x286>
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	09db      	lsrs	r3, r3, #7
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00f      	beq.n	80056fa <HAL_I2C_EV_IRQHandler+0x266>
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	0a9b      	lsrs	r3, r3, #10
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_I2C_EV_IRQHandler+0x266>
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	089b      	lsrs	r3, r3, #2
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d103      	bne.n	80056fa <HAL_I2C_EV_IRQHandler+0x266>
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 feda 	bl	80064ac <I2C_SlaveTransmit_TXE>
 80056f8:	e039      	b.n	800576e <HAL_I2C_EV_IRQHandler+0x2da>
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	089b      	lsrs	r3, r3, #2
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d033      	beq.n	800576e <HAL_I2C_EV_IRQHandler+0x2da>
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	0a5b      	lsrs	r3, r3, #9
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d02d      	beq.n	800576e <HAL_I2C_EV_IRQHandler+0x2da>
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 ff07 	bl	8006526 <I2C_SlaveTransmit_BTF>
 8005718:	e029      	b.n	800576e <HAL_I2C_EV_IRQHandler+0x2da>
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	099b      	lsrs	r3, r3, #6
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00f      	beq.n	8005746 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	0a9b      	lsrs	r3, r3, #10
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	089b      	lsrs	r3, r3, #2
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <HAL_I2C_EV_IRQHandler+0x2b2>
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 ff12 	bl	8006568 <I2C_SlaveReceive_RXNE>
 8005744:	e014      	b.n	8005770 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	089b      	lsrs	r3, r3, #2
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00e      	beq.n	8005770 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	0a5b      	lsrs	r3, r3, #9
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <HAL_I2C_EV_IRQHandler+0x2dc>
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 ff40 	bl	80065e4 <I2C_SlaveReceive_BTF>
 8005764:	e004      	b.n	8005770 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005766:	bf00      	nop
 8005768:	e002      	b.n	8005770 <HAL_I2C_EV_IRQHandler+0x2dc>
 800576a:	bf00      	nop
 800576c:	e000      	b.n	8005770 <HAL_I2C_EV_IRQHandler+0x2dc>
 800576e:	bf00      	nop
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_I2C_ER_IRQHandler>:
 8005776:	b580      	push	{r7, lr}
 8005778:	b08a      	sub	sp, #40	; 0x28
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	623b      	str	r3, [r7, #32]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	2300      	movs	r3, #0
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005798:	76fb      	strb	r3, [r7, #27]
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	0a1b      	lsrs	r3, r3, #8
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00e      	beq.n	80057c4 <HAL_I2C_ER_IRQHandler+0x4e>
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	0a1b      	lsrs	r3, r3, #8
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d008      	beq.n	80057c4 <HAL_I2C_ER_IRQHandler+0x4e>
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057c2:	615a      	str	r2, [r3, #20]
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	0a5b      	lsrs	r3, r3, #9
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00e      	beq.n	80057ee <HAL_I2C_ER_IRQHandler+0x78>
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	0a1b      	lsrs	r3, r3, #8
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_I2C_ER_IRQHandler+0x78>
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	f043 0302 	orr.w	r3, r3, #2
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80057ec:	615a      	str	r2, [r3, #20]
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	0a9b      	lsrs	r3, r3, #10
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d03f      	beq.n	800587a <HAL_I2C_ER_IRQHandler+0x104>
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	0a1b      	lsrs	r3, r3, #8
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d039      	beq.n	800587a <HAL_I2C_ER_IRQHandler+0x104>
 8005806:	7efb      	ldrb	r3, [r7, #27]
 8005808:	76bb      	strb	r3, [r7, #26]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005818:	74fb      	strb	r3, [r7, #19]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	7ebb      	ldrb	r3, [r7, #26]
 8005822:	2b20      	cmp	r3, #32
 8005824:	d112      	bne.n	800584c <HAL_I2C_ER_IRQHandler+0xd6>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10f      	bne.n	800584c <HAL_I2C_ER_IRQHandler+0xd6>
 800582c:	7cfb      	ldrb	r3, [r7, #19]
 800582e:	2b21      	cmp	r3, #33	; 0x21
 8005830:	d008      	beq.n	8005844 <HAL_I2C_ER_IRQHandler+0xce>
 8005832:	7cfb      	ldrb	r3, [r7, #19]
 8005834:	2b29      	cmp	r3, #41	; 0x29
 8005836:	d005      	beq.n	8005844 <HAL_I2C_ER_IRQHandler+0xce>
 8005838:	7cfb      	ldrb	r3, [r7, #19]
 800583a:	2b28      	cmp	r3, #40	; 0x28
 800583c:	d106      	bne.n	800584c <HAL_I2C_ER_IRQHandler+0xd6>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b21      	cmp	r3, #33	; 0x21
 8005842:	d103      	bne.n	800584c <HAL_I2C_ER_IRQHandler+0xd6>
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 f869 	bl	800691c <I2C_Slave_AF>
 800584a:	e016      	b.n	800587a <HAL_I2C_ER_IRQHandler+0x104>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005854:	615a      	str	r2, [r3, #20]
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	f043 0304 	orr.w	r3, r3, #4
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
 800585e:	7efb      	ldrb	r3, [r7, #27]
 8005860:	2b10      	cmp	r3, #16
 8005862:	d002      	beq.n	800586a <HAL_I2C_ER_IRQHandler+0xf4>
 8005864:	7efb      	ldrb	r3, [r7, #27]
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	d107      	bne.n	800587a <HAL_I2C_ER_IRQHandler+0x104>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	0adb      	lsrs	r3, r3, #11
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00e      	beq.n	80058a4 <HAL_I2C_ER_IRQHandler+0x12e>
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	0a1b      	lsrs	r3, r3, #8
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d008      	beq.n	80058a4 <HAL_I2C_ER_IRQHandler+0x12e>
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	f043 0308 	orr.w	r3, r3, #8
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80058a2:	615a      	str	r2, [r3, #20]
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d008      	beq.n	80058bc <HAL_I2C_ER_IRQHandler+0x146>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	641a      	str	r2, [r3, #64]	; 0x40
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 f8a0 	bl	80069fc <I2C_ITError>
 80058bc:	bf00      	nop
 80058be:	3728      	adds	r7, #40	; 0x28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_I2C_MasterTxCpltCallback>:
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_I2C_MasterRxCpltCallback>:
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_I2C_SlaveTxCpltCallback>:
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_I2C_SlaveRxCpltCallback>:
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_I2C_AddrCallback>:
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	70fb      	strb	r3, [r7, #3]
 8005920:	4613      	mov	r3, r2
 8005922:	803b      	strh	r3, [r7, #0]
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_I2C_ListenCpltCallback>:
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_I2C_MemTxCpltCallback>:
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_I2C_MemRxCpltCallback>:
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_I2C_ErrorCallback>:
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_I2C_AbortCpltCallback>:
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <I2C_MasterTransmit_TXE>:
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	73fb      	strb	r3, [r7, #15]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059aa:	73bb      	strb	r3, [r7, #14]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d150      	bne.n	8005a5c <I2C_MasterTransmit_TXE+0xc8>
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b21      	cmp	r3, #33	; 0x21
 80059be:	d14d      	bne.n	8005a5c <I2C_MasterTransmit_TXE+0xc8>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d01d      	beq.n	8005a02 <I2C_MasterTransmit_TXE+0x6e>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d01a      	beq.n	8005a02 <I2C_MasterTransmit_TXE+0x6e>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059d2:	d016      	beq.n	8005a02 <I2C_MasterTransmit_TXE+0x6e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059e2:	605a      	str	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2211      	movs	r2, #17
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff ff62 	bl	80058c4 <HAL_I2C_MasterTxCpltCallback>
 8005a00:	e060      	b.n	8005ac4 <I2C_MasterTransmit_TXE+0x130>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	d107      	bne.n	8005a4c <I2C_MasterTransmit_TXE+0xb8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff ff7d 	bl	8005944 <HAL_I2C_MemTxCpltCallback>
 8005a4a:	e03b      	b.n	8005ac4 <I2C_MasterTransmit_TXE+0x130>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff ff35 	bl	80058c4 <HAL_I2C_MasterTxCpltCallback>
 8005a5a:	e033      	b.n	8005ac4 <I2C_MasterTransmit_TXE+0x130>
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	2b21      	cmp	r3, #33	; 0x21
 8005a60:	d005      	beq.n	8005a6e <I2C_MasterTransmit_TXE+0xda>
 8005a62:	7bbb      	ldrb	r3, [r7, #14]
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d12d      	bne.n	8005ac4 <I2C_MasterTransmit_TXE+0x130>
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	2b22      	cmp	r3, #34	; 0x22
 8005a6c:	d12a      	bne.n	8005ac4 <I2C_MasterTransmit_TXE+0x130>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d108      	bne.n	8005a8a <I2C_MasterTransmit_TXE+0xf6>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a86:	605a      	str	r2, [r3, #4]
 8005a88:	e01c      	b.n	8005ac4 <I2C_MasterTransmit_TXE+0x130>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	d103      	bne.n	8005a9e <I2C_MasterTransmit_TXE+0x10a>
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f88e 	bl	8005bb8 <I2C_MemoryTransmit_TXE_BTF>
 8005a9c:	e012      	b.n	8005ac4 <I2C_MasterTransmit_TXE+0x130>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	781a      	ldrb	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	611a      	str	r2, [r3, #16]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	625a      	str	r2, [r3, #36]	; 0x24
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ac2:	e7ff      	b.n	8005ac4 <I2C_MasterTransmit_TXE+0x130>
 8005ac4:	bf00      	nop
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <I2C_MasterTransmit_BTF>:
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b21      	cmp	r3, #33	; 0x21
 8005ae4:	d164      	bne.n	8005bb0 <I2C_MasterTransmit_BTF+0xe4>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d012      	beq.n	8005b16 <I2C_MasterTransmit_BTF+0x4a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	781a      	ldrb	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	611a      	str	r2, [r3, #16]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b14:	e04c      	b.n	8005bb0 <I2C_MasterTransmit_BTF+0xe4>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d01d      	beq.n	8005b58 <I2C_MasterTransmit_BTF+0x8c>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d01a      	beq.n	8005b58 <I2C_MasterTransmit_BTF+0x8c>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b28:	d016      	beq.n	8005b58 <I2C_MasterTransmit_BTF+0x8c>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2211      	movs	r2, #17
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff feb7 	bl	80058c4 <HAL_I2C_MasterTxCpltCallback>
 8005b56:	e02b      	b.n	8005bb0 <I2C_MasterTransmit_BTF+0xe4>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b66:	605a      	str	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d107      	bne.n	8005ba2 <I2C_MasterTransmit_BTF+0xd6>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff fed2 	bl	8005944 <HAL_I2C_MemTxCpltCallback>
 8005ba0:	e006      	b.n	8005bb0 <I2C_MasterTransmit_BTF+0xe4>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff fe8a 	bl	80058c4 <HAL_I2C_MasterTxCpltCallback>
 8005bb0:	bf00      	nop
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <I2C_MemoryTransmit_TXE_BTF>:
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc6:	73fb      	strb	r3, [r7, #15]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d11d      	bne.n	8005c0c <I2C_MemoryTransmit_TXE_BTF+0x54>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d10b      	bne.n	8005bf0 <I2C_MemoryTransmit_TXE_BTF+0x38>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	611a      	str	r2, [r3, #16]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be8:	1c9a      	adds	r2, r3, #2
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	651a      	str	r2, [r3, #80]	; 0x50
 8005bee:	e073      	b.n	8005cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	121b      	asrs	r3, r3, #8
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	611a      	str	r2, [r3, #16]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	651a      	str	r2, [r3, #80]	; 0x50
 8005c0a:	e065      	b.n	8005cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d10b      	bne.n	8005c2c <I2C_MemoryTransmit_TXE_BTF+0x74>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	611a      	str	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	651a      	str	r2, [r3, #80]	; 0x50
 8005c2a:	e055      	b.n	8005cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d151      	bne.n	8005cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	2b22      	cmp	r3, #34	; 0x22
 8005c38:	d10d      	bne.n	8005c56 <I2C_MemoryTransmit_TXE_BTF+0x9e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	651a      	str	r2, [r3, #80]	; 0x50
 8005c54:	e040      	b.n	8005cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d015      	beq.n	8005c8c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	2b21      	cmp	r3, #33	; 0x21
 8005c64:	d112      	bne.n	8005c8c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	611a      	str	r2, [r3, #16]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c8a:	e025      	b.n	8005cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d120      	bne.n	8005cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	2b21      	cmp	r3, #33	; 0x21
 8005c9a:	d11d      	bne.n	8005cd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005caa:	605a      	str	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff fe36 	bl	8005944 <HAL_I2C_MemTxCpltCallback>
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <I2C_MasterReceive_RXNE>:
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b22      	cmp	r3, #34	; 0x22
 8005cf2:	f040 80ac 	bne.w	8005e4e <I2C_MasterReceive_RXNE+0x16e>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d921      	bls.n	8005d48 <I2C_MasterReceive_RXNE+0x68>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	f040 808c 	bne.w	8005e4e <I2C_MasterReceive_RXNE+0x16e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d44:	605a      	str	r2, [r3, #4]
 8005d46:	e082      	b.n	8005e4e <I2C_MasterReceive_RXNE+0x16e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d075      	beq.n	8005e3c <I2C_MasterReceive_RXNE+0x15c>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d002      	beq.n	8005d5c <I2C_MasterReceive_RXNE+0x7c>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d16f      	bne.n	8005e3c <I2C_MasterReceive_RXNE+0x15c>
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 facf 	bl	8007300 <I2C_WaitOnSTOPRequestThroughIT>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d142      	bne.n	8005dee <I2C_MasterReceive_RXNE+0x10e>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d86:	605a      	str	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	625a      	str	r2, [r3, #36]	; 0x24
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b40      	cmp	r3, #64	; 0x40
 8005dc0:	d10a      	bne.n	8005dd8 <I2C_MasterReceive_RXNE+0xf8>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff fdc1 	bl	8005958 <HAL_I2C_MemRxCpltCallback>
 8005dd6:	e03a      	b.n	8005e4e <I2C_MasterReceive_RXNE+0x16e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2212      	movs	r2, #18
 8005de4:	631a      	str	r2, [r3, #48]	; 0x30
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff fd76 	bl	80058d8 <HAL_I2C_MasterRxCpltCallback>
 8005dec:	e02f      	b.n	8005e4e <I2C_MasterReceive_RXNE+0x16e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	625a      	str	r2, [r3, #36]	; 0x24
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff fd99 	bl	800596c <HAL_I2C_ErrorCallback>
 8005e3a:	e008      	b.n	8005e4e <I2C_MasterReceive_RXNE+0x16e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	e7ff      	b.n	8005e4e <I2C_MasterReceive_RXNE+0x16e>
 8005e4e:	bf00      	nop
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <I2C_MasterReceive_BTF>:
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d11b      	bne.n	8005ea6 <I2C_MasterReceive_BTF+0x50>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e7c:	605a      	str	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ea4:	e0bd      	b.n	8006022 <I2C_MasterReceive_BTF+0x1cc>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d129      	bne.n	8005f04 <I2C_MasterReceive_BTF+0xae>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ebe:	605a      	str	r2, [r3, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d00a      	beq.n	8005edc <I2C_MasterReceive_BTF+0x86>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d007      	beq.n	8005edc <I2C_MasterReceive_BTF+0x86>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	625a      	str	r2, [r3, #36]	; 0x24
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f02:	e08e      	b.n	8006022 <I2C_MasterReceive_BTF+0x1cc>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d176      	bne.n	8005ffc <I2C_MasterReceive_BTF+0x1a6>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d002      	beq.n	8005f1a <I2C_MasterReceive_BTF+0xc4>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b10      	cmp	r3, #16
 8005f18:	d108      	bne.n	8005f2c <I2C_MasterReceive_BTF+0xd6>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e019      	b.n	8005f60 <I2C_MasterReceive_BTF+0x10a>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d002      	beq.n	8005f38 <I2C_MasterReceive_BTF+0xe2>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d108      	bne.n	8005f4a <I2C_MasterReceive_BTF+0xf4>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	e00a      	b.n	8005f60 <I2C_MasterReceive_BTF+0x10a>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d007      	beq.n	8005f60 <I2C_MasterReceive_BTF+0x10a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	625a      	str	r2, [r3, #36]	; 0x24
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005fba:	605a      	str	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b40      	cmp	r3, #64	; 0x40
 8005fce:	d10a      	bne.n	8005fe6 <I2C_MasterReceive_BTF+0x190>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	631a      	str	r2, [r3, #48]	; 0x30
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff fcba 	bl	8005958 <HAL_I2C_MemRxCpltCallback>
 8005fe4:	e01d      	b.n	8006022 <I2C_MasterReceive_BTF+0x1cc>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2212      	movs	r2, #18
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff fc6f 	bl	80058d8 <HAL_I2C_MasterRxCpltCallback>
 8005ffa:	e012      	b.n	8006022 <I2C_MasterReceive_BTF+0x1cc>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	625a      	str	r2, [r3, #36]	; 0x24
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006022:	bf00      	nop
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <I2C_Master_SB>:
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d117      	bne.n	800606e <I2C_Master_SB+0x44>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006042:	2b00      	cmp	r3, #0
 8006044:	d109      	bne.n	800605a <I2C_Master_SB+0x30>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006056:	611a      	str	r2, [r3, #16]
 8006058:	e067      	b.n	800612a <I2C_Master_SB+0x100>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f043 0301 	orr.w	r3, r3, #1
 8006064:	b2da      	uxtb	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	611a      	str	r2, [r3, #16]
 800606c:	e05d      	b.n	800612a <I2C_Master_SB+0x100>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006076:	d133      	bne.n	80060e0 <I2C_Master_SB+0xb6>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b21      	cmp	r3, #33	; 0x21
 8006082:	d109      	bne.n	8006098 <I2C_Master_SB+0x6e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006088:	b2db      	uxtb	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006094:	611a      	str	r2, [r3, #16]
 8006096:	e008      	b.n	80060aa <I2C_Master_SB+0x80>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f043 0301 	orr.w	r3, r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	611a      	str	r2, [r3, #16]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d004      	beq.n	80060bc <I2C_Master_SB+0x92>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d108      	bne.n	80060ce <I2C_Master_SB+0xa4>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d032      	beq.n	800612a <I2C_Master_SB+0x100>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d02d      	beq.n	800612a <I2C_Master_SB+0x100>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	e024      	b.n	800612a <I2C_Master_SB+0x100>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10e      	bne.n	8006106 <I2C_Master_SB+0xdc>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	11db      	asrs	r3, r3, #7
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	f003 0306 	and.w	r3, r3, #6
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	f063 030f 	orn	r3, r3, #15
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	611a      	str	r2, [r3, #16]
 8006104:	e011      	b.n	800612a <I2C_Master_SB+0x100>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610a:	2b01      	cmp	r3, #1
 800610c:	d10d      	bne.n	800612a <I2C_Master_SB+0x100>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006112:	b29b      	uxth	r3, r3
 8006114:	11db      	asrs	r3, r3, #7
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f003 0306 	and.w	r3, r3, #6
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f063 030e 	orn	r3, r3, #14
 8006122:	b2da      	uxtb	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	611a      	str	r2, [r3, #16]
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <I2C_Master_ADD10>:
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006142:	b2da      	uxtb	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	611a      	str	r2, [r3, #16]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	2b00      	cmp	r3, #0
 8006150:	d004      	beq.n	800615c <I2C_Master_ADD10+0x26>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d108      	bne.n	800616e <I2C_Master_ADD10+0x38>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00c      	beq.n	800617e <I2C_Master_ADD10+0x48>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <I2C_Master_ADD10+0x48>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <I2C_Master_ADDR>:
 800618a:	b480      	push	{r7}
 800618c:	b091      	sub	sp, #68	; 0x44
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006198:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	637b      	str	r3, [r7, #52]	; 0x34
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b22      	cmp	r3, #34	; 0x22
 80061b2:	f040 8169 	bne.w	8006488 <I2C_Master_ADDR+0x2fe>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10f      	bne.n	80061de <I2C_Master_ADDR+0x54>
 80061be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d10b      	bne.n	80061de <I2C_Master_ADDR+0x54>
 80061c6:	2300      	movs	r3, #0
 80061c8:	633b      	str	r3, [r7, #48]	; 0x30
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	633b      	str	r3, [r7, #48]	; 0x30
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	633b      	str	r3, [r7, #48]	; 0x30
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	e160      	b.n	80064a0 <I2C_Master_ADDR+0x316>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d11d      	bne.n	8006222 <I2C_Master_ADDR+0x98>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061ee:	d118      	bne.n	8006222 <I2C_Master_ADDR+0x98>
 80061f0:	2300      	movs	r3, #0
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	651a      	str	r2, [r3, #80]	; 0x50
 8006220:	e13e      	b.n	80064a0 <I2C_Master_ADDR+0x316>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d113      	bne.n	8006254 <I2C_Master_ADDR+0xca>
 800622c:	2300      	movs	r3, #0
 800622e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e115      	b.n	8006480 <I2C_Master_ADDR+0x2f6>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	f040 808a 	bne.w	8006374 <I2C_Master_ADDR+0x1ea>
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006266:	d137      	bne.n	80062d8 <I2C_Master_ADDR+0x14e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006286:	d113      	bne.n	80062b0 <I2C_Master_ADDR+0x126>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	2300      	movs	r3, #0
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	e0e7      	b.n	8006480 <I2C_Master_ADDR+0x2f6>
 80062b0:	2300      	movs	r3, #0
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	623b      	str	r3, [r7, #32]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	623b      	str	r3, [r7, #32]
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	e0d3      	b.n	8006480 <I2C_Master_ADDR+0x2f6>
 80062d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d02e      	beq.n	800633c <I2C_Master_ADDR+0x1b2>
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d02b      	beq.n	800633c <I2C_Master_ADDR+0x1b2>
 80062e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e6:	2b12      	cmp	r3, #18
 80062e8:	d102      	bne.n	80062f0 <I2C_Master_ADDR+0x166>
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d125      	bne.n	800633c <I2C_Master_ADDR+0x1b2>
 80062f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d00e      	beq.n	8006314 <I2C_Master_ADDR+0x18a>
 80062f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d00b      	beq.n	8006314 <I2C_Master_ADDR+0x18a>
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d008      	beq.n	8006314 <I2C_Master_ADDR+0x18a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e007      	b.n	8006324 <I2C_Master_ADDR+0x19a>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	2300      	movs	r3, #0
 8006326:	61fb      	str	r3, [r7, #28]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	61fb      	str	r3, [r7, #28]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	61fb      	str	r3, [r7, #28]
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	e0a1      	b.n	8006480 <I2C_Master_ADDR+0x2f6>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	2300      	movs	r3, #0
 800634e:	61bb      	str	r3, [r7, #24]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e085      	b.n	8006480 <I2C_Master_ADDR+0x2f6>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d14d      	bne.n	800641a <I2C_Master_ADDR+0x290>
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	2b04      	cmp	r3, #4
 8006382:	d016      	beq.n	80063b2 <I2C_Master_ADDR+0x228>
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	2b02      	cmp	r3, #2
 8006388:	d013      	beq.n	80063b2 <I2C_Master_ADDR+0x228>
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	2b10      	cmp	r3, #16
 800638e:	d010      	beq.n	80063b2 <I2C_Master_ADDR+0x228>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	e007      	b.n	80063c2 <I2C_Master_ADDR+0x238>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d0:	d117      	bne.n	8006402 <I2C_Master_ADDR+0x278>
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063d8:	d00b      	beq.n	80063f2 <I2C_Master_ADDR+0x268>
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d008      	beq.n	80063f2 <I2C_Master_ADDR+0x268>
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d005      	beq.n	80063f2 <I2C_Master_ADDR+0x268>
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	2b10      	cmp	r3, #16
 80063ea:	d002      	beq.n	80063f2 <I2C_Master_ADDR+0x268>
 80063ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d107      	bne.n	8006402 <I2C_Master_ADDR+0x278>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006400:	605a      	str	r2, [r3, #4]
 8006402:	2300      	movs	r3, #0
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	e032      	b.n	8006480 <I2C_Master_ADDR+0x2f6>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006438:	d117      	bne.n	800646a <I2C_Master_ADDR+0x2e0>
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006440:	d00b      	beq.n	800645a <I2C_Master_ADDR+0x2d0>
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	2b01      	cmp	r3, #1
 8006446:	d008      	beq.n	800645a <I2C_Master_ADDR+0x2d0>
 8006448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644a:	2b08      	cmp	r3, #8
 800644c:	d005      	beq.n	800645a <I2C_Master_ADDR+0x2d0>
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	2b10      	cmp	r3, #16
 8006452:	d002      	beq.n	800645a <I2C_Master_ADDR+0x2d0>
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	2b20      	cmp	r3, #32
 8006458:	d107      	bne.n	800646a <I2C_Master_ADDR+0x2e0>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	2300      	movs	r3, #0
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	651a      	str	r2, [r3, #80]	; 0x50
 8006486:	e00b      	b.n	80064a0 <I2C_Master_ADDR+0x316>
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	e7ff      	b.n	80064a0 <I2C_Master_ADDR+0x316>
 80064a0:	bf00      	nop
 80064a2:	3744      	adds	r7, #68	; 0x44
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <I2C_SlaveTransmit_TXE>:
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ba:	73fb      	strb	r3, [r7, #15]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d02b      	beq.n	800651e <I2C_SlaveTransmit_TXE+0x72>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	781a      	ldrb	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	611a      	str	r2, [r3, #16]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	625a      	str	r2, [r3, #36]	; 0x24
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d114      	bne.n	800651e <I2C_SlaveTransmit_TXE+0x72>
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b29      	cmp	r3, #41	; 0x29
 80064f8:	d111      	bne.n	800651e <I2C_SlaveTransmit_TXE+0x72>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006508:	605a      	str	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2221      	movs	r2, #33	; 0x21
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2228      	movs	r2, #40	; 0x28
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7ff f9e7 	bl	80058ec <HAL_I2C_SlaveTxCpltCallback>
 800651e:	bf00      	nop
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <I2C_SlaveTransmit_BTF>:
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d011      	beq.n	800655c <I2C_SlaveTransmit_BTF+0x36>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	781a      	ldrb	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	611a      	str	r2, [r3, #16]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	625a      	str	r2, [r3, #36]	; 0x24
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <I2C_SlaveReceive_RXNE>:
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006576:	73fb      	strb	r3, [r7, #15]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d02c      	beq.n	80065dc <I2C_SlaveReceive_RXNE+0x74>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	625a      	str	r2, [r3, #36]	; 0x24
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d114      	bne.n	80065dc <I2C_SlaveReceive_RXNE+0x74>
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	2b2a      	cmp	r3, #42	; 0x2a
 80065b6:	d111      	bne.n	80065dc <I2C_SlaveReceive_RXNE+0x74>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c6:	605a      	str	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2222      	movs	r2, #34	; 0x22
 80065cc:	631a      	str	r2, [r3, #48]	; 0x30
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2228      	movs	r2, #40	; 0x28
 80065d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff f992 	bl	8005900 <HAL_I2C_SlaveRxCpltCallback>
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <I2C_SlaveReceive_BTF>:
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d012      	beq.n	800661c <I2C_SlaveReceive_BTF+0x38>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	b2d2      	uxtb	r2, r2
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	625a      	str	r2, [r3, #36]	; 0x24
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006612:	b29b      	uxth	r3, r3
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <I2C_Slave_ADDR>:
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
 8006632:	2300      	movs	r3, #0
 8006634:	73fb      	strb	r3, [r7, #15]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663c:	b2db      	uxtb	r3, r3
 800663e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006642:	2b28      	cmp	r3, #40	; 0x28
 8006644:	d127      	bne.n	8006696 <I2C_Slave_ADDR+0x6e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006654:	605a      	str	r2, [r3, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	089b      	lsrs	r3, r3, #2
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <I2C_Slave_ADDR+0x3e>
 8006662:	2301      	movs	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	09db      	lsrs	r3, r3, #7
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d103      	bne.n	800667a <I2C_Slave_ADDR+0x52>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	81bb      	strh	r3, [r7, #12]
 8006678:	e002      	b.n	8006680 <I2C_Slave_ADDR+0x58>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	81bb      	strh	r3, [r7, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006688:	89ba      	ldrh	r2, [r7, #12]
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff f940 	bl	8005914 <HAL_I2C_AddrCallback>
 8006694:	e00e      	b.n	80066b4 <I2C_Slave_ADDR+0x8c>
 8006696:	2300      	movs	r3, #0
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	60bb      	str	r3, [r7, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <I2C_Slave_STOPF>:
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ca:	73fb      	strb	r3, [r7, #15]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066da:	605a      	str	r2, [r3, #4]
 80066dc:	2300      	movs	r3, #0
 80066de:	60bb      	str	r3, [r7, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	60bb      	str	r3, [r7, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0201 	orr.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006718:	d172      	bne.n	8006800 <I2C_Slave_STOPF+0x144>
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	2b22      	cmp	r3, #34	; 0x22
 800671e:	d002      	beq.n	8006726 <I2C_Slave_STOPF+0x6a>
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	2b2a      	cmp	r3, #42	; 0x2a
 8006724:	d135      	bne.n	8006792 <I2C_Slave_STOPF+0xd6>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	b29a      	uxth	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <I2C_Slave_STOPF+0x8e>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	f043 0204 	orr.w	r2, r3, #4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	641a      	str	r2, [r3, #64]	; 0x40
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006758:	605a      	str	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe f85b 	bl	800481a <HAL_DMA_GetState>
 8006764:	4603      	mov	r3, r0
 8006766:	2b01      	cmp	r3, #1
 8006768:	d049      	beq.n	80067fe <I2C_Slave_STOPF+0x142>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	4a69      	ldr	r2, [pc, #420]	; (8006914 <I2C_Slave_STOPF+0x258>)
 8006770:	651a      	str	r2, [r3, #80]	; 0x50
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe f82d 	bl	80047d6 <HAL_DMA_Abort_IT>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d03d      	beq.n	80067fe <I2C_Slave_STOPF+0x142>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800678c:	4610      	mov	r0, r2
 800678e:	4798      	blx	r3
 8006790:	e035      	b.n	80067fe <I2C_Slave_STOPF+0x142>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	b29a      	uxth	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <I2C_Slave_STOPF+0xfa>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	f043 0204 	orr.w	r2, r3, #4
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c4:	605a      	str	r2, [r3, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe f825 	bl	800481a <HAL_DMA_GetState>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d014      	beq.n	8006800 <I2C_Slave_STOPF+0x144>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067da:	4a4e      	ldr	r2, [pc, #312]	; (8006914 <I2C_Slave_STOPF+0x258>)
 80067dc:	651a      	str	r2, [r3, #80]	; 0x50
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fd fff7 	bl	80047d6 <HAL_DMA_Abort_IT>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d008      	beq.n	8006800 <I2C_Slave_STOPF+0x144>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
 80067fc:	e000      	b.n	8006800 <I2C_Slave_STOPF+0x144>
 80067fe:	bf00      	nop
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d03e      	beq.n	8006888 <I2C_Slave_STOPF+0x1cc>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b04      	cmp	r3, #4
 8006816:	d112      	bne.n	800683e <I2C_Slave_STOPF+0x182>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691a      	ldr	r2, [r3, #16]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	625a      	str	r2, [r3, #36]	; 0x24
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006848:	2b40      	cmp	r3, #64	; 0x40
 800684a:	d112      	bne.n	8006872 <I2C_Slave_STOPF+0x1b6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691a      	ldr	r2, [r3, #16]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	625a      	str	r2, [r3, #36]	; 0x24
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <I2C_Slave_STOPF+0x1cc>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	f043 0204 	orr.w	r2, r3, #4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	641a      	str	r2, [r3, #64]	; 0x40
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <I2C_Slave_STOPF+0x1dc>
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f8b3 	bl	80069fc <I2C_ITError>
 8006896:	e039      	b.n	800690c <I2C_Slave_STOPF+0x250>
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2b2a      	cmp	r3, #42	; 0x2a
 800689c:	d109      	bne.n	80068b2 <I2C_Slave_STOPF+0x1f6>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	631a      	str	r2, [r3, #48]	; 0x30
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2228      	movs	r2, #40	; 0x28
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff f827 	bl	8005900 <HAL_I2C_SlaveRxCpltCallback>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b28      	cmp	r3, #40	; 0x28
 80068bc:	d111      	bne.n	80068e2 <I2C_Slave_STOPF+0x226>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a15      	ldr	r2, [pc, #84]	; (8006918 <I2C_Slave_STOPF+0x25c>)
 80068c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff f828 	bl	8005930 <HAL_I2C_ListenCpltCallback>
 80068e0:	e014      	b.n	800690c <I2C_Slave_STOPF+0x250>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	2b22      	cmp	r3, #34	; 0x22
 80068e8:	d002      	beq.n	80068f0 <I2C_Slave_STOPF+0x234>
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	2b22      	cmp	r3, #34	; 0x22
 80068ee:	d10d      	bne.n	800690c <I2C_Slave_STOPF+0x250>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	631a      	str	r2, [r3, #48]	; 0x30
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fe fffa 	bl	8005900 <HAL_I2C_SlaveRxCpltCallback>
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	08006f01 	.word	0x08006f01
 8006918:	ffff0000 	.word	0xffff0000

0800691c <I2C_Slave_AF>:
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692a:	73fb      	strb	r3, [r7, #15]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b08      	cmp	r3, #8
 8006936:	d002      	beq.n	800693e <I2C_Slave_AF+0x22>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b20      	cmp	r3, #32
 800693c:	d129      	bne.n	8006992 <I2C_Slave_AF+0x76>
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	2b28      	cmp	r3, #40	; 0x28
 8006942:	d126      	bne.n	8006992 <I2C_Slave_AF+0x76>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a2c      	ldr	r2, [pc, #176]	; (80069f8 <I2C_Slave_AF+0xdc>)
 8006948:	62da      	str	r2, [r3, #44]	; 0x2c
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006962:	615a      	str	r2, [r3, #20]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	631a      	str	r2, [r3, #48]	; 0x30
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fe ffd0 	bl	8005930 <HAL_I2C_ListenCpltCallback>
 8006990:	e02e      	b.n	80069f0 <I2C_Slave_AF+0xd4>
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b21      	cmp	r3, #33	; 0x21
 8006996:	d126      	bne.n	80069e6 <I2C_Slave_AF+0xca>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a17      	ldr	r2, [pc, #92]	; (80069f8 <I2C_Slave_AF+0xdc>)
 800699c:	62da      	str	r2, [r3, #44]	; 0x2c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2221      	movs	r2, #33	; 0x21
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069c2:	605a      	str	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069cc:	615a      	str	r2, [r3, #20]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7fe ff84 	bl	80058ec <HAL_I2C_SlaveTxCpltCallback>
 80069e4:	e004      	b.n	80069f0 <I2C_Slave_AF+0xd4>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069ee:	615a      	str	r2, [r3, #20]
 80069f0:	bf00      	nop
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	ffff0000 	.word	0xffff0000

080069fc <I2C_ITError>:
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a0a:	73fb      	strb	r3, [r7, #15]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a12:	73bb      	strb	r3, [r7, #14]
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	2b10      	cmp	r3, #16
 8006a18:	d002      	beq.n	8006a20 <I2C_ITError+0x24>
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b40      	cmp	r3, #64	; 0x40
 8006a1e:	d10a      	bne.n	8006a36 <I2C_ITError+0x3a>
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b22      	cmp	r3, #34	; 0x22
 8006a24:	d107      	bne.n	8006a36 <I2C_ITError+0x3a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a3c:	2b28      	cmp	r3, #40	; 0x28
 8006a3e:	d107      	bne.n	8006a50 <I2C_ITError+0x54>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	631a      	str	r2, [r3, #48]	; 0x30
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2228      	movs	r2, #40	; 0x28
 8006a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a4e:	e015      	b.n	8006a7c <I2C_ITError+0x80>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5e:	d00a      	beq.n	8006a76 <I2C_ITError+0x7a>
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b60      	cmp	r3, #96	; 0x60
 8006a64:	d007      	beq.n	8006a76 <I2C_ITError+0x7a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a8a:	d162      	bne.n	8006b52 <I2C_ITError+0x156>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a9a:	605a      	str	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d020      	beq.n	8006aec <I2C_ITError+0xf0>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aae:	4a6a      	ldr	r2, [pc, #424]	; (8006c58 <I2C_ITError+0x25c>)
 8006ab0:	651a      	str	r2, [r3, #80]	; 0x50
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fd fe8d 	bl	80047d6 <HAL_DMA_Abort_IT>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8089 	beq.w	8006bd6 <I2C_ITError+0x1da>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0201 	bic.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	4798      	blx	r3
 8006aea:	e074      	b.n	8006bd6 <I2C_ITError+0x1da>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	4a59      	ldr	r2, [pc, #356]	; (8006c58 <I2C_ITError+0x25c>)
 8006af2:	651a      	str	r2, [r3, #80]	; 0x50
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fd fe6c 	bl	80047d6 <HAL_DMA_Abort_IT>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d068      	beq.n	8006bd6 <I2C_ITError+0x1da>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d10b      	bne.n	8006b2a <I2C_ITError+0x12e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	625a      	str	r2, [r3, #36]	; 0x24
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0201 	bic.w	r2, r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4798      	blx	r3
 8006b50:	e041      	b.n	8006bd6 <I2C_ITError+0x1da>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b60      	cmp	r3, #96	; 0x60
 8006b5c:	d125      	bne.n	8006baa <I2C_ITError+0x1ae>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	641a      	str	r2, [r3, #64]	; 0x40
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b76:	2b40      	cmp	r3, #64	; 0x40
 8006b78:	d10b      	bne.n	8006b92 <I2C_ITError+0x196>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0201 	bic.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fe feec 	bl	8005980 <HAL_I2C_AbortCpltCallback>
 8006ba8:	e015      	b.n	8006bd6 <I2C_ITError+0x1da>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb4:	2b40      	cmp	r3, #64	; 0x40
 8006bb6:	d10b      	bne.n	8006bd0 <I2C_ITError+0x1d4>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7fe fecb 	bl	800596c <HAL_I2C_ErrorCallback>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	60bb      	str	r3, [r7, #8]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10e      	bne.n	8006c04 <I2C_ITError+0x208>
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d109      	bne.n	8006c04 <I2C_ITError+0x208>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d104      	bne.n	8006c04 <I2C_ITError+0x208>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <I2C_ITError+0x218>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c12:	605a      	str	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1a:	73fb      	strb	r3, [r7, #15]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d113      	bne.n	8006c50 <I2C_ITError+0x254>
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	2b28      	cmp	r3, #40	; 0x28
 8006c2c:	d110      	bne.n	8006c50 <I2C_ITError+0x254>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a0a      	ldr	r2, [pc, #40]	; (8006c5c <I2C_ITError+0x260>)
 8006c32:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fe fe70 	bl	8005930 <HAL_I2C_ListenCpltCallback>
 8006c50:	bf00      	nop
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	08006f01 	.word	0x08006f01
 8006c5c:	ffff0000 	.word	0xffff0000

08006c60 <I2C_MasterRequestWrite>:
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	817b      	strh	r3, [r7, #10]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d006      	beq.n	8006c8a <I2C_MasterRequestWrite+0x2a>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d003      	beq.n	8006c8a <I2C_MasterRequestWrite+0x2a>
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c88:	d108      	bne.n	8006c9c <I2C_MasterRequestWrite+0x3c>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	e00b      	b.n	8006cb4 <I2C_MasterRequestWrite+0x54>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	2b12      	cmp	r3, #18
 8006ca2:	d107      	bne.n	8006cb4 <I2C_MasterRequestWrite+0x54>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f9c5 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00d      	beq.n	8006ce8 <I2C_MasterRequestWrite+0x88>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cda:	d103      	bne.n	8006ce4 <I2C_MasterRequestWrite+0x84>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e035      	b.n	8006d54 <I2C_MasterRequestWrite+0xf4>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf0:	d108      	bne.n	8006d04 <I2C_MasterRequestWrite+0xa4>
 8006cf2:	897b      	ldrh	r3, [r7, #10]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d00:	611a      	str	r2, [r3, #16]
 8006d02:	e01b      	b.n	8006d3c <I2C_MasterRequestWrite+0xdc>
 8006d04:	897b      	ldrh	r3, [r7, #10]
 8006d06:	11db      	asrs	r3, r3, #7
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	f003 0306 	and.w	r3, r3, #6
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f063 030f 	orn	r3, r3, #15
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	611a      	str	r2, [r3, #16]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	490e      	ldr	r1, [pc, #56]	; (8006d5c <I2C_MasterRequestWrite+0xfc>)
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 f9eb 	bl	80070fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <I2C_MasterRequestWrite+0xd2>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e010      	b.n	8006d54 <I2C_MasterRequestWrite+0xf4>
 8006d32:	897b      	ldrh	r3, [r7, #10]
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	611a      	str	r2, [r3, #16]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	4907      	ldr	r1, [pc, #28]	; (8006d60 <I2C_MasterRequestWrite+0x100>)
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 f9db 	bl	80070fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <I2C_MasterRequestWrite+0xf2>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <I2C_MasterRequestWrite+0xf4>
 8006d52:	2300      	movs	r3, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	3718      	adds	r7, #24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	00010008 	.word	0x00010008
 8006d60:	00010002 	.word	0x00010002

08006d64 <I2C_MasterRequestRead>:
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	607a      	str	r2, [r7, #4]
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	460b      	mov	r3, r1
 8006d72:	817b      	strh	r3, [r7, #10]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d006      	beq.n	8006d9e <I2C_MasterRequestRead+0x3a>
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d003      	beq.n	8006d9e <I2C_MasterRequestRead+0x3a>
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d9c:	d108      	bne.n	8006db0 <I2C_MasterRequestRead+0x4c>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	e00b      	b.n	8006dc8 <I2C_MasterRequestRead+0x64>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	2b11      	cmp	r3, #17
 8006db6:	d107      	bne.n	8006dc8 <I2C_MasterRequestRead+0x64>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f93b 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00d      	beq.n	8006dfc <I2C_MasterRequestRead+0x98>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dee:	d103      	bne.n	8006df8 <I2C_MasterRequestRead+0x94>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006df6:	641a      	str	r2, [r3, #64]	; 0x40
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e079      	b.n	8006ef0 <I2C_MasterRequestRead+0x18c>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e04:	d108      	bne.n	8006e18 <I2C_MasterRequestRead+0xb4>
 8006e06:	897b      	ldrh	r3, [r7, #10]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	611a      	str	r2, [r3, #16]
 8006e16:	e05f      	b.n	8006ed8 <I2C_MasterRequestRead+0x174>
 8006e18:	897b      	ldrh	r3, [r7, #10]
 8006e1a:	11db      	asrs	r3, r3, #7
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f003 0306 	and.w	r3, r3, #6
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	f063 030f 	orn	r3, r3, #15
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	611a      	str	r2, [r3, #16]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	4930      	ldr	r1, [pc, #192]	; (8006ef8 <I2C_MasterRequestRead+0x194>)
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 f961 	bl	80070fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <I2C_MasterRequestRead+0xe2>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e054      	b.n	8006ef0 <I2C_MasterRequestRead+0x18c>
 8006e46:	897b      	ldrh	r3, [r7, #10]
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	611a      	str	r2, [r3, #16]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	4929      	ldr	r1, [pc, #164]	; (8006efc <I2C_MasterRequestRead+0x198>)
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 f951 	bl	80070fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <I2C_MasterRequestRead+0x102>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e044      	b.n	8006ef0 <I2C_MasterRequestRead+0x18c>
 8006e66:	2300      	movs	r3, #0
 8006e68:	613b      	str	r3, [r7, #16]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	613b      	str	r3, [r7, #16]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	613b      	str	r3, [r7, #16]
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f8d9 	bl	8007050 <I2C_WaitOnFlagUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00d      	beq.n	8006ec0 <I2C_MasterRequestRead+0x15c>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb2:	d103      	bne.n	8006ebc <I2C_MasterRequestRead+0x158>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eba:	641a      	str	r2, [r3, #64]	; 0x40
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e017      	b.n	8006ef0 <I2C_MasterRequestRead+0x18c>
 8006ec0:	897b      	ldrh	r3, [r7, #10]
 8006ec2:	11db      	asrs	r3, r3, #7
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	f003 0306 	and.w	r3, r3, #6
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	f063 030e 	orn	r3, r3, #14
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	611a      	str	r2, [r3, #16]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4907      	ldr	r1, [pc, #28]	; (8006efc <I2C_MasterRequestRead+0x198>)
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f90d 	bl	80070fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <I2C_MasterRequestRead+0x18a>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <I2C_MasterRequestRead+0x18c>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	00010008 	.word	0x00010008
 8006efc:	00010002 	.word	0x00010002

08006f00 <I2C_DMAAbort>:
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	617b      	str	r3, [r7, #20]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f18:	74fb      	strb	r3, [r7, #19]
 8006f1a:	4b4b      	ldr	r3, [pc, #300]	; (8007048 <I2C_DMAAbort+0x148>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	08db      	lsrs	r3, r3, #3
 8006f20:	4a4a      	ldr	r2, [pc, #296]	; (800704c <I2C_DMAAbort+0x14c>)
 8006f22:	fba2 2303 	umull	r2, r3, r2, r3
 8006f26:	0a1a      	lsrs	r2, r3, #8
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	00da      	lsls	r2, r3, #3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <I2C_DMAAbort+0x48>
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	f043 0220 	orr.w	r2, r3, #32
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	641a      	str	r2, [r3, #64]	; 0x40
 8006f46:	e00a      	b.n	8006f5e <I2C_DMAAbort+0x5e>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f5c:	d0ea      	beq.n	8006f34 <I2C_DMAAbort+0x34>
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <I2C_DMAAbort+0x6e>
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <I2C_DMAAbort+0x7e>
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2200      	movs	r2, #0
 8006f92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <I2C_DMAAbort+0xa4>
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	651a      	str	r2, [r3, #80]	; 0x50
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <I2C_DMAAbort+0xb4>
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	651a      	str	r2, [r3, #80]	; 0x50
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0201 	bic.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b60      	cmp	r3, #96	; 0x60
 8006fce:	d10e      	bne.n	8006fee <I2C_DMAAbort+0xee>
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8006fe6:	6978      	ldr	r0, [r7, #20]
 8006fe8:	f7fe fcca 	bl	8005980 <HAL_I2C_AbortCpltCallback>
 8006fec:	e027      	b.n	800703e <I2C_DMAAbort+0x13e>
 8006fee:	7cfb      	ldrb	r3, [r7, #19]
 8006ff0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ff4:	2b28      	cmp	r3, #40	; 0x28
 8006ff6:	d117      	bne.n	8007028 <I2C_DMAAbort+0x128>
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0201 	orr.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2200      	movs	r2, #0
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2228      	movs	r2, #40	; 0x28
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007026:	e007      	b.n	8007038 <I2C_DMAAbort+0x138>
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007038:	6978      	ldr	r0, [r7, #20]
 800703a:	f7fe fc97 	bl	800596c <HAL_I2C_ErrorCallback>
 800703e:	bf00      	nop
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000014 	.word	0x20000014
 800704c:	14f8b589 	.word	0x14f8b589

08007050 <I2C_WaitOnFlagUntilTimeout>:
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	4613      	mov	r3, r2
 800705e:	71fb      	strb	r3, [r7, #7]
 8007060:	e025      	b.n	80070ae <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007068:	d021      	beq.n	80070ae <I2C_WaitOnFlagUntilTimeout+0x5e>
 800706a:	f7fd fa73 	bl	8004554 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d302      	bcc.n	8007080 <I2C_WaitOnFlagUntilTimeout+0x30>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d116      	bne.n	80070ae <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	631a      	str	r2, [r3, #48]	; 0x30
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	f043 0220 	orr.w	r2, r3, #32
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	641a      	str	r2, [r3, #64]	; 0x40
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80070aa:	2301      	movs	r3, #1
 80070ac:	e023      	b.n	80070f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	0c1b      	lsrs	r3, r3, #16
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d10d      	bne.n	80070d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	43da      	mvns	r2, r3
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4013      	ands	r3, r2
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bf0c      	ite	eq
 80070ca:	2301      	moveq	r3, #1
 80070cc:	2300      	movne	r3, #0
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	e00c      	b.n	80070ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	43da      	mvns	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4013      	ands	r3, r2
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	bf0c      	ite	eq
 80070e6:	2301      	moveq	r3, #1
 80070e8:	2300      	movne	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d0b6      	beq.n	8007062 <I2C_WaitOnFlagUntilTimeout+0x12>
 80070f4:	2300      	movs	r3, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	e051      	b.n	80071b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800711c:	d123      	bne.n	8007166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007136:	615a      	str	r2, [r3, #20]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	631a      	str	r2, [r3, #48]	; 0x30
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2220      	movs	r2, #32
 8007142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	f043 0204 	orr.w	r2, r3, #4
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	641a      	str	r2, [r3, #64]	; 0x40
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007162:	2301      	movs	r3, #1
 8007164:	e046      	b.n	80071f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716c:	d021      	beq.n	80071b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800716e:	f7fd f9f1 	bl	8004554 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	429a      	cmp	r2, r3
 800717c:	d302      	bcc.n	8007184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d116      	bne.n	80071b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	631a      	str	r2, [r3, #48]	; 0x30
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2220      	movs	r2, #32
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f043 0220 	orr.w	r2, r3, #32
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	641a      	str	r2, [r3, #64]	; 0x40
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80071ae:	2301      	movs	r3, #1
 80071b0:	e020      	b.n	80071f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	0c1b      	lsrs	r3, r3, #16
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d10c      	bne.n	80071d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	43da      	mvns	r2, r3
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4013      	ands	r3, r2
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bf14      	ite	ne
 80071ce:	2301      	movne	r3, #1
 80071d0:	2300      	moveq	r3, #0
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	e00b      	b.n	80071ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	43da      	mvns	r2, r3
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	4013      	ands	r3, r2
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	bf14      	ite	ne
 80071e8:	2301      	movne	r3, #1
 80071ea:	2300      	moveq	r3, #0
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d18d      	bne.n	800710e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80071f2:	2300      	movs	r3, #0
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <I2C_WaitOnTXEFlagUntilTimeout>:
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	e02d      	b.n	8007266 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 f900 	bl	8007410 <I2C_IsAcknowledgeFailed>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8007216:	2301      	movs	r3, #1
 8007218:	e02d      	b.n	8007276 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007220:	d021      	beq.n	8007266 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8007222:	f7fd f997 	bl	8004554 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	429a      	cmp	r2, r3
 8007230:	d302      	bcc.n	8007238 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d116      	bne.n	8007266 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	631a      	str	r2, [r3, #48]	; 0x30
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	f043 0220 	orr.w	r2, r3, #32
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	641a      	str	r2, [r3, #64]	; 0x40
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007262:	2301      	movs	r3, #1
 8007264:	e007      	b.n	8007276 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007270:	2b80      	cmp	r3, #128	; 0x80
 8007272:	d1ca      	bne.n	800720a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8007274:	2300      	movs	r3, #0
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <I2C_WaitOnBTFFlagUntilTimeout>:
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
 800728a:	e02d      	b.n	80072e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 f8bf 	bl	8007410 <I2C_IsAcknowledgeFailed>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8007298:	2301      	movs	r3, #1
 800729a:	e02d      	b.n	80072f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a2:	d021      	beq.n	80072e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 80072a4:	f7fd f956 	bl	8004554 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d302      	bcc.n	80072ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d116      	bne.n	80072e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	631a      	str	r2, [r3, #48]	; 0x30
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d4:	f043 0220 	orr.w	r2, r3, #32
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	641a      	str	r2, [r3, #64]	; 0x40
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80072e4:	2301      	movs	r3, #1
 80072e6:	e007      	b.n	80072f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d1ca      	bne.n	800728c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80072f6:	2300      	movs	r3, #0
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <I2C_WaitOnSTOPRequestThroughIT>:
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	4b13      	ldr	r3, [pc, #76]	; (800735c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	08db      	lsrs	r3, r3, #3
 8007312:	4a13      	ldr	r2, [pc, #76]	; (8007360 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007314:	fba2 2303 	umull	r2, r3, r2, r3
 8007318:	0a1a      	lsrs	r2, r3, #8
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3b01      	subs	r3, #1
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d107      	bne.n	800733e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	f043 0220 	orr.w	r2, r3, #32
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	641a      	str	r2, [r3, #64]	; 0x40
 800733a:	2301      	movs	r3, #1
 800733c:	e008      	b.n	8007350 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800734c:	d0e9      	beq.n	8007322 <I2C_WaitOnSTOPRequestThroughIT+0x22>
 800734e:	2300      	movs	r3, #0
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	20000014 	.word	0x20000014
 8007360:	14f8b589 	.word	0x14f8b589

08007364 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	e042      	b.n	80073f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	f003 0310 	and.w	r3, r3, #16
 800737c:	2b10      	cmp	r3, #16
 800737e:	d119      	bne.n	80073b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0210 	mvn.w	r2, #16
 8007388:	615a      	str	r2, [r3, #20]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	631a      	str	r2, [r3, #48]	; 0x30
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2220      	movs	r2, #32
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	641a      	str	r2, [r3, #64]	; 0x40
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073b0:	2301      	movs	r3, #1
 80073b2:	e029      	b.n	8007408 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 80073b4:	f7fd f8ce 	bl	8004554 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d302      	bcc.n	80073ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d116      	bne.n	80073f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	631a      	str	r2, [r3, #48]	; 0x30
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2220      	movs	r2, #32
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	f043 0220 	orr.w	r2, r3, #32
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	641a      	str	r2, [r3, #64]	; 0x40
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073f4:	2301      	movs	r3, #1
 80073f6:	e007      	b.n	8007408 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	d1b5      	bne.n	8007372 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8007406:	2300      	movs	r3, #0
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <I2C_IsAcknowledgeFailed>:
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007426:	d11b      	bne.n	8007460 <I2C_IsAcknowledgeFailed+0x50>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007430:	615a      	str	r2, [r3, #20]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	631a      	str	r2, [r3, #48]	; 0x30
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	f043 0204 	orr.w	r2, r3, #4
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	641a      	str	r2, [r3, #64]	; 0x40
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800745c:	2301      	movs	r3, #1
 800745e:	e000      	b.n	8007462 <I2C_IsAcknowledgeFailed+0x52>
 8007460:	2300      	movs	r3, #0
 8007462:	4618      	mov	r0, r3
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <I2C_ConvertOtherXferOptions>:
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800747e:	d103      	bne.n	8007488 <I2C_ConvertOtherXferOptions+0x1a>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	62da      	str	r2, [r3, #44]	; 0x2c
 8007486:	e007      	b.n	8007498 <I2C_ConvertOtherXferOptions+0x2a>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007490:	d102      	bne.n	8007498 <I2C_ConvertOtherXferOptions+0x2a>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2208      	movs	r2, #8
 8007496:	62da      	str	r2, [r3, #44]	; 0x2c
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_I2CEx_ConfigAnalogFilter>:
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d129      	bne.n	800750e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2224      	movs	r2, #36	; 0x24
 80074be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0201 	bic.w	r2, r2, #1
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0210 	bic.w	r2, r2, #16
 80074e0:	625a      	str	r2, [r3, #36]	; 0x24
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	625a      	str	r2, [r3, #36]	; 0x24
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0201 	orr.w	r2, r2, #1
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800750a:	2300      	movs	r3, #0
 800750c:	e000      	b.n	8007510 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 800750e:	2302      	movs	r3, #2
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_I2CEx_ConfigDigitalFilter>:
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
 8007526:	2300      	movs	r3, #0
 8007528:	81fb      	strh	r3, [r7, #14]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b20      	cmp	r3, #32
 8007534:	d12a      	bne.n	800758c <HAL_I2CEx_ConfigDigitalFilter+0x70>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2224      	movs	r2, #36	; 0x24
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0201 	bic.w	r2, r2, #1
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	81fb      	strh	r3, [r7, #14]
 8007556:	89fb      	ldrh	r3, [r7, #14]
 8007558:	f023 030f 	bic.w	r3, r3, #15
 800755c:	81fb      	strh	r3, [r7, #14]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	b29a      	uxth	r2, r3
 8007562:	89fb      	ldrh	r3, [r7, #14]
 8007564:	4313      	orrs	r3, r2
 8007566:	81fb      	strh	r3, [r7, #14]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	89fa      	ldrh	r2, [r7, #14]
 800756e:	625a      	str	r2, [r3, #36]	; 0x24
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0201 	orr.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2220      	movs	r2, #32
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007588:	2300      	movs	r3, #0
 800758a:	e000      	b.n	800758e <HAL_I2CEx_ConfigDigitalFilter+0x72>
 800758c:	2302      	movs	r3, #2
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <HAL_PCD_Init>:
 800759a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800759c:	b08f      	sub	sp, #60	; 0x3c
 800759e:	af0a      	add	r7, sp, #40	; 0x28
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_PCD_Init+0x12>
 80075a8:	2301      	movs	r3, #1
 80075aa:	e10f      	b.n	80077cc <HAL_PCD_Init+0x232>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	60bb      	str	r3, [r7, #8]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d106      	bne.n	80075cc <HAL_PCD_Init+0x32>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f006 fee2 	bl	800e390 <HAL_PCD_MspInit>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2203      	movs	r2, #3
 80075d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d102      	bne.n	80075e6 <HAL_PCD_Init+0x4c>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	611a      	str	r2, [r3, #16]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f003 f9bd 	bl	800a96a <USB_DisableGlobalInt>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	603b      	str	r3, [r7, #0]
 80075f6:	687e      	ldr	r6, [r7, #4]
 80075f8:	466d      	mov	r5, sp
 80075fa:	f106 0410 	add.w	r4, r6, #16
 80075fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007606:	e894 0003 	ldmia.w	r4, {r0, r1}
 800760a:	e885 0003 	stmia.w	r5, {r0, r1}
 800760e:	1d33      	adds	r3, r6, #4
 8007610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007612:	6838      	ldr	r0, [r7, #0]
 8007614:	f003 f894 	bl	800a740 <USB_CoreInit>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d005      	beq.n	800762a <HAL_PCD_Init+0x90>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2202      	movs	r2, #2
 8007622:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8007626:	2301      	movs	r3, #1
 8007628:	e0d0      	b.n	80077cc <HAL_PCD_Init+0x232>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2100      	movs	r1, #0
 8007630:	4618      	mov	r0, r3
 8007632:	f003 f9ab 	bl	800a98c <USB_SetCurrentMode>
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]
 800763a:	e04a      	b.n	80076d2 <HAL_PCD_Init+0x138>
 800763c:	7bfa      	ldrb	r2, [r7, #15]
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	4613      	mov	r3, r2
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	4413      	add	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	440b      	add	r3, r1
 800764a:	333d      	adds	r3, #61	; 0x3d
 800764c:	2201      	movs	r2, #1
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	7bfa      	ldrb	r2, [r7, #15]
 8007652:	6879      	ldr	r1, [r7, #4]
 8007654:	4613      	mov	r3, r2
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	440b      	add	r3, r1
 800765e:	333c      	adds	r3, #60	; 0x3c
 8007660:	7bfa      	ldrb	r2, [r7, #15]
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	7bfa      	ldrb	r2, [r7, #15]
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	b298      	uxth	r0, r3
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	3344      	adds	r3, #68	; 0x44
 8007678:	4602      	mov	r2, r0
 800767a:	801a      	strh	r2, [r3, #0]
 800767c:	7bfa      	ldrb	r2, [r7, #15]
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	4613      	mov	r3, r2
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	3340      	adds	r3, #64	; 0x40
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
 8007690:	7bfa      	ldrb	r2, [r7, #15]
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	4613      	mov	r3, r2
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	3348      	adds	r3, #72	; 0x48
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	7bfa      	ldrb	r2, [r7, #15]
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	4613      	mov	r3, r2
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	334c      	adds	r3, #76	; 0x4c
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	7bfa      	ldrb	r2, [r7, #15]
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4613      	mov	r3, r2
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	4413      	add	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	3354      	adds	r3, #84	; 0x54
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	3301      	adds	r3, #1
 80076d0:	73fb      	strb	r3, [r7, #15]
 80076d2:	7bfa      	ldrb	r2, [r7, #15]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d3af      	bcc.n	800763c <HAL_PCD_Init+0xa2>
 80076dc:	2300      	movs	r3, #0
 80076de:	73fb      	strb	r3, [r7, #15]
 80076e0:	e044      	b.n	800776c <HAL_PCD_Init+0x1d2>
 80076e2:	7bfa      	ldrb	r2, [r7, #15]
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	4613      	mov	r3, r2
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	440b      	add	r3, r1
 80076f0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
 80076f8:	7bfa      	ldrb	r2, [r7, #15]
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	4613      	mov	r3, r2
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	440b      	add	r3, r1
 8007706:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800770a:	7bfa      	ldrb	r2, [r7, #15]
 800770c:	701a      	strb	r2, [r3, #0]
 800770e:	7bfa      	ldrb	r2, [r7, #15]
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	4613      	mov	r3, r2
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	440b      	add	r3, r1
 800771c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007720:	2200      	movs	r2, #0
 8007722:	701a      	strb	r2, [r3, #0]
 8007724:	7bfa      	ldrb	r2, [r7, #15]
 8007726:	6879      	ldr	r1, [r7, #4]
 8007728:	4613      	mov	r3, r2
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	440b      	add	r3, r1
 8007732:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	7bfa      	ldrb	r2, [r7, #15]
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	4613      	mov	r3, r2
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	7bfa      	ldrb	r2, [r7, #15]
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	440b      	add	r3, r1
 800775e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	3301      	adds	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
 800776c:	7bfa      	ldrb	r2, [r7, #15]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	429a      	cmp	r2, r3
 8007774:	d3b5      	bcc.n	80076e2 <HAL_PCD_Init+0x148>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	687e      	ldr	r6, [r7, #4]
 800777e:	466d      	mov	r5, sp
 8007780:	f106 0410 	add.w	r4, r6, #16
 8007784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800778a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800778c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007790:	e885 0003 	stmia.w	r5, {r0, r1}
 8007794:	1d33      	adds	r3, r6, #4
 8007796:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007798:	6838      	ldr	r0, [r7, #0]
 800779a:	f003 f943 	bl	800aa24 <USB_DevInit>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <HAL_PCD_Init+0x216>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80077ac:	2301      	movs	r3, #1
 80077ae:	e00d      	b.n	80077cc <HAL_PCD_Init+0x232>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f004 fa92 	bl	800bcee <USB_DevDisconnect>
 80077ca:	2300      	movs	r3, #0
 80077cc:	4618      	mov	r0, r3
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077d4 <HAL_PCD_Start>:
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d101      	bne.n	80077f0 <HAL_PCD_Start+0x1c>
 80077ec:	2302      	movs	r3, #2
 80077ee:	e020      	b.n	8007832 <HAL_PCD_Start+0x5e>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d109      	bne.n	8007814 <HAL_PCD_Start+0x40>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d005      	beq.n	8007814 <HAL_PCD_Start+0x40>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	639a      	str	r2, [r3, #56]	; 0x38
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	f003 f895 	bl	800a948 <USB_EnableGlobalInt>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f004 fa42 	bl	800bcac <USB_DevConnect>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007830:	2300      	movs	r3, #0
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_PCD_IRQHandler>:
 800783a:	b590      	push	{r4, r7, lr}
 800783c:	b08d      	sub	sp, #52	; 0x34
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	623b      	str	r3, [r7, #32]
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	61fb      	str	r3, [r7, #28]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f004 fb00 	bl	800be56 <USB_GetMode>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	f040 848a 	bne.w	8008172 <HAL_PCD_IRQHandler+0x938>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4618      	mov	r0, r3
 8007864:	f004 fa64 	bl	800bd30 <USB_ReadInterrupts>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8480 	beq.w	8008170 <HAL_PCD_IRQHandler+0x936>
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	0a1b      	lsrs	r3, r3, #8
 800787a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4618      	mov	r0, r3
 800788a:	f004 fa51 	bl	800bd30 <USB_ReadInterrupts>
 800788e:	4603      	mov	r3, r0
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b02      	cmp	r3, #2
 8007896:	d107      	bne.n	80078a8 <HAL_PCD_IRQHandler+0x6e>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695a      	ldr	r2, [r3, #20]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f002 0202 	and.w	r2, r2, #2
 80078a6:	615a      	str	r2, [r3, #20]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f004 fa3f 	bl	800bd30 <USB_ReadInterrupts>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f003 0310 	and.w	r3, r3, #16
 80078b8:	2b10      	cmp	r3, #16
 80078ba:	d161      	bne.n	8007980 <HAL_PCD_IRQHandler+0x146>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0210 	bic.w	r2, r2, #16
 80078ca:	619a      	str	r2, [r3, #24]
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	61bb      	str	r3, [r7, #24]
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f003 020f 	and.w	r2, r3, #15
 80078d8:	4613      	mov	r3, r2
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	4413      	add	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	4413      	add	r3, r2
 80078e8:	3304      	adds	r3, #4
 80078ea:	617b      	str	r3, [r7, #20]
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	0c5b      	lsrs	r3, r3, #17
 80078f0:	f003 030f 	and.w	r3, r3, #15
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d124      	bne.n	8007942 <HAL_PCD_IRQHandler+0x108>
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80078fe:	4013      	ands	r3, r2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d035      	beq.n	8007970 <HAL_PCD_IRQHandler+0x136>
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6919      	ldr	r1, [r3, #16]
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	091b      	lsrs	r3, r3, #4
 800790c:	b29b      	uxth	r3, r3
 800790e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007912:	b29b      	uxth	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	6a38      	ldr	r0, [r7, #32]
 8007918:	f004 f876 	bl	800ba08 <USB_ReadPacket>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	691a      	ldr	r2, [r3, #16]
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	091b      	lsrs	r3, r3, #4
 8007924:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007928:	441a      	add	r2, r3
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	611a      	str	r2, [r3, #16]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	6a1a      	ldr	r2, [r3, #32]
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800793a:	441a      	add	r2, r3
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	621a      	str	r2, [r3, #32]
 8007940:	e016      	b.n	8007970 <HAL_PCD_IRQHandler+0x136>
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	0c5b      	lsrs	r3, r3, #17
 8007946:	f003 030f 	and.w	r3, r3, #15
 800794a:	2b06      	cmp	r3, #6
 800794c:	d110      	bne.n	8007970 <HAL_PCD_IRQHandler+0x136>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007954:	2208      	movs	r2, #8
 8007956:	4619      	mov	r1, r3
 8007958:	6a38      	ldr	r0, [r7, #32]
 800795a:	f004 f855 	bl	800ba08 <USB_ReadPacket>
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	6a1a      	ldr	r2, [r3, #32]
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	091b      	lsrs	r3, r3, #4
 8007966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800796a:	441a      	add	r2, r3
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	621a      	str	r2, [r3, #32]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0210 	orr.w	r2, r2, #16
 800797e:	619a      	str	r2, [r3, #24]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	f004 f9d3 	bl	800bd30 <USB_ReadInterrupts>
 800798a:	4603      	mov	r3, r0
 800798c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007990:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007994:	f040 80a7 	bne.w	8007ae6 <HAL_PCD_IRQHandler+0x2ac>
 8007998:	2300      	movs	r3, #0
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f004 f9d8 	bl	800bd56 <USB_ReadDevAllOutEpInterrupt>
 80079a6:	62b8      	str	r0, [r7, #40]	; 0x28
 80079a8:	e099      	b.n	8007ade <HAL_PCD_IRQHandler+0x2a4>
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 808e 	beq.w	8007ad2 <HAL_PCD_IRQHandler+0x298>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079bc:	b2d2      	uxtb	r2, r2
 80079be:	4611      	mov	r1, r2
 80079c0:	4618      	mov	r0, r3
 80079c2:	f004 f9fc 	bl	800bdbe <USB_ReadDevOutEPInterrupt>
 80079c6:	6138      	str	r0, [r7, #16]
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00c      	beq.n	80079ec <HAL_PCD_IRQHandler+0x1b2>
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079de:	461a      	mov	r2, r3
 80079e0:	2301      	movs	r3, #1
 80079e2:	6093      	str	r3, [r2, #8]
 80079e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fec2 	bl	8008770 <PCD_EP_OutXfrComplete_int>
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00c      	beq.n	8007a10 <HAL_PCD_IRQHandler+0x1d6>
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a02:	461a      	mov	r2, r3
 8007a04:	2308      	movs	r3, #8
 8007a06:	6093      	str	r3, [r2, #8]
 8007a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 ff98 	bl	8008940 <PCD_EP_OutSetupPacket_int>
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d008      	beq.n	8007a2c <HAL_PCD_IRQHandler+0x1f2>
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a26:	461a      	mov	r2, r3
 8007a28:	2310      	movs	r3, #16
 8007a2a:	6093      	str	r3, [r2, #8]
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d030      	beq.n	8007a98 <HAL_PCD_IRQHandler+0x25e>
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3e:	2b80      	cmp	r3, #128	; 0x80
 8007a40:	d109      	bne.n	8007a56 <HAL_PCD_IRQHandler+0x21c>
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	69fa      	ldr	r2, [r7, #28]
 8007a4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a54:	6053      	str	r3, [r2, #4]
 8007a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a58:	4613      	mov	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	4413      	add	r3, r2
 8007a68:	3304      	adds	r3, #4
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	78db      	ldrb	r3, [r3, #3]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d108      	bne.n	8007a86 <HAL_PCD_IRQHandler+0x24c>
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2200      	movs	r2, #0
 8007a78:	70da      	strb	r2, [r3, #3]
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f006 fd8b 	bl	800e59c <HAL_PCD_ISOOUTIncompleteCallback>
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a92:	461a      	mov	r2, r3
 8007a94:	2302      	movs	r3, #2
 8007a96:	6093      	str	r3, [r2, #8]
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d008      	beq.n	8007ab4 <HAL_PCD_IRQHandler+0x27a>
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aae:	461a      	mov	r2, r3
 8007ab0:	2320      	movs	r3, #32
 8007ab2:	6093      	str	r3, [r2, #8]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d009      	beq.n	8007ad2 <HAL_PCD_IRQHandler+0x298>
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aca:	461a      	mov	r2, r3
 8007acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ad0:	6093      	str	r3, [r2, #8]
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	085b      	lsrs	r3, r3, #1
 8007adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f47f af62 	bne.w	80079aa <HAL_PCD_IRQHandler+0x170>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f004 f920 	bl	800bd30 <USB_ReadInterrupts>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007af6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007afa:	f040 80db 	bne.w	8007cb4 <HAL_PCD_IRQHandler+0x47a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f004 f941 	bl	800bd8a <USB_ReadDevAllInEpInterrupt>
 8007b08:	62b8      	str	r0, [r7, #40]	; 0x28
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b0e:	e0cd      	b.n	8007cac <HAL_PCD_IRQHandler+0x472>
 8007b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 80c2 	beq.w	8007ca0 <HAL_PCD_IRQHandler+0x466>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b22:	b2d2      	uxtb	r2, r2
 8007b24:	4611      	mov	r1, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f004 f967 	bl	800bdfa <USB_ReadDevInEPInterrupt>
 8007b2c:	6138      	str	r0, [r7, #16]
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d057      	beq.n	8007be8 <HAL_PCD_IRQHandler+0x3ae>
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	2201      	movs	r2, #1
 8007b40:	fa02 f303 	lsl.w	r3, r2, r3
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	43db      	mvns	r3, r3
 8007b52:	69f9      	ldr	r1, [r7, #28]
 8007b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b58:	4013      	ands	r3, r2
 8007b5a:	634b      	str	r3, [r1, #52]	; 0x34
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b68:	461a      	mov	r2, r3
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	6093      	str	r3, [r2, #8]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d132      	bne.n	8007bdc <HAL_PCD_IRQHandler+0x3a2>
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	440b      	add	r3, r1
 8007b84:	334c      	adds	r3, #76	; 0x4c
 8007b86:	6819      	ldr	r1, [r3, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	00db      	lsls	r3, r3, #3
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4403      	add	r3, r0
 8007b96:	3348      	adds	r3, #72	; 0x48
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4419      	add	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4403      	add	r3, r0
 8007baa:	334c      	adds	r3, #76	; 0x4c
 8007bac:	6019      	str	r1, [r3, #0]
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d113      	bne.n	8007bdc <HAL_PCD_IRQHandler+0x3a2>
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb8:	4613      	mov	r3, r2
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	3354      	adds	r3, #84	; 0x54
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d108      	bne.n	8007bdc <HAL_PCD_IRQHandler+0x3a2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	f004 f96e 	bl	800beb8 <USB_EP0_OutStart>
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f006 fc55 	bl	800e492 <HAL_PCD_DataInStageCallback>
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f003 0308 	and.w	r3, r3, #8
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d008      	beq.n	8007c04 <HAL_PCD_IRQHandler+0x3ca>
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bfe:	461a      	mov	r2, r3
 8007c00:	2308      	movs	r3, #8
 8007c02:	6093      	str	r3, [r2, #8]
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f003 0310 	and.w	r3, r3, #16
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d008      	beq.n	8007c20 <HAL_PCD_IRQHandler+0x3e6>
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	2310      	movs	r3, #16
 8007c1e:	6093      	str	r3, [r2, #8]
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d008      	beq.n	8007c3c <HAL_PCD_IRQHandler+0x402>
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c36:	461a      	mov	r2, r3
 8007c38:	2340      	movs	r3, #64	; 0x40
 8007c3a:	6093      	str	r3, [r2, #8]
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d023      	beq.n	8007c8e <HAL_PCD_IRQHandler+0x454>
 8007c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c48:	6a38      	ldr	r0, [r7, #32]
 8007c4a:	f003 f84f 	bl	800acec <USB_FlushTxFifo>
 8007c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c50:	4613      	mov	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	3338      	adds	r3, #56	; 0x38
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	3304      	adds	r3, #4
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	78db      	ldrb	r3, [r3, #3]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d108      	bne.n	8007c7c <HAL_PCD_IRQHandler+0x442>
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	70da      	strb	r2, [r3, #3]
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f006 fca2 	bl	800e5c0 <HAL_PCD_ISOINIncompleteCallback>
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c88:	461a      	mov	r2, r3
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	6093      	str	r3, [r2, #8]
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <HAL_PCD_IRQHandler+0x466>
 8007c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fcdb 	bl	8008656 <PCD_WriteEmptyTxFifo>
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	085b      	lsrs	r3, r3, #1
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f47f af2e 	bne.w	8007b10 <HAL_PCD_IRQHandler+0x2d6>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f004 f839 	bl	800bd30 <USB_ReadInterrupts>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cc8:	d122      	bne.n	8007d10 <HAL_PCD_IRQHandler+0x4d6>
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	6053      	str	r3, [r2, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d108      	bne.n	8007cfa <HAL_PCD_IRQHandler+0x4c0>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fec2 	bl	8008a7c <HAL_PCDEx_LPM_Callback>
 8007cf8:	e002      	b.n	8007d00 <HAL_PCD_IRQHandler+0x4c6>
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f006 fc40 	bl	800e580 <HAL_PCD_ResumeCallback>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	695a      	ldr	r2, [r3, #20]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007d0e:	615a      	str	r2, [r3, #20]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f004 f80b 	bl	800bd30 <USB_ReadInterrupts>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d24:	d112      	bne.n	8007d4c <HAL_PCD_IRQHandler+0x512>
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d102      	bne.n	8007d3c <HAL_PCD_IRQHandler+0x502>
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f006 fbfc 	bl	800e534 <HAL_PCD_SuspendCallback>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	695a      	ldr	r2, [r3, #20]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007d4a:	615a      	str	r2, [r3, #20]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f003 ffed 	bl	800bd30 <USB_ReadInterrupts>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d60:	f040 80b7 	bne.w	8007ed2 <HAL_PCD_IRQHandler+0x698>
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	69fa      	ldr	r2, [r7, #28]
 8007d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d72:	f023 0301 	bic.w	r3, r3, #1
 8007d76:	6053      	str	r3, [r2, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2110      	movs	r1, #16
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f002 ffb4 	bl	800acec <USB_FlushTxFifo>
 8007d84:	2300      	movs	r3, #0
 8007d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d88:	e046      	b.n	8007e18 <HAL_PCD_IRQHandler+0x5de>
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d96:	461a      	mov	r2, r3
 8007d98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d9c:	6093      	str	r3, [r2, #8]
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dae:	0151      	lsls	r1, r2, #5
 8007db0:	69fa      	ldr	r2, [r7, #28]
 8007db2:	440a      	add	r2, r1
 8007db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007db8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dd0:	6093      	str	r3, [r2, #8]
 8007dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	69fa      	ldr	r2, [r7, #28]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007df0:	6013      	str	r3, [r2, #0]
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e02:	0151      	lsls	r1, r2, #5
 8007e04:	69fa      	ldr	r2, [r7, #28]
 8007e06:	440a      	add	r2, r1
 8007e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e10:	6013      	str	r3, [r2, #0]
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	3301      	adds	r3, #1
 8007e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d3b3      	bcc.n	8007d8a <HAL_PCD_IRQHandler+0x550>
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	69fa      	ldr	r2, [r7, #28]
 8007e2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e30:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007e34:	61d3      	str	r3, [r2, #28]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d016      	beq.n	8007e6c <HAL_PCD_IRQHandler+0x632>
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e48:	69fa      	ldr	r2, [r7, #28]
 8007e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e4e:	f043 030b 	orr.w	r3, r3, #11
 8007e52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e64:	f043 030b 	orr.w	r3, r3, #11
 8007e68:	6453      	str	r3, [r2, #68]	; 0x44
 8007e6a:	e015      	b.n	8007e98 <HAL_PCD_IRQHandler+0x65e>
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	69fa      	ldr	r2, [r7, #28]
 8007e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007e7e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007e82:	6153      	str	r3, [r2, #20]
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e92:	f043 030b 	orr.w	r3, r3, #11
 8007e96:	6113      	str	r3, [r2, #16]
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ea6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	b2d9      	uxtb	r1, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	f003 fffb 	bl	800beb8 <USB_EP0_OutStart>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695a      	ldr	r2, [r3, #20]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007ed0:	615a      	str	r2, [r3, #20]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f003 ff2a 	bl	800bd30 <USB_ReadInterrupts>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee6:	d124      	bne.n	8007f32 <HAL_PCD_IRQHandler+0x6f8>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f003 ffc0 	bl	800be72 <USB_ActivateSetup>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f002 ff75 	bl	800ade6 <USB_GetDevSpeed>
 8007efc:	4603      	mov	r3, r0
 8007efe:	461a      	mov	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	60da      	str	r2, [r3, #12]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681c      	ldr	r4, [r3, #0]
 8007f08:	f001 fa28 	bl	800935c <HAL_RCC_GetHCLKFreq>
 8007f0c:	4601      	mov	r1, r0
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	4620      	mov	r0, r4
 8007f18:	f002 fc74 	bl	800a804 <USB_SetTurnaroundTime>
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f006 fae0 	bl	800e4e2 <HAL_PCD_ResetCallback>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	695a      	ldr	r2, [r3, #20]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007f30:	615a      	str	r2, [r3, #20]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f003 fefa 	bl	800bd30 <USB_ReadInterrupts>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b08      	cmp	r3, #8
 8007f44:	d10a      	bne.n	8007f5c <HAL_PCD_IRQHandler+0x722>
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f006 fabd 	bl	800e4c6 <HAL_PCD_SOFCallback>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	695a      	ldr	r2, [r3, #20]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f002 0208 	and.w	r2, r2, #8
 8007f5a:	615a      	str	r2, [r3, #20]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f003 fee5 	bl	800bd30 <USB_ReadInterrupts>
 8007f66:	4603      	mov	r3, r0
 8007f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f6c:	2b80      	cmp	r3, #128	; 0x80
 8007f6e:	d122      	bne.n	8007fb6 <HAL_PCD_IRQHandler+0x77c>
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	619a      	str	r2, [r3, #24]
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f80:	e014      	b.n	8007fac <HAL_PCD_IRQHandler+0x772>
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f86:	4613      	mov	r3, r2
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	440b      	add	r3, r1
 8007f90:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d105      	bne.n	8007fa6 <HAL_PCD_IRQHandler+0x76c>
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fb27 	bl	80085f4 <HAL_PCD_EP_Abort>
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	3301      	adds	r3, #1
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d3e5      	bcc.n	8007f82 <HAL_PCD_IRQHandler+0x748>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f003 feb8 	bl	800bd30 <USB_ReadInterrupts>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fca:	d13b      	bne.n	8008044 <HAL_PCD_IRQHandler+0x80a>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
 8007fd0:	e02b      	b.n	800802a <HAL_PCD_IRQHandler+0x7f0>
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	61bb      	str	r3, [r7, #24]
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	440b      	add	r3, r1
 8007ff0:	3340      	adds	r3, #64	; 0x40
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d115      	bne.n	8008024 <HAL_PCD_IRQHandler+0x7ea>
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	da12      	bge.n	8008024 <HAL_PCD_IRQHandler+0x7ea>
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008002:	4613      	mov	r3, r2
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	440b      	add	r3, r1
 800800c:	333f      	adds	r3, #63	; 0x3f
 800800e:	2201      	movs	r2, #1
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	b2db      	uxtb	r3, r3
 8008016:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800801a:	b2db      	uxtb	r3, r3
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fae8 	bl	80085f4 <HAL_PCD_EP_Abort>
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	3301      	adds	r3, #1
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008030:	429a      	cmp	r2, r3
 8008032:	d3ce      	bcc.n	8007fd2 <HAL_PCD_IRQHandler+0x798>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	695a      	ldr	r2, [r3, #20]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008042:	615a      	str	r2, [r3, #20]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4618      	mov	r0, r3
 800804a:	f003 fe71 	bl	800bd30 <USB_ReadInterrupts>
 800804e:	4603      	mov	r3, r0
 8008050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008054:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008058:	d155      	bne.n	8008106 <HAL_PCD_IRQHandler+0x8cc>
 800805a:	2301      	movs	r3, #1
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
 800805e:	e045      	b.n	80080ec <HAL_PCD_IRQHandler+0x8b2>
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	61bb      	str	r3, [r7, #24]
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008074:	4613      	mov	r3, r2
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d12e      	bne.n	80080e6 <HAL_PCD_IRQHandler+0x8ac>
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	2b00      	cmp	r3, #0
 800808c:	da2b      	bge.n	80080e6 <HAL_PCD_IRQHandler+0x8ac>
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	429a      	cmp	r2, r3
 80080a0:	d121      	bne.n	80080e6 <HAL_PCD_IRQHandler+0x8ac>
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080a6:	4613      	mov	r3, r2
 80080a8:	00db      	lsls	r3, r3, #3
 80080aa:	4413      	add	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	440b      	add	r3, r1
 80080b0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80080b4:	2201      	movs	r2, #1
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	619a      	str	r2, [r3, #24]
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10a      	bne.n	80080e6 <HAL_PCD_IRQHandler+0x8ac>
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	69fa      	ldr	r2, [r7, #28]
 80080da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080e2:	6053      	str	r3, [r2, #4]
 80080e4:	e007      	b.n	80080f6 <HAL_PCD_IRQHandler+0x8bc>
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	3301      	adds	r3, #1
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d3b4      	bcc.n	8008060 <HAL_PCD_IRQHandler+0x826>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	695a      	ldr	r2, [r3, #20]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008104:	615a      	str	r2, [r3, #20]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4618      	mov	r0, r3
 800810c:	f003 fe10 	bl	800bd30 <USB_ReadInterrupts>
 8008110:	4603      	mov	r3, r0
 8008112:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800811a:	d10a      	bne.n	8008132 <HAL_PCD_IRQHandler+0x8f8>
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f006 fa61 	bl	800e5e4 <HAL_PCD_ConnectCallback>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	695a      	ldr	r2, [r3, #20]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008130:	615a      	str	r2, [r3, #20]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4618      	mov	r0, r3
 8008138:	f003 fdfa 	bl	800bd30 <USB_ReadInterrupts>
 800813c:	4603      	mov	r3, r0
 800813e:	f003 0304 	and.w	r3, r3, #4
 8008142:	2b04      	cmp	r3, #4
 8008144:	d115      	bne.n	8008172 <HAL_PCD_IRQHandler+0x938>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	61bb      	str	r3, [r7, #24]
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <HAL_PCD_IRQHandler+0x924>
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f006 fa51 	bl	800e600 <HAL_PCD_DisconnectCallback>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6859      	ldr	r1, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	430a      	orrs	r2, r1
 800816c:	605a      	str	r2, [r3, #4]
 800816e:	e000      	b.n	8008172 <HAL_PCD_IRQHandler+0x938>
 8008170:	bf00      	nop
 8008172:	3734      	adds	r7, #52	; 0x34
 8008174:	46bd      	mov	sp, r7
 8008176:	bd90      	pop	{r4, r7, pc}

08008178 <HAL_PCD_SetAddress>:
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <HAL_PCD_SetAddress+0x1a>
 800818e:	2302      	movs	r3, #2
 8008190:	e013      	b.n	80081ba <HAL_PCD_SetAddress+0x42>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	78fa      	ldrb	r2, [r7, #3]
 800819e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	78fa      	ldrb	r2, [r7, #3]
 80081a8:	4611      	mov	r1, r2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f003 fd58 	bl	800bc60 <USB_SetDevAddress>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80081b8:	2300      	movs	r3, #0
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <HAL_PCD_EP_Open>:
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	4608      	mov	r0, r1
 80081cc:	4611      	mov	r1, r2
 80081ce:	461a      	mov	r2, r3
 80081d0:	4603      	mov	r3, r0
 80081d2:	70fb      	strb	r3, [r7, #3]
 80081d4:	460b      	mov	r3, r1
 80081d6:	803b      	strh	r3, [r7, #0]
 80081d8:	4613      	mov	r3, r2
 80081da:	70bb      	strb	r3, [r7, #2]
 80081dc:	2300      	movs	r3, #0
 80081de:	72fb      	strb	r3, [r7, #11]
 80081e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da0f      	bge.n	8008208 <HAL_PCD_EP_Open+0x46>
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	f003 020f 	and.w	r2, r3, #15
 80081ee:	4613      	mov	r3, r2
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	4413      	add	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	3338      	adds	r3, #56	; 0x38
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	4413      	add	r3, r2
 80081fc:	3304      	adds	r3, #4
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2201      	movs	r2, #1
 8008204:	705a      	strb	r2, [r3, #1]
 8008206:	e00f      	b.n	8008228 <HAL_PCD_EP_Open+0x66>
 8008208:	78fb      	ldrb	r3, [r7, #3]
 800820a:	f003 020f 	and.w	r2, r3, #15
 800820e:	4613      	mov	r3, r2
 8008210:	00db      	lsls	r3, r3, #3
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	4413      	add	r3, r2
 800821e:	3304      	adds	r3, #4
 8008220:	60fb      	str	r3, [r7, #12]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	705a      	strb	r2, [r3, #1]
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	f003 030f 	and.w	r3, r3, #15
 800822e:	b2da      	uxtb	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	701a      	strb	r2, [r3, #0]
 8008234:	883a      	ldrh	r2, [r7, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	60da      	str	r2, [r3, #12]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	78ba      	ldrb	r2, [r7, #2]
 800823e:	711a      	strb	r2, [r3, #4]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d004      	beq.n	8008252 <HAL_PCD_EP_Open+0x90>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	811a      	strh	r2, [r3, #8]
 8008252:	78bb      	ldrb	r3, [r7, #2]
 8008254:	2b02      	cmp	r3, #2
 8008256:	d102      	bne.n	800825e <HAL_PCD_EP_Open+0x9c>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	715a      	strb	r2, [r3, #5]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_PCD_EP_Open+0xaa>
 8008268:	2302      	movs	r3, #2
 800826a:	e00e      	b.n	800828a <HAL_PCD_EP_Open+0xc8>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68f9      	ldr	r1, [r7, #12]
 800827a:	4618      	mov	r0, r3
 800827c:	f002 fdd8 	bl	800ae30 <USB_ActivateEndpoint>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008288:	7afb      	ldrb	r3, [r7, #11]
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <HAL_PCD_EP_Close>:
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	460b      	mov	r3, r1
 800829c:	70fb      	strb	r3, [r7, #3]
 800829e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	da0f      	bge.n	80082c6 <HAL_PCD_EP_Close+0x34>
 80082a6:	78fb      	ldrb	r3, [r7, #3]
 80082a8:	f003 020f 	and.w	r2, r3, #15
 80082ac:	4613      	mov	r3, r2
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	3338      	adds	r3, #56	; 0x38
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	4413      	add	r3, r2
 80082ba:	3304      	adds	r3, #4
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2201      	movs	r2, #1
 80082c2:	705a      	strb	r2, [r3, #1]
 80082c4:	e00f      	b.n	80082e6 <HAL_PCD_EP_Close+0x54>
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	f003 020f 	and.w	r2, r3, #15
 80082cc:	4613      	mov	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	4413      	add	r3, r2
 80082dc:	3304      	adds	r3, #4
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	705a      	strb	r2, [r3, #1]
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	f003 030f 	and.w	r3, r3, #15
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	701a      	strb	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d101      	bne.n	8008300 <HAL_PCD_EP_Close+0x6e>
 80082fc:	2302      	movs	r3, #2
 80082fe:	e00e      	b.n	800831e <HAL_PCD_EP_Close+0x8c>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68f9      	ldr	r1, [r7, #12]
 800830e:	4618      	mov	r0, r3
 8008310:	f002 fe16 	bl	800af40 <USB_DeactivateEndpoint>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800831c:	2300      	movs	r3, #0
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <HAL_PCD_EP_Receive>:
 8008326:	b580      	push	{r7, lr}
 8008328:	b086      	sub	sp, #24
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
 8008332:	460b      	mov	r3, r1
 8008334:	72fb      	strb	r3, [r7, #11]
 8008336:	7afb      	ldrb	r3, [r7, #11]
 8008338:	f003 020f 	and.w	r2, r3, #15
 800833c:	4613      	mov	r3, r2
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	4413      	add	r3, r2
 800834c:	3304      	adds	r3, #4
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	611a      	str	r2, [r3, #16]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	619a      	str	r2, [r3, #24]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2200      	movs	r2, #0
 8008360:	621a      	str	r2, [r3, #32]
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2200      	movs	r2, #0
 8008366:	705a      	strb	r2, [r3, #1]
 8008368:	7afb      	ldrb	r3, [r7, #11]
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	b2da      	uxtb	r2, r3
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	701a      	strb	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d102      	bne.n	8008382 <HAL_PCD_EP_Receive+0x5c>
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	615a      	str	r2, [r3, #20]
 8008382:	7afb      	ldrb	r3, [r7, #11]
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	2b00      	cmp	r3, #0
 800838a:	d109      	bne.n	80083a0 <HAL_PCD_EP_Receive+0x7a>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	b2db      	uxtb	r3, r3
 8008396:	461a      	mov	r2, r3
 8008398:	6979      	ldr	r1, [r7, #20]
 800839a:	f003 f8f5 	bl	800b588 <USB_EP0StartXfer>
 800839e:	e008      	b.n	80083b2 <HAL_PCD_EP_Receive+0x8c>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	461a      	mov	r2, r3
 80083ac:	6979      	ldr	r1, [r7, #20]
 80083ae:	f002 fea3 	bl	800b0f8 <USB_EPStartXfer>
 80083b2:	2300      	movs	r3, #0
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <HAL_PCD_EP_GetRxCount>:
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	f003 020f 	and.w	r2, r3, #15
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	4613      	mov	r3, r2
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	440b      	add	r3, r1
 80083da:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_PCD_EP_Transmit>:
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	607a      	str	r2, [r7, #4]
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	460b      	mov	r3, r1
 80083fa:	72fb      	strb	r3, [r7, #11]
 80083fc:	7afb      	ldrb	r3, [r7, #11]
 80083fe:	f003 020f 	and.w	r2, r3, #15
 8008402:	4613      	mov	r3, r2
 8008404:	00db      	lsls	r3, r3, #3
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	3338      	adds	r3, #56	; 0x38
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	4413      	add	r3, r2
 8008410:	3304      	adds	r3, #4
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	611a      	str	r2, [r3, #16]
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	619a      	str	r2, [r3, #24]
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2200      	movs	r2, #0
 8008424:	621a      	str	r2, [r3, #32]
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	2201      	movs	r2, #1
 800842a:	705a      	strb	r2, [r3, #1]
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	f003 030f 	and.w	r3, r3, #15
 8008432:	b2da      	uxtb	r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	701a      	strb	r2, [r3, #0]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d102      	bne.n	8008446 <HAL_PCD_EP_Transmit+0x5a>
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	615a      	str	r2, [r3, #20]
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	f003 030f 	and.w	r3, r3, #15
 800844c:	2b00      	cmp	r3, #0
 800844e:	d109      	bne.n	8008464 <HAL_PCD_EP_Transmit+0x78>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6818      	ldr	r0, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	461a      	mov	r2, r3
 800845c:	6979      	ldr	r1, [r7, #20]
 800845e:	f003 f893 	bl	800b588 <USB_EP0StartXfer>
 8008462:	e008      	b.n	8008476 <HAL_PCD_EP_Transmit+0x8a>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	b2db      	uxtb	r3, r3
 800846e:	461a      	mov	r2, r3
 8008470:	6979      	ldr	r1, [r7, #20]
 8008472:	f002 fe41 	bl	800b0f8 <USB_EPStartXfer>
 8008476:	2300      	movs	r3, #0
 8008478:	4618      	mov	r0, r3
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <HAL_PCD_EP_SetStall>:
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	70fb      	strb	r3, [r7, #3]
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	f003 020f 	and.w	r2, r3, #15
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	429a      	cmp	r2, r3
 8008498:	d901      	bls.n	800849e <HAL_PCD_EP_SetStall+0x1e>
 800849a:	2301      	movs	r3, #1
 800849c:	e050      	b.n	8008540 <HAL_PCD_EP_SetStall+0xc0>
 800849e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	da0f      	bge.n	80084c6 <HAL_PCD_EP_SetStall+0x46>
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	f003 020f 	and.w	r2, r3, #15
 80084ac:	4613      	mov	r3, r2
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	3338      	adds	r3, #56	; 0x38
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	4413      	add	r3, r2
 80084ba:	3304      	adds	r3, #4
 80084bc:	60fb      	str	r3, [r7, #12]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2201      	movs	r2, #1
 80084c2:	705a      	strb	r2, [r3, #1]
 80084c4:	e00d      	b.n	80084e2 <HAL_PCD_EP_SetStall+0x62>
 80084c6:	78fa      	ldrb	r2, [r7, #3]
 80084c8:	4613      	mov	r3, r2
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	4413      	add	r3, r2
 80084d8:	3304      	adds	r3, #4
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	705a      	strb	r2, [r3, #1]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	709a      	strb	r2, [r3, #2]
 80084e8:	78fb      	ldrb	r3, [r7, #3]
 80084ea:	f003 030f 	and.w	r3, r3, #15
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d101      	bne.n	8008502 <HAL_PCD_EP_SetStall+0x82>
 80084fe:	2302      	movs	r3, #2
 8008500:	e01e      	b.n	8008540 <HAL_PCD_EP_SetStall+0xc0>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68f9      	ldr	r1, [r7, #12]
 8008510:	4618      	mov	r0, r3
 8008512:	f003 fad1 	bl	800bab8 <USB_EPSetStall>
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <HAL_PCD_EP_SetStall+0xb6>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6818      	ldr	r0, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	b2d9      	uxtb	r1, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008530:	461a      	mov	r2, r3
 8008532:	f003 fcc1 	bl	800beb8 <USB_EP0_OutStart>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800853e:	2300      	movs	r3, #0
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_PCD_EP_ClrStall>:
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	f003 020f 	and.w	r2, r3, #15
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	429a      	cmp	r2, r3
 8008560:	d901      	bls.n	8008566 <HAL_PCD_EP_ClrStall+0x1e>
 8008562:	2301      	movs	r3, #1
 8008564:	e042      	b.n	80085ec <HAL_PCD_EP_ClrStall+0xa4>
 8008566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800856a:	2b00      	cmp	r3, #0
 800856c:	da0f      	bge.n	800858e <HAL_PCD_EP_ClrStall+0x46>
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	f003 020f 	and.w	r2, r3, #15
 8008574:	4613      	mov	r3, r2
 8008576:	00db      	lsls	r3, r3, #3
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	3338      	adds	r3, #56	; 0x38
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	4413      	add	r3, r2
 8008582:	3304      	adds	r3, #4
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	705a      	strb	r2, [r3, #1]
 800858c:	e00f      	b.n	80085ae <HAL_PCD_EP_ClrStall+0x66>
 800858e:	78fb      	ldrb	r3, [r7, #3]
 8008590:	f003 020f 	and.w	r2, r3, #15
 8008594:	4613      	mov	r3, r2
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	4413      	add	r3, r2
 80085a4:	3304      	adds	r3, #4
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	705a      	strb	r2, [r3, #1]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	709a      	strb	r2, [r3, #2]
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	f003 030f 	and.w	r3, r3, #15
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	701a      	strb	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d101      	bne.n	80085ce <HAL_PCD_EP_ClrStall+0x86>
 80085ca:	2302      	movs	r3, #2
 80085cc:	e00e      	b.n	80085ec <HAL_PCD_EP_ClrStall+0xa4>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68f9      	ldr	r1, [r7, #12]
 80085dc:	4618      	mov	r0, r3
 80085de:	f003 fad9 	bl	800bb94 <USB_EPClearStall>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80085ea:	2300      	movs	r3, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <HAL_PCD_EP_Abort>:
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
 8008600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008604:	2b00      	cmp	r3, #0
 8008606:	da0c      	bge.n	8008622 <HAL_PCD_EP_Abort+0x2e>
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	f003 020f 	and.w	r2, r3, #15
 800860e:	4613      	mov	r3, r2
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	3338      	adds	r3, #56	; 0x38
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	4413      	add	r3, r2
 800861c:	3304      	adds	r3, #4
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	e00c      	b.n	800863c <HAL_PCD_EP_Abort+0x48>
 8008622:	78fb      	ldrb	r3, [r7, #3]
 8008624:	f003 020f 	and.w	r2, r3, #15
 8008628:	4613      	mov	r3, r2
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	4413      	add	r3, r2
 8008638:	3304      	adds	r3, #4
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68f9      	ldr	r1, [r7, #12]
 8008642:	4618      	mov	r0, r3
 8008644:	f003 f8f8 	bl	800b838 <USB_EPStopXfer>
 8008648:	4603      	mov	r3, r0
 800864a:	72fb      	strb	r3, [r7, #11]
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <PCD_WriteEmptyTxFifo>:
 8008656:	b580      	push	{r7, lr}
 8008658:	b08a      	sub	sp, #40	; 0x28
 800865a:	af02      	add	r7, sp, #8
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	6039      	str	r1, [r7, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	617b      	str	r3, [r7, #20]
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	613b      	str	r3, [r7, #16]
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	4613      	mov	r3, r2
 800866e:	00db      	lsls	r3, r3, #3
 8008670:	4413      	add	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	3338      	adds	r3, #56	; 0x38
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	4413      	add	r3, r2
 800867a:	3304      	adds	r3, #4
 800867c:	60fb      	str	r3, [r7, #12]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6a1a      	ldr	r2, [r3, #32]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	429a      	cmp	r2, r3
 8008688:	d901      	bls.n	800868e <PCD_WriteEmptyTxFifo+0x38>
 800868a:	2301      	movs	r3, #1
 800868c:	e06c      	b.n	8008768 <PCD_WriteEmptyTxFifo+0x112>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	699a      	ldr	r2, [r3, #24]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	61fb      	str	r3, [r7, #28]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	69fa      	ldr	r2, [r7, #28]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d902      	bls.n	80086aa <PCD_WriteEmptyTxFifo+0x54>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	61fb      	str	r3, [r7, #28]
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	3303      	adds	r3, #3
 80086ae:	089b      	lsrs	r3, r3, #2
 80086b0:	61bb      	str	r3, [r7, #24]
 80086b2:	e02b      	b.n	800870c <PCD_WriteEmptyTxFifo+0xb6>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	699a      	ldr	r2, [r3, #24]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	61fb      	str	r3, [r7, #28]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d902      	bls.n	80086d0 <PCD_WriteEmptyTxFifo+0x7a>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	61fb      	str	r3, [r7, #28]
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	3303      	adds	r3, #3
 80086d4:	089b      	lsrs	r3, r3, #2
 80086d6:	61bb      	str	r3, [r7, #24]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6919      	ldr	r1, [r3, #16]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	b298      	uxth	r0, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	4603      	mov	r3, r0
 80086ee:	6978      	ldr	r0, [r7, #20]
 80086f0:	f003 f94c 	bl	800b98c <USB_WritePacket>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	691a      	ldr	r2, [r3, #16]
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	441a      	add	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	611a      	str	r2, [r3, #16]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6a1a      	ldr	r2, [r3, #32]
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	441a      	add	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	621a      	str	r2, [r3, #32]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	b29b      	uxth	r3, r3
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	429a      	cmp	r2, r3
 8008720:	d809      	bhi.n	8008736 <PCD_WriteEmptyTxFifo+0xe0>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6a1a      	ldr	r2, [r3, #32]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	429a      	cmp	r2, r3
 800872c:	d203      	bcs.n	8008736 <PCD_WriteEmptyTxFifo+0xe0>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1be      	bne.n	80086b4 <PCD_WriteEmptyTxFifo+0x5e>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	699a      	ldr	r2, [r3, #24]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	429a      	cmp	r2, r3
 8008740:	d811      	bhi.n	8008766 <PCD_WriteEmptyTxFifo+0x110>
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	f003 030f 	and.w	r3, r3, #15
 8008748:	2201      	movs	r2, #1
 800874a:	fa02 f303 	lsl.w	r3, r2, r3
 800874e:	60bb      	str	r3, [r7, #8]
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	43db      	mvns	r3, r3
 800875c:	6939      	ldr	r1, [r7, #16]
 800875e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008762:	4013      	ands	r3, r2
 8008764:	634b      	str	r3, [r1, #52]	; 0x34
 8008766:	2300      	movs	r3, #0
 8008768:	4618      	mov	r0, r3
 800876a:	3720      	adds	r7, #32
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <PCD_EP_OutXfrComplete_int>:
 8008770:	b580      	push	{r7, lr}
 8008772:	b088      	sub	sp, #32
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	61fb      	str	r3, [r7, #28]
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	333c      	adds	r3, #60	; 0x3c
 8008788:	3304      	adds	r3, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	613b      	str	r3, [r7, #16]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d17b      	bne.n	800889e <PCD_EP_OutXfrComplete_int+0x12e>
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d015      	beq.n	80087dc <PCD_EP_OutXfrComplete_int+0x6c>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	4a61      	ldr	r2, [pc, #388]	; (8008938 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	f240 80b9 	bls.w	800892c <PCD_EP_OutXfrComplete_int+0x1bc>
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 80b3 	beq.w	800892c <PCD_EP_OutXfrComplete_int+0x1bc>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d2:	461a      	mov	r2, r3
 80087d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087d8:	6093      	str	r3, [r2, #8]
 80087da:	e0a7      	b.n	800892c <PCD_EP_OutXfrComplete_int+0x1bc>
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f003 0320 	and.w	r3, r3, #32
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d009      	beq.n	80087fa <PCD_EP_OutXfrComplete_int+0x8a>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f2:	461a      	mov	r2, r3
 80087f4:	2320      	movs	r3, #32
 80087f6:	6093      	str	r3, [r2, #8]
 80087f8:	e098      	b.n	800892c <PCD_EP_OutXfrComplete_int+0x1bc>
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008800:	2b00      	cmp	r3, #0
 8008802:	f040 8093 	bne.w	800892c <PCD_EP_OutXfrComplete_int+0x1bc>
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	4a4b      	ldr	r2, [pc, #300]	; (8008938 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d90f      	bls.n	800882e <PCD_EP_OutXfrComplete_int+0xbe>
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00a      	beq.n	800882e <PCD_EP_OutXfrComplete_int+0xbe>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008824:	461a      	mov	r2, r3
 8008826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800882a:	6093      	str	r3, [r2, #8]
 800882c:	e07e      	b.n	800892c <PCD_EP_OutXfrComplete_int+0x1bc>
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	4613      	mov	r3, r2
 8008832:	00db      	lsls	r3, r3, #3
 8008834:	4413      	add	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	4413      	add	r3, r2
 8008840:	3304      	adds	r3, #4
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	69da      	ldr	r2, [r3, #28]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	0159      	lsls	r1, r3, #5
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	440b      	add	r3, r1
 8008850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800885a:	1ad2      	subs	r2, r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	621a      	str	r2, [r3, #32]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d114      	bne.n	8008890 <PCD_EP_OutXfrComplete_int+0x120>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <PCD_EP_OutXfrComplete_int+0x112>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008878:	461a      	mov	r2, r3
 800887a:	2101      	movs	r1, #1
 800887c:	f003 fb1c 	bl	800beb8 <USB_EP0_OutStart>
 8008880:	e006      	b.n	8008890 <PCD_EP_OutXfrComplete_int+0x120>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	691a      	ldr	r2, [r3, #16]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	441a      	add	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	611a      	str	r2, [r3, #16]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f005 fde0 	bl	800e45c <HAL_PCD_DataOutStageCallback>
 800889c:	e046      	b.n	800892c <PCD_EP_OutXfrComplete_int+0x1bc>
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	4a26      	ldr	r2, [pc, #152]	; (800893c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d124      	bne.n	80088f0 <PCD_EP_OutXfrComplete_int+0x180>
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <PCD_EP_OutXfrComplete_int+0x156>
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088bc:	461a      	mov	r2, r3
 80088be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088c2:	6093      	str	r3, [r2, #8]
 80088c4:	e032      	b.n	800892c <PCD_EP_OutXfrComplete_int+0x1bc>
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	f003 0320 	and.w	r3, r3, #32
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d008      	beq.n	80088e2 <PCD_EP_OutXfrComplete_int+0x172>
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088dc:	461a      	mov	r2, r3
 80088de:	2320      	movs	r3, #32
 80088e0:	6093      	str	r3, [r2, #8]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f005 fdb7 	bl	800e45c <HAL_PCD_DataOutStageCallback>
 80088ee:	e01d      	b.n	800892c <PCD_EP_OutXfrComplete_int+0x1bc>
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d114      	bne.n	8008920 <PCD_EP_OutXfrComplete_int+0x1b0>
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	4613      	mov	r3, r2
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d108      	bne.n	8008920 <PCD_EP_OutXfrComplete_int+0x1b0>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008918:	461a      	mov	r2, r3
 800891a:	2100      	movs	r1, #0
 800891c:	f003 facc 	bl	800beb8 <USB_EP0_OutStart>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f005 fd98 	bl	800e45c <HAL_PCD_DataOutStageCallback>
 800892c:	2300      	movs	r3, #0
 800892e:	4618      	mov	r0, r3
 8008930:	3720      	adds	r7, #32
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	4f54300a 	.word	0x4f54300a
 800893c:	4f54310a 	.word	0x4f54310a

08008940 <PCD_EP_OutSetupPacket_int>:
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	617b      	str	r3, [r7, #20]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	333c      	adds	r3, #60	; 0x3c
 8008958:	3304      	adds	r3, #4
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	60bb      	str	r3, [r7, #8]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4a15      	ldr	r2, [pc, #84]	; (80089c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d90e      	bls.n	8008994 <PCD_EP_OutSetupPacket_int+0x54>
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d009      	beq.n	8008994 <PCD_EP_OutSetupPacket_int+0x54>
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898c:	461a      	mov	r2, r3
 800898e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008992:	6093      	str	r3, [r2, #8]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f005 fd4f 	bl	800e438 <HAL_PCD_SetupStageCallback>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4a0a      	ldr	r2, [pc, #40]	; (80089c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d90c      	bls.n	80089bc <PCD_EP_OutSetupPacket_int+0x7c>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d108      	bne.n	80089bc <PCD_EP_OutSetupPacket_int+0x7c>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6818      	ldr	r0, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089b4:	461a      	mov	r2, r3
 80089b6:	2101      	movs	r1, #1
 80089b8:	f003 fa7e 	bl	800beb8 <USB_EP0_OutStart>
 80089bc:	2300      	movs	r3, #0
 80089be:	4618      	mov	r0, r3
 80089c0:	3718      	adds	r7, #24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	4f54300a 	.word	0x4f54300a

080089cc <HAL_PCDEx_SetTxFiFo>:
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
 80089d8:	4613      	mov	r3, r2
 80089da:	803b      	strh	r3, [r7, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e2:	60bb      	str	r3, [r7, #8]
 80089e4:	78fb      	ldrb	r3, [r7, #3]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d107      	bne.n	80089fa <HAL_PCDEx_SetTxFiFo+0x2e>
 80089ea:	883b      	ldrh	r3, [r7, #0]
 80089ec:	0419      	lsls	r1, r3, #16
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	629a      	str	r2, [r3, #40]	; 0x28
 80089f8:	e028      	b.n	8008a4c <HAL_PCDEx_SetTxFiFo+0x80>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a00:	0c1b      	lsrs	r3, r3, #16
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	4413      	add	r3, r2
 8008a06:	60bb      	str	r3, [r7, #8]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
 8008a0c:	e00d      	b.n	8008a2a <HAL_PCDEx_SetTxFiFo+0x5e>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	3340      	adds	r3, #64	; 0x40
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	0c1b      	lsrs	r3, r3, #16
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	4413      	add	r3, r2
 8008a22:	60bb      	str	r3, [r7, #8]
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	3301      	adds	r3, #1
 8008a28:	73fb      	strb	r3, [r7, #15]
 8008a2a:	7bfa      	ldrb	r2, [r7, #15]
 8008a2c:	78fb      	ldrb	r3, [r7, #3]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d3ec      	bcc.n	8008a0e <HAL_PCDEx_SetTxFiFo+0x42>
 8008a34:	883b      	ldrh	r3, [r7, #0]
 8008a36:	0418      	lsls	r0, r3, #16
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6819      	ldr	r1, [r3, #0]
 8008a3c:	78fb      	ldrb	r3, [r7, #3]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	4302      	orrs	r2, r0
 8008a44:	3340      	adds	r3, #64	; 0x40
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	605a      	str	r2, [r3, #4]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <HAL_PCDEx_SetRxFiFo>:
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	807b      	strh	r3, [r7, #2]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	887a      	ldrh	r2, [r7, #2]
 8008a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_PCDEx_LPM_Callback>:
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_RCC_OscConfig>:
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x12>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e267      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d075      	beq.n	8008b9e <HAL_RCC_OscConfig+0x10a>
 8008ab2:	4b88      	ldr	r3, [pc, #544]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f003 030c 	and.w	r3, r3, #12
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d00c      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x44>
 8008abe:	4b85      	ldr	r3, [pc, #532]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f003 030c 	and.w	r3, r3, #12
 8008ac6:	2b08      	cmp	r3, #8
 8008ac8:	d112      	bne.n	8008af0 <HAL_RCC_OscConfig+0x5c>
 8008aca:	4b82      	ldr	r3, [pc, #520]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ad6:	d10b      	bne.n	8008af0 <HAL_RCC_OscConfig+0x5c>
 8008ad8:	4b7e      	ldr	r3, [pc, #504]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d05b      	beq.n	8008b9c <HAL_RCC_OscConfig+0x108>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d157      	bne.n	8008b9c <HAL_RCC_OscConfig+0x108>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e242      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008af8:	d106      	bne.n	8008b08 <HAL_RCC_OscConfig+0x74>
 8008afa:	4b76      	ldr	r3, [pc, #472]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a75      	ldr	r2, [pc, #468]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b04:	6013      	str	r3, [r2, #0]
 8008b06:	e01d      	b.n	8008b44 <HAL_RCC_OscConfig+0xb0>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b10:	d10c      	bne.n	8008b2c <HAL_RCC_OscConfig+0x98>
 8008b12:	4b70      	ldr	r3, [pc, #448]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a6f      	ldr	r2, [pc, #444]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	4b6d      	ldr	r3, [pc, #436]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a6c      	ldr	r2, [pc, #432]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b28:	6013      	str	r3, [r2, #0]
 8008b2a:	e00b      	b.n	8008b44 <HAL_RCC_OscConfig+0xb0>
 8008b2c:	4b69      	ldr	r3, [pc, #420]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a68      	ldr	r2, [pc, #416]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	4b66      	ldr	r3, [pc, #408]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a65      	ldr	r2, [pc, #404]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b42:	6013      	str	r3, [r2, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d013      	beq.n	8008b74 <HAL_RCC_OscConfig+0xe0>
 8008b4c:	f7fb fd02 	bl	8004554 <HAL_GetTick>
 8008b50:	6138      	str	r0, [r7, #16]
 8008b52:	e008      	b.n	8008b66 <HAL_RCC_OscConfig+0xd2>
 8008b54:	f7fb fcfe 	bl	8004554 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	2b64      	cmp	r3, #100	; 0x64
 8008b60:	d901      	bls.n	8008b66 <HAL_RCC_OscConfig+0xd2>
 8008b62:	2303      	movs	r3, #3
 8008b64:	e207      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008b66:	4b5b      	ldr	r3, [pc, #364]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0f0      	beq.n	8008b54 <HAL_RCC_OscConfig+0xc0>
 8008b72:	e014      	b.n	8008b9e <HAL_RCC_OscConfig+0x10a>
 8008b74:	f7fb fcee 	bl	8004554 <HAL_GetTick>
 8008b78:	6138      	str	r0, [r7, #16]
 8008b7a:	e008      	b.n	8008b8e <HAL_RCC_OscConfig+0xfa>
 8008b7c:	f7fb fcea 	bl	8004554 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	2b64      	cmp	r3, #100	; 0x64
 8008b88:	d901      	bls.n	8008b8e <HAL_RCC_OscConfig+0xfa>
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e1f3      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008b8e:	4b51      	ldr	r3, [pc, #324]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1f0      	bne.n	8008b7c <HAL_RCC_OscConfig+0xe8>
 8008b9a:	e000      	b.n	8008b9e <HAL_RCC_OscConfig+0x10a>
 8008b9c:	bf00      	nop
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d063      	beq.n	8008c72 <HAL_RCC_OscConfig+0x1de>
 8008baa:	4b4a      	ldr	r3, [pc, #296]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f003 030c 	and.w	r3, r3, #12
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00b      	beq.n	8008bce <HAL_RCC_OscConfig+0x13a>
 8008bb6:	4b47      	ldr	r3, [pc, #284]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f003 030c 	and.w	r3, r3, #12
 8008bbe:	2b08      	cmp	r3, #8
 8008bc0:	d11c      	bne.n	8008bfc <HAL_RCC_OscConfig+0x168>
 8008bc2:	4b44      	ldr	r3, [pc, #272]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d116      	bne.n	8008bfc <HAL_RCC_OscConfig+0x168>
 8008bce:	4b41      	ldr	r3, [pc, #260]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d005      	beq.n	8008be6 <HAL_RCC_OscConfig+0x152>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d001      	beq.n	8008be6 <HAL_RCC_OscConfig+0x152>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e1c7      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008be6:	4b3b      	ldr	r3, [pc, #236]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	4937      	ldr	r1, [pc, #220]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	600b      	str	r3, [r1, #0]
 8008bfa:	e03a      	b.n	8008c72 <HAL_RCC_OscConfig+0x1de>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d020      	beq.n	8008c46 <HAL_RCC_OscConfig+0x1b2>
 8008c04:	4b34      	ldr	r3, [pc, #208]	; (8008cd8 <HAL_RCC_OscConfig+0x244>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	f7fb fca3 	bl	8004554 <HAL_GetTick>
 8008c0e:	6138      	str	r0, [r7, #16]
 8008c10:	e008      	b.n	8008c24 <HAL_RCC_OscConfig+0x190>
 8008c12:	f7fb fc9f 	bl	8004554 <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d901      	bls.n	8008c24 <HAL_RCC_OscConfig+0x190>
 8008c20:	2303      	movs	r3, #3
 8008c22:	e1a8      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008c24:	4b2b      	ldr	r3, [pc, #172]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0302 	and.w	r3, r3, #2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d0f0      	beq.n	8008c12 <HAL_RCC_OscConfig+0x17e>
 8008c30:	4b28      	ldr	r3, [pc, #160]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	4925      	ldr	r1, [pc, #148]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008c40:	4313      	orrs	r3, r2
 8008c42:	600b      	str	r3, [r1, #0]
 8008c44:	e015      	b.n	8008c72 <HAL_RCC_OscConfig+0x1de>
 8008c46:	4b24      	ldr	r3, [pc, #144]	; (8008cd8 <HAL_RCC_OscConfig+0x244>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	f7fb fc82 	bl	8004554 <HAL_GetTick>
 8008c50:	6138      	str	r0, [r7, #16]
 8008c52:	e008      	b.n	8008c66 <HAL_RCC_OscConfig+0x1d2>
 8008c54:	f7fb fc7e 	bl	8004554 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d901      	bls.n	8008c66 <HAL_RCC_OscConfig+0x1d2>
 8008c62:	2303      	movs	r3, #3
 8008c64:	e187      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008c66:	4b1b      	ldr	r3, [pc, #108]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1f0      	bne.n	8008c54 <HAL_RCC_OscConfig+0x1c0>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0308 	and.w	r3, r3, #8
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d036      	beq.n	8008cec <HAL_RCC_OscConfig+0x258>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d016      	beq.n	8008cb4 <HAL_RCC_OscConfig+0x220>
 8008c86:	4b15      	ldr	r3, [pc, #84]	; (8008cdc <HAL_RCC_OscConfig+0x248>)
 8008c88:	2201      	movs	r2, #1
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	f7fb fc62 	bl	8004554 <HAL_GetTick>
 8008c90:	6138      	str	r0, [r7, #16]
 8008c92:	e008      	b.n	8008ca6 <HAL_RCC_OscConfig+0x212>
 8008c94:	f7fb fc5e 	bl	8004554 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_OscConfig+0x212>
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e167      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008ca6:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <HAL_RCC_OscConfig+0x240>)
 8008ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0f0      	beq.n	8008c94 <HAL_RCC_OscConfig+0x200>
 8008cb2:	e01b      	b.n	8008cec <HAL_RCC_OscConfig+0x258>
 8008cb4:	4b09      	ldr	r3, [pc, #36]	; (8008cdc <HAL_RCC_OscConfig+0x248>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]
 8008cba:	f7fb fc4b 	bl	8004554 <HAL_GetTick>
 8008cbe:	6138      	str	r0, [r7, #16]
 8008cc0:	e00e      	b.n	8008ce0 <HAL_RCC_OscConfig+0x24c>
 8008cc2:	f7fb fc47 	bl	8004554 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d907      	bls.n	8008ce0 <HAL_RCC_OscConfig+0x24c>
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e150      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008cd4:	40023800 	.word	0x40023800
 8008cd8:	42470000 	.word	0x42470000
 8008cdc:	42470e80 	.word	0x42470e80
 8008ce0:	4b88      	ldr	r3, [pc, #544]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1ea      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x22e>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 8097 	beq.w	8008e28 <HAL_RCC_OscConfig+0x394>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	75fb      	strb	r3, [r7, #23]
 8008cfe:	4b81      	ldr	r3, [pc, #516]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10f      	bne.n	8008d2a <HAL_RCC_OscConfig+0x296>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60bb      	str	r3, [r7, #8]
 8008d0e:	4b7d      	ldr	r3, [pc, #500]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	4a7c      	ldr	r2, [pc, #496]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d18:	6413      	str	r3, [r2, #64]	; 0x40
 8008d1a:	4b7a      	ldr	r3, [pc, #488]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d22:	60bb      	str	r3, [r7, #8]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2301      	movs	r3, #1
 8008d28:	75fb      	strb	r3, [r7, #23]
 8008d2a:	4b77      	ldr	r3, [pc, #476]	; (8008f08 <HAL_RCC_OscConfig+0x474>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d118      	bne.n	8008d68 <HAL_RCC_OscConfig+0x2d4>
 8008d36:	4b74      	ldr	r3, [pc, #464]	; (8008f08 <HAL_RCC_OscConfig+0x474>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a73      	ldr	r2, [pc, #460]	; (8008f08 <HAL_RCC_OscConfig+0x474>)
 8008d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	f7fb fc07 	bl	8004554 <HAL_GetTick>
 8008d46:	6138      	str	r0, [r7, #16]
 8008d48:	e008      	b.n	8008d5c <HAL_RCC_OscConfig+0x2c8>
 8008d4a:	f7fb fc03 	bl	8004554 <HAL_GetTick>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d901      	bls.n	8008d5c <HAL_RCC_OscConfig+0x2c8>
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e10c      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008d5c:	4b6a      	ldr	r3, [pc, #424]	; (8008f08 <HAL_RCC_OscConfig+0x474>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0f0      	beq.n	8008d4a <HAL_RCC_OscConfig+0x2b6>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d106      	bne.n	8008d7e <HAL_RCC_OscConfig+0x2ea>
 8008d70:	4b64      	ldr	r3, [pc, #400]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d74:	4a63      	ldr	r2, [pc, #396]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008d76:	f043 0301 	orr.w	r3, r3, #1
 8008d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d7c:	e01c      	b.n	8008db8 <HAL_RCC_OscConfig+0x324>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	2b05      	cmp	r3, #5
 8008d84:	d10c      	bne.n	8008da0 <HAL_RCC_OscConfig+0x30c>
 8008d86:	4b5f      	ldr	r3, [pc, #380]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8a:	4a5e      	ldr	r2, [pc, #376]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008d8c:	f043 0304 	orr.w	r3, r3, #4
 8008d90:	6713      	str	r3, [r2, #112]	; 0x70
 8008d92:	4b5c      	ldr	r3, [pc, #368]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d96:	4a5b      	ldr	r2, [pc, #364]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008d98:	f043 0301 	orr.w	r3, r3, #1
 8008d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8008d9e:	e00b      	b.n	8008db8 <HAL_RCC_OscConfig+0x324>
 8008da0:	4b58      	ldr	r3, [pc, #352]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da4:	4a57      	ldr	r2, [pc, #348]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008da6:	f023 0301 	bic.w	r3, r3, #1
 8008daa:	6713      	str	r3, [r2, #112]	; 0x70
 8008dac:	4b55      	ldr	r3, [pc, #340]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db0:	4a54      	ldr	r2, [pc, #336]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008db2:	f023 0304 	bic.w	r3, r3, #4
 8008db6:	6713      	str	r3, [r2, #112]	; 0x70
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d015      	beq.n	8008dec <HAL_RCC_OscConfig+0x358>
 8008dc0:	f7fb fbc8 	bl	8004554 <HAL_GetTick>
 8008dc4:	6138      	str	r0, [r7, #16]
 8008dc6:	e00a      	b.n	8008dde <HAL_RCC_OscConfig+0x34a>
 8008dc8:	f7fb fbc4 	bl	8004554 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d901      	bls.n	8008dde <HAL_RCC_OscConfig+0x34a>
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e0cb      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008dde:	4b49      	ldr	r3, [pc, #292]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0ee      	beq.n	8008dc8 <HAL_RCC_OscConfig+0x334>
 8008dea:	e014      	b.n	8008e16 <HAL_RCC_OscConfig+0x382>
 8008dec:	f7fb fbb2 	bl	8004554 <HAL_GetTick>
 8008df0:	6138      	str	r0, [r7, #16]
 8008df2:	e00a      	b.n	8008e0a <HAL_RCC_OscConfig+0x376>
 8008df4:	f7fb fbae 	bl	8004554 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d901      	bls.n	8008e0a <HAL_RCC_OscConfig+0x376>
 8008e06:	2303      	movs	r3, #3
 8008e08:	e0b5      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008e0a:	4b3e      	ldr	r3, [pc, #248]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0e:	f003 0302 	and.w	r3, r3, #2
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1ee      	bne.n	8008df4 <HAL_RCC_OscConfig+0x360>
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d105      	bne.n	8008e28 <HAL_RCC_OscConfig+0x394>
 8008e1c:	4b39      	ldr	r3, [pc, #228]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e20:	4a38      	ldr	r2, [pc, #224]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e26:	6413      	str	r3, [r2, #64]	; 0x40
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 80a1 	beq.w	8008f74 <HAL_RCC_OscConfig+0x4e0>
 8008e32:	4b34      	ldr	r3, [pc, #208]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f003 030c 	and.w	r3, r3, #12
 8008e3a:	2b08      	cmp	r3, #8
 8008e3c:	d05c      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x464>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d141      	bne.n	8008eca <HAL_RCC_OscConfig+0x436>
 8008e46:	4b31      	ldr	r3, [pc, #196]	; (8008f0c <HAL_RCC_OscConfig+0x478>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	f7fb fb82 	bl	8004554 <HAL_GetTick>
 8008e50:	6138      	str	r0, [r7, #16]
 8008e52:	e008      	b.n	8008e66 <HAL_RCC_OscConfig+0x3d2>
 8008e54:	f7fb fb7e 	bl	8004554 <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d901      	bls.n	8008e66 <HAL_RCC_OscConfig+0x3d2>
 8008e62:	2303      	movs	r3, #3
 8008e64:	e087      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008e66:	4b27      	ldr	r3, [pc, #156]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1f0      	bne.n	8008e54 <HAL_RCC_OscConfig+0x3c0>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	69da      	ldr	r2, [r3, #28]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	019b      	lsls	r3, r3, #6
 8008e82:	431a      	orrs	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e88:	085b      	lsrs	r3, r3, #1
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	041b      	lsls	r3, r3, #16
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	061b      	lsls	r3, r3, #24
 8008e96:	491b      	ldr	r1, [pc, #108]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	604b      	str	r3, [r1, #4]
 8008e9c:	4b1b      	ldr	r3, [pc, #108]	; (8008f0c <HAL_RCC_OscConfig+0x478>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	f7fb fb57 	bl	8004554 <HAL_GetTick>
 8008ea6:	6138      	str	r0, [r7, #16]
 8008ea8:	e008      	b.n	8008ebc <HAL_RCC_OscConfig+0x428>
 8008eaa:	f7fb fb53 	bl	8004554 <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d901      	bls.n	8008ebc <HAL_RCC_OscConfig+0x428>
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e05c      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008ebc:	4b11      	ldr	r3, [pc, #68]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0f0      	beq.n	8008eaa <HAL_RCC_OscConfig+0x416>
 8008ec8:	e054      	b.n	8008f74 <HAL_RCC_OscConfig+0x4e0>
 8008eca:	4b10      	ldr	r3, [pc, #64]	; (8008f0c <HAL_RCC_OscConfig+0x478>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	f7fb fb40 	bl	8004554 <HAL_GetTick>
 8008ed4:	6138      	str	r0, [r7, #16]
 8008ed6:	e008      	b.n	8008eea <HAL_RCC_OscConfig+0x456>
 8008ed8:	f7fb fb3c 	bl	8004554 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d901      	bls.n	8008eea <HAL_RCC_OscConfig+0x456>
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e045      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008eea:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <HAL_RCC_OscConfig+0x470>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1f0      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x444>
 8008ef6:	e03d      	b.n	8008f74 <HAL_RCC_OscConfig+0x4e0>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d107      	bne.n	8008f10 <HAL_RCC_OscConfig+0x47c>
 8008f00:	2301      	movs	r3, #1
 8008f02:	e038      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008f04:	40023800 	.word	0x40023800
 8008f08:	40007000 	.word	0x40007000
 8008f0c:	42470060 	.word	0x42470060
 8008f10:	4b1b      	ldr	r3, [pc, #108]	; (8008f80 <HAL_RCC_OscConfig+0x4ec>)
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	60fb      	str	r3, [r7, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d028      	beq.n	8008f70 <HAL_RCC_OscConfig+0x4dc>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d121      	bne.n	8008f70 <HAL_RCC_OscConfig+0x4dc>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d11a      	bne.n	8008f70 <HAL_RCC_OscConfig+0x4dc>
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f40:	4013      	ands	r3, r2
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f46:	0192      	lsls	r2, r2, #6
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d111      	bne.n	8008f70 <HAL_RCC_OscConfig+0x4dc>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f56:	085b      	lsrs	r3, r3, #1
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	041b      	lsls	r3, r3, #16
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d107      	bne.n	8008f70 <HAL_RCC_OscConfig+0x4dc>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	061b      	lsls	r3, r3, #24
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d001      	beq.n	8008f74 <HAL_RCC_OscConfig+0x4e0>
 8008f70:	2301      	movs	r3, #1
 8008f72:	e000      	b.n	8008f76 <HAL_RCC_OscConfig+0x4e2>
 8008f74:	2300      	movs	r3, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	3718      	adds	r7, #24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	40023800 	.word	0x40023800

08008f84 <HAL_RCC_ClockConfig>:
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <HAL_RCC_ClockConfig+0x14>
 8008f94:	2301      	movs	r3, #1
 8008f96:	e0cc      	b.n	8009132 <HAL_RCC_ClockConfig+0x1ae>
 8008f98:	4b68      	ldr	r3, [pc, #416]	; (800913c <HAL_RCC_ClockConfig+0x1b8>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 030f 	and.w	r3, r3, #15
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d90c      	bls.n	8008fc0 <HAL_RCC_ClockConfig+0x3c>
 8008fa6:	4b65      	ldr	r3, [pc, #404]	; (800913c <HAL_RCC_ClockConfig+0x1b8>)
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	b2d2      	uxtb	r2, r2
 8008fac:	701a      	strb	r2, [r3, #0]
 8008fae:	4b63      	ldr	r3, [pc, #396]	; (800913c <HAL_RCC_ClockConfig+0x1b8>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 030f 	and.w	r3, r3, #15
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d001      	beq.n	8008fc0 <HAL_RCC_ClockConfig+0x3c>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e0b8      	b.n	8009132 <HAL_RCC_ClockConfig+0x1ae>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d020      	beq.n	800900e <HAL_RCC_ClockConfig+0x8a>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0304 	and.w	r3, r3, #4
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d005      	beq.n	8008fe4 <HAL_RCC_ClockConfig+0x60>
 8008fd8:	4b59      	ldr	r3, [pc, #356]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	4a58      	ldr	r2, [pc, #352]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8008fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008fe2:	6093      	str	r3, [r2, #8]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0308 	and.w	r3, r3, #8
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <HAL_RCC_ClockConfig+0x78>
 8008ff0:	4b53      	ldr	r3, [pc, #332]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	4a52      	ldr	r2, [pc, #328]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8008ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008ffa:	6093      	str	r3, [r2, #8]
 8008ffc:	4b50      	ldr	r3, [pc, #320]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	494d      	ldr	r1, [pc, #308]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 800900a:	4313      	orrs	r3, r2
 800900c:	608b      	str	r3, [r1, #8]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d044      	beq.n	80090a4 <HAL_RCC_ClockConfig+0x120>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d107      	bne.n	8009032 <HAL_RCC_ClockConfig+0xae>
 8009022:	4b47      	ldr	r3, [pc, #284]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d119      	bne.n	8009062 <HAL_RCC_ClockConfig+0xde>
 800902e:	2301      	movs	r3, #1
 8009030:	e07f      	b.n	8009132 <HAL_RCC_ClockConfig+0x1ae>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d003      	beq.n	8009042 <HAL_RCC_ClockConfig+0xbe>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2b03      	cmp	r3, #3
 8009040:	d107      	bne.n	8009052 <HAL_RCC_ClockConfig+0xce>
 8009042:	4b3f      	ldr	r3, [pc, #252]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d109      	bne.n	8009062 <HAL_RCC_ClockConfig+0xde>
 800904e:	2301      	movs	r3, #1
 8009050:	e06f      	b.n	8009132 <HAL_RCC_ClockConfig+0x1ae>
 8009052:	4b3b      	ldr	r3, [pc, #236]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0302 	and.w	r3, r3, #2
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <HAL_RCC_ClockConfig+0xde>
 800905e:	2301      	movs	r3, #1
 8009060:	e067      	b.n	8009132 <HAL_RCC_ClockConfig+0x1ae>
 8009062:	4b37      	ldr	r3, [pc, #220]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f023 0203 	bic.w	r2, r3, #3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	4934      	ldr	r1, [pc, #208]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8009070:	4313      	orrs	r3, r2
 8009072:	608b      	str	r3, [r1, #8]
 8009074:	f7fb fa6e 	bl	8004554 <HAL_GetTick>
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	e00a      	b.n	8009092 <HAL_RCC_ClockConfig+0x10e>
 800907c:	f7fb fa6a 	bl	8004554 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	f241 3288 	movw	r2, #5000	; 0x1388
 800908a:	4293      	cmp	r3, r2
 800908c:	d901      	bls.n	8009092 <HAL_RCC_ClockConfig+0x10e>
 800908e:	2303      	movs	r3, #3
 8009090:	e04f      	b.n	8009132 <HAL_RCC_ClockConfig+0x1ae>
 8009092:	4b2b      	ldr	r3, [pc, #172]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 020c 	and.w	r2, r3, #12
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d1eb      	bne.n	800907c <HAL_RCC_ClockConfig+0xf8>
 80090a4:	4b25      	ldr	r3, [pc, #148]	; (800913c <HAL_RCC_ClockConfig+0x1b8>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 030f 	and.w	r3, r3, #15
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d20c      	bcs.n	80090cc <HAL_RCC_ClockConfig+0x148>
 80090b2:	4b22      	ldr	r3, [pc, #136]	; (800913c <HAL_RCC_ClockConfig+0x1b8>)
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	b2d2      	uxtb	r2, r2
 80090b8:	701a      	strb	r2, [r3, #0]
 80090ba:	4b20      	ldr	r3, [pc, #128]	; (800913c <HAL_RCC_ClockConfig+0x1b8>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 030f 	and.w	r3, r3, #15
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d001      	beq.n	80090cc <HAL_RCC_ClockConfig+0x148>
 80090c8:	2301      	movs	r3, #1
 80090ca:	e032      	b.n	8009132 <HAL_RCC_ClockConfig+0x1ae>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d008      	beq.n	80090ea <HAL_RCC_ClockConfig+0x166>
 80090d8:	4b19      	ldr	r3, [pc, #100]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	4916      	ldr	r1, [pc, #88]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	608b      	str	r3, [r1, #8]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0308 	and.w	r3, r3, #8
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d009      	beq.n	800910a <HAL_RCC_ClockConfig+0x186>
 80090f6:	4b12      	ldr	r3, [pc, #72]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	490e      	ldr	r1, [pc, #56]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8009106:	4313      	orrs	r3, r2
 8009108:	608b      	str	r3, [r1, #8]
 800910a:	f000 f821 	bl	8009150 <HAL_RCC_GetSysClockFreq>
 800910e:	4602      	mov	r2, r0
 8009110:	4b0b      	ldr	r3, [pc, #44]	; (8009140 <HAL_RCC_ClockConfig+0x1bc>)
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	091b      	lsrs	r3, r3, #4
 8009116:	f003 030f 	and.w	r3, r3, #15
 800911a:	490a      	ldr	r1, [pc, #40]	; (8009144 <HAL_RCC_ClockConfig+0x1c0>)
 800911c:	5ccb      	ldrb	r3, [r1, r3]
 800911e:	fa22 f303 	lsr.w	r3, r2, r3
 8009122:	4a09      	ldr	r2, [pc, #36]	; (8009148 <HAL_RCC_ClockConfig+0x1c4>)
 8009124:	6013      	str	r3, [r2, #0]
 8009126:	4b09      	ldr	r3, [pc, #36]	; (800914c <HAL_RCC_ClockConfig+0x1c8>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4618      	mov	r0, r3
 800912c:	f7fb f9ce 	bl	80044cc <HAL_InitTick>
 8009130:	2300      	movs	r3, #0
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	40023c00 	.word	0x40023c00
 8009140:	40023800 	.word	0x40023800
 8009144:	080151e0 	.word	0x080151e0
 8009148:	20000014 	.word	0x20000014
 800914c:	20000018 	.word	0x20000018

08009150 <HAL_RCC_GetSysClockFreq>:
 8009150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009154:	b094      	sub	sp, #80	; 0x50
 8009156:	af00      	add	r7, sp, #0
 8009158:	2300      	movs	r3, #0
 800915a:	647b      	str	r3, [r7, #68]	; 0x44
 800915c:	2300      	movs	r3, #0
 800915e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009160:	2300      	movs	r3, #0
 8009162:	643b      	str	r3, [r7, #64]	; 0x40
 8009164:	2300      	movs	r3, #0
 8009166:	64bb      	str	r3, [r7, #72]	; 0x48
 8009168:	4b79      	ldr	r3, [pc, #484]	; (8009350 <HAL_RCC_GetSysClockFreq+0x200>)
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f003 030c 	and.w	r3, r3, #12
 8009170:	2b08      	cmp	r3, #8
 8009172:	d00d      	beq.n	8009190 <HAL_RCC_GetSysClockFreq+0x40>
 8009174:	2b08      	cmp	r3, #8
 8009176:	f200 80e1 	bhi.w	800933c <HAL_RCC_GetSysClockFreq+0x1ec>
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <HAL_RCC_GetSysClockFreq+0x34>
 800917e:	2b04      	cmp	r3, #4
 8009180:	d003      	beq.n	800918a <HAL_RCC_GetSysClockFreq+0x3a>
 8009182:	e0db      	b.n	800933c <HAL_RCC_GetSysClockFreq+0x1ec>
 8009184:	4b73      	ldr	r3, [pc, #460]	; (8009354 <HAL_RCC_GetSysClockFreq+0x204>)
 8009186:	64bb      	str	r3, [r7, #72]	; 0x48
 8009188:	e0db      	b.n	8009342 <HAL_RCC_GetSysClockFreq+0x1f2>
 800918a:	4b73      	ldr	r3, [pc, #460]	; (8009358 <HAL_RCC_GetSysClockFreq+0x208>)
 800918c:	64bb      	str	r3, [r7, #72]	; 0x48
 800918e:	e0d8      	b.n	8009342 <HAL_RCC_GetSysClockFreq+0x1f2>
 8009190:	4b6f      	ldr	r3, [pc, #444]	; (8009350 <HAL_RCC_GetSysClockFreq+0x200>)
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009198:	647b      	str	r3, [r7, #68]	; 0x44
 800919a:	4b6d      	ldr	r3, [pc, #436]	; (8009350 <HAL_RCC_GetSysClockFreq+0x200>)
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d063      	beq.n	800926e <HAL_RCC_GetSysClockFreq+0x11e>
 80091a6:	4b6a      	ldr	r3, [pc, #424]	; (8009350 <HAL_RCC_GetSysClockFreq+0x200>)
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	099b      	lsrs	r3, r3, #6
 80091ac:	2200      	movs	r2, #0
 80091ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80091b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80091b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b8:	633b      	str	r3, [r7, #48]	; 0x30
 80091ba:	2300      	movs	r3, #0
 80091bc:	637b      	str	r3, [r7, #52]	; 0x34
 80091be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80091c2:	4622      	mov	r2, r4
 80091c4:	462b      	mov	r3, r5
 80091c6:	f04f 0000 	mov.w	r0, #0
 80091ca:	f04f 0100 	mov.w	r1, #0
 80091ce:	0159      	lsls	r1, r3, #5
 80091d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091d4:	0150      	lsls	r0, r2, #5
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4621      	mov	r1, r4
 80091dc:	1a51      	subs	r1, r2, r1
 80091de:	6139      	str	r1, [r7, #16]
 80091e0:	4629      	mov	r1, r5
 80091e2:	eb63 0301 	sbc.w	r3, r3, r1
 80091e6:	617b      	str	r3, [r7, #20]
 80091e8:	f04f 0200 	mov.w	r2, #0
 80091ec:	f04f 0300 	mov.w	r3, #0
 80091f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091f4:	4659      	mov	r1, fp
 80091f6:	018b      	lsls	r3, r1, #6
 80091f8:	4651      	mov	r1, sl
 80091fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091fe:	4651      	mov	r1, sl
 8009200:	018a      	lsls	r2, r1, #6
 8009202:	4651      	mov	r1, sl
 8009204:	ebb2 0801 	subs.w	r8, r2, r1
 8009208:	4659      	mov	r1, fp
 800920a:	eb63 0901 	sbc.w	r9, r3, r1
 800920e:	f04f 0200 	mov.w	r2, #0
 8009212:	f04f 0300 	mov.w	r3, #0
 8009216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800921a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800921e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009222:	4690      	mov	r8, r2
 8009224:	4699      	mov	r9, r3
 8009226:	4623      	mov	r3, r4
 8009228:	eb18 0303 	adds.w	r3, r8, r3
 800922c:	60bb      	str	r3, [r7, #8]
 800922e:	462b      	mov	r3, r5
 8009230:	eb49 0303 	adc.w	r3, r9, r3
 8009234:	60fb      	str	r3, [r7, #12]
 8009236:	f04f 0200 	mov.w	r2, #0
 800923a:	f04f 0300 	mov.w	r3, #0
 800923e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009242:	4629      	mov	r1, r5
 8009244:	024b      	lsls	r3, r1, #9
 8009246:	4621      	mov	r1, r4
 8009248:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800924c:	4621      	mov	r1, r4
 800924e:	024a      	lsls	r2, r1, #9
 8009250:	4610      	mov	r0, r2
 8009252:	4619      	mov	r1, r3
 8009254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009256:	2200      	movs	r2, #0
 8009258:	62bb      	str	r3, [r7, #40]	; 0x28
 800925a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800925c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009260:	f7f7 fd32 	bl	8000cc8 <__aeabi_uldivmod>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4613      	mov	r3, r2
 800926a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800926c:	e058      	b.n	8009320 <HAL_RCC_GetSysClockFreq+0x1d0>
 800926e:	4b38      	ldr	r3, [pc, #224]	; (8009350 <HAL_RCC_GetSysClockFreq+0x200>)
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	099b      	lsrs	r3, r3, #6
 8009274:	2200      	movs	r2, #0
 8009276:	4618      	mov	r0, r3
 8009278:	4611      	mov	r1, r2
 800927a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800927e:	623b      	str	r3, [r7, #32]
 8009280:	2300      	movs	r3, #0
 8009282:	627b      	str	r3, [r7, #36]	; 0x24
 8009284:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009288:	4642      	mov	r2, r8
 800928a:	464b      	mov	r3, r9
 800928c:	f04f 0000 	mov.w	r0, #0
 8009290:	f04f 0100 	mov.w	r1, #0
 8009294:	0159      	lsls	r1, r3, #5
 8009296:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800929a:	0150      	lsls	r0, r2, #5
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	4641      	mov	r1, r8
 80092a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80092a6:	4649      	mov	r1, r9
 80092a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80092ac:	f04f 0200 	mov.w	r2, #0
 80092b0:	f04f 0300 	mov.w	r3, #0
 80092b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80092b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80092bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80092c0:	ebb2 040a 	subs.w	r4, r2, sl
 80092c4:	eb63 050b 	sbc.w	r5, r3, fp
 80092c8:	f04f 0200 	mov.w	r2, #0
 80092cc:	f04f 0300 	mov.w	r3, #0
 80092d0:	00eb      	lsls	r3, r5, #3
 80092d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092d6:	00e2      	lsls	r2, r4, #3
 80092d8:	4614      	mov	r4, r2
 80092da:	461d      	mov	r5, r3
 80092dc:	4643      	mov	r3, r8
 80092de:	18e3      	adds	r3, r4, r3
 80092e0:	603b      	str	r3, [r7, #0]
 80092e2:	464b      	mov	r3, r9
 80092e4:	eb45 0303 	adc.w	r3, r5, r3
 80092e8:	607b      	str	r3, [r7, #4]
 80092ea:	f04f 0200 	mov.w	r2, #0
 80092ee:	f04f 0300 	mov.w	r3, #0
 80092f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80092f6:	4629      	mov	r1, r5
 80092f8:	028b      	lsls	r3, r1, #10
 80092fa:	4621      	mov	r1, r4
 80092fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009300:	4621      	mov	r1, r4
 8009302:	028a      	lsls	r2, r1, #10
 8009304:	4610      	mov	r0, r2
 8009306:	4619      	mov	r1, r3
 8009308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800930a:	2200      	movs	r2, #0
 800930c:	61bb      	str	r3, [r7, #24]
 800930e:	61fa      	str	r2, [r7, #28]
 8009310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009314:	f7f7 fcd8 	bl	8000cc8 <__aeabi_uldivmod>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4613      	mov	r3, r2
 800931e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009320:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <HAL_RCC_GetSysClockFreq+0x200>)
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	0c1b      	lsrs	r3, r3, #16
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	3301      	adds	r3, #1
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	643b      	str	r3, [r7, #64]	; 0x40
 8009330:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009334:	fbb2 f3f3 	udiv	r3, r2, r3
 8009338:	64bb      	str	r3, [r7, #72]	; 0x48
 800933a:	e002      	b.n	8009342 <HAL_RCC_GetSysClockFreq+0x1f2>
 800933c:	4b05      	ldr	r3, [pc, #20]	; (8009354 <HAL_RCC_GetSysClockFreq+0x204>)
 800933e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009340:	bf00      	nop
 8009342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009344:	4618      	mov	r0, r3
 8009346:	3750      	adds	r7, #80	; 0x50
 8009348:	46bd      	mov	sp, r7
 800934a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800934e:	bf00      	nop
 8009350:	40023800 	.word	0x40023800
 8009354:	00f42400 	.word	0x00f42400
 8009358:	007a1200 	.word	0x007a1200

0800935c <HAL_RCC_GetHCLKFreq>:
 800935c:	b480      	push	{r7}
 800935e:	af00      	add	r7, sp, #0
 8009360:	4b03      	ldr	r3, [pc, #12]	; (8009370 <HAL_RCC_GetHCLKFreq+0x14>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4618      	mov	r0, r3
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	20000014 	.word	0x20000014

08009374 <HAL_RCC_GetPCLK1Freq>:
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
 8009378:	f7ff fff0 	bl	800935c <HAL_RCC_GetHCLKFreq>
 800937c:	4602      	mov	r2, r0
 800937e:	4b05      	ldr	r3, [pc, #20]	; (8009394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	0a9b      	lsrs	r3, r3, #10
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	4903      	ldr	r1, [pc, #12]	; (8009398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800938a:	5ccb      	ldrb	r3, [r1, r3]
 800938c:	fa22 f303 	lsr.w	r3, r2, r3
 8009390:	4618      	mov	r0, r3
 8009392:	bd80      	pop	{r7, pc}
 8009394:	40023800 	.word	0x40023800
 8009398:	080151f0 	.word	0x080151f0

0800939c <HAL_SPI_Init>:
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <HAL_SPI_Init+0x12>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e07b      	b.n	80094a6 <HAL_SPI_Init+0x10a>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d108      	bne.n	80093c8 <HAL_SPI_Init+0x2c>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093be:	d009      	beq.n	80093d4 <HAL_SPI_Init+0x38>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	61da      	str	r2, [r3, #28]
 80093c6:	e005      	b.n	80093d4 <HAL_SPI_Init+0x38>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	611a      	str	r2, [r3, #16]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	615a      	str	r2, [r3, #20]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	629a      	str	r2, [r3, #40]	; 0x28
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d106      	bne.n	80093f4 <HAL_SPI_Init+0x58>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7fa fcf4 	bl	8003ddc <HAL_SPI_MspInit>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800941c:	431a      	orrs	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009426:	431a      	orrs	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	431a      	orrs	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	431a      	orrs	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009444:	431a      	orrs	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800944e:	431a      	orrs	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009458:	ea42 0103 	orr.w	r1, r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009460:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	430a      	orrs	r2, r1
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	0c1b      	lsrs	r3, r3, #16
 8009472:	f003 0104 	and.w	r1, r3, #4
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	f003 0210 	and.w	r2, r3, #16
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	605a      	str	r2, [r3, #4]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	69da      	ldr	r2, [r3, #28]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009494:	61da      	str	r2, [r3, #28]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	655a      	str	r2, [r3, #84]	; 0x54
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80094a4:	2300      	movs	r3, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <HAL_SPI_Transmit>:
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b088      	sub	sp, #32
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	60b9      	str	r1, [r7, #8]
 80094b8:	603b      	str	r3, [r7, #0]
 80094ba:	4613      	mov	r3, r2
 80094bc:	80fb      	strh	r3, [r7, #6]
 80094be:	2300      	movs	r3, #0
 80094c0:	77fb      	strb	r3, [r7, #31]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_SPI_Transmit+0x22>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e126      	b.n	800971e <HAL_SPI_Transmit+0x270>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80094d8:	f7fb f83c 	bl	8004554 <HAL_GetTick>
 80094dc:	61b8      	str	r0, [r7, #24]
 80094de:	88fb      	ldrh	r3, [r7, #6]
 80094e0:	82fb      	strh	r3, [r7, #22]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d002      	beq.n	80094f4 <HAL_SPI_Transmit+0x46>
 80094ee:	2302      	movs	r3, #2
 80094f0:	77fb      	strb	r3, [r7, #31]
 80094f2:	e10b      	b.n	800970c <HAL_SPI_Transmit+0x25e>
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <HAL_SPI_Transmit+0x52>
 80094fa:	88fb      	ldrh	r3, [r7, #6]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <HAL_SPI_Transmit+0x58>
 8009500:	2301      	movs	r3, #1
 8009502:	77fb      	strb	r3, [r7, #31]
 8009504:	e102      	b.n	800970c <HAL_SPI_Transmit+0x25e>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2203      	movs	r2, #3
 800950a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	655a      	str	r2, [r3, #84]	; 0x54
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	631a      	str	r2, [r3, #48]	; 0x30
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	88fa      	ldrh	r2, [r7, #6]
 800951e:	869a      	strh	r2, [r3, #52]	; 0x34
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	88fa      	ldrh	r2, [r7, #6]
 8009524:	86da      	strh	r2, [r3, #54]	; 0x36
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	639a      	str	r2, [r3, #56]	; 0x38
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	879a      	strh	r2, [r3, #60]	; 0x3c
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	645a      	str	r2, [r3, #68]	; 0x44
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	641a      	str	r2, [r3, #64]	; 0x40
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800954c:	d10f      	bne.n	800956e <HAL_SPI_Transmit+0xc0>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800956c:	601a      	str	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009578:	2b40      	cmp	r3, #64	; 0x40
 800957a:	d007      	beq.n	800958c <HAL_SPI_Transmit+0xde>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009594:	d14b      	bne.n	800962e <HAL_SPI_Transmit+0x180>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d002      	beq.n	80095a4 <HAL_SPI_Transmit+0xf6>
 800959e:	8afb      	ldrh	r3, [r7, #22]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d13e      	bne.n	8009622 <HAL_SPI_Transmit+0x174>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a8:	881a      	ldrh	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	60da      	str	r2, [r3, #12]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b4:	1c9a      	adds	r2, r3, #2
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	631a      	str	r2, [r3, #48]	; 0x30
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095be:	b29b      	uxth	r3, r3
 80095c0:	3b01      	subs	r3, #1
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80095c8:	e02b      	b.n	8009622 <HAL_SPI_Transmit+0x174>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f003 0302 	and.w	r3, r3, #2
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d112      	bne.n	80095fe <HAL_SPI_Transmit+0x150>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095dc:	881a      	ldrh	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	60da      	str	r2, [r3, #12]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e8:	1c9a      	adds	r2, r3, #2
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	631a      	str	r2, [r3, #48]	; 0x30
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	3b01      	subs	r3, #1
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80095fc:	e011      	b.n	8009622 <HAL_SPI_Transmit+0x174>
 80095fe:	f7fa ffa9 	bl	8004554 <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d803      	bhi.n	8009616 <HAL_SPI_Transmit+0x168>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009614:	d102      	bne.n	800961c <HAL_SPI_Transmit+0x16e>
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d102      	bne.n	8009622 <HAL_SPI_Transmit+0x174>
 800961c:	2303      	movs	r3, #3
 800961e:	77fb      	strb	r3, [r7, #31]
 8009620:	e074      	b.n	800970c <HAL_SPI_Transmit+0x25e>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009626:	b29b      	uxth	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1ce      	bne.n	80095ca <HAL_SPI_Transmit+0x11c>
 800962c:	e04c      	b.n	80096c8 <HAL_SPI_Transmit+0x21a>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d002      	beq.n	800963c <HAL_SPI_Transmit+0x18e>
 8009636:	8afb      	ldrh	r3, [r7, #22]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d140      	bne.n	80096be <HAL_SPI_Transmit+0x210>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	330c      	adds	r3, #12
 8009646:	7812      	ldrb	r2, [r2, #0]
 8009648:	701a      	strb	r2, [r3, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964e:	1c5a      	adds	r2, r3, #1
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	631a      	str	r2, [r3, #48]	; 0x30
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009658:	b29b      	uxth	r3, r3
 800965a:	3b01      	subs	r3, #1
 800965c:	b29a      	uxth	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	86da      	strh	r2, [r3, #54]	; 0x36
 8009662:	e02c      	b.n	80096be <HAL_SPI_Transmit+0x210>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b02      	cmp	r3, #2
 8009670:	d113      	bne.n	800969a <HAL_SPI_Transmit+0x1ec>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	330c      	adds	r3, #12
 800967c:	7812      	ldrb	r2, [r2, #0]
 800967e:	701a      	strb	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	631a      	str	r2, [r3, #48]	; 0x30
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800968e:	b29b      	uxth	r3, r3
 8009690:	3b01      	subs	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	86da      	strh	r2, [r3, #54]	; 0x36
 8009698:	e011      	b.n	80096be <HAL_SPI_Transmit+0x210>
 800969a:	f7fa ff5b 	bl	8004554 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d803      	bhi.n	80096b2 <HAL_SPI_Transmit+0x204>
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b0:	d102      	bne.n	80096b8 <HAL_SPI_Transmit+0x20a>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d102      	bne.n	80096be <HAL_SPI_Transmit+0x210>
 80096b8:	2303      	movs	r3, #3
 80096ba:	77fb      	strb	r3, [r7, #31]
 80096bc:	e026      	b.n	800970c <HAL_SPI_Transmit+0x25e>
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1cd      	bne.n	8009664 <HAL_SPI_Transmit+0x1b6>
 80096c8:	69ba      	ldr	r2, [r7, #24]
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 fb73 	bl	8009db8 <SPI_EndRxTxTransaction>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <HAL_SPI_Transmit+0x230>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2220      	movs	r2, #32
 80096dc:	655a      	str	r2, [r3, #84]	; 0x54
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10a      	bne.n	80096fc <HAL_SPI_Transmit+0x24e>
 80096e6:	2300      	movs	r3, #0
 80096e8:	613b      	str	r3, [r7, #16]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	613b      	str	r3, [r7, #16]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	613b      	str	r3, [r7, #16]
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <HAL_SPI_Transmit+0x25c>
 8009704:	2301      	movs	r3, #1
 8009706:	77fb      	strb	r3, [r7, #31]
 8009708:	e000      	b.n	800970c <HAL_SPI_Transmit+0x25e>
 800970a:	bf00      	nop
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800971c:	7ffb      	ldrb	r3, [r7, #31]
 800971e:	4618      	mov	r0, r3
 8009720:	3720      	adds	r7, #32
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <HAL_SPI_TransmitReceive>:
 8009726:	b580      	push	{r7, lr}
 8009728:	b08c      	sub	sp, #48	; 0x30
 800972a:	af00      	add	r7, sp, #0
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]
 8009732:	807b      	strh	r3, [r7, #2]
 8009734:	2301      	movs	r3, #1
 8009736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009738:	2300      	movs	r3, #0
 800973a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009744:	2b01      	cmp	r3, #1
 8009746:	d101      	bne.n	800974c <HAL_SPI_TransmitReceive+0x26>
 8009748:	2302      	movs	r3, #2
 800974a:	e18a      	b.n	8009a62 <HAL_SPI_TransmitReceive+0x33c>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009754:	f7fa fefe 	bl	8004554 <HAL_GetTick>
 8009758:	6278      	str	r0, [r7, #36]	; 0x24
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	61fb      	str	r3, [r7, #28]
 800976a:	887b      	ldrh	r3, [r7, #2]
 800976c:	837b      	strh	r3, [r7, #26]
 800976e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009772:	2b01      	cmp	r3, #1
 8009774:	d00f      	beq.n	8009796 <HAL_SPI_TransmitReceive+0x70>
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800977c:	d107      	bne.n	800978e <HAL_SPI_TransmitReceive+0x68>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d103      	bne.n	800978e <HAL_SPI_TransmitReceive+0x68>
 8009786:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800978a:	2b04      	cmp	r3, #4
 800978c:	d003      	beq.n	8009796 <HAL_SPI_TransmitReceive+0x70>
 800978e:	2302      	movs	r3, #2
 8009790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009794:	e15b      	b.n	8009a4e <HAL_SPI_TransmitReceive+0x328>
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <HAL_SPI_TransmitReceive+0x82>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <HAL_SPI_TransmitReceive+0x82>
 80097a2:	887b      	ldrh	r3, [r7, #2]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <HAL_SPI_TransmitReceive+0x8a>
 80097a8:	2301      	movs	r3, #1
 80097aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ae:	e14e      	b.n	8009a4e <HAL_SPI_TransmitReceive+0x328>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b04      	cmp	r3, #4
 80097ba:	d003      	beq.n	80097c4 <HAL_SPI_TransmitReceive+0x9e>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2205      	movs	r2, #5
 80097c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	655a      	str	r2, [r3, #84]	; 0x54
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	639a      	str	r2, [r3, #56]	; 0x38
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	887a      	ldrh	r2, [r7, #2]
 80097d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	887a      	ldrh	r2, [r7, #2]
 80097da:	879a      	strh	r2, [r3, #60]	; 0x3c
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	631a      	str	r2, [r3, #48]	; 0x30
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	887a      	ldrh	r2, [r7, #2]
 80097e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	887a      	ldrh	r2, [r7, #2]
 80097ec:	869a      	strh	r2, [r3, #52]	; 0x34
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	641a      	str	r2, [r3, #64]	; 0x40
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	645a      	str	r2, [r3, #68]	; 0x44
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009804:	2b40      	cmp	r3, #64	; 0x40
 8009806:	d007      	beq.n	8009818 <HAL_SPI_TransmitReceive+0xf2>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009816:	601a      	str	r2, [r3, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009820:	d178      	bne.n	8009914 <HAL_SPI_TransmitReceive+0x1ee>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <HAL_SPI_TransmitReceive+0x10a>
 800982a:	8b7b      	ldrh	r3, [r7, #26]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d166      	bne.n	80098fe <HAL_SPI_TransmitReceive+0x1d8>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009834:	881a      	ldrh	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	60da      	str	r2, [r3, #12]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009840:	1c9a      	adds	r2, r3, #2
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	631a      	str	r2, [r3, #48]	; 0x30
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800984a:	b29b      	uxth	r3, r3
 800984c:	3b01      	subs	r3, #1
 800984e:	b29a      	uxth	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	86da      	strh	r2, [r3, #54]	; 0x36
 8009854:	e053      	b.n	80098fe <HAL_SPI_TransmitReceive+0x1d8>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f003 0302 	and.w	r3, r3, #2
 8009860:	2b02      	cmp	r3, #2
 8009862:	d11b      	bne.n	800989c <HAL_SPI_TransmitReceive+0x176>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009868:	b29b      	uxth	r3, r3
 800986a:	2b00      	cmp	r3, #0
 800986c:	d016      	beq.n	800989c <HAL_SPI_TransmitReceive+0x176>
 800986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009870:	2b01      	cmp	r3, #1
 8009872:	d113      	bne.n	800989c <HAL_SPI_TransmitReceive+0x176>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009878:	881a      	ldrh	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	60da      	str	r2, [r3, #12]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009884:	1c9a      	adds	r2, r3, #2
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	631a      	str	r2, [r3, #48]	; 0x30
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800988e:	b29b      	uxth	r3, r3
 8009890:	3b01      	subs	r3, #1
 8009892:	b29a      	uxth	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	86da      	strh	r2, [r3, #54]	; 0x36
 8009898:	2300      	movs	r3, #0
 800989a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d119      	bne.n	80098de <HAL_SPI_TransmitReceive+0x1b8>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d014      	beq.n	80098de <HAL_SPI_TransmitReceive+0x1b8>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68da      	ldr	r2, [r3, #12]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098be:	b292      	uxth	r2, r2
 80098c0:	801a      	strh	r2, [r3, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c6:	1c9a      	adds	r2, r3, #2
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	3b01      	subs	r3, #1
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098da:	2301      	movs	r3, #1
 80098dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098de:	f7fa fe39 	bl	8004554 <HAL_GetTick>
 80098e2:	4602      	mov	r2, r0
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d807      	bhi.n	80098fe <HAL_SPI_TransmitReceive+0x1d8>
 80098ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f4:	d003      	beq.n	80098fe <HAL_SPI_TransmitReceive+0x1d8>
 80098f6:	2303      	movs	r3, #3
 80098f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098fc:	e0a7      	b.n	8009a4e <HAL_SPI_TransmitReceive+0x328>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009902:	b29b      	uxth	r3, r3
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1a6      	bne.n	8009856 <HAL_SPI_TransmitReceive+0x130>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1a1      	bne.n	8009856 <HAL_SPI_TransmitReceive+0x130>
 8009912:	e07c      	b.n	8009a0e <HAL_SPI_TransmitReceive+0x2e8>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <HAL_SPI_TransmitReceive+0x1fc>
 800991c:	8b7b      	ldrh	r3, [r7, #26]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d16b      	bne.n	80099fa <HAL_SPI_TransmitReceive+0x2d4>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	330c      	adds	r3, #12
 800992c:	7812      	ldrb	r2, [r2, #0]
 800992e:	701a      	strb	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	631a      	str	r2, [r3, #48]	; 0x30
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800993e:	b29b      	uxth	r3, r3
 8009940:	3b01      	subs	r3, #1
 8009942:	b29a      	uxth	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	86da      	strh	r2, [r3, #54]	; 0x36
 8009948:	e057      	b.n	80099fa <HAL_SPI_TransmitReceive+0x2d4>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b02      	cmp	r3, #2
 8009956:	d11c      	bne.n	8009992 <HAL_SPI_TransmitReceive+0x26c>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800995c:	b29b      	uxth	r3, r3
 800995e:	2b00      	cmp	r3, #0
 8009960:	d017      	beq.n	8009992 <HAL_SPI_TransmitReceive+0x26c>
 8009962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009964:	2b01      	cmp	r3, #1
 8009966:	d114      	bne.n	8009992 <HAL_SPI_TransmitReceive+0x26c>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	330c      	adds	r3, #12
 8009972:	7812      	ldrb	r2, [r2, #0]
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	631a      	str	r2, [r3, #48]	; 0x30
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009984:	b29b      	uxth	r3, r3
 8009986:	3b01      	subs	r3, #1
 8009988:	b29a      	uxth	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	86da      	strh	r2, [r3, #54]	; 0x36
 800998e:	2300      	movs	r3, #0
 8009990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f003 0301 	and.w	r3, r3, #1
 800999c:	2b01      	cmp	r3, #1
 800999e:	d119      	bne.n	80099d4 <HAL_SPI_TransmitReceive+0x2ae>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d014      	beq.n	80099d4 <HAL_SPI_TransmitReceive+0x2ae>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68da      	ldr	r2, [r3, #12]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b4:	b2d2      	uxtb	r2, r2
 80099b6:	701a      	strb	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	639a      	str	r2, [r3, #56]	; 0x38
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	3b01      	subs	r3, #1
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80099d0:	2301      	movs	r3, #1
 80099d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099d4:	f7fa fdbe 	bl	8004554 <HAL_GetTick>
 80099d8:	4602      	mov	r2, r0
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d803      	bhi.n	80099ec <HAL_SPI_TransmitReceive+0x2c6>
 80099e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ea:	d102      	bne.n	80099f2 <HAL_SPI_TransmitReceive+0x2cc>
 80099ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d103      	bne.n	80099fa <HAL_SPI_TransmitReceive+0x2d4>
 80099f2:	2303      	movs	r3, #3
 80099f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099f8:	e029      	b.n	8009a4e <HAL_SPI_TransmitReceive+0x328>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1a2      	bne.n	800994a <HAL_SPI_TransmitReceive+0x224>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d19d      	bne.n	800994a <HAL_SPI_TransmitReceive+0x224>
 8009a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 f9d0 	bl	8009db8 <SPI_EndRxTxTransaction>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d006      	beq.n	8009a2c <HAL_SPI_TransmitReceive+0x306>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2220      	movs	r2, #32
 8009a28:	655a      	str	r2, [r3, #84]	; 0x54
 8009a2a:	e010      	b.n	8009a4e <HAL_SPI_TransmitReceive+0x328>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10b      	bne.n	8009a4c <HAL_SPI_TransmitReceive+0x326>
 8009a34:	2300      	movs	r3, #0
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	e000      	b.n	8009a4e <HAL_SPI_TransmitReceive+0x328>
 8009a4c:	bf00      	nop
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009a5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a62:	4618      	mov	r0, r3
 8009a64:	3730      	adds	r7, #48	; 0x30
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <HAL_SPI_IRQHandler>:
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	61fb      	str	r3, [r7, #28]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	61bb      	str	r3, [r7, #24]
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	099b      	lsrs	r3, r3, #6
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10f      	bne.n	8009ab0 <HAL_SPI_IRQHandler+0x44>
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00a      	beq.n	8009ab0 <HAL_SPI_IRQHandler+0x44>
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	099b      	lsrs	r3, r3, #6
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d004      	beq.n	8009ab0 <HAL_SPI_IRQHandler+0x44>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	4798      	blx	r3
 8009aae:	e0d7      	b.n	8009c60 <HAL_SPI_IRQHandler+0x1f4>
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	085b      	lsrs	r3, r3, #1
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00a      	beq.n	8009ad2 <HAL_SPI_IRQHandler+0x66>
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	09db      	lsrs	r3, r3, #7
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d004      	beq.n	8009ad2 <HAL_SPI_IRQHandler+0x66>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	4798      	blx	r3
 8009ad0:	e0c6      	b.n	8009c60 <HAL_SPI_IRQHandler+0x1f4>
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	095b      	lsrs	r3, r3, #5
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10c      	bne.n	8009af8 <HAL_SPI_IRQHandler+0x8c>
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	099b      	lsrs	r3, r3, #6
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d106      	bne.n	8009af8 <HAL_SPI_IRQHandler+0x8c>
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	0a1b      	lsrs	r3, r3, #8
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 80b4 	beq.w	8009c60 <HAL_SPI_IRQHandler+0x1f4>
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	095b      	lsrs	r3, r3, #5
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 80ad 	beq.w	8009c60 <HAL_SPI_IRQHandler+0x1f4>
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	099b      	lsrs	r3, r3, #6
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d023      	beq.n	8009b5a <HAL_SPI_IRQHandler+0xee>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d011      	beq.n	8009b42 <HAL_SPI_IRQHandler+0xd6>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b22:	f043 0204 	orr.w	r2, r3, #4
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	655a      	str	r2, [r3, #84]	; 0x54
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	617b      	str	r3, [r7, #20]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	617b      	str	r3, [r7, #20]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	617b      	str	r3, [r7, #20]
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	e00b      	b.n	8009b5a <HAL_SPI_IRQHandler+0xee>
 8009b42:	2300      	movs	r3, #0
 8009b44:	613b      	str	r3, [r7, #16]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	613b      	str	r3, [r7, #16]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	613b      	str	r3, [r7, #16]
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	e082      	b.n	8009c60 <HAL_SPI_IRQHandler+0x1f4>
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	095b      	lsrs	r3, r3, #5
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d014      	beq.n	8009b90 <HAL_SPI_IRQHandler+0x124>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6a:	f043 0201 	orr.w	r2, r3, #1
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	655a      	str	r2, [r3, #84]	; 0x54
 8009b72:	2300      	movs	r3, #0
 8009b74:	60fb      	str	r3, [r7, #12]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	60fb      	str	r3, [r7, #12]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	0a1b      	lsrs	r3, r3, #8
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00c      	beq.n	8009bb6 <HAL_SPI_IRQHandler+0x14a>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba0:	f043 0208 	orr.w	r2, r3, #8
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	655a      	str	r2, [r3, #84]	; 0x54
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60bb      	str	r3, [r7, #8]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	60bb      	str	r3, [r7, #8]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d04f      	beq.n	8009c5e <HAL_SPI_IRQHandler+0x1f2>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009bcc:	605a      	str	r2, [r3, #4]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d104      	bne.n	8009bea <HAL_SPI_IRQHandler+0x17e>
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d034      	beq.n	8009c54 <HAL_SPI_IRQHandler+0x1e8>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 0203 	bic.w	r2, r2, #3
 8009bf8:	605a      	str	r2, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d011      	beq.n	8009c26 <HAL_SPI_IRQHandler+0x1ba>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c06:	4a18      	ldr	r2, [pc, #96]	; (8009c68 <HAL_SPI_IRQHandler+0x1fc>)
 8009c08:	651a      	str	r2, [r3, #80]	; 0x50
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fa fde1 	bl	80047d6 <HAL_DMA_Abort_IT>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d005      	beq.n	8009c26 <HAL_SPI_IRQHandler+0x1ba>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	655a      	str	r2, [r3, #84]	; 0x54
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d016      	beq.n	8009c5c <HAL_SPI_IRQHandler+0x1f0>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c32:	4a0d      	ldr	r2, [pc, #52]	; (8009c68 <HAL_SPI_IRQHandler+0x1fc>)
 8009c34:	651a      	str	r2, [r3, #80]	; 0x50
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fa fdcb 	bl	80047d6 <HAL_DMA_Abort_IT>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00a      	beq.n	8009c5c <HAL_SPI_IRQHandler+0x1f0>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	655a      	str	r2, [r3, #84]	; 0x54
 8009c52:	e003      	b.n	8009c5c <HAL_SPI_IRQHandler+0x1f0>
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f809 	bl	8009c6c <HAL_SPI_ErrorCallback>
 8009c5a:	e000      	b.n	8009c5e <HAL_SPI_IRQHandler+0x1f2>
 8009c5c:	bf00      	nop
 8009c5e:	bf00      	nop
 8009c60:	3720      	adds	r7, #32
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	08009c81 	.word	0x08009c81

08009c6c <HAL_SPI_ErrorCallback>:
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <SPI_DMAAbortOnError>:
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f7ff ffe6 	bl	8009c6c <HAL_SPI_ErrorCallback>
 8009ca0:	bf00      	nop
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <SPI_WaitFlagStateUntilTimeout>:
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	71fb      	strb	r3, [r7, #7]
 8009cb8:	f7fa fc4c 	bl	8004554 <HAL_GetTick>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	1a9b      	subs	r3, r3, r2
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	61fb      	str	r3, [r7, #28]
 8009cc8:	f7fa fc44 	bl	8004554 <HAL_GetTick>
 8009ccc:	61b8      	str	r0, [r7, #24]
 8009cce:	4b39      	ldr	r3, [pc, #228]	; (8009db4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	015b      	lsls	r3, r3, #5
 8009cd4:	0d1b      	lsrs	r3, r3, #20
 8009cd6:	69fa      	ldr	r2, [r7, #28]
 8009cd8:	fb02 f303 	mul.w	r3, r2, r3
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	e054      	b.n	8009d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce6:	d050      	beq.n	8009d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8009ce8:	f7fa fc34 	bl	8004554 <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	69fa      	ldr	r2, [r7, #28]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d902      	bls.n	8009cfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d13d      	bne.n	8009d7a <SPI_WaitFlagStateUntilTimeout+0xd2>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d0c:	605a      	str	r2, [r3, #4]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d16:	d111      	bne.n	8009d3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d20:	d004      	beq.n	8009d2c <SPI_WaitFlagStateUntilTimeout+0x84>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d2a:	d107      	bne.n	8009d3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d44:	d10f      	bne.n	8009d66 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009d76:	2303      	movs	r3, #3
 8009d78:	e017      	b.n	8009daa <SPI_WaitFlagStateUntilTimeout+0x102>
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8009d80:	2300      	movs	r3, #0
 8009d82:	61fb      	str	r3, [r7, #28]
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	617b      	str	r3, [r7, #20]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689a      	ldr	r2, [r3, #8]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	4013      	ands	r3, r2
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	bf0c      	ite	eq
 8009d9a:	2301      	moveq	r3, #1
 8009d9c:	2300      	movne	r3, #0
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	461a      	mov	r2, r3
 8009da2:	79fb      	ldrb	r3, [r7, #7]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d19b      	bne.n	8009ce0 <SPI_WaitFlagStateUntilTimeout+0x38>
 8009da8:	2300      	movs	r3, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	3720      	adds	r7, #32
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	20000014 	.word	0x20000014

08009db8 <SPI_EndRxTxTransaction>:
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b088      	sub	sp, #32
 8009dbc:	af02      	add	r7, sp, #8
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	4b1b      	ldr	r3, [pc, #108]	; (8009e34 <SPI_EndRxTxTransaction+0x7c>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a1b      	ldr	r2, [pc, #108]	; (8009e38 <SPI_EndRxTxTransaction+0x80>)
 8009dca:	fba2 2303 	umull	r2, r3, r2, r3
 8009dce:	0d5b      	lsrs	r3, r3, #21
 8009dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009dd4:	fb02 f303 	mul.w	r3, r2, r3
 8009dd8:	617b      	str	r3, [r7, #20]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009de2:	d112      	bne.n	8009e0a <SPI_EndRxTxTransaction+0x52>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2200      	movs	r2, #0
 8009dec:	2180      	movs	r1, #128	; 0x80
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f7ff ff5a 	bl	8009ca8 <SPI_WaitFlagStateUntilTimeout>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d016      	beq.n	8009e28 <SPI_EndRxTxTransaction+0x70>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfe:	f043 0220 	orr.w	r2, r3, #32
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	655a      	str	r2, [r3, #84]	; 0x54
 8009e06:	2303      	movs	r3, #3
 8009e08:	e00f      	b.n	8009e2a <SPI_EndRxTxTransaction+0x72>
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00a      	beq.n	8009e26 <SPI_EndRxTxTransaction+0x6e>
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	617b      	str	r3, [r7, #20]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e20:	2b80      	cmp	r3, #128	; 0x80
 8009e22:	d0f2      	beq.n	8009e0a <SPI_EndRxTxTransaction+0x52>
 8009e24:	e000      	b.n	8009e28 <SPI_EndRxTxTransaction+0x70>
 8009e26:	bf00      	nop
 8009e28:	2300      	movs	r3, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000014 	.word	0x20000014
 8009e38:	165e9f81 	.word	0x165e9f81

08009e3c <HAL_TIM_Base_Init>:
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <HAL_TIM_Base_Init+0x12>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e041      	b.n	8009ed2 <HAL_TIM_Base_Init+0x96>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d106      	bne.n	8009e68 <HAL_TIM_Base_Init+0x2c>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7fa f80a 	bl	8003e7c <HAL_TIM_Base_MspInit>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	3304      	adds	r3, #4
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	f000 fa96 	bl	800a3ac <TIM_Base_SetConfig>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <HAL_TIM_Base_Start_IT>:
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d001      	beq.n	8009ef4 <HAL_TIM_Base_Start_IT+0x18>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e04e      	b.n	8009f92 <HAL_TIM_Base_Start_IT+0xb6>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68da      	ldr	r2, [r3, #12]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f042 0201 	orr.w	r2, r2, #1
 8009f0a:	60da      	str	r2, [r3, #12]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a23      	ldr	r2, [pc, #140]	; (8009fa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d022      	beq.n	8009f5c <HAL_TIM_Base_Start_IT+0x80>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1e:	d01d      	beq.n	8009f5c <HAL_TIM_Base_Start_IT+0x80>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a1f      	ldr	r2, [pc, #124]	; (8009fa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d018      	beq.n	8009f5c <HAL_TIM_Base_Start_IT+0x80>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a1e      	ldr	r2, [pc, #120]	; (8009fa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d013      	beq.n	8009f5c <HAL_TIM_Base_Start_IT+0x80>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a1c      	ldr	r2, [pc, #112]	; (8009fac <HAL_TIM_Base_Start_IT+0xd0>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d00e      	beq.n	8009f5c <HAL_TIM_Base_Start_IT+0x80>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a1b      	ldr	r2, [pc, #108]	; (8009fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d009      	beq.n	8009f5c <HAL_TIM_Base_Start_IT+0x80>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a19      	ldr	r2, [pc, #100]	; (8009fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d004      	beq.n	8009f5c <HAL_TIM_Base_Start_IT+0x80>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a18      	ldr	r2, [pc, #96]	; (8009fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d111      	bne.n	8009f80 <HAL_TIM_Base_Start_IT+0xa4>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f003 0307 	and.w	r3, r3, #7
 8009f66:	60fb      	str	r3, [r7, #12]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b06      	cmp	r3, #6
 8009f6c:	d010      	beq.n	8009f90 <HAL_TIM_Base_Start_IT+0xb4>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f042 0201 	orr.w	r2, r2, #1
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	e007      	b.n	8009f90 <HAL_TIM_Base_Start_IT+0xb4>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f042 0201 	orr.w	r2, r2, #1
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	2300      	movs	r3, #0
 8009f92:	4618      	mov	r0, r3
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	40010000 	.word	0x40010000
 8009fa4:	40000400 	.word	0x40000400
 8009fa8:	40000800 	.word	0x40000800
 8009fac:	40000c00 	.word	0x40000c00
 8009fb0:	40010400 	.word	0x40010400
 8009fb4:	40014000 	.word	0x40014000
 8009fb8:	40001800 	.word	0x40001800

08009fbc <HAL_TIM_IRQHandler>:
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	f003 0302 	and.w	r3, r3, #2
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d122      	bne.n	800a018 <HAL_TIM_IRQHandler+0x5c>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f003 0302 	and.w	r3, r3, #2
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d11b      	bne.n	800a018 <HAL_TIM_IRQHandler+0x5c>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f06f 0202 	mvn.w	r2, #2
 8009fe8:	611a      	str	r2, [r3, #16]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	771a      	strb	r2, [r3, #28]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	f003 0303 	and.w	r3, r3, #3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d003      	beq.n	800a006 <HAL_TIM_IRQHandler+0x4a>
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f9b5 	bl	800a36e <HAL_TIM_IC_CaptureCallback>
 800a004:	e005      	b.n	800a012 <HAL_TIM_IRQHandler+0x56>
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f9a7 	bl	800a35a <HAL_TIM_OC_DelayElapsedCallback>
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f9b8 	bl	800a382 <HAL_TIM_PWM_PulseFinishedCallback>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	771a      	strb	r2, [r3, #28]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	f003 0304 	and.w	r3, r3, #4
 800a022:	2b04      	cmp	r3, #4
 800a024:	d122      	bne.n	800a06c <HAL_TIM_IRQHandler+0xb0>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	f003 0304 	and.w	r3, r3, #4
 800a030:	2b04      	cmp	r3, #4
 800a032:	d11b      	bne.n	800a06c <HAL_TIM_IRQHandler+0xb0>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f06f 0204 	mvn.w	r2, #4
 800a03c:	611a      	str	r2, [r3, #16]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2202      	movs	r2, #2
 800a042:	771a      	strb	r2, [r3, #28]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d003      	beq.n	800a05a <HAL_TIM_IRQHandler+0x9e>
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f98b 	bl	800a36e <HAL_TIM_IC_CaptureCallback>
 800a058:	e005      	b.n	800a066 <HAL_TIM_IRQHandler+0xaa>
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f97d 	bl	800a35a <HAL_TIM_OC_DelayElapsedCallback>
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f98e 	bl	800a382 <HAL_TIM_PWM_PulseFinishedCallback>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	771a      	strb	r2, [r3, #28]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	f003 0308 	and.w	r3, r3, #8
 800a076:	2b08      	cmp	r3, #8
 800a078:	d122      	bne.n	800a0c0 <HAL_TIM_IRQHandler+0x104>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f003 0308 	and.w	r3, r3, #8
 800a084:	2b08      	cmp	r3, #8
 800a086:	d11b      	bne.n	800a0c0 <HAL_TIM_IRQHandler+0x104>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f06f 0208 	mvn.w	r2, #8
 800a090:	611a      	str	r2, [r3, #16]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2204      	movs	r2, #4
 800a096:	771a      	strb	r2, [r3, #28]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	69db      	ldr	r3, [r3, #28]
 800a09e:	f003 0303 	and.w	r3, r3, #3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <HAL_TIM_IRQHandler+0xf2>
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f961 	bl	800a36e <HAL_TIM_IC_CaptureCallback>
 800a0ac:	e005      	b.n	800a0ba <HAL_TIM_IRQHandler+0xfe>
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f953 	bl	800a35a <HAL_TIM_OC_DelayElapsedCallback>
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f964 	bl	800a382 <HAL_TIM_PWM_PulseFinishedCallback>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	771a      	strb	r2, [r3, #28]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	f003 0310 	and.w	r3, r3, #16
 800a0ca:	2b10      	cmp	r3, #16
 800a0cc:	d122      	bne.n	800a114 <HAL_TIM_IRQHandler+0x158>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	f003 0310 	and.w	r3, r3, #16
 800a0d8:	2b10      	cmp	r3, #16
 800a0da:	d11b      	bne.n	800a114 <HAL_TIM_IRQHandler+0x158>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f06f 0210 	mvn.w	r2, #16
 800a0e4:	611a      	str	r2, [r3, #16]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2208      	movs	r2, #8
 800a0ea:	771a      	strb	r2, [r3, #28]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d003      	beq.n	800a102 <HAL_TIM_IRQHandler+0x146>
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f937 	bl	800a36e <HAL_TIM_IC_CaptureCallback>
 800a100:	e005      	b.n	800a10e <HAL_TIM_IRQHandler+0x152>
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f929 	bl	800a35a <HAL_TIM_OC_DelayElapsedCallback>
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f93a 	bl	800a382 <HAL_TIM_PWM_PulseFinishedCallback>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	771a      	strb	r2, [r3, #28]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d10e      	bne.n	800a140 <HAL_TIM_IRQHandler+0x184>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	f003 0301 	and.w	r3, r3, #1
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d107      	bne.n	800a140 <HAL_TIM_IRQHandler+0x184>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f06f 0201 	mvn.w	r2, #1
 800a138:	611a      	str	r2, [r3, #16]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7f9 f8e2 	bl	8003304 <HAL_TIM_PeriodElapsedCallback>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14a:	2b80      	cmp	r3, #128	; 0x80
 800a14c:	d10e      	bne.n	800a16c <HAL_TIM_IRQHandler+0x1b0>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a158:	2b80      	cmp	r3, #128	; 0x80
 800a15a:	d107      	bne.n	800a16c <HAL_TIM_IRQHandler+0x1b0>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a164:	611a      	str	r2, [r3, #16]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fae0 	bl	800a72c <HAL_TIMEx_BreakCallback>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a176:	2b40      	cmp	r3, #64	; 0x40
 800a178:	d10e      	bne.n	800a198 <HAL_TIM_IRQHandler+0x1dc>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a184:	2b40      	cmp	r3, #64	; 0x40
 800a186:	d107      	bne.n	800a198 <HAL_TIM_IRQHandler+0x1dc>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a190:	611a      	str	r2, [r3, #16]
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f8ff 	bl	800a396 <HAL_TIM_TriggerCallback>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	f003 0320 	and.w	r3, r3, #32
 800a1a2:	2b20      	cmp	r3, #32
 800a1a4:	d10e      	bne.n	800a1c4 <HAL_TIM_IRQHandler+0x208>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	f003 0320 	and.w	r3, r3, #32
 800a1b0:	2b20      	cmp	r3, #32
 800a1b2:	d107      	bne.n	800a1c4 <HAL_TIM_IRQHandler+0x208>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f06f 0220 	mvn.w	r2, #32
 800a1bc:	611a      	str	r2, [r3, #16]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 faaa 	bl	800a718 <HAL_TIMEx_CommutCallback>
 800a1c4:	bf00      	nop
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <HAL_TIM_ConfigClockSource>:
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	73fb      	strb	r3, [r7, #15]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d101      	bne.n	800a1e8 <HAL_TIM_ConfigClockSource+0x1c>
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e0b4      	b.n	800a352 <HAL_TIM_ConfigClockSource+0x186>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	60bb      	str	r3, [r7, #8]
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a206:	60bb      	str	r3, [r7, #8]
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a20e:	60bb      	str	r3, [r7, #8]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	609a      	str	r2, [r3, #8]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a220:	d03e      	beq.n	800a2a0 <HAL_TIM_ConfigClockSource+0xd4>
 800a222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a226:	f200 8087 	bhi.w	800a338 <HAL_TIM_ConfigClockSource+0x16c>
 800a22a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a22e:	f000 8086 	beq.w	800a33e <HAL_TIM_ConfigClockSource+0x172>
 800a232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a236:	d87f      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x16c>
 800a238:	2b70      	cmp	r3, #112	; 0x70
 800a23a:	d01a      	beq.n	800a272 <HAL_TIM_ConfigClockSource+0xa6>
 800a23c:	2b70      	cmp	r3, #112	; 0x70
 800a23e:	d87b      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x16c>
 800a240:	2b60      	cmp	r3, #96	; 0x60
 800a242:	d050      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x11a>
 800a244:	2b60      	cmp	r3, #96	; 0x60
 800a246:	d877      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x16c>
 800a248:	2b50      	cmp	r3, #80	; 0x50
 800a24a:	d03c      	beq.n	800a2c6 <HAL_TIM_ConfigClockSource+0xfa>
 800a24c:	2b50      	cmp	r3, #80	; 0x50
 800a24e:	d873      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x16c>
 800a250:	2b40      	cmp	r3, #64	; 0x40
 800a252:	d058      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0x13a>
 800a254:	2b40      	cmp	r3, #64	; 0x40
 800a256:	d86f      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x16c>
 800a258:	2b30      	cmp	r3, #48	; 0x30
 800a25a:	d064      	beq.n	800a326 <HAL_TIM_ConfigClockSource+0x15a>
 800a25c:	2b30      	cmp	r3, #48	; 0x30
 800a25e:	d86b      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x16c>
 800a260:	2b20      	cmp	r3, #32
 800a262:	d060      	beq.n	800a326 <HAL_TIM_ConfigClockSource+0x15a>
 800a264:	2b20      	cmp	r3, #32
 800a266:	d867      	bhi.n	800a338 <HAL_TIM_ConfigClockSource+0x16c>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d05c      	beq.n	800a326 <HAL_TIM_ConfigClockSource+0x15a>
 800a26c:	2b10      	cmp	r3, #16
 800a26e:	d05a      	beq.n	800a326 <HAL_TIM_ConfigClockSource+0x15a>
 800a270:	e062      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x16c>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6818      	ldr	r0, [r3, #0]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	6899      	ldr	r1, [r3, #8]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	f000 f9ad 	bl	800a5e0 <TIM_ETR_SetConfig>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	60bb      	str	r3, [r7, #8]
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a294:	60bb      	str	r3, [r7, #8]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	609a      	str	r2, [r3, #8]
 800a29e:	e04f      	b.n	800a340 <HAL_TIM_ConfigClockSource+0x174>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6818      	ldr	r0, [r3, #0]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	6899      	ldr	r1, [r3, #8]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	f000 f996 	bl	800a5e0 <TIM_ETR_SetConfig>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689a      	ldr	r2, [r3, #8]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2c2:	609a      	str	r2, [r3, #8]
 800a2c4:	e03c      	b.n	800a340 <HAL_TIM_ConfigClockSource+0x174>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	6859      	ldr	r1, [r3, #4]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f000 f90a 	bl	800a4ec <TIM_TI1_ConfigInputStage>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2150      	movs	r1, #80	; 0x50
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 f963 	bl	800a5aa <TIM_ITRx_SetConfig>
 800a2e4:	e02c      	b.n	800a340 <HAL_TIM_ConfigClockSource+0x174>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6818      	ldr	r0, [r3, #0]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	6859      	ldr	r1, [r3, #4]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f000 f929 	bl	800a54a <TIM_TI2_ConfigInputStage>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2160      	movs	r1, #96	; 0x60
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 f953 	bl	800a5aa <TIM_ITRx_SetConfig>
 800a304:	e01c      	b.n	800a340 <HAL_TIM_ConfigClockSource+0x174>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6818      	ldr	r0, [r3, #0]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	6859      	ldr	r1, [r3, #4]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	461a      	mov	r2, r3
 800a314:	f000 f8ea 	bl	800a4ec <TIM_TI1_ConfigInputStage>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2140      	movs	r1, #64	; 0x40
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 f943 	bl	800a5aa <TIM_ITRx_SetConfig>
 800a324:	e00c      	b.n	800a340 <HAL_TIM_ConfigClockSource+0x174>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4619      	mov	r1, r3
 800a330:	4610      	mov	r0, r2
 800a332:	f000 f93a 	bl	800a5aa <TIM_ITRx_SetConfig>
 800a336:	e003      	b.n	800a340 <HAL_TIM_ConfigClockSource+0x174>
 800a338:	2301      	movs	r3, #1
 800a33a:	73fb      	strb	r3, [r7, #15]
 800a33c:	e000      	b.n	800a340 <HAL_TIM_ConfigClockSource+0x174>
 800a33e:	bf00      	nop
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <HAL_TIM_OC_DelayElapsedCallback>:
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	bf00      	nop
 800a364:	370c      	adds	r7, #12
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <HAL_TIM_IC_CaptureCallback>:
 800a36e:	b480      	push	{r7}
 800a370:	b083      	sub	sp, #12
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	bf00      	nop
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a382:	b480      	push	{r7}
 800a384:	b083      	sub	sp, #12
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	bf00      	nop
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <HAL_TIM_TriggerCallback>:
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	bf00      	nop
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
	...

0800a3ac <TIM_Base_SetConfig>:
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a40      	ldr	r2, [pc, #256]	; (800a4c0 <TIM_Base_SetConfig+0x114>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d013      	beq.n	800a3ec <TIM_Base_SetConfig+0x40>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ca:	d00f      	beq.n	800a3ec <TIM_Base_SetConfig+0x40>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a3d      	ldr	r2, [pc, #244]	; (800a4c4 <TIM_Base_SetConfig+0x118>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d00b      	beq.n	800a3ec <TIM_Base_SetConfig+0x40>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a3c      	ldr	r2, [pc, #240]	; (800a4c8 <TIM_Base_SetConfig+0x11c>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d007      	beq.n	800a3ec <TIM_Base_SetConfig+0x40>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a3b      	ldr	r2, [pc, #236]	; (800a4cc <TIM_Base_SetConfig+0x120>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d003      	beq.n	800a3ec <TIM_Base_SetConfig+0x40>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a3a      	ldr	r2, [pc, #232]	; (800a4d0 <TIM_Base_SetConfig+0x124>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d108      	bne.n	800a3fe <TIM_Base_SetConfig+0x52>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3f2:	60fb      	str	r3, [r7, #12]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	60fb      	str	r3, [r7, #12]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a2f      	ldr	r2, [pc, #188]	; (800a4c0 <TIM_Base_SetConfig+0x114>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d02b      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a40c:	d027      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a2c      	ldr	r2, [pc, #176]	; (800a4c4 <TIM_Base_SetConfig+0x118>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d023      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a2b      	ldr	r2, [pc, #172]	; (800a4c8 <TIM_Base_SetConfig+0x11c>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d01f      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a2a      	ldr	r2, [pc, #168]	; (800a4cc <TIM_Base_SetConfig+0x120>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d01b      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a29      	ldr	r2, [pc, #164]	; (800a4d0 <TIM_Base_SetConfig+0x124>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d017      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a28      	ldr	r2, [pc, #160]	; (800a4d4 <TIM_Base_SetConfig+0x128>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d013      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a27      	ldr	r2, [pc, #156]	; (800a4d8 <TIM_Base_SetConfig+0x12c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d00f      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a26      	ldr	r2, [pc, #152]	; (800a4dc <TIM_Base_SetConfig+0x130>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d00b      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a25      	ldr	r2, [pc, #148]	; (800a4e0 <TIM_Base_SetConfig+0x134>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d007      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a24      	ldr	r2, [pc, #144]	; (800a4e4 <TIM_Base_SetConfig+0x138>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d003      	beq.n	800a45e <TIM_Base_SetConfig+0xb2>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a23      	ldr	r2, [pc, #140]	; (800a4e8 <TIM_Base_SetConfig+0x13c>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d108      	bne.n	800a470 <TIM_Base_SetConfig+0xc4>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	689a      	ldr	r2, [r3, #8]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	62da      	str	r2, [r3, #44]	; 0x2c
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	629a      	str	r2, [r3, #40]	; 0x28
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a0a      	ldr	r2, [pc, #40]	; (800a4c0 <TIM_Base_SetConfig+0x114>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d003      	beq.n	800a4a4 <TIM_Base_SetConfig+0xf8>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a0c      	ldr	r2, [pc, #48]	; (800a4d0 <TIM_Base_SetConfig+0x124>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d103      	bne.n	800a4ac <TIM_Base_SetConfig+0x100>
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	691a      	ldr	r2, [r3, #16]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	631a      	str	r2, [r3, #48]	; 0x30
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	615a      	str	r2, [r3, #20]
 800a4b2:	bf00      	nop
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	40010000 	.word	0x40010000
 800a4c4:	40000400 	.word	0x40000400
 800a4c8:	40000800 	.word	0x40000800
 800a4cc:	40000c00 	.word	0x40000c00
 800a4d0:	40010400 	.word	0x40010400
 800a4d4:	40014000 	.word	0x40014000
 800a4d8:	40014400 	.word	0x40014400
 800a4dc:	40014800 	.word	0x40014800
 800a4e0:	40001800 	.word	0x40001800
 800a4e4:	40001c00 	.word	0x40001c00
 800a4e8:	40002000 	.word	0x40002000

0800a4ec <TIM_TI1_ConfigInputStage>:
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6a1b      	ldr	r3, [r3, #32]
 800a4fc:	617b      	str	r3, [r7, #20]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	f023 0201 	bic.w	r2, r3, #1
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	621a      	str	r2, [r3, #32]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	613b      	str	r3, [r7, #16]
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a516:	613b      	str	r3, [r7, #16]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	011b      	lsls	r3, r3, #4
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	4313      	orrs	r3, r2
 800a520:	613b      	str	r3, [r7, #16]
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f023 030a 	bic.w	r3, r3, #10
 800a528:	617b      	str	r3, [r7, #20]
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	4313      	orrs	r3, r2
 800a530:	617b      	str	r3, [r7, #20]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	619a      	str	r2, [r3, #24]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	621a      	str	r2, [r3, #32]
 800a53e:	bf00      	nop
 800a540:	371c      	adds	r7, #28
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <TIM_TI2_ConfigInputStage>:
 800a54a:	b480      	push	{r7}
 800a54c:	b087      	sub	sp, #28
 800a54e:	af00      	add	r7, sp, #0
 800a550:	60f8      	str	r0, [r7, #12]
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	607a      	str	r2, [r7, #4]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	f023 0210 	bic.w	r2, r3, #16
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	621a      	str	r2, [r3, #32]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	617b      	str	r3, [r7, #20]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	613b      	str	r3, [r7, #16]
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a574:	617b      	str	r3, [r7, #20]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	031b      	lsls	r3, r3, #12
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	617b      	str	r3, [r7, #20]
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a586:	613b      	str	r3, [r7, #16]
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	011b      	lsls	r3, r3, #4
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	4313      	orrs	r3, r2
 800a590:	613b      	str	r3, [r7, #16]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	619a      	str	r2, [r3, #24]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	693a      	ldr	r2, [r7, #16]
 800a59c:	621a      	str	r2, [r3, #32]
 800a59e:	bf00      	nop
 800a5a0:	371c      	adds	r7, #28
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <TIM_ITRx_SetConfig>:
 800a5aa:	b480      	push	{r7}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	60fb      	str	r3, [r7, #12]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c0:	60fb      	str	r3, [r7, #12]
 800a5c2:	683a      	ldr	r2, [r7, #0]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	f043 0307 	orr.w	r3, r3, #7
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	609a      	str	r2, [r3, #8]
 800a5d4:	bf00      	nop
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <TIM_ETR_SetConfig>:
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5fa:	617b      	str	r3, [r7, #20]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	021a      	lsls	r2, r3, #8
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	431a      	orrs	r2, r3
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	4313      	orrs	r3, r2
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	617b      	str	r3, [r7, #20]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	609a      	str	r2, [r3, #8]
 800a614:	bf00      	nop
 800a616:	371c      	adds	r7, #28
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_TIMEx_MasterConfigSynchronization>:
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a634:	2302      	movs	r3, #2
 800a636:	e05a      	b.n	800a6ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2202      	movs	r2, #2
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	60fb      	str	r3, [r7, #12]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	60bb      	str	r3, [r7, #8]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a65e:	60fb      	str	r3, [r7, #12]
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	605a      	str	r2, [r3, #4]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a21      	ldr	r2, [pc, #132]	; (800a6fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d022      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a684:	d01d      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a1d      	ldr	r2, [pc, #116]	; (800a700 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d018      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a1b      	ldr	r2, [pc, #108]	; (800a704 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d013      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a1a      	ldr	r2, [pc, #104]	; (800a708 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d00e      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a18      	ldr	r2, [pc, #96]	; (800a70c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d009      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a17      	ldr	r2, [pc, #92]	; (800a710 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d004      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a15      	ldr	r2, [pc, #84]	; (800a714 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d10c      	bne.n	800a6dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6c8:	60bb      	str	r3, [r7, #8]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	60bb      	str	r3, [r7, #8]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	609a      	str	r2, [r3, #8]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	40010000 	.word	0x40010000
 800a700:	40000400 	.word	0x40000400
 800a704:	40000800 	.word	0x40000800
 800a708:	40000c00 	.word	0x40000c00
 800a70c:	40010400 	.word	0x40010400
 800a710:	40014000 	.word	0x40014000
 800a714:	40001800 	.word	0x40001800

0800a718 <HAL_TIMEx_CommutCallback>:
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <HAL_TIMEx_BreakCallback>:
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <USB_CoreInit>:
 800a740:	b084      	sub	sp, #16
 800a742:	b580      	push	{r7, lr}
 800a744:	b084      	sub	sp, #16
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	f107 001c 	add.w	r0, r7, #28
 800a74e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	2b01      	cmp	r3, #1
 800a756:	d122      	bne.n	800a79e <USB_CoreInit+0x5e>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	639a      	str	r2, [r3, #56]	; 0x38
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a76c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	60d3      	str	r3, [r2, #12]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	60da      	str	r2, [r3, #12]
 800a780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a782:	2b01      	cmp	r3, #1
 800a784:	d105      	bne.n	800a792 <USB_CoreInit+0x52>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	60da      	str	r2, [r3, #12]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f001 fbee 	bl	800bf74 <USB_CoreReset>
 800a798:	4603      	mov	r3, r0
 800a79a:	73fb      	strb	r3, [r7, #15]
 800a79c:	e01a      	b.n	800a7d4 <USB_CoreInit+0x94>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	60da      	str	r2, [r3, #12]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f001 fbe2 	bl	800bf74 <USB_CoreReset>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	73fb      	strb	r3, [r7, #15]
 800a7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d106      	bne.n	800a7c8 <USB_CoreInit+0x88>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	639a      	str	r2, [r3, #56]	; 0x38
 800a7c6:	e005      	b.n	800a7d4 <USB_CoreInit+0x94>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	639a      	str	r2, [r3, #56]	; 0x38
 800a7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d10b      	bne.n	800a7f2 <USB_CoreInit+0xb2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f043 0206 	orr.w	r2, r3, #6
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	609a      	str	r2, [r3, #8]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	f043 0220 	orr.w	r2, r3, #32
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	609a      	str	r2, [r3, #8]
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7fe:	b004      	add	sp, #16
 800a800:	4770      	bx	lr
	...

0800a804 <USB_SetTurnaroundTime>:
 800a804:	b480      	push	{r7}
 800a806:	b087      	sub	sp, #28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	4613      	mov	r3, r2
 800a810:	71fb      	strb	r3, [r7, #7]
 800a812:	79fb      	ldrb	r3, [r7, #7]
 800a814:	2b02      	cmp	r3, #2
 800a816:	d165      	bne.n	800a8e4 <USB_SetTurnaroundTime+0xe0>
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	4a41      	ldr	r2, [pc, #260]	; (800a920 <USB_SetTurnaroundTime+0x11c>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d906      	bls.n	800a82e <USB_SetTurnaroundTime+0x2a>
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	4a40      	ldr	r2, [pc, #256]	; (800a924 <USB_SetTurnaroundTime+0x120>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d202      	bcs.n	800a82e <USB_SetTurnaroundTime+0x2a>
 800a828:	230f      	movs	r3, #15
 800a82a:	617b      	str	r3, [r7, #20]
 800a82c:	e062      	b.n	800a8f4 <USB_SetTurnaroundTime+0xf0>
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	4a3c      	ldr	r2, [pc, #240]	; (800a924 <USB_SetTurnaroundTime+0x120>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d306      	bcc.n	800a844 <USB_SetTurnaroundTime+0x40>
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	4a3b      	ldr	r2, [pc, #236]	; (800a928 <USB_SetTurnaroundTime+0x124>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d202      	bcs.n	800a844 <USB_SetTurnaroundTime+0x40>
 800a83e:	230e      	movs	r3, #14
 800a840:	617b      	str	r3, [r7, #20]
 800a842:	e057      	b.n	800a8f4 <USB_SetTurnaroundTime+0xf0>
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	4a38      	ldr	r2, [pc, #224]	; (800a928 <USB_SetTurnaroundTime+0x124>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d306      	bcc.n	800a85a <USB_SetTurnaroundTime+0x56>
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	4a37      	ldr	r2, [pc, #220]	; (800a92c <USB_SetTurnaroundTime+0x128>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d202      	bcs.n	800a85a <USB_SetTurnaroundTime+0x56>
 800a854:	230d      	movs	r3, #13
 800a856:	617b      	str	r3, [r7, #20]
 800a858:	e04c      	b.n	800a8f4 <USB_SetTurnaroundTime+0xf0>
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	4a33      	ldr	r2, [pc, #204]	; (800a92c <USB_SetTurnaroundTime+0x128>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d306      	bcc.n	800a870 <USB_SetTurnaroundTime+0x6c>
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	4a32      	ldr	r2, [pc, #200]	; (800a930 <USB_SetTurnaroundTime+0x12c>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d802      	bhi.n	800a870 <USB_SetTurnaroundTime+0x6c>
 800a86a:	230c      	movs	r3, #12
 800a86c:	617b      	str	r3, [r7, #20]
 800a86e:	e041      	b.n	800a8f4 <USB_SetTurnaroundTime+0xf0>
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	4a2f      	ldr	r2, [pc, #188]	; (800a930 <USB_SetTurnaroundTime+0x12c>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d906      	bls.n	800a886 <USB_SetTurnaroundTime+0x82>
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	4a2e      	ldr	r2, [pc, #184]	; (800a934 <USB_SetTurnaroundTime+0x130>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d802      	bhi.n	800a886 <USB_SetTurnaroundTime+0x82>
 800a880:	230b      	movs	r3, #11
 800a882:	617b      	str	r3, [r7, #20]
 800a884:	e036      	b.n	800a8f4 <USB_SetTurnaroundTime+0xf0>
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	4a2a      	ldr	r2, [pc, #168]	; (800a934 <USB_SetTurnaroundTime+0x130>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d906      	bls.n	800a89c <USB_SetTurnaroundTime+0x98>
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	4a29      	ldr	r2, [pc, #164]	; (800a938 <USB_SetTurnaroundTime+0x134>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d802      	bhi.n	800a89c <USB_SetTurnaroundTime+0x98>
 800a896:	230a      	movs	r3, #10
 800a898:	617b      	str	r3, [r7, #20]
 800a89a:	e02b      	b.n	800a8f4 <USB_SetTurnaroundTime+0xf0>
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	4a26      	ldr	r2, [pc, #152]	; (800a938 <USB_SetTurnaroundTime+0x134>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d906      	bls.n	800a8b2 <USB_SetTurnaroundTime+0xae>
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	4a25      	ldr	r2, [pc, #148]	; (800a93c <USB_SetTurnaroundTime+0x138>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d202      	bcs.n	800a8b2 <USB_SetTurnaroundTime+0xae>
 800a8ac:	2309      	movs	r3, #9
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	e020      	b.n	800a8f4 <USB_SetTurnaroundTime+0xf0>
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	4a21      	ldr	r2, [pc, #132]	; (800a93c <USB_SetTurnaroundTime+0x138>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d306      	bcc.n	800a8c8 <USB_SetTurnaroundTime+0xc4>
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	4a20      	ldr	r2, [pc, #128]	; (800a940 <USB_SetTurnaroundTime+0x13c>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d802      	bhi.n	800a8c8 <USB_SetTurnaroundTime+0xc4>
 800a8c2:	2308      	movs	r3, #8
 800a8c4:	617b      	str	r3, [r7, #20]
 800a8c6:	e015      	b.n	800a8f4 <USB_SetTurnaroundTime+0xf0>
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	4a1d      	ldr	r2, [pc, #116]	; (800a940 <USB_SetTurnaroundTime+0x13c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d906      	bls.n	800a8de <USB_SetTurnaroundTime+0xda>
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	4a1c      	ldr	r2, [pc, #112]	; (800a944 <USB_SetTurnaroundTime+0x140>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d202      	bcs.n	800a8de <USB_SetTurnaroundTime+0xda>
 800a8d8:	2307      	movs	r3, #7
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	e00a      	b.n	800a8f4 <USB_SetTurnaroundTime+0xf0>
 800a8de:	2306      	movs	r3, #6
 800a8e0:	617b      	str	r3, [r7, #20]
 800a8e2:	e007      	b.n	800a8f4 <USB_SetTurnaroundTime+0xf0>
 800a8e4:	79fb      	ldrb	r3, [r7, #7]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d102      	bne.n	800a8f0 <USB_SetTurnaroundTime+0xec>
 800a8ea:	2309      	movs	r3, #9
 800a8ec:	617b      	str	r3, [r7, #20]
 800a8ee:	e001      	b.n	800a8f4 <USB_SetTurnaroundTime+0xf0>
 800a8f0:	2309      	movs	r3, #9
 800a8f2:	617b      	str	r3, [r7, #20]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	60da      	str	r2, [r3, #12]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	68da      	ldr	r2, [r3, #12]
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	029b      	lsls	r3, r3, #10
 800a908:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a90c:	431a      	orrs	r2, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	60da      	str	r2, [r3, #12]
 800a912:	2300      	movs	r3, #0
 800a914:	4618      	mov	r0, r3
 800a916:	371c      	adds	r7, #28
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	00d8acbf 	.word	0x00d8acbf
 800a924:	00e4e1c0 	.word	0x00e4e1c0
 800a928:	00f42400 	.word	0x00f42400
 800a92c:	01067380 	.word	0x01067380
 800a930:	011a499f 	.word	0x011a499f
 800a934:	01312cff 	.word	0x01312cff
 800a938:	014ca43f 	.word	0x014ca43f
 800a93c:	016e3600 	.word	0x016e3600
 800a940:	01a6ab1f 	.word	0x01a6ab1f
 800a944:	01e84800 	.word	0x01e84800

0800a948 <USB_EnableGlobalInt>:
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f043 0201 	orr.w	r2, r3, #1
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	609a      	str	r2, [r3, #8]
 800a95c:	2300      	movs	r3, #0
 800a95e:	4618      	mov	r0, r3
 800a960:	370c      	adds	r7, #12
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <USB_DisableGlobalInt>:
 800a96a:	b480      	push	{r7}
 800a96c:	b083      	sub	sp, #12
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f023 0201 	bic.w	r2, r3, #1
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	609a      	str	r2, [r3, #8]
 800a97e:	2300      	movs	r3, #0
 800a980:	4618      	mov	r0, r3
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <USB_SetCurrentMode>:
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	70fb      	strb	r3, [r7, #3]
 800a998:	2300      	movs	r3, #0
 800a99a:	60fb      	str	r3, [r7, #12]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	60da      	str	r2, [r3, #12]
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d115      	bne.n	800a9da <USB_SetCurrentMode+0x4e>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	60da      	str	r2, [r3, #12]
 800a9ba:	2001      	movs	r0, #1
 800a9bc:	f7f9 fdd6 	bl	800456c <HAL_Delay>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	60fb      	str	r3, [r7, #12]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f001 fa45 	bl	800be56 <USB_GetMode>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d01e      	beq.n	800aa10 <USB_SetCurrentMode+0x84>
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2b31      	cmp	r3, #49	; 0x31
 800a9d6:	d9f0      	bls.n	800a9ba <USB_SetCurrentMode+0x2e>
 800a9d8:	e01a      	b.n	800aa10 <USB_SetCurrentMode+0x84>
 800a9da:	78fb      	ldrb	r3, [r7, #3]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d115      	bne.n	800aa0c <USB_SetCurrentMode+0x80>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	60da      	str	r2, [r3, #12]
 800a9ec:	2001      	movs	r0, #1
 800a9ee:	f7f9 fdbd 	bl	800456c <HAL_Delay>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f001 fa2c 	bl	800be56 <USB_GetMode>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d005      	beq.n	800aa10 <USB_SetCurrentMode+0x84>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2b31      	cmp	r3, #49	; 0x31
 800aa08:	d9f0      	bls.n	800a9ec <USB_SetCurrentMode+0x60>
 800aa0a:	e001      	b.n	800aa10 <USB_SetCurrentMode+0x84>
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e005      	b.n	800aa1c <USB_SetCurrentMode+0x90>
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b32      	cmp	r3, #50	; 0x32
 800aa14:	d101      	bne.n	800aa1a <USB_SetCurrentMode+0x8e>
 800aa16:	2301      	movs	r3, #1
 800aa18:	e000      	b.n	800aa1c <USB_SetCurrentMode+0x90>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USB_DevInit>:
 800aa24:	b084      	sub	sp, #16
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b086      	sub	sp, #24
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800aa36:	2300      	movs	r3, #0
 800aa38:	75fb      	strb	r3, [r7, #23]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	613b      	str	r3, [r7, #16]
 800aa42:	e009      	b.n	800aa58 <USB_DevInit+0x34>
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	3340      	adds	r3, #64	; 0x40
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	4413      	add	r3, r2
 800aa4e:	2200      	movs	r2, #0
 800aa50:	605a      	str	r2, [r3, #4]
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	3301      	adds	r3, #1
 800aa56:	613b      	str	r3, [r7, #16]
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	2b0e      	cmp	r3, #14
 800aa5c:	d9f2      	bls.n	800aa44 <USB_DevInit+0x20>
 800aa5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d11c      	bne.n	800aa9e <USB_DevInit+0x7a>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa72:	f043 0302 	orr.w	r3, r3, #2
 800aa76:	6053      	str	r3, [r2, #4]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	639a      	str	r2, [r3, #56]	; 0x38
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa88:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	639a      	str	r2, [r3, #56]	; 0x38
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa94:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	639a      	str	r2, [r3, #56]	; 0x38
 800aa9c:	e00b      	b.n	800aab6 <USB_DevInit+0x92>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	639a      	str	r2, [r3, #56]	; 0x38
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	639a      	str	r2, [r3, #56]	; 0x38
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aabc:	461a      	mov	r2, r3
 800aabe:	2300      	movs	r3, #0
 800aac0:	6013      	str	r3, [r2, #0]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac8:	4619      	mov	r1, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad0:	461a      	mov	r2, r3
 800aad2:	680b      	ldr	r3, [r1, #0]
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d10c      	bne.n	800aaf6 <USB_DevInit+0xd2>
 800aadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d104      	bne.n	800aaec <USB_DevInit+0xc8>
 800aae2:	2100      	movs	r1, #0
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f965 	bl	800adb4 <USB_SetDevSpeed>
 800aaea:	e008      	b.n	800aafe <USB_DevInit+0xda>
 800aaec:	2101      	movs	r1, #1
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f960 	bl	800adb4 <USB_SetDevSpeed>
 800aaf4:	e003      	b.n	800aafe <USB_DevInit+0xda>
 800aaf6:	2103      	movs	r1, #3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f95b 	bl	800adb4 <USB_SetDevSpeed>
 800aafe:	2110      	movs	r1, #16
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f8f3 	bl	800acec <USB_FlushTxFifo>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <USB_DevInit+0xec>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	75fb      	strb	r3, [r7, #23]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f91f 	bl	800ad54 <USB_FlushRxFifo>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <USB_DevInit+0xfc>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	75fb      	strb	r3, [r7, #23]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab26:	461a      	mov	r2, r3
 800ab28:	2300      	movs	r3, #0
 800ab2a:	6113      	str	r3, [r2, #16]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab32:	461a      	mov	r2, r3
 800ab34:	2300      	movs	r3, #0
 800ab36:	6153      	str	r3, [r2, #20]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab3e:	461a      	mov	r2, r3
 800ab40:	2300      	movs	r3, #0
 800ab42:	61d3      	str	r3, [r2, #28]
 800ab44:	2300      	movs	r3, #0
 800ab46:	613b      	str	r3, [r7, #16]
 800ab48:	e043      	b.n	800abd2 <USB_DevInit+0x1ae>
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	015a      	lsls	r2, r3, #5
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	4413      	add	r3, r2
 800ab52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab60:	d118      	bne.n	800ab94 <USB_DevInit+0x170>
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10a      	bne.n	800ab7e <USB_DevInit+0x15a>
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	015a      	lsls	r2, r3, #5
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4413      	add	r3, r2
 800ab70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab74:	461a      	mov	r2, r3
 800ab76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab7a:	6013      	str	r3, [r2, #0]
 800ab7c:	e013      	b.n	800aba6 <USB_DevInit+0x182>
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	015a      	lsls	r2, r3, #5
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	4413      	add	r3, r2
 800ab86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab90:	6013      	str	r3, [r2, #0]
 800ab92:	e008      	b.n	800aba6 <USB_DevInit+0x182>
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	015a      	lsls	r2, r3, #5
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba0:	461a      	mov	r2, r3
 800aba2:	2300      	movs	r3, #0
 800aba4:	6013      	str	r3, [r2, #0]
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	015a      	lsls	r2, r3, #5
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	4413      	add	r3, r2
 800abae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb2:	461a      	mov	r2, r3
 800abb4:	2300      	movs	r3, #0
 800abb6:	6113      	str	r3, [r2, #16]
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc4:	461a      	mov	r2, r3
 800abc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800abca:	6093      	str	r3, [r2, #8]
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	3301      	adds	r3, #1
 800abd0:	613b      	str	r3, [r7, #16]
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d3b7      	bcc.n	800ab4a <USB_DevInit+0x126>
 800abda:	2300      	movs	r3, #0
 800abdc:	613b      	str	r3, [r7, #16]
 800abde:	e043      	b.n	800ac68 <USB_DevInit+0x244>
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abf6:	d118      	bne.n	800ac2a <USB_DevInit+0x206>
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10a      	bne.n	800ac14 <USB_DevInit+0x1f0>
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	015a      	lsls	r2, r3, #5
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4413      	add	r3, r2
 800ac06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac10:	6013      	str	r3, [r2, #0]
 800ac12:	e013      	b.n	800ac3c <USB_DevInit+0x218>
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac20:	461a      	mov	r2, r3
 800ac22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac26:	6013      	str	r3, [r2, #0]
 800ac28:	e008      	b.n	800ac3c <USB_DevInit+0x218>
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	015a      	lsls	r2, r3, #5
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	4413      	add	r3, r2
 800ac32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac36:	461a      	mov	r2, r3
 800ac38:	2300      	movs	r3, #0
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	015a      	lsls	r2, r3, #5
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	4413      	add	r3, r2
 800ac44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac48:	461a      	mov	r2, r3
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	6113      	str	r3, [r2, #16]
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	015a      	lsls	r2, r3, #5
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac60:	6093      	str	r3, [r2, #8]
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	3301      	adds	r3, #1
 800ac66:	613b      	str	r3, [r7, #16]
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d3b7      	bcc.n	800abe0 <USB_DevInit+0x1bc>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac82:	6113      	str	r3, [r2, #16]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	619a      	str	r2, [r3, #24]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ac90:	615a      	str	r2, [r3, #20]
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d105      	bne.n	800aca4 <USB_DevInit+0x280>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	699b      	ldr	r3, [r3, #24]
 800ac9c:	f043 0210 	orr.w	r2, r3, #16
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	619a      	str	r2, [r3, #24]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	699a      	ldr	r2, [r3, #24]
 800aca8:	4b0f      	ldr	r3, [pc, #60]	; (800ace8 <USB_DevInit+0x2c4>)
 800acaa:	4313      	orrs	r3, r2
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	6193      	str	r3, [r2, #24]
 800acb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d005      	beq.n	800acc2 <USB_DevInit+0x29e>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	f043 0208 	orr.w	r2, r3, #8
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	619a      	str	r2, [r3, #24]
 800acc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d107      	bne.n	800acd8 <USB_DevInit+0x2b4>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acd0:	f043 0304 	orr.w	r3, r3, #4
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	6193      	str	r3, [r2, #24]
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ace4:	b004      	add	sp, #16
 800ace6:	4770      	bx	lr
 800ace8:	803c3800 	.word	0x803c3800

0800acec <USB_FlushTxFifo>:
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3301      	adds	r3, #1
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4a13      	ldr	r2, [pc, #76]	; (800ad50 <USB_FlushTxFifo+0x64>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d901      	bls.n	800ad0c <USB_FlushTxFifo+0x20>
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e01b      	b.n	800ad44 <USB_FlushTxFifo+0x58>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	daf2      	bge.n	800acfa <USB_FlushTxFifo+0xe>
 800ad14:	2300      	movs	r3, #0
 800ad16:	60fb      	str	r3, [r7, #12]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	019b      	lsls	r3, r3, #6
 800ad1c:	f043 0220 	orr.w	r2, r3, #32
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	611a      	str	r2, [r3, #16]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3301      	adds	r3, #1
 800ad28:	60fb      	str	r3, [r7, #12]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	4a08      	ldr	r2, [pc, #32]	; (800ad50 <USB_FlushTxFifo+0x64>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d901      	bls.n	800ad36 <USB_FlushTxFifo+0x4a>
 800ad32:	2303      	movs	r3, #3
 800ad34:	e006      	b.n	800ad44 <USB_FlushTxFifo+0x58>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	f003 0320 	and.w	r3, r3, #32
 800ad3e:	2b20      	cmp	r3, #32
 800ad40:	d0f0      	beq.n	800ad24 <USB_FlushTxFifo+0x38>
 800ad42:	2300      	movs	r3, #0
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	00030d40 	.word	0x00030d40

0800ad54 <USB_FlushRxFifo>:
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	60fb      	str	r3, [r7, #12]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3301      	adds	r3, #1
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	4a11      	ldr	r2, [pc, #68]	; (800adb0 <USB_FlushRxFifo+0x5c>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d901      	bls.n	800ad72 <USB_FlushRxFifo+0x1e>
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e018      	b.n	800ada4 <USB_FlushRxFifo+0x50>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	daf2      	bge.n	800ad60 <USB_FlushRxFifo+0xc>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60fb      	str	r3, [r7, #12]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2210      	movs	r2, #16
 800ad82:	611a      	str	r2, [r3, #16]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3301      	adds	r3, #1
 800ad88:	60fb      	str	r3, [r7, #12]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	4a08      	ldr	r2, [pc, #32]	; (800adb0 <USB_FlushRxFifo+0x5c>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d901      	bls.n	800ad96 <USB_FlushRxFifo+0x42>
 800ad92:	2303      	movs	r3, #3
 800ad94:	e006      	b.n	800ada4 <USB_FlushRxFifo+0x50>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	f003 0310 	and.w	r3, r3, #16
 800ad9e:	2b10      	cmp	r3, #16
 800ada0:	d0f0      	beq.n	800ad84 <USB_FlushRxFifo+0x30>
 800ada2:	2300      	movs	r3, #0
 800ada4:	4618      	mov	r0, r3
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	00030d40 	.word	0x00030d40

0800adb4 <USB_SetDevSpeed>:
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70fb      	strb	r3, [r7, #3]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	78fb      	ldrb	r3, [r7, #3]
 800adce:	68f9      	ldr	r1, [r7, #12]
 800add0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800add4:	4313      	orrs	r3, r2
 800add6:	600b      	str	r3, [r1, #0]
 800add8:	2300      	movs	r3, #0
 800adda:	4618      	mov	r0, r3
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <USB_GetDevSpeed>:
 800ade6:	b480      	push	{r7}
 800ade8:	b087      	sub	sp, #28
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	613b      	str	r3, [r7, #16]
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	f003 0306 	and.w	r3, r3, #6
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d102      	bne.n	800ae0c <USB_GetDevSpeed+0x26>
 800ae06:	2300      	movs	r3, #0
 800ae08:	75fb      	strb	r3, [r7, #23]
 800ae0a:	e00a      	b.n	800ae22 <USB_GetDevSpeed+0x3c>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d002      	beq.n	800ae18 <USB_GetDevSpeed+0x32>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b06      	cmp	r3, #6
 800ae16:	d102      	bne.n	800ae1e <USB_GetDevSpeed+0x38>
 800ae18:	2302      	movs	r3, #2
 800ae1a:	75fb      	strb	r3, [r7, #23]
 800ae1c:	e001      	b.n	800ae22 <USB_GetDevSpeed+0x3c>
 800ae1e:	230f      	movs	r3, #15
 800ae20:	75fb      	strb	r3, [r7, #23]
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	4618      	mov	r0, r3
 800ae26:	371c      	adds	r7, #28
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <USB_ActivateEndpoint>:
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	60fb      	str	r3, [r7, #12]
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	60bb      	str	r3, [r7, #8]
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	785b      	ldrb	r3, [r3, #1]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d13a      	bne.n	800aec2 <USB_ActivateEndpoint+0x92>
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae52:	69da      	ldr	r2, [r3, #28]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	f003 030f 	and.w	r3, r3, #15
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	68f9      	ldr	r1, [r7, #12]
 800ae66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	61cb      	str	r3, [r1, #28]
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d155      	bne.n	800af30 <USB_ActivateEndpoint+0x100>
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	015a      	lsls	r2, r3, #5
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	791b      	ldrb	r3, [r3, #4]
 800ae9e:	049b      	lsls	r3, r3, #18
 800aea0:	4319      	orrs	r1, r3
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	059b      	lsls	r3, r3, #22
 800aea6:	430b      	orrs	r3, r1
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	0151      	lsls	r1, r2, #5
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	440a      	add	r2, r1
 800aeb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aebe:	6013      	str	r3, [r2, #0]
 800aec0:	e036      	b.n	800af30 <USB_ActivateEndpoint+0x100>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aec8:	69da      	ldr	r2, [r3, #28]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	f003 030f 	and.w	r3, r3, #15
 800aed2:	2101      	movs	r1, #1
 800aed4:	fa01 f303 	lsl.w	r3, r1, r3
 800aed8:	041b      	lsls	r3, r3, #16
 800aeda:	68f9      	ldr	r1, [r7, #12]
 800aedc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aee0:	4313      	orrs	r3, r2
 800aee2:	61cb      	str	r3, [r1, #28]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d11a      	bne.n	800af30 <USB_ActivateEndpoint+0x100>
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	015a      	lsls	r2, r3, #5
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	4413      	add	r3, r2
 800af02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	791b      	ldrb	r3, [r3, #4]
 800af14:	049b      	lsls	r3, r3, #18
 800af16:	430b      	orrs	r3, r1
 800af18:	4313      	orrs	r3, r2
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	0151      	lsls	r1, r2, #5
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	440a      	add	r2, r1
 800af22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	2300      	movs	r3, #0
 800af32:	4618      	mov	r0, r3
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
	...

0800af40 <USB_DeactivateEndpoint>:
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	60fb      	str	r3, [r7, #12]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	60bb      	str	r3, [r7, #8]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	785b      	ldrb	r3, [r3, #1]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d161      	bne.n	800b020 <USB_DeactivateEndpoint+0xe0>
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	015a      	lsls	r2, r3, #5
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	4413      	add	r3, r2
 800af64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af72:	d11f      	bne.n	800afb4 <USB_DeactivateEndpoint+0x74>
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	0151      	lsls	r1, r2, #5
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	440a      	add	r2, r1
 800af8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	0151      	lsls	r1, r2, #5
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	440a      	add	r2, r1
 800afaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afb2:	6013      	str	r3, [r2, #0]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	f003 030f 	and.w	r3, r3, #15
 800afc4:	2101      	movs	r1, #1
 800afc6:	fa01 f303 	lsl.w	r3, r1, r3
 800afca:	b29b      	uxth	r3, r3
 800afcc:	43db      	mvns	r3, r3
 800afce:	68f9      	ldr	r1, [r7, #12]
 800afd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afd4:	4013      	ands	r3, r2
 800afd6:	63cb      	str	r3, [r1, #60]	; 0x3c
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afde:	69da      	ldr	r2, [r3, #28]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	f003 030f 	and.w	r3, r3, #15
 800afe8:	2101      	movs	r1, #1
 800afea:	fa01 f303 	lsl.w	r3, r1, r3
 800afee:	b29b      	uxth	r3, r3
 800aff0:	43db      	mvns	r3, r3
 800aff2:	68f9      	ldr	r1, [r7, #12]
 800aff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aff8:	4013      	ands	r3, r2
 800affa:	61cb      	str	r3, [r1, #28]
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	015a      	lsls	r2, r3, #5
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	4413      	add	r3, r2
 800b004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	0159      	lsls	r1, r3, #5
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	440b      	add	r3, r1
 800b012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b016:	4619      	mov	r1, r3
 800b018:	4b35      	ldr	r3, [pc, #212]	; (800b0f0 <USB_DeactivateEndpoint+0x1b0>)
 800b01a:	4013      	ands	r3, r2
 800b01c:	600b      	str	r3, [r1, #0]
 800b01e:	e060      	b.n	800b0e2 <USB_DeactivateEndpoint+0x1a2>
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	015a      	lsls	r2, r3, #5
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	4413      	add	r3, r2
 800b028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b032:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b036:	d11f      	bne.n	800b078 <USB_DeactivateEndpoint+0x138>
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	015a      	lsls	r2, r3, #5
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	4413      	add	r3, r2
 800b040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	0151      	lsls	r1, r2, #5
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	440a      	add	r2, r1
 800b04e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b052:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b056:	6013      	str	r3, [r2, #0]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	0151      	lsls	r1, r2, #5
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	440a      	add	r2, r1
 800b06e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b072:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b076:	6013      	str	r3, [r2, #0]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b07e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	f003 030f 	and.w	r3, r3, #15
 800b088:	2101      	movs	r1, #1
 800b08a:	fa01 f303 	lsl.w	r3, r1, r3
 800b08e:	041b      	lsls	r3, r3, #16
 800b090:	43db      	mvns	r3, r3
 800b092:	68f9      	ldr	r1, [r7, #12]
 800b094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b098:	4013      	ands	r3, r2
 800b09a:	63cb      	str	r3, [r1, #60]	; 0x3c
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0a2:	69da      	ldr	r2, [r3, #28]
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	f003 030f 	and.w	r3, r3, #15
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b0b2:	041b      	lsls	r3, r3, #16
 800b0b4:	43db      	mvns	r3, r3
 800b0b6:	68f9      	ldr	r1, [r7, #12]
 800b0b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0bc:	4013      	ands	r3, r2
 800b0be:	61cb      	str	r3, [r1, #28]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	0159      	lsls	r1, r3, #5
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	440b      	add	r3, r1
 800b0d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0da:	4619      	mov	r1, r3
 800b0dc:	4b05      	ldr	r3, [pc, #20]	; (800b0f4 <USB_DeactivateEndpoint+0x1b4>)
 800b0de:	4013      	ands	r3, r2
 800b0e0:	600b      	str	r3, [r1, #0]
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	ec337800 	.word	0xec337800
 800b0f4:	eff37800 	.word	0xeff37800

0800b0f8 <USB_EPStartXfer>:
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08a      	sub	sp, #40	; 0x28
 800b0fc:	af02      	add	r7, sp, #8
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	4613      	mov	r3, r2
 800b104:	71fb      	strb	r3, [r7, #7]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	61fb      	str	r3, [r7, #28]
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	61bb      	str	r3, [r7, #24]
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	785b      	ldrb	r3, [r3, #1]
 800b114:	2b01      	cmp	r3, #1
 800b116:	f040 815c 	bne.w	800b3d2 <USB_EPStartXfer+0x2da>
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	699b      	ldr	r3, [r3, #24]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d132      	bne.n	800b188 <USB_EPStartXfer+0x90>
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	69ba      	ldr	r2, [r7, #24]
 800b132:	0151      	lsls	r1, r2, #5
 800b134:	69fa      	ldr	r2, [r7, #28]
 800b136:	440a      	add	r2, r1
 800b138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b13c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b140:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b144:	6113      	str	r3, [r2, #16]
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	0151      	lsls	r1, r2, #5
 800b158:	69fa      	ldr	r2, [r7, #28]
 800b15a:	440a      	add	r2, r1
 800b15c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b160:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b164:	6113      	str	r3, [r2, #16]
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	015a      	lsls	r2, r3, #5
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	4413      	add	r3, r2
 800b16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	69ba      	ldr	r2, [r7, #24]
 800b176:	0151      	lsls	r1, r2, #5
 800b178:	69fa      	ldr	r2, [r7, #28]
 800b17a:	440a      	add	r2, r1
 800b17c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b180:	0cdb      	lsrs	r3, r3, #19
 800b182:	04db      	lsls	r3, r3, #19
 800b184:	6113      	str	r3, [r2, #16]
 800b186:	e074      	b.n	800b272 <USB_EPStartXfer+0x17a>
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	015a      	lsls	r2, r3, #5
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	4413      	add	r3, r2
 800b190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	0151      	lsls	r1, r2, #5
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	440a      	add	r2, r1
 800b19e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1a2:	0cdb      	lsrs	r3, r3, #19
 800b1a4:	04db      	lsls	r3, r3, #19
 800b1a6:	6113      	str	r3, [r2, #16]
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	015a      	lsls	r2, r3, #5
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	69ba      	ldr	r2, [r7, #24]
 800b1b8:	0151      	lsls	r1, r2, #5
 800b1ba:	69fa      	ldr	r2, [r7, #28]
 800b1bc:	440a      	add	r2, r1
 800b1be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1ca:	6113      	str	r3, [r2, #16]
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d8:	691a      	ldr	r2, [r3, #16]
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	6999      	ldr	r1, [r3, #24]
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	440b      	add	r3, r1
 800b1e4:	1e59      	subs	r1, r3, #1
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800b1ee:	04d9      	lsls	r1, r3, #19
 800b1f0:	4b9d      	ldr	r3, [pc, #628]	; (800b468 <USB_EPStartXfer+0x370>)
 800b1f2:	400b      	ands	r3, r1
 800b1f4:	69b9      	ldr	r1, [r7, #24]
 800b1f6:	0148      	lsls	r0, r1, #5
 800b1f8:	69f9      	ldr	r1, [r7, #28]
 800b1fa:	4401      	add	r1, r0
 800b1fc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b200:	4313      	orrs	r3, r2
 800b202:	610b      	str	r3, [r1, #16]
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	015a      	lsls	r2, r3, #5
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	4413      	add	r3, r2
 800b20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b210:	691a      	ldr	r2, [r3, #16]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b21a:	69b9      	ldr	r1, [r7, #24]
 800b21c:	0148      	lsls	r0, r1, #5
 800b21e:	69f9      	ldr	r1, [r7, #28]
 800b220:	4401      	add	r1, r0
 800b222:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b226:	4313      	orrs	r3, r2
 800b228:	610b      	str	r3, [r1, #16]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	791b      	ldrb	r3, [r3, #4]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d11f      	bne.n	800b272 <USB_EPStartXfer+0x17a>
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	015a      	lsls	r2, r3, #5
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	4413      	add	r3, r2
 800b23a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	69ba      	ldr	r2, [r7, #24]
 800b242:	0151      	lsls	r1, r2, #5
 800b244:	69fa      	ldr	r2, [r7, #28]
 800b246:	440a      	add	r2, r1
 800b248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b24c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b250:	6113      	str	r3, [r2, #16]
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	015a      	lsls	r2, r3, #5
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	4413      	add	r3, r2
 800b25a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	0151      	lsls	r1, r2, #5
 800b264:	69fa      	ldr	r2, [r7, #28]
 800b266:	440a      	add	r2, r1
 800b268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b26c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b270:	6113      	str	r3, [r2, #16]
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d14b      	bne.n	800b310 <USB_EPStartXfer+0x218>
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d009      	beq.n	800b294 <USB_EPStartXfer+0x19c>
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	015a      	lsls	r2, r3, #5
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	4413      	add	r3, r2
 800b288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b28c:	461a      	mov	r2, r3
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	695b      	ldr	r3, [r3, #20]
 800b292:	6153      	str	r3, [r2, #20]
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	791b      	ldrb	r3, [r3, #4]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d128      	bne.n	800b2ee <USB_EPStartXfer+0x1f6>
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d110      	bne.n	800b2ce <USB_EPStartXfer+0x1d6>
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	015a      	lsls	r2, r3, #5
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	69ba      	ldr	r2, [r7, #24]
 800b2bc:	0151      	lsls	r1, r2, #5
 800b2be:	69fa      	ldr	r2, [r7, #28]
 800b2c0:	440a      	add	r2, r1
 800b2c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2ca:	6013      	str	r3, [r2, #0]
 800b2cc:	e00f      	b.n	800b2ee <USB_EPStartXfer+0x1f6>
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	015a      	lsls	r2, r3, #5
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	69ba      	ldr	r2, [r7, #24]
 800b2de:	0151      	lsls	r1, r2, #5
 800b2e0:	69fa      	ldr	r2, [r7, #28]
 800b2e2:	440a      	add	r2, r1
 800b2e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2ec:	6013      	str	r3, [r2, #0]
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	015a      	lsls	r2, r3, #5
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	69ba      	ldr	r2, [r7, #24]
 800b2fe:	0151      	lsls	r1, r2, #5
 800b300:	69fa      	ldr	r2, [r7, #28]
 800b302:	440a      	add	r2, r1
 800b304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b308:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	e133      	b.n	800b578 <USB_EPStartXfer+0x480>
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	015a      	lsls	r2, r3, #5
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	4413      	add	r3, r2
 800b318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	69ba      	ldr	r2, [r7, #24]
 800b320:	0151      	lsls	r1, r2, #5
 800b322:	69fa      	ldr	r2, [r7, #28]
 800b324:	440a      	add	r2, r1
 800b326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b32a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b32e:	6013      	str	r3, [r2, #0]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	791b      	ldrb	r3, [r3, #4]
 800b334:	2b01      	cmp	r3, #1
 800b336:	d015      	beq.n	800b364 <USB_EPStartXfer+0x26c>
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f000 811b 	beq.w	800b578 <USB_EPStartXfer+0x480>
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	f003 030f 	and.w	r3, r3, #15
 800b352:	2101      	movs	r1, #1
 800b354:	fa01 f303 	lsl.w	r3, r1, r3
 800b358:	69f9      	ldr	r1, [r7, #28]
 800b35a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b35e:	4313      	orrs	r3, r2
 800b360:	634b      	str	r3, [r1, #52]	; 0x34
 800b362:	e109      	b.n	800b578 <USB_EPStartXfer+0x480>
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b370:	2b00      	cmp	r3, #0
 800b372:	d110      	bne.n	800b396 <USB_EPStartXfer+0x29e>
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	015a      	lsls	r2, r3, #5
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	4413      	add	r3, r2
 800b37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	69ba      	ldr	r2, [r7, #24]
 800b384:	0151      	lsls	r1, r2, #5
 800b386:	69fa      	ldr	r2, [r7, #28]
 800b388:	440a      	add	r2, r1
 800b38a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b38e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b392:	6013      	str	r3, [r2, #0]
 800b394:	e00f      	b.n	800b3b6 <USB_EPStartXfer+0x2be>
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	015a      	lsls	r2, r3, #5
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	0151      	lsls	r1, r2, #5
 800b3a8:	69fa      	ldr	r2, [r7, #28]
 800b3aa:	440a      	add	r2, r1
 800b3ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3b4:	6013      	str	r3, [r2, #0]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	6919      	ldr	r1, [r3, #16]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	781a      	ldrb	r2, [r3, #0]
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	b298      	uxth	r0, r3
 800b3c4:	79fb      	ldrb	r3, [r7, #7]
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f000 fade 	bl	800b98c <USB_WritePacket>
 800b3d0:	e0d2      	b.n	800b578 <USB_EPStartXfer+0x480>
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	015a      	lsls	r2, r3, #5
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	4413      	add	r3, r2
 800b3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	69ba      	ldr	r2, [r7, #24]
 800b3e2:	0151      	lsls	r1, r2, #5
 800b3e4:	69fa      	ldr	r2, [r7, #28]
 800b3e6:	440a      	add	r2, r1
 800b3e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3ec:	0cdb      	lsrs	r3, r3, #19
 800b3ee:	04db      	lsls	r3, r3, #19
 800b3f0:	6113      	str	r3, [r2, #16]
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	015a      	lsls	r2, r3, #5
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	69ba      	ldr	r2, [r7, #24]
 800b402:	0151      	lsls	r1, r2, #5
 800b404:	69fa      	ldr	r2, [r7, #28]
 800b406:	440a      	add	r2, r1
 800b408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b40c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b410:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b414:	6113      	str	r3, [r2, #16]
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d126      	bne.n	800b46c <USB_EPStartXfer+0x374>
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	015a      	lsls	r2, r3, #5
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	4413      	add	r3, r2
 800b426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b42a:	691a      	ldr	r2, [r3, #16]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b434:	69b9      	ldr	r1, [r7, #24]
 800b436:	0148      	lsls	r0, r1, #5
 800b438:	69f9      	ldr	r1, [r7, #28]
 800b43a:	4401      	add	r1, r0
 800b43c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b440:	4313      	orrs	r3, r2
 800b442:	610b      	str	r3, [r1, #16]
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	015a      	lsls	r2, r3, #5
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	4413      	add	r3, r2
 800b44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	69ba      	ldr	r2, [r7, #24]
 800b454:	0151      	lsls	r1, r2, #5
 800b456:	69fa      	ldr	r2, [r7, #28]
 800b458:	440a      	add	r2, r1
 800b45a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b45e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b462:	6113      	str	r3, [r2, #16]
 800b464:	e03a      	b.n	800b4dc <USB_EPStartXfer+0x3e4>
 800b466:	bf00      	nop
 800b468:	1ff80000 	.word	0x1ff80000
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	699a      	ldr	r2, [r3, #24]
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	4413      	add	r3, r2
 800b476:	1e5a      	subs	r2, r3, #1
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b480:	82fb      	strh	r3, [r7, #22]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	8afa      	ldrh	r2, [r7, #22]
 800b488:	fb03 f202 	mul.w	r2, r3, r2
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	61da      	str	r2, [r3, #28]
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	015a      	lsls	r2, r3, #5
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	4413      	add	r3, r2
 800b498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b49c:	691a      	ldr	r2, [r3, #16]
 800b49e:	8afb      	ldrh	r3, [r7, #22]
 800b4a0:	04d9      	lsls	r1, r3, #19
 800b4a2:	4b38      	ldr	r3, [pc, #224]	; (800b584 <USB_EPStartXfer+0x48c>)
 800b4a4:	400b      	ands	r3, r1
 800b4a6:	69b9      	ldr	r1, [r7, #24]
 800b4a8:	0148      	lsls	r0, r1, #5
 800b4aa:	69f9      	ldr	r1, [r7, #28]
 800b4ac:	4401      	add	r1, r0
 800b4ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	610b      	str	r3, [r1, #16]
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	015a      	lsls	r2, r3, #5
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	4413      	add	r3, r2
 800b4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c2:	691a      	ldr	r2, [r3, #16]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	69db      	ldr	r3, [r3, #28]
 800b4c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4cc:	69b9      	ldr	r1, [r7, #24]
 800b4ce:	0148      	lsls	r0, r1, #5
 800b4d0:	69f9      	ldr	r1, [r7, #28]
 800b4d2:	4401      	add	r1, r0
 800b4d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	610b      	str	r3, [r1, #16]
 800b4dc:	79fb      	ldrb	r3, [r7, #7]
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d10d      	bne.n	800b4fe <USB_EPStartXfer+0x406>
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d009      	beq.n	800b4fe <USB_EPStartXfer+0x406>
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	6919      	ldr	r1, [r3, #16]
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	015a      	lsls	r2, r3, #5
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4fa:	460a      	mov	r2, r1
 800b4fc:	615a      	str	r2, [r3, #20]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	791b      	ldrb	r3, [r3, #4]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d128      	bne.n	800b558 <USB_EPStartXfer+0x460>
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b512:	2b00      	cmp	r3, #0
 800b514:	d110      	bne.n	800b538 <USB_EPStartXfer+0x440>
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	015a      	lsls	r2, r3, #5
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	4413      	add	r3, r2
 800b51e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	69ba      	ldr	r2, [r7, #24]
 800b526:	0151      	lsls	r1, r2, #5
 800b528:	69fa      	ldr	r2, [r7, #28]
 800b52a:	440a      	add	r2, r1
 800b52c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b530:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	e00f      	b.n	800b558 <USB_EPStartXfer+0x460>
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	015a      	lsls	r2, r3, #5
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	4413      	add	r3, r2
 800b540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	69ba      	ldr	r2, [r7, #24]
 800b548:	0151      	lsls	r1, r2, #5
 800b54a:	69fa      	ldr	r2, [r7, #28]
 800b54c:	440a      	add	r2, r1
 800b54e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b556:	6013      	str	r3, [r2, #0]
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	015a      	lsls	r2, r3, #5
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	4413      	add	r3, r2
 800b560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	69ba      	ldr	r2, [r7, #24]
 800b568:	0151      	lsls	r1, r2, #5
 800b56a:	69fa      	ldr	r2, [r7, #28]
 800b56c:	440a      	add	r2, r1
 800b56e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b572:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b576:	6013      	str	r3, [r2, #0]
 800b578:	2300      	movs	r3, #0
 800b57a:	4618      	mov	r0, r3
 800b57c:	3720      	adds	r7, #32
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	1ff80000 	.word	0x1ff80000

0800b588 <USB_EP0StartXfer>:
 800b588:	b480      	push	{r7}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	4613      	mov	r3, r2
 800b594:	71fb      	strb	r3, [r7, #7]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	617b      	str	r3, [r7, #20]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	613b      	str	r3, [r7, #16]
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	785b      	ldrb	r3, [r3, #1]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	f040 80ce 	bne.w	800b746 <USB_EP0StartXfer+0x1be>
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	699b      	ldr	r3, [r3, #24]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d132      	bne.n	800b618 <USB_EP0StartXfer+0x90>
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	015a      	lsls	r2, r3, #5
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	0151      	lsls	r1, r2, #5
 800b5c4:	697a      	ldr	r2, [r7, #20]
 800b5c6:	440a      	add	r2, r1
 800b5c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b5d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b5d4:	6113      	str	r3, [r2, #16]
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	015a      	lsls	r2, r3, #5
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	4413      	add	r3, r2
 800b5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	0151      	lsls	r1, r2, #5
 800b5e8:	697a      	ldr	r2, [r7, #20]
 800b5ea:	440a      	add	r2, r1
 800b5ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5f4:	6113      	str	r3, [r2, #16]
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	0151      	lsls	r1, r2, #5
 800b608:	697a      	ldr	r2, [r7, #20]
 800b60a:	440a      	add	r2, r1
 800b60c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b610:	0cdb      	lsrs	r3, r3, #19
 800b612:	04db      	lsls	r3, r3, #19
 800b614:	6113      	str	r3, [r2, #16]
 800b616:	e04e      	b.n	800b6b6 <USB_EP0StartXfer+0x12e>
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	015a      	lsls	r2, r3, #5
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	4413      	add	r3, r2
 800b620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	0151      	lsls	r1, r2, #5
 800b62a:	697a      	ldr	r2, [r7, #20]
 800b62c:	440a      	add	r2, r1
 800b62e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b632:	0cdb      	lsrs	r3, r3, #19
 800b634:	04db      	lsls	r3, r3, #19
 800b636:	6113      	str	r3, [r2, #16]
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	015a      	lsls	r2, r3, #5
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	4413      	add	r3, r2
 800b640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	693a      	ldr	r2, [r7, #16]
 800b648:	0151      	lsls	r1, r2, #5
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	440a      	add	r2, r1
 800b64e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b652:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b656:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b65a:	6113      	str	r3, [r2, #16]
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	699a      	ldr	r2, [r3, #24]
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	429a      	cmp	r2, r3
 800b666:	d903      	bls.n	800b670 <USB_EP0StartXfer+0xe8>
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	68da      	ldr	r2, [r3, #12]
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	619a      	str	r2, [r3, #24]
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	015a      	lsls	r2, r3, #5
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	4413      	add	r3, r2
 800b678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	0151      	lsls	r1, r2, #5
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	440a      	add	r2, r1
 800b686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b68a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b68e:	6113      	str	r3, [r2, #16]
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	4413      	add	r3, r2
 800b698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b69c:	691a      	ldr	r2, [r3, #16]
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	699b      	ldr	r3, [r3, #24]
 800b6a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6a6:	6939      	ldr	r1, [r7, #16]
 800b6a8:	0148      	lsls	r0, r1, #5
 800b6aa:	6979      	ldr	r1, [r7, #20]
 800b6ac:	4401      	add	r1, r0
 800b6ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	610b      	str	r3, [r1, #16]
 800b6b6:	79fb      	ldrb	r3, [r7, #7]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d11e      	bne.n	800b6fa <USB_EP0StartXfer+0x172>
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	695b      	ldr	r3, [r3, #20]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d009      	beq.n	800b6d8 <USB_EP0StartXfer+0x150>
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	015a      	lsls	r2, r3, #5
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	695b      	ldr	r3, [r3, #20]
 800b6d6:	6153      	str	r3, [r2, #20]
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	015a      	lsls	r2, r3, #5
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	4413      	add	r3, r2
 800b6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	0151      	lsls	r1, r2, #5
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	440a      	add	r2, r1
 800b6ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b6f6:	6013      	str	r3, [r2, #0]
 800b6f8:	e097      	b.n	800b82a <USB_EP0StartXfer+0x2a2>
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	015a      	lsls	r2, r3, #5
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	4413      	add	r3, r2
 800b702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	693a      	ldr	r2, [r7, #16]
 800b70a:	0151      	lsls	r1, r2, #5
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	440a      	add	r2, r1
 800b710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b714:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b718:	6013      	str	r3, [r2, #0]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	699b      	ldr	r3, [r3, #24]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f000 8083 	beq.w	800b82a <USB_EP0StartXfer+0x2a2>
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b72a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	f003 030f 	and.w	r3, r3, #15
 800b734:	2101      	movs	r1, #1
 800b736:	fa01 f303 	lsl.w	r3, r1, r3
 800b73a:	6979      	ldr	r1, [r7, #20]
 800b73c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b740:	4313      	orrs	r3, r2
 800b742:	634b      	str	r3, [r1, #52]	; 0x34
 800b744:	e071      	b.n	800b82a <USB_EP0StartXfer+0x2a2>
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	015a      	lsls	r2, r3, #5
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	4413      	add	r3, r2
 800b74e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	0151      	lsls	r1, r2, #5
 800b758:	697a      	ldr	r2, [r7, #20]
 800b75a:	440a      	add	r2, r1
 800b75c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b760:	0cdb      	lsrs	r3, r3, #19
 800b762:	04db      	lsls	r3, r3, #19
 800b764:	6113      	str	r3, [r2, #16]
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	015a      	lsls	r2, r3, #5
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	4413      	add	r3, r2
 800b76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	693a      	ldr	r2, [r7, #16]
 800b776:	0151      	lsls	r1, r2, #5
 800b778:	697a      	ldr	r2, [r7, #20]
 800b77a:	440a      	add	r2, r1
 800b77c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b780:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b784:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b788:	6113      	str	r3, [r2, #16]
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d003      	beq.n	800b79a <USB_EP0StartXfer+0x212>
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	68da      	ldr	r2, [r3, #12]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	619a      	str	r2, [r3, #24]
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	68da      	ldr	r2, [r3, #12]
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	61da      	str	r2, [r3, #28]
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	015a      	lsls	r2, r3, #5
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	0151      	lsls	r1, r2, #5
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	440a      	add	r2, r1
 800b7b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7c0:	6113      	str	r3, [r2, #16]
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	015a      	lsls	r2, r3, #5
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ce:	691a      	ldr	r2, [r3, #16]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	69db      	ldr	r3, [r3, #28]
 800b7d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7d8:	6939      	ldr	r1, [r7, #16]
 800b7da:	0148      	lsls	r0, r1, #5
 800b7dc:	6979      	ldr	r1, [r7, #20]
 800b7de:	4401      	add	r1, r0
 800b7e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	610b      	str	r3, [r1, #16]
 800b7e8:	79fb      	ldrb	r3, [r7, #7]
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d10d      	bne.n	800b80a <USB_EP0StartXfer+0x282>
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d009      	beq.n	800b80a <USB_EP0StartXfer+0x282>
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	6919      	ldr	r1, [r3, #16]
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	015a      	lsls	r2, r3, #5
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	4413      	add	r3, r2
 800b802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b806:	460a      	mov	r2, r1
 800b808:	615a      	str	r2, [r3, #20]
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	015a      	lsls	r2, r3, #5
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	4413      	add	r3, r2
 800b812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	0151      	lsls	r1, r2, #5
 800b81c:	697a      	ldr	r2, [r7, #20]
 800b81e:	440a      	add	r2, r1
 800b820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b824:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	2300      	movs	r3, #0
 800b82c:	4618      	mov	r0, r3
 800b82e:	371c      	adds	r7, #28
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <USB_EPStopXfer>:
 800b838:	b480      	push	{r7}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
 800b842:	2300      	movs	r3, #0
 800b844:	60fb      	str	r3, [r7, #12]
 800b846:	2300      	movs	r3, #0
 800b848:	75fb      	strb	r3, [r7, #23]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	613b      	str	r3, [r7, #16]
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	785b      	ldrb	r3, [r3, #1]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d14a      	bne.n	800b8ec <USB_EPStopXfer+0xb4>
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	015a      	lsls	r2, r3, #5
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	4413      	add	r3, r2
 800b860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b86a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b86e:	f040 8086 	bne.w	800b97e <USB_EPStopXfer+0x146>
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	015a      	lsls	r2, r3, #5
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	4413      	add	r3, r2
 800b87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	7812      	ldrb	r2, [r2, #0]
 800b886:	0151      	lsls	r1, r2, #5
 800b888:	693a      	ldr	r2, [r7, #16]
 800b88a:	440a      	add	r2, r1
 800b88c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b890:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b894:	6013      	str	r3, [r2, #0]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	015a      	lsls	r2, r3, #5
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	4413      	add	r3, r2
 800b8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	7812      	ldrb	r2, [r2, #0]
 800b8aa:	0151      	lsls	r1, r2, #5
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	440a      	add	r2, r1
 800b8b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8b8:	6013      	str	r3, [r2, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	60fb      	str	r3, [r7, #12]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f242 7210 	movw	r2, #10000	; 0x2710
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d902      	bls.n	800b8d0 <USB_EPStopXfer+0x98>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	75fb      	strb	r3, [r7, #23]
 800b8ce:	e056      	b.n	800b97e <USB_EPStopXfer+0x146>
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	015a      	lsls	r2, r3, #5
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	4413      	add	r3, r2
 800b8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8e8:	d0e7      	beq.n	800b8ba <USB_EPStopXfer+0x82>
 800b8ea:	e048      	b.n	800b97e <USB_EPStopXfer+0x146>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	015a      	lsls	r2, r3, #5
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b904:	d13b      	bne.n	800b97e <USB_EPStopXfer+0x146>
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	7812      	ldrb	r2, [r2, #0]
 800b91a:	0151      	lsls	r1, r2, #5
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	440a      	add	r2, r1
 800b920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b924:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b928:	6013      	str	r3, [r2, #0]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	015a      	lsls	r2, r3, #5
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	4413      	add	r3, r2
 800b934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	683a      	ldr	r2, [r7, #0]
 800b93c:	7812      	ldrb	r2, [r2, #0]
 800b93e:	0151      	lsls	r1, r2, #5
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	440a      	add	r2, r1
 800b944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b948:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b94c:	6013      	str	r3, [r2, #0]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3301      	adds	r3, #1
 800b952:	60fb      	str	r3, [r7, #12]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f242 7210 	movw	r2, #10000	; 0x2710
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d902      	bls.n	800b964 <USB_EPStopXfer+0x12c>
 800b95e:	2301      	movs	r3, #1
 800b960:	75fb      	strb	r3, [r7, #23]
 800b962:	e00c      	b.n	800b97e <USB_EPStopXfer+0x146>
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	015a      	lsls	r2, r3, #5
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	4413      	add	r3, r2
 800b96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b978:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b97c:	d0e7      	beq.n	800b94e <USB_EPStopXfer+0x116>
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	4618      	mov	r0, r3
 800b982:	371c      	adds	r7, #28
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <USB_WritePacket>:
 800b98c:	b480      	push	{r7}
 800b98e:	b089      	sub	sp, #36	; 0x24
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	4611      	mov	r1, r2
 800b998:	461a      	mov	r2, r3
 800b99a:	460b      	mov	r3, r1
 800b99c:	71fb      	strb	r3, [r7, #7]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	80bb      	strh	r3, [r7, #4]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	617b      	str	r3, [r7, #20]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	61fb      	str	r3, [r7, #28]
 800b9aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d123      	bne.n	800b9fa <USB_WritePacket+0x6e>
 800b9b2:	88bb      	ldrh	r3, [r7, #4]
 800b9b4:	3303      	adds	r3, #3
 800b9b6:	089b      	lsrs	r3, r3, #2
 800b9b8:	613b      	str	r3, [r7, #16]
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	61bb      	str	r3, [r7, #24]
 800b9be:	e018      	b.n	800b9f2 <USB_WritePacket+0x66>
 800b9c0:	79fb      	ldrb	r3, [r7, #7]
 800b9c2:	031a      	lsls	r2, r3, #12
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6013      	str	r3, [r2, #0]
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	61fb      	str	r3, [r7, #28]
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	61fb      	str	r3, [r7, #28]
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	61fb      	str	r3, [r7, #28]
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	61fb      	str	r3, [r7, #28]
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	61bb      	str	r3, [r7, #24]
 800b9f2:	69ba      	ldr	r2, [r7, #24]
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d3e2      	bcc.n	800b9c0 <USB_WritePacket+0x34>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3724      	adds	r7, #36	; 0x24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <USB_ReadPacket>:
 800ba08:	b480      	push	{r7}
 800ba0a:	b08b      	sub	sp, #44	; 0x2c
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	4613      	mov	r3, r2
 800ba14:	80fb      	strh	r3, [r7, #6]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	61bb      	str	r3, [r7, #24]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba1e:	88fb      	ldrh	r3, [r7, #6]
 800ba20:	089b      	lsrs	r3, r3, #2
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	617b      	str	r3, [r7, #20]
 800ba26:	88fb      	ldrh	r3, [r7, #6]
 800ba28:	f003 0303 	and.w	r3, r3, #3
 800ba2c:	83fb      	strh	r3, [r7, #30]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	623b      	str	r3, [r7, #32]
 800ba32:	e014      	b.n	800ba5e <USB_ReadPacket+0x56>
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	3301      	adds	r3, #1
 800ba44:	627b      	str	r3, [r7, #36]	; 0x24
 800ba46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba48:	3301      	adds	r3, #1
 800ba4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4e:	3301      	adds	r3, #1
 800ba50:	627b      	str	r3, [r7, #36]	; 0x24
 800ba52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba54:	3301      	adds	r3, #1
 800ba56:	627b      	str	r3, [r7, #36]	; 0x24
 800ba58:	6a3b      	ldr	r3, [r7, #32]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	623b      	str	r3, [r7, #32]
 800ba5e:	6a3a      	ldr	r2, [r7, #32]
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d3e6      	bcc.n	800ba34 <USB_ReadPacket+0x2c>
 800ba66:	8bfb      	ldrh	r3, [r7, #30]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d01e      	beq.n	800baaa <USB_ReadPacket+0xa2>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	623b      	str	r3, [r7, #32]
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba76:	461a      	mov	r2, r3
 800ba78:	f107 0310 	add.w	r3, r7, #16
 800ba7c:	6812      	ldr	r2, [r2, #0]
 800ba7e:	601a      	str	r2, [r3, #0]
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	6a3b      	ldr	r3, [r7, #32]
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	00db      	lsls	r3, r3, #3
 800ba88:	fa22 f303 	lsr.w	r3, r2, r3
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba90:	701a      	strb	r2, [r3, #0]
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	3301      	adds	r3, #1
 800ba96:	623b      	str	r3, [r7, #32]
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba9e:	8bfb      	ldrh	r3, [r7, #30]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	83fb      	strh	r3, [r7, #30]
 800baa4:	8bfb      	ldrh	r3, [r7, #30]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1ea      	bne.n	800ba80 <USB_ReadPacket+0x78>
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	4618      	mov	r0, r3
 800baae:	372c      	adds	r7, #44	; 0x2c
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <USB_EPSetStall>:
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	60fb      	str	r3, [r7, #12]
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	60bb      	str	r3, [r7, #8]
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	785b      	ldrb	r3, [r3, #1]
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d12c      	bne.n	800bb2e <USB_EPSetStall+0x76>
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	015a      	lsls	r2, r3, #5
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	4413      	add	r3, r2
 800badc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	db12      	blt.n	800bb0c <USB_EPSetStall+0x54>
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00f      	beq.n	800bb0c <USB_EPSetStall+0x54>
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	015a      	lsls	r2, r3, #5
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	4413      	add	r3, r2
 800baf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	0151      	lsls	r1, r2, #5
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	440a      	add	r2, r1
 800bb02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bb0a:	6013      	str	r3, [r2, #0]
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	015a      	lsls	r2, r3, #5
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4413      	add	r3, r2
 800bb14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	0151      	lsls	r1, r2, #5
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	440a      	add	r2, r1
 800bb22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb2a:	6013      	str	r3, [r2, #0]
 800bb2c:	e02b      	b.n	800bb86 <USB_EPSetStall+0xce>
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	015a      	lsls	r2, r3, #5
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	4413      	add	r3, r2
 800bb36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	db12      	blt.n	800bb66 <USB_EPSetStall+0xae>
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00f      	beq.n	800bb66 <USB_EPSetStall+0xae>
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	015a      	lsls	r2, r3, #5
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	0151      	lsls	r1, r2, #5
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	440a      	add	r2, r1
 800bb5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	015a      	lsls	r2, r3, #5
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	0151      	lsls	r1, r2, #5
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	440a      	add	r2, r1
 800bb7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb84:	6013      	str	r3, [r2, #0]
 800bb86:	2300      	movs	r3, #0
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <USB_EPClearStall>:
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	60fb      	str	r3, [r7, #12]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	60bb      	str	r3, [r7, #8]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	785b      	ldrb	r3, [r3, #1]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d128      	bne.n	800bc02 <USB_EPClearStall+0x6e>
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	015a      	lsls	r2, r3, #5
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	0151      	lsls	r1, r2, #5
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	440a      	add	r2, r1
 800bbc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bbce:	6013      	str	r3, [r2, #0]
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	791b      	ldrb	r3, [r3, #4]
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	d003      	beq.n	800bbe0 <USB_EPClearStall+0x4c>
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	791b      	ldrb	r3, [r3, #4]
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d138      	bne.n	800bc52 <USB_EPClearStall+0xbe>
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	015a      	lsls	r2, r3, #5
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	0151      	lsls	r1, r2, #5
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	440a      	add	r2, r1
 800bbf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbfe:	6013      	str	r3, [r2, #0]
 800bc00:	e027      	b.n	800bc52 <USB_EPClearStall+0xbe>
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	015a      	lsls	r2, r3, #5
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	4413      	add	r3, r2
 800bc0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68ba      	ldr	r2, [r7, #8]
 800bc12:	0151      	lsls	r1, r2, #5
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	440a      	add	r2, r1
 800bc18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc20:	6013      	str	r3, [r2, #0]
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	791b      	ldrb	r3, [r3, #4]
 800bc26:	2b03      	cmp	r3, #3
 800bc28:	d003      	beq.n	800bc32 <USB_EPClearStall+0x9e>
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	791b      	ldrb	r3, [r3, #4]
 800bc2e:	2b02      	cmp	r3, #2
 800bc30:	d10f      	bne.n	800bc52 <USB_EPClearStall+0xbe>
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	015a      	lsls	r2, r3, #5
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	4413      	add	r3, r2
 800bc3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	0151      	lsls	r1, r2, #5
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	440a      	add	r2, r1
 800bc48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc50:	6013      	str	r3, [r2, #0]
 800bc52:	2300      	movs	r3, #0
 800bc54:	4618      	mov	r0, r3
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <USB_SetDevAddress>:
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	70fb      	strb	r3, [r7, #3]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	60fb      	str	r3, [r7, #12]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bc82:	6013      	str	r3, [r2, #0]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	78fb      	ldrb	r3, [r7, #3]
 800bc8e:	011b      	lsls	r3, r3, #4
 800bc90:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bc94:	68f9      	ldr	r1, [r7, #12]
 800bc96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	600b      	str	r3, [r1, #0]
 800bc9e:	2300      	movs	r3, #0
 800bca0:	4618      	mov	r0, r3
 800bca2:	3714      	adds	r7, #20
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <USB_DevConnect>:
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bcc6:	f023 0303 	bic.w	r3, r3, #3
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcda:	f023 0302 	bic.w	r3, r3, #2
 800bcde:	6053      	str	r3, [r2, #4]
 800bce0:	2300      	movs	r3, #0
 800bce2:	4618      	mov	r0, r3
 800bce4:	3714      	adds	r7, #20
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <USB_DevDisconnect>:
 800bcee:	b480      	push	{r7}
 800bcf0:	b085      	sub	sp, #20
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	60fb      	str	r3, [r7, #12]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd08:	f023 0303 	bic.w	r3, r3, #3
 800bd0c:	6013      	str	r3, [r2, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd1c:	f043 0302 	orr.w	r3, r3, #2
 800bd20:	6053      	str	r3, [r2, #4]
 800bd22:	2300      	movs	r3, #0
 800bd24:	4618      	mov	r0, r3
 800bd26:	3714      	adds	r7, #20
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <USB_ReadInterrupts>:
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	695b      	ldr	r3, [r3, #20]
 800bd3c:	60fb      	str	r3, [r7, #12]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	699b      	ldr	r3, [r3, #24]
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	4013      	ands	r3, r2
 800bd46:	60fb      	str	r3, [r7, #12]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <USB_ReadDevAllOutEpInterrupt>:
 800bd56:	b480      	push	{r7}
 800bd58:	b085      	sub	sp, #20
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	60fb      	str	r3, [r7, #12]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	60bb      	str	r3, [r7, #8]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd72:	69db      	ldr	r3, [r3, #28]
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	4013      	ands	r3, r2
 800bd78:	60bb      	str	r3, [r7, #8]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	0c1b      	lsrs	r3, r3, #16
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3714      	adds	r7, #20
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr

0800bd8a <USB_ReadDevAllInEpInterrupt>:
 800bd8a:	b480      	push	{r7}
 800bd8c:	b085      	sub	sp, #20
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	60fb      	str	r3, [r7, #12]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	60bb      	str	r3, [r7, #8]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bda6:	69db      	ldr	r3, [r3, #28]
 800bda8:	68ba      	ldr	r2, [r7, #8]
 800bdaa:	4013      	ands	r3, r2
 800bdac:	60bb      	str	r3, [r7, #8]
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3714      	adds	r7, #20
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <USB_ReadDevOutEPInterrupt>:
 800bdbe:	b480      	push	{r7}
 800bdc0:	b085      	sub	sp, #20
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	70fb      	strb	r3, [r7, #3]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	60fb      	str	r3, [r7, #12]
 800bdce:	78fb      	ldrb	r3, [r7, #3]
 800bdd0:	015a      	lsls	r2, r3, #5
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	60bb      	str	r3, [r7, #8]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bde4:	695b      	ldr	r3, [r3, #20]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	4013      	ands	r3, r2
 800bdea:	60bb      	str	r3, [r7, #8]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <USB_ReadDevInEPInterrupt>:
 800bdfa:	b480      	push	{r7}
 800bdfc:	b087      	sub	sp, #28
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
 800be02:	460b      	mov	r3, r1
 800be04:	70fb      	strb	r3, [r7, #3]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	617b      	str	r3, [r7, #20]
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	613b      	str	r3, [r7, #16]
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be1c:	60fb      	str	r3, [r7, #12]
 800be1e:	78fb      	ldrb	r3, [r7, #3]
 800be20:	f003 030f 	and.w	r3, r3, #15
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	fa22 f303 	lsr.w	r3, r2, r3
 800be2a:	01db      	lsls	r3, r3, #7
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	4313      	orrs	r3, r2
 800be32:	613b      	str	r3, [r7, #16]
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	015a      	lsls	r2, r3, #5
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	4413      	add	r3, r2
 800be3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	693a      	ldr	r2, [r7, #16]
 800be44:	4013      	ands	r3, r2
 800be46:	60bb      	str	r3, [r7, #8]
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	4618      	mov	r0, r3
 800be4c:	371c      	adds	r7, #28
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <USB_GetMode>:
 800be56:	b480      	push	{r7}
 800be58:	b083      	sub	sp, #12
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	f003 0301 	and.w	r3, r3, #1
 800be66:	4618      	mov	r0, r3
 800be68:	370c      	adds	r7, #12
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr

0800be72 <USB_ActivateSetup>:
 800be72:	b480      	push	{r7}
 800be74:	b085      	sub	sp, #20
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	60fb      	str	r3, [r7, #12]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800be90:	f023 0307 	bic.w	r3, r3, #7
 800be94:	6013      	str	r3, [r2, #0]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bea8:	6053      	str	r3, [r2, #4]
 800beaa:	2300      	movs	r3, #0
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <USB_EP0_OutStart>:
 800beb8:	b480      	push	{r7}
 800beba:	b087      	sub	sp, #28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	460b      	mov	r3, r1
 800bec2:	607a      	str	r2, [r7, #4]
 800bec4:	72fb      	strb	r3, [r7, #11]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	617b      	str	r3, [r7, #20]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	333c      	adds	r3, #60	; 0x3c
 800bece:	3304      	adds	r3, #4
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	613b      	str	r3, [r7, #16]
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	4a26      	ldr	r2, [pc, #152]	; (800bf70 <USB_EP0_OutStart+0xb8>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d90a      	bls.n	800bef2 <USB_EP0_OutStart+0x3a>
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800beec:	d101      	bne.n	800bef2 <USB_EP0_OutStart+0x3a>
 800beee:	2300      	movs	r3, #0
 800bef0:	e037      	b.n	800bf62 <USB_EP0_OutStart+0xaa>
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef8:	461a      	mov	r2, r3
 800befa:	2300      	movs	r3, #0
 800befc:	6113      	str	r3, [r2, #16]
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf10:	6113      	str	r3, [r2, #16]
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf18:	691b      	ldr	r3, [r3, #16]
 800bf1a:	697a      	ldr	r2, [r7, #20]
 800bf1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf20:	f043 0318 	orr.w	r3, r3, #24
 800bf24:	6113      	str	r3, [r2, #16]
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf2c:	691b      	ldr	r3, [r3, #16]
 800bf2e:	697a      	ldr	r2, [r7, #20]
 800bf30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bf38:	6113      	str	r3, [r2, #16]
 800bf3a:	7afb      	ldrb	r3, [r7, #11]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d10f      	bne.n	800bf60 <USB_EP0_OutStart+0xa8>
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf46:	461a      	mov	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6153      	str	r3, [r2, #20]
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	697a      	ldr	r2, [r7, #20]
 800bf56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bf5e:	6013      	str	r3, [r2, #0]
 800bf60:	2300      	movs	r3, #0
 800bf62:	4618      	mov	r0, r3
 800bf64:	371c      	adds	r7, #28
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	4f54300a 	.word	0x4f54300a

0800bf74 <USB_CoreReset>:
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	3301      	adds	r3, #1
 800bf84:	60fb      	str	r3, [r7, #12]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	4a13      	ldr	r2, [pc, #76]	; (800bfd8 <USB_CoreReset+0x64>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d901      	bls.n	800bf92 <USB_CoreReset+0x1e>
 800bf8e:	2303      	movs	r3, #3
 800bf90:	e01b      	b.n	800bfca <USB_CoreReset+0x56>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	daf2      	bge.n	800bf80 <USB_CoreReset+0xc>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	60fb      	str	r3, [r7, #12]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	f043 0201 	orr.w	r2, r3, #1
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	611a      	str	r2, [r3, #16]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3301      	adds	r3, #1
 800bfae:	60fb      	str	r3, [r7, #12]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4a09      	ldr	r2, [pc, #36]	; (800bfd8 <USB_CoreReset+0x64>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d901      	bls.n	800bfbc <USB_CoreReset+0x48>
 800bfb8:	2303      	movs	r3, #3
 800bfba:	e006      	b.n	800bfca <USB_CoreReset+0x56>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	f003 0301 	and.w	r3, r3, #1
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d0f0      	beq.n	800bfaa <USB_CoreReset+0x36>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	00030d40 	.word	0x00030d40

0800bfdc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bfe8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bfec:	f002 fca0 	bl	800e930 <USBD_static_malloc>
 800bff0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d109      	bne.n	800c00c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	32b0      	adds	r2, #176	; 0xb0
 800c002:	2100      	movs	r1, #0
 800c004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c008:	2302      	movs	r3, #2
 800c00a:	e0d4      	b.n	800c1b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c00c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c010:	2100      	movs	r1, #0
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f002 fd22 	bl	800ea5c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	32b0      	adds	r2, #176	; 0xb0
 800c022:	68f9      	ldr	r1, [r7, #12]
 800c024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	32b0      	adds	r2, #176	; 0xb0
 800c032:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	7c1b      	ldrb	r3, [r3, #16]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d138      	bne.n	800c0b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c044:	4b5e      	ldr	r3, [pc, #376]	; (800c1c0 <USBD_CDC_Init+0x1e4>)
 800c046:	7819      	ldrb	r1, [r3, #0]
 800c048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c04c:	2202      	movs	r2, #2
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f002 fb4b 	bl	800e6ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c054:	4b5a      	ldr	r3, [pc, #360]	; (800c1c0 <USBD_CDC_Init+0x1e4>)
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	f003 020f 	and.w	r2, r3, #15
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	4613      	mov	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	440b      	add	r3, r1
 800c068:	3324      	adds	r3, #36	; 0x24
 800c06a:	2201      	movs	r2, #1
 800c06c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c06e:	4b55      	ldr	r3, [pc, #340]	; (800c1c4 <USBD_CDC_Init+0x1e8>)
 800c070:	7819      	ldrb	r1, [r3, #0]
 800c072:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c076:	2202      	movs	r2, #2
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f002 fb36 	bl	800e6ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c07e:	4b51      	ldr	r3, [pc, #324]	; (800c1c4 <USBD_CDC_Init+0x1e8>)
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	f003 020f 	and.w	r2, r3, #15
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	4613      	mov	r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	4413      	add	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	440b      	add	r3, r1
 800c092:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c096:	2201      	movs	r2, #1
 800c098:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c09a:	4b4b      	ldr	r3, [pc, #300]	; (800c1c8 <USBD_CDC_Init+0x1ec>)
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	f003 020f 	and.w	r2, r3, #15
 800c0a2:	6879      	ldr	r1, [r7, #4]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	440b      	add	r3, r1
 800c0ae:	3326      	adds	r3, #38	; 0x26
 800c0b0:	2210      	movs	r2, #16
 800c0b2:	801a      	strh	r2, [r3, #0]
 800c0b4:	e035      	b.n	800c122 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c0b6:	4b42      	ldr	r3, [pc, #264]	; (800c1c0 <USBD_CDC_Init+0x1e4>)
 800c0b8:	7819      	ldrb	r1, [r3, #0]
 800c0ba:	2340      	movs	r3, #64	; 0x40
 800c0bc:	2202      	movs	r2, #2
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f002 fb13 	bl	800e6ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c0c4:	4b3e      	ldr	r3, [pc, #248]	; (800c1c0 <USBD_CDC_Init+0x1e4>)
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	f003 020f 	and.w	r2, r3, #15
 800c0cc:	6879      	ldr	r1, [r7, #4]
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	440b      	add	r3, r1
 800c0d8:	3324      	adds	r3, #36	; 0x24
 800c0da:	2201      	movs	r2, #1
 800c0dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c0de:	4b39      	ldr	r3, [pc, #228]	; (800c1c4 <USBD_CDC_Init+0x1e8>)
 800c0e0:	7819      	ldrb	r1, [r3, #0]
 800c0e2:	2340      	movs	r3, #64	; 0x40
 800c0e4:	2202      	movs	r2, #2
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f002 faff 	bl	800e6ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c0ec:	4b35      	ldr	r3, [pc, #212]	; (800c1c4 <USBD_CDC_Init+0x1e8>)
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	f003 020f 	and.w	r2, r3, #15
 800c0f4:	6879      	ldr	r1, [r7, #4]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	4413      	add	r3, r2
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	440b      	add	r3, r1
 800c100:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c104:	2201      	movs	r2, #1
 800c106:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c108:	4b2f      	ldr	r3, [pc, #188]	; (800c1c8 <USBD_CDC_Init+0x1ec>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	f003 020f 	and.w	r2, r3, #15
 800c110:	6879      	ldr	r1, [r7, #4]
 800c112:	4613      	mov	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4413      	add	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	440b      	add	r3, r1
 800c11c:	3326      	adds	r3, #38	; 0x26
 800c11e:	2210      	movs	r2, #16
 800c120:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c122:	4b29      	ldr	r3, [pc, #164]	; (800c1c8 <USBD_CDC_Init+0x1ec>)
 800c124:	7819      	ldrb	r1, [r3, #0]
 800c126:	2308      	movs	r3, #8
 800c128:	2203      	movs	r2, #3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f002 fadd 	bl	800e6ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c130:	4b25      	ldr	r3, [pc, #148]	; (800c1c8 <USBD_CDC_Init+0x1ec>)
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	f003 020f 	and.w	r2, r3, #15
 800c138:	6879      	ldr	r1, [r7, #4]
 800c13a:	4613      	mov	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	4413      	add	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	440b      	add	r3, r1
 800c144:	3324      	adds	r3, #36	; 0x24
 800c146:	2201      	movs	r2, #1
 800c148:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	33b0      	adds	r3, #176	; 0xb0
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	4413      	add	r3, r2
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d101      	bne.n	800c184 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c180:	2302      	movs	r3, #2
 800c182:	e018      	b.n	800c1b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	7c1b      	ldrb	r3, [r3, #16]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d10a      	bne.n	800c1a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c18c:	4b0d      	ldr	r3, [pc, #52]	; (800c1c4 <USBD_CDC_Init+0x1e8>)
 800c18e:	7819      	ldrb	r1, [r3, #0]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f002 fb94 	bl	800e8c8 <USBD_LL_PrepareReceive>
 800c1a0:	e008      	b.n	800c1b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c1a2:	4b08      	ldr	r3, [pc, #32]	; (800c1c4 <USBD_CDC_Init+0x1e8>)
 800c1a4:	7819      	ldrb	r1, [r3, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c1ac:	2340      	movs	r3, #64	; 0x40
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f002 fb8a 	bl	800e8c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	200000a7 	.word	0x200000a7
 800c1c4:	200000a8 	.word	0x200000a8
 800c1c8:	200000a9 	.word	0x200000a9

0800c1cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c1d8:	4b3a      	ldr	r3, [pc, #232]	; (800c2c4 <USBD_CDC_DeInit+0xf8>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f002 faa9 	bl	800e736 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c1e4:	4b37      	ldr	r3, [pc, #220]	; (800c2c4 <USBD_CDC_DeInit+0xf8>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	f003 020f 	and.w	r2, r3, #15
 800c1ec:	6879      	ldr	r1, [r7, #4]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	440b      	add	r3, r1
 800c1f8:	3324      	adds	r3, #36	; 0x24
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c1fe:	4b32      	ldr	r3, [pc, #200]	; (800c2c8 <USBD_CDC_DeInit+0xfc>)
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	4619      	mov	r1, r3
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f002 fa96 	bl	800e736 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c20a:	4b2f      	ldr	r3, [pc, #188]	; (800c2c8 <USBD_CDC_DeInit+0xfc>)
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	f003 020f 	and.w	r2, r3, #15
 800c212:	6879      	ldr	r1, [r7, #4]
 800c214:	4613      	mov	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4413      	add	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	440b      	add	r3, r1
 800c21e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c222:	2200      	movs	r2, #0
 800c224:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c226:	4b29      	ldr	r3, [pc, #164]	; (800c2cc <USBD_CDC_DeInit+0x100>)
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f002 fa82 	bl	800e736 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c232:	4b26      	ldr	r3, [pc, #152]	; (800c2cc <USBD_CDC_DeInit+0x100>)
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	f003 020f 	and.w	r2, r3, #15
 800c23a:	6879      	ldr	r1, [r7, #4]
 800c23c:	4613      	mov	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	4413      	add	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	440b      	add	r3, r1
 800c246:	3324      	adds	r3, #36	; 0x24
 800c248:	2200      	movs	r2, #0
 800c24a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c24c:	4b1f      	ldr	r3, [pc, #124]	; (800c2cc <USBD_CDC_DeInit+0x100>)
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	f003 020f 	and.w	r2, r3, #15
 800c254:	6879      	ldr	r1, [r7, #4]
 800c256:	4613      	mov	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	4413      	add	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	440b      	add	r3, r1
 800c260:	3326      	adds	r3, #38	; 0x26
 800c262:	2200      	movs	r2, #0
 800c264:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	32b0      	adds	r2, #176	; 0xb0
 800c270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d01f      	beq.n	800c2b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	33b0      	adds	r3, #176	; 0xb0
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4413      	add	r3, r2
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	32b0      	adds	r2, #176	; 0xb0
 800c296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f002 fb56 	bl	800e94c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	32b0      	adds	r2, #176	; 0xb0
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	200000a7 	.word	0x200000a7
 800c2c8:	200000a8 	.word	0x200000a8
 800c2cc:	200000a9 	.word	0x200000a9

0800c2d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	32b0      	adds	r2, #176	; 0xb0
 800c2e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d101      	bne.n	800c300 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	e0bf      	b.n	800c480 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d050      	beq.n	800c3ae <USBD_CDC_Setup+0xde>
 800c30c:	2b20      	cmp	r3, #32
 800c30e:	f040 80af 	bne.w	800c470 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	88db      	ldrh	r3, [r3, #6]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d03a      	beq.n	800c390 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	b25b      	sxtb	r3, r3
 800c320:	2b00      	cmp	r3, #0
 800c322:	da1b      	bge.n	800c35c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	33b0      	adds	r3, #176	; 0xb0
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4413      	add	r3, r2
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c33a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c33c:	683a      	ldr	r2, [r7, #0]
 800c33e:	88d2      	ldrh	r2, [r2, #6]
 800c340:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	88db      	ldrh	r3, [r3, #6]
 800c346:	2b07      	cmp	r3, #7
 800c348:	bf28      	it	cs
 800c34a:	2307      	movcs	r3, #7
 800c34c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	89fa      	ldrh	r2, [r7, #14]
 800c352:	4619      	mov	r1, r3
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f001 fd89 	bl	800de6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c35a:	e090      	b.n	800c47e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	785a      	ldrb	r2, [r3, #1]
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	88db      	ldrh	r3, [r3, #6]
 800c36a:	2b3f      	cmp	r3, #63	; 0x3f
 800c36c:	d803      	bhi.n	800c376 <USBD_CDC_Setup+0xa6>
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	88db      	ldrh	r3, [r3, #6]
 800c372:	b2da      	uxtb	r2, r3
 800c374:	e000      	b.n	800c378 <USBD_CDC_Setup+0xa8>
 800c376:	2240      	movs	r2, #64	; 0x40
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c37e:	6939      	ldr	r1, [r7, #16]
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c386:	461a      	mov	r2, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f001 fd9b 	bl	800dec4 <USBD_CtlPrepareRx>
      break;
 800c38e:	e076      	b.n	800c47e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	33b0      	adds	r3, #176	; 0xb0
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	7850      	ldrb	r0, [r2, #1]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	4798      	blx	r3
      break;
 800c3ac:	e067      	b.n	800c47e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	785b      	ldrb	r3, [r3, #1]
 800c3b2:	2b0b      	cmp	r3, #11
 800c3b4:	d851      	bhi.n	800c45a <USBD_CDC_Setup+0x18a>
 800c3b6:	a201      	add	r2, pc, #4	; (adr r2, 800c3bc <USBD_CDC_Setup+0xec>)
 800c3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3bc:	0800c3ed 	.word	0x0800c3ed
 800c3c0:	0800c469 	.word	0x0800c469
 800c3c4:	0800c45b 	.word	0x0800c45b
 800c3c8:	0800c45b 	.word	0x0800c45b
 800c3cc:	0800c45b 	.word	0x0800c45b
 800c3d0:	0800c45b 	.word	0x0800c45b
 800c3d4:	0800c45b 	.word	0x0800c45b
 800c3d8:	0800c45b 	.word	0x0800c45b
 800c3dc:	0800c45b 	.word	0x0800c45b
 800c3e0:	0800c45b 	.word	0x0800c45b
 800c3e4:	0800c417 	.word	0x0800c417
 800c3e8:	0800c441 	.word	0x0800c441
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	2b03      	cmp	r3, #3
 800c3f6:	d107      	bne.n	800c408 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c3f8:	f107 030a 	add.w	r3, r7, #10
 800c3fc:	2202      	movs	r2, #2
 800c3fe:	4619      	mov	r1, r3
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f001 fd33 	bl	800de6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c406:	e032      	b.n	800c46e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f001 fcbd 	bl	800dd8a <USBD_CtlError>
            ret = USBD_FAIL;
 800c410:	2303      	movs	r3, #3
 800c412:	75fb      	strb	r3, [r7, #23]
          break;
 800c414:	e02b      	b.n	800c46e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	2b03      	cmp	r3, #3
 800c420:	d107      	bne.n	800c432 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c422:	f107 030d 	add.w	r3, r7, #13
 800c426:	2201      	movs	r2, #1
 800c428:	4619      	mov	r1, r3
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f001 fd1e 	bl	800de6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c430:	e01d      	b.n	800c46e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f001 fca8 	bl	800dd8a <USBD_CtlError>
            ret = USBD_FAIL;
 800c43a:	2303      	movs	r3, #3
 800c43c:	75fb      	strb	r3, [r7, #23]
          break;
 800c43e:	e016      	b.n	800c46e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c446:	b2db      	uxtb	r3, r3
 800c448:	2b03      	cmp	r3, #3
 800c44a:	d00f      	beq.n	800c46c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f001 fc9b 	bl	800dd8a <USBD_CtlError>
            ret = USBD_FAIL;
 800c454:	2303      	movs	r3, #3
 800c456:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c458:	e008      	b.n	800c46c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c45a:	6839      	ldr	r1, [r7, #0]
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f001 fc94 	bl	800dd8a <USBD_CtlError>
          ret = USBD_FAIL;
 800c462:	2303      	movs	r3, #3
 800c464:	75fb      	strb	r3, [r7, #23]
          break;
 800c466:	e002      	b.n	800c46e <USBD_CDC_Setup+0x19e>
          break;
 800c468:	bf00      	nop
 800c46a:	e008      	b.n	800c47e <USBD_CDC_Setup+0x1ae>
          break;
 800c46c:	bf00      	nop
      }
      break;
 800c46e:	e006      	b.n	800c47e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f001 fc89 	bl	800dd8a <USBD_CtlError>
      ret = USBD_FAIL;
 800c478:	2303      	movs	r3, #3
 800c47a:	75fb      	strb	r3, [r7, #23]
      break;
 800c47c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c480:	4618      	mov	r0, r3
 800c482:	3718      	adds	r7, #24
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	460b      	mov	r3, r1
 800c492:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c49a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	32b0      	adds	r2, #176	; 0xb0
 800c4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d101      	bne.n	800c4b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	e065      	b.n	800c57e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	32b0      	adds	r2, #176	; 0xb0
 800c4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c4c2:	78fb      	ldrb	r3, [r7, #3]
 800c4c4:	f003 020f 	and.w	r2, r3, #15
 800c4c8:	6879      	ldr	r1, [r7, #4]
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4413      	add	r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	440b      	add	r3, r1
 800c4d4:	3318      	adds	r3, #24
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d02f      	beq.n	800c53c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c4dc:	78fb      	ldrb	r3, [r7, #3]
 800c4de:	f003 020f 	and.w	r2, r3, #15
 800c4e2:	6879      	ldr	r1, [r7, #4]
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	4413      	add	r3, r2
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	440b      	add	r3, r1
 800c4ee:	3318      	adds	r3, #24
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	78fb      	ldrb	r3, [r7, #3]
 800c4f4:	f003 010f 	and.w	r1, r3, #15
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	00db      	lsls	r3, r3, #3
 800c4fe:	440b      	add	r3, r1
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	4403      	add	r3, r0
 800c504:	3348      	adds	r3, #72	; 0x48
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	fbb2 f1f3 	udiv	r1, r2, r3
 800c50c:	fb01 f303 	mul.w	r3, r1, r3
 800c510:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c512:	2b00      	cmp	r3, #0
 800c514:	d112      	bne.n	800c53c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c516:	78fb      	ldrb	r3, [r7, #3]
 800c518:	f003 020f 	and.w	r2, r3, #15
 800c51c:	6879      	ldr	r1, [r7, #4]
 800c51e:	4613      	mov	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4413      	add	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	440b      	add	r3, r1
 800c528:	3318      	adds	r3, #24
 800c52a:	2200      	movs	r2, #0
 800c52c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c52e:	78f9      	ldrb	r1, [r7, #3]
 800c530:	2300      	movs	r3, #0
 800c532:	2200      	movs	r2, #0
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f002 f9a6 	bl	800e886 <USBD_LL_Transmit>
 800c53a:	e01f      	b.n	800c57c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	2200      	movs	r2, #0
 800c540:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	33b0      	adds	r3, #176	; 0xb0
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	4413      	add	r3, r2
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d010      	beq.n	800c57c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	33b0      	adds	r3, #176	; 0xb0
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4413      	add	r3, r2
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c578:	78fa      	ldrb	r2, [r7, #3]
 800c57a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	460b      	mov	r3, r1
 800c590:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	32b0      	adds	r2, #176	; 0xb0
 800c59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	32b0      	adds	r2, #176	; 0xb0
 800c5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d101      	bne.n	800c5b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c5b4:	2303      	movs	r3, #3
 800c5b6:	e01a      	b.n	800c5ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c5b8:	78fb      	ldrb	r3, [r7, #3]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f002 f9a4 	bl	800e90a <USBD_LL_GetRxDataSize>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	33b0      	adds	r3, #176	; 0xb0
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b084      	sub	sp, #16
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	32b0      	adds	r2, #176	; 0xb0
 800c608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c60c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c614:	2303      	movs	r3, #3
 800c616:	e025      	b.n	800c664 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	33b0      	adds	r3, #176	; 0xb0
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4413      	add	r3, r2
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d01a      	beq.n	800c662 <USBD_CDC_EP0_RxReady+0x6c>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c632:	2bff      	cmp	r3, #255	; 0xff
 800c634:	d015      	beq.n	800c662 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	33b0      	adds	r3, #176	; 0xb0
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c64e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c656:	b292      	uxth	r2, r2
 800c658:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	22ff      	movs	r2, #255	; 0xff
 800c65e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c674:	2182      	movs	r1, #130	; 0x82
 800c676:	4818      	ldr	r0, [pc, #96]	; (800c6d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c678:	f000 fd4f 	bl	800d11a <USBD_GetEpDesc>
 800c67c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c67e:	2101      	movs	r1, #1
 800c680:	4815      	ldr	r0, [pc, #84]	; (800c6d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c682:	f000 fd4a 	bl	800d11a <USBD_GetEpDesc>
 800c686:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c688:	2181      	movs	r1, #129	; 0x81
 800c68a:	4813      	ldr	r0, [pc, #76]	; (800c6d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c68c:	f000 fd45 	bl	800d11a <USBD_GetEpDesc>
 800c690:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	2210      	movs	r2, #16
 800c69c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d006      	beq.n	800c6b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6ac:	711a      	strb	r2, [r3, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d006      	beq.n	800c6c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6c0:	711a      	strb	r2, [r3, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2243      	movs	r2, #67	; 0x43
 800c6ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c6cc:	4b02      	ldr	r3, [pc, #8]	; (800c6d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3718      	adds	r7, #24
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20000064 	.word	0x20000064

0800c6dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c6e4:	2182      	movs	r1, #130	; 0x82
 800c6e6:	4818      	ldr	r0, [pc, #96]	; (800c748 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c6e8:	f000 fd17 	bl	800d11a <USBD_GetEpDesc>
 800c6ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c6ee:	2101      	movs	r1, #1
 800c6f0:	4815      	ldr	r0, [pc, #84]	; (800c748 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c6f2:	f000 fd12 	bl	800d11a <USBD_GetEpDesc>
 800c6f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c6f8:	2181      	movs	r1, #129	; 0x81
 800c6fa:	4813      	ldr	r0, [pc, #76]	; (800c748 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c6fc:	f000 fd0d 	bl	800d11a <USBD_GetEpDesc>
 800c700:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d002      	beq.n	800c70e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2210      	movs	r2, #16
 800c70c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d006      	beq.n	800c722 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	2200      	movs	r2, #0
 800c718:	711a      	strb	r2, [r3, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f042 0202 	orr.w	r2, r2, #2
 800c720:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d006      	beq.n	800c736 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	711a      	strb	r2, [r3, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	f042 0202 	orr.w	r2, r2, #2
 800c734:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2243      	movs	r2, #67	; 0x43
 800c73a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c73c:	4b02      	ldr	r3, [pc, #8]	; (800c748 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20000064 	.word	0x20000064

0800c74c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c754:	2182      	movs	r1, #130	; 0x82
 800c756:	4818      	ldr	r0, [pc, #96]	; (800c7b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c758:	f000 fcdf 	bl	800d11a <USBD_GetEpDesc>
 800c75c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c75e:	2101      	movs	r1, #1
 800c760:	4815      	ldr	r0, [pc, #84]	; (800c7b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c762:	f000 fcda 	bl	800d11a <USBD_GetEpDesc>
 800c766:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c768:	2181      	movs	r1, #129	; 0x81
 800c76a:	4813      	ldr	r0, [pc, #76]	; (800c7b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c76c:	f000 fcd5 	bl	800d11a <USBD_GetEpDesc>
 800c770:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d002      	beq.n	800c77e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	2210      	movs	r2, #16
 800c77c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d006      	beq.n	800c792 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	2200      	movs	r2, #0
 800c788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c78c:	711a      	strb	r2, [r3, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d006      	beq.n	800c7a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7a0:	711a      	strb	r2, [r3, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2243      	movs	r2, #67	; 0x43
 800c7aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c7ac:	4b02      	ldr	r3, [pc, #8]	; (800c7b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3718      	adds	r7, #24
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	20000064 	.word	0x20000064

0800c7bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	220a      	movs	r2, #10
 800c7c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c7ca:	4b03      	ldr	r3, [pc, #12]	; (800c7d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	370c      	adds	r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr
 800c7d8:	20000020 	.word	0x20000020

0800c7dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d101      	bne.n	800c7f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c7ec:	2303      	movs	r3, #3
 800c7ee:	e009      	b.n	800c804 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	33b0      	adds	r3, #176	; 0xb0
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	4413      	add	r3, r2
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c802:	2300      	movs	r3, #0
}
 800c804:	4618      	mov	r0, r3
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c810:	b480      	push	{r7}
 800c812:	b087      	sub	sp, #28
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	32b0      	adds	r2, #176	; 0xb0
 800c826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c82a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d101      	bne.n	800c836 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c832:	2303      	movs	r3, #3
 800c834:	e008      	b.n	800c848 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	371c      	adds	r7, #28
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	32b0      	adds	r2, #176	; 0xb0
 800c868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c86c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c874:	2303      	movs	r3, #3
 800c876:	e004      	b.n	800c882 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
	...

0800c890 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	32b0      	adds	r2, #176	; 0xb0
 800c8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	32b0      	adds	r2, #176	; 0xb0
 800c8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d101      	bne.n	800c8c2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c8be:	2303      	movs	r3, #3
 800c8c0:	e025      	b.n	800c90e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d11f      	bne.n	800c90c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c8d4:	4b10      	ldr	r3, [pc, #64]	; (800c918 <USBD_CDC_TransmitPacket+0x88>)
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	f003 020f 	and.w	r2, r3, #15
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4403      	add	r3, r0
 800c8ee:	3318      	adds	r3, #24
 800c8f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c8f2:	4b09      	ldr	r3, [pc, #36]	; (800c918 <USBD_CDC_TransmitPacket+0x88>)
 800c8f4:	7819      	ldrb	r1, [r3, #0]
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f001 ffbf 	bl	800e886 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c908:	2300      	movs	r3, #0
 800c90a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	200000a7 	.word	0x200000a7

0800c91c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	32b0      	adds	r2, #176	; 0xb0
 800c92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c932:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	32b0      	adds	r2, #176	; 0xb0
 800c93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d101      	bne.n	800c94a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c946:	2303      	movs	r3, #3
 800c948:	e018      	b.n	800c97c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	7c1b      	ldrb	r3, [r3, #16]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d10a      	bne.n	800c968 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c952:	4b0c      	ldr	r3, [pc, #48]	; (800c984 <USBD_CDC_ReceivePacket+0x68>)
 800c954:	7819      	ldrb	r1, [r3, #0]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c95c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f001 ffb1 	bl	800e8c8 <USBD_LL_PrepareReceive>
 800c966:	e008      	b.n	800c97a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c968:	4b06      	ldr	r3, [pc, #24]	; (800c984 <USBD_CDC_ReceivePacket+0x68>)
 800c96a:	7819      	ldrb	r1, [r3, #0]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c972:	2340      	movs	r3, #64	; 0x40
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f001 ffa7 	bl	800e8c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	200000a8 	.word	0x200000a8

0800c988 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	4613      	mov	r3, r2
 800c994:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d101      	bne.n	800c9a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c99c:	2303      	movs	r3, #3
 800c99e:	e01f      	b.n	800c9e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d003      	beq.n	800c9c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	68ba      	ldr	r2, [r7, #8]
 800c9c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	79fa      	ldrb	r2, [r7, #7]
 800c9d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c9d4:	68f8      	ldr	r0, [r7, #12]
 800c9d6:	f001 fe21 	bl	800e61c <USBD_LL_Init>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c9de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3718      	adds	r7, #24
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c9fc:	2303      	movs	r3, #3
 800c9fe:	e025      	b.n	800ca4c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	32ae      	adds	r2, #174	; 0xae
 800ca12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00f      	beq.n	800ca3c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	32ae      	adds	r2, #174	; 0xae
 800ca26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca2c:	f107 020e 	add.w	r2, r7, #14
 800ca30:	4610      	mov	r0, r2
 800ca32:	4798      	blx	r3
 800ca34:	4602      	mov	r2, r0
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ca42:	1c5a      	adds	r2, r3, #1
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f001 fe29 	bl	800e6b4 <USBD_LL_Start>
 800ca62:	4603      	mov	r3, r0
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca74:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr

0800ca82 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b084      	sub	sp, #16
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d009      	beq.n	800cab0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	78fa      	ldrb	r2, [r7, #3]
 800caa6:	4611      	mov	r1, r2
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	4798      	blx	r3
 800caac:	4603      	mov	r3, r0
 800caae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	460b      	mov	r3, r1
 800cac4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	78fa      	ldrb	r2, [r7, #3]
 800cad4:	4611      	mov	r1, r2
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	4798      	blx	r3
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cae0:	2303      	movs	r3, #3
 800cae2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b084      	sub	sp, #16
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f001 f908 	bl	800dd16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cb14:	461a      	mov	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cb22:	f003 031f 	and.w	r3, r3, #31
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d01a      	beq.n	800cb60 <USBD_LL_SetupStage+0x72>
 800cb2a:	2b02      	cmp	r3, #2
 800cb2c:	d822      	bhi.n	800cb74 <USBD_LL_SetupStage+0x86>
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d002      	beq.n	800cb38 <USBD_LL_SetupStage+0x4a>
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d00a      	beq.n	800cb4c <USBD_LL_SetupStage+0x5e>
 800cb36:	e01d      	b.n	800cb74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cb3e:	4619      	mov	r1, r3
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 fb5f 	bl	800d204 <USBD_StdDevReq>
 800cb46:	4603      	mov	r3, r0
 800cb48:	73fb      	strb	r3, [r7, #15]
      break;
 800cb4a:	e020      	b.n	800cb8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cb52:	4619      	mov	r1, r3
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 fbc7 	bl	800d2e8 <USBD_StdItfReq>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb5e:	e016      	b.n	800cb8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cb66:	4619      	mov	r1, r3
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 fc29 	bl	800d3c0 <USBD_StdEPReq>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	73fb      	strb	r3, [r7, #15]
      break;
 800cb72:	e00c      	b.n	800cb8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cb7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	4619      	mov	r1, r3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f001 fdf6 	bl	800e774 <USBD_LL_StallEP>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	73fb      	strb	r3, [r7, #15]
      break;
 800cb8c:	bf00      	nop
  }

  return ret;
 800cb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3710      	adds	r7, #16
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b086      	sub	sp, #24
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	460b      	mov	r3, r1
 800cba2:	607a      	str	r2, [r7, #4]
 800cba4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cba6:	2300      	movs	r3, #0
 800cba8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cbaa:	7afb      	ldrb	r3, [r7, #11]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d16e      	bne.n	800cc8e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cbb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cbbe:	2b03      	cmp	r3, #3
 800cbc0:	f040 8098 	bne.w	800ccf4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	689a      	ldr	r2, [r3, #8]
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d913      	bls.n	800cbf8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	689a      	ldr	r2, [r3, #8]
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	1ad2      	subs	r2, r2, r3
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	68da      	ldr	r2, [r3, #12]
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	689b      	ldr	r3, [r3, #8]
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	bf28      	it	cs
 800cbea:	4613      	movcs	r3, r2
 800cbec:	461a      	mov	r2, r3
 800cbee:	6879      	ldr	r1, [r7, #4]
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f001 f984 	bl	800defe <USBD_CtlContinueRx>
 800cbf6:	e07d      	b.n	800ccf4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cbfe:	f003 031f 	and.w	r3, r3, #31
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	d014      	beq.n	800cc30 <USBD_LL_DataOutStage+0x98>
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d81d      	bhi.n	800cc46 <USBD_LL_DataOutStage+0xae>
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d002      	beq.n	800cc14 <USBD_LL_DataOutStage+0x7c>
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d003      	beq.n	800cc1a <USBD_LL_DataOutStage+0x82>
 800cc12:	e018      	b.n	800cc46 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cc14:	2300      	movs	r3, #0
 800cc16:	75bb      	strb	r3, [r7, #22]
            break;
 800cc18:	e018      	b.n	800cc4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	4619      	mov	r1, r3
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f000 fa5e 	bl	800d0e6 <USBD_CoreFindIF>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	75bb      	strb	r3, [r7, #22]
            break;
 800cc2e:	e00d      	b.n	800cc4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	4619      	mov	r1, r3
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f000 fa60 	bl	800d100 <USBD_CoreFindEP>
 800cc40:	4603      	mov	r3, r0
 800cc42:	75bb      	strb	r3, [r7, #22]
            break;
 800cc44:	e002      	b.n	800cc4c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cc46:	2300      	movs	r3, #0
 800cc48:	75bb      	strb	r3, [r7, #22]
            break;
 800cc4a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cc4c:	7dbb      	ldrb	r3, [r7, #22]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d119      	bne.n	800cc86 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d113      	bne.n	800cc86 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cc5e:	7dba      	ldrb	r2, [r7, #22]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	32ae      	adds	r2, #174	; 0xae
 800cc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00b      	beq.n	800cc86 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cc6e:	7dba      	ldrb	r2, [r7, #22]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cc76:	7dba      	ldrb	r2, [r7, #22]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	32ae      	adds	r2, #174	; 0xae
 800cc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f001 f94a 	bl	800df20 <USBD_CtlSendStatus>
 800cc8c:	e032      	b.n	800ccf4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cc8e:	7afb      	ldrb	r3, [r7, #11]
 800cc90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	4619      	mov	r1, r3
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f000 fa31 	bl	800d100 <USBD_CoreFindEP>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cca2:	7dbb      	ldrb	r3, [r7, #22]
 800cca4:	2bff      	cmp	r3, #255	; 0xff
 800cca6:	d025      	beq.n	800ccf4 <USBD_LL_DataOutStage+0x15c>
 800cca8:	7dbb      	ldrb	r3, [r7, #22]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d122      	bne.n	800ccf4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b03      	cmp	r3, #3
 800ccb8:	d117      	bne.n	800ccea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ccba:	7dba      	ldrb	r2, [r7, #22]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	32ae      	adds	r2, #174	; 0xae
 800ccc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc4:	699b      	ldr	r3, [r3, #24]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00f      	beq.n	800ccea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ccca:	7dba      	ldrb	r2, [r7, #22]
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ccd2:	7dba      	ldrb	r2, [r7, #22]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	32ae      	adds	r2, #174	; 0xae
 800ccd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccdc:	699b      	ldr	r3, [r3, #24]
 800ccde:	7afa      	ldrb	r2, [r7, #11]
 800cce0:	4611      	mov	r1, r2
 800cce2:	68f8      	ldr	r0, [r7, #12]
 800cce4:	4798      	blx	r3
 800cce6:	4603      	mov	r3, r0
 800cce8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d001      	beq.n	800ccf4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ccf0:	7dfb      	ldrb	r3, [r7, #23]
 800ccf2:	e000      	b.n	800ccf6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3718      	adds	r7, #24
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b086      	sub	sp, #24
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	60f8      	str	r0, [r7, #12]
 800cd06:	460b      	mov	r3, r1
 800cd08:	607a      	str	r2, [r7, #4]
 800cd0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cd0c:	7afb      	ldrb	r3, [r7, #11]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d16f      	bne.n	800cdf2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	3314      	adds	r3, #20
 800cd16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd1e:	2b02      	cmp	r3, #2
 800cd20:	d15a      	bne.n	800cdd8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	689a      	ldr	r2, [r3, #8]
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d914      	bls.n	800cd58 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	689a      	ldr	r2, [r3, #8]
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	1ad2      	subs	r2, r2, r3
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	461a      	mov	r2, r3
 800cd42:	6879      	ldr	r1, [r7, #4]
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f001 f8ac 	bl	800dea2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	2100      	movs	r1, #0
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f001 fdb9 	bl	800e8c8 <USBD_LL_PrepareReceive>
 800cd56:	e03f      	b.n	800cdd8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	68da      	ldr	r2, [r3, #12]
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d11c      	bne.n	800cd9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	685a      	ldr	r2, [r3, #4]
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d316      	bcc.n	800cd9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	685a      	ldr	r2, [r3, #4]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d20f      	bcs.n	800cd9e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cd7e:	2200      	movs	r2, #0
 800cd80:	2100      	movs	r1, #0
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f001 f88d 	bl	800dea2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd90:	2300      	movs	r3, #0
 800cd92:	2200      	movs	r2, #0
 800cd94:	2100      	movs	r1, #0
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f001 fd96 	bl	800e8c8 <USBD_LL_PrepareReceive>
 800cd9c:	e01c      	b.n	800cdd8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d10f      	bne.n	800cdca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d009      	beq.n	800cdca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdca:	2180      	movs	r1, #128	; 0x80
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f001 fcd1 	bl	800e774 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f001 f8b7 	bl	800df46 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d03a      	beq.n	800ce58 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f7ff fe42 	bl	800ca6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cdf0:	e032      	b.n	800ce58 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cdf2:	7afb      	ldrb	r3, [r7, #11]
 800cdf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	f000 f97f 	bl	800d100 <USBD_CoreFindEP>
 800ce02:	4603      	mov	r3, r0
 800ce04:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce06:	7dfb      	ldrb	r3, [r7, #23]
 800ce08:	2bff      	cmp	r3, #255	; 0xff
 800ce0a:	d025      	beq.n	800ce58 <USBD_LL_DataInStage+0x15a>
 800ce0c:	7dfb      	ldrb	r3, [r7, #23]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d122      	bne.n	800ce58 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b03      	cmp	r3, #3
 800ce1c:	d11c      	bne.n	800ce58 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ce1e:	7dfa      	ldrb	r2, [r7, #23]
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	32ae      	adds	r2, #174	; 0xae
 800ce24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce28:	695b      	ldr	r3, [r3, #20]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d014      	beq.n	800ce58 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ce2e:	7dfa      	ldrb	r2, [r7, #23]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ce36:	7dfa      	ldrb	r2, [r7, #23]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	32ae      	adds	r2, #174	; 0xae
 800ce3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce40:	695b      	ldr	r3, [r3, #20]
 800ce42:	7afa      	ldrb	r2, [r7, #11]
 800ce44:	4611      	mov	r1, r2
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	4798      	blx	r3
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ce4e:	7dbb      	ldrb	r3, [r7, #22]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d001      	beq.n	800ce58 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ce54:	7dbb      	ldrb	r3, [r7, #22]
 800ce56:	e000      	b.n	800ce5a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3718      	adds	r7, #24
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b084      	sub	sp, #16
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2201      	movs	r2, #1
 800ce72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d014      	beq.n	800cec8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00e      	beq.n	800cec8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	6852      	ldr	r2, [r2, #4]
 800ceb6:	b2d2      	uxtb	r2, r2
 800ceb8:	4611      	mov	r1, r2
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	4798      	blx	r3
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d001      	beq.n	800cec8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cec4:	2303      	movs	r3, #3
 800cec6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cec8:	2340      	movs	r3, #64	; 0x40
 800ceca:	2200      	movs	r2, #0
 800cecc:	2100      	movs	r1, #0
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f001 fc0b 	bl	800e6ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2240      	movs	r2, #64	; 0x40
 800cee0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cee4:	2340      	movs	r3, #64	; 0x40
 800cee6:	2200      	movs	r2, #0
 800cee8:	2180      	movs	r1, #128	; 0x80
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f001 fbfd 	bl	800e6ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2240      	movs	r2, #64	; 0x40
 800cefa:	621a      	str	r2, [r3, #32]

  return ret;
 800cefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b083      	sub	sp, #12
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
 800cf0e:	460b      	mov	r3, r1
 800cf10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	78fa      	ldrb	r2, [r7, #3]
 800cf16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cf26:	b480      	push	{r7}
 800cf28:	b083      	sub	sp, #12
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf34:	b2da      	uxtb	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2204      	movs	r2, #4
 800cf40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	370c      	adds	r7, #12
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr

0800cf52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cf52:	b480      	push	{r7}
 800cf54:	b083      	sub	sp, #12
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	2b04      	cmp	r3, #4
 800cf64:	d106      	bne.n	800cf74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b082      	sub	sp, #8
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	2b03      	cmp	r3, #3
 800cf94:	d110      	bne.n	800cfb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d00b      	beq.n	800cfb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfa6:	69db      	ldr	r3, [r3, #28]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d005      	beq.n	800cfb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfb2:	69db      	ldr	r3, [r3, #28]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
 800cfca:	460b      	mov	r3, r1
 800cfcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	32ae      	adds	r2, #174	; 0xae
 800cfd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d101      	bne.n	800cfe4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cfe0:	2303      	movs	r3, #3
 800cfe2:	e01c      	b.n	800d01e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	2b03      	cmp	r3, #3
 800cfee:	d115      	bne.n	800d01c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	32ae      	adds	r2, #174	; 0xae
 800cffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cffe:	6a1b      	ldr	r3, [r3, #32]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00b      	beq.n	800d01c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	32ae      	adds	r2, #174	; 0xae
 800d00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d012:	6a1b      	ldr	r3, [r3, #32]
 800d014:	78fa      	ldrb	r2, [r7, #3]
 800d016:	4611      	mov	r1, r2
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b082      	sub	sp, #8
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
 800d02e:	460b      	mov	r3, r1
 800d030:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	32ae      	adds	r2, #174	; 0xae
 800d03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d101      	bne.n	800d048 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d044:	2303      	movs	r3, #3
 800d046:	e01c      	b.n	800d082 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	2b03      	cmp	r3, #3
 800d052:	d115      	bne.n	800d080 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	32ae      	adds	r2, #174	; 0xae
 800d05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d064:	2b00      	cmp	r3, #0
 800d066:	d00b      	beq.n	800d080 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	32ae      	adds	r2, #174	; 0xae
 800d072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d078:	78fa      	ldrb	r2, [r7, #3]
 800d07a:	4611      	mov	r1, r2
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3708      	adds	r7, #8
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d08a:	b480      	push	{r7}
 800d08c:	b083      	sub	sp, #12
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d092:	2300      	movs	r3, #0
}
 800d094:	4618      	mov	r0, r3
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00e      	beq.n	800d0dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	687a      	ldr	r2, [r7, #4]
 800d0c8:	6852      	ldr	r2, [r2, #4]
 800d0ca:	b2d2      	uxtb	r2, r2
 800d0cc:	4611      	mov	r1, r2
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	4798      	blx	r3
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d001      	beq.n	800d0dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d0d8:	2303      	movs	r3, #3
 800d0da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0e6:	b480      	push	{r7}
 800d0e8:	b083      	sub	sp, #12
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	460b      	mov	r3, r1
 800d10a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d10c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d10e:	4618      	mov	r0, r3
 800d110:	370c      	adds	r7, #12
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr

0800d11a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b086      	sub	sp, #24
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
 800d122:	460b      	mov	r3, r1
 800d124:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	885b      	ldrh	r3, [r3, #2]
 800d136:	b29a      	uxth	r2, r3
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	429a      	cmp	r2, r3
 800d140:	d920      	bls.n	800d184 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	b29b      	uxth	r3, r3
 800d148:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d14a:	e013      	b.n	800d174 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d14c:	f107 030a 	add.w	r3, r7, #10
 800d150:	4619      	mov	r1, r3
 800d152:	6978      	ldr	r0, [r7, #20]
 800d154:	f000 f81b 	bl	800d18e <USBD_GetNextDesc>
 800d158:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	785b      	ldrb	r3, [r3, #1]
 800d15e:	2b05      	cmp	r3, #5
 800d160:	d108      	bne.n	800d174 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	789b      	ldrb	r3, [r3, #2]
 800d16a:	78fa      	ldrb	r2, [r7, #3]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d008      	beq.n	800d182 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d170:	2300      	movs	r3, #0
 800d172:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	885b      	ldrh	r3, [r3, #2]
 800d178:	b29a      	uxth	r2, r3
 800d17a:	897b      	ldrh	r3, [r7, #10]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d8e5      	bhi.n	800d14c <USBD_GetEpDesc+0x32>
 800d180:	e000      	b.n	800d184 <USBD_GetEpDesc+0x6a>
          break;
 800d182:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d184:	693b      	ldr	r3, [r7, #16]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3718      	adds	r7, #24
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d18e:	b480      	push	{r7}
 800d190:	b085      	sub	sp, #20
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	881a      	ldrh	r2, [r3, #0]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	4413      	add	r3, r2
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3714      	adds	r7, #20
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b087      	sub	sp, #28
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d1e6:	8a3b      	ldrh	r3, [r7, #16]
 800d1e8:	021b      	lsls	r3, r3, #8
 800d1ea:	b21a      	sxth	r2, r3
 800d1ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	b21b      	sxth	r3, r3
 800d1f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d1f6:	89fb      	ldrh	r3, [r7, #14]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	371c      	adds	r7, #28
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d20e:	2300      	movs	r3, #0
 800d210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d21a:	2b40      	cmp	r3, #64	; 0x40
 800d21c:	d005      	beq.n	800d22a <USBD_StdDevReq+0x26>
 800d21e:	2b40      	cmp	r3, #64	; 0x40
 800d220:	d857      	bhi.n	800d2d2 <USBD_StdDevReq+0xce>
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00f      	beq.n	800d246 <USBD_StdDevReq+0x42>
 800d226:	2b20      	cmp	r3, #32
 800d228:	d153      	bne.n	800d2d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	32ae      	adds	r2, #174	; 0xae
 800d234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	6839      	ldr	r1, [r7, #0]
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	4798      	blx	r3
 800d240:	4603      	mov	r3, r0
 800d242:	73fb      	strb	r3, [r7, #15]
      break;
 800d244:	e04a      	b.n	800d2dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	785b      	ldrb	r3, [r3, #1]
 800d24a:	2b09      	cmp	r3, #9
 800d24c:	d83b      	bhi.n	800d2c6 <USBD_StdDevReq+0xc2>
 800d24e:	a201      	add	r2, pc, #4	; (adr r2, 800d254 <USBD_StdDevReq+0x50>)
 800d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d254:	0800d2a9 	.word	0x0800d2a9
 800d258:	0800d2bd 	.word	0x0800d2bd
 800d25c:	0800d2c7 	.word	0x0800d2c7
 800d260:	0800d2b3 	.word	0x0800d2b3
 800d264:	0800d2c7 	.word	0x0800d2c7
 800d268:	0800d287 	.word	0x0800d287
 800d26c:	0800d27d 	.word	0x0800d27d
 800d270:	0800d2c7 	.word	0x0800d2c7
 800d274:	0800d29f 	.word	0x0800d29f
 800d278:	0800d291 	.word	0x0800d291
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d27c:	6839      	ldr	r1, [r7, #0]
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 fa3c 	bl	800d6fc <USBD_GetDescriptor>
          break;
 800d284:	e024      	b.n	800d2d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fba1 	bl	800d9d0 <USBD_SetAddress>
          break;
 800d28e:	e01f      	b.n	800d2d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d290:	6839      	ldr	r1, [r7, #0]
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 fbe0 	bl	800da58 <USBD_SetConfig>
 800d298:	4603      	mov	r3, r0
 800d29a:	73fb      	strb	r3, [r7, #15]
          break;
 800d29c:	e018      	b.n	800d2d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d29e:	6839      	ldr	r1, [r7, #0]
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fc83 	bl	800dbac <USBD_GetConfig>
          break;
 800d2a6:	e013      	b.n	800d2d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d2a8:	6839      	ldr	r1, [r7, #0]
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 fcb4 	bl	800dc18 <USBD_GetStatus>
          break;
 800d2b0:	e00e      	b.n	800d2d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d2b2:	6839      	ldr	r1, [r7, #0]
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 fce3 	bl	800dc80 <USBD_SetFeature>
          break;
 800d2ba:	e009      	b.n	800d2d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d2bc:	6839      	ldr	r1, [r7, #0]
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 fd07 	bl	800dcd2 <USBD_ClrFeature>
          break;
 800d2c4:	e004      	b.n	800d2d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d2c6:	6839      	ldr	r1, [r7, #0]
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 fd5e 	bl	800dd8a <USBD_CtlError>
          break;
 800d2ce:	bf00      	nop
      }
      break;
 800d2d0:	e004      	b.n	800d2dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 fd58 	bl	800dd8a <USBD_CtlError>
      break;
 800d2da:	bf00      	nop
  }

  return ret;
 800d2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop

0800d2e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2fe:	2b40      	cmp	r3, #64	; 0x40
 800d300:	d005      	beq.n	800d30e <USBD_StdItfReq+0x26>
 800d302:	2b40      	cmp	r3, #64	; 0x40
 800d304:	d852      	bhi.n	800d3ac <USBD_StdItfReq+0xc4>
 800d306:	2b00      	cmp	r3, #0
 800d308:	d001      	beq.n	800d30e <USBD_StdItfReq+0x26>
 800d30a:	2b20      	cmp	r3, #32
 800d30c:	d14e      	bne.n	800d3ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d314:	b2db      	uxtb	r3, r3
 800d316:	3b01      	subs	r3, #1
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d840      	bhi.n	800d39e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	889b      	ldrh	r3, [r3, #4]
 800d320:	b2db      	uxtb	r3, r3
 800d322:	2b01      	cmp	r3, #1
 800d324:	d836      	bhi.n	800d394 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	889b      	ldrh	r3, [r3, #4]
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	4619      	mov	r1, r3
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f7ff fed9 	bl	800d0e6 <USBD_CoreFindIF>
 800d334:	4603      	mov	r3, r0
 800d336:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d338:	7bbb      	ldrb	r3, [r7, #14]
 800d33a:	2bff      	cmp	r3, #255	; 0xff
 800d33c:	d01d      	beq.n	800d37a <USBD_StdItfReq+0x92>
 800d33e:	7bbb      	ldrb	r3, [r7, #14]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d11a      	bne.n	800d37a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d344:	7bba      	ldrb	r2, [r7, #14]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	32ae      	adds	r2, #174	; 0xae
 800d34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d00f      	beq.n	800d374 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d354:	7bba      	ldrb	r2, [r7, #14]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d35c:	7bba      	ldrb	r2, [r7, #14]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	32ae      	adds	r2, #174	; 0xae
 800d362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	6839      	ldr	r1, [r7, #0]
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	4798      	blx	r3
 800d36e:	4603      	mov	r3, r0
 800d370:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d372:	e004      	b.n	800d37e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d374:	2303      	movs	r3, #3
 800d376:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d378:	e001      	b.n	800d37e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d37a:	2303      	movs	r3, #3
 800d37c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	88db      	ldrh	r3, [r3, #6]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d110      	bne.n	800d3a8 <USBD_StdItfReq+0xc0>
 800d386:	7bfb      	ldrb	r3, [r7, #15]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10d      	bne.n	800d3a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 fdc7 	bl	800df20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d392:	e009      	b.n	800d3a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d394:	6839      	ldr	r1, [r7, #0]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 fcf7 	bl	800dd8a <USBD_CtlError>
          break;
 800d39c:	e004      	b.n	800d3a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d39e:	6839      	ldr	r1, [r7, #0]
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fcf2 	bl	800dd8a <USBD_CtlError>
          break;
 800d3a6:	e000      	b.n	800d3aa <USBD_StdItfReq+0xc2>
          break;
 800d3a8:	bf00      	nop
      }
      break;
 800d3aa:	e004      	b.n	800d3b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d3ac:	6839      	ldr	r1, [r7, #0]
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 fceb 	bl	800dd8a <USBD_CtlError>
      break;
 800d3b4:	bf00      	nop
  }

  return ret;
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	889b      	ldrh	r3, [r3, #4]
 800d3d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3dc:	2b40      	cmp	r3, #64	; 0x40
 800d3de:	d007      	beq.n	800d3f0 <USBD_StdEPReq+0x30>
 800d3e0:	2b40      	cmp	r3, #64	; 0x40
 800d3e2:	f200 817f 	bhi.w	800d6e4 <USBD_StdEPReq+0x324>
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d02a      	beq.n	800d440 <USBD_StdEPReq+0x80>
 800d3ea:	2b20      	cmp	r3, #32
 800d3ec:	f040 817a 	bne.w	800d6e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d3f0:	7bbb      	ldrb	r3, [r7, #14]
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f7ff fe83 	bl	800d100 <USBD_CoreFindEP>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3fe:	7b7b      	ldrb	r3, [r7, #13]
 800d400:	2bff      	cmp	r3, #255	; 0xff
 800d402:	f000 8174 	beq.w	800d6ee <USBD_StdEPReq+0x32e>
 800d406:	7b7b      	ldrb	r3, [r7, #13]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f040 8170 	bne.w	800d6ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d40e:	7b7a      	ldrb	r2, [r7, #13]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d416:	7b7a      	ldrb	r2, [r7, #13]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	32ae      	adds	r2, #174	; 0xae
 800d41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	2b00      	cmp	r3, #0
 800d424:	f000 8163 	beq.w	800d6ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d428:	7b7a      	ldrb	r2, [r7, #13]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	32ae      	adds	r2, #174	; 0xae
 800d42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	6839      	ldr	r1, [r7, #0]
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	4798      	blx	r3
 800d43a:	4603      	mov	r3, r0
 800d43c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d43e:	e156      	b.n	800d6ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	785b      	ldrb	r3, [r3, #1]
 800d444:	2b03      	cmp	r3, #3
 800d446:	d008      	beq.n	800d45a <USBD_StdEPReq+0x9a>
 800d448:	2b03      	cmp	r3, #3
 800d44a:	f300 8145 	bgt.w	800d6d8 <USBD_StdEPReq+0x318>
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f000 809b 	beq.w	800d58a <USBD_StdEPReq+0x1ca>
 800d454:	2b01      	cmp	r3, #1
 800d456:	d03c      	beq.n	800d4d2 <USBD_StdEPReq+0x112>
 800d458:	e13e      	b.n	800d6d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d460:	b2db      	uxtb	r3, r3
 800d462:	2b02      	cmp	r3, #2
 800d464:	d002      	beq.n	800d46c <USBD_StdEPReq+0xac>
 800d466:	2b03      	cmp	r3, #3
 800d468:	d016      	beq.n	800d498 <USBD_StdEPReq+0xd8>
 800d46a:	e02c      	b.n	800d4c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d46c:	7bbb      	ldrb	r3, [r7, #14]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00d      	beq.n	800d48e <USBD_StdEPReq+0xce>
 800d472:	7bbb      	ldrb	r3, [r7, #14]
 800d474:	2b80      	cmp	r3, #128	; 0x80
 800d476:	d00a      	beq.n	800d48e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d478:	7bbb      	ldrb	r3, [r7, #14]
 800d47a:	4619      	mov	r1, r3
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f001 f979 	bl	800e774 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d482:	2180      	movs	r1, #128	; 0x80
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f001 f975 	bl	800e774 <USBD_LL_StallEP>
 800d48a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d48c:	e020      	b.n	800d4d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d48e:	6839      	ldr	r1, [r7, #0]
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 fc7a 	bl	800dd8a <USBD_CtlError>
              break;
 800d496:	e01b      	b.n	800d4d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	885b      	ldrh	r3, [r3, #2]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10e      	bne.n	800d4be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d4a0:	7bbb      	ldrb	r3, [r7, #14]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00b      	beq.n	800d4be <USBD_StdEPReq+0xfe>
 800d4a6:	7bbb      	ldrb	r3, [r7, #14]
 800d4a8:	2b80      	cmp	r3, #128	; 0x80
 800d4aa:	d008      	beq.n	800d4be <USBD_StdEPReq+0xfe>
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	88db      	ldrh	r3, [r3, #6]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d104      	bne.n	800d4be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4b4:	7bbb      	ldrb	r3, [r7, #14]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f001 f95b 	bl	800e774 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 fd2e 	bl	800df20 <USBD_CtlSendStatus>

              break;
 800d4c4:	e004      	b.n	800d4d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 fc5e 	bl	800dd8a <USBD_CtlError>
              break;
 800d4ce:	bf00      	nop
          }
          break;
 800d4d0:	e107      	b.n	800d6e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d002      	beq.n	800d4e4 <USBD_StdEPReq+0x124>
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d016      	beq.n	800d510 <USBD_StdEPReq+0x150>
 800d4e2:	e04b      	b.n	800d57c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4e4:	7bbb      	ldrb	r3, [r7, #14]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00d      	beq.n	800d506 <USBD_StdEPReq+0x146>
 800d4ea:	7bbb      	ldrb	r3, [r7, #14]
 800d4ec:	2b80      	cmp	r3, #128	; 0x80
 800d4ee:	d00a      	beq.n	800d506 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4f0:	7bbb      	ldrb	r3, [r7, #14]
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f001 f93d 	bl	800e774 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4fa:	2180      	movs	r1, #128	; 0x80
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f001 f939 	bl	800e774 <USBD_LL_StallEP>
 800d502:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d504:	e040      	b.n	800d588 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d506:	6839      	ldr	r1, [r7, #0]
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 fc3e 	bl	800dd8a <USBD_CtlError>
              break;
 800d50e:	e03b      	b.n	800d588 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	885b      	ldrh	r3, [r3, #2]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d136      	bne.n	800d586 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d518:	7bbb      	ldrb	r3, [r7, #14]
 800d51a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d004      	beq.n	800d52c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d522:	7bbb      	ldrb	r3, [r7, #14]
 800d524:	4619      	mov	r1, r3
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f001 f943 	bl	800e7b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 fcf7 	bl	800df20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d532:	7bbb      	ldrb	r3, [r7, #14]
 800d534:	4619      	mov	r1, r3
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f7ff fde2 	bl	800d100 <USBD_CoreFindEP>
 800d53c:	4603      	mov	r3, r0
 800d53e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d540:	7b7b      	ldrb	r3, [r7, #13]
 800d542:	2bff      	cmp	r3, #255	; 0xff
 800d544:	d01f      	beq.n	800d586 <USBD_StdEPReq+0x1c6>
 800d546:	7b7b      	ldrb	r3, [r7, #13]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d11c      	bne.n	800d586 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d54c:	7b7a      	ldrb	r2, [r7, #13]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d554:	7b7a      	ldrb	r2, [r7, #13]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	32ae      	adds	r2, #174	; 0xae
 800d55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d010      	beq.n	800d586 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d564:	7b7a      	ldrb	r2, [r7, #13]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	32ae      	adds	r2, #174	; 0xae
 800d56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	6839      	ldr	r1, [r7, #0]
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	4798      	blx	r3
 800d576:	4603      	mov	r3, r0
 800d578:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d57a:	e004      	b.n	800d586 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d57c:	6839      	ldr	r1, [r7, #0]
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 fc03 	bl	800dd8a <USBD_CtlError>
              break;
 800d584:	e000      	b.n	800d588 <USBD_StdEPReq+0x1c8>
              break;
 800d586:	bf00      	nop
          }
          break;
 800d588:	e0ab      	b.n	800d6e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d590:	b2db      	uxtb	r3, r3
 800d592:	2b02      	cmp	r3, #2
 800d594:	d002      	beq.n	800d59c <USBD_StdEPReq+0x1dc>
 800d596:	2b03      	cmp	r3, #3
 800d598:	d032      	beq.n	800d600 <USBD_StdEPReq+0x240>
 800d59a:	e097      	b.n	800d6cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d59c:	7bbb      	ldrb	r3, [r7, #14]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d007      	beq.n	800d5b2 <USBD_StdEPReq+0x1f2>
 800d5a2:	7bbb      	ldrb	r3, [r7, #14]
 800d5a4:	2b80      	cmp	r3, #128	; 0x80
 800d5a6:	d004      	beq.n	800d5b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d5a8:	6839      	ldr	r1, [r7, #0]
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fbed 	bl	800dd8a <USBD_CtlError>
                break;
 800d5b0:	e091      	b.n	800d6d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	da0b      	bge.n	800d5d2 <USBD_StdEPReq+0x212>
 800d5ba:	7bbb      	ldrb	r3, [r7, #14]
 800d5bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5c0:	4613      	mov	r3, r2
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	3310      	adds	r3, #16
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	3304      	adds	r3, #4
 800d5d0:	e00b      	b.n	800d5ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d5d2:	7bbb      	ldrb	r3, [r7, #14]
 800d5d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5d8:	4613      	mov	r3, r2
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	4413      	add	r3, r2
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	3304      	adds	r3, #4
 800d5ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	2202      	movs	r2, #2
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 fc37 	bl	800de6c <USBD_CtlSendData>
              break;
 800d5fe:	e06a      	b.n	800d6d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d604:	2b00      	cmp	r3, #0
 800d606:	da11      	bge.n	800d62c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d608:	7bbb      	ldrb	r3, [r7, #14]
 800d60a:	f003 020f 	and.w	r2, r3, #15
 800d60e:	6879      	ldr	r1, [r7, #4]
 800d610:	4613      	mov	r3, r2
 800d612:	009b      	lsls	r3, r3, #2
 800d614:	4413      	add	r3, r2
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	440b      	add	r3, r1
 800d61a:	3324      	adds	r3, #36	; 0x24
 800d61c:	881b      	ldrh	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d117      	bne.n	800d652 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d622:	6839      	ldr	r1, [r7, #0]
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 fbb0 	bl	800dd8a <USBD_CtlError>
                  break;
 800d62a:	e054      	b.n	800d6d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d62c:	7bbb      	ldrb	r3, [r7, #14]
 800d62e:	f003 020f 	and.w	r2, r3, #15
 800d632:	6879      	ldr	r1, [r7, #4]
 800d634:	4613      	mov	r3, r2
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	4413      	add	r3, r2
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	440b      	add	r3, r1
 800d63e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d642:	881b      	ldrh	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d104      	bne.n	800d652 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d648:	6839      	ldr	r1, [r7, #0]
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 fb9d 	bl	800dd8a <USBD_CtlError>
                  break;
 800d650:	e041      	b.n	800d6d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d652:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d656:	2b00      	cmp	r3, #0
 800d658:	da0b      	bge.n	800d672 <USBD_StdEPReq+0x2b2>
 800d65a:	7bbb      	ldrb	r3, [r7, #14]
 800d65c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d660:	4613      	mov	r3, r2
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	4413      	add	r3, r2
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	3310      	adds	r3, #16
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	4413      	add	r3, r2
 800d66e:	3304      	adds	r3, #4
 800d670:	e00b      	b.n	800d68a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d672:	7bbb      	ldrb	r3, [r7, #14]
 800d674:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d678:	4613      	mov	r3, r2
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	4413      	add	r3, r2
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	4413      	add	r3, r2
 800d688:	3304      	adds	r3, #4
 800d68a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d68c:	7bbb      	ldrb	r3, [r7, #14]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d002      	beq.n	800d698 <USBD_StdEPReq+0x2d8>
 800d692:	7bbb      	ldrb	r3, [r7, #14]
 800d694:	2b80      	cmp	r3, #128	; 0x80
 800d696:	d103      	bne.n	800d6a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	2200      	movs	r2, #0
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	e00e      	b.n	800d6be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d6a0:	7bbb      	ldrb	r3, [r7, #14]
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f001 f8a3 	bl	800e7f0 <USBD_LL_IsStallEP>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d003      	beq.n	800d6b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	601a      	str	r2, [r3, #0]
 800d6b6:	e002      	b.n	800d6be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	2202      	movs	r2, #2
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 fbd1 	bl	800de6c <USBD_CtlSendData>
              break;
 800d6ca:	e004      	b.n	800d6d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d6cc:	6839      	ldr	r1, [r7, #0]
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 fb5b 	bl	800dd8a <USBD_CtlError>
              break;
 800d6d4:	bf00      	nop
          }
          break;
 800d6d6:	e004      	b.n	800d6e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d6d8:	6839      	ldr	r1, [r7, #0]
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 fb55 	bl	800dd8a <USBD_CtlError>
          break;
 800d6e0:	bf00      	nop
      }
      break;
 800d6e2:	e005      	b.n	800d6f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d6e4:	6839      	ldr	r1, [r7, #0]
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 fb4f 	bl	800dd8a <USBD_CtlError>
      break;
 800d6ec:	e000      	b.n	800d6f0 <USBD_StdEPReq+0x330>
      break;
 800d6ee:	bf00      	nop
  }

  return ret;
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
	...

0800d6fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d706:	2300      	movs	r3, #0
 800d708:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d70a:	2300      	movs	r3, #0
 800d70c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d70e:	2300      	movs	r3, #0
 800d710:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	885b      	ldrh	r3, [r3, #2]
 800d716:	0a1b      	lsrs	r3, r3, #8
 800d718:	b29b      	uxth	r3, r3
 800d71a:	3b01      	subs	r3, #1
 800d71c:	2b06      	cmp	r3, #6
 800d71e:	f200 8128 	bhi.w	800d972 <USBD_GetDescriptor+0x276>
 800d722:	a201      	add	r2, pc, #4	; (adr r2, 800d728 <USBD_GetDescriptor+0x2c>)
 800d724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d728:	0800d745 	.word	0x0800d745
 800d72c:	0800d75d 	.word	0x0800d75d
 800d730:	0800d79d 	.word	0x0800d79d
 800d734:	0800d973 	.word	0x0800d973
 800d738:	0800d973 	.word	0x0800d973
 800d73c:	0800d913 	.word	0x0800d913
 800d740:	0800d93f 	.word	0x0800d93f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	7c12      	ldrb	r2, [r2, #16]
 800d750:	f107 0108 	add.w	r1, r7, #8
 800d754:	4610      	mov	r0, r2
 800d756:	4798      	blx	r3
 800d758:	60f8      	str	r0, [r7, #12]
      break;
 800d75a:	e112      	b.n	800d982 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	7c1b      	ldrb	r3, [r3, #16]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d10d      	bne.n	800d780 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d76c:	f107 0208 	add.w	r2, r7, #8
 800d770:	4610      	mov	r0, r2
 800d772:	4798      	blx	r3
 800d774:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	3301      	adds	r3, #1
 800d77a:	2202      	movs	r2, #2
 800d77c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d77e:	e100      	b.n	800d982 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d788:	f107 0208 	add.w	r2, r7, #8
 800d78c:	4610      	mov	r0, r2
 800d78e:	4798      	blx	r3
 800d790:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	3301      	adds	r3, #1
 800d796:	2202      	movs	r2, #2
 800d798:	701a      	strb	r2, [r3, #0]
      break;
 800d79a:	e0f2      	b.n	800d982 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	885b      	ldrh	r3, [r3, #2]
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	2b05      	cmp	r3, #5
 800d7a4:	f200 80ac 	bhi.w	800d900 <USBD_GetDescriptor+0x204>
 800d7a8:	a201      	add	r2, pc, #4	; (adr r2, 800d7b0 <USBD_GetDescriptor+0xb4>)
 800d7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ae:	bf00      	nop
 800d7b0:	0800d7c9 	.word	0x0800d7c9
 800d7b4:	0800d7fd 	.word	0x0800d7fd
 800d7b8:	0800d831 	.word	0x0800d831
 800d7bc:	0800d865 	.word	0x0800d865
 800d7c0:	0800d899 	.word	0x0800d899
 800d7c4:	0800d8cd 	.word	0x0800d8cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00b      	beq.n	800d7ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	7c12      	ldrb	r2, [r2, #16]
 800d7e0:	f107 0108 	add.w	r1, r7, #8
 800d7e4:	4610      	mov	r0, r2
 800d7e6:	4798      	blx	r3
 800d7e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7ea:	e091      	b.n	800d910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7ec:	6839      	ldr	r1, [r7, #0]
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 facb 	bl	800dd8a <USBD_CtlError>
            err++;
 800d7f4:	7afb      	ldrb	r3, [r7, #11]
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	72fb      	strb	r3, [r7, #11]
          break;
 800d7fa:	e089      	b.n	800d910 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d802:	689b      	ldr	r3, [r3, #8]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00b      	beq.n	800d820 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	7c12      	ldrb	r2, [r2, #16]
 800d814:	f107 0108 	add.w	r1, r7, #8
 800d818:	4610      	mov	r0, r2
 800d81a:	4798      	blx	r3
 800d81c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d81e:	e077      	b.n	800d910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d820:	6839      	ldr	r1, [r7, #0]
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 fab1 	bl	800dd8a <USBD_CtlError>
            err++;
 800d828:	7afb      	ldrb	r3, [r7, #11]
 800d82a:	3301      	adds	r3, #1
 800d82c:	72fb      	strb	r3, [r7, #11]
          break;
 800d82e:	e06f      	b.n	800d910 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00b      	beq.n	800d854 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	7c12      	ldrb	r2, [r2, #16]
 800d848:	f107 0108 	add.w	r1, r7, #8
 800d84c:	4610      	mov	r0, r2
 800d84e:	4798      	blx	r3
 800d850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d852:	e05d      	b.n	800d910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d854:	6839      	ldr	r1, [r7, #0]
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 fa97 	bl	800dd8a <USBD_CtlError>
            err++;
 800d85c:	7afb      	ldrb	r3, [r7, #11]
 800d85e:	3301      	adds	r3, #1
 800d860:	72fb      	strb	r3, [r7, #11]
          break;
 800d862:	e055      	b.n	800d910 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d86a:	691b      	ldr	r3, [r3, #16]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00b      	beq.n	800d888 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	7c12      	ldrb	r2, [r2, #16]
 800d87c:	f107 0108 	add.w	r1, r7, #8
 800d880:	4610      	mov	r0, r2
 800d882:	4798      	blx	r3
 800d884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d886:	e043      	b.n	800d910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d888:	6839      	ldr	r1, [r7, #0]
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 fa7d 	bl	800dd8a <USBD_CtlError>
            err++;
 800d890:	7afb      	ldrb	r3, [r7, #11]
 800d892:	3301      	adds	r3, #1
 800d894:	72fb      	strb	r3, [r7, #11]
          break;
 800d896:	e03b      	b.n	800d910 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d89e:	695b      	ldr	r3, [r3, #20]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00b      	beq.n	800d8bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8aa:	695b      	ldr	r3, [r3, #20]
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	7c12      	ldrb	r2, [r2, #16]
 800d8b0:	f107 0108 	add.w	r1, r7, #8
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	4798      	blx	r3
 800d8b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8ba:	e029      	b.n	800d910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8bc:	6839      	ldr	r1, [r7, #0]
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 fa63 	bl	800dd8a <USBD_CtlError>
            err++;
 800d8c4:	7afb      	ldrb	r3, [r7, #11]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	72fb      	strb	r3, [r7, #11]
          break;
 800d8ca:	e021      	b.n	800d910 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8d2:	699b      	ldr	r3, [r3, #24]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00b      	beq.n	800d8f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8de:	699b      	ldr	r3, [r3, #24]
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	7c12      	ldrb	r2, [r2, #16]
 800d8e4:	f107 0108 	add.w	r1, r7, #8
 800d8e8:	4610      	mov	r0, r2
 800d8ea:	4798      	blx	r3
 800d8ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8ee:	e00f      	b.n	800d910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8f0:	6839      	ldr	r1, [r7, #0]
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fa49 	bl	800dd8a <USBD_CtlError>
            err++;
 800d8f8:	7afb      	ldrb	r3, [r7, #11]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d8fe:	e007      	b.n	800d910 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d900:	6839      	ldr	r1, [r7, #0]
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 fa41 	bl	800dd8a <USBD_CtlError>
          err++;
 800d908:	7afb      	ldrb	r3, [r7, #11]
 800d90a:	3301      	adds	r3, #1
 800d90c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d90e:	bf00      	nop
      }
      break;
 800d910:	e037      	b.n	800d982 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	7c1b      	ldrb	r3, [r3, #16]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d109      	bne.n	800d92e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d922:	f107 0208 	add.w	r2, r7, #8
 800d926:	4610      	mov	r0, r2
 800d928:	4798      	blx	r3
 800d92a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d92c:	e029      	b.n	800d982 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d92e:	6839      	ldr	r1, [r7, #0]
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 fa2a 	bl	800dd8a <USBD_CtlError>
        err++;
 800d936:	7afb      	ldrb	r3, [r7, #11]
 800d938:	3301      	adds	r3, #1
 800d93a:	72fb      	strb	r3, [r7, #11]
      break;
 800d93c:	e021      	b.n	800d982 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	7c1b      	ldrb	r3, [r3, #16]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d10d      	bne.n	800d962 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d94e:	f107 0208 	add.w	r2, r7, #8
 800d952:	4610      	mov	r0, r2
 800d954:	4798      	blx	r3
 800d956:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	3301      	adds	r3, #1
 800d95c:	2207      	movs	r2, #7
 800d95e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d960:	e00f      	b.n	800d982 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d962:	6839      	ldr	r1, [r7, #0]
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 fa10 	bl	800dd8a <USBD_CtlError>
        err++;
 800d96a:	7afb      	ldrb	r3, [r7, #11]
 800d96c:	3301      	adds	r3, #1
 800d96e:	72fb      	strb	r3, [r7, #11]
      break;
 800d970:	e007      	b.n	800d982 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d972:	6839      	ldr	r1, [r7, #0]
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 fa08 	bl	800dd8a <USBD_CtlError>
      err++;
 800d97a:	7afb      	ldrb	r3, [r7, #11]
 800d97c:	3301      	adds	r3, #1
 800d97e:	72fb      	strb	r3, [r7, #11]
      break;
 800d980:	bf00      	nop
  }

  if (err != 0U)
 800d982:	7afb      	ldrb	r3, [r7, #11]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d11e      	bne.n	800d9c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	88db      	ldrh	r3, [r3, #6]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d016      	beq.n	800d9be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d990:	893b      	ldrh	r3, [r7, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00e      	beq.n	800d9b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	88da      	ldrh	r2, [r3, #6]
 800d99a:	893b      	ldrh	r3, [r7, #8]
 800d99c:	4293      	cmp	r3, r2
 800d99e:	bf28      	it	cs
 800d9a0:	4613      	movcs	r3, r2
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d9a6:	893b      	ldrh	r3, [r7, #8]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	68f9      	ldr	r1, [r7, #12]
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 fa5d 	bl	800de6c <USBD_CtlSendData>
 800d9b2:	e009      	b.n	800d9c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d9b4:	6839      	ldr	r1, [r7, #0]
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 f9e7 	bl	800dd8a <USBD_CtlError>
 800d9bc:	e004      	b.n	800d9c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 faae 	bl	800df20 <USBD_CtlSendStatus>
 800d9c4:	e000      	b.n	800d9c8 <USBD_GetDescriptor+0x2cc>
    return;
 800d9c6:	bf00      	nop
  }
}
 800d9c8:	3710      	adds	r7, #16
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop

0800d9d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	889b      	ldrh	r3, [r3, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d131      	bne.n	800da46 <USBD_SetAddress+0x76>
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	88db      	ldrh	r3, [r3, #6]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d12d      	bne.n	800da46 <USBD_SetAddress+0x76>
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	885b      	ldrh	r3, [r3, #2]
 800d9ee:	2b7f      	cmp	r3, #127	; 0x7f
 800d9f0:	d829      	bhi.n	800da46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	885b      	ldrh	r3, [r3, #2]
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da04:	b2db      	uxtb	r3, r3
 800da06:	2b03      	cmp	r3, #3
 800da08:	d104      	bne.n	800da14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800da0a:	6839      	ldr	r1, [r7, #0]
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 f9bc 	bl	800dd8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da12:	e01d      	b.n	800da50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	7bfa      	ldrb	r2, [r7, #15]
 800da18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
 800da1e:	4619      	mov	r1, r3
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 ff11 	bl	800e848 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f000 fa7a 	bl	800df20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800da2c:	7bfb      	ldrb	r3, [r7, #15]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d004      	beq.n	800da3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2202      	movs	r2, #2
 800da36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da3a:	e009      	b.n	800da50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da44:	e004      	b.n	800da50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800da46:	6839      	ldr	r1, [r7, #0]
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f99e 	bl	800dd8a <USBD_CtlError>
  }
}
 800da4e:	bf00      	nop
 800da50:	bf00      	nop
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da62:	2300      	movs	r3, #0
 800da64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	885b      	ldrh	r3, [r3, #2]
 800da6a:	b2da      	uxtb	r2, r3
 800da6c:	4b4e      	ldr	r3, [pc, #312]	; (800dba8 <USBD_SetConfig+0x150>)
 800da6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800da70:	4b4d      	ldr	r3, [pc, #308]	; (800dba8 <USBD_SetConfig+0x150>)
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	2b01      	cmp	r3, #1
 800da76:	d905      	bls.n	800da84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800da78:	6839      	ldr	r1, [r7, #0]
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 f985 	bl	800dd8a <USBD_CtlError>
    return USBD_FAIL;
 800da80:	2303      	movs	r3, #3
 800da82:	e08c      	b.n	800db9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d002      	beq.n	800da96 <USBD_SetConfig+0x3e>
 800da90:	2b03      	cmp	r3, #3
 800da92:	d029      	beq.n	800dae8 <USBD_SetConfig+0x90>
 800da94:	e075      	b.n	800db82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800da96:	4b44      	ldr	r3, [pc, #272]	; (800dba8 <USBD_SetConfig+0x150>)
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d020      	beq.n	800dae0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800da9e:	4b42      	ldr	r3, [pc, #264]	; (800dba8 <USBD_SetConfig+0x150>)
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	461a      	mov	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800daa8:	4b3f      	ldr	r3, [pc, #252]	; (800dba8 <USBD_SetConfig+0x150>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	4619      	mov	r1, r3
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7fe ffe7 	bl	800ca82 <USBD_SetClassConfig>
 800dab4:	4603      	mov	r3, r0
 800dab6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dab8:	7bfb      	ldrb	r3, [r7, #15]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d008      	beq.n	800dad0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800dabe:	6839      	ldr	r1, [r7, #0]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 f962 	bl	800dd8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2202      	movs	r2, #2
 800daca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dace:	e065      	b.n	800db9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 fa25 	bl	800df20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2203      	movs	r2, #3
 800dada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dade:	e05d      	b.n	800db9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 fa1d 	bl	800df20 <USBD_CtlSendStatus>
      break;
 800dae6:	e059      	b.n	800db9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dae8:	4b2f      	ldr	r3, [pc, #188]	; (800dba8 <USBD_SetConfig+0x150>)
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d112      	bne.n	800db16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2202      	movs	r2, #2
 800daf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800daf8:	4b2b      	ldr	r3, [pc, #172]	; (800dba8 <USBD_SetConfig+0x150>)
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	461a      	mov	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db02:	4b29      	ldr	r3, [pc, #164]	; (800dba8 <USBD_SetConfig+0x150>)
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	4619      	mov	r1, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f7fe ffd6 	bl	800caba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 fa06 	bl	800df20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800db14:	e042      	b.n	800db9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800db16:	4b24      	ldr	r3, [pc, #144]	; (800dba8 <USBD_SetConfig+0x150>)
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	461a      	mov	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	429a      	cmp	r2, r3
 800db22:	d02a      	beq.n	800db7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	4619      	mov	r1, r3
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f7fe ffc4 	bl	800caba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800db32:	4b1d      	ldr	r3, [pc, #116]	; (800dba8 <USBD_SetConfig+0x150>)
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	461a      	mov	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800db3c:	4b1a      	ldr	r3, [pc, #104]	; (800dba8 <USBD_SetConfig+0x150>)
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	4619      	mov	r1, r3
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7fe ff9d 	bl	800ca82 <USBD_SetClassConfig>
 800db48:	4603      	mov	r3, r0
 800db4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800db4c:	7bfb      	ldrb	r3, [r7, #15]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00f      	beq.n	800db72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800db52:	6839      	ldr	r1, [r7, #0]
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 f918 	bl	800dd8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	4619      	mov	r1, r3
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f7fe ffa9 	bl	800caba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2202      	movs	r2, #2
 800db6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800db70:	e014      	b.n	800db9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f9d4 	bl	800df20 <USBD_CtlSendStatus>
      break;
 800db78:	e010      	b.n	800db9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f9d0 	bl	800df20 <USBD_CtlSendStatus>
      break;
 800db80:	e00c      	b.n	800db9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f900 	bl	800dd8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db8a:	4b07      	ldr	r3, [pc, #28]	; (800dba8 <USBD_SetConfig+0x150>)
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	4619      	mov	r1, r3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7fe ff92 	bl	800caba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800db96:	2303      	movs	r3, #3
 800db98:	73fb      	strb	r3, [r7, #15]
      break;
 800db9a:	bf00      	nop
  }

  return ret;
 800db9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	20001d64 	.word	0x20001d64

0800dbac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	88db      	ldrh	r3, [r3, #6]
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d004      	beq.n	800dbc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dbbe:	6839      	ldr	r1, [r7, #0]
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 f8e2 	bl	800dd8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dbc6:	e023      	b.n	800dc10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	2b02      	cmp	r3, #2
 800dbd2:	dc02      	bgt.n	800dbda <USBD_GetConfig+0x2e>
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	dc03      	bgt.n	800dbe0 <USBD_GetConfig+0x34>
 800dbd8:	e015      	b.n	800dc06 <USBD_GetConfig+0x5a>
 800dbda:	2b03      	cmp	r3, #3
 800dbdc:	d00b      	beq.n	800dbf6 <USBD_GetConfig+0x4a>
 800dbde:	e012      	b.n	800dc06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	3308      	adds	r3, #8
 800dbea:	2201      	movs	r2, #1
 800dbec:	4619      	mov	r1, r3
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f93c 	bl	800de6c <USBD_CtlSendData>
        break;
 800dbf4:	e00c      	b.n	800dc10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 f934 	bl	800de6c <USBD_CtlSendData>
        break;
 800dc04:	e004      	b.n	800dc10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dc06:	6839      	ldr	r1, [r7, #0]
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 f8be 	bl	800dd8a <USBD_CtlError>
        break;
 800dc0e:	bf00      	nop
}
 800dc10:	bf00      	nop
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	d81e      	bhi.n	800dc6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	88db      	ldrh	r3, [r3, #6]
 800dc34:	2b02      	cmp	r3, #2
 800dc36:	d004      	beq.n	800dc42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dc38:	6839      	ldr	r1, [r7, #0]
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f8a5 	bl	800dd8a <USBD_CtlError>
        break;
 800dc40:	e01a      	b.n	800dc78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2201      	movs	r2, #1
 800dc46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d005      	beq.n	800dc5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	f043 0202 	orr.w	r2, r3, #2
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	330c      	adds	r3, #12
 800dc62:	2202      	movs	r2, #2
 800dc64:	4619      	mov	r1, r3
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f900 	bl	800de6c <USBD_CtlSendData>
      break;
 800dc6c:	e004      	b.n	800dc78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dc6e:	6839      	ldr	r1, [r7, #0]
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 f88a 	bl	800dd8a <USBD_CtlError>
      break;
 800dc76:	bf00      	nop
  }
}
 800dc78:	bf00      	nop
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	885b      	ldrh	r3, [r3, #2]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d107      	bne.n	800dca2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2201      	movs	r2, #1
 800dc96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f940 	bl	800df20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dca0:	e013      	b.n	800dcca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	885b      	ldrh	r3, [r3, #2]
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d10b      	bne.n	800dcc2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	889b      	ldrh	r3, [r3, #4]
 800dcae:	0a1b      	lsrs	r3, r3, #8
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 f930 	bl	800df20 <USBD_CtlSendStatus>
}
 800dcc0:	e003      	b.n	800dcca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dcc2:	6839      	ldr	r1, [r7, #0]
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 f860 	bl	800dd8a <USBD_CtlError>
}
 800dcca:	bf00      	nop
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
 800dcda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	3b01      	subs	r3, #1
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	d80b      	bhi.n	800dd02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	885b      	ldrh	r3, [r3, #2]
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d10c      	bne.n	800dd0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 f910 	bl	800df20 <USBD_CtlSendStatus>
      }
      break;
 800dd00:	e004      	b.n	800dd0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dd02:	6839      	ldr	r1, [r7, #0]
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 f840 	bl	800dd8a <USBD_CtlError>
      break;
 800dd0a:	e000      	b.n	800dd0e <USBD_ClrFeature+0x3c>
      break;
 800dd0c:	bf00      	nop
  }
}
 800dd0e:	bf00      	nop
 800dd10:	3708      	adds	r7, #8
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b084      	sub	sp, #16
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	781a      	ldrb	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	781a      	ldrb	r2, [r3, #0]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f7ff fa41 	bl	800d1c8 <SWAPBYTE>
 800dd46:	4603      	mov	r3, r0
 800dd48:	461a      	mov	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	3301      	adds	r3, #1
 800dd52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	3301      	adds	r3, #1
 800dd58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f7ff fa34 	bl	800d1c8 <SWAPBYTE>
 800dd60:	4603      	mov	r3, r0
 800dd62:	461a      	mov	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	3301      	adds	r3, #1
 800dd72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f7ff fa27 	bl	800d1c8 <SWAPBYTE>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	80da      	strh	r2, [r3, #6]
}
 800dd82:	bf00      	nop
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b082      	sub	sp, #8
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd94:	2180      	movs	r1, #128	; 0x80
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f000 fcec 	bl	800e774 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 fce8 	bl	800e774 <USBD_LL_StallEP>
}
 800dda4:	bf00      	nop
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b086      	sub	sp, #24
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d036      	beq.n	800de30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ddc6:	6938      	ldr	r0, [r7, #16]
 800ddc8:	f000 f836 	bl	800de38 <USBD_GetLen>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	3301      	adds	r3, #1
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	005b      	lsls	r3, r3, #1
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ddda:	7dfb      	ldrb	r3, [r7, #23]
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	4413      	add	r3, r2
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	7812      	ldrb	r2, [r2, #0]
 800dde4:	701a      	strb	r2, [r3, #0]
  idx++;
 800dde6:	7dfb      	ldrb	r3, [r7, #23]
 800dde8:	3301      	adds	r3, #1
 800ddea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ddec:	7dfb      	ldrb	r3, [r7, #23]
 800ddee:	68ba      	ldr	r2, [r7, #8]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	2203      	movs	r2, #3
 800ddf4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddf6:	7dfb      	ldrb	r3, [r7, #23]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ddfc:	e013      	b.n	800de26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ddfe:	7dfb      	ldrb	r3, [r7, #23]
 800de00:	68ba      	ldr	r2, [r7, #8]
 800de02:	4413      	add	r3, r2
 800de04:	693a      	ldr	r2, [r7, #16]
 800de06:	7812      	ldrb	r2, [r2, #0]
 800de08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	3301      	adds	r3, #1
 800de0e:	613b      	str	r3, [r7, #16]
    idx++;
 800de10:	7dfb      	ldrb	r3, [r7, #23]
 800de12:	3301      	adds	r3, #1
 800de14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800de16:	7dfb      	ldrb	r3, [r7, #23]
 800de18:	68ba      	ldr	r2, [r7, #8]
 800de1a:	4413      	add	r3, r2
 800de1c:	2200      	movs	r2, #0
 800de1e:	701a      	strb	r2, [r3, #0]
    idx++;
 800de20:	7dfb      	ldrb	r3, [r7, #23]
 800de22:	3301      	adds	r3, #1
 800de24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1e7      	bne.n	800ddfe <USBD_GetString+0x52>
 800de2e:	e000      	b.n	800de32 <USBD_GetString+0x86>
    return;
 800de30:	bf00      	nop
  }
}
 800de32:	3718      	adds	r7, #24
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800de38:	b480      	push	{r7}
 800de3a:	b085      	sub	sp, #20
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800de40:	2300      	movs	r3, #0
 800de42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800de48:	e005      	b.n	800de56 <USBD_GetLen+0x1e>
  {
    len++;
 800de4a:	7bfb      	ldrb	r3, [r7, #15]
 800de4c:	3301      	adds	r3, #1
 800de4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	3301      	adds	r3, #1
 800de54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d1f5      	bne.n	800de4a <USBD_GetLen+0x12>
  }

  return len;
 800de5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de60:	4618      	mov	r0, r3
 800de62:	3714      	adds	r7, #20
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr

0800de6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2202      	movs	r2, #2
 800de7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	2100      	movs	r1, #0
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f000 fcf7 	bl	800e886 <USBD_LL_Transmit>

  return USBD_OK;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3710      	adds	r7, #16
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}

0800dea2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dea2:	b580      	push	{r7, lr}
 800dea4:	b084      	sub	sp, #16
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	60f8      	str	r0, [r7, #12]
 800deaa:	60b9      	str	r1, [r7, #8]
 800deac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	68ba      	ldr	r2, [r7, #8]
 800deb2:	2100      	movs	r1, #0
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f000 fce6 	bl	800e886 <USBD_LL_Transmit>

  return USBD_OK;
 800deba:	2300      	movs	r3, #0
}
 800debc:	4618      	mov	r0, r3
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2203      	movs	r2, #3
 800ded4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	68ba      	ldr	r2, [r7, #8]
 800deec:	2100      	movs	r1, #0
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f000 fcea 	bl	800e8c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}

0800defe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800defe:	b580      	push	{r7, lr}
 800df00:	b084      	sub	sp, #16
 800df02:	af00      	add	r7, sp, #0
 800df04:	60f8      	str	r0, [r7, #12]
 800df06:	60b9      	str	r1, [r7, #8]
 800df08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	68ba      	ldr	r2, [r7, #8]
 800df0e:	2100      	movs	r1, #0
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	f000 fcd9 	bl	800e8c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df16:	2300      	movs	r3, #0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3710      	adds	r7, #16
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2204      	movs	r2, #4
 800df2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800df30:	2300      	movs	r3, #0
 800df32:	2200      	movs	r2, #0
 800df34:	2100      	movs	r1, #0
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 fca5 	bl	800e886 <USBD_LL_Transmit>

  return USBD_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3708      	adds	r7, #8
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b082      	sub	sp, #8
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2205      	movs	r2, #5
 800df52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df56:	2300      	movs	r3, #0
 800df58:	2200      	movs	r2, #0
 800df5a:	2100      	movs	r1, #0
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 fcb3 	bl	800e8c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df62:	2300      	movs	r3, #0
}
 800df64:	4618      	mov	r0, r3
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df70:	2200      	movs	r2, #0
 800df72:	4912      	ldr	r1, [pc, #72]	; (800dfbc <MX_USB_DEVICE_Init+0x50>)
 800df74:	4812      	ldr	r0, [pc, #72]	; (800dfc0 <MX_USB_DEVICE_Init+0x54>)
 800df76:	f7fe fd07 	bl	800c988 <USBD_Init>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d001      	beq.n	800df84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df80:	f7f5 fea6 	bl	8003cd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800df84:	490f      	ldr	r1, [pc, #60]	; (800dfc4 <MX_USB_DEVICE_Init+0x58>)
 800df86:	480e      	ldr	r0, [pc, #56]	; (800dfc0 <MX_USB_DEVICE_Init+0x54>)
 800df88:	f7fe fd2e 	bl	800c9e8 <USBD_RegisterClass>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d001      	beq.n	800df96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df92:	f7f5 fe9d 	bl	8003cd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800df96:	490c      	ldr	r1, [pc, #48]	; (800dfc8 <MX_USB_DEVICE_Init+0x5c>)
 800df98:	4809      	ldr	r0, [pc, #36]	; (800dfc0 <MX_USB_DEVICE_Init+0x54>)
 800df9a:	f7fe fc1f 	bl	800c7dc <USBD_CDC_RegisterInterface>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d001      	beq.n	800dfa8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dfa4:	f7f5 fe94 	bl	8003cd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dfa8:	4805      	ldr	r0, [pc, #20]	; (800dfc0 <MX_USB_DEVICE_Init+0x54>)
 800dfaa:	f7fe fd53 	bl	800ca54 <USBD_Start>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dfb4:	f7f5 fe8c 	bl	8003cd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dfb8:	bf00      	nop
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	200000c0 	.word	0x200000c0
 800dfc0:	20001d68 	.word	0x20001d68
 800dfc4:	2000002c 	.word	0x2000002c
 800dfc8:	200000ac 	.word	0x200000ac

0800dfcc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	4905      	ldr	r1, [pc, #20]	; (800dfe8 <CDC_Init_FS+0x1c>)
 800dfd4:	4805      	ldr	r0, [pc, #20]	; (800dfec <CDC_Init_FS+0x20>)
 800dfd6:	f7fe fc1b 	bl	800c810 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dfda:	4905      	ldr	r1, [pc, #20]	; (800dff0 <CDC_Init_FS+0x24>)
 800dfdc:	4803      	ldr	r0, [pc, #12]	; (800dfec <CDC_Init_FS+0x20>)
 800dfde:	f7fe fc39 	bl	800c854 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dfe2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	2000242c 	.word	0x2000242c
 800dfec:	20001d68 	.word	0x20001d68
 800dff0:	20002044 	.word	0x20002044

0800dff4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dff4:	b480      	push	{r7}
 800dff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dff8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	6039      	str	r1, [r7, #0]
 800e00e:	71fb      	strb	r3, [r7, #7]
 800e010:	4613      	mov	r3, r2
 800e012:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e014:	79fb      	ldrb	r3, [r7, #7]
 800e016:	2b23      	cmp	r3, #35	; 0x23
 800e018:	d84a      	bhi.n	800e0b0 <CDC_Control_FS+0xac>
 800e01a:	a201      	add	r2, pc, #4	; (adr r2, 800e020 <CDC_Control_FS+0x1c>)
 800e01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e020:	0800e0b1 	.word	0x0800e0b1
 800e024:	0800e0b1 	.word	0x0800e0b1
 800e028:	0800e0b1 	.word	0x0800e0b1
 800e02c:	0800e0b1 	.word	0x0800e0b1
 800e030:	0800e0b1 	.word	0x0800e0b1
 800e034:	0800e0b1 	.word	0x0800e0b1
 800e038:	0800e0b1 	.word	0x0800e0b1
 800e03c:	0800e0b1 	.word	0x0800e0b1
 800e040:	0800e0b1 	.word	0x0800e0b1
 800e044:	0800e0b1 	.word	0x0800e0b1
 800e048:	0800e0b1 	.word	0x0800e0b1
 800e04c:	0800e0b1 	.word	0x0800e0b1
 800e050:	0800e0b1 	.word	0x0800e0b1
 800e054:	0800e0b1 	.word	0x0800e0b1
 800e058:	0800e0b1 	.word	0x0800e0b1
 800e05c:	0800e0b1 	.word	0x0800e0b1
 800e060:	0800e0b1 	.word	0x0800e0b1
 800e064:	0800e0b1 	.word	0x0800e0b1
 800e068:	0800e0b1 	.word	0x0800e0b1
 800e06c:	0800e0b1 	.word	0x0800e0b1
 800e070:	0800e0b1 	.word	0x0800e0b1
 800e074:	0800e0b1 	.word	0x0800e0b1
 800e078:	0800e0b1 	.word	0x0800e0b1
 800e07c:	0800e0b1 	.word	0x0800e0b1
 800e080:	0800e0b1 	.word	0x0800e0b1
 800e084:	0800e0b1 	.word	0x0800e0b1
 800e088:	0800e0b1 	.word	0x0800e0b1
 800e08c:	0800e0b1 	.word	0x0800e0b1
 800e090:	0800e0b1 	.word	0x0800e0b1
 800e094:	0800e0b1 	.word	0x0800e0b1
 800e098:	0800e0b1 	.word	0x0800e0b1
 800e09c:	0800e0b1 	.word	0x0800e0b1
 800e0a0:	0800e0b1 	.word	0x0800e0b1
 800e0a4:	0800e0b1 	.word	0x0800e0b1
 800e0a8:	0800e0b1 	.word	0x0800e0b1
 800e0ac:	0800e0b1 	.word	0x0800e0b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e0b0:	bf00      	nop
  }

  return (USBD_OK);
 800e0b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	370c      	adds	r7, #12
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint16_t len = (uint8_t) *Len;
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	81fb      	strh	r3, [r7, #14]
  StringFIFOAdd(&USBFIFO, Buf, len);
 800e0d2:	89fb      	ldrh	r3, [r7, #14]
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	6879      	ldr	r1, [r7, #4]
 800e0d8:	4807      	ldr	r0, [pc, #28]	; (800e0f8 <CDC_Receive_FS+0x38>)
 800e0da:	f7f5 fff3 	bl	80040c4 <StringFIFOAdd>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e0de:	6879      	ldr	r1, [r7, #4]
 800e0e0:	4806      	ldr	r0, [pc, #24]	; (800e0fc <CDC_Receive_FS+0x3c>)
 800e0e2:	f7fe fbb7 	bl	800c854 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e0e6:	4805      	ldr	r0, [pc, #20]	; (800e0fc <CDC_Receive_FS+0x3c>)
 800e0e8:	f7fe fc18 	bl	800c91c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e0ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	20001c60 	.word	0x20001c60
 800e0fc:	20001d68 	.word	0x20001d68

0800e100 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	460b      	mov	r3, r1
 800e10a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e10c:	2300      	movs	r3, #0
 800e10e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e110:	4b0d      	ldr	r3, [pc, #52]	; (800e148 <CDC_Transmit_FS+0x48>)
 800e112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e116:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d001      	beq.n	800e126 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e122:	2301      	movs	r3, #1
 800e124:	e00b      	b.n	800e13e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e126:	887b      	ldrh	r3, [r7, #2]
 800e128:	461a      	mov	r2, r3
 800e12a:	6879      	ldr	r1, [r7, #4]
 800e12c:	4806      	ldr	r0, [pc, #24]	; (800e148 <CDC_Transmit_FS+0x48>)
 800e12e:	f7fe fb6f 	bl	800c810 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e132:	4805      	ldr	r0, [pc, #20]	; (800e148 <CDC_Transmit_FS+0x48>)
 800e134:	f7fe fbac 	bl	800c890 <USBD_CDC_TransmitPacket>
 800e138:	4603      	mov	r3, r0
 800e13a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	20001d68 	.word	0x20001d68

0800e14c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b087      	sub	sp, #28
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	4613      	mov	r3, r2
 800e158:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e15a:	2300      	movs	r3, #0
 800e15c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e15e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e162:	4618      	mov	r0, r3
 800e164:	371c      	adds	r7, #28
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr
	...

0800e170 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
 800e176:	4603      	mov	r3, r0
 800e178:	6039      	str	r1, [r7, #0]
 800e17a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2212      	movs	r2, #18
 800e180:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e182:	4b03      	ldr	r3, [pc, #12]	; (800e190 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e184:	4618      	mov	r0, r3
 800e186:	370c      	adds	r7, #12
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	200000dc 	.word	0x200000dc

0800e194 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	4603      	mov	r3, r0
 800e19c:	6039      	str	r1, [r7, #0]
 800e19e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	2204      	movs	r2, #4
 800e1a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e1a6:	4b03      	ldr	r3, [pc, #12]	; (800e1b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	370c      	adds	r7, #12
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr
 800e1b4:	200000f0 	.word	0x200000f0

0800e1b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	4603      	mov	r3, r0
 800e1c0:	6039      	str	r1, [r7, #0]
 800e1c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1c4:	79fb      	ldrb	r3, [r7, #7]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d105      	bne.n	800e1d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e1ca:	683a      	ldr	r2, [r7, #0]
 800e1cc:	4907      	ldr	r1, [pc, #28]	; (800e1ec <USBD_FS_ProductStrDescriptor+0x34>)
 800e1ce:	4808      	ldr	r0, [pc, #32]	; (800e1f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e1d0:	f7ff fdec 	bl	800ddac <USBD_GetString>
 800e1d4:	e004      	b.n	800e1e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	4904      	ldr	r1, [pc, #16]	; (800e1ec <USBD_FS_ProductStrDescriptor+0x34>)
 800e1da:	4805      	ldr	r0, [pc, #20]	; (800e1f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e1dc:	f7ff fde6 	bl	800ddac <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1e0:	4b02      	ldr	r3, [pc, #8]	; (800e1ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3708      	adds	r7, #8
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	20002814 	.word	0x20002814
 800e1f0:	080149dc 	.word	0x080149dc

0800e1f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	6039      	str	r1, [r7, #0]
 800e1fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	4904      	ldr	r1, [pc, #16]	; (800e214 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e204:	4804      	ldr	r0, [pc, #16]	; (800e218 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e206:	f7ff fdd1 	bl	800ddac <USBD_GetString>
  return USBD_StrDesc;
 800e20a:	4b02      	ldr	r3, [pc, #8]	; (800e214 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3708      	adds	r7, #8
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	20002814 	.word	0x20002814
 800e218:	080149f4 	.word	0x080149f4

0800e21c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	4603      	mov	r3, r0
 800e224:	6039      	str	r1, [r7, #0]
 800e226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	221a      	movs	r2, #26
 800e22c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e22e:	f000 f843 	bl	800e2b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e232:	4b02      	ldr	r3, [pc, #8]	; (800e23c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e234:	4618      	mov	r0, r3
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}
 800e23c:	200000f4 	.word	0x200000f4

0800e240 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	4603      	mov	r3, r0
 800e248:	6039      	str	r1, [r7, #0]
 800e24a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e24c:	79fb      	ldrb	r3, [r7, #7]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d105      	bne.n	800e25e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e252:	683a      	ldr	r2, [r7, #0]
 800e254:	4907      	ldr	r1, [pc, #28]	; (800e274 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e256:	4808      	ldr	r0, [pc, #32]	; (800e278 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e258:	f7ff fda8 	bl	800ddac <USBD_GetString>
 800e25c:	e004      	b.n	800e268 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e25e:	683a      	ldr	r2, [r7, #0]
 800e260:	4904      	ldr	r1, [pc, #16]	; (800e274 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e262:	4805      	ldr	r0, [pc, #20]	; (800e278 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e264:	f7ff fda2 	bl	800ddac <USBD_GetString>
  }
  return USBD_StrDesc;
 800e268:	4b02      	ldr	r3, [pc, #8]	; (800e274 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3708      	adds	r7, #8
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	20002814 	.word	0x20002814
 800e278:	08014a08 	.word	0x08014a08

0800e27c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	4603      	mov	r3, r0
 800e284:	6039      	str	r1, [r7, #0]
 800e286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e288:	79fb      	ldrb	r3, [r7, #7]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d105      	bne.n	800e29a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	4907      	ldr	r1, [pc, #28]	; (800e2b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e292:	4808      	ldr	r0, [pc, #32]	; (800e2b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e294:	f7ff fd8a 	bl	800ddac <USBD_GetString>
 800e298:	e004      	b.n	800e2a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e29a:	683a      	ldr	r2, [r7, #0]
 800e29c:	4904      	ldr	r1, [pc, #16]	; (800e2b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e29e:	4805      	ldr	r0, [pc, #20]	; (800e2b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e2a0:	f7ff fd84 	bl	800ddac <USBD_GetString>
  }
  return USBD_StrDesc;
 800e2a4:	4b02      	ldr	r3, [pc, #8]	; (800e2b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	20002814 	.word	0x20002814
 800e2b4:	08014a14 	.word	0x08014a14

0800e2b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e2be:	4b0f      	ldr	r3, [pc, #60]	; (800e2fc <Get_SerialNum+0x44>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e2c4:	4b0e      	ldr	r3, [pc, #56]	; (800e300 <Get_SerialNum+0x48>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e2ca:	4b0e      	ldr	r3, [pc, #56]	; (800e304 <Get_SerialNum+0x4c>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d009      	beq.n	800e2f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e2de:	2208      	movs	r2, #8
 800e2e0:	4909      	ldr	r1, [pc, #36]	; (800e308 <Get_SerialNum+0x50>)
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f000 f814 	bl	800e310 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e2e8:	2204      	movs	r2, #4
 800e2ea:	4908      	ldr	r1, [pc, #32]	; (800e30c <Get_SerialNum+0x54>)
 800e2ec:	68b8      	ldr	r0, [r7, #8]
 800e2ee:	f000 f80f 	bl	800e310 <IntToUnicode>
  }
}
 800e2f2:	bf00      	nop
 800e2f4:	3710      	adds	r7, #16
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	1fff7a10 	.word	0x1fff7a10
 800e300:	1fff7a14 	.word	0x1fff7a14
 800e304:	1fff7a18 	.word	0x1fff7a18
 800e308:	200000f6 	.word	0x200000f6
 800e30c:	20000106 	.word	0x20000106

0800e310 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e310:	b480      	push	{r7}
 800e312:	b087      	sub	sp, #28
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	4613      	mov	r3, r2
 800e31c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e322:	2300      	movs	r3, #0
 800e324:	75fb      	strb	r3, [r7, #23]
 800e326:	e027      	b.n	800e378 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	0f1b      	lsrs	r3, r3, #28
 800e32c:	2b09      	cmp	r3, #9
 800e32e:	d80b      	bhi.n	800e348 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	0f1b      	lsrs	r3, r3, #28
 800e334:	b2da      	uxtb	r2, r3
 800e336:	7dfb      	ldrb	r3, [r7, #23]
 800e338:	005b      	lsls	r3, r3, #1
 800e33a:	4619      	mov	r1, r3
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	440b      	add	r3, r1
 800e340:	3230      	adds	r2, #48	; 0x30
 800e342:	b2d2      	uxtb	r2, r2
 800e344:	701a      	strb	r2, [r3, #0]
 800e346:	e00a      	b.n	800e35e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	0f1b      	lsrs	r3, r3, #28
 800e34c:	b2da      	uxtb	r2, r3
 800e34e:	7dfb      	ldrb	r3, [r7, #23]
 800e350:	005b      	lsls	r3, r3, #1
 800e352:	4619      	mov	r1, r3
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	440b      	add	r3, r1
 800e358:	3237      	adds	r2, #55	; 0x37
 800e35a:	b2d2      	uxtb	r2, r2
 800e35c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	011b      	lsls	r3, r3, #4
 800e362:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e364:	7dfb      	ldrb	r3, [r7, #23]
 800e366:	005b      	lsls	r3, r3, #1
 800e368:	3301      	adds	r3, #1
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	4413      	add	r3, r2
 800e36e:	2200      	movs	r2, #0
 800e370:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e372:	7dfb      	ldrb	r3, [r7, #23]
 800e374:	3301      	adds	r3, #1
 800e376:	75fb      	strb	r3, [r7, #23]
 800e378:	7dfa      	ldrb	r2, [r7, #23]
 800e37a:	79fb      	ldrb	r3, [r7, #7]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d3d3      	bcc.n	800e328 <IntToUnicode+0x18>
  }
}
 800e380:	bf00      	nop
 800e382:	bf00      	nop
 800e384:	371c      	adds	r7, #28
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
	...

0800e390 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b08a      	sub	sp, #40	; 0x28
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e398:	f107 0314 	add.w	r3, r7, #20
 800e39c:	2200      	movs	r2, #0
 800e39e:	601a      	str	r2, [r3, #0]
 800e3a0:	605a      	str	r2, [r3, #4]
 800e3a2:	609a      	str	r2, [r3, #8]
 800e3a4:	60da      	str	r2, [r3, #12]
 800e3a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e3b0:	d13a      	bne.n	800e428 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	613b      	str	r3, [r7, #16]
 800e3b6:	4b1e      	ldr	r3, [pc, #120]	; (800e430 <HAL_PCD_MspInit+0xa0>)
 800e3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ba:	4a1d      	ldr	r2, [pc, #116]	; (800e430 <HAL_PCD_MspInit+0xa0>)
 800e3bc:	f043 0301 	orr.w	r3, r3, #1
 800e3c0:	6313      	str	r3, [r2, #48]	; 0x30
 800e3c2:	4b1b      	ldr	r3, [pc, #108]	; (800e430 <HAL_PCD_MspInit+0xa0>)
 800e3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3c6:	f003 0301 	and.w	r3, r3, #1
 800e3ca:	613b      	str	r3, [r7, #16]
 800e3cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800e3ce:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800e3d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3d4:	2302      	movs	r3, #2
 800e3d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3dc:	2303      	movs	r3, #3
 800e3de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e3e0:	230a      	movs	r3, #10
 800e3e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3e4:	f107 0314 	add.w	r3, r7, #20
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4812      	ldr	r0, [pc, #72]	; (800e434 <HAL_PCD_MspInit+0xa4>)
 800e3ec:	f7f6 fa24 	bl	8004838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e3f0:	4b0f      	ldr	r3, [pc, #60]	; (800e430 <HAL_PCD_MspInit+0xa0>)
 800e3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f4:	4a0e      	ldr	r2, [pc, #56]	; (800e430 <HAL_PCD_MspInit+0xa0>)
 800e3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3fa:	6353      	str	r3, [r2, #52]	; 0x34
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	60fb      	str	r3, [r7, #12]
 800e400:	4b0b      	ldr	r3, [pc, #44]	; (800e430 <HAL_PCD_MspInit+0xa0>)
 800e402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e404:	4a0a      	ldr	r2, [pc, #40]	; (800e430 <HAL_PCD_MspInit+0xa0>)
 800e406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e40a:	6453      	str	r3, [r2, #68]	; 0x44
 800e40c:	4b08      	ldr	r3, [pc, #32]	; (800e430 <HAL_PCD_MspInit+0xa0>)
 800e40e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e414:	60fb      	str	r3, [r7, #12]
 800e416:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e418:	2200      	movs	r2, #0
 800e41a:	2100      	movs	r1, #0
 800e41c:	2043      	movs	r0, #67	; 0x43
 800e41e:	f7f6 f9a4 	bl	800476a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e422:	2043      	movs	r0, #67	; 0x43
 800e424:	f7f6 f9bd 	bl	80047a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e428:	bf00      	nop
 800e42a:	3728      	adds	r7, #40	; 0x28
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	40023800 	.word	0x40023800
 800e434:	40020000 	.word	0x40020000

0800e438 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e44c:	4619      	mov	r1, r3
 800e44e:	4610      	mov	r0, r2
 800e450:	f7fe fb4d 	bl	800caee <USBD_LL_SetupStage>
}
 800e454:	bf00      	nop
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	460b      	mov	r3, r1
 800e466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e46e:	78fa      	ldrb	r2, [r7, #3]
 800e470:	6879      	ldr	r1, [r7, #4]
 800e472:	4613      	mov	r3, r2
 800e474:	00db      	lsls	r3, r3, #3
 800e476:	4413      	add	r3, r2
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	440b      	add	r3, r1
 800e47c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	78fb      	ldrb	r3, [r7, #3]
 800e484:	4619      	mov	r1, r3
 800e486:	f7fe fb87 	bl	800cb98 <USBD_LL_DataOutStage>
}
 800e48a:	bf00      	nop
 800e48c:	3708      	adds	r7, #8
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b082      	sub	sp, #8
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
 800e49a:	460b      	mov	r3, r1
 800e49c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e4a4:	78fa      	ldrb	r2, [r7, #3]
 800e4a6:	6879      	ldr	r1, [r7, #4]
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	00db      	lsls	r3, r3, #3
 800e4ac:	4413      	add	r3, r2
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	440b      	add	r3, r1
 800e4b2:	334c      	adds	r3, #76	; 0x4c
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	78fb      	ldrb	r3, [r7, #3]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	f7fe fc20 	bl	800ccfe <USBD_LL_DataInStage>
}
 800e4be:	bf00      	nop
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b082      	sub	sp, #8
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7fe fd54 	bl	800cf82 <USBD_LL_SOF>
}
 800e4da:	bf00      	nop
 800e4dc:	3708      	adds	r7, #8
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}

0800e4e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4e2:	b580      	push	{r7, lr}
 800e4e4:	b084      	sub	sp, #16
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d102      	bne.n	800e4fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	73fb      	strb	r3, [r7, #15]
 800e4fa:	e008      	b.n	800e50e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	2b02      	cmp	r3, #2
 800e502:	d102      	bne.n	800e50a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e504:	2301      	movs	r3, #1
 800e506:	73fb      	strb	r3, [r7, #15]
 800e508:	e001      	b.n	800e50e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e50a:	f7f5 fbe1 	bl	8003cd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e514:	7bfa      	ldrb	r2, [r7, #15]
 800e516:	4611      	mov	r1, r2
 800e518:	4618      	mov	r0, r3
 800e51a:	f7fe fcf4 	bl	800cf06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e524:	4618      	mov	r0, r3
 800e526:	f7fe fc9c 	bl	800ce62 <USBD_LL_Reset>
}
 800e52a:	bf00      	nop
 800e52c:	3710      	adds	r7, #16
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
	...

0800e534 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e542:	4618      	mov	r0, r3
 800e544:	f7fe fcef 	bl	800cf26 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	6812      	ldr	r2, [r2, #0]
 800e556:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e55a:	f043 0301 	orr.w	r3, r3, #1
 800e55e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6a1b      	ldr	r3, [r3, #32]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d005      	beq.n	800e574 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e568:	4b04      	ldr	r3, [pc, #16]	; (800e57c <HAL_PCD_SuspendCallback+0x48>)
 800e56a:	691b      	ldr	r3, [r3, #16]
 800e56c:	4a03      	ldr	r2, [pc, #12]	; (800e57c <HAL_PCD_SuspendCallback+0x48>)
 800e56e:	f043 0306 	orr.w	r3, r3, #6
 800e572:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e574:	bf00      	nop
 800e576:	3708      	adds	r7, #8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	e000ed00 	.word	0xe000ed00

0800e580 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fe fcdf 	bl	800cf52 <USBD_LL_Resume>
}
 800e594:	bf00      	nop
 800e596:	3708      	adds	r7, #8
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5ae:	78fa      	ldrb	r2, [r7, #3]
 800e5b0:	4611      	mov	r1, r2
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fe fd37 	bl	800d026 <USBD_LL_IsoOUTIncomplete>
}
 800e5b8:	bf00      	nop
 800e5ba:	3708      	adds	r7, #8
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5d2:	78fa      	ldrb	r2, [r7, #3]
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fe fcf3 	bl	800cfc2 <USBD_LL_IsoINIncomplete>
}
 800e5dc:	bf00      	nop
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fe fd49 	bl	800d08a <USBD_LL_DevConnected>
}
 800e5f8:	bf00      	nop
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fe fd46 	bl	800d0a0 <USBD_LL_DevDisconnected>
}
 800e614:	bf00      	nop
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d13c      	bne.n	800e6a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e62c:	4a20      	ldr	r2, [pc, #128]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4a1e      	ldr	r2, [pc, #120]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e638:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e63c:	4b1c      	ldr	r3, [pc, #112]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e63e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e642:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e644:	4b1a      	ldr	r3, [pc, #104]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e646:	2204      	movs	r2, #4
 800e648:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e64a:	4b19      	ldr	r3, [pc, #100]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e64c:	2202      	movs	r2, #2
 800e64e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e650:	4b17      	ldr	r3, [pc, #92]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e652:	2200      	movs	r2, #0
 800e654:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e656:	4b16      	ldr	r3, [pc, #88]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e658:	2202      	movs	r2, #2
 800e65a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e65c:	4b14      	ldr	r3, [pc, #80]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e65e:	2201      	movs	r2, #1
 800e660:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e662:	4b13      	ldr	r3, [pc, #76]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e664:	2200      	movs	r2, #0
 800e666:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e668:	4b11      	ldr	r3, [pc, #68]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e66a:	2200      	movs	r2, #0
 800e66c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e66e:	4b10      	ldr	r3, [pc, #64]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e670:	2200      	movs	r2, #0
 800e672:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e674:	4b0e      	ldr	r3, [pc, #56]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e676:	2200      	movs	r2, #0
 800e678:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e67a:	480d      	ldr	r0, [pc, #52]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e67c:	f7f8 ff8d 	bl	800759a <HAL_PCD_Init>
 800e680:	4603      	mov	r3, r0
 800e682:	2b00      	cmp	r3, #0
 800e684:	d001      	beq.n	800e68a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e686:	f7f5 fb23 	bl	8003cd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e68a:	2180      	movs	r1, #128	; 0x80
 800e68c:	4808      	ldr	r0, [pc, #32]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e68e:	f7fa f9e4 	bl	8008a5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e692:	2240      	movs	r2, #64	; 0x40
 800e694:	2100      	movs	r1, #0
 800e696:	4806      	ldr	r0, [pc, #24]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e698:	f7fa f998 	bl	80089cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e69c:	2280      	movs	r2, #128	; 0x80
 800e69e:	2101      	movs	r1, #1
 800e6a0:	4803      	ldr	r0, [pc, #12]	; (800e6b0 <USBD_LL_Init+0x94>)
 800e6a2:	f7fa f993 	bl	80089cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	20002a14 	.word	0x20002a14

0800e6b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7f9 f882 	bl	80077d4 <HAL_PCD_Start>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6d4:	7bfb      	ldrb	r3, [r7, #15]
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f000 f942 	bl	800e960 <USBD_Get_USB_Status>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3710      	adds	r7, #16
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b084      	sub	sp, #16
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	4608      	mov	r0, r1
 800e6f4:	4611      	mov	r1, r2
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	70fb      	strb	r3, [r7, #3]
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	70bb      	strb	r3, [r7, #2]
 800e700:	4613      	mov	r3, r2
 800e702:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e704:	2300      	movs	r3, #0
 800e706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e708:	2300      	movs	r3, #0
 800e70a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e712:	78bb      	ldrb	r3, [r7, #2]
 800e714:	883a      	ldrh	r2, [r7, #0]
 800e716:	78f9      	ldrb	r1, [r7, #3]
 800e718:	f7f9 fd53 	bl	80081c2 <HAL_PCD_EP_Open>
 800e71c:	4603      	mov	r3, r0
 800e71e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e720:	7bfb      	ldrb	r3, [r7, #15]
 800e722:	4618      	mov	r0, r3
 800e724:	f000 f91c 	bl	800e960 <USBD_Get_USB_Status>
 800e728:	4603      	mov	r3, r0
 800e72a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e72c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b084      	sub	sp, #16
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
 800e73e:	460b      	mov	r3, r1
 800e740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e742:	2300      	movs	r3, #0
 800e744:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e746:	2300      	movs	r3, #0
 800e748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e750:	78fa      	ldrb	r2, [r7, #3]
 800e752:	4611      	mov	r1, r2
 800e754:	4618      	mov	r0, r3
 800e756:	f7f9 fd9c 	bl	8008292 <HAL_PCD_EP_Close>
 800e75a:	4603      	mov	r3, r0
 800e75c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e75e:	7bfb      	ldrb	r3, [r7, #15]
 800e760:	4618      	mov	r0, r3
 800e762:	f000 f8fd 	bl	800e960 <USBD_Get_USB_Status>
 800e766:	4603      	mov	r3, r0
 800e768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e76a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3710      	adds	r7, #16
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	460b      	mov	r3, r1
 800e77e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e780:	2300      	movs	r3, #0
 800e782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e784:	2300      	movs	r3, #0
 800e786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e78e:	78fa      	ldrb	r2, [r7, #3]
 800e790:	4611      	mov	r1, r2
 800e792:	4618      	mov	r0, r3
 800e794:	f7f9 fe74 	bl	8008480 <HAL_PCD_EP_SetStall>
 800e798:	4603      	mov	r3, r0
 800e79a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e79c:	7bfb      	ldrb	r3, [r7, #15]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 f8de 	bl	800e960 <USBD_Get_USB_Status>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7cc:	78fa      	ldrb	r2, [r7, #3]
 800e7ce:	4611      	mov	r1, r2
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7f9 feb9 	bl	8008548 <HAL_PCD_EP_ClrStall>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7da:	7bfb      	ldrb	r3, [r7, #15]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 f8bf 	bl	800e960 <USBD_Get_USB_Status>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e802:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	da0b      	bge.n	800e824 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e80c:	78fb      	ldrb	r3, [r7, #3]
 800e80e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e812:	68f9      	ldr	r1, [r7, #12]
 800e814:	4613      	mov	r3, r2
 800e816:	00db      	lsls	r3, r3, #3
 800e818:	4413      	add	r3, r2
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	440b      	add	r3, r1
 800e81e:	333e      	adds	r3, #62	; 0x3e
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	e00b      	b.n	800e83c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e824:	78fb      	ldrb	r3, [r7, #3]
 800e826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e82a:	68f9      	ldr	r1, [r7, #12]
 800e82c:	4613      	mov	r3, r2
 800e82e:	00db      	lsls	r3, r3, #3
 800e830:	4413      	add	r3, r2
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	440b      	add	r3, r1
 800e836:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e83a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3714      	adds	r7, #20
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	460b      	mov	r3, r1
 800e852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e854:	2300      	movs	r3, #0
 800e856:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e858:	2300      	movs	r3, #0
 800e85a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e862:	78fa      	ldrb	r2, [r7, #3]
 800e864:	4611      	mov	r1, r2
 800e866:	4618      	mov	r0, r3
 800e868:	f7f9 fc86 	bl	8008178 <HAL_PCD_SetAddress>
 800e86c:	4603      	mov	r3, r0
 800e86e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e870:	7bfb      	ldrb	r3, [r7, #15]
 800e872:	4618      	mov	r0, r3
 800e874:	f000 f874 	bl	800e960 <USBD_Get_USB_Status>
 800e878:	4603      	mov	r3, r0
 800e87a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e87c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3710      	adds	r7, #16
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}

0800e886 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b086      	sub	sp, #24
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	60f8      	str	r0, [r7, #12]
 800e88e:	607a      	str	r2, [r7, #4]
 800e890:	603b      	str	r3, [r7, #0]
 800e892:	460b      	mov	r3, r1
 800e894:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e896:	2300      	movs	r3, #0
 800e898:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e89a:	2300      	movs	r3, #0
 800e89c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e8a4:	7af9      	ldrb	r1, [r7, #11]
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	f7f9 fd9f 	bl	80083ec <HAL_PCD_EP_Transmit>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8b2:	7dfb      	ldrb	r3, [r7, #23]
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f000 f853 	bl	800e960 <USBD_Get_USB_Status>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e8be:	7dbb      	ldrb	r3, [r7, #22]
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3718      	adds	r7, #24
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b086      	sub	sp, #24
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	607a      	str	r2, [r7, #4]
 800e8d2:	603b      	str	r3, [r7, #0]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e8e6:	7af9      	ldrb	r1, [r7, #11]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	687a      	ldr	r2, [r7, #4]
 800e8ec:	f7f9 fd1b 	bl	8008326 <HAL_PCD_EP_Receive>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8f4:	7dfb      	ldrb	r3, [r7, #23]
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f000 f832 	bl	800e960 <USBD_Get_USB_Status>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e900:	7dbb      	ldrb	r3, [r7, #22]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3718      	adds	r7, #24
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b082      	sub	sp, #8
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
 800e912:	460b      	mov	r3, r1
 800e914:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e91c:	78fa      	ldrb	r2, [r7, #3]
 800e91e:	4611      	mov	r1, r2
 800e920:	4618      	mov	r0, r3
 800e922:	f7f9 fd4b 	bl	80083bc <HAL_PCD_EP_GetRxCount>
 800e926:	4603      	mov	r3, r0
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e938:	4b03      	ldr	r3, [pc, #12]	; (800e948 <USBD_static_malloc+0x18>)
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	370c      	adds	r7, #12
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr
 800e946:	bf00      	nop
 800e948:	20002f20 	.word	0x20002f20

0800e94c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]

}
 800e954:	bf00      	nop
 800e956:	370c      	adds	r7, #12
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e960:	b480      	push	{r7}
 800e962:	b085      	sub	sp, #20
 800e964:	af00      	add	r7, sp, #0
 800e966:	4603      	mov	r3, r0
 800e968:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e96a:	2300      	movs	r3, #0
 800e96c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e96e:	79fb      	ldrb	r3, [r7, #7]
 800e970:	2b03      	cmp	r3, #3
 800e972:	d817      	bhi.n	800e9a4 <USBD_Get_USB_Status+0x44>
 800e974:	a201      	add	r2, pc, #4	; (adr r2, 800e97c <USBD_Get_USB_Status+0x1c>)
 800e976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e97a:	bf00      	nop
 800e97c:	0800e98d 	.word	0x0800e98d
 800e980:	0800e993 	.word	0x0800e993
 800e984:	0800e999 	.word	0x0800e999
 800e988:	0800e99f 	.word	0x0800e99f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e98c:	2300      	movs	r3, #0
 800e98e:	73fb      	strb	r3, [r7, #15]
    break;
 800e990:	e00b      	b.n	800e9aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e992:	2303      	movs	r3, #3
 800e994:	73fb      	strb	r3, [r7, #15]
    break;
 800e996:	e008      	b.n	800e9aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e998:	2301      	movs	r3, #1
 800e99a:	73fb      	strb	r3, [r7, #15]
    break;
 800e99c:	e005      	b.n	800e9aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e99e:	2303      	movs	r3, #3
 800e9a0:	73fb      	strb	r3, [r7, #15]
    break;
 800e9a2:	e002      	b.n	800e9aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e9a4:	2303      	movs	r3, #3
 800e9a6:	73fb      	strb	r3, [r7, #15]
    break;
 800e9a8:	bf00      	nop
  }
  return usb_status;
 800e9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3714      	adds	r7, #20
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr

0800e9b8 <__errno>:
 800e9b8:	4b01      	ldr	r3, [pc, #4]	; (800e9c0 <__errno+0x8>)
 800e9ba:	6818      	ldr	r0, [r3, #0]
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	20000110 	.word	0x20000110

0800e9c4 <__libc_init_array>:
 800e9c4:	b570      	push	{r4, r5, r6, lr}
 800e9c6:	4d0d      	ldr	r5, [pc, #52]	; (800e9fc <__libc_init_array+0x38>)
 800e9c8:	4c0d      	ldr	r4, [pc, #52]	; (800ea00 <__libc_init_array+0x3c>)
 800e9ca:	1b64      	subs	r4, r4, r5
 800e9cc:	10a4      	asrs	r4, r4, #2
 800e9ce:	2600      	movs	r6, #0
 800e9d0:	42a6      	cmp	r6, r4
 800e9d2:	d109      	bne.n	800e9e8 <__libc_init_array+0x24>
 800e9d4:	4d0b      	ldr	r5, [pc, #44]	; (800ea04 <__libc_init_array+0x40>)
 800e9d6:	4c0c      	ldr	r4, [pc, #48]	; (800ea08 <__libc_init_array+0x44>)
 800e9d8:	f005 f9a2 	bl	8013d20 <_init>
 800e9dc:	1b64      	subs	r4, r4, r5
 800e9de:	10a4      	asrs	r4, r4, #2
 800e9e0:	2600      	movs	r6, #0
 800e9e2:	42a6      	cmp	r6, r4
 800e9e4:	d105      	bne.n	800e9f2 <__libc_init_array+0x2e>
 800e9e6:	bd70      	pop	{r4, r5, r6, pc}
 800e9e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9ec:	4798      	blx	r3
 800e9ee:	3601      	adds	r6, #1
 800e9f0:	e7ee      	b.n	800e9d0 <__libc_init_array+0xc>
 800e9f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9f6:	4798      	blx	r3
 800e9f8:	3601      	adds	r6, #1
 800e9fa:	e7f2      	b.n	800e9e2 <__libc_init_array+0x1e>
 800e9fc:	080156bc 	.word	0x080156bc
 800ea00:	080156bc 	.word	0x080156bc
 800ea04:	080156bc 	.word	0x080156bc
 800ea08:	080156c0 	.word	0x080156c0

0800ea0c <memcpy>:
 800ea0c:	440a      	add	r2, r1
 800ea0e:	4291      	cmp	r1, r2
 800ea10:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea14:	d100      	bne.n	800ea18 <memcpy+0xc>
 800ea16:	4770      	bx	lr
 800ea18:	b510      	push	{r4, lr}
 800ea1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea22:	4291      	cmp	r1, r2
 800ea24:	d1f9      	bne.n	800ea1a <memcpy+0xe>
 800ea26:	bd10      	pop	{r4, pc}

0800ea28 <memmove>:
 800ea28:	4288      	cmp	r0, r1
 800ea2a:	b510      	push	{r4, lr}
 800ea2c:	eb01 0402 	add.w	r4, r1, r2
 800ea30:	d902      	bls.n	800ea38 <memmove+0x10>
 800ea32:	4284      	cmp	r4, r0
 800ea34:	4623      	mov	r3, r4
 800ea36:	d807      	bhi.n	800ea48 <memmove+0x20>
 800ea38:	1e43      	subs	r3, r0, #1
 800ea3a:	42a1      	cmp	r1, r4
 800ea3c:	d008      	beq.n	800ea50 <memmove+0x28>
 800ea3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea46:	e7f8      	b.n	800ea3a <memmove+0x12>
 800ea48:	4402      	add	r2, r0
 800ea4a:	4601      	mov	r1, r0
 800ea4c:	428a      	cmp	r2, r1
 800ea4e:	d100      	bne.n	800ea52 <memmove+0x2a>
 800ea50:	bd10      	pop	{r4, pc}
 800ea52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea5a:	e7f7      	b.n	800ea4c <memmove+0x24>

0800ea5c <memset>:
 800ea5c:	4402      	add	r2, r0
 800ea5e:	4603      	mov	r3, r0
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d100      	bne.n	800ea66 <memset+0xa>
 800ea64:	4770      	bx	lr
 800ea66:	f803 1b01 	strb.w	r1, [r3], #1
 800ea6a:	e7f9      	b.n	800ea60 <memset+0x4>

0800ea6c <__cvt>:
 800ea6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea70:	ec55 4b10 	vmov	r4, r5, d0
 800ea74:	2d00      	cmp	r5, #0
 800ea76:	460e      	mov	r6, r1
 800ea78:	4619      	mov	r1, r3
 800ea7a:	462b      	mov	r3, r5
 800ea7c:	bfbb      	ittet	lt
 800ea7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ea82:	461d      	movlt	r5, r3
 800ea84:	2300      	movge	r3, #0
 800ea86:	232d      	movlt	r3, #45	; 0x2d
 800ea88:	700b      	strb	r3, [r1, #0]
 800ea8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ea90:	4691      	mov	r9, r2
 800ea92:	f023 0820 	bic.w	r8, r3, #32
 800ea96:	bfbc      	itt	lt
 800ea98:	4622      	movlt	r2, r4
 800ea9a:	4614      	movlt	r4, r2
 800ea9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eaa0:	d005      	beq.n	800eaae <__cvt+0x42>
 800eaa2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800eaa6:	d100      	bne.n	800eaaa <__cvt+0x3e>
 800eaa8:	3601      	adds	r6, #1
 800eaaa:	2102      	movs	r1, #2
 800eaac:	e000      	b.n	800eab0 <__cvt+0x44>
 800eaae:	2103      	movs	r1, #3
 800eab0:	ab03      	add	r3, sp, #12
 800eab2:	9301      	str	r3, [sp, #4]
 800eab4:	ab02      	add	r3, sp, #8
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	ec45 4b10 	vmov	d0, r4, r5
 800eabc:	4653      	mov	r3, sl
 800eabe:	4632      	mov	r2, r6
 800eac0:	f001 ffda 	bl	8010a78 <_dtoa_r>
 800eac4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800eac8:	4607      	mov	r7, r0
 800eaca:	d102      	bne.n	800ead2 <__cvt+0x66>
 800eacc:	f019 0f01 	tst.w	r9, #1
 800ead0:	d022      	beq.n	800eb18 <__cvt+0xac>
 800ead2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ead6:	eb07 0906 	add.w	r9, r7, r6
 800eada:	d110      	bne.n	800eafe <__cvt+0x92>
 800eadc:	783b      	ldrb	r3, [r7, #0]
 800eade:	2b30      	cmp	r3, #48	; 0x30
 800eae0:	d10a      	bne.n	800eaf8 <__cvt+0x8c>
 800eae2:	2200      	movs	r2, #0
 800eae4:	2300      	movs	r3, #0
 800eae6:	4620      	mov	r0, r4
 800eae8:	4629      	mov	r1, r5
 800eaea:	f7f2 f80d 	bl	8000b08 <__aeabi_dcmpeq>
 800eaee:	b918      	cbnz	r0, 800eaf8 <__cvt+0x8c>
 800eaf0:	f1c6 0601 	rsb	r6, r6, #1
 800eaf4:	f8ca 6000 	str.w	r6, [sl]
 800eaf8:	f8da 3000 	ldr.w	r3, [sl]
 800eafc:	4499      	add	r9, r3
 800eafe:	2200      	movs	r2, #0
 800eb00:	2300      	movs	r3, #0
 800eb02:	4620      	mov	r0, r4
 800eb04:	4629      	mov	r1, r5
 800eb06:	f7f1 ffff 	bl	8000b08 <__aeabi_dcmpeq>
 800eb0a:	b108      	cbz	r0, 800eb10 <__cvt+0xa4>
 800eb0c:	f8cd 900c 	str.w	r9, [sp, #12]
 800eb10:	2230      	movs	r2, #48	; 0x30
 800eb12:	9b03      	ldr	r3, [sp, #12]
 800eb14:	454b      	cmp	r3, r9
 800eb16:	d307      	bcc.n	800eb28 <__cvt+0xbc>
 800eb18:	9b03      	ldr	r3, [sp, #12]
 800eb1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb1c:	1bdb      	subs	r3, r3, r7
 800eb1e:	4638      	mov	r0, r7
 800eb20:	6013      	str	r3, [r2, #0]
 800eb22:	b004      	add	sp, #16
 800eb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb28:	1c59      	adds	r1, r3, #1
 800eb2a:	9103      	str	r1, [sp, #12]
 800eb2c:	701a      	strb	r2, [r3, #0]
 800eb2e:	e7f0      	b.n	800eb12 <__cvt+0xa6>

0800eb30 <__exponent>:
 800eb30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb32:	4603      	mov	r3, r0
 800eb34:	2900      	cmp	r1, #0
 800eb36:	bfb8      	it	lt
 800eb38:	4249      	neglt	r1, r1
 800eb3a:	f803 2b02 	strb.w	r2, [r3], #2
 800eb3e:	bfb4      	ite	lt
 800eb40:	222d      	movlt	r2, #45	; 0x2d
 800eb42:	222b      	movge	r2, #43	; 0x2b
 800eb44:	2909      	cmp	r1, #9
 800eb46:	7042      	strb	r2, [r0, #1]
 800eb48:	dd2a      	ble.n	800eba0 <__exponent+0x70>
 800eb4a:	f10d 0407 	add.w	r4, sp, #7
 800eb4e:	46a4      	mov	ip, r4
 800eb50:	270a      	movs	r7, #10
 800eb52:	46a6      	mov	lr, r4
 800eb54:	460a      	mov	r2, r1
 800eb56:	fb91 f6f7 	sdiv	r6, r1, r7
 800eb5a:	fb07 1516 	mls	r5, r7, r6, r1
 800eb5e:	3530      	adds	r5, #48	; 0x30
 800eb60:	2a63      	cmp	r2, #99	; 0x63
 800eb62:	f104 34ff 	add.w	r4, r4, #4294967295
 800eb66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800eb6a:	4631      	mov	r1, r6
 800eb6c:	dcf1      	bgt.n	800eb52 <__exponent+0x22>
 800eb6e:	3130      	adds	r1, #48	; 0x30
 800eb70:	f1ae 0502 	sub.w	r5, lr, #2
 800eb74:	f804 1c01 	strb.w	r1, [r4, #-1]
 800eb78:	1c44      	adds	r4, r0, #1
 800eb7a:	4629      	mov	r1, r5
 800eb7c:	4561      	cmp	r1, ip
 800eb7e:	d30a      	bcc.n	800eb96 <__exponent+0x66>
 800eb80:	f10d 0209 	add.w	r2, sp, #9
 800eb84:	eba2 020e 	sub.w	r2, r2, lr
 800eb88:	4565      	cmp	r5, ip
 800eb8a:	bf88      	it	hi
 800eb8c:	2200      	movhi	r2, #0
 800eb8e:	4413      	add	r3, r2
 800eb90:	1a18      	subs	r0, r3, r0
 800eb92:	b003      	add	sp, #12
 800eb94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eb9e:	e7ed      	b.n	800eb7c <__exponent+0x4c>
 800eba0:	2330      	movs	r3, #48	; 0x30
 800eba2:	3130      	adds	r1, #48	; 0x30
 800eba4:	7083      	strb	r3, [r0, #2]
 800eba6:	70c1      	strb	r1, [r0, #3]
 800eba8:	1d03      	adds	r3, r0, #4
 800ebaa:	e7f1      	b.n	800eb90 <__exponent+0x60>

0800ebac <_printf_float>:
 800ebac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb0:	ed2d 8b02 	vpush	{d8}
 800ebb4:	b08d      	sub	sp, #52	; 0x34
 800ebb6:	460c      	mov	r4, r1
 800ebb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ebbc:	4616      	mov	r6, r2
 800ebbe:	461f      	mov	r7, r3
 800ebc0:	4605      	mov	r5, r0
 800ebc2:	f003 fa6d 	bl	80120a0 <_localeconv_r>
 800ebc6:	f8d0 a000 	ldr.w	sl, [r0]
 800ebca:	4650      	mov	r0, sl
 800ebcc:	f7f1 fb1a 	bl	8000204 <strlen>
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	930a      	str	r3, [sp, #40]	; 0x28
 800ebd4:	6823      	ldr	r3, [r4, #0]
 800ebd6:	9305      	str	r3, [sp, #20]
 800ebd8:	f8d8 3000 	ldr.w	r3, [r8]
 800ebdc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ebe0:	3307      	adds	r3, #7
 800ebe2:	f023 0307 	bic.w	r3, r3, #7
 800ebe6:	f103 0208 	add.w	r2, r3, #8
 800ebea:	f8c8 2000 	str.w	r2, [r8]
 800ebee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ebf6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ebfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ebfe:	9307      	str	r3, [sp, #28]
 800ec00:	f8cd 8018 	str.w	r8, [sp, #24]
 800ec04:	ee08 0a10 	vmov	s16, r0
 800ec08:	4b9f      	ldr	r3, [pc, #636]	; (800ee88 <_printf_float+0x2dc>)
 800ec0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec12:	f7f1 ffab 	bl	8000b6c <__aeabi_dcmpun>
 800ec16:	bb88      	cbnz	r0, 800ec7c <_printf_float+0xd0>
 800ec18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec1c:	4b9a      	ldr	r3, [pc, #616]	; (800ee88 <_printf_float+0x2dc>)
 800ec1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec22:	f7f1 ff85 	bl	8000b30 <__aeabi_dcmple>
 800ec26:	bb48      	cbnz	r0, 800ec7c <_printf_float+0xd0>
 800ec28:	2200      	movs	r2, #0
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	4640      	mov	r0, r8
 800ec2e:	4649      	mov	r1, r9
 800ec30:	f7f1 ff74 	bl	8000b1c <__aeabi_dcmplt>
 800ec34:	b110      	cbz	r0, 800ec3c <_printf_float+0x90>
 800ec36:	232d      	movs	r3, #45	; 0x2d
 800ec38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec3c:	4b93      	ldr	r3, [pc, #588]	; (800ee8c <_printf_float+0x2e0>)
 800ec3e:	4894      	ldr	r0, [pc, #592]	; (800ee90 <_printf_float+0x2e4>)
 800ec40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ec44:	bf94      	ite	ls
 800ec46:	4698      	movls	r8, r3
 800ec48:	4680      	movhi	r8, r0
 800ec4a:	2303      	movs	r3, #3
 800ec4c:	6123      	str	r3, [r4, #16]
 800ec4e:	9b05      	ldr	r3, [sp, #20]
 800ec50:	f023 0204 	bic.w	r2, r3, #4
 800ec54:	6022      	str	r2, [r4, #0]
 800ec56:	f04f 0900 	mov.w	r9, #0
 800ec5a:	9700      	str	r7, [sp, #0]
 800ec5c:	4633      	mov	r3, r6
 800ec5e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ec60:	4621      	mov	r1, r4
 800ec62:	4628      	mov	r0, r5
 800ec64:	f000 f9d8 	bl	800f018 <_printf_common>
 800ec68:	3001      	adds	r0, #1
 800ec6a:	f040 8090 	bne.w	800ed8e <_printf_float+0x1e2>
 800ec6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec72:	b00d      	add	sp, #52	; 0x34
 800ec74:	ecbd 8b02 	vpop	{d8}
 800ec78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7c:	4642      	mov	r2, r8
 800ec7e:	464b      	mov	r3, r9
 800ec80:	4640      	mov	r0, r8
 800ec82:	4649      	mov	r1, r9
 800ec84:	f7f1 ff72 	bl	8000b6c <__aeabi_dcmpun>
 800ec88:	b140      	cbz	r0, 800ec9c <_printf_float+0xf0>
 800ec8a:	464b      	mov	r3, r9
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	bfbc      	itt	lt
 800ec90:	232d      	movlt	r3, #45	; 0x2d
 800ec92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ec96:	487f      	ldr	r0, [pc, #508]	; (800ee94 <_printf_float+0x2e8>)
 800ec98:	4b7f      	ldr	r3, [pc, #508]	; (800ee98 <_printf_float+0x2ec>)
 800ec9a:	e7d1      	b.n	800ec40 <_printf_float+0x94>
 800ec9c:	6863      	ldr	r3, [r4, #4]
 800ec9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eca2:	9206      	str	r2, [sp, #24]
 800eca4:	1c5a      	adds	r2, r3, #1
 800eca6:	d13f      	bne.n	800ed28 <_printf_float+0x17c>
 800eca8:	2306      	movs	r3, #6
 800ecaa:	6063      	str	r3, [r4, #4]
 800ecac:	9b05      	ldr	r3, [sp, #20]
 800ecae:	6861      	ldr	r1, [r4, #4]
 800ecb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	9303      	str	r3, [sp, #12]
 800ecb8:	ab0a      	add	r3, sp, #40	; 0x28
 800ecba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ecbe:	ab09      	add	r3, sp, #36	; 0x24
 800ecc0:	ec49 8b10 	vmov	d0, r8, r9
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	6022      	str	r2, [r4, #0]
 800ecc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eccc:	4628      	mov	r0, r5
 800ecce:	f7ff fecd 	bl	800ea6c <__cvt>
 800ecd2:	9b06      	ldr	r3, [sp, #24]
 800ecd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecd6:	2b47      	cmp	r3, #71	; 0x47
 800ecd8:	4680      	mov	r8, r0
 800ecda:	d108      	bne.n	800ecee <_printf_float+0x142>
 800ecdc:	1cc8      	adds	r0, r1, #3
 800ecde:	db02      	blt.n	800ece6 <_printf_float+0x13a>
 800ece0:	6863      	ldr	r3, [r4, #4]
 800ece2:	4299      	cmp	r1, r3
 800ece4:	dd41      	ble.n	800ed6a <_printf_float+0x1be>
 800ece6:	f1ab 0b02 	sub.w	fp, fp, #2
 800ecea:	fa5f fb8b 	uxtb.w	fp, fp
 800ecee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ecf2:	d820      	bhi.n	800ed36 <_printf_float+0x18a>
 800ecf4:	3901      	subs	r1, #1
 800ecf6:	465a      	mov	r2, fp
 800ecf8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ecfc:	9109      	str	r1, [sp, #36]	; 0x24
 800ecfe:	f7ff ff17 	bl	800eb30 <__exponent>
 800ed02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed04:	1813      	adds	r3, r2, r0
 800ed06:	2a01      	cmp	r2, #1
 800ed08:	4681      	mov	r9, r0
 800ed0a:	6123      	str	r3, [r4, #16]
 800ed0c:	dc02      	bgt.n	800ed14 <_printf_float+0x168>
 800ed0e:	6822      	ldr	r2, [r4, #0]
 800ed10:	07d2      	lsls	r2, r2, #31
 800ed12:	d501      	bpl.n	800ed18 <_printf_float+0x16c>
 800ed14:	3301      	adds	r3, #1
 800ed16:	6123      	str	r3, [r4, #16]
 800ed18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d09c      	beq.n	800ec5a <_printf_float+0xae>
 800ed20:	232d      	movs	r3, #45	; 0x2d
 800ed22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed26:	e798      	b.n	800ec5a <_printf_float+0xae>
 800ed28:	9a06      	ldr	r2, [sp, #24]
 800ed2a:	2a47      	cmp	r2, #71	; 0x47
 800ed2c:	d1be      	bne.n	800ecac <_printf_float+0x100>
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d1bc      	bne.n	800ecac <_printf_float+0x100>
 800ed32:	2301      	movs	r3, #1
 800ed34:	e7b9      	b.n	800ecaa <_printf_float+0xfe>
 800ed36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ed3a:	d118      	bne.n	800ed6e <_printf_float+0x1c2>
 800ed3c:	2900      	cmp	r1, #0
 800ed3e:	6863      	ldr	r3, [r4, #4]
 800ed40:	dd0b      	ble.n	800ed5a <_printf_float+0x1ae>
 800ed42:	6121      	str	r1, [r4, #16]
 800ed44:	b913      	cbnz	r3, 800ed4c <_printf_float+0x1a0>
 800ed46:	6822      	ldr	r2, [r4, #0]
 800ed48:	07d0      	lsls	r0, r2, #31
 800ed4a:	d502      	bpl.n	800ed52 <_printf_float+0x1a6>
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	440b      	add	r3, r1
 800ed50:	6123      	str	r3, [r4, #16]
 800ed52:	65a1      	str	r1, [r4, #88]	; 0x58
 800ed54:	f04f 0900 	mov.w	r9, #0
 800ed58:	e7de      	b.n	800ed18 <_printf_float+0x16c>
 800ed5a:	b913      	cbnz	r3, 800ed62 <_printf_float+0x1b6>
 800ed5c:	6822      	ldr	r2, [r4, #0]
 800ed5e:	07d2      	lsls	r2, r2, #31
 800ed60:	d501      	bpl.n	800ed66 <_printf_float+0x1ba>
 800ed62:	3302      	adds	r3, #2
 800ed64:	e7f4      	b.n	800ed50 <_printf_float+0x1a4>
 800ed66:	2301      	movs	r3, #1
 800ed68:	e7f2      	b.n	800ed50 <_printf_float+0x1a4>
 800ed6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ed6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed70:	4299      	cmp	r1, r3
 800ed72:	db05      	blt.n	800ed80 <_printf_float+0x1d4>
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	6121      	str	r1, [r4, #16]
 800ed78:	07d8      	lsls	r0, r3, #31
 800ed7a:	d5ea      	bpl.n	800ed52 <_printf_float+0x1a6>
 800ed7c:	1c4b      	adds	r3, r1, #1
 800ed7e:	e7e7      	b.n	800ed50 <_printf_float+0x1a4>
 800ed80:	2900      	cmp	r1, #0
 800ed82:	bfd4      	ite	le
 800ed84:	f1c1 0202 	rsble	r2, r1, #2
 800ed88:	2201      	movgt	r2, #1
 800ed8a:	4413      	add	r3, r2
 800ed8c:	e7e0      	b.n	800ed50 <_printf_float+0x1a4>
 800ed8e:	6823      	ldr	r3, [r4, #0]
 800ed90:	055a      	lsls	r2, r3, #21
 800ed92:	d407      	bmi.n	800eda4 <_printf_float+0x1f8>
 800ed94:	6923      	ldr	r3, [r4, #16]
 800ed96:	4642      	mov	r2, r8
 800ed98:	4631      	mov	r1, r6
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	47b8      	blx	r7
 800ed9e:	3001      	adds	r0, #1
 800eda0:	d12c      	bne.n	800edfc <_printf_float+0x250>
 800eda2:	e764      	b.n	800ec6e <_printf_float+0xc2>
 800eda4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eda8:	f240 80e0 	bls.w	800ef6c <_printf_float+0x3c0>
 800edac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800edb0:	2200      	movs	r2, #0
 800edb2:	2300      	movs	r3, #0
 800edb4:	f7f1 fea8 	bl	8000b08 <__aeabi_dcmpeq>
 800edb8:	2800      	cmp	r0, #0
 800edba:	d034      	beq.n	800ee26 <_printf_float+0x27a>
 800edbc:	4a37      	ldr	r2, [pc, #220]	; (800ee9c <_printf_float+0x2f0>)
 800edbe:	2301      	movs	r3, #1
 800edc0:	4631      	mov	r1, r6
 800edc2:	4628      	mov	r0, r5
 800edc4:	47b8      	blx	r7
 800edc6:	3001      	adds	r0, #1
 800edc8:	f43f af51 	beq.w	800ec6e <_printf_float+0xc2>
 800edcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800edd0:	429a      	cmp	r2, r3
 800edd2:	db02      	blt.n	800edda <_printf_float+0x22e>
 800edd4:	6823      	ldr	r3, [r4, #0]
 800edd6:	07d8      	lsls	r0, r3, #31
 800edd8:	d510      	bpl.n	800edfc <_printf_float+0x250>
 800edda:	ee18 3a10 	vmov	r3, s16
 800edde:	4652      	mov	r2, sl
 800ede0:	4631      	mov	r1, r6
 800ede2:	4628      	mov	r0, r5
 800ede4:	47b8      	blx	r7
 800ede6:	3001      	adds	r0, #1
 800ede8:	f43f af41 	beq.w	800ec6e <_printf_float+0xc2>
 800edec:	f04f 0800 	mov.w	r8, #0
 800edf0:	f104 091a 	add.w	r9, r4, #26
 800edf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edf6:	3b01      	subs	r3, #1
 800edf8:	4543      	cmp	r3, r8
 800edfa:	dc09      	bgt.n	800ee10 <_printf_float+0x264>
 800edfc:	6823      	ldr	r3, [r4, #0]
 800edfe:	079b      	lsls	r3, r3, #30
 800ee00:	f100 8105 	bmi.w	800f00e <_printf_float+0x462>
 800ee04:	68e0      	ldr	r0, [r4, #12]
 800ee06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee08:	4298      	cmp	r0, r3
 800ee0a:	bfb8      	it	lt
 800ee0c:	4618      	movlt	r0, r3
 800ee0e:	e730      	b.n	800ec72 <_printf_float+0xc6>
 800ee10:	2301      	movs	r3, #1
 800ee12:	464a      	mov	r2, r9
 800ee14:	4631      	mov	r1, r6
 800ee16:	4628      	mov	r0, r5
 800ee18:	47b8      	blx	r7
 800ee1a:	3001      	adds	r0, #1
 800ee1c:	f43f af27 	beq.w	800ec6e <_printf_float+0xc2>
 800ee20:	f108 0801 	add.w	r8, r8, #1
 800ee24:	e7e6      	b.n	800edf4 <_printf_float+0x248>
 800ee26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	dc39      	bgt.n	800eea0 <_printf_float+0x2f4>
 800ee2c:	4a1b      	ldr	r2, [pc, #108]	; (800ee9c <_printf_float+0x2f0>)
 800ee2e:	2301      	movs	r3, #1
 800ee30:	4631      	mov	r1, r6
 800ee32:	4628      	mov	r0, r5
 800ee34:	47b8      	blx	r7
 800ee36:	3001      	adds	r0, #1
 800ee38:	f43f af19 	beq.w	800ec6e <_printf_float+0xc2>
 800ee3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee40:	4313      	orrs	r3, r2
 800ee42:	d102      	bne.n	800ee4a <_printf_float+0x29e>
 800ee44:	6823      	ldr	r3, [r4, #0]
 800ee46:	07d9      	lsls	r1, r3, #31
 800ee48:	d5d8      	bpl.n	800edfc <_printf_float+0x250>
 800ee4a:	ee18 3a10 	vmov	r3, s16
 800ee4e:	4652      	mov	r2, sl
 800ee50:	4631      	mov	r1, r6
 800ee52:	4628      	mov	r0, r5
 800ee54:	47b8      	blx	r7
 800ee56:	3001      	adds	r0, #1
 800ee58:	f43f af09 	beq.w	800ec6e <_printf_float+0xc2>
 800ee5c:	f04f 0900 	mov.w	r9, #0
 800ee60:	f104 0a1a 	add.w	sl, r4, #26
 800ee64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee66:	425b      	negs	r3, r3
 800ee68:	454b      	cmp	r3, r9
 800ee6a:	dc01      	bgt.n	800ee70 <_printf_float+0x2c4>
 800ee6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee6e:	e792      	b.n	800ed96 <_printf_float+0x1ea>
 800ee70:	2301      	movs	r3, #1
 800ee72:	4652      	mov	r2, sl
 800ee74:	4631      	mov	r1, r6
 800ee76:	4628      	mov	r0, r5
 800ee78:	47b8      	blx	r7
 800ee7a:	3001      	adds	r0, #1
 800ee7c:	f43f aef7 	beq.w	800ec6e <_printf_float+0xc2>
 800ee80:	f109 0901 	add.w	r9, r9, #1
 800ee84:	e7ee      	b.n	800ee64 <_printf_float+0x2b8>
 800ee86:	bf00      	nop
 800ee88:	7fefffff 	.word	0x7fefffff
 800ee8c:	08015300 	.word	0x08015300
 800ee90:	08015304 	.word	0x08015304
 800ee94:	0801530c 	.word	0x0801530c
 800ee98:	08015308 	.word	0x08015308
 800ee9c:	08015661 	.word	0x08015661
 800eea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eea4:	429a      	cmp	r2, r3
 800eea6:	bfa8      	it	ge
 800eea8:	461a      	movge	r2, r3
 800eeaa:	2a00      	cmp	r2, #0
 800eeac:	4691      	mov	r9, r2
 800eeae:	dc37      	bgt.n	800ef20 <_printf_float+0x374>
 800eeb0:	f04f 0b00 	mov.w	fp, #0
 800eeb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eeb8:	f104 021a 	add.w	r2, r4, #26
 800eebc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eebe:	9305      	str	r3, [sp, #20]
 800eec0:	eba3 0309 	sub.w	r3, r3, r9
 800eec4:	455b      	cmp	r3, fp
 800eec6:	dc33      	bgt.n	800ef30 <_printf_float+0x384>
 800eec8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eecc:	429a      	cmp	r2, r3
 800eece:	db3b      	blt.n	800ef48 <_printf_float+0x39c>
 800eed0:	6823      	ldr	r3, [r4, #0]
 800eed2:	07da      	lsls	r2, r3, #31
 800eed4:	d438      	bmi.n	800ef48 <_printf_float+0x39c>
 800eed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eed8:	9a05      	ldr	r2, [sp, #20]
 800eeda:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eedc:	1a9a      	subs	r2, r3, r2
 800eede:	eba3 0901 	sub.w	r9, r3, r1
 800eee2:	4591      	cmp	r9, r2
 800eee4:	bfa8      	it	ge
 800eee6:	4691      	movge	r9, r2
 800eee8:	f1b9 0f00 	cmp.w	r9, #0
 800eeec:	dc35      	bgt.n	800ef5a <_printf_float+0x3ae>
 800eeee:	f04f 0800 	mov.w	r8, #0
 800eef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eef6:	f104 0a1a 	add.w	sl, r4, #26
 800eefa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eefe:	1a9b      	subs	r3, r3, r2
 800ef00:	eba3 0309 	sub.w	r3, r3, r9
 800ef04:	4543      	cmp	r3, r8
 800ef06:	f77f af79 	ble.w	800edfc <_printf_float+0x250>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	4652      	mov	r2, sl
 800ef0e:	4631      	mov	r1, r6
 800ef10:	4628      	mov	r0, r5
 800ef12:	47b8      	blx	r7
 800ef14:	3001      	adds	r0, #1
 800ef16:	f43f aeaa 	beq.w	800ec6e <_printf_float+0xc2>
 800ef1a:	f108 0801 	add.w	r8, r8, #1
 800ef1e:	e7ec      	b.n	800eefa <_printf_float+0x34e>
 800ef20:	4613      	mov	r3, r2
 800ef22:	4631      	mov	r1, r6
 800ef24:	4642      	mov	r2, r8
 800ef26:	4628      	mov	r0, r5
 800ef28:	47b8      	blx	r7
 800ef2a:	3001      	adds	r0, #1
 800ef2c:	d1c0      	bne.n	800eeb0 <_printf_float+0x304>
 800ef2e:	e69e      	b.n	800ec6e <_printf_float+0xc2>
 800ef30:	2301      	movs	r3, #1
 800ef32:	4631      	mov	r1, r6
 800ef34:	4628      	mov	r0, r5
 800ef36:	9205      	str	r2, [sp, #20]
 800ef38:	47b8      	blx	r7
 800ef3a:	3001      	adds	r0, #1
 800ef3c:	f43f ae97 	beq.w	800ec6e <_printf_float+0xc2>
 800ef40:	9a05      	ldr	r2, [sp, #20]
 800ef42:	f10b 0b01 	add.w	fp, fp, #1
 800ef46:	e7b9      	b.n	800eebc <_printf_float+0x310>
 800ef48:	ee18 3a10 	vmov	r3, s16
 800ef4c:	4652      	mov	r2, sl
 800ef4e:	4631      	mov	r1, r6
 800ef50:	4628      	mov	r0, r5
 800ef52:	47b8      	blx	r7
 800ef54:	3001      	adds	r0, #1
 800ef56:	d1be      	bne.n	800eed6 <_printf_float+0x32a>
 800ef58:	e689      	b.n	800ec6e <_printf_float+0xc2>
 800ef5a:	9a05      	ldr	r2, [sp, #20]
 800ef5c:	464b      	mov	r3, r9
 800ef5e:	4442      	add	r2, r8
 800ef60:	4631      	mov	r1, r6
 800ef62:	4628      	mov	r0, r5
 800ef64:	47b8      	blx	r7
 800ef66:	3001      	adds	r0, #1
 800ef68:	d1c1      	bne.n	800eeee <_printf_float+0x342>
 800ef6a:	e680      	b.n	800ec6e <_printf_float+0xc2>
 800ef6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef6e:	2a01      	cmp	r2, #1
 800ef70:	dc01      	bgt.n	800ef76 <_printf_float+0x3ca>
 800ef72:	07db      	lsls	r3, r3, #31
 800ef74:	d538      	bpl.n	800efe8 <_printf_float+0x43c>
 800ef76:	2301      	movs	r3, #1
 800ef78:	4642      	mov	r2, r8
 800ef7a:	4631      	mov	r1, r6
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	47b8      	blx	r7
 800ef80:	3001      	adds	r0, #1
 800ef82:	f43f ae74 	beq.w	800ec6e <_printf_float+0xc2>
 800ef86:	ee18 3a10 	vmov	r3, s16
 800ef8a:	4652      	mov	r2, sl
 800ef8c:	4631      	mov	r1, r6
 800ef8e:	4628      	mov	r0, r5
 800ef90:	47b8      	blx	r7
 800ef92:	3001      	adds	r0, #1
 800ef94:	f43f ae6b 	beq.w	800ec6e <_printf_float+0xc2>
 800ef98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	2300      	movs	r3, #0
 800efa0:	f7f1 fdb2 	bl	8000b08 <__aeabi_dcmpeq>
 800efa4:	b9d8      	cbnz	r0, 800efde <_printf_float+0x432>
 800efa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efa8:	f108 0201 	add.w	r2, r8, #1
 800efac:	3b01      	subs	r3, #1
 800efae:	4631      	mov	r1, r6
 800efb0:	4628      	mov	r0, r5
 800efb2:	47b8      	blx	r7
 800efb4:	3001      	adds	r0, #1
 800efb6:	d10e      	bne.n	800efd6 <_printf_float+0x42a>
 800efb8:	e659      	b.n	800ec6e <_printf_float+0xc2>
 800efba:	2301      	movs	r3, #1
 800efbc:	4652      	mov	r2, sl
 800efbe:	4631      	mov	r1, r6
 800efc0:	4628      	mov	r0, r5
 800efc2:	47b8      	blx	r7
 800efc4:	3001      	adds	r0, #1
 800efc6:	f43f ae52 	beq.w	800ec6e <_printf_float+0xc2>
 800efca:	f108 0801 	add.w	r8, r8, #1
 800efce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efd0:	3b01      	subs	r3, #1
 800efd2:	4543      	cmp	r3, r8
 800efd4:	dcf1      	bgt.n	800efba <_printf_float+0x40e>
 800efd6:	464b      	mov	r3, r9
 800efd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800efdc:	e6dc      	b.n	800ed98 <_printf_float+0x1ec>
 800efde:	f04f 0800 	mov.w	r8, #0
 800efe2:	f104 0a1a 	add.w	sl, r4, #26
 800efe6:	e7f2      	b.n	800efce <_printf_float+0x422>
 800efe8:	2301      	movs	r3, #1
 800efea:	4642      	mov	r2, r8
 800efec:	e7df      	b.n	800efae <_printf_float+0x402>
 800efee:	2301      	movs	r3, #1
 800eff0:	464a      	mov	r2, r9
 800eff2:	4631      	mov	r1, r6
 800eff4:	4628      	mov	r0, r5
 800eff6:	47b8      	blx	r7
 800eff8:	3001      	adds	r0, #1
 800effa:	f43f ae38 	beq.w	800ec6e <_printf_float+0xc2>
 800effe:	f108 0801 	add.w	r8, r8, #1
 800f002:	68e3      	ldr	r3, [r4, #12]
 800f004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f006:	1a5b      	subs	r3, r3, r1
 800f008:	4543      	cmp	r3, r8
 800f00a:	dcf0      	bgt.n	800efee <_printf_float+0x442>
 800f00c:	e6fa      	b.n	800ee04 <_printf_float+0x258>
 800f00e:	f04f 0800 	mov.w	r8, #0
 800f012:	f104 0919 	add.w	r9, r4, #25
 800f016:	e7f4      	b.n	800f002 <_printf_float+0x456>

0800f018 <_printf_common>:
 800f018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f01c:	4616      	mov	r6, r2
 800f01e:	4699      	mov	r9, r3
 800f020:	688a      	ldr	r2, [r1, #8]
 800f022:	690b      	ldr	r3, [r1, #16]
 800f024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f028:	4293      	cmp	r3, r2
 800f02a:	bfb8      	it	lt
 800f02c:	4613      	movlt	r3, r2
 800f02e:	6033      	str	r3, [r6, #0]
 800f030:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f034:	4607      	mov	r7, r0
 800f036:	460c      	mov	r4, r1
 800f038:	b10a      	cbz	r2, 800f03e <_printf_common+0x26>
 800f03a:	3301      	adds	r3, #1
 800f03c:	6033      	str	r3, [r6, #0]
 800f03e:	6823      	ldr	r3, [r4, #0]
 800f040:	0699      	lsls	r1, r3, #26
 800f042:	bf42      	ittt	mi
 800f044:	6833      	ldrmi	r3, [r6, #0]
 800f046:	3302      	addmi	r3, #2
 800f048:	6033      	strmi	r3, [r6, #0]
 800f04a:	6825      	ldr	r5, [r4, #0]
 800f04c:	f015 0506 	ands.w	r5, r5, #6
 800f050:	d106      	bne.n	800f060 <_printf_common+0x48>
 800f052:	f104 0a19 	add.w	sl, r4, #25
 800f056:	68e3      	ldr	r3, [r4, #12]
 800f058:	6832      	ldr	r2, [r6, #0]
 800f05a:	1a9b      	subs	r3, r3, r2
 800f05c:	42ab      	cmp	r3, r5
 800f05e:	dc26      	bgt.n	800f0ae <_printf_common+0x96>
 800f060:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f064:	1e13      	subs	r3, r2, #0
 800f066:	6822      	ldr	r2, [r4, #0]
 800f068:	bf18      	it	ne
 800f06a:	2301      	movne	r3, #1
 800f06c:	0692      	lsls	r2, r2, #26
 800f06e:	d42b      	bmi.n	800f0c8 <_printf_common+0xb0>
 800f070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f074:	4649      	mov	r1, r9
 800f076:	4638      	mov	r0, r7
 800f078:	47c0      	blx	r8
 800f07a:	3001      	adds	r0, #1
 800f07c:	d01e      	beq.n	800f0bc <_printf_common+0xa4>
 800f07e:	6823      	ldr	r3, [r4, #0]
 800f080:	68e5      	ldr	r5, [r4, #12]
 800f082:	6832      	ldr	r2, [r6, #0]
 800f084:	f003 0306 	and.w	r3, r3, #6
 800f088:	2b04      	cmp	r3, #4
 800f08a:	bf08      	it	eq
 800f08c:	1aad      	subeq	r5, r5, r2
 800f08e:	68a3      	ldr	r3, [r4, #8]
 800f090:	6922      	ldr	r2, [r4, #16]
 800f092:	bf0c      	ite	eq
 800f094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f098:	2500      	movne	r5, #0
 800f09a:	4293      	cmp	r3, r2
 800f09c:	bfc4      	itt	gt
 800f09e:	1a9b      	subgt	r3, r3, r2
 800f0a0:	18ed      	addgt	r5, r5, r3
 800f0a2:	2600      	movs	r6, #0
 800f0a4:	341a      	adds	r4, #26
 800f0a6:	42b5      	cmp	r5, r6
 800f0a8:	d11a      	bne.n	800f0e0 <_printf_common+0xc8>
 800f0aa:	2000      	movs	r0, #0
 800f0ac:	e008      	b.n	800f0c0 <_printf_common+0xa8>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	4652      	mov	r2, sl
 800f0b2:	4649      	mov	r1, r9
 800f0b4:	4638      	mov	r0, r7
 800f0b6:	47c0      	blx	r8
 800f0b8:	3001      	adds	r0, #1
 800f0ba:	d103      	bne.n	800f0c4 <_printf_common+0xac>
 800f0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0c4:	3501      	adds	r5, #1
 800f0c6:	e7c6      	b.n	800f056 <_printf_common+0x3e>
 800f0c8:	18e1      	adds	r1, r4, r3
 800f0ca:	1c5a      	adds	r2, r3, #1
 800f0cc:	2030      	movs	r0, #48	; 0x30
 800f0ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f0d2:	4422      	add	r2, r4
 800f0d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f0d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f0dc:	3302      	adds	r3, #2
 800f0de:	e7c7      	b.n	800f070 <_printf_common+0x58>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	4622      	mov	r2, r4
 800f0e4:	4649      	mov	r1, r9
 800f0e6:	4638      	mov	r0, r7
 800f0e8:	47c0      	blx	r8
 800f0ea:	3001      	adds	r0, #1
 800f0ec:	d0e6      	beq.n	800f0bc <_printf_common+0xa4>
 800f0ee:	3601      	adds	r6, #1
 800f0f0:	e7d9      	b.n	800f0a6 <_printf_common+0x8e>
	...

0800f0f4 <_printf_i>:
 800f0f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0f8:	7e0f      	ldrb	r7, [r1, #24]
 800f0fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f0fc:	2f78      	cmp	r7, #120	; 0x78
 800f0fe:	4691      	mov	r9, r2
 800f100:	4680      	mov	r8, r0
 800f102:	460c      	mov	r4, r1
 800f104:	469a      	mov	sl, r3
 800f106:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f10a:	d807      	bhi.n	800f11c <_printf_i+0x28>
 800f10c:	2f62      	cmp	r7, #98	; 0x62
 800f10e:	d80a      	bhi.n	800f126 <_printf_i+0x32>
 800f110:	2f00      	cmp	r7, #0
 800f112:	f000 80d8 	beq.w	800f2c6 <_printf_i+0x1d2>
 800f116:	2f58      	cmp	r7, #88	; 0x58
 800f118:	f000 80a3 	beq.w	800f262 <_printf_i+0x16e>
 800f11c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f120:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f124:	e03a      	b.n	800f19c <_printf_i+0xa8>
 800f126:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f12a:	2b15      	cmp	r3, #21
 800f12c:	d8f6      	bhi.n	800f11c <_printf_i+0x28>
 800f12e:	a101      	add	r1, pc, #4	; (adr r1, 800f134 <_printf_i+0x40>)
 800f130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f134:	0800f18d 	.word	0x0800f18d
 800f138:	0800f1a1 	.word	0x0800f1a1
 800f13c:	0800f11d 	.word	0x0800f11d
 800f140:	0800f11d 	.word	0x0800f11d
 800f144:	0800f11d 	.word	0x0800f11d
 800f148:	0800f11d 	.word	0x0800f11d
 800f14c:	0800f1a1 	.word	0x0800f1a1
 800f150:	0800f11d 	.word	0x0800f11d
 800f154:	0800f11d 	.word	0x0800f11d
 800f158:	0800f11d 	.word	0x0800f11d
 800f15c:	0800f11d 	.word	0x0800f11d
 800f160:	0800f2ad 	.word	0x0800f2ad
 800f164:	0800f1d1 	.word	0x0800f1d1
 800f168:	0800f28f 	.word	0x0800f28f
 800f16c:	0800f11d 	.word	0x0800f11d
 800f170:	0800f11d 	.word	0x0800f11d
 800f174:	0800f2cf 	.word	0x0800f2cf
 800f178:	0800f11d 	.word	0x0800f11d
 800f17c:	0800f1d1 	.word	0x0800f1d1
 800f180:	0800f11d 	.word	0x0800f11d
 800f184:	0800f11d 	.word	0x0800f11d
 800f188:	0800f297 	.word	0x0800f297
 800f18c:	682b      	ldr	r3, [r5, #0]
 800f18e:	1d1a      	adds	r2, r3, #4
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	602a      	str	r2, [r5, #0]
 800f194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f19c:	2301      	movs	r3, #1
 800f19e:	e0a3      	b.n	800f2e8 <_printf_i+0x1f4>
 800f1a0:	6820      	ldr	r0, [r4, #0]
 800f1a2:	6829      	ldr	r1, [r5, #0]
 800f1a4:	0606      	lsls	r6, r0, #24
 800f1a6:	f101 0304 	add.w	r3, r1, #4
 800f1aa:	d50a      	bpl.n	800f1c2 <_printf_i+0xce>
 800f1ac:	680e      	ldr	r6, [r1, #0]
 800f1ae:	602b      	str	r3, [r5, #0]
 800f1b0:	2e00      	cmp	r6, #0
 800f1b2:	da03      	bge.n	800f1bc <_printf_i+0xc8>
 800f1b4:	232d      	movs	r3, #45	; 0x2d
 800f1b6:	4276      	negs	r6, r6
 800f1b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1bc:	485e      	ldr	r0, [pc, #376]	; (800f338 <_printf_i+0x244>)
 800f1be:	230a      	movs	r3, #10
 800f1c0:	e019      	b.n	800f1f6 <_printf_i+0x102>
 800f1c2:	680e      	ldr	r6, [r1, #0]
 800f1c4:	602b      	str	r3, [r5, #0]
 800f1c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f1ca:	bf18      	it	ne
 800f1cc:	b236      	sxthne	r6, r6
 800f1ce:	e7ef      	b.n	800f1b0 <_printf_i+0xbc>
 800f1d0:	682b      	ldr	r3, [r5, #0]
 800f1d2:	6820      	ldr	r0, [r4, #0]
 800f1d4:	1d19      	adds	r1, r3, #4
 800f1d6:	6029      	str	r1, [r5, #0]
 800f1d8:	0601      	lsls	r1, r0, #24
 800f1da:	d501      	bpl.n	800f1e0 <_printf_i+0xec>
 800f1dc:	681e      	ldr	r6, [r3, #0]
 800f1de:	e002      	b.n	800f1e6 <_printf_i+0xf2>
 800f1e0:	0646      	lsls	r6, r0, #25
 800f1e2:	d5fb      	bpl.n	800f1dc <_printf_i+0xe8>
 800f1e4:	881e      	ldrh	r6, [r3, #0]
 800f1e6:	4854      	ldr	r0, [pc, #336]	; (800f338 <_printf_i+0x244>)
 800f1e8:	2f6f      	cmp	r7, #111	; 0x6f
 800f1ea:	bf0c      	ite	eq
 800f1ec:	2308      	moveq	r3, #8
 800f1ee:	230a      	movne	r3, #10
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f1f6:	6865      	ldr	r5, [r4, #4]
 800f1f8:	60a5      	str	r5, [r4, #8]
 800f1fa:	2d00      	cmp	r5, #0
 800f1fc:	bfa2      	ittt	ge
 800f1fe:	6821      	ldrge	r1, [r4, #0]
 800f200:	f021 0104 	bicge.w	r1, r1, #4
 800f204:	6021      	strge	r1, [r4, #0]
 800f206:	b90e      	cbnz	r6, 800f20c <_printf_i+0x118>
 800f208:	2d00      	cmp	r5, #0
 800f20a:	d04d      	beq.n	800f2a8 <_printf_i+0x1b4>
 800f20c:	4615      	mov	r5, r2
 800f20e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f212:	fb03 6711 	mls	r7, r3, r1, r6
 800f216:	5dc7      	ldrb	r7, [r0, r7]
 800f218:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f21c:	4637      	mov	r7, r6
 800f21e:	42bb      	cmp	r3, r7
 800f220:	460e      	mov	r6, r1
 800f222:	d9f4      	bls.n	800f20e <_printf_i+0x11a>
 800f224:	2b08      	cmp	r3, #8
 800f226:	d10b      	bne.n	800f240 <_printf_i+0x14c>
 800f228:	6823      	ldr	r3, [r4, #0]
 800f22a:	07de      	lsls	r6, r3, #31
 800f22c:	d508      	bpl.n	800f240 <_printf_i+0x14c>
 800f22e:	6923      	ldr	r3, [r4, #16]
 800f230:	6861      	ldr	r1, [r4, #4]
 800f232:	4299      	cmp	r1, r3
 800f234:	bfde      	ittt	le
 800f236:	2330      	movle	r3, #48	; 0x30
 800f238:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f23c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f240:	1b52      	subs	r2, r2, r5
 800f242:	6122      	str	r2, [r4, #16]
 800f244:	f8cd a000 	str.w	sl, [sp]
 800f248:	464b      	mov	r3, r9
 800f24a:	aa03      	add	r2, sp, #12
 800f24c:	4621      	mov	r1, r4
 800f24e:	4640      	mov	r0, r8
 800f250:	f7ff fee2 	bl	800f018 <_printf_common>
 800f254:	3001      	adds	r0, #1
 800f256:	d14c      	bne.n	800f2f2 <_printf_i+0x1fe>
 800f258:	f04f 30ff 	mov.w	r0, #4294967295
 800f25c:	b004      	add	sp, #16
 800f25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f262:	4835      	ldr	r0, [pc, #212]	; (800f338 <_printf_i+0x244>)
 800f264:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f268:	6829      	ldr	r1, [r5, #0]
 800f26a:	6823      	ldr	r3, [r4, #0]
 800f26c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f270:	6029      	str	r1, [r5, #0]
 800f272:	061d      	lsls	r5, r3, #24
 800f274:	d514      	bpl.n	800f2a0 <_printf_i+0x1ac>
 800f276:	07df      	lsls	r7, r3, #31
 800f278:	bf44      	itt	mi
 800f27a:	f043 0320 	orrmi.w	r3, r3, #32
 800f27e:	6023      	strmi	r3, [r4, #0]
 800f280:	b91e      	cbnz	r6, 800f28a <_printf_i+0x196>
 800f282:	6823      	ldr	r3, [r4, #0]
 800f284:	f023 0320 	bic.w	r3, r3, #32
 800f288:	6023      	str	r3, [r4, #0]
 800f28a:	2310      	movs	r3, #16
 800f28c:	e7b0      	b.n	800f1f0 <_printf_i+0xfc>
 800f28e:	6823      	ldr	r3, [r4, #0]
 800f290:	f043 0320 	orr.w	r3, r3, #32
 800f294:	6023      	str	r3, [r4, #0]
 800f296:	2378      	movs	r3, #120	; 0x78
 800f298:	4828      	ldr	r0, [pc, #160]	; (800f33c <_printf_i+0x248>)
 800f29a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f29e:	e7e3      	b.n	800f268 <_printf_i+0x174>
 800f2a0:	0659      	lsls	r1, r3, #25
 800f2a2:	bf48      	it	mi
 800f2a4:	b2b6      	uxthmi	r6, r6
 800f2a6:	e7e6      	b.n	800f276 <_printf_i+0x182>
 800f2a8:	4615      	mov	r5, r2
 800f2aa:	e7bb      	b.n	800f224 <_printf_i+0x130>
 800f2ac:	682b      	ldr	r3, [r5, #0]
 800f2ae:	6826      	ldr	r6, [r4, #0]
 800f2b0:	6961      	ldr	r1, [r4, #20]
 800f2b2:	1d18      	adds	r0, r3, #4
 800f2b4:	6028      	str	r0, [r5, #0]
 800f2b6:	0635      	lsls	r5, r6, #24
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	d501      	bpl.n	800f2c0 <_printf_i+0x1cc>
 800f2bc:	6019      	str	r1, [r3, #0]
 800f2be:	e002      	b.n	800f2c6 <_printf_i+0x1d2>
 800f2c0:	0670      	lsls	r0, r6, #25
 800f2c2:	d5fb      	bpl.n	800f2bc <_printf_i+0x1c8>
 800f2c4:	8019      	strh	r1, [r3, #0]
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	6123      	str	r3, [r4, #16]
 800f2ca:	4615      	mov	r5, r2
 800f2cc:	e7ba      	b.n	800f244 <_printf_i+0x150>
 800f2ce:	682b      	ldr	r3, [r5, #0]
 800f2d0:	1d1a      	adds	r2, r3, #4
 800f2d2:	602a      	str	r2, [r5, #0]
 800f2d4:	681d      	ldr	r5, [r3, #0]
 800f2d6:	6862      	ldr	r2, [r4, #4]
 800f2d8:	2100      	movs	r1, #0
 800f2da:	4628      	mov	r0, r5
 800f2dc:	f7f0 ffa0 	bl	8000220 <memchr>
 800f2e0:	b108      	cbz	r0, 800f2e6 <_printf_i+0x1f2>
 800f2e2:	1b40      	subs	r0, r0, r5
 800f2e4:	6060      	str	r0, [r4, #4]
 800f2e6:	6863      	ldr	r3, [r4, #4]
 800f2e8:	6123      	str	r3, [r4, #16]
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2f0:	e7a8      	b.n	800f244 <_printf_i+0x150>
 800f2f2:	6923      	ldr	r3, [r4, #16]
 800f2f4:	462a      	mov	r2, r5
 800f2f6:	4649      	mov	r1, r9
 800f2f8:	4640      	mov	r0, r8
 800f2fa:	47d0      	blx	sl
 800f2fc:	3001      	adds	r0, #1
 800f2fe:	d0ab      	beq.n	800f258 <_printf_i+0x164>
 800f300:	6823      	ldr	r3, [r4, #0]
 800f302:	079b      	lsls	r3, r3, #30
 800f304:	d413      	bmi.n	800f32e <_printf_i+0x23a>
 800f306:	68e0      	ldr	r0, [r4, #12]
 800f308:	9b03      	ldr	r3, [sp, #12]
 800f30a:	4298      	cmp	r0, r3
 800f30c:	bfb8      	it	lt
 800f30e:	4618      	movlt	r0, r3
 800f310:	e7a4      	b.n	800f25c <_printf_i+0x168>
 800f312:	2301      	movs	r3, #1
 800f314:	4632      	mov	r2, r6
 800f316:	4649      	mov	r1, r9
 800f318:	4640      	mov	r0, r8
 800f31a:	47d0      	blx	sl
 800f31c:	3001      	adds	r0, #1
 800f31e:	d09b      	beq.n	800f258 <_printf_i+0x164>
 800f320:	3501      	adds	r5, #1
 800f322:	68e3      	ldr	r3, [r4, #12]
 800f324:	9903      	ldr	r1, [sp, #12]
 800f326:	1a5b      	subs	r3, r3, r1
 800f328:	42ab      	cmp	r3, r5
 800f32a:	dcf2      	bgt.n	800f312 <_printf_i+0x21e>
 800f32c:	e7eb      	b.n	800f306 <_printf_i+0x212>
 800f32e:	2500      	movs	r5, #0
 800f330:	f104 0619 	add.w	r6, r4, #25
 800f334:	e7f5      	b.n	800f322 <_printf_i+0x22e>
 800f336:	bf00      	nop
 800f338:	08015310 	.word	0x08015310
 800f33c:	08015321 	.word	0x08015321

0800f340 <_scanf_float>:
 800f340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f344:	b087      	sub	sp, #28
 800f346:	4617      	mov	r7, r2
 800f348:	9303      	str	r3, [sp, #12]
 800f34a:	688b      	ldr	r3, [r1, #8]
 800f34c:	1e5a      	subs	r2, r3, #1
 800f34e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f352:	bf83      	ittte	hi
 800f354:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f358:	195b      	addhi	r3, r3, r5
 800f35a:	9302      	strhi	r3, [sp, #8]
 800f35c:	2300      	movls	r3, #0
 800f35e:	bf86      	itte	hi
 800f360:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f364:	608b      	strhi	r3, [r1, #8]
 800f366:	9302      	strls	r3, [sp, #8]
 800f368:	680b      	ldr	r3, [r1, #0]
 800f36a:	468b      	mov	fp, r1
 800f36c:	2500      	movs	r5, #0
 800f36e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f372:	f84b 3b1c 	str.w	r3, [fp], #28
 800f376:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f37a:	4680      	mov	r8, r0
 800f37c:	460c      	mov	r4, r1
 800f37e:	465e      	mov	r6, fp
 800f380:	46aa      	mov	sl, r5
 800f382:	46a9      	mov	r9, r5
 800f384:	9501      	str	r5, [sp, #4]
 800f386:	68a2      	ldr	r2, [r4, #8]
 800f388:	b152      	cbz	r2, 800f3a0 <_scanf_float+0x60>
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	2b4e      	cmp	r3, #78	; 0x4e
 800f390:	d864      	bhi.n	800f45c <_scanf_float+0x11c>
 800f392:	2b40      	cmp	r3, #64	; 0x40
 800f394:	d83c      	bhi.n	800f410 <_scanf_float+0xd0>
 800f396:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f39a:	b2c8      	uxtb	r0, r1
 800f39c:	280e      	cmp	r0, #14
 800f39e:	d93a      	bls.n	800f416 <_scanf_float+0xd6>
 800f3a0:	f1b9 0f00 	cmp.w	r9, #0
 800f3a4:	d003      	beq.n	800f3ae <_scanf_float+0x6e>
 800f3a6:	6823      	ldr	r3, [r4, #0]
 800f3a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f3ac:	6023      	str	r3, [r4, #0]
 800f3ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3b2:	f1ba 0f01 	cmp.w	sl, #1
 800f3b6:	f200 8113 	bhi.w	800f5e0 <_scanf_float+0x2a0>
 800f3ba:	455e      	cmp	r6, fp
 800f3bc:	f200 8105 	bhi.w	800f5ca <_scanf_float+0x28a>
 800f3c0:	2501      	movs	r5, #1
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	b007      	add	sp, #28
 800f3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f3ce:	2a0d      	cmp	r2, #13
 800f3d0:	d8e6      	bhi.n	800f3a0 <_scanf_float+0x60>
 800f3d2:	a101      	add	r1, pc, #4	; (adr r1, 800f3d8 <_scanf_float+0x98>)
 800f3d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f3d8:	0800f517 	.word	0x0800f517
 800f3dc:	0800f3a1 	.word	0x0800f3a1
 800f3e0:	0800f3a1 	.word	0x0800f3a1
 800f3e4:	0800f3a1 	.word	0x0800f3a1
 800f3e8:	0800f577 	.word	0x0800f577
 800f3ec:	0800f54f 	.word	0x0800f54f
 800f3f0:	0800f3a1 	.word	0x0800f3a1
 800f3f4:	0800f3a1 	.word	0x0800f3a1
 800f3f8:	0800f525 	.word	0x0800f525
 800f3fc:	0800f3a1 	.word	0x0800f3a1
 800f400:	0800f3a1 	.word	0x0800f3a1
 800f404:	0800f3a1 	.word	0x0800f3a1
 800f408:	0800f3a1 	.word	0x0800f3a1
 800f40c:	0800f4dd 	.word	0x0800f4dd
 800f410:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f414:	e7db      	b.n	800f3ce <_scanf_float+0x8e>
 800f416:	290e      	cmp	r1, #14
 800f418:	d8c2      	bhi.n	800f3a0 <_scanf_float+0x60>
 800f41a:	a001      	add	r0, pc, #4	; (adr r0, 800f420 <_scanf_float+0xe0>)
 800f41c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f420:	0800f4cf 	.word	0x0800f4cf
 800f424:	0800f3a1 	.word	0x0800f3a1
 800f428:	0800f4cf 	.word	0x0800f4cf
 800f42c:	0800f563 	.word	0x0800f563
 800f430:	0800f3a1 	.word	0x0800f3a1
 800f434:	0800f47d 	.word	0x0800f47d
 800f438:	0800f4b9 	.word	0x0800f4b9
 800f43c:	0800f4b9 	.word	0x0800f4b9
 800f440:	0800f4b9 	.word	0x0800f4b9
 800f444:	0800f4b9 	.word	0x0800f4b9
 800f448:	0800f4b9 	.word	0x0800f4b9
 800f44c:	0800f4b9 	.word	0x0800f4b9
 800f450:	0800f4b9 	.word	0x0800f4b9
 800f454:	0800f4b9 	.word	0x0800f4b9
 800f458:	0800f4b9 	.word	0x0800f4b9
 800f45c:	2b6e      	cmp	r3, #110	; 0x6e
 800f45e:	d809      	bhi.n	800f474 <_scanf_float+0x134>
 800f460:	2b60      	cmp	r3, #96	; 0x60
 800f462:	d8b2      	bhi.n	800f3ca <_scanf_float+0x8a>
 800f464:	2b54      	cmp	r3, #84	; 0x54
 800f466:	d077      	beq.n	800f558 <_scanf_float+0x218>
 800f468:	2b59      	cmp	r3, #89	; 0x59
 800f46a:	d199      	bne.n	800f3a0 <_scanf_float+0x60>
 800f46c:	2d07      	cmp	r5, #7
 800f46e:	d197      	bne.n	800f3a0 <_scanf_float+0x60>
 800f470:	2508      	movs	r5, #8
 800f472:	e029      	b.n	800f4c8 <_scanf_float+0x188>
 800f474:	2b74      	cmp	r3, #116	; 0x74
 800f476:	d06f      	beq.n	800f558 <_scanf_float+0x218>
 800f478:	2b79      	cmp	r3, #121	; 0x79
 800f47a:	e7f6      	b.n	800f46a <_scanf_float+0x12a>
 800f47c:	6821      	ldr	r1, [r4, #0]
 800f47e:	05c8      	lsls	r0, r1, #23
 800f480:	d51a      	bpl.n	800f4b8 <_scanf_float+0x178>
 800f482:	9b02      	ldr	r3, [sp, #8]
 800f484:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f488:	6021      	str	r1, [r4, #0]
 800f48a:	f109 0901 	add.w	r9, r9, #1
 800f48e:	b11b      	cbz	r3, 800f498 <_scanf_float+0x158>
 800f490:	3b01      	subs	r3, #1
 800f492:	3201      	adds	r2, #1
 800f494:	9302      	str	r3, [sp, #8]
 800f496:	60a2      	str	r2, [r4, #8]
 800f498:	68a3      	ldr	r3, [r4, #8]
 800f49a:	3b01      	subs	r3, #1
 800f49c:	60a3      	str	r3, [r4, #8]
 800f49e:	6923      	ldr	r3, [r4, #16]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	6123      	str	r3, [r4, #16]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	607b      	str	r3, [r7, #4]
 800f4ac:	f340 8084 	ble.w	800f5b8 <_scanf_float+0x278>
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	603b      	str	r3, [r7, #0]
 800f4b6:	e766      	b.n	800f386 <_scanf_float+0x46>
 800f4b8:	eb1a 0f05 	cmn.w	sl, r5
 800f4bc:	f47f af70 	bne.w	800f3a0 <_scanf_float+0x60>
 800f4c0:	6822      	ldr	r2, [r4, #0]
 800f4c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f4c6:	6022      	str	r2, [r4, #0]
 800f4c8:	f806 3b01 	strb.w	r3, [r6], #1
 800f4cc:	e7e4      	b.n	800f498 <_scanf_float+0x158>
 800f4ce:	6822      	ldr	r2, [r4, #0]
 800f4d0:	0610      	lsls	r0, r2, #24
 800f4d2:	f57f af65 	bpl.w	800f3a0 <_scanf_float+0x60>
 800f4d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f4da:	e7f4      	b.n	800f4c6 <_scanf_float+0x186>
 800f4dc:	f1ba 0f00 	cmp.w	sl, #0
 800f4e0:	d10e      	bne.n	800f500 <_scanf_float+0x1c0>
 800f4e2:	f1b9 0f00 	cmp.w	r9, #0
 800f4e6:	d10e      	bne.n	800f506 <_scanf_float+0x1c6>
 800f4e8:	6822      	ldr	r2, [r4, #0]
 800f4ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f4ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f4f2:	d108      	bne.n	800f506 <_scanf_float+0x1c6>
 800f4f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f4f8:	6022      	str	r2, [r4, #0]
 800f4fa:	f04f 0a01 	mov.w	sl, #1
 800f4fe:	e7e3      	b.n	800f4c8 <_scanf_float+0x188>
 800f500:	f1ba 0f02 	cmp.w	sl, #2
 800f504:	d055      	beq.n	800f5b2 <_scanf_float+0x272>
 800f506:	2d01      	cmp	r5, #1
 800f508:	d002      	beq.n	800f510 <_scanf_float+0x1d0>
 800f50a:	2d04      	cmp	r5, #4
 800f50c:	f47f af48 	bne.w	800f3a0 <_scanf_float+0x60>
 800f510:	3501      	adds	r5, #1
 800f512:	b2ed      	uxtb	r5, r5
 800f514:	e7d8      	b.n	800f4c8 <_scanf_float+0x188>
 800f516:	f1ba 0f01 	cmp.w	sl, #1
 800f51a:	f47f af41 	bne.w	800f3a0 <_scanf_float+0x60>
 800f51e:	f04f 0a02 	mov.w	sl, #2
 800f522:	e7d1      	b.n	800f4c8 <_scanf_float+0x188>
 800f524:	b97d      	cbnz	r5, 800f546 <_scanf_float+0x206>
 800f526:	f1b9 0f00 	cmp.w	r9, #0
 800f52a:	f47f af3c 	bne.w	800f3a6 <_scanf_float+0x66>
 800f52e:	6822      	ldr	r2, [r4, #0]
 800f530:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f534:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f538:	f47f af39 	bne.w	800f3ae <_scanf_float+0x6e>
 800f53c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f540:	6022      	str	r2, [r4, #0]
 800f542:	2501      	movs	r5, #1
 800f544:	e7c0      	b.n	800f4c8 <_scanf_float+0x188>
 800f546:	2d03      	cmp	r5, #3
 800f548:	d0e2      	beq.n	800f510 <_scanf_float+0x1d0>
 800f54a:	2d05      	cmp	r5, #5
 800f54c:	e7de      	b.n	800f50c <_scanf_float+0x1cc>
 800f54e:	2d02      	cmp	r5, #2
 800f550:	f47f af26 	bne.w	800f3a0 <_scanf_float+0x60>
 800f554:	2503      	movs	r5, #3
 800f556:	e7b7      	b.n	800f4c8 <_scanf_float+0x188>
 800f558:	2d06      	cmp	r5, #6
 800f55a:	f47f af21 	bne.w	800f3a0 <_scanf_float+0x60>
 800f55e:	2507      	movs	r5, #7
 800f560:	e7b2      	b.n	800f4c8 <_scanf_float+0x188>
 800f562:	6822      	ldr	r2, [r4, #0]
 800f564:	0591      	lsls	r1, r2, #22
 800f566:	f57f af1b 	bpl.w	800f3a0 <_scanf_float+0x60>
 800f56a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f56e:	6022      	str	r2, [r4, #0]
 800f570:	f8cd 9004 	str.w	r9, [sp, #4]
 800f574:	e7a8      	b.n	800f4c8 <_scanf_float+0x188>
 800f576:	6822      	ldr	r2, [r4, #0]
 800f578:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f57c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f580:	d006      	beq.n	800f590 <_scanf_float+0x250>
 800f582:	0550      	lsls	r0, r2, #21
 800f584:	f57f af0c 	bpl.w	800f3a0 <_scanf_float+0x60>
 800f588:	f1b9 0f00 	cmp.w	r9, #0
 800f58c:	f43f af0f 	beq.w	800f3ae <_scanf_float+0x6e>
 800f590:	0591      	lsls	r1, r2, #22
 800f592:	bf58      	it	pl
 800f594:	9901      	ldrpl	r1, [sp, #4]
 800f596:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f59a:	bf58      	it	pl
 800f59c:	eba9 0101 	subpl.w	r1, r9, r1
 800f5a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f5a4:	bf58      	it	pl
 800f5a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f5aa:	6022      	str	r2, [r4, #0]
 800f5ac:	f04f 0900 	mov.w	r9, #0
 800f5b0:	e78a      	b.n	800f4c8 <_scanf_float+0x188>
 800f5b2:	f04f 0a03 	mov.w	sl, #3
 800f5b6:	e787      	b.n	800f4c8 <_scanf_float+0x188>
 800f5b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f5bc:	4639      	mov	r1, r7
 800f5be:	4640      	mov	r0, r8
 800f5c0:	4798      	blx	r3
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	f43f aedf 	beq.w	800f386 <_scanf_float+0x46>
 800f5c8:	e6ea      	b.n	800f3a0 <_scanf_float+0x60>
 800f5ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f5ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f5d2:	463a      	mov	r2, r7
 800f5d4:	4640      	mov	r0, r8
 800f5d6:	4798      	blx	r3
 800f5d8:	6923      	ldr	r3, [r4, #16]
 800f5da:	3b01      	subs	r3, #1
 800f5dc:	6123      	str	r3, [r4, #16]
 800f5de:	e6ec      	b.n	800f3ba <_scanf_float+0x7a>
 800f5e0:	1e6b      	subs	r3, r5, #1
 800f5e2:	2b06      	cmp	r3, #6
 800f5e4:	d825      	bhi.n	800f632 <_scanf_float+0x2f2>
 800f5e6:	2d02      	cmp	r5, #2
 800f5e8:	d836      	bhi.n	800f658 <_scanf_float+0x318>
 800f5ea:	455e      	cmp	r6, fp
 800f5ec:	f67f aee8 	bls.w	800f3c0 <_scanf_float+0x80>
 800f5f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f5f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f5f8:	463a      	mov	r2, r7
 800f5fa:	4640      	mov	r0, r8
 800f5fc:	4798      	blx	r3
 800f5fe:	6923      	ldr	r3, [r4, #16]
 800f600:	3b01      	subs	r3, #1
 800f602:	6123      	str	r3, [r4, #16]
 800f604:	e7f1      	b.n	800f5ea <_scanf_float+0x2aa>
 800f606:	9802      	ldr	r0, [sp, #8]
 800f608:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f60c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f610:	9002      	str	r0, [sp, #8]
 800f612:	463a      	mov	r2, r7
 800f614:	4640      	mov	r0, r8
 800f616:	4798      	blx	r3
 800f618:	6923      	ldr	r3, [r4, #16]
 800f61a:	3b01      	subs	r3, #1
 800f61c:	6123      	str	r3, [r4, #16]
 800f61e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f622:	fa5f fa8a 	uxtb.w	sl, sl
 800f626:	f1ba 0f02 	cmp.w	sl, #2
 800f62a:	d1ec      	bne.n	800f606 <_scanf_float+0x2c6>
 800f62c:	3d03      	subs	r5, #3
 800f62e:	b2ed      	uxtb	r5, r5
 800f630:	1b76      	subs	r6, r6, r5
 800f632:	6823      	ldr	r3, [r4, #0]
 800f634:	05da      	lsls	r2, r3, #23
 800f636:	d52f      	bpl.n	800f698 <_scanf_float+0x358>
 800f638:	055b      	lsls	r3, r3, #21
 800f63a:	d510      	bpl.n	800f65e <_scanf_float+0x31e>
 800f63c:	455e      	cmp	r6, fp
 800f63e:	f67f aebf 	bls.w	800f3c0 <_scanf_float+0x80>
 800f642:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f646:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f64a:	463a      	mov	r2, r7
 800f64c:	4640      	mov	r0, r8
 800f64e:	4798      	blx	r3
 800f650:	6923      	ldr	r3, [r4, #16]
 800f652:	3b01      	subs	r3, #1
 800f654:	6123      	str	r3, [r4, #16]
 800f656:	e7f1      	b.n	800f63c <_scanf_float+0x2fc>
 800f658:	46aa      	mov	sl, r5
 800f65a:	9602      	str	r6, [sp, #8]
 800f65c:	e7df      	b.n	800f61e <_scanf_float+0x2de>
 800f65e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f662:	6923      	ldr	r3, [r4, #16]
 800f664:	2965      	cmp	r1, #101	; 0x65
 800f666:	f103 33ff 	add.w	r3, r3, #4294967295
 800f66a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f66e:	6123      	str	r3, [r4, #16]
 800f670:	d00c      	beq.n	800f68c <_scanf_float+0x34c>
 800f672:	2945      	cmp	r1, #69	; 0x45
 800f674:	d00a      	beq.n	800f68c <_scanf_float+0x34c>
 800f676:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f67a:	463a      	mov	r2, r7
 800f67c:	4640      	mov	r0, r8
 800f67e:	4798      	blx	r3
 800f680:	6923      	ldr	r3, [r4, #16]
 800f682:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f686:	3b01      	subs	r3, #1
 800f688:	1eb5      	subs	r5, r6, #2
 800f68a:	6123      	str	r3, [r4, #16]
 800f68c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f690:	463a      	mov	r2, r7
 800f692:	4640      	mov	r0, r8
 800f694:	4798      	blx	r3
 800f696:	462e      	mov	r6, r5
 800f698:	6825      	ldr	r5, [r4, #0]
 800f69a:	f015 0510 	ands.w	r5, r5, #16
 800f69e:	d159      	bne.n	800f754 <_scanf_float+0x414>
 800f6a0:	7035      	strb	r5, [r6, #0]
 800f6a2:	6823      	ldr	r3, [r4, #0]
 800f6a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f6a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6ac:	d11b      	bne.n	800f6e6 <_scanf_float+0x3a6>
 800f6ae:	9b01      	ldr	r3, [sp, #4]
 800f6b0:	454b      	cmp	r3, r9
 800f6b2:	eba3 0209 	sub.w	r2, r3, r9
 800f6b6:	d123      	bne.n	800f700 <_scanf_float+0x3c0>
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	4659      	mov	r1, fp
 800f6bc:	4640      	mov	r0, r8
 800f6be:	f000 ffe1 	bl	8010684 <_strtod_r>
 800f6c2:	6822      	ldr	r2, [r4, #0]
 800f6c4:	9b03      	ldr	r3, [sp, #12]
 800f6c6:	f012 0f02 	tst.w	r2, #2
 800f6ca:	ec57 6b10 	vmov	r6, r7, d0
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	d021      	beq.n	800f716 <_scanf_float+0x3d6>
 800f6d2:	9903      	ldr	r1, [sp, #12]
 800f6d4:	1d1a      	adds	r2, r3, #4
 800f6d6:	600a      	str	r2, [r1, #0]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	e9c3 6700 	strd	r6, r7, [r3]
 800f6de:	68e3      	ldr	r3, [r4, #12]
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	60e3      	str	r3, [r4, #12]
 800f6e4:	e66d      	b.n	800f3c2 <_scanf_float+0x82>
 800f6e6:	9b04      	ldr	r3, [sp, #16]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d0e5      	beq.n	800f6b8 <_scanf_float+0x378>
 800f6ec:	9905      	ldr	r1, [sp, #20]
 800f6ee:	230a      	movs	r3, #10
 800f6f0:	462a      	mov	r2, r5
 800f6f2:	3101      	adds	r1, #1
 800f6f4:	4640      	mov	r0, r8
 800f6f6:	f001 f84d 	bl	8010794 <_strtol_r>
 800f6fa:	9b04      	ldr	r3, [sp, #16]
 800f6fc:	9e05      	ldr	r6, [sp, #20]
 800f6fe:	1ac2      	subs	r2, r0, r3
 800f700:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f704:	429e      	cmp	r6, r3
 800f706:	bf28      	it	cs
 800f708:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f70c:	4912      	ldr	r1, [pc, #72]	; (800f758 <_scanf_float+0x418>)
 800f70e:	4630      	mov	r0, r6
 800f710:	f000 f8ee 	bl	800f8f0 <siprintf>
 800f714:	e7d0      	b.n	800f6b8 <_scanf_float+0x378>
 800f716:	9903      	ldr	r1, [sp, #12]
 800f718:	f012 0f04 	tst.w	r2, #4
 800f71c:	f103 0204 	add.w	r2, r3, #4
 800f720:	600a      	str	r2, [r1, #0]
 800f722:	d1d9      	bne.n	800f6d8 <_scanf_float+0x398>
 800f724:	f8d3 8000 	ldr.w	r8, [r3]
 800f728:	ee10 2a10 	vmov	r2, s0
 800f72c:	ee10 0a10 	vmov	r0, s0
 800f730:	463b      	mov	r3, r7
 800f732:	4639      	mov	r1, r7
 800f734:	f7f1 fa1a 	bl	8000b6c <__aeabi_dcmpun>
 800f738:	b128      	cbz	r0, 800f746 <_scanf_float+0x406>
 800f73a:	4808      	ldr	r0, [pc, #32]	; (800f75c <_scanf_float+0x41c>)
 800f73c:	f000 f89e 	bl	800f87c <nanf>
 800f740:	ed88 0a00 	vstr	s0, [r8]
 800f744:	e7cb      	b.n	800f6de <_scanf_float+0x39e>
 800f746:	4630      	mov	r0, r6
 800f748:	4639      	mov	r1, r7
 800f74a:	f7f1 fa6d 	bl	8000c28 <__aeabi_d2f>
 800f74e:	f8c8 0000 	str.w	r0, [r8]
 800f752:	e7c4      	b.n	800f6de <_scanf_float+0x39e>
 800f754:	2500      	movs	r5, #0
 800f756:	e634      	b.n	800f3c2 <_scanf_float+0x82>
 800f758:	08015332 	.word	0x08015332
 800f75c:	080156b3 	.word	0x080156b3

0800f760 <iprintf>:
 800f760:	b40f      	push	{r0, r1, r2, r3}
 800f762:	4b0a      	ldr	r3, [pc, #40]	; (800f78c <iprintf+0x2c>)
 800f764:	b513      	push	{r0, r1, r4, lr}
 800f766:	681c      	ldr	r4, [r3, #0]
 800f768:	b124      	cbz	r4, 800f774 <iprintf+0x14>
 800f76a:	69a3      	ldr	r3, [r4, #24]
 800f76c:	b913      	cbnz	r3, 800f774 <iprintf+0x14>
 800f76e:	4620      	mov	r0, r4
 800f770:	f002 f88a 	bl	8011888 <__sinit>
 800f774:	ab05      	add	r3, sp, #20
 800f776:	9a04      	ldr	r2, [sp, #16]
 800f778:	68a1      	ldr	r1, [r4, #8]
 800f77a:	9301      	str	r3, [sp, #4]
 800f77c:	4620      	mov	r0, r4
 800f77e:	f003 fe39 	bl	80133f4 <_vfiprintf_r>
 800f782:	b002      	add	sp, #8
 800f784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f788:	b004      	add	sp, #16
 800f78a:	4770      	bx	lr
 800f78c:	20000110 	.word	0x20000110

0800f790 <_puts_r>:
 800f790:	b570      	push	{r4, r5, r6, lr}
 800f792:	460e      	mov	r6, r1
 800f794:	4605      	mov	r5, r0
 800f796:	b118      	cbz	r0, 800f7a0 <_puts_r+0x10>
 800f798:	6983      	ldr	r3, [r0, #24]
 800f79a:	b90b      	cbnz	r3, 800f7a0 <_puts_r+0x10>
 800f79c:	f002 f874 	bl	8011888 <__sinit>
 800f7a0:	69ab      	ldr	r3, [r5, #24]
 800f7a2:	68ac      	ldr	r4, [r5, #8]
 800f7a4:	b913      	cbnz	r3, 800f7ac <_puts_r+0x1c>
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	f002 f86e 	bl	8011888 <__sinit>
 800f7ac:	4b2c      	ldr	r3, [pc, #176]	; (800f860 <_puts_r+0xd0>)
 800f7ae:	429c      	cmp	r4, r3
 800f7b0:	d120      	bne.n	800f7f4 <_puts_r+0x64>
 800f7b2:	686c      	ldr	r4, [r5, #4]
 800f7b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7b6:	07db      	lsls	r3, r3, #31
 800f7b8:	d405      	bmi.n	800f7c6 <_puts_r+0x36>
 800f7ba:	89a3      	ldrh	r3, [r4, #12]
 800f7bc:	0598      	lsls	r0, r3, #22
 800f7be:	d402      	bmi.n	800f7c6 <_puts_r+0x36>
 800f7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7c2:	f002 fc72 	bl	80120aa <__retarget_lock_acquire_recursive>
 800f7c6:	89a3      	ldrh	r3, [r4, #12]
 800f7c8:	0719      	lsls	r1, r3, #28
 800f7ca:	d51d      	bpl.n	800f808 <_puts_r+0x78>
 800f7cc:	6923      	ldr	r3, [r4, #16]
 800f7ce:	b1db      	cbz	r3, 800f808 <_puts_r+0x78>
 800f7d0:	3e01      	subs	r6, #1
 800f7d2:	68a3      	ldr	r3, [r4, #8]
 800f7d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	60a3      	str	r3, [r4, #8]
 800f7dc:	bb39      	cbnz	r1, 800f82e <_puts_r+0x9e>
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	da38      	bge.n	800f854 <_puts_r+0xc4>
 800f7e2:	4622      	mov	r2, r4
 800f7e4:	210a      	movs	r1, #10
 800f7e6:	4628      	mov	r0, r5
 800f7e8:	f000 ffd6 	bl	8010798 <__swbuf_r>
 800f7ec:	3001      	adds	r0, #1
 800f7ee:	d011      	beq.n	800f814 <_puts_r+0x84>
 800f7f0:	250a      	movs	r5, #10
 800f7f2:	e011      	b.n	800f818 <_puts_r+0x88>
 800f7f4:	4b1b      	ldr	r3, [pc, #108]	; (800f864 <_puts_r+0xd4>)
 800f7f6:	429c      	cmp	r4, r3
 800f7f8:	d101      	bne.n	800f7fe <_puts_r+0x6e>
 800f7fa:	68ac      	ldr	r4, [r5, #8]
 800f7fc:	e7da      	b.n	800f7b4 <_puts_r+0x24>
 800f7fe:	4b1a      	ldr	r3, [pc, #104]	; (800f868 <_puts_r+0xd8>)
 800f800:	429c      	cmp	r4, r3
 800f802:	bf08      	it	eq
 800f804:	68ec      	ldreq	r4, [r5, #12]
 800f806:	e7d5      	b.n	800f7b4 <_puts_r+0x24>
 800f808:	4621      	mov	r1, r4
 800f80a:	4628      	mov	r0, r5
 800f80c:	f001 f828 	bl	8010860 <__swsetup_r>
 800f810:	2800      	cmp	r0, #0
 800f812:	d0dd      	beq.n	800f7d0 <_puts_r+0x40>
 800f814:	f04f 35ff 	mov.w	r5, #4294967295
 800f818:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f81a:	07da      	lsls	r2, r3, #31
 800f81c:	d405      	bmi.n	800f82a <_puts_r+0x9a>
 800f81e:	89a3      	ldrh	r3, [r4, #12]
 800f820:	059b      	lsls	r3, r3, #22
 800f822:	d402      	bmi.n	800f82a <_puts_r+0x9a>
 800f824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f826:	f002 fc41 	bl	80120ac <__retarget_lock_release_recursive>
 800f82a:	4628      	mov	r0, r5
 800f82c:	bd70      	pop	{r4, r5, r6, pc}
 800f82e:	2b00      	cmp	r3, #0
 800f830:	da04      	bge.n	800f83c <_puts_r+0xac>
 800f832:	69a2      	ldr	r2, [r4, #24]
 800f834:	429a      	cmp	r2, r3
 800f836:	dc06      	bgt.n	800f846 <_puts_r+0xb6>
 800f838:	290a      	cmp	r1, #10
 800f83a:	d004      	beq.n	800f846 <_puts_r+0xb6>
 800f83c:	6823      	ldr	r3, [r4, #0]
 800f83e:	1c5a      	adds	r2, r3, #1
 800f840:	6022      	str	r2, [r4, #0]
 800f842:	7019      	strb	r1, [r3, #0]
 800f844:	e7c5      	b.n	800f7d2 <_puts_r+0x42>
 800f846:	4622      	mov	r2, r4
 800f848:	4628      	mov	r0, r5
 800f84a:	f000 ffa5 	bl	8010798 <__swbuf_r>
 800f84e:	3001      	adds	r0, #1
 800f850:	d1bf      	bne.n	800f7d2 <_puts_r+0x42>
 800f852:	e7df      	b.n	800f814 <_puts_r+0x84>
 800f854:	6823      	ldr	r3, [r4, #0]
 800f856:	250a      	movs	r5, #10
 800f858:	1c5a      	adds	r2, r3, #1
 800f85a:	6022      	str	r2, [r4, #0]
 800f85c:	701d      	strb	r5, [r3, #0]
 800f85e:	e7db      	b.n	800f818 <_puts_r+0x88>
 800f860:	08015438 	.word	0x08015438
 800f864:	08015458 	.word	0x08015458
 800f868:	08015418 	.word	0x08015418

0800f86c <puts>:
 800f86c:	4b02      	ldr	r3, [pc, #8]	; (800f878 <puts+0xc>)
 800f86e:	4601      	mov	r1, r0
 800f870:	6818      	ldr	r0, [r3, #0]
 800f872:	f7ff bf8d 	b.w	800f790 <_puts_r>
 800f876:	bf00      	nop
 800f878:	20000110 	.word	0x20000110

0800f87c <nanf>:
 800f87c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f884 <nanf+0x8>
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop
 800f884:	7fc00000 	.word	0x7fc00000

0800f888 <sniprintf>:
 800f888:	b40c      	push	{r2, r3}
 800f88a:	b530      	push	{r4, r5, lr}
 800f88c:	4b17      	ldr	r3, [pc, #92]	; (800f8ec <sniprintf+0x64>)
 800f88e:	1e0c      	subs	r4, r1, #0
 800f890:	681d      	ldr	r5, [r3, #0]
 800f892:	b09d      	sub	sp, #116	; 0x74
 800f894:	da08      	bge.n	800f8a8 <sniprintf+0x20>
 800f896:	238b      	movs	r3, #139	; 0x8b
 800f898:	602b      	str	r3, [r5, #0]
 800f89a:	f04f 30ff 	mov.w	r0, #4294967295
 800f89e:	b01d      	add	sp, #116	; 0x74
 800f8a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8a4:	b002      	add	sp, #8
 800f8a6:	4770      	bx	lr
 800f8a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f8ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f8b0:	bf14      	ite	ne
 800f8b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f8b6:	4623      	moveq	r3, r4
 800f8b8:	9304      	str	r3, [sp, #16]
 800f8ba:	9307      	str	r3, [sp, #28]
 800f8bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8c0:	9002      	str	r0, [sp, #8]
 800f8c2:	9006      	str	r0, [sp, #24]
 800f8c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f8c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f8ca:	ab21      	add	r3, sp, #132	; 0x84
 800f8cc:	a902      	add	r1, sp, #8
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	9301      	str	r3, [sp, #4]
 800f8d2:	f003 fa93 	bl	8012dfc <_svfiprintf_r>
 800f8d6:	1c43      	adds	r3, r0, #1
 800f8d8:	bfbc      	itt	lt
 800f8da:	238b      	movlt	r3, #139	; 0x8b
 800f8dc:	602b      	strlt	r3, [r5, #0]
 800f8de:	2c00      	cmp	r4, #0
 800f8e0:	d0dd      	beq.n	800f89e <sniprintf+0x16>
 800f8e2:	9b02      	ldr	r3, [sp, #8]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	701a      	strb	r2, [r3, #0]
 800f8e8:	e7d9      	b.n	800f89e <sniprintf+0x16>
 800f8ea:	bf00      	nop
 800f8ec:	20000110 	.word	0x20000110

0800f8f0 <siprintf>:
 800f8f0:	b40e      	push	{r1, r2, r3}
 800f8f2:	b500      	push	{lr}
 800f8f4:	b09c      	sub	sp, #112	; 0x70
 800f8f6:	ab1d      	add	r3, sp, #116	; 0x74
 800f8f8:	9002      	str	r0, [sp, #8]
 800f8fa:	9006      	str	r0, [sp, #24]
 800f8fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f900:	4809      	ldr	r0, [pc, #36]	; (800f928 <siprintf+0x38>)
 800f902:	9107      	str	r1, [sp, #28]
 800f904:	9104      	str	r1, [sp, #16]
 800f906:	4909      	ldr	r1, [pc, #36]	; (800f92c <siprintf+0x3c>)
 800f908:	f853 2b04 	ldr.w	r2, [r3], #4
 800f90c:	9105      	str	r1, [sp, #20]
 800f90e:	6800      	ldr	r0, [r0, #0]
 800f910:	9301      	str	r3, [sp, #4]
 800f912:	a902      	add	r1, sp, #8
 800f914:	f003 fa72 	bl	8012dfc <_svfiprintf_r>
 800f918:	9b02      	ldr	r3, [sp, #8]
 800f91a:	2200      	movs	r2, #0
 800f91c:	701a      	strb	r2, [r3, #0]
 800f91e:	b01c      	add	sp, #112	; 0x70
 800f920:	f85d eb04 	ldr.w	lr, [sp], #4
 800f924:	b003      	add	sp, #12
 800f926:	4770      	bx	lr
 800f928:	20000110 	.word	0x20000110
 800f92c:	ffff0208 	.word	0xffff0208

0800f930 <siscanf>:
 800f930:	b40e      	push	{r1, r2, r3}
 800f932:	b510      	push	{r4, lr}
 800f934:	b09f      	sub	sp, #124	; 0x7c
 800f936:	ac21      	add	r4, sp, #132	; 0x84
 800f938:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f93c:	f854 2b04 	ldr.w	r2, [r4], #4
 800f940:	9201      	str	r2, [sp, #4]
 800f942:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f946:	9004      	str	r0, [sp, #16]
 800f948:	9008      	str	r0, [sp, #32]
 800f94a:	f7f0 fc5b 	bl	8000204 <strlen>
 800f94e:	4b0c      	ldr	r3, [pc, #48]	; (800f980 <siscanf+0x50>)
 800f950:	9005      	str	r0, [sp, #20]
 800f952:	9009      	str	r0, [sp, #36]	; 0x24
 800f954:	930d      	str	r3, [sp, #52]	; 0x34
 800f956:	480b      	ldr	r0, [pc, #44]	; (800f984 <siscanf+0x54>)
 800f958:	9a01      	ldr	r2, [sp, #4]
 800f95a:	6800      	ldr	r0, [r0, #0]
 800f95c:	9403      	str	r4, [sp, #12]
 800f95e:	2300      	movs	r3, #0
 800f960:	9311      	str	r3, [sp, #68]	; 0x44
 800f962:	9316      	str	r3, [sp, #88]	; 0x58
 800f964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f968:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f96c:	a904      	add	r1, sp, #16
 800f96e:	4623      	mov	r3, r4
 800f970:	f003 fb9e 	bl	80130b0 <__ssvfiscanf_r>
 800f974:	b01f      	add	sp, #124	; 0x7c
 800f976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f97a:	b003      	add	sp, #12
 800f97c:	4770      	bx	lr
 800f97e:	bf00      	nop
 800f980:	0800f9ab 	.word	0x0800f9ab
 800f984:	20000110 	.word	0x20000110

0800f988 <__sread>:
 800f988:	b510      	push	{r4, lr}
 800f98a:	460c      	mov	r4, r1
 800f98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f990:	f003 ffb2 	bl	80138f8 <_read_r>
 800f994:	2800      	cmp	r0, #0
 800f996:	bfab      	itete	ge
 800f998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f99a:	89a3      	ldrhlt	r3, [r4, #12]
 800f99c:	181b      	addge	r3, r3, r0
 800f99e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f9a2:	bfac      	ite	ge
 800f9a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f9a6:	81a3      	strhlt	r3, [r4, #12]
 800f9a8:	bd10      	pop	{r4, pc}

0800f9aa <__seofread>:
 800f9aa:	2000      	movs	r0, #0
 800f9ac:	4770      	bx	lr

0800f9ae <__swrite>:
 800f9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b2:	461f      	mov	r7, r3
 800f9b4:	898b      	ldrh	r3, [r1, #12]
 800f9b6:	05db      	lsls	r3, r3, #23
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	4616      	mov	r6, r2
 800f9be:	d505      	bpl.n	800f9cc <__swrite+0x1e>
 800f9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9c4:	2302      	movs	r3, #2
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f002 fb72 	bl	80120b0 <_lseek_r>
 800f9cc:	89a3      	ldrh	r3, [r4, #12]
 800f9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9d6:	81a3      	strh	r3, [r4, #12]
 800f9d8:	4632      	mov	r2, r6
 800f9da:	463b      	mov	r3, r7
 800f9dc:	4628      	mov	r0, r5
 800f9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9e2:	f000 bf2b 	b.w	801083c <_write_r>

0800f9e6 <__sseek>:
 800f9e6:	b510      	push	{r4, lr}
 800f9e8:	460c      	mov	r4, r1
 800f9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ee:	f002 fb5f 	bl	80120b0 <_lseek_r>
 800f9f2:	1c43      	adds	r3, r0, #1
 800f9f4:	89a3      	ldrh	r3, [r4, #12]
 800f9f6:	bf15      	itete	ne
 800f9f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa02:	81a3      	strheq	r3, [r4, #12]
 800fa04:	bf18      	it	ne
 800fa06:	81a3      	strhne	r3, [r4, #12]
 800fa08:	bd10      	pop	{r4, pc}

0800fa0a <__sclose>:
 800fa0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa0e:	f000 bf95 	b.w	801093c <_close_r>

0800fa12 <strstr>:
 800fa12:	780a      	ldrb	r2, [r1, #0]
 800fa14:	b570      	push	{r4, r5, r6, lr}
 800fa16:	b96a      	cbnz	r2, 800fa34 <strstr+0x22>
 800fa18:	bd70      	pop	{r4, r5, r6, pc}
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d109      	bne.n	800fa32 <strstr+0x20>
 800fa1e:	460c      	mov	r4, r1
 800fa20:	4605      	mov	r5, r0
 800fa22:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d0f6      	beq.n	800fa18 <strstr+0x6>
 800fa2a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fa2e:	429e      	cmp	r6, r3
 800fa30:	d0f7      	beq.n	800fa22 <strstr+0x10>
 800fa32:	3001      	adds	r0, #1
 800fa34:	7803      	ldrb	r3, [r0, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d1ef      	bne.n	800fa1a <strstr+0x8>
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	e7ec      	b.n	800fa18 <strstr+0x6>

0800fa3e <sulp>:
 800fa3e:	b570      	push	{r4, r5, r6, lr}
 800fa40:	4604      	mov	r4, r0
 800fa42:	460d      	mov	r5, r1
 800fa44:	ec45 4b10 	vmov	d0, r4, r5
 800fa48:	4616      	mov	r6, r2
 800fa4a:	f002 ff35 	bl	80128b8 <__ulp>
 800fa4e:	ec51 0b10 	vmov	r0, r1, d0
 800fa52:	b17e      	cbz	r6, 800fa74 <sulp+0x36>
 800fa54:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fa58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	dd09      	ble.n	800fa74 <sulp+0x36>
 800fa60:	051b      	lsls	r3, r3, #20
 800fa62:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fa66:	2400      	movs	r4, #0
 800fa68:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fa6c:	4622      	mov	r2, r4
 800fa6e:	462b      	mov	r3, r5
 800fa70:	f7f0 fde2 	bl	8000638 <__aeabi_dmul>
 800fa74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fa78 <_strtod_l>:
 800fa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa7c:	ed2d 8b02 	vpush	{d8}
 800fa80:	b09d      	sub	sp, #116	; 0x74
 800fa82:	461f      	mov	r7, r3
 800fa84:	2300      	movs	r3, #0
 800fa86:	9318      	str	r3, [sp, #96]	; 0x60
 800fa88:	4ba2      	ldr	r3, [pc, #648]	; (800fd14 <_strtod_l+0x29c>)
 800fa8a:	9213      	str	r2, [sp, #76]	; 0x4c
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	9305      	str	r3, [sp, #20]
 800fa90:	4604      	mov	r4, r0
 800fa92:	4618      	mov	r0, r3
 800fa94:	4688      	mov	r8, r1
 800fa96:	f7f0 fbb5 	bl	8000204 <strlen>
 800fa9a:	f04f 0a00 	mov.w	sl, #0
 800fa9e:	4605      	mov	r5, r0
 800faa0:	f04f 0b00 	mov.w	fp, #0
 800faa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800faa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800faaa:	781a      	ldrb	r2, [r3, #0]
 800faac:	2a2b      	cmp	r2, #43	; 0x2b
 800faae:	d04e      	beq.n	800fb4e <_strtod_l+0xd6>
 800fab0:	d83b      	bhi.n	800fb2a <_strtod_l+0xb2>
 800fab2:	2a0d      	cmp	r2, #13
 800fab4:	d834      	bhi.n	800fb20 <_strtod_l+0xa8>
 800fab6:	2a08      	cmp	r2, #8
 800fab8:	d834      	bhi.n	800fb24 <_strtod_l+0xac>
 800faba:	2a00      	cmp	r2, #0
 800fabc:	d03e      	beq.n	800fb3c <_strtod_l+0xc4>
 800fabe:	2300      	movs	r3, #0
 800fac0:	930a      	str	r3, [sp, #40]	; 0x28
 800fac2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fac4:	7833      	ldrb	r3, [r6, #0]
 800fac6:	2b30      	cmp	r3, #48	; 0x30
 800fac8:	f040 80b0 	bne.w	800fc2c <_strtod_l+0x1b4>
 800facc:	7873      	ldrb	r3, [r6, #1]
 800face:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fad2:	2b58      	cmp	r3, #88	; 0x58
 800fad4:	d168      	bne.n	800fba8 <_strtod_l+0x130>
 800fad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fad8:	9301      	str	r3, [sp, #4]
 800fada:	ab18      	add	r3, sp, #96	; 0x60
 800fadc:	9702      	str	r7, [sp, #8]
 800fade:	9300      	str	r3, [sp, #0]
 800fae0:	4a8d      	ldr	r2, [pc, #564]	; (800fd18 <_strtod_l+0x2a0>)
 800fae2:	ab19      	add	r3, sp, #100	; 0x64
 800fae4:	a917      	add	r1, sp, #92	; 0x5c
 800fae6:	4620      	mov	r0, r4
 800fae8:	f001 ffd2 	bl	8011a90 <__gethex>
 800faec:	f010 0707 	ands.w	r7, r0, #7
 800faf0:	4605      	mov	r5, r0
 800faf2:	d005      	beq.n	800fb00 <_strtod_l+0x88>
 800faf4:	2f06      	cmp	r7, #6
 800faf6:	d12c      	bne.n	800fb52 <_strtod_l+0xda>
 800faf8:	3601      	adds	r6, #1
 800fafa:	2300      	movs	r3, #0
 800fafc:	9617      	str	r6, [sp, #92]	; 0x5c
 800fafe:	930a      	str	r3, [sp, #40]	; 0x28
 800fb00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f040 8590 	bne.w	8010628 <_strtod_l+0xbb0>
 800fb08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb0a:	b1eb      	cbz	r3, 800fb48 <_strtod_l+0xd0>
 800fb0c:	4652      	mov	r2, sl
 800fb0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fb12:	ec43 2b10 	vmov	d0, r2, r3
 800fb16:	b01d      	add	sp, #116	; 0x74
 800fb18:	ecbd 8b02 	vpop	{d8}
 800fb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb20:	2a20      	cmp	r2, #32
 800fb22:	d1cc      	bne.n	800fabe <_strtod_l+0x46>
 800fb24:	3301      	adds	r3, #1
 800fb26:	9317      	str	r3, [sp, #92]	; 0x5c
 800fb28:	e7be      	b.n	800faa8 <_strtod_l+0x30>
 800fb2a:	2a2d      	cmp	r2, #45	; 0x2d
 800fb2c:	d1c7      	bne.n	800fabe <_strtod_l+0x46>
 800fb2e:	2201      	movs	r2, #1
 800fb30:	920a      	str	r2, [sp, #40]	; 0x28
 800fb32:	1c5a      	adds	r2, r3, #1
 800fb34:	9217      	str	r2, [sp, #92]	; 0x5c
 800fb36:	785b      	ldrb	r3, [r3, #1]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d1c2      	bne.n	800fac2 <_strtod_l+0x4a>
 800fb3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	f040 856e 	bne.w	8010624 <_strtod_l+0xbac>
 800fb48:	4652      	mov	r2, sl
 800fb4a:	465b      	mov	r3, fp
 800fb4c:	e7e1      	b.n	800fb12 <_strtod_l+0x9a>
 800fb4e:	2200      	movs	r2, #0
 800fb50:	e7ee      	b.n	800fb30 <_strtod_l+0xb8>
 800fb52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fb54:	b13a      	cbz	r2, 800fb66 <_strtod_l+0xee>
 800fb56:	2135      	movs	r1, #53	; 0x35
 800fb58:	a81a      	add	r0, sp, #104	; 0x68
 800fb5a:	f002 ffb8 	bl	8012ace <__copybits>
 800fb5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fb60:	4620      	mov	r0, r4
 800fb62:	f002 fb77 	bl	8012254 <_Bfree>
 800fb66:	3f01      	subs	r7, #1
 800fb68:	2f04      	cmp	r7, #4
 800fb6a:	d806      	bhi.n	800fb7a <_strtod_l+0x102>
 800fb6c:	e8df f007 	tbb	[pc, r7]
 800fb70:	1714030a 	.word	0x1714030a
 800fb74:	0a          	.byte	0x0a
 800fb75:	00          	.byte	0x00
 800fb76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800fb7a:	0728      	lsls	r0, r5, #28
 800fb7c:	d5c0      	bpl.n	800fb00 <_strtod_l+0x88>
 800fb7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fb82:	e7bd      	b.n	800fb00 <_strtod_l+0x88>
 800fb84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800fb88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fb8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fb8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fb92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fb96:	e7f0      	b.n	800fb7a <_strtod_l+0x102>
 800fb98:	f8df b180 	ldr.w	fp, [pc, #384]	; 800fd1c <_strtod_l+0x2a4>
 800fb9c:	e7ed      	b.n	800fb7a <_strtod_l+0x102>
 800fb9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fba2:	f04f 3aff 	mov.w	sl, #4294967295
 800fba6:	e7e8      	b.n	800fb7a <_strtod_l+0x102>
 800fba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fbaa:	1c5a      	adds	r2, r3, #1
 800fbac:	9217      	str	r2, [sp, #92]	; 0x5c
 800fbae:	785b      	ldrb	r3, [r3, #1]
 800fbb0:	2b30      	cmp	r3, #48	; 0x30
 800fbb2:	d0f9      	beq.n	800fba8 <_strtod_l+0x130>
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d0a3      	beq.n	800fb00 <_strtod_l+0x88>
 800fbb8:	2301      	movs	r3, #1
 800fbba:	f04f 0900 	mov.w	r9, #0
 800fbbe:	9304      	str	r3, [sp, #16]
 800fbc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fbc2:	9308      	str	r3, [sp, #32]
 800fbc4:	f8cd 901c 	str.w	r9, [sp, #28]
 800fbc8:	464f      	mov	r7, r9
 800fbca:	220a      	movs	r2, #10
 800fbcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fbce:	7806      	ldrb	r6, [r0, #0]
 800fbd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fbd4:	b2d9      	uxtb	r1, r3
 800fbd6:	2909      	cmp	r1, #9
 800fbd8:	d92a      	bls.n	800fc30 <_strtod_l+0x1b8>
 800fbda:	9905      	ldr	r1, [sp, #20]
 800fbdc:	462a      	mov	r2, r5
 800fbde:	f003 feef 	bl	80139c0 <strncmp>
 800fbe2:	b398      	cbz	r0, 800fc4c <_strtod_l+0x1d4>
 800fbe4:	2000      	movs	r0, #0
 800fbe6:	4632      	mov	r2, r6
 800fbe8:	463d      	mov	r5, r7
 800fbea:	9005      	str	r0, [sp, #20]
 800fbec:	4603      	mov	r3, r0
 800fbee:	2a65      	cmp	r2, #101	; 0x65
 800fbf0:	d001      	beq.n	800fbf6 <_strtod_l+0x17e>
 800fbf2:	2a45      	cmp	r2, #69	; 0x45
 800fbf4:	d118      	bne.n	800fc28 <_strtod_l+0x1b0>
 800fbf6:	b91d      	cbnz	r5, 800fc00 <_strtod_l+0x188>
 800fbf8:	9a04      	ldr	r2, [sp, #16]
 800fbfa:	4302      	orrs	r2, r0
 800fbfc:	d09e      	beq.n	800fb3c <_strtod_l+0xc4>
 800fbfe:	2500      	movs	r5, #0
 800fc00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800fc04:	f108 0201 	add.w	r2, r8, #1
 800fc08:	9217      	str	r2, [sp, #92]	; 0x5c
 800fc0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800fc0e:	2a2b      	cmp	r2, #43	; 0x2b
 800fc10:	d075      	beq.n	800fcfe <_strtod_l+0x286>
 800fc12:	2a2d      	cmp	r2, #45	; 0x2d
 800fc14:	d07b      	beq.n	800fd0e <_strtod_l+0x296>
 800fc16:	f04f 0c00 	mov.w	ip, #0
 800fc1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fc1e:	2909      	cmp	r1, #9
 800fc20:	f240 8082 	bls.w	800fd28 <_strtod_l+0x2b0>
 800fc24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fc28:	2600      	movs	r6, #0
 800fc2a:	e09d      	b.n	800fd68 <_strtod_l+0x2f0>
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	e7c4      	b.n	800fbba <_strtod_l+0x142>
 800fc30:	2f08      	cmp	r7, #8
 800fc32:	bfd8      	it	le
 800fc34:	9907      	ldrle	r1, [sp, #28]
 800fc36:	f100 0001 	add.w	r0, r0, #1
 800fc3a:	bfda      	itte	le
 800fc3c:	fb02 3301 	mlale	r3, r2, r1, r3
 800fc40:	9307      	strle	r3, [sp, #28]
 800fc42:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fc46:	3701      	adds	r7, #1
 800fc48:	9017      	str	r0, [sp, #92]	; 0x5c
 800fc4a:	e7bf      	b.n	800fbcc <_strtod_l+0x154>
 800fc4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc4e:	195a      	adds	r2, r3, r5
 800fc50:	9217      	str	r2, [sp, #92]	; 0x5c
 800fc52:	5d5a      	ldrb	r2, [r3, r5]
 800fc54:	2f00      	cmp	r7, #0
 800fc56:	d037      	beq.n	800fcc8 <_strtod_l+0x250>
 800fc58:	9005      	str	r0, [sp, #20]
 800fc5a:	463d      	mov	r5, r7
 800fc5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fc60:	2b09      	cmp	r3, #9
 800fc62:	d912      	bls.n	800fc8a <_strtod_l+0x212>
 800fc64:	2301      	movs	r3, #1
 800fc66:	e7c2      	b.n	800fbee <_strtod_l+0x176>
 800fc68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc6a:	1c5a      	adds	r2, r3, #1
 800fc6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800fc6e:	785a      	ldrb	r2, [r3, #1]
 800fc70:	3001      	adds	r0, #1
 800fc72:	2a30      	cmp	r2, #48	; 0x30
 800fc74:	d0f8      	beq.n	800fc68 <_strtod_l+0x1f0>
 800fc76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fc7a:	2b08      	cmp	r3, #8
 800fc7c:	f200 84d9 	bhi.w	8010632 <_strtod_l+0xbba>
 800fc80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc82:	9005      	str	r0, [sp, #20]
 800fc84:	2000      	movs	r0, #0
 800fc86:	9308      	str	r3, [sp, #32]
 800fc88:	4605      	mov	r5, r0
 800fc8a:	3a30      	subs	r2, #48	; 0x30
 800fc8c:	f100 0301 	add.w	r3, r0, #1
 800fc90:	d014      	beq.n	800fcbc <_strtod_l+0x244>
 800fc92:	9905      	ldr	r1, [sp, #20]
 800fc94:	4419      	add	r1, r3
 800fc96:	9105      	str	r1, [sp, #20]
 800fc98:	462b      	mov	r3, r5
 800fc9a:	eb00 0e05 	add.w	lr, r0, r5
 800fc9e:	210a      	movs	r1, #10
 800fca0:	4573      	cmp	r3, lr
 800fca2:	d113      	bne.n	800fccc <_strtod_l+0x254>
 800fca4:	182b      	adds	r3, r5, r0
 800fca6:	2b08      	cmp	r3, #8
 800fca8:	f105 0501 	add.w	r5, r5, #1
 800fcac:	4405      	add	r5, r0
 800fcae:	dc1c      	bgt.n	800fcea <_strtod_l+0x272>
 800fcb0:	9907      	ldr	r1, [sp, #28]
 800fcb2:	230a      	movs	r3, #10
 800fcb4:	fb03 2301 	mla	r3, r3, r1, r2
 800fcb8:	9307      	str	r3, [sp, #28]
 800fcba:	2300      	movs	r3, #0
 800fcbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fcbe:	1c51      	adds	r1, r2, #1
 800fcc0:	9117      	str	r1, [sp, #92]	; 0x5c
 800fcc2:	7852      	ldrb	r2, [r2, #1]
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	e7c9      	b.n	800fc5c <_strtod_l+0x1e4>
 800fcc8:	4638      	mov	r0, r7
 800fcca:	e7d2      	b.n	800fc72 <_strtod_l+0x1fa>
 800fccc:	2b08      	cmp	r3, #8
 800fcce:	dc04      	bgt.n	800fcda <_strtod_l+0x262>
 800fcd0:	9e07      	ldr	r6, [sp, #28]
 800fcd2:	434e      	muls	r6, r1
 800fcd4:	9607      	str	r6, [sp, #28]
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	e7e2      	b.n	800fca0 <_strtod_l+0x228>
 800fcda:	f103 0c01 	add.w	ip, r3, #1
 800fcde:	f1bc 0f10 	cmp.w	ip, #16
 800fce2:	bfd8      	it	le
 800fce4:	fb01 f909 	mulle.w	r9, r1, r9
 800fce8:	e7f5      	b.n	800fcd6 <_strtod_l+0x25e>
 800fcea:	2d10      	cmp	r5, #16
 800fcec:	bfdc      	itt	le
 800fcee:	230a      	movle	r3, #10
 800fcf0:	fb03 2909 	mlale	r9, r3, r9, r2
 800fcf4:	e7e1      	b.n	800fcba <_strtod_l+0x242>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	9305      	str	r3, [sp, #20]
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	e77c      	b.n	800fbf8 <_strtod_l+0x180>
 800fcfe:	f04f 0c00 	mov.w	ip, #0
 800fd02:	f108 0202 	add.w	r2, r8, #2
 800fd06:	9217      	str	r2, [sp, #92]	; 0x5c
 800fd08:	f898 2002 	ldrb.w	r2, [r8, #2]
 800fd0c:	e785      	b.n	800fc1a <_strtod_l+0x1a2>
 800fd0e:	f04f 0c01 	mov.w	ip, #1
 800fd12:	e7f6      	b.n	800fd02 <_strtod_l+0x28a>
 800fd14:	080154e0 	.word	0x080154e0
 800fd18:	08015338 	.word	0x08015338
 800fd1c:	7ff00000 	.word	0x7ff00000
 800fd20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fd22:	1c51      	adds	r1, r2, #1
 800fd24:	9117      	str	r1, [sp, #92]	; 0x5c
 800fd26:	7852      	ldrb	r2, [r2, #1]
 800fd28:	2a30      	cmp	r2, #48	; 0x30
 800fd2a:	d0f9      	beq.n	800fd20 <_strtod_l+0x2a8>
 800fd2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fd30:	2908      	cmp	r1, #8
 800fd32:	f63f af79 	bhi.w	800fc28 <_strtod_l+0x1b0>
 800fd36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fd3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fd3c:	9206      	str	r2, [sp, #24]
 800fd3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fd40:	1c51      	adds	r1, r2, #1
 800fd42:	9117      	str	r1, [sp, #92]	; 0x5c
 800fd44:	7852      	ldrb	r2, [r2, #1]
 800fd46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800fd4a:	2e09      	cmp	r6, #9
 800fd4c:	d937      	bls.n	800fdbe <_strtod_l+0x346>
 800fd4e:	9e06      	ldr	r6, [sp, #24]
 800fd50:	1b89      	subs	r1, r1, r6
 800fd52:	2908      	cmp	r1, #8
 800fd54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fd58:	dc02      	bgt.n	800fd60 <_strtod_l+0x2e8>
 800fd5a:	4576      	cmp	r6, lr
 800fd5c:	bfa8      	it	ge
 800fd5e:	4676      	movge	r6, lr
 800fd60:	f1bc 0f00 	cmp.w	ip, #0
 800fd64:	d000      	beq.n	800fd68 <_strtod_l+0x2f0>
 800fd66:	4276      	negs	r6, r6
 800fd68:	2d00      	cmp	r5, #0
 800fd6a:	d14d      	bne.n	800fe08 <_strtod_l+0x390>
 800fd6c:	9904      	ldr	r1, [sp, #16]
 800fd6e:	4301      	orrs	r1, r0
 800fd70:	f47f aec6 	bne.w	800fb00 <_strtod_l+0x88>
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	f47f aee1 	bne.w	800fb3c <_strtod_l+0xc4>
 800fd7a:	2a69      	cmp	r2, #105	; 0x69
 800fd7c:	d027      	beq.n	800fdce <_strtod_l+0x356>
 800fd7e:	dc24      	bgt.n	800fdca <_strtod_l+0x352>
 800fd80:	2a49      	cmp	r2, #73	; 0x49
 800fd82:	d024      	beq.n	800fdce <_strtod_l+0x356>
 800fd84:	2a4e      	cmp	r2, #78	; 0x4e
 800fd86:	f47f aed9 	bne.w	800fb3c <_strtod_l+0xc4>
 800fd8a:	499f      	ldr	r1, [pc, #636]	; (8010008 <_strtod_l+0x590>)
 800fd8c:	a817      	add	r0, sp, #92	; 0x5c
 800fd8e:	f002 f8d7 	bl	8011f40 <__match>
 800fd92:	2800      	cmp	r0, #0
 800fd94:	f43f aed2 	beq.w	800fb3c <_strtod_l+0xc4>
 800fd98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	2b28      	cmp	r3, #40	; 0x28
 800fd9e:	d12d      	bne.n	800fdfc <_strtod_l+0x384>
 800fda0:	499a      	ldr	r1, [pc, #616]	; (801000c <_strtod_l+0x594>)
 800fda2:	aa1a      	add	r2, sp, #104	; 0x68
 800fda4:	a817      	add	r0, sp, #92	; 0x5c
 800fda6:	f002 f8df 	bl	8011f68 <__hexnan>
 800fdaa:	2805      	cmp	r0, #5
 800fdac:	d126      	bne.n	800fdfc <_strtod_l+0x384>
 800fdae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fdb0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fdb4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fdb8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fdbc:	e6a0      	b.n	800fb00 <_strtod_l+0x88>
 800fdbe:	210a      	movs	r1, #10
 800fdc0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800fdc4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fdc8:	e7b9      	b.n	800fd3e <_strtod_l+0x2c6>
 800fdca:	2a6e      	cmp	r2, #110	; 0x6e
 800fdcc:	e7db      	b.n	800fd86 <_strtod_l+0x30e>
 800fdce:	4990      	ldr	r1, [pc, #576]	; (8010010 <_strtod_l+0x598>)
 800fdd0:	a817      	add	r0, sp, #92	; 0x5c
 800fdd2:	f002 f8b5 	bl	8011f40 <__match>
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	f43f aeb0 	beq.w	800fb3c <_strtod_l+0xc4>
 800fddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fdde:	498d      	ldr	r1, [pc, #564]	; (8010014 <_strtod_l+0x59c>)
 800fde0:	3b01      	subs	r3, #1
 800fde2:	a817      	add	r0, sp, #92	; 0x5c
 800fde4:	9317      	str	r3, [sp, #92]	; 0x5c
 800fde6:	f002 f8ab 	bl	8011f40 <__match>
 800fdea:	b910      	cbnz	r0, 800fdf2 <_strtod_l+0x37a>
 800fdec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fdee:	3301      	adds	r3, #1
 800fdf0:	9317      	str	r3, [sp, #92]	; 0x5c
 800fdf2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010024 <_strtod_l+0x5ac>
 800fdf6:	f04f 0a00 	mov.w	sl, #0
 800fdfa:	e681      	b.n	800fb00 <_strtod_l+0x88>
 800fdfc:	4886      	ldr	r0, [pc, #536]	; (8010018 <_strtod_l+0x5a0>)
 800fdfe:	f003 fd8f 	bl	8013920 <nan>
 800fe02:	ec5b ab10 	vmov	sl, fp, d0
 800fe06:	e67b      	b.n	800fb00 <_strtod_l+0x88>
 800fe08:	9b05      	ldr	r3, [sp, #20]
 800fe0a:	9807      	ldr	r0, [sp, #28]
 800fe0c:	1af3      	subs	r3, r6, r3
 800fe0e:	2f00      	cmp	r7, #0
 800fe10:	bf08      	it	eq
 800fe12:	462f      	moveq	r7, r5
 800fe14:	2d10      	cmp	r5, #16
 800fe16:	9306      	str	r3, [sp, #24]
 800fe18:	46a8      	mov	r8, r5
 800fe1a:	bfa8      	it	ge
 800fe1c:	f04f 0810 	movge.w	r8, #16
 800fe20:	f7f0 fb90 	bl	8000544 <__aeabi_ui2d>
 800fe24:	2d09      	cmp	r5, #9
 800fe26:	4682      	mov	sl, r0
 800fe28:	468b      	mov	fp, r1
 800fe2a:	dd13      	ble.n	800fe54 <_strtod_l+0x3dc>
 800fe2c:	4b7b      	ldr	r3, [pc, #492]	; (801001c <_strtod_l+0x5a4>)
 800fe2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fe32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fe36:	f7f0 fbff 	bl	8000638 <__aeabi_dmul>
 800fe3a:	4682      	mov	sl, r0
 800fe3c:	4648      	mov	r0, r9
 800fe3e:	468b      	mov	fp, r1
 800fe40:	f7f0 fb80 	bl	8000544 <__aeabi_ui2d>
 800fe44:	4602      	mov	r2, r0
 800fe46:	460b      	mov	r3, r1
 800fe48:	4650      	mov	r0, sl
 800fe4a:	4659      	mov	r1, fp
 800fe4c:	f7f0 fa3e 	bl	80002cc <__adddf3>
 800fe50:	4682      	mov	sl, r0
 800fe52:	468b      	mov	fp, r1
 800fe54:	2d0f      	cmp	r5, #15
 800fe56:	dc38      	bgt.n	800feca <_strtod_l+0x452>
 800fe58:	9b06      	ldr	r3, [sp, #24]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	f43f ae50 	beq.w	800fb00 <_strtod_l+0x88>
 800fe60:	dd24      	ble.n	800feac <_strtod_l+0x434>
 800fe62:	2b16      	cmp	r3, #22
 800fe64:	dc0b      	bgt.n	800fe7e <_strtod_l+0x406>
 800fe66:	496d      	ldr	r1, [pc, #436]	; (801001c <_strtod_l+0x5a4>)
 800fe68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe70:	4652      	mov	r2, sl
 800fe72:	465b      	mov	r3, fp
 800fe74:	f7f0 fbe0 	bl	8000638 <__aeabi_dmul>
 800fe78:	4682      	mov	sl, r0
 800fe7a:	468b      	mov	fp, r1
 800fe7c:	e640      	b.n	800fb00 <_strtod_l+0x88>
 800fe7e:	9a06      	ldr	r2, [sp, #24]
 800fe80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fe84:	4293      	cmp	r3, r2
 800fe86:	db20      	blt.n	800feca <_strtod_l+0x452>
 800fe88:	4c64      	ldr	r4, [pc, #400]	; (801001c <_strtod_l+0x5a4>)
 800fe8a:	f1c5 050f 	rsb	r5, r5, #15
 800fe8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fe92:	4652      	mov	r2, sl
 800fe94:	465b      	mov	r3, fp
 800fe96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe9a:	f7f0 fbcd 	bl	8000638 <__aeabi_dmul>
 800fe9e:	9b06      	ldr	r3, [sp, #24]
 800fea0:	1b5d      	subs	r5, r3, r5
 800fea2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fea6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800feaa:	e7e3      	b.n	800fe74 <_strtod_l+0x3fc>
 800feac:	9b06      	ldr	r3, [sp, #24]
 800feae:	3316      	adds	r3, #22
 800feb0:	db0b      	blt.n	800feca <_strtod_l+0x452>
 800feb2:	9b05      	ldr	r3, [sp, #20]
 800feb4:	1b9e      	subs	r6, r3, r6
 800feb6:	4b59      	ldr	r3, [pc, #356]	; (801001c <_strtod_l+0x5a4>)
 800feb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800febc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fec0:	4650      	mov	r0, sl
 800fec2:	4659      	mov	r1, fp
 800fec4:	f7f0 fce2 	bl	800088c <__aeabi_ddiv>
 800fec8:	e7d6      	b.n	800fe78 <_strtod_l+0x400>
 800feca:	9b06      	ldr	r3, [sp, #24]
 800fecc:	eba5 0808 	sub.w	r8, r5, r8
 800fed0:	4498      	add	r8, r3
 800fed2:	f1b8 0f00 	cmp.w	r8, #0
 800fed6:	dd74      	ble.n	800ffc2 <_strtod_l+0x54a>
 800fed8:	f018 030f 	ands.w	r3, r8, #15
 800fedc:	d00a      	beq.n	800fef4 <_strtod_l+0x47c>
 800fede:	494f      	ldr	r1, [pc, #316]	; (801001c <_strtod_l+0x5a4>)
 800fee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fee4:	4652      	mov	r2, sl
 800fee6:	465b      	mov	r3, fp
 800fee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800feec:	f7f0 fba4 	bl	8000638 <__aeabi_dmul>
 800fef0:	4682      	mov	sl, r0
 800fef2:	468b      	mov	fp, r1
 800fef4:	f038 080f 	bics.w	r8, r8, #15
 800fef8:	d04f      	beq.n	800ff9a <_strtod_l+0x522>
 800fefa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fefe:	dd22      	ble.n	800ff46 <_strtod_l+0x4ce>
 800ff00:	2500      	movs	r5, #0
 800ff02:	462e      	mov	r6, r5
 800ff04:	9507      	str	r5, [sp, #28]
 800ff06:	9505      	str	r5, [sp, #20]
 800ff08:	2322      	movs	r3, #34	; 0x22
 800ff0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010024 <_strtod_l+0x5ac>
 800ff0e:	6023      	str	r3, [r4, #0]
 800ff10:	f04f 0a00 	mov.w	sl, #0
 800ff14:	9b07      	ldr	r3, [sp, #28]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	f43f adf2 	beq.w	800fb00 <_strtod_l+0x88>
 800ff1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff1e:	4620      	mov	r0, r4
 800ff20:	f002 f998 	bl	8012254 <_Bfree>
 800ff24:	9905      	ldr	r1, [sp, #20]
 800ff26:	4620      	mov	r0, r4
 800ff28:	f002 f994 	bl	8012254 <_Bfree>
 800ff2c:	4631      	mov	r1, r6
 800ff2e:	4620      	mov	r0, r4
 800ff30:	f002 f990 	bl	8012254 <_Bfree>
 800ff34:	9907      	ldr	r1, [sp, #28]
 800ff36:	4620      	mov	r0, r4
 800ff38:	f002 f98c 	bl	8012254 <_Bfree>
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	4620      	mov	r0, r4
 800ff40:	f002 f988 	bl	8012254 <_Bfree>
 800ff44:	e5dc      	b.n	800fb00 <_strtod_l+0x88>
 800ff46:	4b36      	ldr	r3, [pc, #216]	; (8010020 <_strtod_l+0x5a8>)
 800ff48:	9304      	str	r3, [sp, #16]
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ff50:	4650      	mov	r0, sl
 800ff52:	4659      	mov	r1, fp
 800ff54:	4699      	mov	r9, r3
 800ff56:	f1b8 0f01 	cmp.w	r8, #1
 800ff5a:	dc21      	bgt.n	800ffa0 <_strtod_l+0x528>
 800ff5c:	b10b      	cbz	r3, 800ff62 <_strtod_l+0x4ea>
 800ff5e:	4682      	mov	sl, r0
 800ff60:	468b      	mov	fp, r1
 800ff62:	4b2f      	ldr	r3, [pc, #188]	; (8010020 <_strtod_l+0x5a8>)
 800ff64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ff68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ff6c:	4652      	mov	r2, sl
 800ff6e:	465b      	mov	r3, fp
 800ff70:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ff74:	f7f0 fb60 	bl	8000638 <__aeabi_dmul>
 800ff78:	4b2a      	ldr	r3, [pc, #168]	; (8010024 <_strtod_l+0x5ac>)
 800ff7a:	460a      	mov	r2, r1
 800ff7c:	400b      	ands	r3, r1
 800ff7e:	492a      	ldr	r1, [pc, #168]	; (8010028 <_strtod_l+0x5b0>)
 800ff80:	428b      	cmp	r3, r1
 800ff82:	4682      	mov	sl, r0
 800ff84:	d8bc      	bhi.n	800ff00 <_strtod_l+0x488>
 800ff86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ff8a:	428b      	cmp	r3, r1
 800ff8c:	bf86      	itte	hi
 800ff8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801002c <_strtod_l+0x5b4>
 800ff92:	f04f 3aff 	movhi.w	sl, #4294967295
 800ff96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	9304      	str	r3, [sp, #16]
 800ff9e:	e084      	b.n	80100aa <_strtod_l+0x632>
 800ffa0:	f018 0f01 	tst.w	r8, #1
 800ffa4:	d005      	beq.n	800ffb2 <_strtod_l+0x53a>
 800ffa6:	9b04      	ldr	r3, [sp, #16]
 800ffa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffac:	f7f0 fb44 	bl	8000638 <__aeabi_dmul>
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	9a04      	ldr	r2, [sp, #16]
 800ffb4:	3208      	adds	r2, #8
 800ffb6:	f109 0901 	add.w	r9, r9, #1
 800ffba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ffbe:	9204      	str	r2, [sp, #16]
 800ffc0:	e7c9      	b.n	800ff56 <_strtod_l+0x4de>
 800ffc2:	d0ea      	beq.n	800ff9a <_strtod_l+0x522>
 800ffc4:	f1c8 0800 	rsb	r8, r8, #0
 800ffc8:	f018 020f 	ands.w	r2, r8, #15
 800ffcc:	d00a      	beq.n	800ffe4 <_strtod_l+0x56c>
 800ffce:	4b13      	ldr	r3, [pc, #76]	; (801001c <_strtod_l+0x5a4>)
 800ffd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffd4:	4650      	mov	r0, sl
 800ffd6:	4659      	mov	r1, fp
 800ffd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffdc:	f7f0 fc56 	bl	800088c <__aeabi_ddiv>
 800ffe0:	4682      	mov	sl, r0
 800ffe2:	468b      	mov	fp, r1
 800ffe4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ffe8:	d0d7      	beq.n	800ff9a <_strtod_l+0x522>
 800ffea:	f1b8 0f1f 	cmp.w	r8, #31
 800ffee:	dd1f      	ble.n	8010030 <_strtod_l+0x5b8>
 800fff0:	2500      	movs	r5, #0
 800fff2:	462e      	mov	r6, r5
 800fff4:	9507      	str	r5, [sp, #28]
 800fff6:	9505      	str	r5, [sp, #20]
 800fff8:	2322      	movs	r3, #34	; 0x22
 800fffa:	f04f 0a00 	mov.w	sl, #0
 800fffe:	f04f 0b00 	mov.w	fp, #0
 8010002:	6023      	str	r3, [r4, #0]
 8010004:	e786      	b.n	800ff14 <_strtod_l+0x49c>
 8010006:	bf00      	nop
 8010008:	0801530d 	.word	0x0801530d
 801000c:	0801534c 	.word	0x0801534c
 8010010:	08015305 	.word	0x08015305
 8010014:	0801538b 	.word	0x0801538b
 8010018:	080156b3 	.word	0x080156b3
 801001c:	08015578 	.word	0x08015578
 8010020:	08015550 	.word	0x08015550
 8010024:	7ff00000 	.word	0x7ff00000
 8010028:	7ca00000 	.word	0x7ca00000
 801002c:	7fefffff 	.word	0x7fefffff
 8010030:	f018 0310 	ands.w	r3, r8, #16
 8010034:	bf18      	it	ne
 8010036:	236a      	movne	r3, #106	; 0x6a
 8010038:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80103e8 <_strtod_l+0x970>
 801003c:	9304      	str	r3, [sp, #16]
 801003e:	4650      	mov	r0, sl
 8010040:	4659      	mov	r1, fp
 8010042:	2300      	movs	r3, #0
 8010044:	f018 0f01 	tst.w	r8, #1
 8010048:	d004      	beq.n	8010054 <_strtod_l+0x5dc>
 801004a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801004e:	f7f0 faf3 	bl	8000638 <__aeabi_dmul>
 8010052:	2301      	movs	r3, #1
 8010054:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010058:	f109 0908 	add.w	r9, r9, #8
 801005c:	d1f2      	bne.n	8010044 <_strtod_l+0x5cc>
 801005e:	b10b      	cbz	r3, 8010064 <_strtod_l+0x5ec>
 8010060:	4682      	mov	sl, r0
 8010062:	468b      	mov	fp, r1
 8010064:	9b04      	ldr	r3, [sp, #16]
 8010066:	b1c3      	cbz	r3, 801009a <_strtod_l+0x622>
 8010068:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801006c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010070:	2b00      	cmp	r3, #0
 8010072:	4659      	mov	r1, fp
 8010074:	dd11      	ble.n	801009a <_strtod_l+0x622>
 8010076:	2b1f      	cmp	r3, #31
 8010078:	f340 8124 	ble.w	80102c4 <_strtod_l+0x84c>
 801007c:	2b34      	cmp	r3, #52	; 0x34
 801007e:	bfde      	ittt	le
 8010080:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010084:	f04f 33ff 	movle.w	r3, #4294967295
 8010088:	fa03 f202 	lslle.w	r2, r3, r2
 801008c:	f04f 0a00 	mov.w	sl, #0
 8010090:	bfcc      	ite	gt
 8010092:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010096:	ea02 0b01 	andle.w	fp, r2, r1
 801009a:	2200      	movs	r2, #0
 801009c:	2300      	movs	r3, #0
 801009e:	4650      	mov	r0, sl
 80100a0:	4659      	mov	r1, fp
 80100a2:	f7f0 fd31 	bl	8000b08 <__aeabi_dcmpeq>
 80100a6:	2800      	cmp	r0, #0
 80100a8:	d1a2      	bne.n	800fff0 <_strtod_l+0x578>
 80100aa:	9b07      	ldr	r3, [sp, #28]
 80100ac:	9300      	str	r3, [sp, #0]
 80100ae:	9908      	ldr	r1, [sp, #32]
 80100b0:	462b      	mov	r3, r5
 80100b2:	463a      	mov	r2, r7
 80100b4:	4620      	mov	r0, r4
 80100b6:	f002 f935 	bl	8012324 <__s2b>
 80100ba:	9007      	str	r0, [sp, #28]
 80100bc:	2800      	cmp	r0, #0
 80100be:	f43f af1f 	beq.w	800ff00 <_strtod_l+0x488>
 80100c2:	9b05      	ldr	r3, [sp, #20]
 80100c4:	1b9e      	subs	r6, r3, r6
 80100c6:	9b06      	ldr	r3, [sp, #24]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	bfb4      	ite	lt
 80100cc:	4633      	movlt	r3, r6
 80100ce:	2300      	movge	r3, #0
 80100d0:	930c      	str	r3, [sp, #48]	; 0x30
 80100d2:	9b06      	ldr	r3, [sp, #24]
 80100d4:	2500      	movs	r5, #0
 80100d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80100da:	9312      	str	r3, [sp, #72]	; 0x48
 80100dc:	462e      	mov	r6, r5
 80100de:	9b07      	ldr	r3, [sp, #28]
 80100e0:	4620      	mov	r0, r4
 80100e2:	6859      	ldr	r1, [r3, #4]
 80100e4:	f002 f876 	bl	80121d4 <_Balloc>
 80100e8:	9005      	str	r0, [sp, #20]
 80100ea:	2800      	cmp	r0, #0
 80100ec:	f43f af0c 	beq.w	800ff08 <_strtod_l+0x490>
 80100f0:	9b07      	ldr	r3, [sp, #28]
 80100f2:	691a      	ldr	r2, [r3, #16]
 80100f4:	3202      	adds	r2, #2
 80100f6:	f103 010c 	add.w	r1, r3, #12
 80100fa:	0092      	lsls	r2, r2, #2
 80100fc:	300c      	adds	r0, #12
 80100fe:	f7fe fc85 	bl	800ea0c <memcpy>
 8010102:	ec4b ab10 	vmov	d0, sl, fp
 8010106:	aa1a      	add	r2, sp, #104	; 0x68
 8010108:	a919      	add	r1, sp, #100	; 0x64
 801010a:	4620      	mov	r0, r4
 801010c:	f002 fc50 	bl	80129b0 <__d2b>
 8010110:	ec4b ab18 	vmov	d8, sl, fp
 8010114:	9018      	str	r0, [sp, #96]	; 0x60
 8010116:	2800      	cmp	r0, #0
 8010118:	f43f aef6 	beq.w	800ff08 <_strtod_l+0x490>
 801011c:	2101      	movs	r1, #1
 801011e:	4620      	mov	r0, r4
 8010120:	f002 f99a 	bl	8012458 <__i2b>
 8010124:	4606      	mov	r6, r0
 8010126:	2800      	cmp	r0, #0
 8010128:	f43f aeee 	beq.w	800ff08 <_strtod_l+0x490>
 801012c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801012e:	9904      	ldr	r1, [sp, #16]
 8010130:	2b00      	cmp	r3, #0
 8010132:	bfab      	itete	ge
 8010134:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010136:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010138:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801013a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801013e:	bfac      	ite	ge
 8010140:	eb03 0902 	addge.w	r9, r3, r2
 8010144:	1ad7      	sublt	r7, r2, r3
 8010146:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010148:	eba3 0801 	sub.w	r8, r3, r1
 801014c:	4490      	add	r8, r2
 801014e:	4ba1      	ldr	r3, [pc, #644]	; (80103d4 <_strtod_l+0x95c>)
 8010150:	f108 38ff 	add.w	r8, r8, #4294967295
 8010154:	4598      	cmp	r8, r3
 8010156:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801015a:	f280 80c7 	bge.w	80102ec <_strtod_l+0x874>
 801015e:	eba3 0308 	sub.w	r3, r3, r8
 8010162:	2b1f      	cmp	r3, #31
 8010164:	eba2 0203 	sub.w	r2, r2, r3
 8010168:	f04f 0101 	mov.w	r1, #1
 801016c:	f300 80b1 	bgt.w	80102d2 <_strtod_l+0x85a>
 8010170:	fa01 f303 	lsl.w	r3, r1, r3
 8010174:	930d      	str	r3, [sp, #52]	; 0x34
 8010176:	2300      	movs	r3, #0
 8010178:	9308      	str	r3, [sp, #32]
 801017a:	eb09 0802 	add.w	r8, r9, r2
 801017e:	9b04      	ldr	r3, [sp, #16]
 8010180:	45c1      	cmp	r9, r8
 8010182:	4417      	add	r7, r2
 8010184:	441f      	add	r7, r3
 8010186:	464b      	mov	r3, r9
 8010188:	bfa8      	it	ge
 801018a:	4643      	movge	r3, r8
 801018c:	42bb      	cmp	r3, r7
 801018e:	bfa8      	it	ge
 8010190:	463b      	movge	r3, r7
 8010192:	2b00      	cmp	r3, #0
 8010194:	bfc2      	ittt	gt
 8010196:	eba8 0803 	subgt.w	r8, r8, r3
 801019a:	1aff      	subgt	r7, r7, r3
 801019c:	eba9 0903 	subgt.w	r9, r9, r3
 80101a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	dd17      	ble.n	80101d6 <_strtod_l+0x75e>
 80101a6:	4631      	mov	r1, r6
 80101a8:	461a      	mov	r2, r3
 80101aa:	4620      	mov	r0, r4
 80101ac:	f002 fa14 	bl	80125d8 <__pow5mult>
 80101b0:	4606      	mov	r6, r0
 80101b2:	2800      	cmp	r0, #0
 80101b4:	f43f aea8 	beq.w	800ff08 <_strtod_l+0x490>
 80101b8:	4601      	mov	r1, r0
 80101ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80101bc:	4620      	mov	r0, r4
 80101be:	f002 f961 	bl	8012484 <__multiply>
 80101c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80101c4:	2800      	cmp	r0, #0
 80101c6:	f43f ae9f 	beq.w	800ff08 <_strtod_l+0x490>
 80101ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80101cc:	4620      	mov	r0, r4
 80101ce:	f002 f841 	bl	8012254 <_Bfree>
 80101d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101d4:	9318      	str	r3, [sp, #96]	; 0x60
 80101d6:	f1b8 0f00 	cmp.w	r8, #0
 80101da:	f300 808c 	bgt.w	80102f6 <_strtod_l+0x87e>
 80101de:	9b06      	ldr	r3, [sp, #24]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	dd08      	ble.n	80101f6 <_strtod_l+0x77e>
 80101e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80101e6:	9905      	ldr	r1, [sp, #20]
 80101e8:	4620      	mov	r0, r4
 80101ea:	f002 f9f5 	bl	80125d8 <__pow5mult>
 80101ee:	9005      	str	r0, [sp, #20]
 80101f0:	2800      	cmp	r0, #0
 80101f2:	f43f ae89 	beq.w	800ff08 <_strtod_l+0x490>
 80101f6:	2f00      	cmp	r7, #0
 80101f8:	dd08      	ble.n	801020c <_strtod_l+0x794>
 80101fa:	9905      	ldr	r1, [sp, #20]
 80101fc:	463a      	mov	r2, r7
 80101fe:	4620      	mov	r0, r4
 8010200:	f002 fa44 	bl	801268c <__lshift>
 8010204:	9005      	str	r0, [sp, #20]
 8010206:	2800      	cmp	r0, #0
 8010208:	f43f ae7e 	beq.w	800ff08 <_strtod_l+0x490>
 801020c:	f1b9 0f00 	cmp.w	r9, #0
 8010210:	dd08      	ble.n	8010224 <_strtod_l+0x7ac>
 8010212:	4631      	mov	r1, r6
 8010214:	464a      	mov	r2, r9
 8010216:	4620      	mov	r0, r4
 8010218:	f002 fa38 	bl	801268c <__lshift>
 801021c:	4606      	mov	r6, r0
 801021e:	2800      	cmp	r0, #0
 8010220:	f43f ae72 	beq.w	800ff08 <_strtod_l+0x490>
 8010224:	9a05      	ldr	r2, [sp, #20]
 8010226:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010228:	4620      	mov	r0, r4
 801022a:	f002 fabb 	bl	80127a4 <__mdiff>
 801022e:	4605      	mov	r5, r0
 8010230:	2800      	cmp	r0, #0
 8010232:	f43f ae69 	beq.w	800ff08 <_strtod_l+0x490>
 8010236:	68c3      	ldr	r3, [r0, #12]
 8010238:	930b      	str	r3, [sp, #44]	; 0x2c
 801023a:	2300      	movs	r3, #0
 801023c:	60c3      	str	r3, [r0, #12]
 801023e:	4631      	mov	r1, r6
 8010240:	f002 fa94 	bl	801276c <__mcmp>
 8010244:	2800      	cmp	r0, #0
 8010246:	da60      	bge.n	801030a <_strtod_l+0x892>
 8010248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801024a:	ea53 030a 	orrs.w	r3, r3, sl
 801024e:	f040 8082 	bne.w	8010356 <_strtod_l+0x8de>
 8010252:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010256:	2b00      	cmp	r3, #0
 8010258:	d17d      	bne.n	8010356 <_strtod_l+0x8de>
 801025a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801025e:	0d1b      	lsrs	r3, r3, #20
 8010260:	051b      	lsls	r3, r3, #20
 8010262:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010266:	d976      	bls.n	8010356 <_strtod_l+0x8de>
 8010268:	696b      	ldr	r3, [r5, #20]
 801026a:	b913      	cbnz	r3, 8010272 <_strtod_l+0x7fa>
 801026c:	692b      	ldr	r3, [r5, #16]
 801026e:	2b01      	cmp	r3, #1
 8010270:	dd71      	ble.n	8010356 <_strtod_l+0x8de>
 8010272:	4629      	mov	r1, r5
 8010274:	2201      	movs	r2, #1
 8010276:	4620      	mov	r0, r4
 8010278:	f002 fa08 	bl	801268c <__lshift>
 801027c:	4631      	mov	r1, r6
 801027e:	4605      	mov	r5, r0
 8010280:	f002 fa74 	bl	801276c <__mcmp>
 8010284:	2800      	cmp	r0, #0
 8010286:	dd66      	ble.n	8010356 <_strtod_l+0x8de>
 8010288:	9904      	ldr	r1, [sp, #16]
 801028a:	4a53      	ldr	r2, [pc, #332]	; (80103d8 <_strtod_l+0x960>)
 801028c:	465b      	mov	r3, fp
 801028e:	2900      	cmp	r1, #0
 8010290:	f000 8081 	beq.w	8010396 <_strtod_l+0x91e>
 8010294:	ea02 010b 	and.w	r1, r2, fp
 8010298:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801029c:	dc7b      	bgt.n	8010396 <_strtod_l+0x91e>
 801029e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80102a2:	f77f aea9 	ble.w	800fff8 <_strtod_l+0x580>
 80102a6:	4b4d      	ldr	r3, [pc, #308]	; (80103dc <_strtod_l+0x964>)
 80102a8:	4650      	mov	r0, sl
 80102aa:	4659      	mov	r1, fp
 80102ac:	2200      	movs	r2, #0
 80102ae:	f7f0 f9c3 	bl	8000638 <__aeabi_dmul>
 80102b2:	460b      	mov	r3, r1
 80102b4:	4303      	orrs	r3, r0
 80102b6:	bf08      	it	eq
 80102b8:	2322      	moveq	r3, #34	; 0x22
 80102ba:	4682      	mov	sl, r0
 80102bc:	468b      	mov	fp, r1
 80102be:	bf08      	it	eq
 80102c0:	6023      	streq	r3, [r4, #0]
 80102c2:	e62b      	b.n	800ff1c <_strtod_l+0x4a4>
 80102c4:	f04f 32ff 	mov.w	r2, #4294967295
 80102c8:	fa02 f303 	lsl.w	r3, r2, r3
 80102cc:	ea03 0a0a 	and.w	sl, r3, sl
 80102d0:	e6e3      	b.n	801009a <_strtod_l+0x622>
 80102d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80102d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80102da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80102de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80102e2:	fa01 f308 	lsl.w	r3, r1, r8
 80102e6:	9308      	str	r3, [sp, #32]
 80102e8:	910d      	str	r1, [sp, #52]	; 0x34
 80102ea:	e746      	b.n	801017a <_strtod_l+0x702>
 80102ec:	2300      	movs	r3, #0
 80102ee:	9308      	str	r3, [sp, #32]
 80102f0:	2301      	movs	r3, #1
 80102f2:	930d      	str	r3, [sp, #52]	; 0x34
 80102f4:	e741      	b.n	801017a <_strtod_l+0x702>
 80102f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80102f8:	4642      	mov	r2, r8
 80102fa:	4620      	mov	r0, r4
 80102fc:	f002 f9c6 	bl	801268c <__lshift>
 8010300:	9018      	str	r0, [sp, #96]	; 0x60
 8010302:	2800      	cmp	r0, #0
 8010304:	f47f af6b 	bne.w	80101de <_strtod_l+0x766>
 8010308:	e5fe      	b.n	800ff08 <_strtod_l+0x490>
 801030a:	465f      	mov	r7, fp
 801030c:	d16e      	bne.n	80103ec <_strtod_l+0x974>
 801030e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010310:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010314:	b342      	cbz	r2, 8010368 <_strtod_l+0x8f0>
 8010316:	4a32      	ldr	r2, [pc, #200]	; (80103e0 <_strtod_l+0x968>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d128      	bne.n	801036e <_strtod_l+0x8f6>
 801031c:	9b04      	ldr	r3, [sp, #16]
 801031e:	4651      	mov	r1, sl
 8010320:	b1eb      	cbz	r3, 801035e <_strtod_l+0x8e6>
 8010322:	4b2d      	ldr	r3, [pc, #180]	; (80103d8 <_strtod_l+0x960>)
 8010324:	403b      	ands	r3, r7
 8010326:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801032a:	f04f 32ff 	mov.w	r2, #4294967295
 801032e:	d819      	bhi.n	8010364 <_strtod_l+0x8ec>
 8010330:	0d1b      	lsrs	r3, r3, #20
 8010332:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010336:	fa02 f303 	lsl.w	r3, r2, r3
 801033a:	4299      	cmp	r1, r3
 801033c:	d117      	bne.n	801036e <_strtod_l+0x8f6>
 801033e:	4b29      	ldr	r3, [pc, #164]	; (80103e4 <_strtod_l+0x96c>)
 8010340:	429f      	cmp	r7, r3
 8010342:	d102      	bne.n	801034a <_strtod_l+0x8d2>
 8010344:	3101      	adds	r1, #1
 8010346:	f43f addf 	beq.w	800ff08 <_strtod_l+0x490>
 801034a:	4b23      	ldr	r3, [pc, #140]	; (80103d8 <_strtod_l+0x960>)
 801034c:	403b      	ands	r3, r7
 801034e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010352:	f04f 0a00 	mov.w	sl, #0
 8010356:	9b04      	ldr	r3, [sp, #16]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1a4      	bne.n	80102a6 <_strtod_l+0x82e>
 801035c:	e5de      	b.n	800ff1c <_strtod_l+0x4a4>
 801035e:	f04f 33ff 	mov.w	r3, #4294967295
 8010362:	e7ea      	b.n	801033a <_strtod_l+0x8c2>
 8010364:	4613      	mov	r3, r2
 8010366:	e7e8      	b.n	801033a <_strtod_l+0x8c2>
 8010368:	ea53 030a 	orrs.w	r3, r3, sl
 801036c:	d08c      	beq.n	8010288 <_strtod_l+0x810>
 801036e:	9b08      	ldr	r3, [sp, #32]
 8010370:	b1db      	cbz	r3, 80103aa <_strtod_l+0x932>
 8010372:	423b      	tst	r3, r7
 8010374:	d0ef      	beq.n	8010356 <_strtod_l+0x8de>
 8010376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010378:	9a04      	ldr	r2, [sp, #16]
 801037a:	4650      	mov	r0, sl
 801037c:	4659      	mov	r1, fp
 801037e:	b1c3      	cbz	r3, 80103b2 <_strtod_l+0x93a>
 8010380:	f7ff fb5d 	bl	800fa3e <sulp>
 8010384:	4602      	mov	r2, r0
 8010386:	460b      	mov	r3, r1
 8010388:	ec51 0b18 	vmov	r0, r1, d8
 801038c:	f7ef ff9e 	bl	80002cc <__adddf3>
 8010390:	4682      	mov	sl, r0
 8010392:	468b      	mov	fp, r1
 8010394:	e7df      	b.n	8010356 <_strtod_l+0x8de>
 8010396:	4013      	ands	r3, r2
 8010398:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801039c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80103a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80103a4:	f04f 3aff 	mov.w	sl, #4294967295
 80103a8:	e7d5      	b.n	8010356 <_strtod_l+0x8de>
 80103aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103ac:	ea13 0f0a 	tst.w	r3, sl
 80103b0:	e7e0      	b.n	8010374 <_strtod_l+0x8fc>
 80103b2:	f7ff fb44 	bl	800fa3e <sulp>
 80103b6:	4602      	mov	r2, r0
 80103b8:	460b      	mov	r3, r1
 80103ba:	ec51 0b18 	vmov	r0, r1, d8
 80103be:	f7ef ff83 	bl	80002c8 <__aeabi_dsub>
 80103c2:	2200      	movs	r2, #0
 80103c4:	2300      	movs	r3, #0
 80103c6:	4682      	mov	sl, r0
 80103c8:	468b      	mov	fp, r1
 80103ca:	f7f0 fb9d 	bl	8000b08 <__aeabi_dcmpeq>
 80103ce:	2800      	cmp	r0, #0
 80103d0:	d0c1      	beq.n	8010356 <_strtod_l+0x8de>
 80103d2:	e611      	b.n	800fff8 <_strtod_l+0x580>
 80103d4:	fffffc02 	.word	0xfffffc02
 80103d8:	7ff00000 	.word	0x7ff00000
 80103dc:	39500000 	.word	0x39500000
 80103e0:	000fffff 	.word	0x000fffff
 80103e4:	7fefffff 	.word	0x7fefffff
 80103e8:	08015360 	.word	0x08015360
 80103ec:	4631      	mov	r1, r6
 80103ee:	4628      	mov	r0, r5
 80103f0:	f002 fb3a 	bl	8012a68 <__ratio>
 80103f4:	ec59 8b10 	vmov	r8, r9, d0
 80103f8:	ee10 0a10 	vmov	r0, s0
 80103fc:	2200      	movs	r2, #0
 80103fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010402:	4649      	mov	r1, r9
 8010404:	f7f0 fb94 	bl	8000b30 <__aeabi_dcmple>
 8010408:	2800      	cmp	r0, #0
 801040a:	d07a      	beq.n	8010502 <_strtod_l+0xa8a>
 801040c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801040e:	2b00      	cmp	r3, #0
 8010410:	d04a      	beq.n	80104a8 <_strtod_l+0xa30>
 8010412:	4b95      	ldr	r3, [pc, #596]	; (8010668 <_strtod_l+0xbf0>)
 8010414:	2200      	movs	r2, #0
 8010416:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801041a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010668 <_strtod_l+0xbf0>
 801041e:	f04f 0800 	mov.w	r8, #0
 8010422:	4b92      	ldr	r3, [pc, #584]	; (801066c <_strtod_l+0xbf4>)
 8010424:	403b      	ands	r3, r7
 8010426:	930d      	str	r3, [sp, #52]	; 0x34
 8010428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801042a:	4b91      	ldr	r3, [pc, #580]	; (8010670 <_strtod_l+0xbf8>)
 801042c:	429a      	cmp	r2, r3
 801042e:	f040 80b0 	bne.w	8010592 <_strtod_l+0xb1a>
 8010432:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010436:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801043a:	ec4b ab10 	vmov	d0, sl, fp
 801043e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010442:	f002 fa39 	bl	80128b8 <__ulp>
 8010446:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801044a:	ec53 2b10 	vmov	r2, r3, d0
 801044e:	f7f0 f8f3 	bl	8000638 <__aeabi_dmul>
 8010452:	4652      	mov	r2, sl
 8010454:	465b      	mov	r3, fp
 8010456:	f7ef ff39 	bl	80002cc <__adddf3>
 801045a:	460b      	mov	r3, r1
 801045c:	4983      	ldr	r1, [pc, #524]	; (801066c <_strtod_l+0xbf4>)
 801045e:	4a85      	ldr	r2, [pc, #532]	; (8010674 <_strtod_l+0xbfc>)
 8010460:	4019      	ands	r1, r3
 8010462:	4291      	cmp	r1, r2
 8010464:	4682      	mov	sl, r0
 8010466:	d960      	bls.n	801052a <_strtod_l+0xab2>
 8010468:	ee18 3a90 	vmov	r3, s17
 801046c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010470:	4293      	cmp	r3, r2
 8010472:	d104      	bne.n	801047e <_strtod_l+0xa06>
 8010474:	ee18 3a10 	vmov	r3, s16
 8010478:	3301      	adds	r3, #1
 801047a:	f43f ad45 	beq.w	800ff08 <_strtod_l+0x490>
 801047e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010680 <_strtod_l+0xc08>
 8010482:	f04f 3aff 	mov.w	sl, #4294967295
 8010486:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010488:	4620      	mov	r0, r4
 801048a:	f001 fee3 	bl	8012254 <_Bfree>
 801048e:	9905      	ldr	r1, [sp, #20]
 8010490:	4620      	mov	r0, r4
 8010492:	f001 fedf 	bl	8012254 <_Bfree>
 8010496:	4631      	mov	r1, r6
 8010498:	4620      	mov	r0, r4
 801049a:	f001 fedb 	bl	8012254 <_Bfree>
 801049e:	4629      	mov	r1, r5
 80104a0:	4620      	mov	r0, r4
 80104a2:	f001 fed7 	bl	8012254 <_Bfree>
 80104a6:	e61a      	b.n	80100de <_strtod_l+0x666>
 80104a8:	f1ba 0f00 	cmp.w	sl, #0
 80104ac:	d11b      	bne.n	80104e6 <_strtod_l+0xa6e>
 80104ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104b2:	b9f3      	cbnz	r3, 80104f2 <_strtod_l+0xa7a>
 80104b4:	4b6c      	ldr	r3, [pc, #432]	; (8010668 <_strtod_l+0xbf0>)
 80104b6:	2200      	movs	r2, #0
 80104b8:	4640      	mov	r0, r8
 80104ba:	4649      	mov	r1, r9
 80104bc:	f7f0 fb2e 	bl	8000b1c <__aeabi_dcmplt>
 80104c0:	b9d0      	cbnz	r0, 80104f8 <_strtod_l+0xa80>
 80104c2:	4640      	mov	r0, r8
 80104c4:	4649      	mov	r1, r9
 80104c6:	4b6c      	ldr	r3, [pc, #432]	; (8010678 <_strtod_l+0xc00>)
 80104c8:	2200      	movs	r2, #0
 80104ca:	f7f0 f8b5 	bl	8000638 <__aeabi_dmul>
 80104ce:	4680      	mov	r8, r0
 80104d0:	4689      	mov	r9, r1
 80104d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80104d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80104da:	9315      	str	r3, [sp, #84]	; 0x54
 80104dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80104e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80104e4:	e79d      	b.n	8010422 <_strtod_l+0x9aa>
 80104e6:	f1ba 0f01 	cmp.w	sl, #1
 80104ea:	d102      	bne.n	80104f2 <_strtod_l+0xa7a>
 80104ec:	2f00      	cmp	r7, #0
 80104ee:	f43f ad83 	beq.w	800fff8 <_strtod_l+0x580>
 80104f2:	4b62      	ldr	r3, [pc, #392]	; (801067c <_strtod_l+0xc04>)
 80104f4:	2200      	movs	r2, #0
 80104f6:	e78e      	b.n	8010416 <_strtod_l+0x99e>
 80104f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010678 <_strtod_l+0xc00>
 80104fc:	f04f 0800 	mov.w	r8, #0
 8010500:	e7e7      	b.n	80104d2 <_strtod_l+0xa5a>
 8010502:	4b5d      	ldr	r3, [pc, #372]	; (8010678 <_strtod_l+0xc00>)
 8010504:	4640      	mov	r0, r8
 8010506:	4649      	mov	r1, r9
 8010508:	2200      	movs	r2, #0
 801050a:	f7f0 f895 	bl	8000638 <__aeabi_dmul>
 801050e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010510:	4680      	mov	r8, r0
 8010512:	4689      	mov	r9, r1
 8010514:	b933      	cbnz	r3, 8010524 <_strtod_l+0xaac>
 8010516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801051a:	900e      	str	r0, [sp, #56]	; 0x38
 801051c:	930f      	str	r3, [sp, #60]	; 0x3c
 801051e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010522:	e7dd      	b.n	80104e0 <_strtod_l+0xa68>
 8010524:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010528:	e7f9      	b.n	801051e <_strtod_l+0xaa6>
 801052a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801052e:	9b04      	ldr	r3, [sp, #16]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d1a8      	bne.n	8010486 <_strtod_l+0xa0e>
 8010534:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010538:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801053a:	0d1b      	lsrs	r3, r3, #20
 801053c:	051b      	lsls	r3, r3, #20
 801053e:	429a      	cmp	r2, r3
 8010540:	d1a1      	bne.n	8010486 <_strtod_l+0xa0e>
 8010542:	4640      	mov	r0, r8
 8010544:	4649      	mov	r1, r9
 8010546:	f7f0 fbd7 	bl	8000cf8 <__aeabi_d2lz>
 801054a:	f7f0 f847 	bl	80005dc <__aeabi_l2d>
 801054e:	4602      	mov	r2, r0
 8010550:	460b      	mov	r3, r1
 8010552:	4640      	mov	r0, r8
 8010554:	4649      	mov	r1, r9
 8010556:	f7ef feb7 	bl	80002c8 <__aeabi_dsub>
 801055a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801055c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010560:	ea43 030a 	orr.w	r3, r3, sl
 8010564:	4313      	orrs	r3, r2
 8010566:	4680      	mov	r8, r0
 8010568:	4689      	mov	r9, r1
 801056a:	d055      	beq.n	8010618 <_strtod_l+0xba0>
 801056c:	a336      	add	r3, pc, #216	; (adr r3, 8010648 <_strtod_l+0xbd0>)
 801056e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010572:	f7f0 fad3 	bl	8000b1c <__aeabi_dcmplt>
 8010576:	2800      	cmp	r0, #0
 8010578:	f47f acd0 	bne.w	800ff1c <_strtod_l+0x4a4>
 801057c:	a334      	add	r3, pc, #208	; (adr r3, 8010650 <_strtod_l+0xbd8>)
 801057e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010582:	4640      	mov	r0, r8
 8010584:	4649      	mov	r1, r9
 8010586:	f7f0 fae7 	bl	8000b58 <__aeabi_dcmpgt>
 801058a:	2800      	cmp	r0, #0
 801058c:	f43f af7b 	beq.w	8010486 <_strtod_l+0xa0e>
 8010590:	e4c4      	b.n	800ff1c <_strtod_l+0x4a4>
 8010592:	9b04      	ldr	r3, [sp, #16]
 8010594:	b333      	cbz	r3, 80105e4 <_strtod_l+0xb6c>
 8010596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010598:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801059c:	d822      	bhi.n	80105e4 <_strtod_l+0xb6c>
 801059e:	a32e      	add	r3, pc, #184	; (adr r3, 8010658 <_strtod_l+0xbe0>)
 80105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a4:	4640      	mov	r0, r8
 80105a6:	4649      	mov	r1, r9
 80105a8:	f7f0 fac2 	bl	8000b30 <__aeabi_dcmple>
 80105ac:	b1a0      	cbz	r0, 80105d8 <_strtod_l+0xb60>
 80105ae:	4649      	mov	r1, r9
 80105b0:	4640      	mov	r0, r8
 80105b2:	f7f0 fb19 	bl	8000be8 <__aeabi_d2uiz>
 80105b6:	2801      	cmp	r0, #1
 80105b8:	bf38      	it	cc
 80105ba:	2001      	movcc	r0, #1
 80105bc:	f7ef ffc2 	bl	8000544 <__aeabi_ui2d>
 80105c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105c2:	4680      	mov	r8, r0
 80105c4:	4689      	mov	r9, r1
 80105c6:	bb23      	cbnz	r3, 8010612 <_strtod_l+0xb9a>
 80105c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105cc:	9010      	str	r0, [sp, #64]	; 0x40
 80105ce:	9311      	str	r3, [sp, #68]	; 0x44
 80105d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80105d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80105d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80105dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80105e0:	1a9b      	subs	r3, r3, r2
 80105e2:	9309      	str	r3, [sp, #36]	; 0x24
 80105e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80105e8:	eeb0 0a48 	vmov.f32	s0, s16
 80105ec:	eef0 0a68 	vmov.f32	s1, s17
 80105f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80105f4:	f002 f960 	bl	80128b8 <__ulp>
 80105f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80105fc:	ec53 2b10 	vmov	r2, r3, d0
 8010600:	f7f0 f81a 	bl	8000638 <__aeabi_dmul>
 8010604:	ec53 2b18 	vmov	r2, r3, d8
 8010608:	f7ef fe60 	bl	80002cc <__adddf3>
 801060c:	4682      	mov	sl, r0
 801060e:	468b      	mov	fp, r1
 8010610:	e78d      	b.n	801052e <_strtod_l+0xab6>
 8010612:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010616:	e7db      	b.n	80105d0 <_strtod_l+0xb58>
 8010618:	a311      	add	r3, pc, #68	; (adr r3, 8010660 <_strtod_l+0xbe8>)
 801061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061e:	f7f0 fa7d 	bl	8000b1c <__aeabi_dcmplt>
 8010622:	e7b2      	b.n	801058a <_strtod_l+0xb12>
 8010624:	2300      	movs	r3, #0
 8010626:	930a      	str	r3, [sp, #40]	; 0x28
 8010628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801062a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801062c:	6013      	str	r3, [r2, #0]
 801062e:	f7ff ba6b 	b.w	800fb08 <_strtod_l+0x90>
 8010632:	2a65      	cmp	r2, #101	; 0x65
 8010634:	f43f ab5f 	beq.w	800fcf6 <_strtod_l+0x27e>
 8010638:	2a45      	cmp	r2, #69	; 0x45
 801063a:	f43f ab5c 	beq.w	800fcf6 <_strtod_l+0x27e>
 801063e:	2301      	movs	r3, #1
 8010640:	f7ff bb94 	b.w	800fd6c <_strtod_l+0x2f4>
 8010644:	f3af 8000 	nop.w
 8010648:	94a03595 	.word	0x94a03595
 801064c:	3fdfffff 	.word	0x3fdfffff
 8010650:	35afe535 	.word	0x35afe535
 8010654:	3fe00000 	.word	0x3fe00000
 8010658:	ffc00000 	.word	0xffc00000
 801065c:	41dfffff 	.word	0x41dfffff
 8010660:	94a03595 	.word	0x94a03595
 8010664:	3fcfffff 	.word	0x3fcfffff
 8010668:	3ff00000 	.word	0x3ff00000
 801066c:	7ff00000 	.word	0x7ff00000
 8010670:	7fe00000 	.word	0x7fe00000
 8010674:	7c9fffff 	.word	0x7c9fffff
 8010678:	3fe00000 	.word	0x3fe00000
 801067c:	bff00000 	.word	0xbff00000
 8010680:	7fefffff 	.word	0x7fefffff

08010684 <_strtod_r>:
 8010684:	4b01      	ldr	r3, [pc, #4]	; (801068c <_strtod_r+0x8>)
 8010686:	f7ff b9f7 	b.w	800fa78 <_strtod_l>
 801068a:	bf00      	nop
 801068c:	20000178 	.word	0x20000178

08010690 <_strtol_l.constprop.0>:
 8010690:	2b01      	cmp	r3, #1
 8010692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010696:	d001      	beq.n	801069c <_strtol_l.constprop.0+0xc>
 8010698:	2b24      	cmp	r3, #36	; 0x24
 801069a:	d906      	bls.n	80106aa <_strtol_l.constprop.0+0x1a>
 801069c:	f7fe f98c 	bl	800e9b8 <__errno>
 80106a0:	2316      	movs	r3, #22
 80106a2:	6003      	str	r3, [r0, #0]
 80106a4:	2000      	movs	r0, #0
 80106a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010790 <_strtol_l.constprop.0+0x100>
 80106ae:	460d      	mov	r5, r1
 80106b0:	462e      	mov	r6, r5
 80106b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80106b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80106ba:	f017 0708 	ands.w	r7, r7, #8
 80106be:	d1f7      	bne.n	80106b0 <_strtol_l.constprop.0+0x20>
 80106c0:	2c2d      	cmp	r4, #45	; 0x2d
 80106c2:	d132      	bne.n	801072a <_strtol_l.constprop.0+0x9a>
 80106c4:	782c      	ldrb	r4, [r5, #0]
 80106c6:	2701      	movs	r7, #1
 80106c8:	1cb5      	adds	r5, r6, #2
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d05b      	beq.n	8010786 <_strtol_l.constprop.0+0xf6>
 80106ce:	2b10      	cmp	r3, #16
 80106d0:	d109      	bne.n	80106e6 <_strtol_l.constprop.0+0x56>
 80106d2:	2c30      	cmp	r4, #48	; 0x30
 80106d4:	d107      	bne.n	80106e6 <_strtol_l.constprop.0+0x56>
 80106d6:	782c      	ldrb	r4, [r5, #0]
 80106d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80106dc:	2c58      	cmp	r4, #88	; 0x58
 80106de:	d14d      	bne.n	801077c <_strtol_l.constprop.0+0xec>
 80106e0:	786c      	ldrb	r4, [r5, #1]
 80106e2:	2310      	movs	r3, #16
 80106e4:	3502      	adds	r5, #2
 80106e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80106ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80106ee:	f04f 0c00 	mov.w	ip, #0
 80106f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80106f6:	4666      	mov	r6, ip
 80106f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80106fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010700:	f1be 0f09 	cmp.w	lr, #9
 8010704:	d816      	bhi.n	8010734 <_strtol_l.constprop.0+0xa4>
 8010706:	4674      	mov	r4, lr
 8010708:	42a3      	cmp	r3, r4
 801070a:	dd24      	ble.n	8010756 <_strtol_l.constprop.0+0xc6>
 801070c:	f1bc 0f00 	cmp.w	ip, #0
 8010710:	db1e      	blt.n	8010750 <_strtol_l.constprop.0+0xc0>
 8010712:	45b1      	cmp	r9, r6
 8010714:	d31c      	bcc.n	8010750 <_strtol_l.constprop.0+0xc0>
 8010716:	d101      	bne.n	801071c <_strtol_l.constprop.0+0x8c>
 8010718:	45a2      	cmp	sl, r4
 801071a:	db19      	blt.n	8010750 <_strtol_l.constprop.0+0xc0>
 801071c:	fb06 4603 	mla	r6, r6, r3, r4
 8010720:	f04f 0c01 	mov.w	ip, #1
 8010724:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010728:	e7e8      	b.n	80106fc <_strtol_l.constprop.0+0x6c>
 801072a:	2c2b      	cmp	r4, #43	; 0x2b
 801072c:	bf04      	itt	eq
 801072e:	782c      	ldrbeq	r4, [r5, #0]
 8010730:	1cb5      	addeq	r5, r6, #2
 8010732:	e7ca      	b.n	80106ca <_strtol_l.constprop.0+0x3a>
 8010734:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010738:	f1be 0f19 	cmp.w	lr, #25
 801073c:	d801      	bhi.n	8010742 <_strtol_l.constprop.0+0xb2>
 801073e:	3c37      	subs	r4, #55	; 0x37
 8010740:	e7e2      	b.n	8010708 <_strtol_l.constprop.0+0x78>
 8010742:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010746:	f1be 0f19 	cmp.w	lr, #25
 801074a:	d804      	bhi.n	8010756 <_strtol_l.constprop.0+0xc6>
 801074c:	3c57      	subs	r4, #87	; 0x57
 801074e:	e7db      	b.n	8010708 <_strtol_l.constprop.0+0x78>
 8010750:	f04f 3cff 	mov.w	ip, #4294967295
 8010754:	e7e6      	b.n	8010724 <_strtol_l.constprop.0+0x94>
 8010756:	f1bc 0f00 	cmp.w	ip, #0
 801075a:	da05      	bge.n	8010768 <_strtol_l.constprop.0+0xd8>
 801075c:	2322      	movs	r3, #34	; 0x22
 801075e:	6003      	str	r3, [r0, #0]
 8010760:	4646      	mov	r6, r8
 8010762:	b942      	cbnz	r2, 8010776 <_strtol_l.constprop.0+0xe6>
 8010764:	4630      	mov	r0, r6
 8010766:	e79e      	b.n	80106a6 <_strtol_l.constprop.0+0x16>
 8010768:	b107      	cbz	r7, 801076c <_strtol_l.constprop.0+0xdc>
 801076a:	4276      	negs	r6, r6
 801076c:	2a00      	cmp	r2, #0
 801076e:	d0f9      	beq.n	8010764 <_strtol_l.constprop.0+0xd4>
 8010770:	f1bc 0f00 	cmp.w	ip, #0
 8010774:	d000      	beq.n	8010778 <_strtol_l.constprop.0+0xe8>
 8010776:	1e69      	subs	r1, r5, #1
 8010778:	6011      	str	r1, [r2, #0]
 801077a:	e7f3      	b.n	8010764 <_strtol_l.constprop.0+0xd4>
 801077c:	2430      	movs	r4, #48	; 0x30
 801077e:	2b00      	cmp	r3, #0
 8010780:	d1b1      	bne.n	80106e6 <_strtol_l.constprop.0+0x56>
 8010782:	2308      	movs	r3, #8
 8010784:	e7af      	b.n	80106e6 <_strtol_l.constprop.0+0x56>
 8010786:	2c30      	cmp	r4, #48	; 0x30
 8010788:	d0a5      	beq.n	80106d6 <_strtol_l.constprop.0+0x46>
 801078a:	230a      	movs	r3, #10
 801078c:	e7ab      	b.n	80106e6 <_strtol_l.constprop.0+0x56>
 801078e:	bf00      	nop
 8010790:	080151f9 	.word	0x080151f9

08010794 <_strtol_r>:
 8010794:	f7ff bf7c 	b.w	8010690 <_strtol_l.constprop.0>

08010798 <__swbuf_r>:
 8010798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801079a:	460e      	mov	r6, r1
 801079c:	4614      	mov	r4, r2
 801079e:	4605      	mov	r5, r0
 80107a0:	b118      	cbz	r0, 80107aa <__swbuf_r+0x12>
 80107a2:	6983      	ldr	r3, [r0, #24]
 80107a4:	b90b      	cbnz	r3, 80107aa <__swbuf_r+0x12>
 80107a6:	f001 f86f 	bl	8011888 <__sinit>
 80107aa:	4b21      	ldr	r3, [pc, #132]	; (8010830 <__swbuf_r+0x98>)
 80107ac:	429c      	cmp	r4, r3
 80107ae:	d12b      	bne.n	8010808 <__swbuf_r+0x70>
 80107b0:	686c      	ldr	r4, [r5, #4]
 80107b2:	69a3      	ldr	r3, [r4, #24]
 80107b4:	60a3      	str	r3, [r4, #8]
 80107b6:	89a3      	ldrh	r3, [r4, #12]
 80107b8:	071a      	lsls	r2, r3, #28
 80107ba:	d52f      	bpl.n	801081c <__swbuf_r+0x84>
 80107bc:	6923      	ldr	r3, [r4, #16]
 80107be:	b36b      	cbz	r3, 801081c <__swbuf_r+0x84>
 80107c0:	6923      	ldr	r3, [r4, #16]
 80107c2:	6820      	ldr	r0, [r4, #0]
 80107c4:	1ac0      	subs	r0, r0, r3
 80107c6:	6963      	ldr	r3, [r4, #20]
 80107c8:	b2f6      	uxtb	r6, r6
 80107ca:	4283      	cmp	r3, r0
 80107cc:	4637      	mov	r7, r6
 80107ce:	dc04      	bgt.n	80107da <__swbuf_r+0x42>
 80107d0:	4621      	mov	r1, r4
 80107d2:	4628      	mov	r0, r5
 80107d4:	f000 ffc4 	bl	8011760 <_fflush_r>
 80107d8:	bb30      	cbnz	r0, 8010828 <__swbuf_r+0x90>
 80107da:	68a3      	ldr	r3, [r4, #8]
 80107dc:	3b01      	subs	r3, #1
 80107de:	60a3      	str	r3, [r4, #8]
 80107e0:	6823      	ldr	r3, [r4, #0]
 80107e2:	1c5a      	adds	r2, r3, #1
 80107e4:	6022      	str	r2, [r4, #0]
 80107e6:	701e      	strb	r6, [r3, #0]
 80107e8:	6963      	ldr	r3, [r4, #20]
 80107ea:	3001      	adds	r0, #1
 80107ec:	4283      	cmp	r3, r0
 80107ee:	d004      	beq.n	80107fa <__swbuf_r+0x62>
 80107f0:	89a3      	ldrh	r3, [r4, #12]
 80107f2:	07db      	lsls	r3, r3, #31
 80107f4:	d506      	bpl.n	8010804 <__swbuf_r+0x6c>
 80107f6:	2e0a      	cmp	r6, #10
 80107f8:	d104      	bne.n	8010804 <__swbuf_r+0x6c>
 80107fa:	4621      	mov	r1, r4
 80107fc:	4628      	mov	r0, r5
 80107fe:	f000 ffaf 	bl	8011760 <_fflush_r>
 8010802:	b988      	cbnz	r0, 8010828 <__swbuf_r+0x90>
 8010804:	4638      	mov	r0, r7
 8010806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010808:	4b0a      	ldr	r3, [pc, #40]	; (8010834 <__swbuf_r+0x9c>)
 801080a:	429c      	cmp	r4, r3
 801080c:	d101      	bne.n	8010812 <__swbuf_r+0x7a>
 801080e:	68ac      	ldr	r4, [r5, #8]
 8010810:	e7cf      	b.n	80107b2 <__swbuf_r+0x1a>
 8010812:	4b09      	ldr	r3, [pc, #36]	; (8010838 <__swbuf_r+0xa0>)
 8010814:	429c      	cmp	r4, r3
 8010816:	bf08      	it	eq
 8010818:	68ec      	ldreq	r4, [r5, #12]
 801081a:	e7ca      	b.n	80107b2 <__swbuf_r+0x1a>
 801081c:	4621      	mov	r1, r4
 801081e:	4628      	mov	r0, r5
 8010820:	f000 f81e 	bl	8010860 <__swsetup_r>
 8010824:	2800      	cmp	r0, #0
 8010826:	d0cb      	beq.n	80107c0 <__swbuf_r+0x28>
 8010828:	f04f 37ff 	mov.w	r7, #4294967295
 801082c:	e7ea      	b.n	8010804 <__swbuf_r+0x6c>
 801082e:	bf00      	nop
 8010830:	08015438 	.word	0x08015438
 8010834:	08015458 	.word	0x08015458
 8010838:	08015418 	.word	0x08015418

0801083c <_write_r>:
 801083c:	b538      	push	{r3, r4, r5, lr}
 801083e:	4d07      	ldr	r5, [pc, #28]	; (801085c <_write_r+0x20>)
 8010840:	4604      	mov	r4, r0
 8010842:	4608      	mov	r0, r1
 8010844:	4611      	mov	r1, r2
 8010846:	2200      	movs	r2, #0
 8010848:	602a      	str	r2, [r5, #0]
 801084a:	461a      	mov	r2, r3
 801084c:	f7f3 fa0e 	bl	8003c6c <_write>
 8010850:	1c43      	adds	r3, r0, #1
 8010852:	d102      	bne.n	801085a <_write_r+0x1e>
 8010854:	682b      	ldr	r3, [r5, #0]
 8010856:	b103      	cbz	r3, 801085a <_write_r+0x1e>
 8010858:	6023      	str	r3, [r4, #0]
 801085a:	bd38      	pop	{r3, r4, r5, pc}
 801085c:	2000314c 	.word	0x2000314c

08010860 <__swsetup_r>:
 8010860:	4b32      	ldr	r3, [pc, #200]	; (801092c <__swsetup_r+0xcc>)
 8010862:	b570      	push	{r4, r5, r6, lr}
 8010864:	681d      	ldr	r5, [r3, #0]
 8010866:	4606      	mov	r6, r0
 8010868:	460c      	mov	r4, r1
 801086a:	b125      	cbz	r5, 8010876 <__swsetup_r+0x16>
 801086c:	69ab      	ldr	r3, [r5, #24]
 801086e:	b913      	cbnz	r3, 8010876 <__swsetup_r+0x16>
 8010870:	4628      	mov	r0, r5
 8010872:	f001 f809 	bl	8011888 <__sinit>
 8010876:	4b2e      	ldr	r3, [pc, #184]	; (8010930 <__swsetup_r+0xd0>)
 8010878:	429c      	cmp	r4, r3
 801087a:	d10f      	bne.n	801089c <__swsetup_r+0x3c>
 801087c:	686c      	ldr	r4, [r5, #4]
 801087e:	89a3      	ldrh	r3, [r4, #12]
 8010880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010884:	0719      	lsls	r1, r3, #28
 8010886:	d42c      	bmi.n	80108e2 <__swsetup_r+0x82>
 8010888:	06dd      	lsls	r5, r3, #27
 801088a:	d411      	bmi.n	80108b0 <__swsetup_r+0x50>
 801088c:	2309      	movs	r3, #9
 801088e:	6033      	str	r3, [r6, #0]
 8010890:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010894:	81a3      	strh	r3, [r4, #12]
 8010896:	f04f 30ff 	mov.w	r0, #4294967295
 801089a:	e03e      	b.n	801091a <__swsetup_r+0xba>
 801089c:	4b25      	ldr	r3, [pc, #148]	; (8010934 <__swsetup_r+0xd4>)
 801089e:	429c      	cmp	r4, r3
 80108a0:	d101      	bne.n	80108a6 <__swsetup_r+0x46>
 80108a2:	68ac      	ldr	r4, [r5, #8]
 80108a4:	e7eb      	b.n	801087e <__swsetup_r+0x1e>
 80108a6:	4b24      	ldr	r3, [pc, #144]	; (8010938 <__swsetup_r+0xd8>)
 80108a8:	429c      	cmp	r4, r3
 80108aa:	bf08      	it	eq
 80108ac:	68ec      	ldreq	r4, [r5, #12]
 80108ae:	e7e6      	b.n	801087e <__swsetup_r+0x1e>
 80108b0:	0758      	lsls	r0, r3, #29
 80108b2:	d512      	bpl.n	80108da <__swsetup_r+0x7a>
 80108b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108b6:	b141      	cbz	r1, 80108ca <__swsetup_r+0x6a>
 80108b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108bc:	4299      	cmp	r1, r3
 80108be:	d002      	beq.n	80108c6 <__swsetup_r+0x66>
 80108c0:	4630      	mov	r0, r6
 80108c2:	f002 f95f 	bl	8012b84 <_free_r>
 80108c6:	2300      	movs	r3, #0
 80108c8:	6363      	str	r3, [r4, #52]	; 0x34
 80108ca:	89a3      	ldrh	r3, [r4, #12]
 80108cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80108d0:	81a3      	strh	r3, [r4, #12]
 80108d2:	2300      	movs	r3, #0
 80108d4:	6063      	str	r3, [r4, #4]
 80108d6:	6923      	ldr	r3, [r4, #16]
 80108d8:	6023      	str	r3, [r4, #0]
 80108da:	89a3      	ldrh	r3, [r4, #12]
 80108dc:	f043 0308 	orr.w	r3, r3, #8
 80108e0:	81a3      	strh	r3, [r4, #12]
 80108e2:	6923      	ldr	r3, [r4, #16]
 80108e4:	b94b      	cbnz	r3, 80108fa <__swsetup_r+0x9a>
 80108e6:	89a3      	ldrh	r3, [r4, #12]
 80108e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80108ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108f0:	d003      	beq.n	80108fa <__swsetup_r+0x9a>
 80108f2:	4621      	mov	r1, r4
 80108f4:	4630      	mov	r0, r6
 80108f6:	f001 fc13 	bl	8012120 <__smakebuf_r>
 80108fa:	89a0      	ldrh	r0, [r4, #12]
 80108fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010900:	f010 0301 	ands.w	r3, r0, #1
 8010904:	d00a      	beq.n	801091c <__swsetup_r+0xbc>
 8010906:	2300      	movs	r3, #0
 8010908:	60a3      	str	r3, [r4, #8]
 801090a:	6963      	ldr	r3, [r4, #20]
 801090c:	425b      	negs	r3, r3
 801090e:	61a3      	str	r3, [r4, #24]
 8010910:	6923      	ldr	r3, [r4, #16]
 8010912:	b943      	cbnz	r3, 8010926 <__swsetup_r+0xc6>
 8010914:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010918:	d1ba      	bne.n	8010890 <__swsetup_r+0x30>
 801091a:	bd70      	pop	{r4, r5, r6, pc}
 801091c:	0781      	lsls	r1, r0, #30
 801091e:	bf58      	it	pl
 8010920:	6963      	ldrpl	r3, [r4, #20]
 8010922:	60a3      	str	r3, [r4, #8]
 8010924:	e7f4      	b.n	8010910 <__swsetup_r+0xb0>
 8010926:	2000      	movs	r0, #0
 8010928:	e7f7      	b.n	801091a <__swsetup_r+0xba>
 801092a:	bf00      	nop
 801092c:	20000110 	.word	0x20000110
 8010930:	08015438 	.word	0x08015438
 8010934:	08015458 	.word	0x08015458
 8010938:	08015418 	.word	0x08015418

0801093c <_close_r>:
 801093c:	b538      	push	{r3, r4, r5, lr}
 801093e:	4d06      	ldr	r5, [pc, #24]	; (8010958 <_close_r+0x1c>)
 8010940:	2300      	movs	r3, #0
 8010942:	4604      	mov	r4, r0
 8010944:	4608      	mov	r0, r1
 8010946:	602b      	str	r3, [r5, #0]
 8010948:	f7f3 fcf7 	bl	800433a <_close>
 801094c:	1c43      	adds	r3, r0, #1
 801094e:	d102      	bne.n	8010956 <_close_r+0x1a>
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	b103      	cbz	r3, 8010956 <_close_r+0x1a>
 8010954:	6023      	str	r3, [r4, #0]
 8010956:	bd38      	pop	{r3, r4, r5, pc}
 8010958:	2000314c 	.word	0x2000314c

0801095c <quorem>:
 801095c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010960:	6903      	ldr	r3, [r0, #16]
 8010962:	690c      	ldr	r4, [r1, #16]
 8010964:	42a3      	cmp	r3, r4
 8010966:	4607      	mov	r7, r0
 8010968:	f2c0 8081 	blt.w	8010a6e <quorem+0x112>
 801096c:	3c01      	subs	r4, #1
 801096e:	f101 0814 	add.w	r8, r1, #20
 8010972:	f100 0514 	add.w	r5, r0, #20
 8010976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801097a:	9301      	str	r3, [sp, #4]
 801097c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010980:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010984:	3301      	adds	r3, #1
 8010986:	429a      	cmp	r2, r3
 8010988:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801098c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010990:	fbb2 f6f3 	udiv	r6, r2, r3
 8010994:	d331      	bcc.n	80109fa <quorem+0x9e>
 8010996:	f04f 0e00 	mov.w	lr, #0
 801099a:	4640      	mov	r0, r8
 801099c:	46ac      	mov	ip, r5
 801099e:	46f2      	mov	sl, lr
 80109a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80109a4:	b293      	uxth	r3, r2
 80109a6:	fb06 e303 	mla	r3, r6, r3, lr
 80109aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	ebaa 0303 	sub.w	r3, sl, r3
 80109b4:	f8dc a000 	ldr.w	sl, [ip]
 80109b8:	0c12      	lsrs	r2, r2, #16
 80109ba:	fa13 f38a 	uxtah	r3, r3, sl
 80109be:	fb06 e202 	mla	r2, r6, r2, lr
 80109c2:	9300      	str	r3, [sp, #0]
 80109c4:	9b00      	ldr	r3, [sp, #0]
 80109c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80109ca:	b292      	uxth	r2, r2
 80109cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80109d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80109d8:	4581      	cmp	r9, r0
 80109da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109de:	f84c 3b04 	str.w	r3, [ip], #4
 80109e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80109e6:	d2db      	bcs.n	80109a0 <quorem+0x44>
 80109e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80109ec:	b92b      	cbnz	r3, 80109fa <quorem+0x9e>
 80109ee:	9b01      	ldr	r3, [sp, #4]
 80109f0:	3b04      	subs	r3, #4
 80109f2:	429d      	cmp	r5, r3
 80109f4:	461a      	mov	r2, r3
 80109f6:	d32e      	bcc.n	8010a56 <quorem+0xfa>
 80109f8:	613c      	str	r4, [r7, #16]
 80109fa:	4638      	mov	r0, r7
 80109fc:	f001 feb6 	bl	801276c <__mcmp>
 8010a00:	2800      	cmp	r0, #0
 8010a02:	db24      	blt.n	8010a4e <quorem+0xf2>
 8010a04:	3601      	adds	r6, #1
 8010a06:	4628      	mov	r0, r5
 8010a08:	f04f 0c00 	mov.w	ip, #0
 8010a0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010a10:	f8d0 e000 	ldr.w	lr, [r0]
 8010a14:	b293      	uxth	r3, r2
 8010a16:	ebac 0303 	sub.w	r3, ip, r3
 8010a1a:	0c12      	lsrs	r2, r2, #16
 8010a1c:	fa13 f38e 	uxtah	r3, r3, lr
 8010a20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010a24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a2e:	45c1      	cmp	r9, r8
 8010a30:	f840 3b04 	str.w	r3, [r0], #4
 8010a34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010a38:	d2e8      	bcs.n	8010a0c <quorem+0xb0>
 8010a3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a42:	b922      	cbnz	r2, 8010a4e <quorem+0xf2>
 8010a44:	3b04      	subs	r3, #4
 8010a46:	429d      	cmp	r5, r3
 8010a48:	461a      	mov	r2, r3
 8010a4a:	d30a      	bcc.n	8010a62 <quorem+0x106>
 8010a4c:	613c      	str	r4, [r7, #16]
 8010a4e:	4630      	mov	r0, r6
 8010a50:	b003      	add	sp, #12
 8010a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a56:	6812      	ldr	r2, [r2, #0]
 8010a58:	3b04      	subs	r3, #4
 8010a5a:	2a00      	cmp	r2, #0
 8010a5c:	d1cc      	bne.n	80109f8 <quorem+0x9c>
 8010a5e:	3c01      	subs	r4, #1
 8010a60:	e7c7      	b.n	80109f2 <quorem+0x96>
 8010a62:	6812      	ldr	r2, [r2, #0]
 8010a64:	3b04      	subs	r3, #4
 8010a66:	2a00      	cmp	r2, #0
 8010a68:	d1f0      	bne.n	8010a4c <quorem+0xf0>
 8010a6a:	3c01      	subs	r4, #1
 8010a6c:	e7eb      	b.n	8010a46 <quorem+0xea>
 8010a6e:	2000      	movs	r0, #0
 8010a70:	e7ee      	b.n	8010a50 <quorem+0xf4>
 8010a72:	0000      	movs	r0, r0
 8010a74:	0000      	movs	r0, r0
	...

08010a78 <_dtoa_r>:
 8010a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a7c:	ed2d 8b04 	vpush	{d8-d9}
 8010a80:	ec57 6b10 	vmov	r6, r7, d0
 8010a84:	b093      	sub	sp, #76	; 0x4c
 8010a86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010a88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010a8c:	9106      	str	r1, [sp, #24]
 8010a8e:	ee10 aa10 	vmov	sl, s0
 8010a92:	4604      	mov	r4, r0
 8010a94:	9209      	str	r2, [sp, #36]	; 0x24
 8010a96:	930c      	str	r3, [sp, #48]	; 0x30
 8010a98:	46bb      	mov	fp, r7
 8010a9a:	b975      	cbnz	r5, 8010aba <_dtoa_r+0x42>
 8010a9c:	2010      	movs	r0, #16
 8010a9e:	f001 fb7f 	bl	80121a0 <malloc>
 8010aa2:	4602      	mov	r2, r0
 8010aa4:	6260      	str	r0, [r4, #36]	; 0x24
 8010aa6:	b920      	cbnz	r0, 8010ab2 <_dtoa_r+0x3a>
 8010aa8:	4ba7      	ldr	r3, [pc, #668]	; (8010d48 <_dtoa_r+0x2d0>)
 8010aaa:	21ea      	movs	r1, #234	; 0xea
 8010aac:	48a7      	ldr	r0, [pc, #668]	; (8010d4c <_dtoa_r+0x2d4>)
 8010aae:	f003 f857 	bl	8013b60 <__assert_func>
 8010ab2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010ab6:	6005      	str	r5, [r0, #0]
 8010ab8:	60c5      	str	r5, [r0, #12]
 8010aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010abc:	6819      	ldr	r1, [r3, #0]
 8010abe:	b151      	cbz	r1, 8010ad6 <_dtoa_r+0x5e>
 8010ac0:	685a      	ldr	r2, [r3, #4]
 8010ac2:	604a      	str	r2, [r1, #4]
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	4093      	lsls	r3, r2
 8010ac8:	608b      	str	r3, [r1, #8]
 8010aca:	4620      	mov	r0, r4
 8010acc:	f001 fbc2 	bl	8012254 <_Bfree>
 8010ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	601a      	str	r2, [r3, #0]
 8010ad6:	1e3b      	subs	r3, r7, #0
 8010ad8:	bfaa      	itet	ge
 8010ada:	2300      	movge	r3, #0
 8010adc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010ae0:	f8c8 3000 	strge.w	r3, [r8]
 8010ae4:	4b9a      	ldr	r3, [pc, #616]	; (8010d50 <_dtoa_r+0x2d8>)
 8010ae6:	bfbc      	itt	lt
 8010ae8:	2201      	movlt	r2, #1
 8010aea:	f8c8 2000 	strlt.w	r2, [r8]
 8010aee:	ea33 030b 	bics.w	r3, r3, fp
 8010af2:	d11b      	bne.n	8010b2c <_dtoa_r+0xb4>
 8010af4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010af6:	f242 730f 	movw	r3, #9999	; 0x270f
 8010afa:	6013      	str	r3, [r2, #0]
 8010afc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b00:	4333      	orrs	r3, r6
 8010b02:	f000 8592 	beq.w	801162a <_dtoa_r+0xbb2>
 8010b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b08:	b963      	cbnz	r3, 8010b24 <_dtoa_r+0xac>
 8010b0a:	4b92      	ldr	r3, [pc, #584]	; (8010d54 <_dtoa_r+0x2dc>)
 8010b0c:	e022      	b.n	8010b54 <_dtoa_r+0xdc>
 8010b0e:	4b92      	ldr	r3, [pc, #584]	; (8010d58 <_dtoa_r+0x2e0>)
 8010b10:	9301      	str	r3, [sp, #4]
 8010b12:	3308      	adds	r3, #8
 8010b14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b16:	6013      	str	r3, [r2, #0]
 8010b18:	9801      	ldr	r0, [sp, #4]
 8010b1a:	b013      	add	sp, #76	; 0x4c
 8010b1c:	ecbd 8b04 	vpop	{d8-d9}
 8010b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b24:	4b8b      	ldr	r3, [pc, #556]	; (8010d54 <_dtoa_r+0x2dc>)
 8010b26:	9301      	str	r3, [sp, #4]
 8010b28:	3303      	adds	r3, #3
 8010b2a:	e7f3      	b.n	8010b14 <_dtoa_r+0x9c>
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	2300      	movs	r3, #0
 8010b30:	4650      	mov	r0, sl
 8010b32:	4659      	mov	r1, fp
 8010b34:	f7ef ffe8 	bl	8000b08 <__aeabi_dcmpeq>
 8010b38:	ec4b ab19 	vmov	d9, sl, fp
 8010b3c:	4680      	mov	r8, r0
 8010b3e:	b158      	cbz	r0, 8010b58 <_dtoa_r+0xe0>
 8010b40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b42:	2301      	movs	r3, #1
 8010b44:	6013      	str	r3, [r2, #0]
 8010b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f000 856b 	beq.w	8011624 <_dtoa_r+0xbac>
 8010b4e:	4883      	ldr	r0, [pc, #524]	; (8010d5c <_dtoa_r+0x2e4>)
 8010b50:	6018      	str	r0, [r3, #0]
 8010b52:	1e43      	subs	r3, r0, #1
 8010b54:	9301      	str	r3, [sp, #4]
 8010b56:	e7df      	b.n	8010b18 <_dtoa_r+0xa0>
 8010b58:	ec4b ab10 	vmov	d0, sl, fp
 8010b5c:	aa10      	add	r2, sp, #64	; 0x40
 8010b5e:	a911      	add	r1, sp, #68	; 0x44
 8010b60:	4620      	mov	r0, r4
 8010b62:	f001 ff25 	bl	80129b0 <__d2b>
 8010b66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010b6a:	ee08 0a10 	vmov	s16, r0
 8010b6e:	2d00      	cmp	r5, #0
 8010b70:	f000 8084 	beq.w	8010c7c <_dtoa_r+0x204>
 8010b74:	ee19 3a90 	vmov	r3, s19
 8010b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010b80:	4656      	mov	r6, sl
 8010b82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010b86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010b8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010b8e:	4b74      	ldr	r3, [pc, #464]	; (8010d60 <_dtoa_r+0x2e8>)
 8010b90:	2200      	movs	r2, #0
 8010b92:	4630      	mov	r0, r6
 8010b94:	4639      	mov	r1, r7
 8010b96:	f7ef fb97 	bl	80002c8 <__aeabi_dsub>
 8010b9a:	a365      	add	r3, pc, #404	; (adr r3, 8010d30 <_dtoa_r+0x2b8>)
 8010b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba0:	f7ef fd4a 	bl	8000638 <__aeabi_dmul>
 8010ba4:	a364      	add	r3, pc, #400	; (adr r3, 8010d38 <_dtoa_r+0x2c0>)
 8010ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010baa:	f7ef fb8f 	bl	80002cc <__adddf3>
 8010bae:	4606      	mov	r6, r0
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	460f      	mov	r7, r1
 8010bb4:	f7ef fcd6 	bl	8000564 <__aeabi_i2d>
 8010bb8:	a361      	add	r3, pc, #388	; (adr r3, 8010d40 <_dtoa_r+0x2c8>)
 8010bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bbe:	f7ef fd3b 	bl	8000638 <__aeabi_dmul>
 8010bc2:	4602      	mov	r2, r0
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	4639      	mov	r1, r7
 8010bca:	f7ef fb7f 	bl	80002cc <__adddf3>
 8010bce:	4606      	mov	r6, r0
 8010bd0:	460f      	mov	r7, r1
 8010bd2:	f7ef ffe1 	bl	8000b98 <__aeabi_d2iz>
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	9000      	str	r0, [sp, #0]
 8010bda:	2300      	movs	r3, #0
 8010bdc:	4630      	mov	r0, r6
 8010bde:	4639      	mov	r1, r7
 8010be0:	f7ef ff9c 	bl	8000b1c <__aeabi_dcmplt>
 8010be4:	b150      	cbz	r0, 8010bfc <_dtoa_r+0x184>
 8010be6:	9800      	ldr	r0, [sp, #0]
 8010be8:	f7ef fcbc 	bl	8000564 <__aeabi_i2d>
 8010bec:	4632      	mov	r2, r6
 8010bee:	463b      	mov	r3, r7
 8010bf0:	f7ef ff8a 	bl	8000b08 <__aeabi_dcmpeq>
 8010bf4:	b910      	cbnz	r0, 8010bfc <_dtoa_r+0x184>
 8010bf6:	9b00      	ldr	r3, [sp, #0]
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	9300      	str	r3, [sp, #0]
 8010bfc:	9b00      	ldr	r3, [sp, #0]
 8010bfe:	2b16      	cmp	r3, #22
 8010c00:	d85a      	bhi.n	8010cb8 <_dtoa_r+0x240>
 8010c02:	9a00      	ldr	r2, [sp, #0]
 8010c04:	4b57      	ldr	r3, [pc, #348]	; (8010d64 <_dtoa_r+0x2ec>)
 8010c06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0e:	ec51 0b19 	vmov	r0, r1, d9
 8010c12:	f7ef ff83 	bl	8000b1c <__aeabi_dcmplt>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	d050      	beq.n	8010cbc <_dtoa_r+0x244>
 8010c1a:	9b00      	ldr	r3, [sp, #0]
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	9300      	str	r3, [sp, #0]
 8010c20:	2300      	movs	r3, #0
 8010c22:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c26:	1b5d      	subs	r5, r3, r5
 8010c28:	1e6b      	subs	r3, r5, #1
 8010c2a:	9305      	str	r3, [sp, #20]
 8010c2c:	bf45      	ittet	mi
 8010c2e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010c32:	9304      	strmi	r3, [sp, #16]
 8010c34:	2300      	movpl	r3, #0
 8010c36:	2300      	movmi	r3, #0
 8010c38:	bf4c      	ite	mi
 8010c3a:	9305      	strmi	r3, [sp, #20]
 8010c3c:	9304      	strpl	r3, [sp, #16]
 8010c3e:	9b00      	ldr	r3, [sp, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	db3d      	blt.n	8010cc0 <_dtoa_r+0x248>
 8010c44:	9b05      	ldr	r3, [sp, #20]
 8010c46:	9a00      	ldr	r2, [sp, #0]
 8010c48:	920a      	str	r2, [sp, #40]	; 0x28
 8010c4a:	4413      	add	r3, r2
 8010c4c:	9305      	str	r3, [sp, #20]
 8010c4e:	2300      	movs	r3, #0
 8010c50:	9307      	str	r3, [sp, #28]
 8010c52:	9b06      	ldr	r3, [sp, #24]
 8010c54:	2b09      	cmp	r3, #9
 8010c56:	f200 8089 	bhi.w	8010d6c <_dtoa_r+0x2f4>
 8010c5a:	2b05      	cmp	r3, #5
 8010c5c:	bfc4      	itt	gt
 8010c5e:	3b04      	subgt	r3, #4
 8010c60:	9306      	strgt	r3, [sp, #24]
 8010c62:	9b06      	ldr	r3, [sp, #24]
 8010c64:	f1a3 0302 	sub.w	r3, r3, #2
 8010c68:	bfcc      	ite	gt
 8010c6a:	2500      	movgt	r5, #0
 8010c6c:	2501      	movle	r5, #1
 8010c6e:	2b03      	cmp	r3, #3
 8010c70:	f200 8087 	bhi.w	8010d82 <_dtoa_r+0x30a>
 8010c74:	e8df f003 	tbb	[pc, r3]
 8010c78:	59383a2d 	.word	0x59383a2d
 8010c7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010c80:	441d      	add	r5, r3
 8010c82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010c86:	2b20      	cmp	r3, #32
 8010c88:	bfc1      	itttt	gt
 8010c8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010c8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010c92:	fa0b f303 	lslgt.w	r3, fp, r3
 8010c96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010c9a:	bfda      	itte	le
 8010c9c:	f1c3 0320 	rsble	r3, r3, #32
 8010ca0:	fa06 f003 	lslle.w	r0, r6, r3
 8010ca4:	4318      	orrgt	r0, r3
 8010ca6:	f7ef fc4d 	bl	8000544 <__aeabi_ui2d>
 8010caa:	2301      	movs	r3, #1
 8010cac:	4606      	mov	r6, r0
 8010cae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010cb2:	3d01      	subs	r5, #1
 8010cb4:	930e      	str	r3, [sp, #56]	; 0x38
 8010cb6:	e76a      	b.n	8010b8e <_dtoa_r+0x116>
 8010cb8:	2301      	movs	r3, #1
 8010cba:	e7b2      	b.n	8010c22 <_dtoa_r+0x1aa>
 8010cbc:	900b      	str	r0, [sp, #44]	; 0x2c
 8010cbe:	e7b1      	b.n	8010c24 <_dtoa_r+0x1ac>
 8010cc0:	9b04      	ldr	r3, [sp, #16]
 8010cc2:	9a00      	ldr	r2, [sp, #0]
 8010cc4:	1a9b      	subs	r3, r3, r2
 8010cc6:	9304      	str	r3, [sp, #16]
 8010cc8:	4253      	negs	r3, r2
 8010cca:	9307      	str	r3, [sp, #28]
 8010ccc:	2300      	movs	r3, #0
 8010cce:	930a      	str	r3, [sp, #40]	; 0x28
 8010cd0:	e7bf      	b.n	8010c52 <_dtoa_r+0x1da>
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	9308      	str	r3, [sp, #32]
 8010cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	dc55      	bgt.n	8010d88 <_dtoa_r+0x310>
 8010cdc:	2301      	movs	r3, #1
 8010cde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8010ce6:	e00c      	b.n	8010d02 <_dtoa_r+0x28a>
 8010ce8:	2301      	movs	r3, #1
 8010cea:	e7f3      	b.n	8010cd4 <_dtoa_r+0x25c>
 8010cec:	2300      	movs	r3, #0
 8010cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cf0:	9308      	str	r3, [sp, #32]
 8010cf2:	9b00      	ldr	r3, [sp, #0]
 8010cf4:	4413      	add	r3, r2
 8010cf6:	9302      	str	r3, [sp, #8]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	9303      	str	r3, [sp, #12]
 8010cfe:	bfb8      	it	lt
 8010d00:	2301      	movlt	r3, #1
 8010d02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010d04:	2200      	movs	r2, #0
 8010d06:	6042      	str	r2, [r0, #4]
 8010d08:	2204      	movs	r2, #4
 8010d0a:	f102 0614 	add.w	r6, r2, #20
 8010d0e:	429e      	cmp	r6, r3
 8010d10:	6841      	ldr	r1, [r0, #4]
 8010d12:	d93d      	bls.n	8010d90 <_dtoa_r+0x318>
 8010d14:	4620      	mov	r0, r4
 8010d16:	f001 fa5d 	bl	80121d4 <_Balloc>
 8010d1a:	9001      	str	r0, [sp, #4]
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	d13b      	bne.n	8010d98 <_dtoa_r+0x320>
 8010d20:	4b11      	ldr	r3, [pc, #68]	; (8010d68 <_dtoa_r+0x2f0>)
 8010d22:	4602      	mov	r2, r0
 8010d24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010d28:	e6c0      	b.n	8010aac <_dtoa_r+0x34>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	e7df      	b.n	8010cee <_dtoa_r+0x276>
 8010d2e:	bf00      	nop
 8010d30:	636f4361 	.word	0x636f4361
 8010d34:	3fd287a7 	.word	0x3fd287a7
 8010d38:	8b60c8b3 	.word	0x8b60c8b3
 8010d3c:	3fc68a28 	.word	0x3fc68a28
 8010d40:	509f79fb 	.word	0x509f79fb
 8010d44:	3fd34413 	.word	0x3fd34413
 8010d48:	08015395 	.word	0x08015395
 8010d4c:	080153ac 	.word	0x080153ac
 8010d50:	7ff00000 	.word	0x7ff00000
 8010d54:	08015391 	.word	0x08015391
 8010d58:	08015388 	.word	0x08015388
 8010d5c:	08015662 	.word	0x08015662
 8010d60:	3ff80000 	.word	0x3ff80000
 8010d64:	08015578 	.word	0x08015578
 8010d68:	08015407 	.word	0x08015407
 8010d6c:	2501      	movs	r5, #1
 8010d6e:	2300      	movs	r3, #0
 8010d70:	9306      	str	r3, [sp, #24]
 8010d72:	9508      	str	r5, [sp, #32]
 8010d74:	f04f 33ff 	mov.w	r3, #4294967295
 8010d78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	2312      	movs	r3, #18
 8010d80:	e7b0      	b.n	8010ce4 <_dtoa_r+0x26c>
 8010d82:	2301      	movs	r3, #1
 8010d84:	9308      	str	r3, [sp, #32]
 8010d86:	e7f5      	b.n	8010d74 <_dtoa_r+0x2fc>
 8010d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010d8e:	e7b8      	b.n	8010d02 <_dtoa_r+0x28a>
 8010d90:	3101      	adds	r1, #1
 8010d92:	6041      	str	r1, [r0, #4]
 8010d94:	0052      	lsls	r2, r2, #1
 8010d96:	e7b8      	b.n	8010d0a <_dtoa_r+0x292>
 8010d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d9a:	9a01      	ldr	r2, [sp, #4]
 8010d9c:	601a      	str	r2, [r3, #0]
 8010d9e:	9b03      	ldr	r3, [sp, #12]
 8010da0:	2b0e      	cmp	r3, #14
 8010da2:	f200 809d 	bhi.w	8010ee0 <_dtoa_r+0x468>
 8010da6:	2d00      	cmp	r5, #0
 8010da8:	f000 809a 	beq.w	8010ee0 <_dtoa_r+0x468>
 8010dac:	9b00      	ldr	r3, [sp, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	dd32      	ble.n	8010e18 <_dtoa_r+0x3a0>
 8010db2:	4ab7      	ldr	r2, [pc, #732]	; (8011090 <_dtoa_r+0x618>)
 8010db4:	f003 030f 	and.w	r3, r3, #15
 8010db8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010dbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010dc0:	9b00      	ldr	r3, [sp, #0]
 8010dc2:	05d8      	lsls	r0, r3, #23
 8010dc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010dc8:	d516      	bpl.n	8010df8 <_dtoa_r+0x380>
 8010dca:	4bb2      	ldr	r3, [pc, #712]	; (8011094 <_dtoa_r+0x61c>)
 8010dcc:	ec51 0b19 	vmov	r0, r1, d9
 8010dd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010dd4:	f7ef fd5a 	bl	800088c <__aeabi_ddiv>
 8010dd8:	f007 070f 	and.w	r7, r7, #15
 8010ddc:	4682      	mov	sl, r0
 8010dde:	468b      	mov	fp, r1
 8010de0:	2503      	movs	r5, #3
 8010de2:	4eac      	ldr	r6, [pc, #688]	; (8011094 <_dtoa_r+0x61c>)
 8010de4:	b957      	cbnz	r7, 8010dfc <_dtoa_r+0x384>
 8010de6:	4642      	mov	r2, r8
 8010de8:	464b      	mov	r3, r9
 8010dea:	4650      	mov	r0, sl
 8010dec:	4659      	mov	r1, fp
 8010dee:	f7ef fd4d 	bl	800088c <__aeabi_ddiv>
 8010df2:	4682      	mov	sl, r0
 8010df4:	468b      	mov	fp, r1
 8010df6:	e028      	b.n	8010e4a <_dtoa_r+0x3d2>
 8010df8:	2502      	movs	r5, #2
 8010dfa:	e7f2      	b.n	8010de2 <_dtoa_r+0x36a>
 8010dfc:	07f9      	lsls	r1, r7, #31
 8010dfe:	d508      	bpl.n	8010e12 <_dtoa_r+0x39a>
 8010e00:	4640      	mov	r0, r8
 8010e02:	4649      	mov	r1, r9
 8010e04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010e08:	f7ef fc16 	bl	8000638 <__aeabi_dmul>
 8010e0c:	3501      	adds	r5, #1
 8010e0e:	4680      	mov	r8, r0
 8010e10:	4689      	mov	r9, r1
 8010e12:	107f      	asrs	r7, r7, #1
 8010e14:	3608      	adds	r6, #8
 8010e16:	e7e5      	b.n	8010de4 <_dtoa_r+0x36c>
 8010e18:	f000 809b 	beq.w	8010f52 <_dtoa_r+0x4da>
 8010e1c:	9b00      	ldr	r3, [sp, #0]
 8010e1e:	4f9d      	ldr	r7, [pc, #628]	; (8011094 <_dtoa_r+0x61c>)
 8010e20:	425e      	negs	r6, r3
 8010e22:	4b9b      	ldr	r3, [pc, #620]	; (8011090 <_dtoa_r+0x618>)
 8010e24:	f006 020f 	and.w	r2, r6, #15
 8010e28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e30:	ec51 0b19 	vmov	r0, r1, d9
 8010e34:	f7ef fc00 	bl	8000638 <__aeabi_dmul>
 8010e38:	1136      	asrs	r6, r6, #4
 8010e3a:	4682      	mov	sl, r0
 8010e3c:	468b      	mov	fp, r1
 8010e3e:	2300      	movs	r3, #0
 8010e40:	2502      	movs	r5, #2
 8010e42:	2e00      	cmp	r6, #0
 8010e44:	d17a      	bne.n	8010f3c <_dtoa_r+0x4c4>
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d1d3      	bne.n	8010df2 <_dtoa_r+0x37a>
 8010e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	f000 8082 	beq.w	8010f56 <_dtoa_r+0x4de>
 8010e52:	4b91      	ldr	r3, [pc, #580]	; (8011098 <_dtoa_r+0x620>)
 8010e54:	2200      	movs	r2, #0
 8010e56:	4650      	mov	r0, sl
 8010e58:	4659      	mov	r1, fp
 8010e5a:	f7ef fe5f 	bl	8000b1c <__aeabi_dcmplt>
 8010e5e:	2800      	cmp	r0, #0
 8010e60:	d079      	beq.n	8010f56 <_dtoa_r+0x4de>
 8010e62:	9b03      	ldr	r3, [sp, #12]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d076      	beq.n	8010f56 <_dtoa_r+0x4de>
 8010e68:	9b02      	ldr	r3, [sp, #8]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	dd36      	ble.n	8010edc <_dtoa_r+0x464>
 8010e6e:	9b00      	ldr	r3, [sp, #0]
 8010e70:	4650      	mov	r0, sl
 8010e72:	4659      	mov	r1, fp
 8010e74:	1e5f      	subs	r7, r3, #1
 8010e76:	2200      	movs	r2, #0
 8010e78:	4b88      	ldr	r3, [pc, #544]	; (801109c <_dtoa_r+0x624>)
 8010e7a:	f7ef fbdd 	bl	8000638 <__aeabi_dmul>
 8010e7e:	9e02      	ldr	r6, [sp, #8]
 8010e80:	4682      	mov	sl, r0
 8010e82:	468b      	mov	fp, r1
 8010e84:	3501      	adds	r5, #1
 8010e86:	4628      	mov	r0, r5
 8010e88:	f7ef fb6c 	bl	8000564 <__aeabi_i2d>
 8010e8c:	4652      	mov	r2, sl
 8010e8e:	465b      	mov	r3, fp
 8010e90:	f7ef fbd2 	bl	8000638 <__aeabi_dmul>
 8010e94:	4b82      	ldr	r3, [pc, #520]	; (80110a0 <_dtoa_r+0x628>)
 8010e96:	2200      	movs	r2, #0
 8010e98:	f7ef fa18 	bl	80002cc <__adddf3>
 8010e9c:	46d0      	mov	r8, sl
 8010e9e:	46d9      	mov	r9, fp
 8010ea0:	4682      	mov	sl, r0
 8010ea2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010ea6:	2e00      	cmp	r6, #0
 8010ea8:	d158      	bne.n	8010f5c <_dtoa_r+0x4e4>
 8010eaa:	4b7e      	ldr	r3, [pc, #504]	; (80110a4 <_dtoa_r+0x62c>)
 8010eac:	2200      	movs	r2, #0
 8010eae:	4640      	mov	r0, r8
 8010eb0:	4649      	mov	r1, r9
 8010eb2:	f7ef fa09 	bl	80002c8 <__aeabi_dsub>
 8010eb6:	4652      	mov	r2, sl
 8010eb8:	465b      	mov	r3, fp
 8010eba:	4680      	mov	r8, r0
 8010ebc:	4689      	mov	r9, r1
 8010ebe:	f7ef fe4b 	bl	8000b58 <__aeabi_dcmpgt>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	f040 8295 	bne.w	80113f2 <_dtoa_r+0x97a>
 8010ec8:	4652      	mov	r2, sl
 8010eca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010ece:	4640      	mov	r0, r8
 8010ed0:	4649      	mov	r1, r9
 8010ed2:	f7ef fe23 	bl	8000b1c <__aeabi_dcmplt>
 8010ed6:	2800      	cmp	r0, #0
 8010ed8:	f040 8289 	bne.w	80113ee <_dtoa_r+0x976>
 8010edc:	ec5b ab19 	vmov	sl, fp, d9
 8010ee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	f2c0 8148 	blt.w	8011178 <_dtoa_r+0x700>
 8010ee8:	9a00      	ldr	r2, [sp, #0]
 8010eea:	2a0e      	cmp	r2, #14
 8010eec:	f300 8144 	bgt.w	8011178 <_dtoa_r+0x700>
 8010ef0:	4b67      	ldr	r3, [pc, #412]	; (8011090 <_dtoa_r+0x618>)
 8010ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ef6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	f280 80d5 	bge.w	80110ac <_dtoa_r+0x634>
 8010f02:	9b03      	ldr	r3, [sp, #12]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	f300 80d1 	bgt.w	80110ac <_dtoa_r+0x634>
 8010f0a:	f040 826f 	bne.w	80113ec <_dtoa_r+0x974>
 8010f0e:	4b65      	ldr	r3, [pc, #404]	; (80110a4 <_dtoa_r+0x62c>)
 8010f10:	2200      	movs	r2, #0
 8010f12:	4640      	mov	r0, r8
 8010f14:	4649      	mov	r1, r9
 8010f16:	f7ef fb8f 	bl	8000638 <__aeabi_dmul>
 8010f1a:	4652      	mov	r2, sl
 8010f1c:	465b      	mov	r3, fp
 8010f1e:	f7ef fe11 	bl	8000b44 <__aeabi_dcmpge>
 8010f22:	9e03      	ldr	r6, [sp, #12]
 8010f24:	4637      	mov	r7, r6
 8010f26:	2800      	cmp	r0, #0
 8010f28:	f040 8245 	bne.w	80113b6 <_dtoa_r+0x93e>
 8010f2c:	9d01      	ldr	r5, [sp, #4]
 8010f2e:	2331      	movs	r3, #49	; 0x31
 8010f30:	f805 3b01 	strb.w	r3, [r5], #1
 8010f34:	9b00      	ldr	r3, [sp, #0]
 8010f36:	3301      	adds	r3, #1
 8010f38:	9300      	str	r3, [sp, #0]
 8010f3a:	e240      	b.n	80113be <_dtoa_r+0x946>
 8010f3c:	07f2      	lsls	r2, r6, #31
 8010f3e:	d505      	bpl.n	8010f4c <_dtoa_r+0x4d4>
 8010f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f44:	f7ef fb78 	bl	8000638 <__aeabi_dmul>
 8010f48:	3501      	adds	r5, #1
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	1076      	asrs	r6, r6, #1
 8010f4e:	3708      	adds	r7, #8
 8010f50:	e777      	b.n	8010e42 <_dtoa_r+0x3ca>
 8010f52:	2502      	movs	r5, #2
 8010f54:	e779      	b.n	8010e4a <_dtoa_r+0x3d2>
 8010f56:	9f00      	ldr	r7, [sp, #0]
 8010f58:	9e03      	ldr	r6, [sp, #12]
 8010f5a:	e794      	b.n	8010e86 <_dtoa_r+0x40e>
 8010f5c:	9901      	ldr	r1, [sp, #4]
 8010f5e:	4b4c      	ldr	r3, [pc, #304]	; (8011090 <_dtoa_r+0x618>)
 8010f60:	4431      	add	r1, r6
 8010f62:	910d      	str	r1, [sp, #52]	; 0x34
 8010f64:	9908      	ldr	r1, [sp, #32]
 8010f66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010f6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010f6e:	2900      	cmp	r1, #0
 8010f70:	d043      	beq.n	8010ffa <_dtoa_r+0x582>
 8010f72:	494d      	ldr	r1, [pc, #308]	; (80110a8 <_dtoa_r+0x630>)
 8010f74:	2000      	movs	r0, #0
 8010f76:	f7ef fc89 	bl	800088c <__aeabi_ddiv>
 8010f7a:	4652      	mov	r2, sl
 8010f7c:	465b      	mov	r3, fp
 8010f7e:	f7ef f9a3 	bl	80002c8 <__aeabi_dsub>
 8010f82:	9d01      	ldr	r5, [sp, #4]
 8010f84:	4682      	mov	sl, r0
 8010f86:	468b      	mov	fp, r1
 8010f88:	4649      	mov	r1, r9
 8010f8a:	4640      	mov	r0, r8
 8010f8c:	f7ef fe04 	bl	8000b98 <__aeabi_d2iz>
 8010f90:	4606      	mov	r6, r0
 8010f92:	f7ef fae7 	bl	8000564 <__aeabi_i2d>
 8010f96:	4602      	mov	r2, r0
 8010f98:	460b      	mov	r3, r1
 8010f9a:	4640      	mov	r0, r8
 8010f9c:	4649      	mov	r1, r9
 8010f9e:	f7ef f993 	bl	80002c8 <__aeabi_dsub>
 8010fa2:	3630      	adds	r6, #48	; 0x30
 8010fa4:	f805 6b01 	strb.w	r6, [r5], #1
 8010fa8:	4652      	mov	r2, sl
 8010faa:	465b      	mov	r3, fp
 8010fac:	4680      	mov	r8, r0
 8010fae:	4689      	mov	r9, r1
 8010fb0:	f7ef fdb4 	bl	8000b1c <__aeabi_dcmplt>
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	d163      	bne.n	8011080 <_dtoa_r+0x608>
 8010fb8:	4642      	mov	r2, r8
 8010fba:	464b      	mov	r3, r9
 8010fbc:	4936      	ldr	r1, [pc, #216]	; (8011098 <_dtoa_r+0x620>)
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	f7ef f982 	bl	80002c8 <__aeabi_dsub>
 8010fc4:	4652      	mov	r2, sl
 8010fc6:	465b      	mov	r3, fp
 8010fc8:	f7ef fda8 	bl	8000b1c <__aeabi_dcmplt>
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	f040 80b5 	bne.w	801113c <_dtoa_r+0x6c4>
 8010fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fd4:	429d      	cmp	r5, r3
 8010fd6:	d081      	beq.n	8010edc <_dtoa_r+0x464>
 8010fd8:	4b30      	ldr	r3, [pc, #192]	; (801109c <_dtoa_r+0x624>)
 8010fda:	2200      	movs	r2, #0
 8010fdc:	4650      	mov	r0, sl
 8010fde:	4659      	mov	r1, fp
 8010fe0:	f7ef fb2a 	bl	8000638 <__aeabi_dmul>
 8010fe4:	4b2d      	ldr	r3, [pc, #180]	; (801109c <_dtoa_r+0x624>)
 8010fe6:	4682      	mov	sl, r0
 8010fe8:	468b      	mov	fp, r1
 8010fea:	4640      	mov	r0, r8
 8010fec:	4649      	mov	r1, r9
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f7ef fb22 	bl	8000638 <__aeabi_dmul>
 8010ff4:	4680      	mov	r8, r0
 8010ff6:	4689      	mov	r9, r1
 8010ff8:	e7c6      	b.n	8010f88 <_dtoa_r+0x510>
 8010ffa:	4650      	mov	r0, sl
 8010ffc:	4659      	mov	r1, fp
 8010ffe:	f7ef fb1b 	bl	8000638 <__aeabi_dmul>
 8011002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011004:	9d01      	ldr	r5, [sp, #4]
 8011006:	930f      	str	r3, [sp, #60]	; 0x3c
 8011008:	4682      	mov	sl, r0
 801100a:	468b      	mov	fp, r1
 801100c:	4649      	mov	r1, r9
 801100e:	4640      	mov	r0, r8
 8011010:	f7ef fdc2 	bl	8000b98 <__aeabi_d2iz>
 8011014:	4606      	mov	r6, r0
 8011016:	f7ef faa5 	bl	8000564 <__aeabi_i2d>
 801101a:	3630      	adds	r6, #48	; 0x30
 801101c:	4602      	mov	r2, r0
 801101e:	460b      	mov	r3, r1
 8011020:	4640      	mov	r0, r8
 8011022:	4649      	mov	r1, r9
 8011024:	f7ef f950 	bl	80002c8 <__aeabi_dsub>
 8011028:	f805 6b01 	strb.w	r6, [r5], #1
 801102c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801102e:	429d      	cmp	r5, r3
 8011030:	4680      	mov	r8, r0
 8011032:	4689      	mov	r9, r1
 8011034:	f04f 0200 	mov.w	r2, #0
 8011038:	d124      	bne.n	8011084 <_dtoa_r+0x60c>
 801103a:	4b1b      	ldr	r3, [pc, #108]	; (80110a8 <_dtoa_r+0x630>)
 801103c:	4650      	mov	r0, sl
 801103e:	4659      	mov	r1, fp
 8011040:	f7ef f944 	bl	80002cc <__adddf3>
 8011044:	4602      	mov	r2, r0
 8011046:	460b      	mov	r3, r1
 8011048:	4640      	mov	r0, r8
 801104a:	4649      	mov	r1, r9
 801104c:	f7ef fd84 	bl	8000b58 <__aeabi_dcmpgt>
 8011050:	2800      	cmp	r0, #0
 8011052:	d173      	bne.n	801113c <_dtoa_r+0x6c4>
 8011054:	4652      	mov	r2, sl
 8011056:	465b      	mov	r3, fp
 8011058:	4913      	ldr	r1, [pc, #76]	; (80110a8 <_dtoa_r+0x630>)
 801105a:	2000      	movs	r0, #0
 801105c:	f7ef f934 	bl	80002c8 <__aeabi_dsub>
 8011060:	4602      	mov	r2, r0
 8011062:	460b      	mov	r3, r1
 8011064:	4640      	mov	r0, r8
 8011066:	4649      	mov	r1, r9
 8011068:	f7ef fd58 	bl	8000b1c <__aeabi_dcmplt>
 801106c:	2800      	cmp	r0, #0
 801106e:	f43f af35 	beq.w	8010edc <_dtoa_r+0x464>
 8011072:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011074:	1e6b      	subs	r3, r5, #1
 8011076:	930f      	str	r3, [sp, #60]	; 0x3c
 8011078:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801107c:	2b30      	cmp	r3, #48	; 0x30
 801107e:	d0f8      	beq.n	8011072 <_dtoa_r+0x5fa>
 8011080:	9700      	str	r7, [sp, #0]
 8011082:	e049      	b.n	8011118 <_dtoa_r+0x6a0>
 8011084:	4b05      	ldr	r3, [pc, #20]	; (801109c <_dtoa_r+0x624>)
 8011086:	f7ef fad7 	bl	8000638 <__aeabi_dmul>
 801108a:	4680      	mov	r8, r0
 801108c:	4689      	mov	r9, r1
 801108e:	e7bd      	b.n	801100c <_dtoa_r+0x594>
 8011090:	08015578 	.word	0x08015578
 8011094:	08015550 	.word	0x08015550
 8011098:	3ff00000 	.word	0x3ff00000
 801109c:	40240000 	.word	0x40240000
 80110a0:	401c0000 	.word	0x401c0000
 80110a4:	40140000 	.word	0x40140000
 80110a8:	3fe00000 	.word	0x3fe00000
 80110ac:	9d01      	ldr	r5, [sp, #4]
 80110ae:	4656      	mov	r6, sl
 80110b0:	465f      	mov	r7, fp
 80110b2:	4642      	mov	r2, r8
 80110b4:	464b      	mov	r3, r9
 80110b6:	4630      	mov	r0, r6
 80110b8:	4639      	mov	r1, r7
 80110ba:	f7ef fbe7 	bl	800088c <__aeabi_ddiv>
 80110be:	f7ef fd6b 	bl	8000b98 <__aeabi_d2iz>
 80110c2:	4682      	mov	sl, r0
 80110c4:	f7ef fa4e 	bl	8000564 <__aeabi_i2d>
 80110c8:	4642      	mov	r2, r8
 80110ca:	464b      	mov	r3, r9
 80110cc:	f7ef fab4 	bl	8000638 <__aeabi_dmul>
 80110d0:	4602      	mov	r2, r0
 80110d2:	460b      	mov	r3, r1
 80110d4:	4630      	mov	r0, r6
 80110d6:	4639      	mov	r1, r7
 80110d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80110dc:	f7ef f8f4 	bl	80002c8 <__aeabi_dsub>
 80110e0:	f805 6b01 	strb.w	r6, [r5], #1
 80110e4:	9e01      	ldr	r6, [sp, #4]
 80110e6:	9f03      	ldr	r7, [sp, #12]
 80110e8:	1bae      	subs	r6, r5, r6
 80110ea:	42b7      	cmp	r7, r6
 80110ec:	4602      	mov	r2, r0
 80110ee:	460b      	mov	r3, r1
 80110f0:	d135      	bne.n	801115e <_dtoa_r+0x6e6>
 80110f2:	f7ef f8eb 	bl	80002cc <__adddf3>
 80110f6:	4642      	mov	r2, r8
 80110f8:	464b      	mov	r3, r9
 80110fa:	4606      	mov	r6, r0
 80110fc:	460f      	mov	r7, r1
 80110fe:	f7ef fd2b 	bl	8000b58 <__aeabi_dcmpgt>
 8011102:	b9d0      	cbnz	r0, 801113a <_dtoa_r+0x6c2>
 8011104:	4642      	mov	r2, r8
 8011106:	464b      	mov	r3, r9
 8011108:	4630      	mov	r0, r6
 801110a:	4639      	mov	r1, r7
 801110c:	f7ef fcfc 	bl	8000b08 <__aeabi_dcmpeq>
 8011110:	b110      	cbz	r0, 8011118 <_dtoa_r+0x6a0>
 8011112:	f01a 0f01 	tst.w	sl, #1
 8011116:	d110      	bne.n	801113a <_dtoa_r+0x6c2>
 8011118:	4620      	mov	r0, r4
 801111a:	ee18 1a10 	vmov	r1, s16
 801111e:	f001 f899 	bl	8012254 <_Bfree>
 8011122:	2300      	movs	r3, #0
 8011124:	9800      	ldr	r0, [sp, #0]
 8011126:	702b      	strb	r3, [r5, #0]
 8011128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801112a:	3001      	adds	r0, #1
 801112c:	6018      	str	r0, [r3, #0]
 801112e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011130:	2b00      	cmp	r3, #0
 8011132:	f43f acf1 	beq.w	8010b18 <_dtoa_r+0xa0>
 8011136:	601d      	str	r5, [r3, #0]
 8011138:	e4ee      	b.n	8010b18 <_dtoa_r+0xa0>
 801113a:	9f00      	ldr	r7, [sp, #0]
 801113c:	462b      	mov	r3, r5
 801113e:	461d      	mov	r5, r3
 8011140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011144:	2a39      	cmp	r2, #57	; 0x39
 8011146:	d106      	bne.n	8011156 <_dtoa_r+0x6de>
 8011148:	9a01      	ldr	r2, [sp, #4]
 801114a:	429a      	cmp	r2, r3
 801114c:	d1f7      	bne.n	801113e <_dtoa_r+0x6c6>
 801114e:	9901      	ldr	r1, [sp, #4]
 8011150:	2230      	movs	r2, #48	; 0x30
 8011152:	3701      	adds	r7, #1
 8011154:	700a      	strb	r2, [r1, #0]
 8011156:	781a      	ldrb	r2, [r3, #0]
 8011158:	3201      	adds	r2, #1
 801115a:	701a      	strb	r2, [r3, #0]
 801115c:	e790      	b.n	8011080 <_dtoa_r+0x608>
 801115e:	4ba6      	ldr	r3, [pc, #664]	; (80113f8 <_dtoa_r+0x980>)
 8011160:	2200      	movs	r2, #0
 8011162:	f7ef fa69 	bl	8000638 <__aeabi_dmul>
 8011166:	2200      	movs	r2, #0
 8011168:	2300      	movs	r3, #0
 801116a:	4606      	mov	r6, r0
 801116c:	460f      	mov	r7, r1
 801116e:	f7ef fccb 	bl	8000b08 <__aeabi_dcmpeq>
 8011172:	2800      	cmp	r0, #0
 8011174:	d09d      	beq.n	80110b2 <_dtoa_r+0x63a>
 8011176:	e7cf      	b.n	8011118 <_dtoa_r+0x6a0>
 8011178:	9a08      	ldr	r2, [sp, #32]
 801117a:	2a00      	cmp	r2, #0
 801117c:	f000 80d7 	beq.w	801132e <_dtoa_r+0x8b6>
 8011180:	9a06      	ldr	r2, [sp, #24]
 8011182:	2a01      	cmp	r2, #1
 8011184:	f300 80ba 	bgt.w	80112fc <_dtoa_r+0x884>
 8011188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801118a:	2a00      	cmp	r2, #0
 801118c:	f000 80b2 	beq.w	80112f4 <_dtoa_r+0x87c>
 8011190:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011194:	9e07      	ldr	r6, [sp, #28]
 8011196:	9d04      	ldr	r5, [sp, #16]
 8011198:	9a04      	ldr	r2, [sp, #16]
 801119a:	441a      	add	r2, r3
 801119c:	9204      	str	r2, [sp, #16]
 801119e:	9a05      	ldr	r2, [sp, #20]
 80111a0:	2101      	movs	r1, #1
 80111a2:	441a      	add	r2, r3
 80111a4:	4620      	mov	r0, r4
 80111a6:	9205      	str	r2, [sp, #20]
 80111a8:	f001 f956 	bl	8012458 <__i2b>
 80111ac:	4607      	mov	r7, r0
 80111ae:	2d00      	cmp	r5, #0
 80111b0:	dd0c      	ble.n	80111cc <_dtoa_r+0x754>
 80111b2:	9b05      	ldr	r3, [sp, #20]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	dd09      	ble.n	80111cc <_dtoa_r+0x754>
 80111b8:	42ab      	cmp	r3, r5
 80111ba:	9a04      	ldr	r2, [sp, #16]
 80111bc:	bfa8      	it	ge
 80111be:	462b      	movge	r3, r5
 80111c0:	1ad2      	subs	r2, r2, r3
 80111c2:	9204      	str	r2, [sp, #16]
 80111c4:	9a05      	ldr	r2, [sp, #20]
 80111c6:	1aed      	subs	r5, r5, r3
 80111c8:	1ad3      	subs	r3, r2, r3
 80111ca:	9305      	str	r3, [sp, #20]
 80111cc:	9b07      	ldr	r3, [sp, #28]
 80111ce:	b31b      	cbz	r3, 8011218 <_dtoa_r+0x7a0>
 80111d0:	9b08      	ldr	r3, [sp, #32]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	f000 80af 	beq.w	8011336 <_dtoa_r+0x8be>
 80111d8:	2e00      	cmp	r6, #0
 80111da:	dd13      	ble.n	8011204 <_dtoa_r+0x78c>
 80111dc:	4639      	mov	r1, r7
 80111de:	4632      	mov	r2, r6
 80111e0:	4620      	mov	r0, r4
 80111e2:	f001 f9f9 	bl	80125d8 <__pow5mult>
 80111e6:	ee18 2a10 	vmov	r2, s16
 80111ea:	4601      	mov	r1, r0
 80111ec:	4607      	mov	r7, r0
 80111ee:	4620      	mov	r0, r4
 80111f0:	f001 f948 	bl	8012484 <__multiply>
 80111f4:	ee18 1a10 	vmov	r1, s16
 80111f8:	4680      	mov	r8, r0
 80111fa:	4620      	mov	r0, r4
 80111fc:	f001 f82a 	bl	8012254 <_Bfree>
 8011200:	ee08 8a10 	vmov	s16, r8
 8011204:	9b07      	ldr	r3, [sp, #28]
 8011206:	1b9a      	subs	r2, r3, r6
 8011208:	d006      	beq.n	8011218 <_dtoa_r+0x7a0>
 801120a:	ee18 1a10 	vmov	r1, s16
 801120e:	4620      	mov	r0, r4
 8011210:	f001 f9e2 	bl	80125d8 <__pow5mult>
 8011214:	ee08 0a10 	vmov	s16, r0
 8011218:	2101      	movs	r1, #1
 801121a:	4620      	mov	r0, r4
 801121c:	f001 f91c 	bl	8012458 <__i2b>
 8011220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011222:	2b00      	cmp	r3, #0
 8011224:	4606      	mov	r6, r0
 8011226:	f340 8088 	ble.w	801133a <_dtoa_r+0x8c2>
 801122a:	461a      	mov	r2, r3
 801122c:	4601      	mov	r1, r0
 801122e:	4620      	mov	r0, r4
 8011230:	f001 f9d2 	bl	80125d8 <__pow5mult>
 8011234:	9b06      	ldr	r3, [sp, #24]
 8011236:	2b01      	cmp	r3, #1
 8011238:	4606      	mov	r6, r0
 801123a:	f340 8081 	ble.w	8011340 <_dtoa_r+0x8c8>
 801123e:	f04f 0800 	mov.w	r8, #0
 8011242:	6933      	ldr	r3, [r6, #16]
 8011244:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011248:	6918      	ldr	r0, [r3, #16]
 801124a:	f001 f8b5 	bl	80123b8 <__hi0bits>
 801124e:	f1c0 0020 	rsb	r0, r0, #32
 8011252:	9b05      	ldr	r3, [sp, #20]
 8011254:	4418      	add	r0, r3
 8011256:	f010 001f 	ands.w	r0, r0, #31
 801125a:	f000 8092 	beq.w	8011382 <_dtoa_r+0x90a>
 801125e:	f1c0 0320 	rsb	r3, r0, #32
 8011262:	2b04      	cmp	r3, #4
 8011264:	f340 808a 	ble.w	801137c <_dtoa_r+0x904>
 8011268:	f1c0 001c 	rsb	r0, r0, #28
 801126c:	9b04      	ldr	r3, [sp, #16]
 801126e:	4403      	add	r3, r0
 8011270:	9304      	str	r3, [sp, #16]
 8011272:	9b05      	ldr	r3, [sp, #20]
 8011274:	4403      	add	r3, r0
 8011276:	4405      	add	r5, r0
 8011278:	9305      	str	r3, [sp, #20]
 801127a:	9b04      	ldr	r3, [sp, #16]
 801127c:	2b00      	cmp	r3, #0
 801127e:	dd07      	ble.n	8011290 <_dtoa_r+0x818>
 8011280:	ee18 1a10 	vmov	r1, s16
 8011284:	461a      	mov	r2, r3
 8011286:	4620      	mov	r0, r4
 8011288:	f001 fa00 	bl	801268c <__lshift>
 801128c:	ee08 0a10 	vmov	s16, r0
 8011290:	9b05      	ldr	r3, [sp, #20]
 8011292:	2b00      	cmp	r3, #0
 8011294:	dd05      	ble.n	80112a2 <_dtoa_r+0x82a>
 8011296:	4631      	mov	r1, r6
 8011298:	461a      	mov	r2, r3
 801129a:	4620      	mov	r0, r4
 801129c:	f001 f9f6 	bl	801268c <__lshift>
 80112a0:	4606      	mov	r6, r0
 80112a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d06e      	beq.n	8011386 <_dtoa_r+0x90e>
 80112a8:	ee18 0a10 	vmov	r0, s16
 80112ac:	4631      	mov	r1, r6
 80112ae:	f001 fa5d 	bl	801276c <__mcmp>
 80112b2:	2800      	cmp	r0, #0
 80112b4:	da67      	bge.n	8011386 <_dtoa_r+0x90e>
 80112b6:	9b00      	ldr	r3, [sp, #0]
 80112b8:	3b01      	subs	r3, #1
 80112ba:	ee18 1a10 	vmov	r1, s16
 80112be:	9300      	str	r3, [sp, #0]
 80112c0:	220a      	movs	r2, #10
 80112c2:	2300      	movs	r3, #0
 80112c4:	4620      	mov	r0, r4
 80112c6:	f000 ffe7 	bl	8012298 <__multadd>
 80112ca:	9b08      	ldr	r3, [sp, #32]
 80112cc:	ee08 0a10 	vmov	s16, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	f000 81b1 	beq.w	8011638 <_dtoa_r+0xbc0>
 80112d6:	2300      	movs	r3, #0
 80112d8:	4639      	mov	r1, r7
 80112da:	220a      	movs	r2, #10
 80112dc:	4620      	mov	r0, r4
 80112de:	f000 ffdb 	bl	8012298 <__multadd>
 80112e2:	9b02      	ldr	r3, [sp, #8]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	4607      	mov	r7, r0
 80112e8:	f300 808e 	bgt.w	8011408 <_dtoa_r+0x990>
 80112ec:	9b06      	ldr	r3, [sp, #24]
 80112ee:	2b02      	cmp	r3, #2
 80112f0:	dc51      	bgt.n	8011396 <_dtoa_r+0x91e>
 80112f2:	e089      	b.n	8011408 <_dtoa_r+0x990>
 80112f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80112f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80112fa:	e74b      	b.n	8011194 <_dtoa_r+0x71c>
 80112fc:	9b03      	ldr	r3, [sp, #12]
 80112fe:	1e5e      	subs	r6, r3, #1
 8011300:	9b07      	ldr	r3, [sp, #28]
 8011302:	42b3      	cmp	r3, r6
 8011304:	bfbf      	itttt	lt
 8011306:	9b07      	ldrlt	r3, [sp, #28]
 8011308:	9607      	strlt	r6, [sp, #28]
 801130a:	1af2      	sublt	r2, r6, r3
 801130c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801130e:	bfb6      	itet	lt
 8011310:	189b      	addlt	r3, r3, r2
 8011312:	1b9e      	subge	r6, r3, r6
 8011314:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011316:	9b03      	ldr	r3, [sp, #12]
 8011318:	bfb8      	it	lt
 801131a:	2600      	movlt	r6, #0
 801131c:	2b00      	cmp	r3, #0
 801131e:	bfb7      	itett	lt
 8011320:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011324:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011328:	1a9d      	sublt	r5, r3, r2
 801132a:	2300      	movlt	r3, #0
 801132c:	e734      	b.n	8011198 <_dtoa_r+0x720>
 801132e:	9e07      	ldr	r6, [sp, #28]
 8011330:	9d04      	ldr	r5, [sp, #16]
 8011332:	9f08      	ldr	r7, [sp, #32]
 8011334:	e73b      	b.n	80111ae <_dtoa_r+0x736>
 8011336:	9a07      	ldr	r2, [sp, #28]
 8011338:	e767      	b.n	801120a <_dtoa_r+0x792>
 801133a:	9b06      	ldr	r3, [sp, #24]
 801133c:	2b01      	cmp	r3, #1
 801133e:	dc18      	bgt.n	8011372 <_dtoa_r+0x8fa>
 8011340:	f1ba 0f00 	cmp.w	sl, #0
 8011344:	d115      	bne.n	8011372 <_dtoa_r+0x8fa>
 8011346:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801134a:	b993      	cbnz	r3, 8011372 <_dtoa_r+0x8fa>
 801134c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011350:	0d1b      	lsrs	r3, r3, #20
 8011352:	051b      	lsls	r3, r3, #20
 8011354:	b183      	cbz	r3, 8011378 <_dtoa_r+0x900>
 8011356:	9b04      	ldr	r3, [sp, #16]
 8011358:	3301      	adds	r3, #1
 801135a:	9304      	str	r3, [sp, #16]
 801135c:	9b05      	ldr	r3, [sp, #20]
 801135e:	3301      	adds	r3, #1
 8011360:	9305      	str	r3, [sp, #20]
 8011362:	f04f 0801 	mov.w	r8, #1
 8011366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011368:	2b00      	cmp	r3, #0
 801136a:	f47f af6a 	bne.w	8011242 <_dtoa_r+0x7ca>
 801136e:	2001      	movs	r0, #1
 8011370:	e76f      	b.n	8011252 <_dtoa_r+0x7da>
 8011372:	f04f 0800 	mov.w	r8, #0
 8011376:	e7f6      	b.n	8011366 <_dtoa_r+0x8ee>
 8011378:	4698      	mov	r8, r3
 801137a:	e7f4      	b.n	8011366 <_dtoa_r+0x8ee>
 801137c:	f43f af7d 	beq.w	801127a <_dtoa_r+0x802>
 8011380:	4618      	mov	r0, r3
 8011382:	301c      	adds	r0, #28
 8011384:	e772      	b.n	801126c <_dtoa_r+0x7f4>
 8011386:	9b03      	ldr	r3, [sp, #12]
 8011388:	2b00      	cmp	r3, #0
 801138a:	dc37      	bgt.n	80113fc <_dtoa_r+0x984>
 801138c:	9b06      	ldr	r3, [sp, #24]
 801138e:	2b02      	cmp	r3, #2
 8011390:	dd34      	ble.n	80113fc <_dtoa_r+0x984>
 8011392:	9b03      	ldr	r3, [sp, #12]
 8011394:	9302      	str	r3, [sp, #8]
 8011396:	9b02      	ldr	r3, [sp, #8]
 8011398:	b96b      	cbnz	r3, 80113b6 <_dtoa_r+0x93e>
 801139a:	4631      	mov	r1, r6
 801139c:	2205      	movs	r2, #5
 801139e:	4620      	mov	r0, r4
 80113a0:	f000 ff7a 	bl	8012298 <__multadd>
 80113a4:	4601      	mov	r1, r0
 80113a6:	4606      	mov	r6, r0
 80113a8:	ee18 0a10 	vmov	r0, s16
 80113ac:	f001 f9de 	bl	801276c <__mcmp>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	f73f adbb 	bgt.w	8010f2c <_dtoa_r+0x4b4>
 80113b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113b8:	9d01      	ldr	r5, [sp, #4]
 80113ba:	43db      	mvns	r3, r3
 80113bc:	9300      	str	r3, [sp, #0]
 80113be:	f04f 0800 	mov.w	r8, #0
 80113c2:	4631      	mov	r1, r6
 80113c4:	4620      	mov	r0, r4
 80113c6:	f000 ff45 	bl	8012254 <_Bfree>
 80113ca:	2f00      	cmp	r7, #0
 80113cc:	f43f aea4 	beq.w	8011118 <_dtoa_r+0x6a0>
 80113d0:	f1b8 0f00 	cmp.w	r8, #0
 80113d4:	d005      	beq.n	80113e2 <_dtoa_r+0x96a>
 80113d6:	45b8      	cmp	r8, r7
 80113d8:	d003      	beq.n	80113e2 <_dtoa_r+0x96a>
 80113da:	4641      	mov	r1, r8
 80113dc:	4620      	mov	r0, r4
 80113de:	f000 ff39 	bl	8012254 <_Bfree>
 80113e2:	4639      	mov	r1, r7
 80113e4:	4620      	mov	r0, r4
 80113e6:	f000 ff35 	bl	8012254 <_Bfree>
 80113ea:	e695      	b.n	8011118 <_dtoa_r+0x6a0>
 80113ec:	2600      	movs	r6, #0
 80113ee:	4637      	mov	r7, r6
 80113f0:	e7e1      	b.n	80113b6 <_dtoa_r+0x93e>
 80113f2:	9700      	str	r7, [sp, #0]
 80113f4:	4637      	mov	r7, r6
 80113f6:	e599      	b.n	8010f2c <_dtoa_r+0x4b4>
 80113f8:	40240000 	.word	0x40240000
 80113fc:	9b08      	ldr	r3, [sp, #32]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	f000 80ca 	beq.w	8011598 <_dtoa_r+0xb20>
 8011404:	9b03      	ldr	r3, [sp, #12]
 8011406:	9302      	str	r3, [sp, #8]
 8011408:	2d00      	cmp	r5, #0
 801140a:	dd05      	ble.n	8011418 <_dtoa_r+0x9a0>
 801140c:	4639      	mov	r1, r7
 801140e:	462a      	mov	r2, r5
 8011410:	4620      	mov	r0, r4
 8011412:	f001 f93b 	bl	801268c <__lshift>
 8011416:	4607      	mov	r7, r0
 8011418:	f1b8 0f00 	cmp.w	r8, #0
 801141c:	d05b      	beq.n	80114d6 <_dtoa_r+0xa5e>
 801141e:	6879      	ldr	r1, [r7, #4]
 8011420:	4620      	mov	r0, r4
 8011422:	f000 fed7 	bl	80121d4 <_Balloc>
 8011426:	4605      	mov	r5, r0
 8011428:	b928      	cbnz	r0, 8011436 <_dtoa_r+0x9be>
 801142a:	4b87      	ldr	r3, [pc, #540]	; (8011648 <_dtoa_r+0xbd0>)
 801142c:	4602      	mov	r2, r0
 801142e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011432:	f7ff bb3b 	b.w	8010aac <_dtoa_r+0x34>
 8011436:	693a      	ldr	r2, [r7, #16]
 8011438:	3202      	adds	r2, #2
 801143a:	0092      	lsls	r2, r2, #2
 801143c:	f107 010c 	add.w	r1, r7, #12
 8011440:	300c      	adds	r0, #12
 8011442:	f7fd fae3 	bl	800ea0c <memcpy>
 8011446:	2201      	movs	r2, #1
 8011448:	4629      	mov	r1, r5
 801144a:	4620      	mov	r0, r4
 801144c:	f001 f91e 	bl	801268c <__lshift>
 8011450:	9b01      	ldr	r3, [sp, #4]
 8011452:	f103 0901 	add.w	r9, r3, #1
 8011456:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801145a:	4413      	add	r3, r2
 801145c:	9305      	str	r3, [sp, #20]
 801145e:	f00a 0301 	and.w	r3, sl, #1
 8011462:	46b8      	mov	r8, r7
 8011464:	9304      	str	r3, [sp, #16]
 8011466:	4607      	mov	r7, r0
 8011468:	4631      	mov	r1, r6
 801146a:	ee18 0a10 	vmov	r0, s16
 801146e:	f7ff fa75 	bl	801095c <quorem>
 8011472:	4641      	mov	r1, r8
 8011474:	9002      	str	r0, [sp, #8]
 8011476:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801147a:	ee18 0a10 	vmov	r0, s16
 801147e:	f001 f975 	bl	801276c <__mcmp>
 8011482:	463a      	mov	r2, r7
 8011484:	9003      	str	r0, [sp, #12]
 8011486:	4631      	mov	r1, r6
 8011488:	4620      	mov	r0, r4
 801148a:	f001 f98b 	bl	80127a4 <__mdiff>
 801148e:	68c2      	ldr	r2, [r0, #12]
 8011490:	f109 3bff 	add.w	fp, r9, #4294967295
 8011494:	4605      	mov	r5, r0
 8011496:	bb02      	cbnz	r2, 80114da <_dtoa_r+0xa62>
 8011498:	4601      	mov	r1, r0
 801149a:	ee18 0a10 	vmov	r0, s16
 801149e:	f001 f965 	bl	801276c <__mcmp>
 80114a2:	4602      	mov	r2, r0
 80114a4:	4629      	mov	r1, r5
 80114a6:	4620      	mov	r0, r4
 80114a8:	9207      	str	r2, [sp, #28]
 80114aa:	f000 fed3 	bl	8012254 <_Bfree>
 80114ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80114b2:	ea43 0102 	orr.w	r1, r3, r2
 80114b6:	9b04      	ldr	r3, [sp, #16]
 80114b8:	430b      	orrs	r3, r1
 80114ba:	464d      	mov	r5, r9
 80114bc:	d10f      	bne.n	80114de <_dtoa_r+0xa66>
 80114be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80114c2:	d02a      	beq.n	801151a <_dtoa_r+0xaa2>
 80114c4:	9b03      	ldr	r3, [sp, #12]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	dd02      	ble.n	80114d0 <_dtoa_r+0xa58>
 80114ca:	9b02      	ldr	r3, [sp, #8]
 80114cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80114d0:	f88b a000 	strb.w	sl, [fp]
 80114d4:	e775      	b.n	80113c2 <_dtoa_r+0x94a>
 80114d6:	4638      	mov	r0, r7
 80114d8:	e7ba      	b.n	8011450 <_dtoa_r+0x9d8>
 80114da:	2201      	movs	r2, #1
 80114dc:	e7e2      	b.n	80114a4 <_dtoa_r+0xa2c>
 80114de:	9b03      	ldr	r3, [sp, #12]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	db04      	blt.n	80114ee <_dtoa_r+0xa76>
 80114e4:	9906      	ldr	r1, [sp, #24]
 80114e6:	430b      	orrs	r3, r1
 80114e8:	9904      	ldr	r1, [sp, #16]
 80114ea:	430b      	orrs	r3, r1
 80114ec:	d122      	bne.n	8011534 <_dtoa_r+0xabc>
 80114ee:	2a00      	cmp	r2, #0
 80114f0:	ddee      	ble.n	80114d0 <_dtoa_r+0xa58>
 80114f2:	ee18 1a10 	vmov	r1, s16
 80114f6:	2201      	movs	r2, #1
 80114f8:	4620      	mov	r0, r4
 80114fa:	f001 f8c7 	bl	801268c <__lshift>
 80114fe:	4631      	mov	r1, r6
 8011500:	ee08 0a10 	vmov	s16, r0
 8011504:	f001 f932 	bl	801276c <__mcmp>
 8011508:	2800      	cmp	r0, #0
 801150a:	dc03      	bgt.n	8011514 <_dtoa_r+0xa9c>
 801150c:	d1e0      	bne.n	80114d0 <_dtoa_r+0xa58>
 801150e:	f01a 0f01 	tst.w	sl, #1
 8011512:	d0dd      	beq.n	80114d0 <_dtoa_r+0xa58>
 8011514:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011518:	d1d7      	bne.n	80114ca <_dtoa_r+0xa52>
 801151a:	2339      	movs	r3, #57	; 0x39
 801151c:	f88b 3000 	strb.w	r3, [fp]
 8011520:	462b      	mov	r3, r5
 8011522:	461d      	mov	r5, r3
 8011524:	3b01      	subs	r3, #1
 8011526:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801152a:	2a39      	cmp	r2, #57	; 0x39
 801152c:	d071      	beq.n	8011612 <_dtoa_r+0xb9a>
 801152e:	3201      	adds	r2, #1
 8011530:	701a      	strb	r2, [r3, #0]
 8011532:	e746      	b.n	80113c2 <_dtoa_r+0x94a>
 8011534:	2a00      	cmp	r2, #0
 8011536:	dd07      	ble.n	8011548 <_dtoa_r+0xad0>
 8011538:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801153c:	d0ed      	beq.n	801151a <_dtoa_r+0xaa2>
 801153e:	f10a 0301 	add.w	r3, sl, #1
 8011542:	f88b 3000 	strb.w	r3, [fp]
 8011546:	e73c      	b.n	80113c2 <_dtoa_r+0x94a>
 8011548:	9b05      	ldr	r3, [sp, #20]
 801154a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801154e:	4599      	cmp	r9, r3
 8011550:	d047      	beq.n	80115e2 <_dtoa_r+0xb6a>
 8011552:	ee18 1a10 	vmov	r1, s16
 8011556:	2300      	movs	r3, #0
 8011558:	220a      	movs	r2, #10
 801155a:	4620      	mov	r0, r4
 801155c:	f000 fe9c 	bl	8012298 <__multadd>
 8011560:	45b8      	cmp	r8, r7
 8011562:	ee08 0a10 	vmov	s16, r0
 8011566:	f04f 0300 	mov.w	r3, #0
 801156a:	f04f 020a 	mov.w	r2, #10
 801156e:	4641      	mov	r1, r8
 8011570:	4620      	mov	r0, r4
 8011572:	d106      	bne.n	8011582 <_dtoa_r+0xb0a>
 8011574:	f000 fe90 	bl	8012298 <__multadd>
 8011578:	4680      	mov	r8, r0
 801157a:	4607      	mov	r7, r0
 801157c:	f109 0901 	add.w	r9, r9, #1
 8011580:	e772      	b.n	8011468 <_dtoa_r+0x9f0>
 8011582:	f000 fe89 	bl	8012298 <__multadd>
 8011586:	4639      	mov	r1, r7
 8011588:	4680      	mov	r8, r0
 801158a:	2300      	movs	r3, #0
 801158c:	220a      	movs	r2, #10
 801158e:	4620      	mov	r0, r4
 8011590:	f000 fe82 	bl	8012298 <__multadd>
 8011594:	4607      	mov	r7, r0
 8011596:	e7f1      	b.n	801157c <_dtoa_r+0xb04>
 8011598:	9b03      	ldr	r3, [sp, #12]
 801159a:	9302      	str	r3, [sp, #8]
 801159c:	9d01      	ldr	r5, [sp, #4]
 801159e:	ee18 0a10 	vmov	r0, s16
 80115a2:	4631      	mov	r1, r6
 80115a4:	f7ff f9da 	bl	801095c <quorem>
 80115a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80115ac:	9b01      	ldr	r3, [sp, #4]
 80115ae:	f805 ab01 	strb.w	sl, [r5], #1
 80115b2:	1aea      	subs	r2, r5, r3
 80115b4:	9b02      	ldr	r3, [sp, #8]
 80115b6:	4293      	cmp	r3, r2
 80115b8:	dd09      	ble.n	80115ce <_dtoa_r+0xb56>
 80115ba:	ee18 1a10 	vmov	r1, s16
 80115be:	2300      	movs	r3, #0
 80115c0:	220a      	movs	r2, #10
 80115c2:	4620      	mov	r0, r4
 80115c4:	f000 fe68 	bl	8012298 <__multadd>
 80115c8:	ee08 0a10 	vmov	s16, r0
 80115cc:	e7e7      	b.n	801159e <_dtoa_r+0xb26>
 80115ce:	9b02      	ldr	r3, [sp, #8]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	bfc8      	it	gt
 80115d4:	461d      	movgt	r5, r3
 80115d6:	9b01      	ldr	r3, [sp, #4]
 80115d8:	bfd8      	it	le
 80115da:	2501      	movle	r5, #1
 80115dc:	441d      	add	r5, r3
 80115de:	f04f 0800 	mov.w	r8, #0
 80115e2:	ee18 1a10 	vmov	r1, s16
 80115e6:	2201      	movs	r2, #1
 80115e8:	4620      	mov	r0, r4
 80115ea:	f001 f84f 	bl	801268c <__lshift>
 80115ee:	4631      	mov	r1, r6
 80115f0:	ee08 0a10 	vmov	s16, r0
 80115f4:	f001 f8ba 	bl	801276c <__mcmp>
 80115f8:	2800      	cmp	r0, #0
 80115fa:	dc91      	bgt.n	8011520 <_dtoa_r+0xaa8>
 80115fc:	d102      	bne.n	8011604 <_dtoa_r+0xb8c>
 80115fe:	f01a 0f01 	tst.w	sl, #1
 8011602:	d18d      	bne.n	8011520 <_dtoa_r+0xaa8>
 8011604:	462b      	mov	r3, r5
 8011606:	461d      	mov	r5, r3
 8011608:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801160c:	2a30      	cmp	r2, #48	; 0x30
 801160e:	d0fa      	beq.n	8011606 <_dtoa_r+0xb8e>
 8011610:	e6d7      	b.n	80113c2 <_dtoa_r+0x94a>
 8011612:	9a01      	ldr	r2, [sp, #4]
 8011614:	429a      	cmp	r2, r3
 8011616:	d184      	bne.n	8011522 <_dtoa_r+0xaaa>
 8011618:	9b00      	ldr	r3, [sp, #0]
 801161a:	3301      	adds	r3, #1
 801161c:	9300      	str	r3, [sp, #0]
 801161e:	2331      	movs	r3, #49	; 0x31
 8011620:	7013      	strb	r3, [r2, #0]
 8011622:	e6ce      	b.n	80113c2 <_dtoa_r+0x94a>
 8011624:	4b09      	ldr	r3, [pc, #36]	; (801164c <_dtoa_r+0xbd4>)
 8011626:	f7ff ba95 	b.w	8010b54 <_dtoa_r+0xdc>
 801162a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801162c:	2b00      	cmp	r3, #0
 801162e:	f47f aa6e 	bne.w	8010b0e <_dtoa_r+0x96>
 8011632:	4b07      	ldr	r3, [pc, #28]	; (8011650 <_dtoa_r+0xbd8>)
 8011634:	f7ff ba8e 	b.w	8010b54 <_dtoa_r+0xdc>
 8011638:	9b02      	ldr	r3, [sp, #8]
 801163a:	2b00      	cmp	r3, #0
 801163c:	dcae      	bgt.n	801159c <_dtoa_r+0xb24>
 801163e:	9b06      	ldr	r3, [sp, #24]
 8011640:	2b02      	cmp	r3, #2
 8011642:	f73f aea8 	bgt.w	8011396 <_dtoa_r+0x91e>
 8011646:	e7a9      	b.n	801159c <_dtoa_r+0xb24>
 8011648:	08015407 	.word	0x08015407
 801164c:	08015661 	.word	0x08015661
 8011650:	08015388 	.word	0x08015388

08011654 <__sflush_r>:
 8011654:	898a      	ldrh	r2, [r1, #12]
 8011656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801165a:	4605      	mov	r5, r0
 801165c:	0710      	lsls	r0, r2, #28
 801165e:	460c      	mov	r4, r1
 8011660:	d458      	bmi.n	8011714 <__sflush_r+0xc0>
 8011662:	684b      	ldr	r3, [r1, #4]
 8011664:	2b00      	cmp	r3, #0
 8011666:	dc05      	bgt.n	8011674 <__sflush_r+0x20>
 8011668:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801166a:	2b00      	cmp	r3, #0
 801166c:	dc02      	bgt.n	8011674 <__sflush_r+0x20>
 801166e:	2000      	movs	r0, #0
 8011670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011676:	2e00      	cmp	r6, #0
 8011678:	d0f9      	beq.n	801166e <__sflush_r+0x1a>
 801167a:	2300      	movs	r3, #0
 801167c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011680:	682f      	ldr	r7, [r5, #0]
 8011682:	602b      	str	r3, [r5, #0]
 8011684:	d032      	beq.n	80116ec <__sflush_r+0x98>
 8011686:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011688:	89a3      	ldrh	r3, [r4, #12]
 801168a:	075a      	lsls	r2, r3, #29
 801168c:	d505      	bpl.n	801169a <__sflush_r+0x46>
 801168e:	6863      	ldr	r3, [r4, #4]
 8011690:	1ac0      	subs	r0, r0, r3
 8011692:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011694:	b10b      	cbz	r3, 801169a <__sflush_r+0x46>
 8011696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011698:	1ac0      	subs	r0, r0, r3
 801169a:	2300      	movs	r3, #0
 801169c:	4602      	mov	r2, r0
 801169e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116a0:	6a21      	ldr	r1, [r4, #32]
 80116a2:	4628      	mov	r0, r5
 80116a4:	47b0      	blx	r6
 80116a6:	1c43      	adds	r3, r0, #1
 80116a8:	89a3      	ldrh	r3, [r4, #12]
 80116aa:	d106      	bne.n	80116ba <__sflush_r+0x66>
 80116ac:	6829      	ldr	r1, [r5, #0]
 80116ae:	291d      	cmp	r1, #29
 80116b0:	d82c      	bhi.n	801170c <__sflush_r+0xb8>
 80116b2:	4a2a      	ldr	r2, [pc, #168]	; (801175c <__sflush_r+0x108>)
 80116b4:	40ca      	lsrs	r2, r1
 80116b6:	07d6      	lsls	r6, r2, #31
 80116b8:	d528      	bpl.n	801170c <__sflush_r+0xb8>
 80116ba:	2200      	movs	r2, #0
 80116bc:	6062      	str	r2, [r4, #4]
 80116be:	04d9      	lsls	r1, r3, #19
 80116c0:	6922      	ldr	r2, [r4, #16]
 80116c2:	6022      	str	r2, [r4, #0]
 80116c4:	d504      	bpl.n	80116d0 <__sflush_r+0x7c>
 80116c6:	1c42      	adds	r2, r0, #1
 80116c8:	d101      	bne.n	80116ce <__sflush_r+0x7a>
 80116ca:	682b      	ldr	r3, [r5, #0]
 80116cc:	b903      	cbnz	r3, 80116d0 <__sflush_r+0x7c>
 80116ce:	6560      	str	r0, [r4, #84]	; 0x54
 80116d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116d2:	602f      	str	r7, [r5, #0]
 80116d4:	2900      	cmp	r1, #0
 80116d6:	d0ca      	beq.n	801166e <__sflush_r+0x1a>
 80116d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116dc:	4299      	cmp	r1, r3
 80116de:	d002      	beq.n	80116e6 <__sflush_r+0x92>
 80116e0:	4628      	mov	r0, r5
 80116e2:	f001 fa4f 	bl	8012b84 <_free_r>
 80116e6:	2000      	movs	r0, #0
 80116e8:	6360      	str	r0, [r4, #52]	; 0x34
 80116ea:	e7c1      	b.n	8011670 <__sflush_r+0x1c>
 80116ec:	6a21      	ldr	r1, [r4, #32]
 80116ee:	2301      	movs	r3, #1
 80116f0:	4628      	mov	r0, r5
 80116f2:	47b0      	blx	r6
 80116f4:	1c41      	adds	r1, r0, #1
 80116f6:	d1c7      	bne.n	8011688 <__sflush_r+0x34>
 80116f8:	682b      	ldr	r3, [r5, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d0c4      	beq.n	8011688 <__sflush_r+0x34>
 80116fe:	2b1d      	cmp	r3, #29
 8011700:	d001      	beq.n	8011706 <__sflush_r+0xb2>
 8011702:	2b16      	cmp	r3, #22
 8011704:	d101      	bne.n	801170a <__sflush_r+0xb6>
 8011706:	602f      	str	r7, [r5, #0]
 8011708:	e7b1      	b.n	801166e <__sflush_r+0x1a>
 801170a:	89a3      	ldrh	r3, [r4, #12]
 801170c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011710:	81a3      	strh	r3, [r4, #12]
 8011712:	e7ad      	b.n	8011670 <__sflush_r+0x1c>
 8011714:	690f      	ldr	r7, [r1, #16]
 8011716:	2f00      	cmp	r7, #0
 8011718:	d0a9      	beq.n	801166e <__sflush_r+0x1a>
 801171a:	0793      	lsls	r3, r2, #30
 801171c:	680e      	ldr	r6, [r1, #0]
 801171e:	bf08      	it	eq
 8011720:	694b      	ldreq	r3, [r1, #20]
 8011722:	600f      	str	r7, [r1, #0]
 8011724:	bf18      	it	ne
 8011726:	2300      	movne	r3, #0
 8011728:	eba6 0807 	sub.w	r8, r6, r7
 801172c:	608b      	str	r3, [r1, #8]
 801172e:	f1b8 0f00 	cmp.w	r8, #0
 8011732:	dd9c      	ble.n	801166e <__sflush_r+0x1a>
 8011734:	6a21      	ldr	r1, [r4, #32]
 8011736:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011738:	4643      	mov	r3, r8
 801173a:	463a      	mov	r2, r7
 801173c:	4628      	mov	r0, r5
 801173e:	47b0      	blx	r6
 8011740:	2800      	cmp	r0, #0
 8011742:	dc06      	bgt.n	8011752 <__sflush_r+0xfe>
 8011744:	89a3      	ldrh	r3, [r4, #12]
 8011746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801174a:	81a3      	strh	r3, [r4, #12]
 801174c:	f04f 30ff 	mov.w	r0, #4294967295
 8011750:	e78e      	b.n	8011670 <__sflush_r+0x1c>
 8011752:	4407      	add	r7, r0
 8011754:	eba8 0800 	sub.w	r8, r8, r0
 8011758:	e7e9      	b.n	801172e <__sflush_r+0xda>
 801175a:	bf00      	nop
 801175c:	20400001 	.word	0x20400001

08011760 <_fflush_r>:
 8011760:	b538      	push	{r3, r4, r5, lr}
 8011762:	690b      	ldr	r3, [r1, #16]
 8011764:	4605      	mov	r5, r0
 8011766:	460c      	mov	r4, r1
 8011768:	b913      	cbnz	r3, 8011770 <_fflush_r+0x10>
 801176a:	2500      	movs	r5, #0
 801176c:	4628      	mov	r0, r5
 801176e:	bd38      	pop	{r3, r4, r5, pc}
 8011770:	b118      	cbz	r0, 801177a <_fflush_r+0x1a>
 8011772:	6983      	ldr	r3, [r0, #24]
 8011774:	b90b      	cbnz	r3, 801177a <_fflush_r+0x1a>
 8011776:	f000 f887 	bl	8011888 <__sinit>
 801177a:	4b14      	ldr	r3, [pc, #80]	; (80117cc <_fflush_r+0x6c>)
 801177c:	429c      	cmp	r4, r3
 801177e:	d11b      	bne.n	80117b8 <_fflush_r+0x58>
 8011780:	686c      	ldr	r4, [r5, #4]
 8011782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d0ef      	beq.n	801176a <_fflush_r+0xa>
 801178a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801178c:	07d0      	lsls	r0, r2, #31
 801178e:	d404      	bmi.n	801179a <_fflush_r+0x3a>
 8011790:	0599      	lsls	r1, r3, #22
 8011792:	d402      	bmi.n	801179a <_fflush_r+0x3a>
 8011794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011796:	f000 fc88 	bl	80120aa <__retarget_lock_acquire_recursive>
 801179a:	4628      	mov	r0, r5
 801179c:	4621      	mov	r1, r4
 801179e:	f7ff ff59 	bl	8011654 <__sflush_r>
 80117a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117a4:	07da      	lsls	r2, r3, #31
 80117a6:	4605      	mov	r5, r0
 80117a8:	d4e0      	bmi.n	801176c <_fflush_r+0xc>
 80117aa:	89a3      	ldrh	r3, [r4, #12]
 80117ac:	059b      	lsls	r3, r3, #22
 80117ae:	d4dd      	bmi.n	801176c <_fflush_r+0xc>
 80117b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117b2:	f000 fc7b 	bl	80120ac <__retarget_lock_release_recursive>
 80117b6:	e7d9      	b.n	801176c <_fflush_r+0xc>
 80117b8:	4b05      	ldr	r3, [pc, #20]	; (80117d0 <_fflush_r+0x70>)
 80117ba:	429c      	cmp	r4, r3
 80117bc:	d101      	bne.n	80117c2 <_fflush_r+0x62>
 80117be:	68ac      	ldr	r4, [r5, #8]
 80117c0:	e7df      	b.n	8011782 <_fflush_r+0x22>
 80117c2:	4b04      	ldr	r3, [pc, #16]	; (80117d4 <_fflush_r+0x74>)
 80117c4:	429c      	cmp	r4, r3
 80117c6:	bf08      	it	eq
 80117c8:	68ec      	ldreq	r4, [r5, #12]
 80117ca:	e7da      	b.n	8011782 <_fflush_r+0x22>
 80117cc:	08015438 	.word	0x08015438
 80117d0:	08015458 	.word	0x08015458
 80117d4:	08015418 	.word	0x08015418

080117d8 <std>:
 80117d8:	2300      	movs	r3, #0
 80117da:	b510      	push	{r4, lr}
 80117dc:	4604      	mov	r4, r0
 80117de:	e9c0 3300 	strd	r3, r3, [r0]
 80117e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80117e6:	6083      	str	r3, [r0, #8]
 80117e8:	8181      	strh	r1, [r0, #12]
 80117ea:	6643      	str	r3, [r0, #100]	; 0x64
 80117ec:	81c2      	strh	r2, [r0, #14]
 80117ee:	6183      	str	r3, [r0, #24]
 80117f0:	4619      	mov	r1, r3
 80117f2:	2208      	movs	r2, #8
 80117f4:	305c      	adds	r0, #92	; 0x5c
 80117f6:	f7fd f931 	bl	800ea5c <memset>
 80117fa:	4b05      	ldr	r3, [pc, #20]	; (8011810 <std+0x38>)
 80117fc:	6263      	str	r3, [r4, #36]	; 0x24
 80117fe:	4b05      	ldr	r3, [pc, #20]	; (8011814 <std+0x3c>)
 8011800:	62a3      	str	r3, [r4, #40]	; 0x28
 8011802:	4b05      	ldr	r3, [pc, #20]	; (8011818 <std+0x40>)
 8011804:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011806:	4b05      	ldr	r3, [pc, #20]	; (801181c <std+0x44>)
 8011808:	6224      	str	r4, [r4, #32]
 801180a:	6323      	str	r3, [r4, #48]	; 0x30
 801180c:	bd10      	pop	{r4, pc}
 801180e:	bf00      	nop
 8011810:	0800f989 	.word	0x0800f989
 8011814:	0800f9af 	.word	0x0800f9af
 8011818:	0800f9e7 	.word	0x0800f9e7
 801181c:	0800fa0b 	.word	0x0800fa0b

08011820 <_cleanup_r>:
 8011820:	4901      	ldr	r1, [pc, #4]	; (8011828 <_cleanup_r+0x8>)
 8011822:	f000 b8af 	b.w	8011984 <_fwalk_reent>
 8011826:	bf00      	nop
 8011828:	08011761 	.word	0x08011761

0801182c <__sfmoreglue>:
 801182c:	b570      	push	{r4, r5, r6, lr}
 801182e:	2268      	movs	r2, #104	; 0x68
 8011830:	1e4d      	subs	r5, r1, #1
 8011832:	4355      	muls	r5, r2
 8011834:	460e      	mov	r6, r1
 8011836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801183a:	f001 fa0f 	bl	8012c5c <_malloc_r>
 801183e:	4604      	mov	r4, r0
 8011840:	b140      	cbz	r0, 8011854 <__sfmoreglue+0x28>
 8011842:	2100      	movs	r1, #0
 8011844:	e9c0 1600 	strd	r1, r6, [r0]
 8011848:	300c      	adds	r0, #12
 801184a:	60a0      	str	r0, [r4, #8]
 801184c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011850:	f7fd f904 	bl	800ea5c <memset>
 8011854:	4620      	mov	r0, r4
 8011856:	bd70      	pop	{r4, r5, r6, pc}

08011858 <__sfp_lock_acquire>:
 8011858:	4801      	ldr	r0, [pc, #4]	; (8011860 <__sfp_lock_acquire+0x8>)
 801185a:	f000 bc26 	b.w	80120aa <__retarget_lock_acquire_recursive>
 801185e:	bf00      	nop
 8011860:	20003141 	.word	0x20003141

08011864 <__sfp_lock_release>:
 8011864:	4801      	ldr	r0, [pc, #4]	; (801186c <__sfp_lock_release+0x8>)
 8011866:	f000 bc21 	b.w	80120ac <__retarget_lock_release_recursive>
 801186a:	bf00      	nop
 801186c:	20003141 	.word	0x20003141

08011870 <__sinit_lock_acquire>:
 8011870:	4801      	ldr	r0, [pc, #4]	; (8011878 <__sinit_lock_acquire+0x8>)
 8011872:	f000 bc1a 	b.w	80120aa <__retarget_lock_acquire_recursive>
 8011876:	bf00      	nop
 8011878:	20003142 	.word	0x20003142

0801187c <__sinit_lock_release>:
 801187c:	4801      	ldr	r0, [pc, #4]	; (8011884 <__sinit_lock_release+0x8>)
 801187e:	f000 bc15 	b.w	80120ac <__retarget_lock_release_recursive>
 8011882:	bf00      	nop
 8011884:	20003142 	.word	0x20003142

08011888 <__sinit>:
 8011888:	b510      	push	{r4, lr}
 801188a:	4604      	mov	r4, r0
 801188c:	f7ff fff0 	bl	8011870 <__sinit_lock_acquire>
 8011890:	69a3      	ldr	r3, [r4, #24]
 8011892:	b11b      	cbz	r3, 801189c <__sinit+0x14>
 8011894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011898:	f7ff bff0 	b.w	801187c <__sinit_lock_release>
 801189c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80118a0:	6523      	str	r3, [r4, #80]	; 0x50
 80118a2:	4b13      	ldr	r3, [pc, #76]	; (80118f0 <__sinit+0x68>)
 80118a4:	4a13      	ldr	r2, [pc, #76]	; (80118f4 <__sinit+0x6c>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80118aa:	42a3      	cmp	r3, r4
 80118ac:	bf04      	itt	eq
 80118ae:	2301      	moveq	r3, #1
 80118b0:	61a3      	streq	r3, [r4, #24]
 80118b2:	4620      	mov	r0, r4
 80118b4:	f000 f820 	bl	80118f8 <__sfp>
 80118b8:	6060      	str	r0, [r4, #4]
 80118ba:	4620      	mov	r0, r4
 80118bc:	f000 f81c 	bl	80118f8 <__sfp>
 80118c0:	60a0      	str	r0, [r4, #8]
 80118c2:	4620      	mov	r0, r4
 80118c4:	f000 f818 	bl	80118f8 <__sfp>
 80118c8:	2200      	movs	r2, #0
 80118ca:	60e0      	str	r0, [r4, #12]
 80118cc:	2104      	movs	r1, #4
 80118ce:	6860      	ldr	r0, [r4, #4]
 80118d0:	f7ff ff82 	bl	80117d8 <std>
 80118d4:	68a0      	ldr	r0, [r4, #8]
 80118d6:	2201      	movs	r2, #1
 80118d8:	2109      	movs	r1, #9
 80118da:	f7ff ff7d 	bl	80117d8 <std>
 80118de:	68e0      	ldr	r0, [r4, #12]
 80118e0:	2202      	movs	r2, #2
 80118e2:	2112      	movs	r1, #18
 80118e4:	f7ff ff78 	bl	80117d8 <std>
 80118e8:	2301      	movs	r3, #1
 80118ea:	61a3      	str	r3, [r4, #24]
 80118ec:	e7d2      	b.n	8011894 <__sinit+0xc>
 80118ee:	bf00      	nop
 80118f0:	080152fc 	.word	0x080152fc
 80118f4:	08011821 	.word	0x08011821

080118f8 <__sfp>:
 80118f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118fa:	4607      	mov	r7, r0
 80118fc:	f7ff ffac 	bl	8011858 <__sfp_lock_acquire>
 8011900:	4b1e      	ldr	r3, [pc, #120]	; (801197c <__sfp+0x84>)
 8011902:	681e      	ldr	r6, [r3, #0]
 8011904:	69b3      	ldr	r3, [r6, #24]
 8011906:	b913      	cbnz	r3, 801190e <__sfp+0x16>
 8011908:	4630      	mov	r0, r6
 801190a:	f7ff ffbd 	bl	8011888 <__sinit>
 801190e:	3648      	adds	r6, #72	; 0x48
 8011910:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011914:	3b01      	subs	r3, #1
 8011916:	d503      	bpl.n	8011920 <__sfp+0x28>
 8011918:	6833      	ldr	r3, [r6, #0]
 801191a:	b30b      	cbz	r3, 8011960 <__sfp+0x68>
 801191c:	6836      	ldr	r6, [r6, #0]
 801191e:	e7f7      	b.n	8011910 <__sfp+0x18>
 8011920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011924:	b9d5      	cbnz	r5, 801195c <__sfp+0x64>
 8011926:	4b16      	ldr	r3, [pc, #88]	; (8011980 <__sfp+0x88>)
 8011928:	60e3      	str	r3, [r4, #12]
 801192a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801192e:	6665      	str	r5, [r4, #100]	; 0x64
 8011930:	f000 fbba 	bl	80120a8 <__retarget_lock_init_recursive>
 8011934:	f7ff ff96 	bl	8011864 <__sfp_lock_release>
 8011938:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801193c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011940:	6025      	str	r5, [r4, #0]
 8011942:	61a5      	str	r5, [r4, #24]
 8011944:	2208      	movs	r2, #8
 8011946:	4629      	mov	r1, r5
 8011948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801194c:	f7fd f886 	bl	800ea5c <memset>
 8011950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011958:	4620      	mov	r0, r4
 801195a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801195c:	3468      	adds	r4, #104	; 0x68
 801195e:	e7d9      	b.n	8011914 <__sfp+0x1c>
 8011960:	2104      	movs	r1, #4
 8011962:	4638      	mov	r0, r7
 8011964:	f7ff ff62 	bl	801182c <__sfmoreglue>
 8011968:	4604      	mov	r4, r0
 801196a:	6030      	str	r0, [r6, #0]
 801196c:	2800      	cmp	r0, #0
 801196e:	d1d5      	bne.n	801191c <__sfp+0x24>
 8011970:	f7ff ff78 	bl	8011864 <__sfp_lock_release>
 8011974:	230c      	movs	r3, #12
 8011976:	603b      	str	r3, [r7, #0]
 8011978:	e7ee      	b.n	8011958 <__sfp+0x60>
 801197a:	bf00      	nop
 801197c:	080152fc 	.word	0x080152fc
 8011980:	ffff0001 	.word	0xffff0001

08011984 <_fwalk_reent>:
 8011984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011988:	4606      	mov	r6, r0
 801198a:	4688      	mov	r8, r1
 801198c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011990:	2700      	movs	r7, #0
 8011992:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011996:	f1b9 0901 	subs.w	r9, r9, #1
 801199a:	d505      	bpl.n	80119a8 <_fwalk_reent+0x24>
 801199c:	6824      	ldr	r4, [r4, #0]
 801199e:	2c00      	cmp	r4, #0
 80119a0:	d1f7      	bne.n	8011992 <_fwalk_reent+0xe>
 80119a2:	4638      	mov	r0, r7
 80119a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119a8:	89ab      	ldrh	r3, [r5, #12]
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d907      	bls.n	80119be <_fwalk_reent+0x3a>
 80119ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119b2:	3301      	adds	r3, #1
 80119b4:	d003      	beq.n	80119be <_fwalk_reent+0x3a>
 80119b6:	4629      	mov	r1, r5
 80119b8:	4630      	mov	r0, r6
 80119ba:	47c0      	blx	r8
 80119bc:	4307      	orrs	r7, r0
 80119be:	3568      	adds	r5, #104	; 0x68
 80119c0:	e7e9      	b.n	8011996 <_fwalk_reent+0x12>

080119c2 <rshift>:
 80119c2:	6903      	ldr	r3, [r0, #16]
 80119c4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80119c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119cc:	ea4f 1261 	mov.w	r2, r1, asr #5
 80119d0:	f100 0414 	add.w	r4, r0, #20
 80119d4:	dd45      	ble.n	8011a62 <rshift+0xa0>
 80119d6:	f011 011f 	ands.w	r1, r1, #31
 80119da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80119de:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80119e2:	d10c      	bne.n	80119fe <rshift+0x3c>
 80119e4:	f100 0710 	add.w	r7, r0, #16
 80119e8:	4629      	mov	r1, r5
 80119ea:	42b1      	cmp	r1, r6
 80119ec:	d334      	bcc.n	8011a58 <rshift+0x96>
 80119ee:	1a9b      	subs	r3, r3, r2
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	1eea      	subs	r2, r5, #3
 80119f4:	4296      	cmp	r6, r2
 80119f6:	bf38      	it	cc
 80119f8:	2300      	movcc	r3, #0
 80119fa:	4423      	add	r3, r4
 80119fc:	e015      	b.n	8011a2a <rshift+0x68>
 80119fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011a02:	f1c1 0820 	rsb	r8, r1, #32
 8011a06:	40cf      	lsrs	r7, r1
 8011a08:	f105 0e04 	add.w	lr, r5, #4
 8011a0c:	46a1      	mov	r9, r4
 8011a0e:	4576      	cmp	r6, lr
 8011a10:	46f4      	mov	ip, lr
 8011a12:	d815      	bhi.n	8011a40 <rshift+0x7e>
 8011a14:	1a9a      	subs	r2, r3, r2
 8011a16:	0092      	lsls	r2, r2, #2
 8011a18:	3a04      	subs	r2, #4
 8011a1a:	3501      	adds	r5, #1
 8011a1c:	42ae      	cmp	r6, r5
 8011a1e:	bf38      	it	cc
 8011a20:	2200      	movcc	r2, #0
 8011a22:	18a3      	adds	r3, r4, r2
 8011a24:	50a7      	str	r7, [r4, r2]
 8011a26:	b107      	cbz	r7, 8011a2a <rshift+0x68>
 8011a28:	3304      	adds	r3, #4
 8011a2a:	1b1a      	subs	r2, r3, r4
 8011a2c:	42a3      	cmp	r3, r4
 8011a2e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011a32:	bf08      	it	eq
 8011a34:	2300      	moveq	r3, #0
 8011a36:	6102      	str	r2, [r0, #16]
 8011a38:	bf08      	it	eq
 8011a3a:	6143      	streq	r3, [r0, #20]
 8011a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a40:	f8dc c000 	ldr.w	ip, [ip]
 8011a44:	fa0c fc08 	lsl.w	ip, ip, r8
 8011a48:	ea4c 0707 	orr.w	r7, ip, r7
 8011a4c:	f849 7b04 	str.w	r7, [r9], #4
 8011a50:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011a54:	40cf      	lsrs	r7, r1
 8011a56:	e7da      	b.n	8011a0e <rshift+0x4c>
 8011a58:	f851 cb04 	ldr.w	ip, [r1], #4
 8011a5c:	f847 cf04 	str.w	ip, [r7, #4]!
 8011a60:	e7c3      	b.n	80119ea <rshift+0x28>
 8011a62:	4623      	mov	r3, r4
 8011a64:	e7e1      	b.n	8011a2a <rshift+0x68>

08011a66 <__hexdig_fun>:
 8011a66:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011a6a:	2b09      	cmp	r3, #9
 8011a6c:	d802      	bhi.n	8011a74 <__hexdig_fun+0xe>
 8011a6e:	3820      	subs	r0, #32
 8011a70:	b2c0      	uxtb	r0, r0
 8011a72:	4770      	bx	lr
 8011a74:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011a78:	2b05      	cmp	r3, #5
 8011a7a:	d801      	bhi.n	8011a80 <__hexdig_fun+0x1a>
 8011a7c:	3847      	subs	r0, #71	; 0x47
 8011a7e:	e7f7      	b.n	8011a70 <__hexdig_fun+0xa>
 8011a80:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011a84:	2b05      	cmp	r3, #5
 8011a86:	d801      	bhi.n	8011a8c <__hexdig_fun+0x26>
 8011a88:	3827      	subs	r0, #39	; 0x27
 8011a8a:	e7f1      	b.n	8011a70 <__hexdig_fun+0xa>
 8011a8c:	2000      	movs	r0, #0
 8011a8e:	4770      	bx	lr

08011a90 <__gethex>:
 8011a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a94:	ed2d 8b02 	vpush	{d8}
 8011a98:	b089      	sub	sp, #36	; 0x24
 8011a9a:	ee08 0a10 	vmov	s16, r0
 8011a9e:	9304      	str	r3, [sp, #16]
 8011aa0:	4bb4      	ldr	r3, [pc, #720]	; (8011d74 <__gethex+0x2e4>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	9301      	str	r3, [sp, #4]
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	468b      	mov	fp, r1
 8011aaa:	4690      	mov	r8, r2
 8011aac:	f7ee fbaa 	bl	8000204 <strlen>
 8011ab0:	9b01      	ldr	r3, [sp, #4]
 8011ab2:	f8db 2000 	ldr.w	r2, [fp]
 8011ab6:	4403      	add	r3, r0
 8011ab8:	4682      	mov	sl, r0
 8011aba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011abe:	9305      	str	r3, [sp, #20]
 8011ac0:	1c93      	adds	r3, r2, #2
 8011ac2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011ac6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011aca:	32fe      	adds	r2, #254	; 0xfe
 8011acc:	18d1      	adds	r1, r2, r3
 8011ace:	461f      	mov	r7, r3
 8011ad0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011ad4:	9100      	str	r1, [sp, #0]
 8011ad6:	2830      	cmp	r0, #48	; 0x30
 8011ad8:	d0f8      	beq.n	8011acc <__gethex+0x3c>
 8011ada:	f7ff ffc4 	bl	8011a66 <__hexdig_fun>
 8011ade:	4604      	mov	r4, r0
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	d13a      	bne.n	8011b5a <__gethex+0xca>
 8011ae4:	9901      	ldr	r1, [sp, #4]
 8011ae6:	4652      	mov	r2, sl
 8011ae8:	4638      	mov	r0, r7
 8011aea:	f001 ff69 	bl	80139c0 <strncmp>
 8011aee:	4605      	mov	r5, r0
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d168      	bne.n	8011bc6 <__gethex+0x136>
 8011af4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011af8:	eb07 060a 	add.w	r6, r7, sl
 8011afc:	f7ff ffb3 	bl	8011a66 <__hexdig_fun>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	d062      	beq.n	8011bca <__gethex+0x13a>
 8011b04:	4633      	mov	r3, r6
 8011b06:	7818      	ldrb	r0, [r3, #0]
 8011b08:	2830      	cmp	r0, #48	; 0x30
 8011b0a:	461f      	mov	r7, r3
 8011b0c:	f103 0301 	add.w	r3, r3, #1
 8011b10:	d0f9      	beq.n	8011b06 <__gethex+0x76>
 8011b12:	f7ff ffa8 	bl	8011a66 <__hexdig_fun>
 8011b16:	2301      	movs	r3, #1
 8011b18:	fab0 f480 	clz	r4, r0
 8011b1c:	0964      	lsrs	r4, r4, #5
 8011b1e:	4635      	mov	r5, r6
 8011b20:	9300      	str	r3, [sp, #0]
 8011b22:	463a      	mov	r2, r7
 8011b24:	4616      	mov	r6, r2
 8011b26:	3201      	adds	r2, #1
 8011b28:	7830      	ldrb	r0, [r6, #0]
 8011b2a:	f7ff ff9c 	bl	8011a66 <__hexdig_fun>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	d1f8      	bne.n	8011b24 <__gethex+0x94>
 8011b32:	9901      	ldr	r1, [sp, #4]
 8011b34:	4652      	mov	r2, sl
 8011b36:	4630      	mov	r0, r6
 8011b38:	f001 ff42 	bl	80139c0 <strncmp>
 8011b3c:	b980      	cbnz	r0, 8011b60 <__gethex+0xd0>
 8011b3e:	b94d      	cbnz	r5, 8011b54 <__gethex+0xc4>
 8011b40:	eb06 050a 	add.w	r5, r6, sl
 8011b44:	462a      	mov	r2, r5
 8011b46:	4616      	mov	r6, r2
 8011b48:	3201      	adds	r2, #1
 8011b4a:	7830      	ldrb	r0, [r6, #0]
 8011b4c:	f7ff ff8b 	bl	8011a66 <__hexdig_fun>
 8011b50:	2800      	cmp	r0, #0
 8011b52:	d1f8      	bne.n	8011b46 <__gethex+0xb6>
 8011b54:	1bad      	subs	r5, r5, r6
 8011b56:	00ad      	lsls	r5, r5, #2
 8011b58:	e004      	b.n	8011b64 <__gethex+0xd4>
 8011b5a:	2400      	movs	r4, #0
 8011b5c:	4625      	mov	r5, r4
 8011b5e:	e7e0      	b.n	8011b22 <__gethex+0x92>
 8011b60:	2d00      	cmp	r5, #0
 8011b62:	d1f7      	bne.n	8011b54 <__gethex+0xc4>
 8011b64:	7833      	ldrb	r3, [r6, #0]
 8011b66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011b6a:	2b50      	cmp	r3, #80	; 0x50
 8011b6c:	d13b      	bne.n	8011be6 <__gethex+0x156>
 8011b6e:	7873      	ldrb	r3, [r6, #1]
 8011b70:	2b2b      	cmp	r3, #43	; 0x2b
 8011b72:	d02c      	beq.n	8011bce <__gethex+0x13e>
 8011b74:	2b2d      	cmp	r3, #45	; 0x2d
 8011b76:	d02e      	beq.n	8011bd6 <__gethex+0x146>
 8011b78:	1c71      	adds	r1, r6, #1
 8011b7a:	f04f 0900 	mov.w	r9, #0
 8011b7e:	7808      	ldrb	r0, [r1, #0]
 8011b80:	f7ff ff71 	bl	8011a66 <__hexdig_fun>
 8011b84:	1e43      	subs	r3, r0, #1
 8011b86:	b2db      	uxtb	r3, r3
 8011b88:	2b18      	cmp	r3, #24
 8011b8a:	d82c      	bhi.n	8011be6 <__gethex+0x156>
 8011b8c:	f1a0 0210 	sub.w	r2, r0, #16
 8011b90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011b94:	f7ff ff67 	bl	8011a66 <__hexdig_fun>
 8011b98:	1e43      	subs	r3, r0, #1
 8011b9a:	b2db      	uxtb	r3, r3
 8011b9c:	2b18      	cmp	r3, #24
 8011b9e:	d91d      	bls.n	8011bdc <__gethex+0x14c>
 8011ba0:	f1b9 0f00 	cmp.w	r9, #0
 8011ba4:	d000      	beq.n	8011ba8 <__gethex+0x118>
 8011ba6:	4252      	negs	r2, r2
 8011ba8:	4415      	add	r5, r2
 8011baa:	f8cb 1000 	str.w	r1, [fp]
 8011bae:	b1e4      	cbz	r4, 8011bea <__gethex+0x15a>
 8011bb0:	9b00      	ldr	r3, [sp, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	bf14      	ite	ne
 8011bb6:	2700      	movne	r7, #0
 8011bb8:	2706      	moveq	r7, #6
 8011bba:	4638      	mov	r0, r7
 8011bbc:	b009      	add	sp, #36	; 0x24
 8011bbe:	ecbd 8b02 	vpop	{d8}
 8011bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bc6:	463e      	mov	r6, r7
 8011bc8:	4625      	mov	r5, r4
 8011bca:	2401      	movs	r4, #1
 8011bcc:	e7ca      	b.n	8011b64 <__gethex+0xd4>
 8011bce:	f04f 0900 	mov.w	r9, #0
 8011bd2:	1cb1      	adds	r1, r6, #2
 8011bd4:	e7d3      	b.n	8011b7e <__gethex+0xee>
 8011bd6:	f04f 0901 	mov.w	r9, #1
 8011bda:	e7fa      	b.n	8011bd2 <__gethex+0x142>
 8011bdc:	230a      	movs	r3, #10
 8011bde:	fb03 0202 	mla	r2, r3, r2, r0
 8011be2:	3a10      	subs	r2, #16
 8011be4:	e7d4      	b.n	8011b90 <__gethex+0x100>
 8011be6:	4631      	mov	r1, r6
 8011be8:	e7df      	b.n	8011baa <__gethex+0x11a>
 8011bea:	1bf3      	subs	r3, r6, r7
 8011bec:	3b01      	subs	r3, #1
 8011bee:	4621      	mov	r1, r4
 8011bf0:	2b07      	cmp	r3, #7
 8011bf2:	dc0b      	bgt.n	8011c0c <__gethex+0x17c>
 8011bf4:	ee18 0a10 	vmov	r0, s16
 8011bf8:	f000 faec 	bl	80121d4 <_Balloc>
 8011bfc:	4604      	mov	r4, r0
 8011bfe:	b940      	cbnz	r0, 8011c12 <__gethex+0x182>
 8011c00:	4b5d      	ldr	r3, [pc, #372]	; (8011d78 <__gethex+0x2e8>)
 8011c02:	4602      	mov	r2, r0
 8011c04:	21de      	movs	r1, #222	; 0xde
 8011c06:	485d      	ldr	r0, [pc, #372]	; (8011d7c <__gethex+0x2ec>)
 8011c08:	f001 ffaa 	bl	8013b60 <__assert_func>
 8011c0c:	3101      	adds	r1, #1
 8011c0e:	105b      	asrs	r3, r3, #1
 8011c10:	e7ee      	b.n	8011bf0 <__gethex+0x160>
 8011c12:	f100 0914 	add.w	r9, r0, #20
 8011c16:	f04f 0b00 	mov.w	fp, #0
 8011c1a:	f1ca 0301 	rsb	r3, sl, #1
 8011c1e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011c22:	f8cd b000 	str.w	fp, [sp]
 8011c26:	9306      	str	r3, [sp, #24]
 8011c28:	42b7      	cmp	r7, r6
 8011c2a:	d340      	bcc.n	8011cae <__gethex+0x21e>
 8011c2c:	9802      	ldr	r0, [sp, #8]
 8011c2e:	9b00      	ldr	r3, [sp, #0]
 8011c30:	f840 3b04 	str.w	r3, [r0], #4
 8011c34:	eba0 0009 	sub.w	r0, r0, r9
 8011c38:	1080      	asrs	r0, r0, #2
 8011c3a:	0146      	lsls	r6, r0, #5
 8011c3c:	6120      	str	r0, [r4, #16]
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f000 fbba 	bl	80123b8 <__hi0bits>
 8011c44:	1a30      	subs	r0, r6, r0
 8011c46:	f8d8 6000 	ldr.w	r6, [r8]
 8011c4a:	42b0      	cmp	r0, r6
 8011c4c:	dd63      	ble.n	8011d16 <__gethex+0x286>
 8011c4e:	1b87      	subs	r7, r0, r6
 8011c50:	4639      	mov	r1, r7
 8011c52:	4620      	mov	r0, r4
 8011c54:	f000 ff5e 	bl	8012b14 <__any_on>
 8011c58:	4682      	mov	sl, r0
 8011c5a:	b1a8      	cbz	r0, 8011c88 <__gethex+0x1f8>
 8011c5c:	1e7b      	subs	r3, r7, #1
 8011c5e:	1159      	asrs	r1, r3, #5
 8011c60:	f003 021f 	and.w	r2, r3, #31
 8011c64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011c68:	f04f 0a01 	mov.w	sl, #1
 8011c6c:	fa0a f202 	lsl.w	r2, sl, r2
 8011c70:	420a      	tst	r2, r1
 8011c72:	d009      	beq.n	8011c88 <__gethex+0x1f8>
 8011c74:	4553      	cmp	r3, sl
 8011c76:	dd05      	ble.n	8011c84 <__gethex+0x1f4>
 8011c78:	1eb9      	subs	r1, r7, #2
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	f000 ff4a 	bl	8012b14 <__any_on>
 8011c80:	2800      	cmp	r0, #0
 8011c82:	d145      	bne.n	8011d10 <__gethex+0x280>
 8011c84:	f04f 0a02 	mov.w	sl, #2
 8011c88:	4639      	mov	r1, r7
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	f7ff fe99 	bl	80119c2 <rshift>
 8011c90:	443d      	add	r5, r7
 8011c92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011c96:	42ab      	cmp	r3, r5
 8011c98:	da4c      	bge.n	8011d34 <__gethex+0x2a4>
 8011c9a:	ee18 0a10 	vmov	r0, s16
 8011c9e:	4621      	mov	r1, r4
 8011ca0:	f000 fad8 	bl	8012254 <_Bfree>
 8011ca4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	6013      	str	r3, [r2, #0]
 8011caa:	27a3      	movs	r7, #163	; 0xa3
 8011cac:	e785      	b.n	8011bba <__gethex+0x12a>
 8011cae:	1e73      	subs	r3, r6, #1
 8011cb0:	9a05      	ldr	r2, [sp, #20]
 8011cb2:	9303      	str	r3, [sp, #12]
 8011cb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d019      	beq.n	8011cf0 <__gethex+0x260>
 8011cbc:	f1bb 0f20 	cmp.w	fp, #32
 8011cc0:	d107      	bne.n	8011cd2 <__gethex+0x242>
 8011cc2:	9b02      	ldr	r3, [sp, #8]
 8011cc4:	9a00      	ldr	r2, [sp, #0]
 8011cc6:	f843 2b04 	str.w	r2, [r3], #4
 8011cca:	9302      	str	r3, [sp, #8]
 8011ccc:	2300      	movs	r3, #0
 8011cce:	9300      	str	r3, [sp, #0]
 8011cd0:	469b      	mov	fp, r3
 8011cd2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011cd6:	f7ff fec6 	bl	8011a66 <__hexdig_fun>
 8011cda:	9b00      	ldr	r3, [sp, #0]
 8011cdc:	f000 000f 	and.w	r0, r0, #15
 8011ce0:	fa00 f00b 	lsl.w	r0, r0, fp
 8011ce4:	4303      	orrs	r3, r0
 8011ce6:	9300      	str	r3, [sp, #0]
 8011ce8:	f10b 0b04 	add.w	fp, fp, #4
 8011cec:	9b03      	ldr	r3, [sp, #12]
 8011cee:	e00d      	b.n	8011d0c <__gethex+0x27c>
 8011cf0:	9b03      	ldr	r3, [sp, #12]
 8011cf2:	9a06      	ldr	r2, [sp, #24]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	42bb      	cmp	r3, r7
 8011cf8:	d3e0      	bcc.n	8011cbc <__gethex+0x22c>
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	9901      	ldr	r1, [sp, #4]
 8011cfe:	9307      	str	r3, [sp, #28]
 8011d00:	4652      	mov	r2, sl
 8011d02:	f001 fe5d 	bl	80139c0 <strncmp>
 8011d06:	9b07      	ldr	r3, [sp, #28]
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	d1d7      	bne.n	8011cbc <__gethex+0x22c>
 8011d0c:	461e      	mov	r6, r3
 8011d0e:	e78b      	b.n	8011c28 <__gethex+0x198>
 8011d10:	f04f 0a03 	mov.w	sl, #3
 8011d14:	e7b8      	b.n	8011c88 <__gethex+0x1f8>
 8011d16:	da0a      	bge.n	8011d2e <__gethex+0x29e>
 8011d18:	1a37      	subs	r7, r6, r0
 8011d1a:	4621      	mov	r1, r4
 8011d1c:	ee18 0a10 	vmov	r0, s16
 8011d20:	463a      	mov	r2, r7
 8011d22:	f000 fcb3 	bl	801268c <__lshift>
 8011d26:	1bed      	subs	r5, r5, r7
 8011d28:	4604      	mov	r4, r0
 8011d2a:	f100 0914 	add.w	r9, r0, #20
 8011d2e:	f04f 0a00 	mov.w	sl, #0
 8011d32:	e7ae      	b.n	8011c92 <__gethex+0x202>
 8011d34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011d38:	42a8      	cmp	r0, r5
 8011d3a:	dd72      	ble.n	8011e22 <__gethex+0x392>
 8011d3c:	1b45      	subs	r5, r0, r5
 8011d3e:	42ae      	cmp	r6, r5
 8011d40:	dc36      	bgt.n	8011db0 <__gethex+0x320>
 8011d42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011d46:	2b02      	cmp	r3, #2
 8011d48:	d02a      	beq.n	8011da0 <__gethex+0x310>
 8011d4a:	2b03      	cmp	r3, #3
 8011d4c:	d02c      	beq.n	8011da8 <__gethex+0x318>
 8011d4e:	2b01      	cmp	r3, #1
 8011d50:	d11c      	bne.n	8011d8c <__gethex+0x2fc>
 8011d52:	42ae      	cmp	r6, r5
 8011d54:	d11a      	bne.n	8011d8c <__gethex+0x2fc>
 8011d56:	2e01      	cmp	r6, #1
 8011d58:	d112      	bne.n	8011d80 <__gethex+0x2f0>
 8011d5a:	9a04      	ldr	r2, [sp, #16]
 8011d5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011d60:	6013      	str	r3, [r2, #0]
 8011d62:	2301      	movs	r3, #1
 8011d64:	6123      	str	r3, [r4, #16]
 8011d66:	f8c9 3000 	str.w	r3, [r9]
 8011d6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d6c:	2762      	movs	r7, #98	; 0x62
 8011d6e:	601c      	str	r4, [r3, #0]
 8011d70:	e723      	b.n	8011bba <__gethex+0x12a>
 8011d72:	bf00      	nop
 8011d74:	080154e0 	.word	0x080154e0
 8011d78:	08015407 	.word	0x08015407
 8011d7c:	08015478 	.word	0x08015478
 8011d80:	1e71      	subs	r1, r6, #1
 8011d82:	4620      	mov	r0, r4
 8011d84:	f000 fec6 	bl	8012b14 <__any_on>
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	d1e6      	bne.n	8011d5a <__gethex+0x2ca>
 8011d8c:	ee18 0a10 	vmov	r0, s16
 8011d90:	4621      	mov	r1, r4
 8011d92:	f000 fa5f 	bl	8012254 <_Bfree>
 8011d96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011d98:	2300      	movs	r3, #0
 8011d9a:	6013      	str	r3, [r2, #0]
 8011d9c:	2750      	movs	r7, #80	; 0x50
 8011d9e:	e70c      	b.n	8011bba <__gethex+0x12a>
 8011da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d1f2      	bne.n	8011d8c <__gethex+0x2fc>
 8011da6:	e7d8      	b.n	8011d5a <__gethex+0x2ca>
 8011da8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d1d5      	bne.n	8011d5a <__gethex+0x2ca>
 8011dae:	e7ed      	b.n	8011d8c <__gethex+0x2fc>
 8011db0:	1e6f      	subs	r7, r5, #1
 8011db2:	f1ba 0f00 	cmp.w	sl, #0
 8011db6:	d131      	bne.n	8011e1c <__gethex+0x38c>
 8011db8:	b127      	cbz	r7, 8011dc4 <__gethex+0x334>
 8011dba:	4639      	mov	r1, r7
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	f000 fea9 	bl	8012b14 <__any_on>
 8011dc2:	4682      	mov	sl, r0
 8011dc4:	117b      	asrs	r3, r7, #5
 8011dc6:	2101      	movs	r1, #1
 8011dc8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011dcc:	f007 071f 	and.w	r7, r7, #31
 8011dd0:	fa01 f707 	lsl.w	r7, r1, r7
 8011dd4:	421f      	tst	r7, r3
 8011dd6:	4629      	mov	r1, r5
 8011dd8:	4620      	mov	r0, r4
 8011dda:	bf18      	it	ne
 8011ddc:	f04a 0a02 	orrne.w	sl, sl, #2
 8011de0:	1b76      	subs	r6, r6, r5
 8011de2:	f7ff fdee 	bl	80119c2 <rshift>
 8011de6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011dea:	2702      	movs	r7, #2
 8011dec:	f1ba 0f00 	cmp.w	sl, #0
 8011df0:	d048      	beq.n	8011e84 <__gethex+0x3f4>
 8011df2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011df6:	2b02      	cmp	r3, #2
 8011df8:	d015      	beq.n	8011e26 <__gethex+0x396>
 8011dfa:	2b03      	cmp	r3, #3
 8011dfc:	d017      	beq.n	8011e2e <__gethex+0x39e>
 8011dfe:	2b01      	cmp	r3, #1
 8011e00:	d109      	bne.n	8011e16 <__gethex+0x386>
 8011e02:	f01a 0f02 	tst.w	sl, #2
 8011e06:	d006      	beq.n	8011e16 <__gethex+0x386>
 8011e08:	f8d9 0000 	ldr.w	r0, [r9]
 8011e0c:	ea4a 0a00 	orr.w	sl, sl, r0
 8011e10:	f01a 0f01 	tst.w	sl, #1
 8011e14:	d10e      	bne.n	8011e34 <__gethex+0x3a4>
 8011e16:	f047 0710 	orr.w	r7, r7, #16
 8011e1a:	e033      	b.n	8011e84 <__gethex+0x3f4>
 8011e1c:	f04f 0a01 	mov.w	sl, #1
 8011e20:	e7d0      	b.n	8011dc4 <__gethex+0x334>
 8011e22:	2701      	movs	r7, #1
 8011e24:	e7e2      	b.n	8011dec <__gethex+0x35c>
 8011e26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e28:	f1c3 0301 	rsb	r3, r3, #1
 8011e2c:	9315      	str	r3, [sp, #84]	; 0x54
 8011e2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d0f0      	beq.n	8011e16 <__gethex+0x386>
 8011e34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011e38:	f104 0314 	add.w	r3, r4, #20
 8011e3c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011e40:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011e44:	f04f 0c00 	mov.w	ip, #0
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e4e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011e52:	d01c      	beq.n	8011e8e <__gethex+0x3fe>
 8011e54:	3201      	adds	r2, #1
 8011e56:	6002      	str	r2, [r0, #0]
 8011e58:	2f02      	cmp	r7, #2
 8011e5a:	f104 0314 	add.w	r3, r4, #20
 8011e5e:	d13f      	bne.n	8011ee0 <__gethex+0x450>
 8011e60:	f8d8 2000 	ldr.w	r2, [r8]
 8011e64:	3a01      	subs	r2, #1
 8011e66:	42b2      	cmp	r2, r6
 8011e68:	d10a      	bne.n	8011e80 <__gethex+0x3f0>
 8011e6a:	1171      	asrs	r1, r6, #5
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e72:	f006 061f 	and.w	r6, r6, #31
 8011e76:	fa02 f606 	lsl.w	r6, r2, r6
 8011e7a:	421e      	tst	r6, r3
 8011e7c:	bf18      	it	ne
 8011e7e:	4617      	movne	r7, r2
 8011e80:	f047 0720 	orr.w	r7, r7, #32
 8011e84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e86:	601c      	str	r4, [r3, #0]
 8011e88:	9b04      	ldr	r3, [sp, #16]
 8011e8a:	601d      	str	r5, [r3, #0]
 8011e8c:	e695      	b.n	8011bba <__gethex+0x12a>
 8011e8e:	4299      	cmp	r1, r3
 8011e90:	f843 cc04 	str.w	ip, [r3, #-4]
 8011e94:	d8d8      	bhi.n	8011e48 <__gethex+0x3b8>
 8011e96:	68a3      	ldr	r3, [r4, #8]
 8011e98:	459b      	cmp	fp, r3
 8011e9a:	db19      	blt.n	8011ed0 <__gethex+0x440>
 8011e9c:	6861      	ldr	r1, [r4, #4]
 8011e9e:	ee18 0a10 	vmov	r0, s16
 8011ea2:	3101      	adds	r1, #1
 8011ea4:	f000 f996 	bl	80121d4 <_Balloc>
 8011ea8:	4681      	mov	r9, r0
 8011eaa:	b918      	cbnz	r0, 8011eb4 <__gethex+0x424>
 8011eac:	4b1a      	ldr	r3, [pc, #104]	; (8011f18 <__gethex+0x488>)
 8011eae:	4602      	mov	r2, r0
 8011eb0:	2184      	movs	r1, #132	; 0x84
 8011eb2:	e6a8      	b.n	8011c06 <__gethex+0x176>
 8011eb4:	6922      	ldr	r2, [r4, #16]
 8011eb6:	3202      	adds	r2, #2
 8011eb8:	f104 010c 	add.w	r1, r4, #12
 8011ebc:	0092      	lsls	r2, r2, #2
 8011ebe:	300c      	adds	r0, #12
 8011ec0:	f7fc fda4 	bl	800ea0c <memcpy>
 8011ec4:	4621      	mov	r1, r4
 8011ec6:	ee18 0a10 	vmov	r0, s16
 8011eca:	f000 f9c3 	bl	8012254 <_Bfree>
 8011ece:	464c      	mov	r4, r9
 8011ed0:	6923      	ldr	r3, [r4, #16]
 8011ed2:	1c5a      	adds	r2, r3, #1
 8011ed4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ed8:	6122      	str	r2, [r4, #16]
 8011eda:	2201      	movs	r2, #1
 8011edc:	615a      	str	r2, [r3, #20]
 8011ede:	e7bb      	b.n	8011e58 <__gethex+0x3c8>
 8011ee0:	6922      	ldr	r2, [r4, #16]
 8011ee2:	455a      	cmp	r2, fp
 8011ee4:	dd0b      	ble.n	8011efe <__gethex+0x46e>
 8011ee6:	2101      	movs	r1, #1
 8011ee8:	4620      	mov	r0, r4
 8011eea:	f7ff fd6a 	bl	80119c2 <rshift>
 8011eee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ef2:	3501      	adds	r5, #1
 8011ef4:	42ab      	cmp	r3, r5
 8011ef6:	f6ff aed0 	blt.w	8011c9a <__gethex+0x20a>
 8011efa:	2701      	movs	r7, #1
 8011efc:	e7c0      	b.n	8011e80 <__gethex+0x3f0>
 8011efe:	f016 061f 	ands.w	r6, r6, #31
 8011f02:	d0fa      	beq.n	8011efa <__gethex+0x46a>
 8011f04:	4453      	add	r3, sl
 8011f06:	f1c6 0620 	rsb	r6, r6, #32
 8011f0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011f0e:	f000 fa53 	bl	80123b8 <__hi0bits>
 8011f12:	42b0      	cmp	r0, r6
 8011f14:	dbe7      	blt.n	8011ee6 <__gethex+0x456>
 8011f16:	e7f0      	b.n	8011efa <__gethex+0x46a>
 8011f18:	08015407 	.word	0x08015407

08011f1c <L_shift>:
 8011f1c:	f1c2 0208 	rsb	r2, r2, #8
 8011f20:	0092      	lsls	r2, r2, #2
 8011f22:	b570      	push	{r4, r5, r6, lr}
 8011f24:	f1c2 0620 	rsb	r6, r2, #32
 8011f28:	6843      	ldr	r3, [r0, #4]
 8011f2a:	6804      	ldr	r4, [r0, #0]
 8011f2c:	fa03 f506 	lsl.w	r5, r3, r6
 8011f30:	432c      	orrs	r4, r5
 8011f32:	40d3      	lsrs	r3, r2
 8011f34:	6004      	str	r4, [r0, #0]
 8011f36:	f840 3f04 	str.w	r3, [r0, #4]!
 8011f3a:	4288      	cmp	r0, r1
 8011f3c:	d3f4      	bcc.n	8011f28 <L_shift+0xc>
 8011f3e:	bd70      	pop	{r4, r5, r6, pc}

08011f40 <__match>:
 8011f40:	b530      	push	{r4, r5, lr}
 8011f42:	6803      	ldr	r3, [r0, #0]
 8011f44:	3301      	adds	r3, #1
 8011f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f4a:	b914      	cbnz	r4, 8011f52 <__match+0x12>
 8011f4c:	6003      	str	r3, [r0, #0]
 8011f4e:	2001      	movs	r0, #1
 8011f50:	bd30      	pop	{r4, r5, pc}
 8011f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011f5a:	2d19      	cmp	r5, #25
 8011f5c:	bf98      	it	ls
 8011f5e:	3220      	addls	r2, #32
 8011f60:	42a2      	cmp	r2, r4
 8011f62:	d0f0      	beq.n	8011f46 <__match+0x6>
 8011f64:	2000      	movs	r0, #0
 8011f66:	e7f3      	b.n	8011f50 <__match+0x10>

08011f68 <__hexnan>:
 8011f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f6c:	680b      	ldr	r3, [r1, #0]
 8011f6e:	115e      	asrs	r6, r3, #5
 8011f70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011f74:	f013 031f 	ands.w	r3, r3, #31
 8011f78:	b087      	sub	sp, #28
 8011f7a:	bf18      	it	ne
 8011f7c:	3604      	addne	r6, #4
 8011f7e:	2500      	movs	r5, #0
 8011f80:	1f37      	subs	r7, r6, #4
 8011f82:	4690      	mov	r8, r2
 8011f84:	6802      	ldr	r2, [r0, #0]
 8011f86:	9301      	str	r3, [sp, #4]
 8011f88:	4682      	mov	sl, r0
 8011f8a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011f8e:	46b9      	mov	r9, r7
 8011f90:	463c      	mov	r4, r7
 8011f92:	9502      	str	r5, [sp, #8]
 8011f94:	46ab      	mov	fp, r5
 8011f96:	7851      	ldrb	r1, [r2, #1]
 8011f98:	1c53      	adds	r3, r2, #1
 8011f9a:	9303      	str	r3, [sp, #12]
 8011f9c:	b341      	cbz	r1, 8011ff0 <__hexnan+0x88>
 8011f9e:	4608      	mov	r0, r1
 8011fa0:	9205      	str	r2, [sp, #20]
 8011fa2:	9104      	str	r1, [sp, #16]
 8011fa4:	f7ff fd5f 	bl	8011a66 <__hexdig_fun>
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	d14f      	bne.n	801204c <__hexnan+0xe4>
 8011fac:	9904      	ldr	r1, [sp, #16]
 8011fae:	9a05      	ldr	r2, [sp, #20]
 8011fb0:	2920      	cmp	r1, #32
 8011fb2:	d818      	bhi.n	8011fe6 <__hexnan+0x7e>
 8011fb4:	9b02      	ldr	r3, [sp, #8]
 8011fb6:	459b      	cmp	fp, r3
 8011fb8:	dd13      	ble.n	8011fe2 <__hexnan+0x7a>
 8011fba:	454c      	cmp	r4, r9
 8011fbc:	d206      	bcs.n	8011fcc <__hexnan+0x64>
 8011fbe:	2d07      	cmp	r5, #7
 8011fc0:	dc04      	bgt.n	8011fcc <__hexnan+0x64>
 8011fc2:	462a      	mov	r2, r5
 8011fc4:	4649      	mov	r1, r9
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	f7ff ffa8 	bl	8011f1c <L_shift>
 8011fcc:	4544      	cmp	r4, r8
 8011fce:	d950      	bls.n	8012072 <__hexnan+0x10a>
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	f1a4 0904 	sub.w	r9, r4, #4
 8011fd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8011fda:	f8cd b008 	str.w	fp, [sp, #8]
 8011fde:	464c      	mov	r4, r9
 8011fe0:	461d      	mov	r5, r3
 8011fe2:	9a03      	ldr	r2, [sp, #12]
 8011fe4:	e7d7      	b.n	8011f96 <__hexnan+0x2e>
 8011fe6:	2929      	cmp	r1, #41	; 0x29
 8011fe8:	d156      	bne.n	8012098 <__hexnan+0x130>
 8011fea:	3202      	adds	r2, #2
 8011fec:	f8ca 2000 	str.w	r2, [sl]
 8011ff0:	f1bb 0f00 	cmp.w	fp, #0
 8011ff4:	d050      	beq.n	8012098 <__hexnan+0x130>
 8011ff6:	454c      	cmp	r4, r9
 8011ff8:	d206      	bcs.n	8012008 <__hexnan+0xa0>
 8011ffa:	2d07      	cmp	r5, #7
 8011ffc:	dc04      	bgt.n	8012008 <__hexnan+0xa0>
 8011ffe:	462a      	mov	r2, r5
 8012000:	4649      	mov	r1, r9
 8012002:	4620      	mov	r0, r4
 8012004:	f7ff ff8a 	bl	8011f1c <L_shift>
 8012008:	4544      	cmp	r4, r8
 801200a:	d934      	bls.n	8012076 <__hexnan+0x10e>
 801200c:	f1a8 0204 	sub.w	r2, r8, #4
 8012010:	4623      	mov	r3, r4
 8012012:	f853 1b04 	ldr.w	r1, [r3], #4
 8012016:	f842 1f04 	str.w	r1, [r2, #4]!
 801201a:	429f      	cmp	r7, r3
 801201c:	d2f9      	bcs.n	8012012 <__hexnan+0xaa>
 801201e:	1b3b      	subs	r3, r7, r4
 8012020:	f023 0303 	bic.w	r3, r3, #3
 8012024:	3304      	adds	r3, #4
 8012026:	3401      	adds	r4, #1
 8012028:	3e03      	subs	r6, #3
 801202a:	42b4      	cmp	r4, r6
 801202c:	bf88      	it	hi
 801202e:	2304      	movhi	r3, #4
 8012030:	4443      	add	r3, r8
 8012032:	2200      	movs	r2, #0
 8012034:	f843 2b04 	str.w	r2, [r3], #4
 8012038:	429f      	cmp	r7, r3
 801203a:	d2fb      	bcs.n	8012034 <__hexnan+0xcc>
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	b91b      	cbnz	r3, 8012048 <__hexnan+0xe0>
 8012040:	4547      	cmp	r7, r8
 8012042:	d127      	bne.n	8012094 <__hexnan+0x12c>
 8012044:	2301      	movs	r3, #1
 8012046:	603b      	str	r3, [r7, #0]
 8012048:	2005      	movs	r0, #5
 801204a:	e026      	b.n	801209a <__hexnan+0x132>
 801204c:	3501      	adds	r5, #1
 801204e:	2d08      	cmp	r5, #8
 8012050:	f10b 0b01 	add.w	fp, fp, #1
 8012054:	dd06      	ble.n	8012064 <__hexnan+0xfc>
 8012056:	4544      	cmp	r4, r8
 8012058:	d9c3      	bls.n	8011fe2 <__hexnan+0x7a>
 801205a:	2300      	movs	r3, #0
 801205c:	f844 3c04 	str.w	r3, [r4, #-4]
 8012060:	2501      	movs	r5, #1
 8012062:	3c04      	subs	r4, #4
 8012064:	6822      	ldr	r2, [r4, #0]
 8012066:	f000 000f 	and.w	r0, r0, #15
 801206a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801206e:	6022      	str	r2, [r4, #0]
 8012070:	e7b7      	b.n	8011fe2 <__hexnan+0x7a>
 8012072:	2508      	movs	r5, #8
 8012074:	e7b5      	b.n	8011fe2 <__hexnan+0x7a>
 8012076:	9b01      	ldr	r3, [sp, #4]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d0df      	beq.n	801203c <__hexnan+0xd4>
 801207c:	f04f 32ff 	mov.w	r2, #4294967295
 8012080:	f1c3 0320 	rsb	r3, r3, #32
 8012084:	fa22 f303 	lsr.w	r3, r2, r3
 8012088:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801208c:	401a      	ands	r2, r3
 801208e:	f846 2c04 	str.w	r2, [r6, #-4]
 8012092:	e7d3      	b.n	801203c <__hexnan+0xd4>
 8012094:	3f04      	subs	r7, #4
 8012096:	e7d1      	b.n	801203c <__hexnan+0xd4>
 8012098:	2004      	movs	r0, #4
 801209a:	b007      	add	sp, #28
 801209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080120a0 <_localeconv_r>:
 80120a0:	4800      	ldr	r0, [pc, #0]	; (80120a4 <_localeconv_r+0x4>)
 80120a2:	4770      	bx	lr
 80120a4:	20000268 	.word	0x20000268

080120a8 <__retarget_lock_init_recursive>:
 80120a8:	4770      	bx	lr

080120aa <__retarget_lock_acquire_recursive>:
 80120aa:	4770      	bx	lr

080120ac <__retarget_lock_release_recursive>:
 80120ac:	4770      	bx	lr
	...

080120b0 <_lseek_r>:
 80120b0:	b538      	push	{r3, r4, r5, lr}
 80120b2:	4d07      	ldr	r5, [pc, #28]	; (80120d0 <_lseek_r+0x20>)
 80120b4:	4604      	mov	r4, r0
 80120b6:	4608      	mov	r0, r1
 80120b8:	4611      	mov	r1, r2
 80120ba:	2200      	movs	r2, #0
 80120bc:	602a      	str	r2, [r5, #0]
 80120be:	461a      	mov	r2, r3
 80120c0:	f7f2 f962 	bl	8004388 <_lseek>
 80120c4:	1c43      	adds	r3, r0, #1
 80120c6:	d102      	bne.n	80120ce <_lseek_r+0x1e>
 80120c8:	682b      	ldr	r3, [r5, #0]
 80120ca:	b103      	cbz	r3, 80120ce <_lseek_r+0x1e>
 80120cc:	6023      	str	r3, [r4, #0]
 80120ce:	bd38      	pop	{r3, r4, r5, pc}
 80120d0:	2000314c 	.word	0x2000314c

080120d4 <__swhatbuf_r>:
 80120d4:	b570      	push	{r4, r5, r6, lr}
 80120d6:	460e      	mov	r6, r1
 80120d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120dc:	2900      	cmp	r1, #0
 80120de:	b096      	sub	sp, #88	; 0x58
 80120e0:	4614      	mov	r4, r2
 80120e2:	461d      	mov	r5, r3
 80120e4:	da08      	bge.n	80120f8 <__swhatbuf_r+0x24>
 80120e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80120ea:	2200      	movs	r2, #0
 80120ec:	602a      	str	r2, [r5, #0]
 80120ee:	061a      	lsls	r2, r3, #24
 80120f0:	d410      	bmi.n	8012114 <__swhatbuf_r+0x40>
 80120f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120f6:	e00e      	b.n	8012116 <__swhatbuf_r+0x42>
 80120f8:	466a      	mov	r2, sp
 80120fa:	f001 fd61 	bl	8013bc0 <_fstat_r>
 80120fe:	2800      	cmp	r0, #0
 8012100:	dbf1      	blt.n	80120e6 <__swhatbuf_r+0x12>
 8012102:	9a01      	ldr	r2, [sp, #4]
 8012104:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012108:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801210c:	425a      	negs	r2, r3
 801210e:	415a      	adcs	r2, r3
 8012110:	602a      	str	r2, [r5, #0]
 8012112:	e7ee      	b.n	80120f2 <__swhatbuf_r+0x1e>
 8012114:	2340      	movs	r3, #64	; 0x40
 8012116:	2000      	movs	r0, #0
 8012118:	6023      	str	r3, [r4, #0]
 801211a:	b016      	add	sp, #88	; 0x58
 801211c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012120 <__smakebuf_r>:
 8012120:	898b      	ldrh	r3, [r1, #12]
 8012122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012124:	079d      	lsls	r5, r3, #30
 8012126:	4606      	mov	r6, r0
 8012128:	460c      	mov	r4, r1
 801212a:	d507      	bpl.n	801213c <__smakebuf_r+0x1c>
 801212c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012130:	6023      	str	r3, [r4, #0]
 8012132:	6123      	str	r3, [r4, #16]
 8012134:	2301      	movs	r3, #1
 8012136:	6163      	str	r3, [r4, #20]
 8012138:	b002      	add	sp, #8
 801213a:	bd70      	pop	{r4, r5, r6, pc}
 801213c:	ab01      	add	r3, sp, #4
 801213e:	466a      	mov	r2, sp
 8012140:	f7ff ffc8 	bl	80120d4 <__swhatbuf_r>
 8012144:	9900      	ldr	r1, [sp, #0]
 8012146:	4605      	mov	r5, r0
 8012148:	4630      	mov	r0, r6
 801214a:	f000 fd87 	bl	8012c5c <_malloc_r>
 801214e:	b948      	cbnz	r0, 8012164 <__smakebuf_r+0x44>
 8012150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012154:	059a      	lsls	r2, r3, #22
 8012156:	d4ef      	bmi.n	8012138 <__smakebuf_r+0x18>
 8012158:	f023 0303 	bic.w	r3, r3, #3
 801215c:	f043 0302 	orr.w	r3, r3, #2
 8012160:	81a3      	strh	r3, [r4, #12]
 8012162:	e7e3      	b.n	801212c <__smakebuf_r+0xc>
 8012164:	4b0d      	ldr	r3, [pc, #52]	; (801219c <__smakebuf_r+0x7c>)
 8012166:	62b3      	str	r3, [r6, #40]	; 0x28
 8012168:	89a3      	ldrh	r3, [r4, #12]
 801216a:	6020      	str	r0, [r4, #0]
 801216c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012170:	81a3      	strh	r3, [r4, #12]
 8012172:	9b00      	ldr	r3, [sp, #0]
 8012174:	6163      	str	r3, [r4, #20]
 8012176:	9b01      	ldr	r3, [sp, #4]
 8012178:	6120      	str	r0, [r4, #16]
 801217a:	b15b      	cbz	r3, 8012194 <__smakebuf_r+0x74>
 801217c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012180:	4630      	mov	r0, r6
 8012182:	f001 fd2f 	bl	8013be4 <_isatty_r>
 8012186:	b128      	cbz	r0, 8012194 <__smakebuf_r+0x74>
 8012188:	89a3      	ldrh	r3, [r4, #12]
 801218a:	f023 0303 	bic.w	r3, r3, #3
 801218e:	f043 0301 	orr.w	r3, r3, #1
 8012192:	81a3      	strh	r3, [r4, #12]
 8012194:	89a0      	ldrh	r0, [r4, #12]
 8012196:	4305      	orrs	r5, r0
 8012198:	81a5      	strh	r5, [r4, #12]
 801219a:	e7cd      	b.n	8012138 <__smakebuf_r+0x18>
 801219c:	08011821 	.word	0x08011821

080121a0 <malloc>:
 80121a0:	4b02      	ldr	r3, [pc, #8]	; (80121ac <malloc+0xc>)
 80121a2:	4601      	mov	r1, r0
 80121a4:	6818      	ldr	r0, [r3, #0]
 80121a6:	f000 bd59 	b.w	8012c5c <_malloc_r>
 80121aa:	bf00      	nop
 80121ac:	20000110 	.word	0x20000110

080121b0 <__ascii_mbtowc>:
 80121b0:	b082      	sub	sp, #8
 80121b2:	b901      	cbnz	r1, 80121b6 <__ascii_mbtowc+0x6>
 80121b4:	a901      	add	r1, sp, #4
 80121b6:	b142      	cbz	r2, 80121ca <__ascii_mbtowc+0x1a>
 80121b8:	b14b      	cbz	r3, 80121ce <__ascii_mbtowc+0x1e>
 80121ba:	7813      	ldrb	r3, [r2, #0]
 80121bc:	600b      	str	r3, [r1, #0]
 80121be:	7812      	ldrb	r2, [r2, #0]
 80121c0:	1e10      	subs	r0, r2, #0
 80121c2:	bf18      	it	ne
 80121c4:	2001      	movne	r0, #1
 80121c6:	b002      	add	sp, #8
 80121c8:	4770      	bx	lr
 80121ca:	4610      	mov	r0, r2
 80121cc:	e7fb      	b.n	80121c6 <__ascii_mbtowc+0x16>
 80121ce:	f06f 0001 	mvn.w	r0, #1
 80121d2:	e7f8      	b.n	80121c6 <__ascii_mbtowc+0x16>

080121d4 <_Balloc>:
 80121d4:	b570      	push	{r4, r5, r6, lr}
 80121d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80121d8:	4604      	mov	r4, r0
 80121da:	460d      	mov	r5, r1
 80121dc:	b976      	cbnz	r6, 80121fc <_Balloc+0x28>
 80121de:	2010      	movs	r0, #16
 80121e0:	f7ff ffde 	bl	80121a0 <malloc>
 80121e4:	4602      	mov	r2, r0
 80121e6:	6260      	str	r0, [r4, #36]	; 0x24
 80121e8:	b920      	cbnz	r0, 80121f4 <_Balloc+0x20>
 80121ea:	4b18      	ldr	r3, [pc, #96]	; (801224c <_Balloc+0x78>)
 80121ec:	4818      	ldr	r0, [pc, #96]	; (8012250 <_Balloc+0x7c>)
 80121ee:	2166      	movs	r1, #102	; 0x66
 80121f0:	f001 fcb6 	bl	8013b60 <__assert_func>
 80121f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80121f8:	6006      	str	r6, [r0, #0]
 80121fa:	60c6      	str	r6, [r0, #12]
 80121fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80121fe:	68f3      	ldr	r3, [r6, #12]
 8012200:	b183      	cbz	r3, 8012224 <_Balloc+0x50>
 8012202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012204:	68db      	ldr	r3, [r3, #12]
 8012206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801220a:	b9b8      	cbnz	r0, 801223c <_Balloc+0x68>
 801220c:	2101      	movs	r1, #1
 801220e:	fa01 f605 	lsl.w	r6, r1, r5
 8012212:	1d72      	adds	r2, r6, #5
 8012214:	0092      	lsls	r2, r2, #2
 8012216:	4620      	mov	r0, r4
 8012218:	f000 fc9d 	bl	8012b56 <_calloc_r>
 801221c:	b160      	cbz	r0, 8012238 <_Balloc+0x64>
 801221e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012222:	e00e      	b.n	8012242 <_Balloc+0x6e>
 8012224:	2221      	movs	r2, #33	; 0x21
 8012226:	2104      	movs	r1, #4
 8012228:	4620      	mov	r0, r4
 801222a:	f000 fc94 	bl	8012b56 <_calloc_r>
 801222e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012230:	60f0      	str	r0, [r6, #12]
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d1e4      	bne.n	8012202 <_Balloc+0x2e>
 8012238:	2000      	movs	r0, #0
 801223a:	bd70      	pop	{r4, r5, r6, pc}
 801223c:	6802      	ldr	r2, [r0, #0]
 801223e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012242:	2300      	movs	r3, #0
 8012244:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012248:	e7f7      	b.n	801223a <_Balloc+0x66>
 801224a:	bf00      	nop
 801224c:	08015395 	.word	0x08015395
 8012250:	080154f4 	.word	0x080154f4

08012254 <_Bfree>:
 8012254:	b570      	push	{r4, r5, r6, lr}
 8012256:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012258:	4605      	mov	r5, r0
 801225a:	460c      	mov	r4, r1
 801225c:	b976      	cbnz	r6, 801227c <_Bfree+0x28>
 801225e:	2010      	movs	r0, #16
 8012260:	f7ff ff9e 	bl	80121a0 <malloc>
 8012264:	4602      	mov	r2, r0
 8012266:	6268      	str	r0, [r5, #36]	; 0x24
 8012268:	b920      	cbnz	r0, 8012274 <_Bfree+0x20>
 801226a:	4b09      	ldr	r3, [pc, #36]	; (8012290 <_Bfree+0x3c>)
 801226c:	4809      	ldr	r0, [pc, #36]	; (8012294 <_Bfree+0x40>)
 801226e:	218a      	movs	r1, #138	; 0x8a
 8012270:	f001 fc76 	bl	8013b60 <__assert_func>
 8012274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012278:	6006      	str	r6, [r0, #0]
 801227a:	60c6      	str	r6, [r0, #12]
 801227c:	b13c      	cbz	r4, 801228e <_Bfree+0x3a>
 801227e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012280:	6862      	ldr	r2, [r4, #4]
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012288:	6021      	str	r1, [r4, #0]
 801228a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801228e:	bd70      	pop	{r4, r5, r6, pc}
 8012290:	08015395 	.word	0x08015395
 8012294:	080154f4 	.word	0x080154f4

08012298 <__multadd>:
 8012298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801229c:	690d      	ldr	r5, [r1, #16]
 801229e:	4607      	mov	r7, r0
 80122a0:	460c      	mov	r4, r1
 80122a2:	461e      	mov	r6, r3
 80122a4:	f101 0c14 	add.w	ip, r1, #20
 80122a8:	2000      	movs	r0, #0
 80122aa:	f8dc 3000 	ldr.w	r3, [ip]
 80122ae:	b299      	uxth	r1, r3
 80122b0:	fb02 6101 	mla	r1, r2, r1, r6
 80122b4:	0c1e      	lsrs	r6, r3, #16
 80122b6:	0c0b      	lsrs	r3, r1, #16
 80122b8:	fb02 3306 	mla	r3, r2, r6, r3
 80122bc:	b289      	uxth	r1, r1
 80122be:	3001      	adds	r0, #1
 80122c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80122c4:	4285      	cmp	r5, r0
 80122c6:	f84c 1b04 	str.w	r1, [ip], #4
 80122ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80122ce:	dcec      	bgt.n	80122aa <__multadd+0x12>
 80122d0:	b30e      	cbz	r6, 8012316 <__multadd+0x7e>
 80122d2:	68a3      	ldr	r3, [r4, #8]
 80122d4:	42ab      	cmp	r3, r5
 80122d6:	dc19      	bgt.n	801230c <__multadd+0x74>
 80122d8:	6861      	ldr	r1, [r4, #4]
 80122da:	4638      	mov	r0, r7
 80122dc:	3101      	adds	r1, #1
 80122de:	f7ff ff79 	bl	80121d4 <_Balloc>
 80122e2:	4680      	mov	r8, r0
 80122e4:	b928      	cbnz	r0, 80122f2 <__multadd+0x5a>
 80122e6:	4602      	mov	r2, r0
 80122e8:	4b0c      	ldr	r3, [pc, #48]	; (801231c <__multadd+0x84>)
 80122ea:	480d      	ldr	r0, [pc, #52]	; (8012320 <__multadd+0x88>)
 80122ec:	21b5      	movs	r1, #181	; 0xb5
 80122ee:	f001 fc37 	bl	8013b60 <__assert_func>
 80122f2:	6922      	ldr	r2, [r4, #16]
 80122f4:	3202      	adds	r2, #2
 80122f6:	f104 010c 	add.w	r1, r4, #12
 80122fa:	0092      	lsls	r2, r2, #2
 80122fc:	300c      	adds	r0, #12
 80122fe:	f7fc fb85 	bl	800ea0c <memcpy>
 8012302:	4621      	mov	r1, r4
 8012304:	4638      	mov	r0, r7
 8012306:	f7ff ffa5 	bl	8012254 <_Bfree>
 801230a:	4644      	mov	r4, r8
 801230c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012310:	3501      	adds	r5, #1
 8012312:	615e      	str	r6, [r3, #20]
 8012314:	6125      	str	r5, [r4, #16]
 8012316:	4620      	mov	r0, r4
 8012318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801231c:	08015407 	.word	0x08015407
 8012320:	080154f4 	.word	0x080154f4

08012324 <__s2b>:
 8012324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012328:	460c      	mov	r4, r1
 801232a:	4615      	mov	r5, r2
 801232c:	461f      	mov	r7, r3
 801232e:	2209      	movs	r2, #9
 8012330:	3308      	adds	r3, #8
 8012332:	4606      	mov	r6, r0
 8012334:	fb93 f3f2 	sdiv	r3, r3, r2
 8012338:	2100      	movs	r1, #0
 801233a:	2201      	movs	r2, #1
 801233c:	429a      	cmp	r2, r3
 801233e:	db09      	blt.n	8012354 <__s2b+0x30>
 8012340:	4630      	mov	r0, r6
 8012342:	f7ff ff47 	bl	80121d4 <_Balloc>
 8012346:	b940      	cbnz	r0, 801235a <__s2b+0x36>
 8012348:	4602      	mov	r2, r0
 801234a:	4b19      	ldr	r3, [pc, #100]	; (80123b0 <__s2b+0x8c>)
 801234c:	4819      	ldr	r0, [pc, #100]	; (80123b4 <__s2b+0x90>)
 801234e:	21ce      	movs	r1, #206	; 0xce
 8012350:	f001 fc06 	bl	8013b60 <__assert_func>
 8012354:	0052      	lsls	r2, r2, #1
 8012356:	3101      	adds	r1, #1
 8012358:	e7f0      	b.n	801233c <__s2b+0x18>
 801235a:	9b08      	ldr	r3, [sp, #32]
 801235c:	6143      	str	r3, [r0, #20]
 801235e:	2d09      	cmp	r5, #9
 8012360:	f04f 0301 	mov.w	r3, #1
 8012364:	6103      	str	r3, [r0, #16]
 8012366:	dd16      	ble.n	8012396 <__s2b+0x72>
 8012368:	f104 0909 	add.w	r9, r4, #9
 801236c:	46c8      	mov	r8, r9
 801236e:	442c      	add	r4, r5
 8012370:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012374:	4601      	mov	r1, r0
 8012376:	3b30      	subs	r3, #48	; 0x30
 8012378:	220a      	movs	r2, #10
 801237a:	4630      	mov	r0, r6
 801237c:	f7ff ff8c 	bl	8012298 <__multadd>
 8012380:	45a0      	cmp	r8, r4
 8012382:	d1f5      	bne.n	8012370 <__s2b+0x4c>
 8012384:	f1a5 0408 	sub.w	r4, r5, #8
 8012388:	444c      	add	r4, r9
 801238a:	1b2d      	subs	r5, r5, r4
 801238c:	1963      	adds	r3, r4, r5
 801238e:	42bb      	cmp	r3, r7
 8012390:	db04      	blt.n	801239c <__s2b+0x78>
 8012392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012396:	340a      	adds	r4, #10
 8012398:	2509      	movs	r5, #9
 801239a:	e7f6      	b.n	801238a <__s2b+0x66>
 801239c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80123a0:	4601      	mov	r1, r0
 80123a2:	3b30      	subs	r3, #48	; 0x30
 80123a4:	220a      	movs	r2, #10
 80123a6:	4630      	mov	r0, r6
 80123a8:	f7ff ff76 	bl	8012298 <__multadd>
 80123ac:	e7ee      	b.n	801238c <__s2b+0x68>
 80123ae:	bf00      	nop
 80123b0:	08015407 	.word	0x08015407
 80123b4:	080154f4 	.word	0x080154f4

080123b8 <__hi0bits>:
 80123b8:	0c03      	lsrs	r3, r0, #16
 80123ba:	041b      	lsls	r3, r3, #16
 80123bc:	b9d3      	cbnz	r3, 80123f4 <__hi0bits+0x3c>
 80123be:	0400      	lsls	r0, r0, #16
 80123c0:	2310      	movs	r3, #16
 80123c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80123c6:	bf04      	itt	eq
 80123c8:	0200      	lsleq	r0, r0, #8
 80123ca:	3308      	addeq	r3, #8
 80123cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80123d0:	bf04      	itt	eq
 80123d2:	0100      	lsleq	r0, r0, #4
 80123d4:	3304      	addeq	r3, #4
 80123d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80123da:	bf04      	itt	eq
 80123dc:	0080      	lsleq	r0, r0, #2
 80123de:	3302      	addeq	r3, #2
 80123e0:	2800      	cmp	r0, #0
 80123e2:	db05      	blt.n	80123f0 <__hi0bits+0x38>
 80123e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80123e8:	f103 0301 	add.w	r3, r3, #1
 80123ec:	bf08      	it	eq
 80123ee:	2320      	moveq	r3, #32
 80123f0:	4618      	mov	r0, r3
 80123f2:	4770      	bx	lr
 80123f4:	2300      	movs	r3, #0
 80123f6:	e7e4      	b.n	80123c2 <__hi0bits+0xa>

080123f8 <__lo0bits>:
 80123f8:	6803      	ldr	r3, [r0, #0]
 80123fa:	f013 0207 	ands.w	r2, r3, #7
 80123fe:	4601      	mov	r1, r0
 8012400:	d00b      	beq.n	801241a <__lo0bits+0x22>
 8012402:	07da      	lsls	r2, r3, #31
 8012404:	d423      	bmi.n	801244e <__lo0bits+0x56>
 8012406:	0798      	lsls	r0, r3, #30
 8012408:	bf49      	itett	mi
 801240a:	085b      	lsrmi	r3, r3, #1
 801240c:	089b      	lsrpl	r3, r3, #2
 801240e:	2001      	movmi	r0, #1
 8012410:	600b      	strmi	r3, [r1, #0]
 8012412:	bf5c      	itt	pl
 8012414:	600b      	strpl	r3, [r1, #0]
 8012416:	2002      	movpl	r0, #2
 8012418:	4770      	bx	lr
 801241a:	b298      	uxth	r0, r3
 801241c:	b9a8      	cbnz	r0, 801244a <__lo0bits+0x52>
 801241e:	0c1b      	lsrs	r3, r3, #16
 8012420:	2010      	movs	r0, #16
 8012422:	b2da      	uxtb	r2, r3
 8012424:	b90a      	cbnz	r2, 801242a <__lo0bits+0x32>
 8012426:	3008      	adds	r0, #8
 8012428:	0a1b      	lsrs	r3, r3, #8
 801242a:	071a      	lsls	r2, r3, #28
 801242c:	bf04      	itt	eq
 801242e:	091b      	lsreq	r3, r3, #4
 8012430:	3004      	addeq	r0, #4
 8012432:	079a      	lsls	r2, r3, #30
 8012434:	bf04      	itt	eq
 8012436:	089b      	lsreq	r3, r3, #2
 8012438:	3002      	addeq	r0, #2
 801243a:	07da      	lsls	r2, r3, #31
 801243c:	d403      	bmi.n	8012446 <__lo0bits+0x4e>
 801243e:	085b      	lsrs	r3, r3, #1
 8012440:	f100 0001 	add.w	r0, r0, #1
 8012444:	d005      	beq.n	8012452 <__lo0bits+0x5a>
 8012446:	600b      	str	r3, [r1, #0]
 8012448:	4770      	bx	lr
 801244a:	4610      	mov	r0, r2
 801244c:	e7e9      	b.n	8012422 <__lo0bits+0x2a>
 801244e:	2000      	movs	r0, #0
 8012450:	4770      	bx	lr
 8012452:	2020      	movs	r0, #32
 8012454:	4770      	bx	lr
	...

08012458 <__i2b>:
 8012458:	b510      	push	{r4, lr}
 801245a:	460c      	mov	r4, r1
 801245c:	2101      	movs	r1, #1
 801245e:	f7ff feb9 	bl	80121d4 <_Balloc>
 8012462:	4602      	mov	r2, r0
 8012464:	b928      	cbnz	r0, 8012472 <__i2b+0x1a>
 8012466:	4b05      	ldr	r3, [pc, #20]	; (801247c <__i2b+0x24>)
 8012468:	4805      	ldr	r0, [pc, #20]	; (8012480 <__i2b+0x28>)
 801246a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801246e:	f001 fb77 	bl	8013b60 <__assert_func>
 8012472:	2301      	movs	r3, #1
 8012474:	6144      	str	r4, [r0, #20]
 8012476:	6103      	str	r3, [r0, #16]
 8012478:	bd10      	pop	{r4, pc}
 801247a:	bf00      	nop
 801247c:	08015407 	.word	0x08015407
 8012480:	080154f4 	.word	0x080154f4

08012484 <__multiply>:
 8012484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012488:	4691      	mov	r9, r2
 801248a:	690a      	ldr	r2, [r1, #16]
 801248c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012490:	429a      	cmp	r2, r3
 8012492:	bfb8      	it	lt
 8012494:	460b      	movlt	r3, r1
 8012496:	460c      	mov	r4, r1
 8012498:	bfbc      	itt	lt
 801249a:	464c      	movlt	r4, r9
 801249c:	4699      	movlt	r9, r3
 801249e:	6927      	ldr	r7, [r4, #16]
 80124a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80124a4:	68a3      	ldr	r3, [r4, #8]
 80124a6:	6861      	ldr	r1, [r4, #4]
 80124a8:	eb07 060a 	add.w	r6, r7, sl
 80124ac:	42b3      	cmp	r3, r6
 80124ae:	b085      	sub	sp, #20
 80124b0:	bfb8      	it	lt
 80124b2:	3101      	addlt	r1, #1
 80124b4:	f7ff fe8e 	bl	80121d4 <_Balloc>
 80124b8:	b930      	cbnz	r0, 80124c8 <__multiply+0x44>
 80124ba:	4602      	mov	r2, r0
 80124bc:	4b44      	ldr	r3, [pc, #272]	; (80125d0 <__multiply+0x14c>)
 80124be:	4845      	ldr	r0, [pc, #276]	; (80125d4 <__multiply+0x150>)
 80124c0:	f240 115d 	movw	r1, #349	; 0x15d
 80124c4:	f001 fb4c 	bl	8013b60 <__assert_func>
 80124c8:	f100 0514 	add.w	r5, r0, #20
 80124cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80124d0:	462b      	mov	r3, r5
 80124d2:	2200      	movs	r2, #0
 80124d4:	4543      	cmp	r3, r8
 80124d6:	d321      	bcc.n	801251c <__multiply+0x98>
 80124d8:	f104 0314 	add.w	r3, r4, #20
 80124dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80124e0:	f109 0314 	add.w	r3, r9, #20
 80124e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80124e8:	9202      	str	r2, [sp, #8]
 80124ea:	1b3a      	subs	r2, r7, r4
 80124ec:	3a15      	subs	r2, #21
 80124ee:	f022 0203 	bic.w	r2, r2, #3
 80124f2:	3204      	adds	r2, #4
 80124f4:	f104 0115 	add.w	r1, r4, #21
 80124f8:	428f      	cmp	r7, r1
 80124fa:	bf38      	it	cc
 80124fc:	2204      	movcc	r2, #4
 80124fe:	9201      	str	r2, [sp, #4]
 8012500:	9a02      	ldr	r2, [sp, #8]
 8012502:	9303      	str	r3, [sp, #12]
 8012504:	429a      	cmp	r2, r3
 8012506:	d80c      	bhi.n	8012522 <__multiply+0x9e>
 8012508:	2e00      	cmp	r6, #0
 801250a:	dd03      	ble.n	8012514 <__multiply+0x90>
 801250c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012510:	2b00      	cmp	r3, #0
 8012512:	d05a      	beq.n	80125ca <__multiply+0x146>
 8012514:	6106      	str	r6, [r0, #16]
 8012516:	b005      	add	sp, #20
 8012518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801251c:	f843 2b04 	str.w	r2, [r3], #4
 8012520:	e7d8      	b.n	80124d4 <__multiply+0x50>
 8012522:	f8b3 a000 	ldrh.w	sl, [r3]
 8012526:	f1ba 0f00 	cmp.w	sl, #0
 801252a:	d024      	beq.n	8012576 <__multiply+0xf2>
 801252c:	f104 0e14 	add.w	lr, r4, #20
 8012530:	46a9      	mov	r9, r5
 8012532:	f04f 0c00 	mov.w	ip, #0
 8012536:	f85e 2b04 	ldr.w	r2, [lr], #4
 801253a:	f8d9 1000 	ldr.w	r1, [r9]
 801253e:	fa1f fb82 	uxth.w	fp, r2
 8012542:	b289      	uxth	r1, r1
 8012544:	fb0a 110b 	mla	r1, sl, fp, r1
 8012548:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801254c:	f8d9 2000 	ldr.w	r2, [r9]
 8012550:	4461      	add	r1, ip
 8012552:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012556:	fb0a c20b 	mla	r2, sl, fp, ip
 801255a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801255e:	b289      	uxth	r1, r1
 8012560:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012564:	4577      	cmp	r7, lr
 8012566:	f849 1b04 	str.w	r1, [r9], #4
 801256a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801256e:	d8e2      	bhi.n	8012536 <__multiply+0xb2>
 8012570:	9a01      	ldr	r2, [sp, #4]
 8012572:	f845 c002 	str.w	ip, [r5, r2]
 8012576:	9a03      	ldr	r2, [sp, #12]
 8012578:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801257c:	3304      	adds	r3, #4
 801257e:	f1b9 0f00 	cmp.w	r9, #0
 8012582:	d020      	beq.n	80125c6 <__multiply+0x142>
 8012584:	6829      	ldr	r1, [r5, #0]
 8012586:	f104 0c14 	add.w	ip, r4, #20
 801258a:	46ae      	mov	lr, r5
 801258c:	f04f 0a00 	mov.w	sl, #0
 8012590:	f8bc b000 	ldrh.w	fp, [ip]
 8012594:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012598:	fb09 220b 	mla	r2, r9, fp, r2
 801259c:	4492      	add	sl, r2
 801259e:	b289      	uxth	r1, r1
 80125a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80125a4:	f84e 1b04 	str.w	r1, [lr], #4
 80125a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80125ac:	f8be 1000 	ldrh.w	r1, [lr]
 80125b0:	0c12      	lsrs	r2, r2, #16
 80125b2:	fb09 1102 	mla	r1, r9, r2, r1
 80125b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80125ba:	4567      	cmp	r7, ip
 80125bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80125c0:	d8e6      	bhi.n	8012590 <__multiply+0x10c>
 80125c2:	9a01      	ldr	r2, [sp, #4]
 80125c4:	50a9      	str	r1, [r5, r2]
 80125c6:	3504      	adds	r5, #4
 80125c8:	e79a      	b.n	8012500 <__multiply+0x7c>
 80125ca:	3e01      	subs	r6, #1
 80125cc:	e79c      	b.n	8012508 <__multiply+0x84>
 80125ce:	bf00      	nop
 80125d0:	08015407 	.word	0x08015407
 80125d4:	080154f4 	.word	0x080154f4

080125d8 <__pow5mult>:
 80125d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125dc:	4615      	mov	r5, r2
 80125de:	f012 0203 	ands.w	r2, r2, #3
 80125e2:	4606      	mov	r6, r0
 80125e4:	460f      	mov	r7, r1
 80125e6:	d007      	beq.n	80125f8 <__pow5mult+0x20>
 80125e8:	4c25      	ldr	r4, [pc, #148]	; (8012680 <__pow5mult+0xa8>)
 80125ea:	3a01      	subs	r2, #1
 80125ec:	2300      	movs	r3, #0
 80125ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80125f2:	f7ff fe51 	bl	8012298 <__multadd>
 80125f6:	4607      	mov	r7, r0
 80125f8:	10ad      	asrs	r5, r5, #2
 80125fa:	d03d      	beq.n	8012678 <__pow5mult+0xa0>
 80125fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80125fe:	b97c      	cbnz	r4, 8012620 <__pow5mult+0x48>
 8012600:	2010      	movs	r0, #16
 8012602:	f7ff fdcd 	bl	80121a0 <malloc>
 8012606:	4602      	mov	r2, r0
 8012608:	6270      	str	r0, [r6, #36]	; 0x24
 801260a:	b928      	cbnz	r0, 8012618 <__pow5mult+0x40>
 801260c:	4b1d      	ldr	r3, [pc, #116]	; (8012684 <__pow5mult+0xac>)
 801260e:	481e      	ldr	r0, [pc, #120]	; (8012688 <__pow5mult+0xb0>)
 8012610:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012614:	f001 faa4 	bl	8013b60 <__assert_func>
 8012618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801261c:	6004      	str	r4, [r0, #0]
 801261e:	60c4      	str	r4, [r0, #12]
 8012620:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012624:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012628:	b94c      	cbnz	r4, 801263e <__pow5mult+0x66>
 801262a:	f240 2171 	movw	r1, #625	; 0x271
 801262e:	4630      	mov	r0, r6
 8012630:	f7ff ff12 	bl	8012458 <__i2b>
 8012634:	2300      	movs	r3, #0
 8012636:	f8c8 0008 	str.w	r0, [r8, #8]
 801263a:	4604      	mov	r4, r0
 801263c:	6003      	str	r3, [r0, #0]
 801263e:	f04f 0900 	mov.w	r9, #0
 8012642:	07eb      	lsls	r3, r5, #31
 8012644:	d50a      	bpl.n	801265c <__pow5mult+0x84>
 8012646:	4639      	mov	r1, r7
 8012648:	4622      	mov	r2, r4
 801264a:	4630      	mov	r0, r6
 801264c:	f7ff ff1a 	bl	8012484 <__multiply>
 8012650:	4639      	mov	r1, r7
 8012652:	4680      	mov	r8, r0
 8012654:	4630      	mov	r0, r6
 8012656:	f7ff fdfd 	bl	8012254 <_Bfree>
 801265a:	4647      	mov	r7, r8
 801265c:	106d      	asrs	r5, r5, #1
 801265e:	d00b      	beq.n	8012678 <__pow5mult+0xa0>
 8012660:	6820      	ldr	r0, [r4, #0]
 8012662:	b938      	cbnz	r0, 8012674 <__pow5mult+0x9c>
 8012664:	4622      	mov	r2, r4
 8012666:	4621      	mov	r1, r4
 8012668:	4630      	mov	r0, r6
 801266a:	f7ff ff0b 	bl	8012484 <__multiply>
 801266e:	6020      	str	r0, [r4, #0]
 8012670:	f8c0 9000 	str.w	r9, [r0]
 8012674:	4604      	mov	r4, r0
 8012676:	e7e4      	b.n	8012642 <__pow5mult+0x6a>
 8012678:	4638      	mov	r0, r7
 801267a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801267e:	bf00      	nop
 8012680:	08015640 	.word	0x08015640
 8012684:	08015395 	.word	0x08015395
 8012688:	080154f4 	.word	0x080154f4

0801268c <__lshift>:
 801268c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012690:	460c      	mov	r4, r1
 8012692:	6849      	ldr	r1, [r1, #4]
 8012694:	6923      	ldr	r3, [r4, #16]
 8012696:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801269a:	68a3      	ldr	r3, [r4, #8]
 801269c:	4607      	mov	r7, r0
 801269e:	4691      	mov	r9, r2
 80126a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126a4:	f108 0601 	add.w	r6, r8, #1
 80126a8:	42b3      	cmp	r3, r6
 80126aa:	db0b      	blt.n	80126c4 <__lshift+0x38>
 80126ac:	4638      	mov	r0, r7
 80126ae:	f7ff fd91 	bl	80121d4 <_Balloc>
 80126b2:	4605      	mov	r5, r0
 80126b4:	b948      	cbnz	r0, 80126ca <__lshift+0x3e>
 80126b6:	4602      	mov	r2, r0
 80126b8:	4b2a      	ldr	r3, [pc, #168]	; (8012764 <__lshift+0xd8>)
 80126ba:	482b      	ldr	r0, [pc, #172]	; (8012768 <__lshift+0xdc>)
 80126bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80126c0:	f001 fa4e 	bl	8013b60 <__assert_func>
 80126c4:	3101      	adds	r1, #1
 80126c6:	005b      	lsls	r3, r3, #1
 80126c8:	e7ee      	b.n	80126a8 <__lshift+0x1c>
 80126ca:	2300      	movs	r3, #0
 80126cc:	f100 0114 	add.w	r1, r0, #20
 80126d0:	f100 0210 	add.w	r2, r0, #16
 80126d4:	4618      	mov	r0, r3
 80126d6:	4553      	cmp	r3, sl
 80126d8:	db37      	blt.n	801274a <__lshift+0xbe>
 80126da:	6920      	ldr	r0, [r4, #16]
 80126dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80126e0:	f104 0314 	add.w	r3, r4, #20
 80126e4:	f019 091f 	ands.w	r9, r9, #31
 80126e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80126ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80126f0:	d02f      	beq.n	8012752 <__lshift+0xc6>
 80126f2:	f1c9 0e20 	rsb	lr, r9, #32
 80126f6:	468a      	mov	sl, r1
 80126f8:	f04f 0c00 	mov.w	ip, #0
 80126fc:	681a      	ldr	r2, [r3, #0]
 80126fe:	fa02 f209 	lsl.w	r2, r2, r9
 8012702:	ea42 020c 	orr.w	r2, r2, ip
 8012706:	f84a 2b04 	str.w	r2, [sl], #4
 801270a:	f853 2b04 	ldr.w	r2, [r3], #4
 801270e:	4298      	cmp	r0, r3
 8012710:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012714:	d8f2      	bhi.n	80126fc <__lshift+0x70>
 8012716:	1b03      	subs	r3, r0, r4
 8012718:	3b15      	subs	r3, #21
 801271a:	f023 0303 	bic.w	r3, r3, #3
 801271e:	3304      	adds	r3, #4
 8012720:	f104 0215 	add.w	r2, r4, #21
 8012724:	4290      	cmp	r0, r2
 8012726:	bf38      	it	cc
 8012728:	2304      	movcc	r3, #4
 801272a:	f841 c003 	str.w	ip, [r1, r3]
 801272e:	f1bc 0f00 	cmp.w	ip, #0
 8012732:	d001      	beq.n	8012738 <__lshift+0xac>
 8012734:	f108 0602 	add.w	r6, r8, #2
 8012738:	3e01      	subs	r6, #1
 801273a:	4638      	mov	r0, r7
 801273c:	612e      	str	r6, [r5, #16]
 801273e:	4621      	mov	r1, r4
 8012740:	f7ff fd88 	bl	8012254 <_Bfree>
 8012744:	4628      	mov	r0, r5
 8012746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801274a:	f842 0f04 	str.w	r0, [r2, #4]!
 801274e:	3301      	adds	r3, #1
 8012750:	e7c1      	b.n	80126d6 <__lshift+0x4a>
 8012752:	3904      	subs	r1, #4
 8012754:	f853 2b04 	ldr.w	r2, [r3], #4
 8012758:	f841 2f04 	str.w	r2, [r1, #4]!
 801275c:	4298      	cmp	r0, r3
 801275e:	d8f9      	bhi.n	8012754 <__lshift+0xc8>
 8012760:	e7ea      	b.n	8012738 <__lshift+0xac>
 8012762:	bf00      	nop
 8012764:	08015407 	.word	0x08015407
 8012768:	080154f4 	.word	0x080154f4

0801276c <__mcmp>:
 801276c:	b530      	push	{r4, r5, lr}
 801276e:	6902      	ldr	r2, [r0, #16]
 8012770:	690c      	ldr	r4, [r1, #16]
 8012772:	1b12      	subs	r2, r2, r4
 8012774:	d10e      	bne.n	8012794 <__mcmp+0x28>
 8012776:	f100 0314 	add.w	r3, r0, #20
 801277a:	3114      	adds	r1, #20
 801277c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012780:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012784:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012788:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801278c:	42a5      	cmp	r5, r4
 801278e:	d003      	beq.n	8012798 <__mcmp+0x2c>
 8012790:	d305      	bcc.n	801279e <__mcmp+0x32>
 8012792:	2201      	movs	r2, #1
 8012794:	4610      	mov	r0, r2
 8012796:	bd30      	pop	{r4, r5, pc}
 8012798:	4283      	cmp	r3, r0
 801279a:	d3f3      	bcc.n	8012784 <__mcmp+0x18>
 801279c:	e7fa      	b.n	8012794 <__mcmp+0x28>
 801279e:	f04f 32ff 	mov.w	r2, #4294967295
 80127a2:	e7f7      	b.n	8012794 <__mcmp+0x28>

080127a4 <__mdiff>:
 80127a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a8:	460c      	mov	r4, r1
 80127aa:	4606      	mov	r6, r0
 80127ac:	4611      	mov	r1, r2
 80127ae:	4620      	mov	r0, r4
 80127b0:	4690      	mov	r8, r2
 80127b2:	f7ff ffdb 	bl	801276c <__mcmp>
 80127b6:	1e05      	subs	r5, r0, #0
 80127b8:	d110      	bne.n	80127dc <__mdiff+0x38>
 80127ba:	4629      	mov	r1, r5
 80127bc:	4630      	mov	r0, r6
 80127be:	f7ff fd09 	bl	80121d4 <_Balloc>
 80127c2:	b930      	cbnz	r0, 80127d2 <__mdiff+0x2e>
 80127c4:	4b3a      	ldr	r3, [pc, #232]	; (80128b0 <__mdiff+0x10c>)
 80127c6:	4602      	mov	r2, r0
 80127c8:	f240 2132 	movw	r1, #562	; 0x232
 80127cc:	4839      	ldr	r0, [pc, #228]	; (80128b4 <__mdiff+0x110>)
 80127ce:	f001 f9c7 	bl	8013b60 <__assert_func>
 80127d2:	2301      	movs	r3, #1
 80127d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80127d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127dc:	bfa4      	itt	ge
 80127de:	4643      	movge	r3, r8
 80127e0:	46a0      	movge	r8, r4
 80127e2:	4630      	mov	r0, r6
 80127e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80127e8:	bfa6      	itte	ge
 80127ea:	461c      	movge	r4, r3
 80127ec:	2500      	movge	r5, #0
 80127ee:	2501      	movlt	r5, #1
 80127f0:	f7ff fcf0 	bl	80121d4 <_Balloc>
 80127f4:	b920      	cbnz	r0, 8012800 <__mdiff+0x5c>
 80127f6:	4b2e      	ldr	r3, [pc, #184]	; (80128b0 <__mdiff+0x10c>)
 80127f8:	4602      	mov	r2, r0
 80127fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80127fe:	e7e5      	b.n	80127cc <__mdiff+0x28>
 8012800:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012804:	6926      	ldr	r6, [r4, #16]
 8012806:	60c5      	str	r5, [r0, #12]
 8012808:	f104 0914 	add.w	r9, r4, #20
 801280c:	f108 0514 	add.w	r5, r8, #20
 8012810:	f100 0e14 	add.w	lr, r0, #20
 8012814:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012818:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801281c:	f108 0210 	add.w	r2, r8, #16
 8012820:	46f2      	mov	sl, lr
 8012822:	2100      	movs	r1, #0
 8012824:	f859 3b04 	ldr.w	r3, [r9], #4
 8012828:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801282c:	fa1f f883 	uxth.w	r8, r3
 8012830:	fa11 f18b 	uxtah	r1, r1, fp
 8012834:	0c1b      	lsrs	r3, r3, #16
 8012836:	eba1 0808 	sub.w	r8, r1, r8
 801283a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801283e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012842:	fa1f f888 	uxth.w	r8, r8
 8012846:	1419      	asrs	r1, r3, #16
 8012848:	454e      	cmp	r6, r9
 801284a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801284e:	f84a 3b04 	str.w	r3, [sl], #4
 8012852:	d8e7      	bhi.n	8012824 <__mdiff+0x80>
 8012854:	1b33      	subs	r3, r6, r4
 8012856:	3b15      	subs	r3, #21
 8012858:	f023 0303 	bic.w	r3, r3, #3
 801285c:	3304      	adds	r3, #4
 801285e:	3415      	adds	r4, #21
 8012860:	42a6      	cmp	r6, r4
 8012862:	bf38      	it	cc
 8012864:	2304      	movcc	r3, #4
 8012866:	441d      	add	r5, r3
 8012868:	4473      	add	r3, lr
 801286a:	469e      	mov	lr, r3
 801286c:	462e      	mov	r6, r5
 801286e:	4566      	cmp	r6, ip
 8012870:	d30e      	bcc.n	8012890 <__mdiff+0xec>
 8012872:	f10c 0203 	add.w	r2, ip, #3
 8012876:	1b52      	subs	r2, r2, r5
 8012878:	f022 0203 	bic.w	r2, r2, #3
 801287c:	3d03      	subs	r5, #3
 801287e:	45ac      	cmp	ip, r5
 8012880:	bf38      	it	cc
 8012882:	2200      	movcc	r2, #0
 8012884:	441a      	add	r2, r3
 8012886:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801288a:	b17b      	cbz	r3, 80128ac <__mdiff+0x108>
 801288c:	6107      	str	r7, [r0, #16]
 801288e:	e7a3      	b.n	80127d8 <__mdiff+0x34>
 8012890:	f856 8b04 	ldr.w	r8, [r6], #4
 8012894:	fa11 f288 	uxtah	r2, r1, r8
 8012898:	1414      	asrs	r4, r2, #16
 801289a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801289e:	b292      	uxth	r2, r2
 80128a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80128a4:	f84e 2b04 	str.w	r2, [lr], #4
 80128a8:	1421      	asrs	r1, r4, #16
 80128aa:	e7e0      	b.n	801286e <__mdiff+0xca>
 80128ac:	3f01      	subs	r7, #1
 80128ae:	e7ea      	b.n	8012886 <__mdiff+0xe2>
 80128b0:	08015407 	.word	0x08015407
 80128b4:	080154f4 	.word	0x080154f4

080128b8 <__ulp>:
 80128b8:	b082      	sub	sp, #8
 80128ba:	ed8d 0b00 	vstr	d0, [sp]
 80128be:	9b01      	ldr	r3, [sp, #4]
 80128c0:	4912      	ldr	r1, [pc, #72]	; (801290c <__ulp+0x54>)
 80128c2:	4019      	ands	r1, r3
 80128c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80128c8:	2900      	cmp	r1, #0
 80128ca:	dd05      	ble.n	80128d8 <__ulp+0x20>
 80128cc:	2200      	movs	r2, #0
 80128ce:	460b      	mov	r3, r1
 80128d0:	ec43 2b10 	vmov	d0, r2, r3
 80128d4:	b002      	add	sp, #8
 80128d6:	4770      	bx	lr
 80128d8:	4249      	negs	r1, r1
 80128da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80128de:	ea4f 5021 	mov.w	r0, r1, asr #20
 80128e2:	f04f 0200 	mov.w	r2, #0
 80128e6:	f04f 0300 	mov.w	r3, #0
 80128ea:	da04      	bge.n	80128f6 <__ulp+0x3e>
 80128ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80128f0:	fa41 f300 	asr.w	r3, r1, r0
 80128f4:	e7ec      	b.n	80128d0 <__ulp+0x18>
 80128f6:	f1a0 0114 	sub.w	r1, r0, #20
 80128fa:	291e      	cmp	r1, #30
 80128fc:	bfda      	itte	le
 80128fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012902:	fa20 f101 	lsrle.w	r1, r0, r1
 8012906:	2101      	movgt	r1, #1
 8012908:	460a      	mov	r2, r1
 801290a:	e7e1      	b.n	80128d0 <__ulp+0x18>
 801290c:	7ff00000 	.word	0x7ff00000

08012910 <__b2d>:
 8012910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012912:	6905      	ldr	r5, [r0, #16]
 8012914:	f100 0714 	add.w	r7, r0, #20
 8012918:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801291c:	1f2e      	subs	r6, r5, #4
 801291e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012922:	4620      	mov	r0, r4
 8012924:	f7ff fd48 	bl	80123b8 <__hi0bits>
 8012928:	f1c0 0320 	rsb	r3, r0, #32
 801292c:	280a      	cmp	r0, #10
 801292e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80129ac <__b2d+0x9c>
 8012932:	600b      	str	r3, [r1, #0]
 8012934:	dc14      	bgt.n	8012960 <__b2d+0x50>
 8012936:	f1c0 0e0b 	rsb	lr, r0, #11
 801293a:	fa24 f10e 	lsr.w	r1, r4, lr
 801293e:	42b7      	cmp	r7, r6
 8012940:	ea41 030c 	orr.w	r3, r1, ip
 8012944:	bf34      	ite	cc
 8012946:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801294a:	2100      	movcs	r1, #0
 801294c:	3015      	adds	r0, #21
 801294e:	fa04 f000 	lsl.w	r0, r4, r0
 8012952:	fa21 f10e 	lsr.w	r1, r1, lr
 8012956:	ea40 0201 	orr.w	r2, r0, r1
 801295a:	ec43 2b10 	vmov	d0, r2, r3
 801295e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012960:	42b7      	cmp	r7, r6
 8012962:	bf3a      	itte	cc
 8012964:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012968:	f1a5 0608 	subcc.w	r6, r5, #8
 801296c:	2100      	movcs	r1, #0
 801296e:	380b      	subs	r0, #11
 8012970:	d017      	beq.n	80129a2 <__b2d+0x92>
 8012972:	f1c0 0c20 	rsb	ip, r0, #32
 8012976:	fa04 f500 	lsl.w	r5, r4, r0
 801297a:	42be      	cmp	r6, r7
 801297c:	fa21 f40c 	lsr.w	r4, r1, ip
 8012980:	ea45 0504 	orr.w	r5, r5, r4
 8012984:	bf8c      	ite	hi
 8012986:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801298a:	2400      	movls	r4, #0
 801298c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012990:	fa01 f000 	lsl.w	r0, r1, r0
 8012994:	fa24 f40c 	lsr.w	r4, r4, ip
 8012998:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801299c:	ea40 0204 	orr.w	r2, r0, r4
 80129a0:	e7db      	b.n	801295a <__b2d+0x4a>
 80129a2:	ea44 030c 	orr.w	r3, r4, ip
 80129a6:	460a      	mov	r2, r1
 80129a8:	e7d7      	b.n	801295a <__b2d+0x4a>
 80129aa:	bf00      	nop
 80129ac:	3ff00000 	.word	0x3ff00000

080129b0 <__d2b>:
 80129b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80129b4:	4689      	mov	r9, r1
 80129b6:	2101      	movs	r1, #1
 80129b8:	ec57 6b10 	vmov	r6, r7, d0
 80129bc:	4690      	mov	r8, r2
 80129be:	f7ff fc09 	bl	80121d4 <_Balloc>
 80129c2:	4604      	mov	r4, r0
 80129c4:	b930      	cbnz	r0, 80129d4 <__d2b+0x24>
 80129c6:	4602      	mov	r2, r0
 80129c8:	4b25      	ldr	r3, [pc, #148]	; (8012a60 <__d2b+0xb0>)
 80129ca:	4826      	ldr	r0, [pc, #152]	; (8012a64 <__d2b+0xb4>)
 80129cc:	f240 310a 	movw	r1, #778	; 0x30a
 80129d0:	f001 f8c6 	bl	8013b60 <__assert_func>
 80129d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80129d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80129dc:	bb35      	cbnz	r5, 8012a2c <__d2b+0x7c>
 80129de:	2e00      	cmp	r6, #0
 80129e0:	9301      	str	r3, [sp, #4]
 80129e2:	d028      	beq.n	8012a36 <__d2b+0x86>
 80129e4:	4668      	mov	r0, sp
 80129e6:	9600      	str	r6, [sp, #0]
 80129e8:	f7ff fd06 	bl	80123f8 <__lo0bits>
 80129ec:	9900      	ldr	r1, [sp, #0]
 80129ee:	b300      	cbz	r0, 8012a32 <__d2b+0x82>
 80129f0:	9a01      	ldr	r2, [sp, #4]
 80129f2:	f1c0 0320 	rsb	r3, r0, #32
 80129f6:	fa02 f303 	lsl.w	r3, r2, r3
 80129fa:	430b      	orrs	r3, r1
 80129fc:	40c2      	lsrs	r2, r0
 80129fe:	6163      	str	r3, [r4, #20]
 8012a00:	9201      	str	r2, [sp, #4]
 8012a02:	9b01      	ldr	r3, [sp, #4]
 8012a04:	61a3      	str	r3, [r4, #24]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	bf14      	ite	ne
 8012a0a:	2202      	movne	r2, #2
 8012a0c:	2201      	moveq	r2, #1
 8012a0e:	6122      	str	r2, [r4, #16]
 8012a10:	b1d5      	cbz	r5, 8012a48 <__d2b+0x98>
 8012a12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012a16:	4405      	add	r5, r0
 8012a18:	f8c9 5000 	str.w	r5, [r9]
 8012a1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012a20:	f8c8 0000 	str.w	r0, [r8]
 8012a24:	4620      	mov	r0, r4
 8012a26:	b003      	add	sp, #12
 8012a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012a30:	e7d5      	b.n	80129de <__d2b+0x2e>
 8012a32:	6161      	str	r1, [r4, #20]
 8012a34:	e7e5      	b.n	8012a02 <__d2b+0x52>
 8012a36:	a801      	add	r0, sp, #4
 8012a38:	f7ff fcde 	bl	80123f8 <__lo0bits>
 8012a3c:	9b01      	ldr	r3, [sp, #4]
 8012a3e:	6163      	str	r3, [r4, #20]
 8012a40:	2201      	movs	r2, #1
 8012a42:	6122      	str	r2, [r4, #16]
 8012a44:	3020      	adds	r0, #32
 8012a46:	e7e3      	b.n	8012a10 <__d2b+0x60>
 8012a48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012a4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012a50:	f8c9 0000 	str.w	r0, [r9]
 8012a54:	6918      	ldr	r0, [r3, #16]
 8012a56:	f7ff fcaf 	bl	80123b8 <__hi0bits>
 8012a5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012a5e:	e7df      	b.n	8012a20 <__d2b+0x70>
 8012a60:	08015407 	.word	0x08015407
 8012a64:	080154f4 	.word	0x080154f4

08012a68 <__ratio>:
 8012a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a6c:	4688      	mov	r8, r1
 8012a6e:	4669      	mov	r1, sp
 8012a70:	4681      	mov	r9, r0
 8012a72:	f7ff ff4d 	bl	8012910 <__b2d>
 8012a76:	a901      	add	r1, sp, #4
 8012a78:	4640      	mov	r0, r8
 8012a7a:	ec55 4b10 	vmov	r4, r5, d0
 8012a7e:	f7ff ff47 	bl	8012910 <__b2d>
 8012a82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012a86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012a8a:	eba3 0c02 	sub.w	ip, r3, r2
 8012a8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012a92:	1a9b      	subs	r3, r3, r2
 8012a94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012a98:	ec51 0b10 	vmov	r0, r1, d0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	bfd6      	itet	le
 8012aa0:	460a      	movle	r2, r1
 8012aa2:	462a      	movgt	r2, r5
 8012aa4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012aa8:	468b      	mov	fp, r1
 8012aaa:	462f      	mov	r7, r5
 8012aac:	bfd4      	ite	le
 8012aae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012ab2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	ee10 2a10 	vmov	r2, s0
 8012abc:	465b      	mov	r3, fp
 8012abe:	4639      	mov	r1, r7
 8012ac0:	f7ed fee4 	bl	800088c <__aeabi_ddiv>
 8012ac4:	ec41 0b10 	vmov	d0, r0, r1
 8012ac8:	b003      	add	sp, #12
 8012aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ace <__copybits>:
 8012ace:	3901      	subs	r1, #1
 8012ad0:	b570      	push	{r4, r5, r6, lr}
 8012ad2:	1149      	asrs	r1, r1, #5
 8012ad4:	6914      	ldr	r4, [r2, #16]
 8012ad6:	3101      	adds	r1, #1
 8012ad8:	f102 0314 	add.w	r3, r2, #20
 8012adc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012ae0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012ae4:	1f05      	subs	r5, r0, #4
 8012ae6:	42a3      	cmp	r3, r4
 8012ae8:	d30c      	bcc.n	8012b04 <__copybits+0x36>
 8012aea:	1aa3      	subs	r3, r4, r2
 8012aec:	3b11      	subs	r3, #17
 8012aee:	f023 0303 	bic.w	r3, r3, #3
 8012af2:	3211      	adds	r2, #17
 8012af4:	42a2      	cmp	r2, r4
 8012af6:	bf88      	it	hi
 8012af8:	2300      	movhi	r3, #0
 8012afa:	4418      	add	r0, r3
 8012afc:	2300      	movs	r3, #0
 8012afe:	4288      	cmp	r0, r1
 8012b00:	d305      	bcc.n	8012b0e <__copybits+0x40>
 8012b02:	bd70      	pop	{r4, r5, r6, pc}
 8012b04:	f853 6b04 	ldr.w	r6, [r3], #4
 8012b08:	f845 6f04 	str.w	r6, [r5, #4]!
 8012b0c:	e7eb      	b.n	8012ae6 <__copybits+0x18>
 8012b0e:	f840 3b04 	str.w	r3, [r0], #4
 8012b12:	e7f4      	b.n	8012afe <__copybits+0x30>

08012b14 <__any_on>:
 8012b14:	f100 0214 	add.w	r2, r0, #20
 8012b18:	6900      	ldr	r0, [r0, #16]
 8012b1a:	114b      	asrs	r3, r1, #5
 8012b1c:	4298      	cmp	r0, r3
 8012b1e:	b510      	push	{r4, lr}
 8012b20:	db11      	blt.n	8012b46 <__any_on+0x32>
 8012b22:	dd0a      	ble.n	8012b3a <__any_on+0x26>
 8012b24:	f011 011f 	ands.w	r1, r1, #31
 8012b28:	d007      	beq.n	8012b3a <__any_on+0x26>
 8012b2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012b2e:	fa24 f001 	lsr.w	r0, r4, r1
 8012b32:	fa00 f101 	lsl.w	r1, r0, r1
 8012b36:	428c      	cmp	r4, r1
 8012b38:	d10b      	bne.n	8012b52 <__any_on+0x3e>
 8012b3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b3e:	4293      	cmp	r3, r2
 8012b40:	d803      	bhi.n	8012b4a <__any_on+0x36>
 8012b42:	2000      	movs	r0, #0
 8012b44:	bd10      	pop	{r4, pc}
 8012b46:	4603      	mov	r3, r0
 8012b48:	e7f7      	b.n	8012b3a <__any_on+0x26>
 8012b4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012b4e:	2900      	cmp	r1, #0
 8012b50:	d0f5      	beq.n	8012b3e <__any_on+0x2a>
 8012b52:	2001      	movs	r0, #1
 8012b54:	e7f6      	b.n	8012b44 <__any_on+0x30>

08012b56 <_calloc_r>:
 8012b56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b58:	fba1 2402 	umull	r2, r4, r1, r2
 8012b5c:	b94c      	cbnz	r4, 8012b72 <_calloc_r+0x1c>
 8012b5e:	4611      	mov	r1, r2
 8012b60:	9201      	str	r2, [sp, #4]
 8012b62:	f000 f87b 	bl	8012c5c <_malloc_r>
 8012b66:	9a01      	ldr	r2, [sp, #4]
 8012b68:	4605      	mov	r5, r0
 8012b6a:	b930      	cbnz	r0, 8012b7a <_calloc_r+0x24>
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	b003      	add	sp, #12
 8012b70:	bd30      	pop	{r4, r5, pc}
 8012b72:	220c      	movs	r2, #12
 8012b74:	6002      	str	r2, [r0, #0]
 8012b76:	2500      	movs	r5, #0
 8012b78:	e7f8      	b.n	8012b6c <_calloc_r+0x16>
 8012b7a:	4621      	mov	r1, r4
 8012b7c:	f7fb ff6e 	bl	800ea5c <memset>
 8012b80:	e7f4      	b.n	8012b6c <_calloc_r+0x16>
	...

08012b84 <_free_r>:
 8012b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b86:	2900      	cmp	r1, #0
 8012b88:	d044      	beq.n	8012c14 <_free_r+0x90>
 8012b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b8e:	9001      	str	r0, [sp, #4]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	f1a1 0404 	sub.w	r4, r1, #4
 8012b96:	bfb8      	it	lt
 8012b98:	18e4      	addlt	r4, r4, r3
 8012b9a:	f001 f833 	bl	8013c04 <__malloc_lock>
 8012b9e:	4a1e      	ldr	r2, [pc, #120]	; (8012c18 <_free_r+0x94>)
 8012ba0:	9801      	ldr	r0, [sp, #4]
 8012ba2:	6813      	ldr	r3, [r2, #0]
 8012ba4:	b933      	cbnz	r3, 8012bb4 <_free_r+0x30>
 8012ba6:	6063      	str	r3, [r4, #4]
 8012ba8:	6014      	str	r4, [r2, #0]
 8012baa:	b003      	add	sp, #12
 8012bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012bb0:	f001 b82e 	b.w	8013c10 <__malloc_unlock>
 8012bb4:	42a3      	cmp	r3, r4
 8012bb6:	d908      	bls.n	8012bca <_free_r+0x46>
 8012bb8:	6825      	ldr	r5, [r4, #0]
 8012bba:	1961      	adds	r1, r4, r5
 8012bbc:	428b      	cmp	r3, r1
 8012bbe:	bf01      	itttt	eq
 8012bc0:	6819      	ldreq	r1, [r3, #0]
 8012bc2:	685b      	ldreq	r3, [r3, #4]
 8012bc4:	1949      	addeq	r1, r1, r5
 8012bc6:	6021      	streq	r1, [r4, #0]
 8012bc8:	e7ed      	b.n	8012ba6 <_free_r+0x22>
 8012bca:	461a      	mov	r2, r3
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	b10b      	cbz	r3, 8012bd4 <_free_r+0x50>
 8012bd0:	42a3      	cmp	r3, r4
 8012bd2:	d9fa      	bls.n	8012bca <_free_r+0x46>
 8012bd4:	6811      	ldr	r1, [r2, #0]
 8012bd6:	1855      	adds	r5, r2, r1
 8012bd8:	42a5      	cmp	r5, r4
 8012bda:	d10b      	bne.n	8012bf4 <_free_r+0x70>
 8012bdc:	6824      	ldr	r4, [r4, #0]
 8012bde:	4421      	add	r1, r4
 8012be0:	1854      	adds	r4, r2, r1
 8012be2:	42a3      	cmp	r3, r4
 8012be4:	6011      	str	r1, [r2, #0]
 8012be6:	d1e0      	bne.n	8012baa <_free_r+0x26>
 8012be8:	681c      	ldr	r4, [r3, #0]
 8012bea:	685b      	ldr	r3, [r3, #4]
 8012bec:	6053      	str	r3, [r2, #4]
 8012bee:	4421      	add	r1, r4
 8012bf0:	6011      	str	r1, [r2, #0]
 8012bf2:	e7da      	b.n	8012baa <_free_r+0x26>
 8012bf4:	d902      	bls.n	8012bfc <_free_r+0x78>
 8012bf6:	230c      	movs	r3, #12
 8012bf8:	6003      	str	r3, [r0, #0]
 8012bfa:	e7d6      	b.n	8012baa <_free_r+0x26>
 8012bfc:	6825      	ldr	r5, [r4, #0]
 8012bfe:	1961      	adds	r1, r4, r5
 8012c00:	428b      	cmp	r3, r1
 8012c02:	bf04      	itt	eq
 8012c04:	6819      	ldreq	r1, [r3, #0]
 8012c06:	685b      	ldreq	r3, [r3, #4]
 8012c08:	6063      	str	r3, [r4, #4]
 8012c0a:	bf04      	itt	eq
 8012c0c:	1949      	addeq	r1, r1, r5
 8012c0e:	6021      	streq	r1, [r4, #0]
 8012c10:	6054      	str	r4, [r2, #4]
 8012c12:	e7ca      	b.n	8012baa <_free_r+0x26>
 8012c14:	b003      	add	sp, #12
 8012c16:	bd30      	pop	{r4, r5, pc}
 8012c18:	20003144 	.word	0x20003144

08012c1c <sbrk_aligned>:
 8012c1c:	b570      	push	{r4, r5, r6, lr}
 8012c1e:	4e0e      	ldr	r6, [pc, #56]	; (8012c58 <sbrk_aligned+0x3c>)
 8012c20:	460c      	mov	r4, r1
 8012c22:	6831      	ldr	r1, [r6, #0]
 8012c24:	4605      	mov	r5, r0
 8012c26:	b911      	cbnz	r1, 8012c2e <sbrk_aligned+0x12>
 8012c28:	f000 fe82 	bl	8013930 <_sbrk_r>
 8012c2c:	6030      	str	r0, [r6, #0]
 8012c2e:	4621      	mov	r1, r4
 8012c30:	4628      	mov	r0, r5
 8012c32:	f000 fe7d 	bl	8013930 <_sbrk_r>
 8012c36:	1c43      	adds	r3, r0, #1
 8012c38:	d00a      	beq.n	8012c50 <sbrk_aligned+0x34>
 8012c3a:	1cc4      	adds	r4, r0, #3
 8012c3c:	f024 0403 	bic.w	r4, r4, #3
 8012c40:	42a0      	cmp	r0, r4
 8012c42:	d007      	beq.n	8012c54 <sbrk_aligned+0x38>
 8012c44:	1a21      	subs	r1, r4, r0
 8012c46:	4628      	mov	r0, r5
 8012c48:	f000 fe72 	bl	8013930 <_sbrk_r>
 8012c4c:	3001      	adds	r0, #1
 8012c4e:	d101      	bne.n	8012c54 <sbrk_aligned+0x38>
 8012c50:	f04f 34ff 	mov.w	r4, #4294967295
 8012c54:	4620      	mov	r0, r4
 8012c56:	bd70      	pop	{r4, r5, r6, pc}
 8012c58:	20003148 	.word	0x20003148

08012c5c <_malloc_r>:
 8012c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c60:	1ccd      	adds	r5, r1, #3
 8012c62:	f025 0503 	bic.w	r5, r5, #3
 8012c66:	3508      	adds	r5, #8
 8012c68:	2d0c      	cmp	r5, #12
 8012c6a:	bf38      	it	cc
 8012c6c:	250c      	movcc	r5, #12
 8012c6e:	2d00      	cmp	r5, #0
 8012c70:	4607      	mov	r7, r0
 8012c72:	db01      	blt.n	8012c78 <_malloc_r+0x1c>
 8012c74:	42a9      	cmp	r1, r5
 8012c76:	d905      	bls.n	8012c84 <_malloc_r+0x28>
 8012c78:	230c      	movs	r3, #12
 8012c7a:	603b      	str	r3, [r7, #0]
 8012c7c:	2600      	movs	r6, #0
 8012c7e:	4630      	mov	r0, r6
 8012c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c84:	4e2e      	ldr	r6, [pc, #184]	; (8012d40 <_malloc_r+0xe4>)
 8012c86:	f000 ffbd 	bl	8013c04 <__malloc_lock>
 8012c8a:	6833      	ldr	r3, [r6, #0]
 8012c8c:	461c      	mov	r4, r3
 8012c8e:	bb34      	cbnz	r4, 8012cde <_malloc_r+0x82>
 8012c90:	4629      	mov	r1, r5
 8012c92:	4638      	mov	r0, r7
 8012c94:	f7ff ffc2 	bl	8012c1c <sbrk_aligned>
 8012c98:	1c43      	adds	r3, r0, #1
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	d14d      	bne.n	8012d3a <_malloc_r+0xde>
 8012c9e:	6834      	ldr	r4, [r6, #0]
 8012ca0:	4626      	mov	r6, r4
 8012ca2:	2e00      	cmp	r6, #0
 8012ca4:	d140      	bne.n	8012d28 <_malloc_r+0xcc>
 8012ca6:	6823      	ldr	r3, [r4, #0]
 8012ca8:	4631      	mov	r1, r6
 8012caa:	4638      	mov	r0, r7
 8012cac:	eb04 0803 	add.w	r8, r4, r3
 8012cb0:	f000 fe3e 	bl	8013930 <_sbrk_r>
 8012cb4:	4580      	cmp	r8, r0
 8012cb6:	d13a      	bne.n	8012d2e <_malloc_r+0xd2>
 8012cb8:	6821      	ldr	r1, [r4, #0]
 8012cba:	3503      	adds	r5, #3
 8012cbc:	1a6d      	subs	r5, r5, r1
 8012cbe:	f025 0503 	bic.w	r5, r5, #3
 8012cc2:	3508      	adds	r5, #8
 8012cc4:	2d0c      	cmp	r5, #12
 8012cc6:	bf38      	it	cc
 8012cc8:	250c      	movcc	r5, #12
 8012cca:	4629      	mov	r1, r5
 8012ccc:	4638      	mov	r0, r7
 8012cce:	f7ff ffa5 	bl	8012c1c <sbrk_aligned>
 8012cd2:	3001      	adds	r0, #1
 8012cd4:	d02b      	beq.n	8012d2e <_malloc_r+0xd2>
 8012cd6:	6823      	ldr	r3, [r4, #0]
 8012cd8:	442b      	add	r3, r5
 8012cda:	6023      	str	r3, [r4, #0]
 8012cdc:	e00e      	b.n	8012cfc <_malloc_r+0xa0>
 8012cde:	6822      	ldr	r2, [r4, #0]
 8012ce0:	1b52      	subs	r2, r2, r5
 8012ce2:	d41e      	bmi.n	8012d22 <_malloc_r+0xc6>
 8012ce4:	2a0b      	cmp	r2, #11
 8012ce6:	d916      	bls.n	8012d16 <_malloc_r+0xba>
 8012ce8:	1961      	adds	r1, r4, r5
 8012cea:	42a3      	cmp	r3, r4
 8012cec:	6025      	str	r5, [r4, #0]
 8012cee:	bf18      	it	ne
 8012cf0:	6059      	strne	r1, [r3, #4]
 8012cf2:	6863      	ldr	r3, [r4, #4]
 8012cf4:	bf08      	it	eq
 8012cf6:	6031      	streq	r1, [r6, #0]
 8012cf8:	5162      	str	r2, [r4, r5]
 8012cfa:	604b      	str	r3, [r1, #4]
 8012cfc:	4638      	mov	r0, r7
 8012cfe:	f104 060b 	add.w	r6, r4, #11
 8012d02:	f000 ff85 	bl	8013c10 <__malloc_unlock>
 8012d06:	f026 0607 	bic.w	r6, r6, #7
 8012d0a:	1d23      	adds	r3, r4, #4
 8012d0c:	1af2      	subs	r2, r6, r3
 8012d0e:	d0b6      	beq.n	8012c7e <_malloc_r+0x22>
 8012d10:	1b9b      	subs	r3, r3, r6
 8012d12:	50a3      	str	r3, [r4, r2]
 8012d14:	e7b3      	b.n	8012c7e <_malloc_r+0x22>
 8012d16:	6862      	ldr	r2, [r4, #4]
 8012d18:	42a3      	cmp	r3, r4
 8012d1a:	bf0c      	ite	eq
 8012d1c:	6032      	streq	r2, [r6, #0]
 8012d1e:	605a      	strne	r2, [r3, #4]
 8012d20:	e7ec      	b.n	8012cfc <_malloc_r+0xa0>
 8012d22:	4623      	mov	r3, r4
 8012d24:	6864      	ldr	r4, [r4, #4]
 8012d26:	e7b2      	b.n	8012c8e <_malloc_r+0x32>
 8012d28:	4634      	mov	r4, r6
 8012d2a:	6876      	ldr	r6, [r6, #4]
 8012d2c:	e7b9      	b.n	8012ca2 <_malloc_r+0x46>
 8012d2e:	230c      	movs	r3, #12
 8012d30:	603b      	str	r3, [r7, #0]
 8012d32:	4638      	mov	r0, r7
 8012d34:	f000 ff6c 	bl	8013c10 <__malloc_unlock>
 8012d38:	e7a1      	b.n	8012c7e <_malloc_r+0x22>
 8012d3a:	6025      	str	r5, [r4, #0]
 8012d3c:	e7de      	b.n	8012cfc <_malloc_r+0xa0>
 8012d3e:	bf00      	nop
 8012d40:	20003144 	.word	0x20003144

08012d44 <__ssputs_r>:
 8012d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d48:	688e      	ldr	r6, [r1, #8]
 8012d4a:	429e      	cmp	r6, r3
 8012d4c:	4682      	mov	sl, r0
 8012d4e:	460c      	mov	r4, r1
 8012d50:	4690      	mov	r8, r2
 8012d52:	461f      	mov	r7, r3
 8012d54:	d838      	bhi.n	8012dc8 <__ssputs_r+0x84>
 8012d56:	898a      	ldrh	r2, [r1, #12]
 8012d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012d5c:	d032      	beq.n	8012dc4 <__ssputs_r+0x80>
 8012d5e:	6825      	ldr	r5, [r4, #0]
 8012d60:	6909      	ldr	r1, [r1, #16]
 8012d62:	eba5 0901 	sub.w	r9, r5, r1
 8012d66:	6965      	ldr	r5, [r4, #20]
 8012d68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012d70:	3301      	adds	r3, #1
 8012d72:	444b      	add	r3, r9
 8012d74:	106d      	asrs	r5, r5, #1
 8012d76:	429d      	cmp	r5, r3
 8012d78:	bf38      	it	cc
 8012d7a:	461d      	movcc	r5, r3
 8012d7c:	0553      	lsls	r3, r2, #21
 8012d7e:	d531      	bpl.n	8012de4 <__ssputs_r+0xa0>
 8012d80:	4629      	mov	r1, r5
 8012d82:	f7ff ff6b 	bl	8012c5c <_malloc_r>
 8012d86:	4606      	mov	r6, r0
 8012d88:	b950      	cbnz	r0, 8012da0 <__ssputs_r+0x5c>
 8012d8a:	230c      	movs	r3, #12
 8012d8c:	f8ca 3000 	str.w	r3, [sl]
 8012d90:	89a3      	ldrh	r3, [r4, #12]
 8012d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d96:	81a3      	strh	r3, [r4, #12]
 8012d98:	f04f 30ff 	mov.w	r0, #4294967295
 8012d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012da0:	6921      	ldr	r1, [r4, #16]
 8012da2:	464a      	mov	r2, r9
 8012da4:	f7fb fe32 	bl	800ea0c <memcpy>
 8012da8:	89a3      	ldrh	r3, [r4, #12]
 8012daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012db2:	81a3      	strh	r3, [r4, #12]
 8012db4:	6126      	str	r6, [r4, #16]
 8012db6:	6165      	str	r5, [r4, #20]
 8012db8:	444e      	add	r6, r9
 8012dba:	eba5 0509 	sub.w	r5, r5, r9
 8012dbe:	6026      	str	r6, [r4, #0]
 8012dc0:	60a5      	str	r5, [r4, #8]
 8012dc2:	463e      	mov	r6, r7
 8012dc4:	42be      	cmp	r6, r7
 8012dc6:	d900      	bls.n	8012dca <__ssputs_r+0x86>
 8012dc8:	463e      	mov	r6, r7
 8012dca:	6820      	ldr	r0, [r4, #0]
 8012dcc:	4632      	mov	r2, r6
 8012dce:	4641      	mov	r1, r8
 8012dd0:	f7fb fe2a 	bl	800ea28 <memmove>
 8012dd4:	68a3      	ldr	r3, [r4, #8]
 8012dd6:	1b9b      	subs	r3, r3, r6
 8012dd8:	60a3      	str	r3, [r4, #8]
 8012dda:	6823      	ldr	r3, [r4, #0]
 8012ddc:	4433      	add	r3, r6
 8012dde:	6023      	str	r3, [r4, #0]
 8012de0:	2000      	movs	r0, #0
 8012de2:	e7db      	b.n	8012d9c <__ssputs_r+0x58>
 8012de4:	462a      	mov	r2, r5
 8012de6:	f000 ff19 	bl	8013c1c <_realloc_r>
 8012dea:	4606      	mov	r6, r0
 8012dec:	2800      	cmp	r0, #0
 8012dee:	d1e1      	bne.n	8012db4 <__ssputs_r+0x70>
 8012df0:	6921      	ldr	r1, [r4, #16]
 8012df2:	4650      	mov	r0, sl
 8012df4:	f7ff fec6 	bl	8012b84 <_free_r>
 8012df8:	e7c7      	b.n	8012d8a <__ssputs_r+0x46>
	...

08012dfc <_svfiprintf_r>:
 8012dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e00:	4698      	mov	r8, r3
 8012e02:	898b      	ldrh	r3, [r1, #12]
 8012e04:	061b      	lsls	r3, r3, #24
 8012e06:	b09d      	sub	sp, #116	; 0x74
 8012e08:	4607      	mov	r7, r0
 8012e0a:	460d      	mov	r5, r1
 8012e0c:	4614      	mov	r4, r2
 8012e0e:	d50e      	bpl.n	8012e2e <_svfiprintf_r+0x32>
 8012e10:	690b      	ldr	r3, [r1, #16]
 8012e12:	b963      	cbnz	r3, 8012e2e <_svfiprintf_r+0x32>
 8012e14:	2140      	movs	r1, #64	; 0x40
 8012e16:	f7ff ff21 	bl	8012c5c <_malloc_r>
 8012e1a:	6028      	str	r0, [r5, #0]
 8012e1c:	6128      	str	r0, [r5, #16]
 8012e1e:	b920      	cbnz	r0, 8012e2a <_svfiprintf_r+0x2e>
 8012e20:	230c      	movs	r3, #12
 8012e22:	603b      	str	r3, [r7, #0]
 8012e24:	f04f 30ff 	mov.w	r0, #4294967295
 8012e28:	e0d1      	b.n	8012fce <_svfiprintf_r+0x1d2>
 8012e2a:	2340      	movs	r3, #64	; 0x40
 8012e2c:	616b      	str	r3, [r5, #20]
 8012e2e:	2300      	movs	r3, #0
 8012e30:	9309      	str	r3, [sp, #36]	; 0x24
 8012e32:	2320      	movs	r3, #32
 8012e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e3c:	2330      	movs	r3, #48	; 0x30
 8012e3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012fe8 <_svfiprintf_r+0x1ec>
 8012e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012e46:	f04f 0901 	mov.w	r9, #1
 8012e4a:	4623      	mov	r3, r4
 8012e4c:	469a      	mov	sl, r3
 8012e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e52:	b10a      	cbz	r2, 8012e58 <_svfiprintf_r+0x5c>
 8012e54:	2a25      	cmp	r2, #37	; 0x25
 8012e56:	d1f9      	bne.n	8012e4c <_svfiprintf_r+0x50>
 8012e58:	ebba 0b04 	subs.w	fp, sl, r4
 8012e5c:	d00b      	beq.n	8012e76 <_svfiprintf_r+0x7a>
 8012e5e:	465b      	mov	r3, fp
 8012e60:	4622      	mov	r2, r4
 8012e62:	4629      	mov	r1, r5
 8012e64:	4638      	mov	r0, r7
 8012e66:	f7ff ff6d 	bl	8012d44 <__ssputs_r>
 8012e6a:	3001      	adds	r0, #1
 8012e6c:	f000 80aa 	beq.w	8012fc4 <_svfiprintf_r+0x1c8>
 8012e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e72:	445a      	add	r2, fp
 8012e74:	9209      	str	r2, [sp, #36]	; 0x24
 8012e76:	f89a 3000 	ldrb.w	r3, [sl]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	f000 80a2 	beq.w	8012fc4 <_svfiprintf_r+0x1c8>
 8012e80:	2300      	movs	r3, #0
 8012e82:	f04f 32ff 	mov.w	r2, #4294967295
 8012e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e8a:	f10a 0a01 	add.w	sl, sl, #1
 8012e8e:	9304      	str	r3, [sp, #16]
 8012e90:	9307      	str	r3, [sp, #28]
 8012e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e96:	931a      	str	r3, [sp, #104]	; 0x68
 8012e98:	4654      	mov	r4, sl
 8012e9a:	2205      	movs	r2, #5
 8012e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ea0:	4851      	ldr	r0, [pc, #324]	; (8012fe8 <_svfiprintf_r+0x1ec>)
 8012ea2:	f7ed f9bd 	bl	8000220 <memchr>
 8012ea6:	9a04      	ldr	r2, [sp, #16]
 8012ea8:	b9d8      	cbnz	r0, 8012ee2 <_svfiprintf_r+0xe6>
 8012eaa:	06d0      	lsls	r0, r2, #27
 8012eac:	bf44      	itt	mi
 8012eae:	2320      	movmi	r3, #32
 8012eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012eb4:	0711      	lsls	r1, r2, #28
 8012eb6:	bf44      	itt	mi
 8012eb8:	232b      	movmi	r3, #43	; 0x2b
 8012eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8012ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8012ec4:	d015      	beq.n	8012ef2 <_svfiprintf_r+0xf6>
 8012ec6:	9a07      	ldr	r2, [sp, #28]
 8012ec8:	4654      	mov	r4, sl
 8012eca:	2000      	movs	r0, #0
 8012ecc:	f04f 0c0a 	mov.w	ip, #10
 8012ed0:	4621      	mov	r1, r4
 8012ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ed6:	3b30      	subs	r3, #48	; 0x30
 8012ed8:	2b09      	cmp	r3, #9
 8012eda:	d94e      	bls.n	8012f7a <_svfiprintf_r+0x17e>
 8012edc:	b1b0      	cbz	r0, 8012f0c <_svfiprintf_r+0x110>
 8012ede:	9207      	str	r2, [sp, #28]
 8012ee0:	e014      	b.n	8012f0c <_svfiprintf_r+0x110>
 8012ee2:	eba0 0308 	sub.w	r3, r0, r8
 8012ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8012eea:	4313      	orrs	r3, r2
 8012eec:	9304      	str	r3, [sp, #16]
 8012eee:	46a2      	mov	sl, r4
 8012ef0:	e7d2      	b.n	8012e98 <_svfiprintf_r+0x9c>
 8012ef2:	9b03      	ldr	r3, [sp, #12]
 8012ef4:	1d19      	adds	r1, r3, #4
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	9103      	str	r1, [sp, #12]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	bfbb      	ittet	lt
 8012efe:	425b      	neglt	r3, r3
 8012f00:	f042 0202 	orrlt.w	r2, r2, #2
 8012f04:	9307      	strge	r3, [sp, #28]
 8012f06:	9307      	strlt	r3, [sp, #28]
 8012f08:	bfb8      	it	lt
 8012f0a:	9204      	strlt	r2, [sp, #16]
 8012f0c:	7823      	ldrb	r3, [r4, #0]
 8012f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8012f10:	d10c      	bne.n	8012f2c <_svfiprintf_r+0x130>
 8012f12:	7863      	ldrb	r3, [r4, #1]
 8012f14:	2b2a      	cmp	r3, #42	; 0x2a
 8012f16:	d135      	bne.n	8012f84 <_svfiprintf_r+0x188>
 8012f18:	9b03      	ldr	r3, [sp, #12]
 8012f1a:	1d1a      	adds	r2, r3, #4
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	9203      	str	r2, [sp, #12]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	bfb8      	it	lt
 8012f24:	f04f 33ff 	movlt.w	r3, #4294967295
 8012f28:	3402      	adds	r4, #2
 8012f2a:	9305      	str	r3, [sp, #20]
 8012f2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012ff8 <_svfiprintf_r+0x1fc>
 8012f30:	7821      	ldrb	r1, [r4, #0]
 8012f32:	2203      	movs	r2, #3
 8012f34:	4650      	mov	r0, sl
 8012f36:	f7ed f973 	bl	8000220 <memchr>
 8012f3a:	b140      	cbz	r0, 8012f4e <_svfiprintf_r+0x152>
 8012f3c:	2340      	movs	r3, #64	; 0x40
 8012f3e:	eba0 000a 	sub.w	r0, r0, sl
 8012f42:	fa03 f000 	lsl.w	r0, r3, r0
 8012f46:	9b04      	ldr	r3, [sp, #16]
 8012f48:	4303      	orrs	r3, r0
 8012f4a:	3401      	adds	r4, #1
 8012f4c:	9304      	str	r3, [sp, #16]
 8012f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f52:	4826      	ldr	r0, [pc, #152]	; (8012fec <_svfiprintf_r+0x1f0>)
 8012f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012f58:	2206      	movs	r2, #6
 8012f5a:	f7ed f961 	bl	8000220 <memchr>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d038      	beq.n	8012fd4 <_svfiprintf_r+0x1d8>
 8012f62:	4b23      	ldr	r3, [pc, #140]	; (8012ff0 <_svfiprintf_r+0x1f4>)
 8012f64:	bb1b      	cbnz	r3, 8012fae <_svfiprintf_r+0x1b2>
 8012f66:	9b03      	ldr	r3, [sp, #12]
 8012f68:	3307      	adds	r3, #7
 8012f6a:	f023 0307 	bic.w	r3, r3, #7
 8012f6e:	3308      	adds	r3, #8
 8012f70:	9303      	str	r3, [sp, #12]
 8012f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f74:	4433      	add	r3, r6
 8012f76:	9309      	str	r3, [sp, #36]	; 0x24
 8012f78:	e767      	b.n	8012e4a <_svfiprintf_r+0x4e>
 8012f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f7e:	460c      	mov	r4, r1
 8012f80:	2001      	movs	r0, #1
 8012f82:	e7a5      	b.n	8012ed0 <_svfiprintf_r+0xd4>
 8012f84:	2300      	movs	r3, #0
 8012f86:	3401      	adds	r4, #1
 8012f88:	9305      	str	r3, [sp, #20]
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	f04f 0c0a 	mov.w	ip, #10
 8012f90:	4620      	mov	r0, r4
 8012f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f96:	3a30      	subs	r2, #48	; 0x30
 8012f98:	2a09      	cmp	r2, #9
 8012f9a:	d903      	bls.n	8012fa4 <_svfiprintf_r+0x1a8>
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d0c5      	beq.n	8012f2c <_svfiprintf_r+0x130>
 8012fa0:	9105      	str	r1, [sp, #20]
 8012fa2:	e7c3      	b.n	8012f2c <_svfiprintf_r+0x130>
 8012fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fa8:	4604      	mov	r4, r0
 8012faa:	2301      	movs	r3, #1
 8012fac:	e7f0      	b.n	8012f90 <_svfiprintf_r+0x194>
 8012fae:	ab03      	add	r3, sp, #12
 8012fb0:	9300      	str	r3, [sp, #0]
 8012fb2:	462a      	mov	r2, r5
 8012fb4:	4b0f      	ldr	r3, [pc, #60]	; (8012ff4 <_svfiprintf_r+0x1f8>)
 8012fb6:	a904      	add	r1, sp, #16
 8012fb8:	4638      	mov	r0, r7
 8012fba:	f7fb fdf7 	bl	800ebac <_printf_float>
 8012fbe:	1c42      	adds	r2, r0, #1
 8012fc0:	4606      	mov	r6, r0
 8012fc2:	d1d6      	bne.n	8012f72 <_svfiprintf_r+0x176>
 8012fc4:	89ab      	ldrh	r3, [r5, #12]
 8012fc6:	065b      	lsls	r3, r3, #25
 8012fc8:	f53f af2c 	bmi.w	8012e24 <_svfiprintf_r+0x28>
 8012fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012fce:	b01d      	add	sp, #116	; 0x74
 8012fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd4:	ab03      	add	r3, sp, #12
 8012fd6:	9300      	str	r3, [sp, #0]
 8012fd8:	462a      	mov	r2, r5
 8012fda:	4b06      	ldr	r3, [pc, #24]	; (8012ff4 <_svfiprintf_r+0x1f8>)
 8012fdc:	a904      	add	r1, sp, #16
 8012fde:	4638      	mov	r0, r7
 8012fe0:	f7fc f888 	bl	800f0f4 <_printf_i>
 8012fe4:	e7eb      	b.n	8012fbe <_svfiprintf_r+0x1c2>
 8012fe6:	bf00      	nop
 8012fe8:	0801564c 	.word	0x0801564c
 8012fec:	08015656 	.word	0x08015656
 8012ff0:	0800ebad 	.word	0x0800ebad
 8012ff4:	08012d45 	.word	0x08012d45
 8012ff8:	08015652 	.word	0x08015652

08012ffc <_sungetc_r>:
 8012ffc:	b538      	push	{r3, r4, r5, lr}
 8012ffe:	1c4b      	adds	r3, r1, #1
 8013000:	4614      	mov	r4, r2
 8013002:	d103      	bne.n	801300c <_sungetc_r+0x10>
 8013004:	f04f 35ff 	mov.w	r5, #4294967295
 8013008:	4628      	mov	r0, r5
 801300a:	bd38      	pop	{r3, r4, r5, pc}
 801300c:	8993      	ldrh	r3, [r2, #12]
 801300e:	f023 0320 	bic.w	r3, r3, #32
 8013012:	8193      	strh	r3, [r2, #12]
 8013014:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013016:	6852      	ldr	r2, [r2, #4]
 8013018:	b2cd      	uxtb	r5, r1
 801301a:	b18b      	cbz	r3, 8013040 <_sungetc_r+0x44>
 801301c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801301e:	4293      	cmp	r3, r2
 8013020:	dd08      	ble.n	8013034 <_sungetc_r+0x38>
 8013022:	6823      	ldr	r3, [r4, #0]
 8013024:	1e5a      	subs	r2, r3, #1
 8013026:	6022      	str	r2, [r4, #0]
 8013028:	f803 5c01 	strb.w	r5, [r3, #-1]
 801302c:	6863      	ldr	r3, [r4, #4]
 801302e:	3301      	adds	r3, #1
 8013030:	6063      	str	r3, [r4, #4]
 8013032:	e7e9      	b.n	8013008 <_sungetc_r+0xc>
 8013034:	4621      	mov	r1, r4
 8013036:	f000 fd4b 	bl	8013ad0 <__submore>
 801303a:	2800      	cmp	r0, #0
 801303c:	d0f1      	beq.n	8013022 <_sungetc_r+0x26>
 801303e:	e7e1      	b.n	8013004 <_sungetc_r+0x8>
 8013040:	6921      	ldr	r1, [r4, #16]
 8013042:	6823      	ldr	r3, [r4, #0]
 8013044:	b151      	cbz	r1, 801305c <_sungetc_r+0x60>
 8013046:	4299      	cmp	r1, r3
 8013048:	d208      	bcs.n	801305c <_sungetc_r+0x60>
 801304a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801304e:	42a9      	cmp	r1, r5
 8013050:	d104      	bne.n	801305c <_sungetc_r+0x60>
 8013052:	3b01      	subs	r3, #1
 8013054:	3201      	adds	r2, #1
 8013056:	6023      	str	r3, [r4, #0]
 8013058:	6062      	str	r2, [r4, #4]
 801305a:	e7d5      	b.n	8013008 <_sungetc_r+0xc>
 801305c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013064:	6363      	str	r3, [r4, #52]	; 0x34
 8013066:	2303      	movs	r3, #3
 8013068:	63a3      	str	r3, [r4, #56]	; 0x38
 801306a:	4623      	mov	r3, r4
 801306c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013070:	6023      	str	r3, [r4, #0]
 8013072:	2301      	movs	r3, #1
 8013074:	e7dc      	b.n	8013030 <_sungetc_r+0x34>

08013076 <__ssrefill_r>:
 8013076:	b510      	push	{r4, lr}
 8013078:	460c      	mov	r4, r1
 801307a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801307c:	b169      	cbz	r1, 801309a <__ssrefill_r+0x24>
 801307e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013082:	4299      	cmp	r1, r3
 8013084:	d001      	beq.n	801308a <__ssrefill_r+0x14>
 8013086:	f7ff fd7d 	bl	8012b84 <_free_r>
 801308a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801308c:	6063      	str	r3, [r4, #4]
 801308e:	2000      	movs	r0, #0
 8013090:	6360      	str	r0, [r4, #52]	; 0x34
 8013092:	b113      	cbz	r3, 801309a <__ssrefill_r+0x24>
 8013094:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013096:	6023      	str	r3, [r4, #0]
 8013098:	bd10      	pop	{r4, pc}
 801309a:	6923      	ldr	r3, [r4, #16]
 801309c:	6023      	str	r3, [r4, #0]
 801309e:	2300      	movs	r3, #0
 80130a0:	6063      	str	r3, [r4, #4]
 80130a2:	89a3      	ldrh	r3, [r4, #12]
 80130a4:	f043 0320 	orr.w	r3, r3, #32
 80130a8:	81a3      	strh	r3, [r4, #12]
 80130aa:	f04f 30ff 	mov.w	r0, #4294967295
 80130ae:	e7f3      	b.n	8013098 <__ssrefill_r+0x22>

080130b0 <__ssvfiscanf_r>:
 80130b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130b4:	460c      	mov	r4, r1
 80130b6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80130ba:	2100      	movs	r1, #0
 80130bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80130c0:	49a6      	ldr	r1, [pc, #664]	; (801335c <__ssvfiscanf_r+0x2ac>)
 80130c2:	91a0      	str	r1, [sp, #640]	; 0x280
 80130c4:	f10d 0804 	add.w	r8, sp, #4
 80130c8:	49a5      	ldr	r1, [pc, #660]	; (8013360 <__ssvfiscanf_r+0x2b0>)
 80130ca:	4fa6      	ldr	r7, [pc, #664]	; (8013364 <__ssvfiscanf_r+0x2b4>)
 80130cc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013368 <__ssvfiscanf_r+0x2b8>
 80130d0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80130d4:	4606      	mov	r6, r0
 80130d6:	91a1      	str	r1, [sp, #644]	; 0x284
 80130d8:	9300      	str	r3, [sp, #0]
 80130da:	7813      	ldrb	r3, [r2, #0]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	f000 815a 	beq.w	8013396 <__ssvfiscanf_r+0x2e6>
 80130e2:	5dd9      	ldrb	r1, [r3, r7]
 80130e4:	f011 0108 	ands.w	r1, r1, #8
 80130e8:	f102 0501 	add.w	r5, r2, #1
 80130ec:	d019      	beq.n	8013122 <__ssvfiscanf_r+0x72>
 80130ee:	6863      	ldr	r3, [r4, #4]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	dd0f      	ble.n	8013114 <__ssvfiscanf_r+0x64>
 80130f4:	6823      	ldr	r3, [r4, #0]
 80130f6:	781a      	ldrb	r2, [r3, #0]
 80130f8:	5cba      	ldrb	r2, [r7, r2]
 80130fa:	0712      	lsls	r2, r2, #28
 80130fc:	d401      	bmi.n	8013102 <__ssvfiscanf_r+0x52>
 80130fe:	462a      	mov	r2, r5
 8013100:	e7eb      	b.n	80130da <__ssvfiscanf_r+0x2a>
 8013102:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013104:	3201      	adds	r2, #1
 8013106:	9245      	str	r2, [sp, #276]	; 0x114
 8013108:	6862      	ldr	r2, [r4, #4]
 801310a:	3301      	adds	r3, #1
 801310c:	3a01      	subs	r2, #1
 801310e:	6062      	str	r2, [r4, #4]
 8013110:	6023      	str	r3, [r4, #0]
 8013112:	e7ec      	b.n	80130ee <__ssvfiscanf_r+0x3e>
 8013114:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013116:	4621      	mov	r1, r4
 8013118:	4630      	mov	r0, r6
 801311a:	4798      	blx	r3
 801311c:	2800      	cmp	r0, #0
 801311e:	d0e9      	beq.n	80130f4 <__ssvfiscanf_r+0x44>
 8013120:	e7ed      	b.n	80130fe <__ssvfiscanf_r+0x4e>
 8013122:	2b25      	cmp	r3, #37	; 0x25
 8013124:	d012      	beq.n	801314c <__ssvfiscanf_r+0x9c>
 8013126:	469a      	mov	sl, r3
 8013128:	6863      	ldr	r3, [r4, #4]
 801312a:	2b00      	cmp	r3, #0
 801312c:	f340 8091 	ble.w	8013252 <__ssvfiscanf_r+0x1a2>
 8013130:	6822      	ldr	r2, [r4, #0]
 8013132:	7813      	ldrb	r3, [r2, #0]
 8013134:	4553      	cmp	r3, sl
 8013136:	f040 812e 	bne.w	8013396 <__ssvfiscanf_r+0x2e6>
 801313a:	6863      	ldr	r3, [r4, #4]
 801313c:	3b01      	subs	r3, #1
 801313e:	6063      	str	r3, [r4, #4]
 8013140:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013142:	3201      	adds	r2, #1
 8013144:	3301      	adds	r3, #1
 8013146:	6022      	str	r2, [r4, #0]
 8013148:	9345      	str	r3, [sp, #276]	; 0x114
 801314a:	e7d8      	b.n	80130fe <__ssvfiscanf_r+0x4e>
 801314c:	9141      	str	r1, [sp, #260]	; 0x104
 801314e:	9143      	str	r1, [sp, #268]	; 0x10c
 8013150:	7853      	ldrb	r3, [r2, #1]
 8013152:	2b2a      	cmp	r3, #42	; 0x2a
 8013154:	bf02      	ittt	eq
 8013156:	2310      	moveq	r3, #16
 8013158:	1c95      	addeq	r5, r2, #2
 801315a:	9341      	streq	r3, [sp, #260]	; 0x104
 801315c:	220a      	movs	r2, #10
 801315e:	46aa      	mov	sl, r5
 8013160:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013164:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013168:	2b09      	cmp	r3, #9
 801316a:	d91d      	bls.n	80131a8 <__ssvfiscanf_r+0xf8>
 801316c:	487e      	ldr	r0, [pc, #504]	; (8013368 <__ssvfiscanf_r+0x2b8>)
 801316e:	2203      	movs	r2, #3
 8013170:	f7ed f856 	bl	8000220 <memchr>
 8013174:	b140      	cbz	r0, 8013188 <__ssvfiscanf_r+0xd8>
 8013176:	2301      	movs	r3, #1
 8013178:	eba0 0009 	sub.w	r0, r0, r9
 801317c:	fa03 f000 	lsl.w	r0, r3, r0
 8013180:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013182:	4318      	orrs	r0, r3
 8013184:	9041      	str	r0, [sp, #260]	; 0x104
 8013186:	4655      	mov	r5, sl
 8013188:	f815 3b01 	ldrb.w	r3, [r5], #1
 801318c:	2b78      	cmp	r3, #120	; 0x78
 801318e:	d806      	bhi.n	801319e <__ssvfiscanf_r+0xee>
 8013190:	2b57      	cmp	r3, #87	; 0x57
 8013192:	d810      	bhi.n	80131b6 <__ssvfiscanf_r+0x106>
 8013194:	2b25      	cmp	r3, #37	; 0x25
 8013196:	d0c6      	beq.n	8013126 <__ssvfiscanf_r+0x76>
 8013198:	d856      	bhi.n	8013248 <__ssvfiscanf_r+0x198>
 801319a:	2b00      	cmp	r3, #0
 801319c:	d064      	beq.n	8013268 <__ssvfiscanf_r+0x1b8>
 801319e:	2303      	movs	r3, #3
 80131a0:	9347      	str	r3, [sp, #284]	; 0x11c
 80131a2:	230a      	movs	r3, #10
 80131a4:	9342      	str	r3, [sp, #264]	; 0x108
 80131a6:	e071      	b.n	801328c <__ssvfiscanf_r+0x1dc>
 80131a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80131aa:	fb02 1103 	mla	r1, r2, r3, r1
 80131ae:	3930      	subs	r1, #48	; 0x30
 80131b0:	9143      	str	r1, [sp, #268]	; 0x10c
 80131b2:	4655      	mov	r5, sl
 80131b4:	e7d3      	b.n	801315e <__ssvfiscanf_r+0xae>
 80131b6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80131ba:	2a20      	cmp	r2, #32
 80131bc:	d8ef      	bhi.n	801319e <__ssvfiscanf_r+0xee>
 80131be:	a101      	add	r1, pc, #4	; (adr r1, 80131c4 <__ssvfiscanf_r+0x114>)
 80131c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80131c4:	08013277 	.word	0x08013277
 80131c8:	0801319f 	.word	0x0801319f
 80131cc:	0801319f 	.word	0x0801319f
 80131d0:	080132d5 	.word	0x080132d5
 80131d4:	0801319f 	.word	0x0801319f
 80131d8:	0801319f 	.word	0x0801319f
 80131dc:	0801319f 	.word	0x0801319f
 80131e0:	0801319f 	.word	0x0801319f
 80131e4:	0801319f 	.word	0x0801319f
 80131e8:	0801319f 	.word	0x0801319f
 80131ec:	0801319f 	.word	0x0801319f
 80131f0:	080132eb 	.word	0x080132eb
 80131f4:	080132c1 	.word	0x080132c1
 80131f8:	0801324f 	.word	0x0801324f
 80131fc:	0801324f 	.word	0x0801324f
 8013200:	0801324f 	.word	0x0801324f
 8013204:	0801319f 	.word	0x0801319f
 8013208:	080132c5 	.word	0x080132c5
 801320c:	0801319f 	.word	0x0801319f
 8013210:	0801319f 	.word	0x0801319f
 8013214:	0801319f 	.word	0x0801319f
 8013218:	0801319f 	.word	0x0801319f
 801321c:	080132fb 	.word	0x080132fb
 8013220:	080132cd 	.word	0x080132cd
 8013224:	0801326f 	.word	0x0801326f
 8013228:	0801319f 	.word	0x0801319f
 801322c:	0801319f 	.word	0x0801319f
 8013230:	080132f7 	.word	0x080132f7
 8013234:	0801319f 	.word	0x0801319f
 8013238:	080132c1 	.word	0x080132c1
 801323c:	0801319f 	.word	0x0801319f
 8013240:	0801319f 	.word	0x0801319f
 8013244:	08013277 	.word	0x08013277
 8013248:	3b45      	subs	r3, #69	; 0x45
 801324a:	2b02      	cmp	r3, #2
 801324c:	d8a7      	bhi.n	801319e <__ssvfiscanf_r+0xee>
 801324e:	2305      	movs	r3, #5
 8013250:	e01b      	b.n	801328a <__ssvfiscanf_r+0x1da>
 8013252:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013254:	4621      	mov	r1, r4
 8013256:	4630      	mov	r0, r6
 8013258:	4798      	blx	r3
 801325a:	2800      	cmp	r0, #0
 801325c:	f43f af68 	beq.w	8013130 <__ssvfiscanf_r+0x80>
 8013260:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013262:	2800      	cmp	r0, #0
 8013264:	f040 808d 	bne.w	8013382 <__ssvfiscanf_r+0x2d2>
 8013268:	f04f 30ff 	mov.w	r0, #4294967295
 801326c:	e08f      	b.n	801338e <__ssvfiscanf_r+0x2de>
 801326e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013270:	f042 0220 	orr.w	r2, r2, #32
 8013274:	9241      	str	r2, [sp, #260]	; 0x104
 8013276:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801327c:	9241      	str	r2, [sp, #260]	; 0x104
 801327e:	2210      	movs	r2, #16
 8013280:	2b6f      	cmp	r3, #111	; 0x6f
 8013282:	9242      	str	r2, [sp, #264]	; 0x108
 8013284:	bf34      	ite	cc
 8013286:	2303      	movcc	r3, #3
 8013288:	2304      	movcs	r3, #4
 801328a:	9347      	str	r3, [sp, #284]	; 0x11c
 801328c:	6863      	ldr	r3, [r4, #4]
 801328e:	2b00      	cmp	r3, #0
 8013290:	dd42      	ble.n	8013318 <__ssvfiscanf_r+0x268>
 8013292:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013294:	0659      	lsls	r1, r3, #25
 8013296:	d404      	bmi.n	80132a2 <__ssvfiscanf_r+0x1f2>
 8013298:	6823      	ldr	r3, [r4, #0]
 801329a:	781a      	ldrb	r2, [r3, #0]
 801329c:	5cba      	ldrb	r2, [r7, r2]
 801329e:	0712      	lsls	r2, r2, #28
 80132a0:	d441      	bmi.n	8013326 <__ssvfiscanf_r+0x276>
 80132a2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80132a4:	2b02      	cmp	r3, #2
 80132a6:	dc50      	bgt.n	801334a <__ssvfiscanf_r+0x29a>
 80132a8:	466b      	mov	r3, sp
 80132aa:	4622      	mov	r2, r4
 80132ac:	a941      	add	r1, sp, #260	; 0x104
 80132ae:	4630      	mov	r0, r6
 80132b0:	f000 f9d0 	bl	8013654 <_scanf_chars>
 80132b4:	2801      	cmp	r0, #1
 80132b6:	d06e      	beq.n	8013396 <__ssvfiscanf_r+0x2e6>
 80132b8:	2802      	cmp	r0, #2
 80132ba:	f47f af20 	bne.w	80130fe <__ssvfiscanf_r+0x4e>
 80132be:	e7cf      	b.n	8013260 <__ssvfiscanf_r+0x1b0>
 80132c0:	220a      	movs	r2, #10
 80132c2:	e7dd      	b.n	8013280 <__ssvfiscanf_r+0x1d0>
 80132c4:	2300      	movs	r3, #0
 80132c6:	9342      	str	r3, [sp, #264]	; 0x108
 80132c8:	2303      	movs	r3, #3
 80132ca:	e7de      	b.n	801328a <__ssvfiscanf_r+0x1da>
 80132cc:	2308      	movs	r3, #8
 80132ce:	9342      	str	r3, [sp, #264]	; 0x108
 80132d0:	2304      	movs	r3, #4
 80132d2:	e7da      	b.n	801328a <__ssvfiscanf_r+0x1da>
 80132d4:	4629      	mov	r1, r5
 80132d6:	4640      	mov	r0, r8
 80132d8:	f000 fb3a 	bl	8013950 <__sccl>
 80132dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80132de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132e2:	9341      	str	r3, [sp, #260]	; 0x104
 80132e4:	4605      	mov	r5, r0
 80132e6:	2301      	movs	r3, #1
 80132e8:	e7cf      	b.n	801328a <__ssvfiscanf_r+0x1da>
 80132ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80132ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132f0:	9341      	str	r3, [sp, #260]	; 0x104
 80132f2:	2300      	movs	r3, #0
 80132f4:	e7c9      	b.n	801328a <__ssvfiscanf_r+0x1da>
 80132f6:	2302      	movs	r3, #2
 80132f8:	e7c7      	b.n	801328a <__ssvfiscanf_r+0x1da>
 80132fa:	9841      	ldr	r0, [sp, #260]	; 0x104
 80132fc:	06c3      	lsls	r3, r0, #27
 80132fe:	f53f aefe 	bmi.w	80130fe <__ssvfiscanf_r+0x4e>
 8013302:	9b00      	ldr	r3, [sp, #0]
 8013304:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013306:	1d19      	adds	r1, r3, #4
 8013308:	9100      	str	r1, [sp, #0]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	f010 0f01 	tst.w	r0, #1
 8013310:	bf14      	ite	ne
 8013312:	801a      	strhne	r2, [r3, #0]
 8013314:	601a      	streq	r2, [r3, #0]
 8013316:	e6f2      	b.n	80130fe <__ssvfiscanf_r+0x4e>
 8013318:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801331a:	4621      	mov	r1, r4
 801331c:	4630      	mov	r0, r6
 801331e:	4798      	blx	r3
 8013320:	2800      	cmp	r0, #0
 8013322:	d0b6      	beq.n	8013292 <__ssvfiscanf_r+0x1e2>
 8013324:	e79c      	b.n	8013260 <__ssvfiscanf_r+0x1b0>
 8013326:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013328:	3201      	adds	r2, #1
 801332a:	9245      	str	r2, [sp, #276]	; 0x114
 801332c:	6862      	ldr	r2, [r4, #4]
 801332e:	3a01      	subs	r2, #1
 8013330:	2a00      	cmp	r2, #0
 8013332:	6062      	str	r2, [r4, #4]
 8013334:	dd02      	ble.n	801333c <__ssvfiscanf_r+0x28c>
 8013336:	3301      	adds	r3, #1
 8013338:	6023      	str	r3, [r4, #0]
 801333a:	e7ad      	b.n	8013298 <__ssvfiscanf_r+0x1e8>
 801333c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801333e:	4621      	mov	r1, r4
 8013340:	4630      	mov	r0, r6
 8013342:	4798      	blx	r3
 8013344:	2800      	cmp	r0, #0
 8013346:	d0a7      	beq.n	8013298 <__ssvfiscanf_r+0x1e8>
 8013348:	e78a      	b.n	8013260 <__ssvfiscanf_r+0x1b0>
 801334a:	2b04      	cmp	r3, #4
 801334c:	dc0e      	bgt.n	801336c <__ssvfiscanf_r+0x2bc>
 801334e:	466b      	mov	r3, sp
 8013350:	4622      	mov	r2, r4
 8013352:	a941      	add	r1, sp, #260	; 0x104
 8013354:	4630      	mov	r0, r6
 8013356:	f000 f9d7 	bl	8013708 <_scanf_i>
 801335a:	e7ab      	b.n	80132b4 <__ssvfiscanf_r+0x204>
 801335c:	08012ffd 	.word	0x08012ffd
 8013360:	08013077 	.word	0x08013077
 8013364:	080151f9 	.word	0x080151f9
 8013368:	08015652 	.word	0x08015652
 801336c:	4b0b      	ldr	r3, [pc, #44]	; (801339c <__ssvfiscanf_r+0x2ec>)
 801336e:	2b00      	cmp	r3, #0
 8013370:	f43f aec5 	beq.w	80130fe <__ssvfiscanf_r+0x4e>
 8013374:	466b      	mov	r3, sp
 8013376:	4622      	mov	r2, r4
 8013378:	a941      	add	r1, sp, #260	; 0x104
 801337a:	4630      	mov	r0, r6
 801337c:	f7fb ffe0 	bl	800f340 <_scanf_float>
 8013380:	e798      	b.n	80132b4 <__ssvfiscanf_r+0x204>
 8013382:	89a3      	ldrh	r3, [r4, #12]
 8013384:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013388:	bf18      	it	ne
 801338a:	f04f 30ff 	movne.w	r0, #4294967295
 801338e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013396:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013398:	e7f9      	b.n	801338e <__ssvfiscanf_r+0x2de>
 801339a:	bf00      	nop
 801339c:	0800f341 	.word	0x0800f341

080133a0 <__sfputc_r>:
 80133a0:	6893      	ldr	r3, [r2, #8]
 80133a2:	3b01      	subs	r3, #1
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	b410      	push	{r4}
 80133a8:	6093      	str	r3, [r2, #8]
 80133aa:	da08      	bge.n	80133be <__sfputc_r+0x1e>
 80133ac:	6994      	ldr	r4, [r2, #24]
 80133ae:	42a3      	cmp	r3, r4
 80133b0:	db01      	blt.n	80133b6 <__sfputc_r+0x16>
 80133b2:	290a      	cmp	r1, #10
 80133b4:	d103      	bne.n	80133be <__sfputc_r+0x1e>
 80133b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133ba:	f7fd b9ed 	b.w	8010798 <__swbuf_r>
 80133be:	6813      	ldr	r3, [r2, #0]
 80133c0:	1c58      	adds	r0, r3, #1
 80133c2:	6010      	str	r0, [r2, #0]
 80133c4:	7019      	strb	r1, [r3, #0]
 80133c6:	4608      	mov	r0, r1
 80133c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133cc:	4770      	bx	lr

080133ce <__sfputs_r>:
 80133ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133d0:	4606      	mov	r6, r0
 80133d2:	460f      	mov	r7, r1
 80133d4:	4614      	mov	r4, r2
 80133d6:	18d5      	adds	r5, r2, r3
 80133d8:	42ac      	cmp	r4, r5
 80133da:	d101      	bne.n	80133e0 <__sfputs_r+0x12>
 80133dc:	2000      	movs	r0, #0
 80133de:	e007      	b.n	80133f0 <__sfputs_r+0x22>
 80133e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133e4:	463a      	mov	r2, r7
 80133e6:	4630      	mov	r0, r6
 80133e8:	f7ff ffda 	bl	80133a0 <__sfputc_r>
 80133ec:	1c43      	adds	r3, r0, #1
 80133ee:	d1f3      	bne.n	80133d8 <__sfputs_r+0xa>
 80133f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080133f4 <_vfiprintf_r>:
 80133f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133f8:	460d      	mov	r5, r1
 80133fa:	b09d      	sub	sp, #116	; 0x74
 80133fc:	4614      	mov	r4, r2
 80133fe:	4698      	mov	r8, r3
 8013400:	4606      	mov	r6, r0
 8013402:	b118      	cbz	r0, 801340c <_vfiprintf_r+0x18>
 8013404:	6983      	ldr	r3, [r0, #24]
 8013406:	b90b      	cbnz	r3, 801340c <_vfiprintf_r+0x18>
 8013408:	f7fe fa3e 	bl	8011888 <__sinit>
 801340c:	4b89      	ldr	r3, [pc, #548]	; (8013634 <_vfiprintf_r+0x240>)
 801340e:	429d      	cmp	r5, r3
 8013410:	d11b      	bne.n	801344a <_vfiprintf_r+0x56>
 8013412:	6875      	ldr	r5, [r6, #4]
 8013414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013416:	07d9      	lsls	r1, r3, #31
 8013418:	d405      	bmi.n	8013426 <_vfiprintf_r+0x32>
 801341a:	89ab      	ldrh	r3, [r5, #12]
 801341c:	059a      	lsls	r2, r3, #22
 801341e:	d402      	bmi.n	8013426 <_vfiprintf_r+0x32>
 8013420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013422:	f7fe fe42 	bl	80120aa <__retarget_lock_acquire_recursive>
 8013426:	89ab      	ldrh	r3, [r5, #12]
 8013428:	071b      	lsls	r3, r3, #28
 801342a:	d501      	bpl.n	8013430 <_vfiprintf_r+0x3c>
 801342c:	692b      	ldr	r3, [r5, #16]
 801342e:	b9eb      	cbnz	r3, 801346c <_vfiprintf_r+0x78>
 8013430:	4629      	mov	r1, r5
 8013432:	4630      	mov	r0, r6
 8013434:	f7fd fa14 	bl	8010860 <__swsetup_r>
 8013438:	b1c0      	cbz	r0, 801346c <_vfiprintf_r+0x78>
 801343a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801343c:	07dc      	lsls	r4, r3, #31
 801343e:	d50e      	bpl.n	801345e <_vfiprintf_r+0x6a>
 8013440:	f04f 30ff 	mov.w	r0, #4294967295
 8013444:	b01d      	add	sp, #116	; 0x74
 8013446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801344a:	4b7b      	ldr	r3, [pc, #492]	; (8013638 <_vfiprintf_r+0x244>)
 801344c:	429d      	cmp	r5, r3
 801344e:	d101      	bne.n	8013454 <_vfiprintf_r+0x60>
 8013450:	68b5      	ldr	r5, [r6, #8]
 8013452:	e7df      	b.n	8013414 <_vfiprintf_r+0x20>
 8013454:	4b79      	ldr	r3, [pc, #484]	; (801363c <_vfiprintf_r+0x248>)
 8013456:	429d      	cmp	r5, r3
 8013458:	bf08      	it	eq
 801345a:	68f5      	ldreq	r5, [r6, #12]
 801345c:	e7da      	b.n	8013414 <_vfiprintf_r+0x20>
 801345e:	89ab      	ldrh	r3, [r5, #12]
 8013460:	0598      	lsls	r0, r3, #22
 8013462:	d4ed      	bmi.n	8013440 <_vfiprintf_r+0x4c>
 8013464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013466:	f7fe fe21 	bl	80120ac <__retarget_lock_release_recursive>
 801346a:	e7e9      	b.n	8013440 <_vfiprintf_r+0x4c>
 801346c:	2300      	movs	r3, #0
 801346e:	9309      	str	r3, [sp, #36]	; 0x24
 8013470:	2320      	movs	r3, #32
 8013472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013476:	f8cd 800c 	str.w	r8, [sp, #12]
 801347a:	2330      	movs	r3, #48	; 0x30
 801347c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013640 <_vfiprintf_r+0x24c>
 8013480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013484:	f04f 0901 	mov.w	r9, #1
 8013488:	4623      	mov	r3, r4
 801348a:	469a      	mov	sl, r3
 801348c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013490:	b10a      	cbz	r2, 8013496 <_vfiprintf_r+0xa2>
 8013492:	2a25      	cmp	r2, #37	; 0x25
 8013494:	d1f9      	bne.n	801348a <_vfiprintf_r+0x96>
 8013496:	ebba 0b04 	subs.w	fp, sl, r4
 801349a:	d00b      	beq.n	80134b4 <_vfiprintf_r+0xc0>
 801349c:	465b      	mov	r3, fp
 801349e:	4622      	mov	r2, r4
 80134a0:	4629      	mov	r1, r5
 80134a2:	4630      	mov	r0, r6
 80134a4:	f7ff ff93 	bl	80133ce <__sfputs_r>
 80134a8:	3001      	adds	r0, #1
 80134aa:	f000 80aa 	beq.w	8013602 <_vfiprintf_r+0x20e>
 80134ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134b0:	445a      	add	r2, fp
 80134b2:	9209      	str	r2, [sp, #36]	; 0x24
 80134b4:	f89a 3000 	ldrb.w	r3, [sl]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	f000 80a2 	beq.w	8013602 <_vfiprintf_r+0x20e>
 80134be:	2300      	movs	r3, #0
 80134c0:	f04f 32ff 	mov.w	r2, #4294967295
 80134c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134c8:	f10a 0a01 	add.w	sl, sl, #1
 80134cc:	9304      	str	r3, [sp, #16]
 80134ce:	9307      	str	r3, [sp, #28]
 80134d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80134d4:	931a      	str	r3, [sp, #104]	; 0x68
 80134d6:	4654      	mov	r4, sl
 80134d8:	2205      	movs	r2, #5
 80134da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134de:	4858      	ldr	r0, [pc, #352]	; (8013640 <_vfiprintf_r+0x24c>)
 80134e0:	f7ec fe9e 	bl	8000220 <memchr>
 80134e4:	9a04      	ldr	r2, [sp, #16]
 80134e6:	b9d8      	cbnz	r0, 8013520 <_vfiprintf_r+0x12c>
 80134e8:	06d1      	lsls	r1, r2, #27
 80134ea:	bf44      	itt	mi
 80134ec:	2320      	movmi	r3, #32
 80134ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80134f2:	0713      	lsls	r3, r2, #28
 80134f4:	bf44      	itt	mi
 80134f6:	232b      	movmi	r3, #43	; 0x2b
 80134f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80134fc:	f89a 3000 	ldrb.w	r3, [sl]
 8013500:	2b2a      	cmp	r3, #42	; 0x2a
 8013502:	d015      	beq.n	8013530 <_vfiprintf_r+0x13c>
 8013504:	9a07      	ldr	r2, [sp, #28]
 8013506:	4654      	mov	r4, sl
 8013508:	2000      	movs	r0, #0
 801350a:	f04f 0c0a 	mov.w	ip, #10
 801350e:	4621      	mov	r1, r4
 8013510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013514:	3b30      	subs	r3, #48	; 0x30
 8013516:	2b09      	cmp	r3, #9
 8013518:	d94e      	bls.n	80135b8 <_vfiprintf_r+0x1c4>
 801351a:	b1b0      	cbz	r0, 801354a <_vfiprintf_r+0x156>
 801351c:	9207      	str	r2, [sp, #28]
 801351e:	e014      	b.n	801354a <_vfiprintf_r+0x156>
 8013520:	eba0 0308 	sub.w	r3, r0, r8
 8013524:	fa09 f303 	lsl.w	r3, r9, r3
 8013528:	4313      	orrs	r3, r2
 801352a:	9304      	str	r3, [sp, #16]
 801352c:	46a2      	mov	sl, r4
 801352e:	e7d2      	b.n	80134d6 <_vfiprintf_r+0xe2>
 8013530:	9b03      	ldr	r3, [sp, #12]
 8013532:	1d19      	adds	r1, r3, #4
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	9103      	str	r1, [sp, #12]
 8013538:	2b00      	cmp	r3, #0
 801353a:	bfbb      	ittet	lt
 801353c:	425b      	neglt	r3, r3
 801353e:	f042 0202 	orrlt.w	r2, r2, #2
 8013542:	9307      	strge	r3, [sp, #28]
 8013544:	9307      	strlt	r3, [sp, #28]
 8013546:	bfb8      	it	lt
 8013548:	9204      	strlt	r2, [sp, #16]
 801354a:	7823      	ldrb	r3, [r4, #0]
 801354c:	2b2e      	cmp	r3, #46	; 0x2e
 801354e:	d10c      	bne.n	801356a <_vfiprintf_r+0x176>
 8013550:	7863      	ldrb	r3, [r4, #1]
 8013552:	2b2a      	cmp	r3, #42	; 0x2a
 8013554:	d135      	bne.n	80135c2 <_vfiprintf_r+0x1ce>
 8013556:	9b03      	ldr	r3, [sp, #12]
 8013558:	1d1a      	adds	r2, r3, #4
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	9203      	str	r2, [sp, #12]
 801355e:	2b00      	cmp	r3, #0
 8013560:	bfb8      	it	lt
 8013562:	f04f 33ff 	movlt.w	r3, #4294967295
 8013566:	3402      	adds	r4, #2
 8013568:	9305      	str	r3, [sp, #20]
 801356a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013650 <_vfiprintf_r+0x25c>
 801356e:	7821      	ldrb	r1, [r4, #0]
 8013570:	2203      	movs	r2, #3
 8013572:	4650      	mov	r0, sl
 8013574:	f7ec fe54 	bl	8000220 <memchr>
 8013578:	b140      	cbz	r0, 801358c <_vfiprintf_r+0x198>
 801357a:	2340      	movs	r3, #64	; 0x40
 801357c:	eba0 000a 	sub.w	r0, r0, sl
 8013580:	fa03 f000 	lsl.w	r0, r3, r0
 8013584:	9b04      	ldr	r3, [sp, #16]
 8013586:	4303      	orrs	r3, r0
 8013588:	3401      	adds	r4, #1
 801358a:	9304      	str	r3, [sp, #16]
 801358c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013590:	482c      	ldr	r0, [pc, #176]	; (8013644 <_vfiprintf_r+0x250>)
 8013592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013596:	2206      	movs	r2, #6
 8013598:	f7ec fe42 	bl	8000220 <memchr>
 801359c:	2800      	cmp	r0, #0
 801359e:	d03f      	beq.n	8013620 <_vfiprintf_r+0x22c>
 80135a0:	4b29      	ldr	r3, [pc, #164]	; (8013648 <_vfiprintf_r+0x254>)
 80135a2:	bb1b      	cbnz	r3, 80135ec <_vfiprintf_r+0x1f8>
 80135a4:	9b03      	ldr	r3, [sp, #12]
 80135a6:	3307      	adds	r3, #7
 80135a8:	f023 0307 	bic.w	r3, r3, #7
 80135ac:	3308      	adds	r3, #8
 80135ae:	9303      	str	r3, [sp, #12]
 80135b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135b2:	443b      	add	r3, r7
 80135b4:	9309      	str	r3, [sp, #36]	; 0x24
 80135b6:	e767      	b.n	8013488 <_vfiprintf_r+0x94>
 80135b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80135bc:	460c      	mov	r4, r1
 80135be:	2001      	movs	r0, #1
 80135c0:	e7a5      	b.n	801350e <_vfiprintf_r+0x11a>
 80135c2:	2300      	movs	r3, #0
 80135c4:	3401      	adds	r4, #1
 80135c6:	9305      	str	r3, [sp, #20]
 80135c8:	4619      	mov	r1, r3
 80135ca:	f04f 0c0a 	mov.w	ip, #10
 80135ce:	4620      	mov	r0, r4
 80135d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135d4:	3a30      	subs	r2, #48	; 0x30
 80135d6:	2a09      	cmp	r2, #9
 80135d8:	d903      	bls.n	80135e2 <_vfiprintf_r+0x1ee>
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d0c5      	beq.n	801356a <_vfiprintf_r+0x176>
 80135de:	9105      	str	r1, [sp, #20]
 80135e0:	e7c3      	b.n	801356a <_vfiprintf_r+0x176>
 80135e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80135e6:	4604      	mov	r4, r0
 80135e8:	2301      	movs	r3, #1
 80135ea:	e7f0      	b.n	80135ce <_vfiprintf_r+0x1da>
 80135ec:	ab03      	add	r3, sp, #12
 80135ee:	9300      	str	r3, [sp, #0]
 80135f0:	462a      	mov	r2, r5
 80135f2:	4b16      	ldr	r3, [pc, #88]	; (801364c <_vfiprintf_r+0x258>)
 80135f4:	a904      	add	r1, sp, #16
 80135f6:	4630      	mov	r0, r6
 80135f8:	f7fb fad8 	bl	800ebac <_printf_float>
 80135fc:	4607      	mov	r7, r0
 80135fe:	1c78      	adds	r0, r7, #1
 8013600:	d1d6      	bne.n	80135b0 <_vfiprintf_r+0x1bc>
 8013602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013604:	07d9      	lsls	r1, r3, #31
 8013606:	d405      	bmi.n	8013614 <_vfiprintf_r+0x220>
 8013608:	89ab      	ldrh	r3, [r5, #12]
 801360a:	059a      	lsls	r2, r3, #22
 801360c:	d402      	bmi.n	8013614 <_vfiprintf_r+0x220>
 801360e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013610:	f7fe fd4c 	bl	80120ac <__retarget_lock_release_recursive>
 8013614:	89ab      	ldrh	r3, [r5, #12]
 8013616:	065b      	lsls	r3, r3, #25
 8013618:	f53f af12 	bmi.w	8013440 <_vfiprintf_r+0x4c>
 801361c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801361e:	e711      	b.n	8013444 <_vfiprintf_r+0x50>
 8013620:	ab03      	add	r3, sp, #12
 8013622:	9300      	str	r3, [sp, #0]
 8013624:	462a      	mov	r2, r5
 8013626:	4b09      	ldr	r3, [pc, #36]	; (801364c <_vfiprintf_r+0x258>)
 8013628:	a904      	add	r1, sp, #16
 801362a:	4630      	mov	r0, r6
 801362c:	f7fb fd62 	bl	800f0f4 <_printf_i>
 8013630:	e7e4      	b.n	80135fc <_vfiprintf_r+0x208>
 8013632:	bf00      	nop
 8013634:	08015438 	.word	0x08015438
 8013638:	08015458 	.word	0x08015458
 801363c:	08015418 	.word	0x08015418
 8013640:	0801564c 	.word	0x0801564c
 8013644:	08015656 	.word	0x08015656
 8013648:	0800ebad 	.word	0x0800ebad
 801364c:	080133cf 	.word	0x080133cf
 8013650:	08015652 	.word	0x08015652

08013654 <_scanf_chars>:
 8013654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013658:	4615      	mov	r5, r2
 801365a:	688a      	ldr	r2, [r1, #8]
 801365c:	4680      	mov	r8, r0
 801365e:	460c      	mov	r4, r1
 8013660:	b932      	cbnz	r2, 8013670 <_scanf_chars+0x1c>
 8013662:	698a      	ldr	r2, [r1, #24]
 8013664:	2a00      	cmp	r2, #0
 8013666:	bf0c      	ite	eq
 8013668:	2201      	moveq	r2, #1
 801366a:	f04f 32ff 	movne.w	r2, #4294967295
 801366e:	608a      	str	r2, [r1, #8]
 8013670:	6822      	ldr	r2, [r4, #0]
 8013672:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013704 <_scanf_chars+0xb0>
 8013676:	06d1      	lsls	r1, r2, #27
 8013678:	bf5f      	itttt	pl
 801367a:	681a      	ldrpl	r2, [r3, #0]
 801367c:	1d11      	addpl	r1, r2, #4
 801367e:	6019      	strpl	r1, [r3, #0]
 8013680:	6816      	ldrpl	r6, [r2, #0]
 8013682:	2700      	movs	r7, #0
 8013684:	69a0      	ldr	r0, [r4, #24]
 8013686:	b188      	cbz	r0, 80136ac <_scanf_chars+0x58>
 8013688:	2801      	cmp	r0, #1
 801368a:	d107      	bne.n	801369c <_scanf_chars+0x48>
 801368c:	682a      	ldr	r2, [r5, #0]
 801368e:	7811      	ldrb	r1, [r2, #0]
 8013690:	6962      	ldr	r2, [r4, #20]
 8013692:	5c52      	ldrb	r2, [r2, r1]
 8013694:	b952      	cbnz	r2, 80136ac <_scanf_chars+0x58>
 8013696:	2f00      	cmp	r7, #0
 8013698:	d031      	beq.n	80136fe <_scanf_chars+0xaa>
 801369a:	e022      	b.n	80136e2 <_scanf_chars+0x8e>
 801369c:	2802      	cmp	r0, #2
 801369e:	d120      	bne.n	80136e2 <_scanf_chars+0x8e>
 80136a0:	682b      	ldr	r3, [r5, #0]
 80136a2:	781b      	ldrb	r3, [r3, #0]
 80136a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80136a8:	071b      	lsls	r3, r3, #28
 80136aa:	d41a      	bmi.n	80136e2 <_scanf_chars+0x8e>
 80136ac:	6823      	ldr	r3, [r4, #0]
 80136ae:	06da      	lsls	r2, r3, #27
 80136b0:	bf5e      	ittt	pl
 80136b2:	682b      	ldrpl	r3, [r5, #0]
 80136b4:	781b      	ldrbpl	r3, [r3, #0]
 80136b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80136ba:	682a      	ldr	r2, [r5, #0]
 80136bc:	686b      	ldr	r3, [r5, #4]
 80136be:	3201      	adds	r2, #1
 80136c0:	602a      	str	r2, [r5, #0]
 80136c2:	68a2      	ldr	r2, [r4, #8]
 80136c4:	3b01      	subs	r3, #1
 80136c6:	3a01      	subs	r2, #1
 80136c8:	606b      	str	r3, [r5, #4]
 80136ca:	3701      	adds	r7, #1
 80136cc:	60a2      	str	r2, [r4, #8]
 80136ce:	b142      	cbz	r2, 80136e2 <_scanf_chars+0x8e>
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	dcd7      	bgt.n	8013684 <_scanf_chars+0x30>
 80136d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80136d8:	4629      	mov	r1, r5
 80136da:	4640      	mov	r0, r8
 80136dc:	4798      	blx	r3
 80136de:	2800      	cmp	r0, #0
 80136e0:	d0d0      	beq.n	8013684 <_scanf_chars+0x30>
 80136e2:	6823      	ldr	r3, [r4, #0]
 80136e4:	f013 0310 	ands.w	r3, r3, #16
 80136e8:	d105      	bne.n	80136f6 <_scanf_chars+0xa2>
 80136ea:	68e2      	ldr	r2, [r4, #12]
 80136ec:	3201      	adds	r2, #1
 80136ee:	60e2      	str	r2, [r4, #12]
 80136f0:	69a2      	ldr	r2, [r4, #24]
 80136f2:	b102      	cbz	r2, 80136f6 <_scanf_chars+0xa2>
 80136f4:	7033      	strb	r3, [r6, #0]
 80136f6:	6923      	ldr	r3, [r4, #16]
 80136f8:	443b      	add	r3, r7
 80136fa:	6123      	str	r3, [r4, #16]
 80136fc:	2000      	movs	r0, #0
 80136fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013702:	bf00      	nop
 8013704:	080151f9 	.word	0x080151f9

08013708 <_scanf_i>:
 8013708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801370c:	4698      	mov	r8, r3
 801370e:	4b76      	ldr	r3, [pc, #472]	; (80138e8 <_scanf_i+0x1e0>)
 8013710:	460c      	mov	r4, r1
 8013712:	4682      	mov	sl, r0
 8013714:	4616      	mov	r6, r2
 8013716:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801371a:	b087      	sub	sp, #28
 801371c:	ab03      	add	r3, sp, #12
 801371e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013722:	4b72      	ldr	r3, [pc, #456]	; (80138ec <_scanf_i+0x1e4>)
 8013724:	69a1      	ldr	r1, [r4, #24]
 8013726:	4a72      	ldr	r2, [pc, #456]	; (80138f0 <_scanf_i+0x1e8>)
 8013728:	2903      	cmp	r1, #3
 801372a:	bf18      	it	ne
 801372c:	461a      	movne	r2, r3
 801372e:	68a3      	ldr	r3, [r4, #8]
 8013730:	9201      	str	r2, [sp, #4]
 8013732:	1e5a      	subs	r2, r3, #1
 8013734:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013738:	bf88      	it	hi
 801373a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801373e:	4627      	mov	r7, r4
 8013740:	bf82      	ittt	hi
 8013742:	eb03 0905 	addhi.w	r9, r3, r5
 8013746:	f240 135d 	movwhi	r3, #349	; 0x15d
 801374a:	60a3      	strhi	r3, [r4, #8]
 801374c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013750:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013754:	bf98      	it	ls
 8013756:	f04f 0900 	movls.w	r9, #0
 801375a:	6023      	str	r3, [r4, #0]
 801375c:	463d      	mov	r5, r7
 801375e:	f04f 0b00 	mov.w	fp, #0
 8013762:	6831      	ldr	r1, [r6, #0]
 8013764:	ab03      	add	r3, sp, #12
 8013766:	7809      	ldrb	r1, [r1, #0]
 8013768:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801376c:	2202      	movs	r2, #2
 801376e:	f7ec fd57 	bl	8000220 <memchr>
 8013772:	b328      	cbz	r0, 80137c0 <_scanf_i+0xb8>
 8013774:	f1bb 0f01 	cmp.w	fp, #1
 8013778:	d159      	bne.n	801382e <_scanf_i+0x126>
 801377a:	6862      	ldr	r2, [r4, #4]
 801377c:	b92a      	cbnz	r2, 801378a <_scanf_i+0x82>
 801377e:	6822      	ldr	r2, [r4, #0]
 8013780:	2308      	movs	r3, #8
 8013782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013786:	6063      	str	r3, [r4, #4]
 8013788:	6022      	str	r2, [r4, #0]
 801378a:	6822      	ldr	r2, [r4, #0]
 801378c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013790:	6022      	str	r2, [r4, #0]
 8013792:	68a2      	ldr	r2, [r4, #8]
 8013794:	1e51      	subs	r1, r2, #1
 8013796:	60a1      	str	r1, [r4, #8]
 8013798:	b192      	cbz	r2, 80137c0 <_scanf_i+0xb8>
 801379a:	6832      	ldr	r2, [r6, #0]
 801379c:	1c51      	adds	r1, r2, #1
 801379e:	6031      	str	r1, [r6, #0]
 80137a0:	7812      	ldrb	r2, [r2, #0]
 80137a2:	f805 2b01 	strb.w	r2, [r5], #1
 80137a6:	6872      	ldr	r2, [r6, #4]
 80137a8:	3a01      	subs	r2, #1
 80137aa:	2a00      	cmp	r2, #0
 80137ac:	6072      	str	r2, [r6, #4]
 80137ae:	dc07      	bgt.n	80137c0 <_scanf_i+0xb8>
 80137b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80137b4:	4631      	mov	r1, r6
 80137b6:	4650      	mov	r0, sl
 80137b8:	4790      	blx	r2
 80137ba:	2800      	cmp	r0, #0
 80137bc:	f040 8085 	bne.w	80138ca <_scanf_i+0x1c2>
 80137c0:	f10b 0b01 	add.w	fp, fp, #1
 80137c4:	f1bb 0f03 	cmp.w	fp, #3
 80137c8:	d1cb      	bne.n	8013762 <_scanf_i+0x5a>
 80137ca:	6863      	ldr	r3, [r4, #4]
 80137cc:	b90b      	cbnz	r3, 80137d2 <_scanf_i+0xca>
 80137ce:	230a      	movs	r3, #10
 80137d0:	6063      	str	r3, [r4, #4]
 80137d2:	6863      	ldr	r3, [r4, #4]
 80137d4:	4947      	ldr	r1, [pc, #284]	; (80138f4 <_scanf_i+0x1ec>)
 80137d6:	6960      	ldr	r0, [r4, #20]
 80137d8:	1ac9      	subs	r1, r1, r3
 80137da:	f000 f8b9 	bl	8013950 <__sccl>
 80137de:	f04f 0b00 	mov.w	fp, #0
 80137e2:	68a3      	ldr	r3, [r4, #8]
 80137e4:	6822      	ldr	r2, [r4, #0]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d03d      	beq.n	8013866 <_scanf_i+0x15e>
 80137ea:	6831      	ldr	r1, [r6, #0]
 80137ec:	6960      	ldr	r0, [r4, #20]
 80137ee:	f891 c000 	ldrb.w	ip, [r1]
 80137f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80137f6:	2800      	cmp	r0, #0
 80137f8:	d035      	beq.n	8013866 <_scanf_i+0x15e>
 80137fa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80137fe:	d124      	bne.n	801384a <_scanf_i+0x142>
 8013800:	0510      	lsls	r0, r2, #20
 8013802:	d522      	bpl.n	801384a <_scanf_i+0x142>
 8013804:	f10b 0b01 	add.w	fp, fp, #1
 8013808:	f1b9 0f00 	cmp.w	r9, #0
 801380c:	d003      	beq.n	8013816 <_scanf_i+0x10e>
 801380e:	3301      	adds	r3, #1
 8013810:	f109 39ff 	add.w	r9, r9, #4294967295
 8013814:	60a3      	str	r3, [r4, #8]
 8013816:	6873      	ldr	r3, [r6, #4]
 8013818:	3b01      	subs	r3, #1
 801381a:	2b00      	cmp	r3, #0
 801381c:	6073      	str	r3, [r6, #4]
 801381e:	dd1b      	ble.n	8013858 <_scanf_i+0x150>
 8013820:	6833      	ldr	r3, [r6, #0]
 8013822:	3301      	adds	r3, #1
 8013824:	6033      	str	r3, [r6, #0]
 8013826:	68a3      	ldr	r3, [r4, #8]
 8013828:	3b01      	subs	r3, #1
 801382a:	60a3      	str	r3, [r4, #8]
 801382c:	e7d9      	b.n	80137e2 <_scanf_i+0xda>
 801382e:	f1bb 0f02 	cmp.w	fp, #2
 8013832:	d1ae      	bne.n	8013792 <_scanf_i+0x8a>
 8013834:	6822      	ldr	r2, [r4, #0]
 8013836:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801383a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801383e:	d1bf      	bne.n	80137c0 <_scanf_i+0xb8>
 8013840:	2310      	movs	r3, #16
 8013842:	6063      	str	r3, [r4, #4]
 8013844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013848:	e7a2      	b.n	8013790 <_scanf_i+0x88>
 801384a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801384e:	6022      	str	r2, [r4, #0]
 8013850:	780b      	ldrb	r3, [r1, #0]
 8013852:	f805 3b01 	strb.w	r3, [r5], #1
 8013856:	e7de      	b.n	8013816 <_scanf_i+0x10e>
 8013858:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801385c:	4631      	mov	r1, r6
 801385e:	4650      	mov	r0, sl
 8013860:	4798      	blx	r3
 8013862:	2800      	cmp	r0, #0
 8013864:	d0df      	beq.n	8013826 <_scanf_i+0x11e>
 8013866:	6823      	ldr	r3, [r4, #0]
 8013868:	05db      	lsls	r3, r3, #23
 801386a:	d50d      	bpl.n	8013888 <_scanf_i+0x180>
 801386c:	42bd      	cmp	r5, r7
 801386e:	d909      	bls.n	8013884 <_scanf_i+0x17c>
 8013870:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013878:	4632      	mov	r2, r6
 801387a:	4650      	mov	r0, sl
 801387c:	4798      	blx	r3
 801387e:	f105 39ff 	add.w	r9, r5, #4294967295
 8013882:	464d      	mov	r5, r9
 8013884:	42bd      	cmp	r5, r7
 8013886:	d02d      	beq.n	80138e4 <_scanf_i+0x1dc>
 8013888:	6822      	ldr	r2, [r4, #0]
 801388a:	f012 0210 	ands.w	r2, r2, #16
 801388e:	d113      	bne.n	80138b8 <_scanf_i+0x1b0>
 8013890:	702a      	strb	r2, [r5, #0]
 8013892:	6863      	ldr	r3, [r4, #4]
 8013894:	9e01      	ldr	r6, [sp, #4]
 8013896:	4639      	mov	r1, r7
 8013898:	4650      	mov	r0, sl
 801389a:	47b0      	blx	r6
 801389c:	6821      	ldr	r1, [r4, #0]
 801389e:	f8d8 3000 	ldr.w	r3, [r8]
 80138a2:	f011 0f20 	tst.w	r1, #32
 80138a6:	d013      	beq.n	80138d0 <_scanf_i+0x1c8>
 80138a8:	1d1a      	adds	r2, r3, #4
 80138aa:	f8c8 2000 	str.w	r2, [r8]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	6018      	str	r0, [r3, #0]
 80138b2:	68e3      	ldr	r3, [r4, #12]
 80138b4:	3301      	adds	r3, #1
 80138b6:	60e3      	str	r3, [r4, #12]
 80138b8:	1bed      	subs	r5, r5, r7
 80138ba:	44ab      	add	fp, r5
 80138bc:	6925      	ldr	r5, [r4, #16]
 80138be:	445d      	add	r5, fp
 80138c0:	6125      	str	r5, [r4, #16]
 80138c2:	2000      	movs	r0, #0
 80138c4:	b007      	add	sp, #28
 80138c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ca:	f04f 0b00 	mov.w	fp, #0
 80138ce:	e7ca      	b.n	8013866 <_scanf_i+0x15e>
 80138d0:	1d1a      	adds	r2, r3, #4
 80138d2:	f8c8 2000 	str.w	r2, [r8]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	f011 0f01 	tst.w	r1, #1
 80138dc:	bf14      	ite	ne
 80138de:	8018      	strhne	r0, [r3, #0]
 80138e0:	6018      	streq	r0, [r3, #0]
 80138e2:	e7e6      	b.n	80138b2 <_scanf_i+0x1aa>
 80138e4:	2001      	movs	r0, #1
 80138e6:	e7ed      	b.n	80138c4 <_scanf_i+0x1bc>
 80138e8:	08014a24 	.word	0x08014a24
 80138ec:	08013acd 	.word	0x08013acd
 80138f0:	08010795 	.word	0x08010795
 80138f4:	08015676 	.word	0x08015676

080138f8 <_read_r>:
 80138f8:	b538      	push	{r3, r4, r5, lr}
 80138fa:	4d07      	ldr	r5, [pc, #28]	; (8013918 <_read_r+0x20>)
 80138fc:	4604      	mov	r4, r0
 80138fe:	4608      	mov	r0, r1
 8013900:	4611      	mov	r1, r2
 8013902:	2200      	movs	r2, #0
 8013904:	602a      	str	r2, [r5, #0]
 8013906:	461a      	mov	r2, r3
 8013908:	f7f0 fcfa 	bl	8004300 <_read>
 801390c:	1c43      	adds	r3, r0, #1
 801390e:	d102      	bne.n	8013916 <_read_r+0x1e>
 8013910:	682b      	ldr	r3, [r5, #0]
 8013912:	b103      	cbz	r3, 8013916 <_read_r+0x1e>
 8013914:	6023      	str	r3, [r4, #0]
 8013916:	bd38      	pop	{r3, r4, r5, pc}
 8013918:	2000314c 	.word	0x2000314c
 801391c:	00000000 	.word	0x00000000

08013920 <nan>:
 8013920:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013928 <nan+0x8>
 8013924:	4770      	bx	lr
 8013926:	bf00      	nop
 8013928:	00000000 	.word	0x00000000
 801392c:	7ff80000 	.word	0x7ff80000

08013930 <_sbrk_r>:
 8013930:	b538      	push	{r3, r4, r5, lr}
 8013932:	4d06      	ldr	r5, [pc, #24]	; (801394c <_sbrk_r+0x1c>)
 8013934:	2300      	movs	r3, #0
 8013936:	4604      	mov	r4, r0
 8013938:	4608      	mov	r0, r1
 801393a:	602b      	str	r3, [r5, #0]
 801393c:	f7f0 fd32 	bl	80043a4 <_sbrk>
 8013940:	1c43      	adds	r3, r0, #1
 8013942:	d102      	bne.n	801394a <_sbrk_r+0x1a>
 8013944:	682b      	ldr	r3, [r5, #0]
 8013946:	b103      	cbz	r3, 801394a <_sbrk_r+0x1a>
 8013948:	6023      	str	r3, [r4, #0]
 801394a:	bd38      	pop	{r3, r4, r5, pc}
 801394c:	2000314c 	.word	0x2000314c

08013950 <__sccl>:
 8013950:	b570      	push	{r4, r5, r6, lr}
 8013952:	780b      	ldrb	r3, [r1, #0]
 8013954:	4604      	mov	r4, r0
 8013956:	2b5e      	cmp	r3, #94	; 0x5e
 8013958:	bf0b      	itete	eq
 801395a:	784b      	ldrbeq	r3, [r1, #1]
 801395c:	1c48      	addne	r0, r1, #1
 801395e:	1c88      	addeq	r0, r1, #2
 8013960:	2200      	movne	r2, #0
 8013962:	bf08      	it	eq
 8013964:	2201      	moveq	r2, #1
 8013966:	1e61      	subs	r1, r4, #1
 8013968:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801396c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013970:	42a9      	cmp	r1, r5
 8013972:	d1fb      	bne.n	801396c <__sccl+0x1c>
 8013974:	b90b      	cbnz	r3, 801397a <__sccl+0x2a>
 8013976:	3801      	subs	r0, #1
 8013978:	bd70      	pop	{r4, r5, r6, pc}
 801397a:	f082 0201 	eor.w	r2, r2, #1
 801397e:	54e2      	strb	r2, [r4, r3]
 8013980:	4605      	mov	r5, r0
 8013982:	4628      	mov	r0, r5
 8013984:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013988:	292d      	cmp	r1, #45	; 0x2d
 801398a:	d006      	beq.n	801399a <__sccl+0x4a>
 801398c:	295d      	cmp	r1, #93	; 0x5d
 801398e:	d0f3      	beq.n	8013978 <__sccl+0x28>
 8013990:	b909      	cbnz	r1, 8013996 <__sccl+0x46>
 8013992:	4628      	mov	r0, r5
 8013994:	e7f0      	b.n	8013978 <__sccl+0x28>
 8013996:	460b      	mov	r3, r1
 8013998:	e7f1      	b.n	801397e <__sccl+0x2e>
 801399a:	786e      	ldrb	r6, [r5, #1]
 801399c:	2e5d      	cmp	r6, #93	; 0x5d
 801399e:	d0fa      	beq.n	8013996 <__sccl+0x46>
 80139a0:	42b3      	cmp	r3, r6
 80139a2:	dcf8      	bgt.n	8013996 <__sccl+0x46>
 80139a4:	3502      	adds	r5, #2
 80139a6:	4619      	mov	r1, r3
 80139a8:	3101      	adds	r1, #1
 80139aa:	428e      	cmp	r6, r1
 80139ac:	5462      	strb	r2, [r4, r1]
 80139ae:	dcfb      	bgt.n	80139a8 <__sccl+0x58>
 80139b0:	1af1      	subs	r1, r6, r3
 80139b2:	3901      	subs	r1, #1
 80139b4:	1c58      	adds	r0, r3, #1
 80139b6:	42b3      	cmp	r3, r6
 80139b8:	bfa8      	it	ge
 80139ba:	2100      	movge	r1, #0
 80139bc:	1843      	adds	r3, r0, r1
 80139be:	e7e0      	b.n	8013982 <__sccl+0x32>

080139c0 <strncmp>:
 80139c0:	b510      	push	{r4, lr}
 80139c2:	b17a      	cbz	r2, 80139e4 <strncmp+0x24>
 80139c4:	4603      	mov	r3, r0
 80139c6:	3901      	subs	r1, #1
 80139c8:	1884      	adds	r4, r0, r2
 80139ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80139ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80139d2:	4290      	cmp	r0, r2
 80139d4:	d101      	bne.n	80139da <strncmp+0x1a>
 80139d6:	42a3      	cmp	r3, r4
 80139d8:	d101      	bne.n	80139de <strncmp+0x1e>
 80139da:	1a80      	subs	r0, r0, r2
 80139dc:	bd10      	pop	{r4, pc}
 80139de:	2800      	cmp	r0, #0
 80139e0:	d1f3      	bne.n	80139ca <strncmp+0xa>
 80139e2:	e7fa      	b.n	80139da <strncmp+0x1a>
 80139e4:	4610      	mov	r0, r2
 80139e6:	e7f9      	b.n	80139dc <strncmp+0x1c>

080139e8 <_strtoul_l.constprop.0>:
 80139e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80139ec:	4f36      	ldr	r7, [pc, #216]	; (8013ac8 <_strtoul_l.constprop.0+0xe0>)
 80139ee:	4686      	mov	lr, r0
 80139f0:	460d      	mov	r5, r1
 80139f2:	4628      	mov	r0, r5
 80139f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80139f8:	5de6      	ldrb	r6, [r4, r7]
 80139fa:	f016 0608 	ands.w	r6, r6, #8
 80139fe:	d1f8      	bne.n	80139f2 <_strtoul_l.constprop.0+0xa>
 8013a00:	2c2d      	cmp	r4, #45	; 0x2d
 8013a02:	d12f      	bne.n	8013a64 <_strtoul_l.constprop.0+0x7c>
 8013a04:	782c      	ldrb	r4, [r5, #0]
 8013a06:	2601      	movs	r6, #1
 8013a08:	1c85      	adds	r5, r0, #2
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d057      	beq.n	8013abe <_strtoul_l.constprop.0+0xd6>
 8013a0e:	2b10      	cmp	r3, #16
 8013a10:	d109      	bne.n	8013a26 <_strtoul_l.constprop.0+0x3e>
 8013a12:	2c30      	cmp	r4, #48	; 0x30
 8013a14:	d107      	bne.n	8013a26 <_strtoul_l.constprop.0+0x3e>
 8013a16:	7828      	ldrb	r0, [r5, #0]
 8013a18:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013a1c:	2858      	cmp	r0, #88	; 0x58
 8013a1e:	d149      	bne.n	8013ab4 <_strtoul_l.constprop.0+0xcc>
 8013a20:	786c      	ldrb	r4, [r5, #1]
 8013a22:	2310      	movs	r3, #16
 8013a24:	3502      	adds	r5, #2
 8013a26:	f04f 38ff 	mov.w	r8, #4294967295
 8013a2a:	2700      	movs	r7, #0
 8013a2c:	fbb8 f8f3 	udiv	r8, r8, r3
 8013a30:	fb03 f908 	mul.w	r9, r3, r8
 8013a34:	ea6f 0909 	mvn.w	r9, r9
 8013a38:	4638      	mov	r0, r7
 8013a3a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013a3e:	f1bc 0f09 	cmp.w	ip, #9
 8013a42:	d814      	bhi.n	8013a6e <_strtoul_l.constprop.0+0x86>
 8013a44:	4664      	mov	r4, ip
 8013a46:	42a3      	cmp	r3, r4
 8013a48:	dd22      	ble.n	8013a90 <_strtoul_l.constprop.0+0xa8>
 8013a4a:	2f00      	cmp	r7, #0
 8013a4c:	db1d      	blt.n	8013a8a <_strtoul_l.constprop.0+0xa2>
 8013a4e:	4580      	cmp	r8, r0
 8013a50:	d31b      	bcc.n	8013a8a <_strtoul_l.constprop.0+0xa2>
 8013a52:	d101      	bne.n	8013a58 <_strtoul_l.constprop.0+0x70>
 8013a54:	45a1      	cmp	r9, r4
 8013a56:	db18      	blt.n	8013a8a <_strtoul_l.constprop.0+0xa2>
 8013a58:	fb00 4003 	mla	r0, r0, r3, r4
 8013a5c:	2701      	movs	r7, #1
 8013a5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a62:	e7ea      	b.n	8013a3a <_strtoul_l.constprop.0+0x52>
 8013a64:	2c2b      	cmp	r4, #43	; 0x2b
 8013a66:	bf04      	itt	eq
 8013a68:	782c      	ldrbeq	r4, [r5, #0]
 8013a6a:	1c85      	addeq	r5, r0, #2
 8013a6c:	e7cd      	b.n	8013a0a <_strtoul_l.constprop.0+0x22>
 8013a6e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013a72:	f1bc 0f19 	cmp.w	ip, #25
 8013a76:	d801      	bhi.n	8013a7c <_strtoul_l.constprop.0+0x94>
 8013a78:	3c37      	subs	r4, #55	; 0x37
 8013a7a:	e7e4      	b.n	8013a46 <_strtoul_l.constprop.0+0x5e>
 8013a7c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013a80:	f1bc 0f19 	cmp.w	ip, #25
 8013a84:	d804      	bhi.n	8013a90 <_strtoul_l.constprop.0+0xa8>
 8013a86:	3c57      	subs	r4, #87	; 0x57
 8013a88:	e7dd      	b.n	8013a46 <_strtoul_l.constprop.0+0x5e>
 8013a8a:	f04f 37ff 	mov.w	r7, #4294967295
 8013a8e:	e7e6      	b.n	8013a5e <_strtoul_l.constprop.0+0x76>
 8013a90:	2f00      	cmp	r7, #0
 8013a92:	da07      	bge.n	8013aa4 <_strtoul_l.constprop.0+0xbc>
 8013a94:	2322      	movs	r3, #34	; 0x22
 8013a96:	f8ce 3000 	str.w	r3, [lr]
 8013a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a9e:	b932      	cbnz	r2, 8013aae <_strtoul_l.constprop.0+0xc6>
 8013aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013aa4:	b106      	cbz	r6, 8013aa8 <_strtoul_l.constprop.0+0xc0>
 8013aa6:	4240      	negs	r0, r0
 8013aa8:	2a00      	cmp	r2, #0
 8013aaa:	d0f9      	beq.n	8013aa0 <_strtoul_l.constprop.0+0xb8>
 8013aac:	b107      	cbz	r7, 8013ab0 <_strtoul_l.constprop.0+0xc8>
 8013aae:	1e69      	subs	r1, r5, #1
 8013ab0:	6011      	str	r1, [r2, #0]
 8013ab2:	e7f5      	b.n	8013aa0 <_strtoul_l.constprop.0+0xb8>
 8013ab4:	2430      	movs	r4, #48	; 0x30
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d1b5      	bne.n	8013a26 <_strtoul_l.constprop.0+0x3e>
 8013aba:	2308      	movs	r3, #8
 8013abc:	e7b3      	b.n	8013a26 <_strtoul_l.constprop.0+0x3e>
 8013abe:	2c30      	cmp	r4, #48	; 0x30
 8013ac0:	d0a9      	beq.n	8013a16 <_strtoul_l.constprop.0+0x2e>
 8013ac2:	230a      	movs	r3, #10
 8013ac4:	e7af      	b.n	8013a26 <_strtoul_l.constprop.0+0x3e>
 8013ac6:	bf00      	nop
 8013ac8:	080151f9 	.word	0x080151f9

08013acc <_strtoul_r>:
 8013acc:	f7ff bf8c 	b.w	80139e8 <_strtoul_l.constprop.0>

08013ad0 <__submore>:
 8013ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ad4:	460c      	mov	r4, r1
 8013ad6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013adc:	4299      	cmp	r1, r3
 8013ade:	d11d      	bne.n	8013b1c <__submore+0x4c>
 8013ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013ae4:	f7ff f8ba 	bl	8012c5c <_malloc_r>
 8013ae8:	b918      	cbnz	r0, 8013af2 <__submore+0x22>
 8013aea:	f04f 30ff 	mov.w	r0, #4294967295
 8013aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013af6:	63a3      	str	r3, [r4, #56]	; 0x38
 8013af8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013afc:	6360      	str	r0, [r4, #52]	; 0x34
 8013afe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013b02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013b06:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013b0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013b0e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013b12:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013b16:	6020      	str	r0, [r4, #0]
 8013b18:	2000      	movs	r0, #0
 8013b1a:	e7e8      	b.n	8013aee <__submore+0x1e>
 8013b1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013b1e:	0077      	lsls	r7, r6, #1
 8013b20:	463a      	mov	r2, r7
 8013b22:	f000 f87b 	bl	8013c1c <_realloc_r>
 8013b26:	4605      	mov	r5, r0
 8013b28:	2800      	cmp	r0, #0
 8013b2a:	d0de      	beq.n	8013aea <__submore+0x1a>
 8013b2c:	eb00 0806 	add.w	r8, r0, r6
 8013b30:	4601      	mov	r1, r0
 8013b32:	4632      	mov	r2, r6
 8013b34:	4640      	mov	r0, r8
 8013b36:	f7fa ff69 	bl	800ea0c <memcpy>
 8013b3a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013b3e:	f8c4 8000 	str.w	r8, [r4]
 8013b42:	e7e9      	b.n	8013b18 <__submore+0x48>

08013b44 <__ascii_wctomb>:
 8013b44:	b149      	cbz	r1, 8013b5a <__ascii_wctomb+0x16>
 8013b46:	2aff      	cmp	r2, #255	; 0xff
 8013b48:	bf85      	ittet	hi
 8013b4a:	238a      	movhi	r3, #138	; 0x8a
 8013b4c:	6003      	strhi	r3, [r0, #0]
 8013b4e:	700a      	strbls	r2, [r1, #0]
 8013b50:	f04f 30ff 	movhi.w	r0, #4294967295
 8013b54:	bf98      	it	ls
 8013b56:	2001      	movls	r0, #1
 8013b58:	4770      	bx	lr
 8013b5a:	4608      	mov	r0, r1
 8013b5c:	4770      	bx	lr
	...

08013b60 <__assert_func>:
 8013b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b62:	4614      	mov	r4, r2
 8013b64:	461a      	mov	r2, r3
 8013b66:	4b09      	ldr	r3, [pc, #36]	; (8013b8c <__assert_func+0x2c>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	4605      	mov	r5, r0
 8013b6c:	68d8      	ldr	r0, [r3, #12]
 8013b6e:	b14c      	cbz	r4, 8013b84 <__assert_func+0x24>
 8013b70:	4b07      	ldr	r3, [pc, #28]	; (8013b90 <__assert_func+0x30>)
 8013b72:	9100      	str	r1, [sp, #0]
 8013b74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b78:	4906      	ldr	r1, [pc, #24]	; (8013b94 <__assert_func+0x34>)
 8013b7a:	462b      	mov	r3, r5
 8013b7c:	f000 f80e 	bl	8013b9c <fiprintf>
 8013b80:	f000 f87b 	bl	8013c7a <abort>
 8013b84:	4b04      	ldr	r3, [pc, #16]	; (8013b98 <__assert_func+0x38>)
 8013b86:	461c      	mov	r4, r3
 8013b88:	e7f3      	b.n	8013b72 <__assert_func+0x12>
 8013b8a:	bf00      	nop
 8013b8c:	20000110 	.word	0x20000110
 8013b90:	08015678 	.word	0x08015678
 8013b94:	08015685 	.word	0x08015685
 8013b98:	080156b3 	.word	0x080156b3

08013b9c <fiprintf>:
 8013b9c:	b40e      	push	{r1, r2, r3}
 8013b9e:	b503      	push	{r0, r1, lr}
 8013ba0:	4601      	mov	r1, r0
 8013ba2:	ab03      	add	r3, sp, #12
 8013ba4:	4805      	ldr	r0, [pc, #20]	; (8013bbc <fiprintf+0x20>)
 8013ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013baa:	6800      	ldr	r0, [r0, #0]
 8013bac:	9301      	str	r3, [sp, #4]
 8013bae:	f7ff fc21 	bl	80133f4 <_vfiprintf_r>
 8013bb2:	b002      	add	sp, #8
 8013bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013bb8:	b003      	add	sp, #12
 8013bba:	4770      	bx	lr
 8013bbc:	20000110 	.word	0x20000110

08013bc0 <_fstat_r>:
 8013bc0:	b538      	push	{r3, r4, r5, lr}
 8013bc2:	4d07      	ldr	r5, [pc, #28]	; (8013be0 <_fstat_r+0x20>)
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	4604      	mov	r4, r0
 8013bc8:	4608      	mov	r0, r1
 8013bca:	4611      	mov	r1, r2
 8013bcc:	602b      	str	r3, [r5, #0]
 8013bce:	f7f0 fbc0 	bl	8004352 <_fstat>
 8013bd2:	1c43      	adds	r3, r0, #1
 8013bd4:	d102      	bne.n	8013bdc <_fstat_r+0x1c>
 8013bd6:	682b      	ldr	r3, [r5, #0]
 8013bd8:	b103      	cbz	r3, 8013bdc <_fstat_r+0x1c>
 8013bda:	6023      	str	r3, [r4, #0]
 8013bdc:	bd38      	pop	{r3, r4, r5, pc}
 8013bde:	bf00      	nop
 8013be0:	2000314c 	.word	0x2000314c

08013be4 <_isatty_r>:
 8013be4:	b538      	push	{r3, r4, r5, lr}
 8013be6:	4d06      	ldr	r5, [pc, #24]	; (8013c00 <_isatty_r+0x1c>)
 8013be8:	2300      	movs	r3, #0
 8013bea:	4604      	mov	r4, r0
 8013bec:	4608      	mov	r0, r1
 8013bee:	602b      	str	r3, [r5, #0]
 8013bf0:	f7f0 fbbf 	bl	8004372 <_isatty>
 8013bf4:	1c43      	adds	r3, r0, #1
 8013bf6:	d102      	bne.n	8013bfe <_isatty_r+0x1a>
 8013bf8:	682b      	ldr	r3, [r5, #0]
 8013bfa:	b103      	cbz	r3, 8013bfe <_isatty_r+0x1a>
 8013bfc:	6023      	str	r3, [r4, #0]
 8013bfe:	bd38      	pop	{r3, r4, r5, pc}
 8013c00:	2000314c 	.word	0x2000314c

08013c04 <__malloc_lock>:
 8013c04:	4801      	ldr	r0, [pc, #4]	; (8013c0c <__malloc_lock+0x8>)
 8013c06:	f7fe ba50 	b.w	80120aa <__retarget_lock_acquire_recursive>
 8013c0a:	bf00      	nop
 8013c0c:	20003140 	.word	0x20003140

08013c10 <__malloc_unlock>:
 8013c10:	4801      	ldr	r0, [pc, #4]	; (8013c18 <__malloc_unlock+0x8>)
 8013c12:	f7fe ba4b 	b.w	80120ac <__retarget_lock_release_recursive>
 8013c16:	bf00      	nop
 8013c18:	20003140 	.word	0x20003140

08013c1c <_realloc_r>:
 8013c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c20:	4680      	mov	r8, r0
 8013c22:	4614      	mov	r4, r2
 8013c24:	460e      	mov	r6, r1
 8013c26:	b921      	cbnz	r1, 8013c32 <_realloc_r+0x16>
 8013c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c2c:	4611      	mov	r1, r2
 8013c2e:	f7ff b815 	b.w	8012c5c <_malloc_r>
 8013c32:	b92a      	cbnz	r2, 8013c40 <_realloc_r+0x24>
 8013c34:	f7fe ffa6 	bl	8012b84 <_free_r>
 8013c38:	4625      	mov	r5, r4
 8013c3a:	4628      	mov	r0, r5
 8013c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c40:	f000 f822 	bl	8013c88 <_malloc_usable_size_r>
 8013c44:	4284      	cmp	r4, r0
 8013c46:	4607      	mov	r7, r0
 8013c48:	d802      	bhi.n	8013c50 <_realloc_r+0x34>
 8013c4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013c4e:	d812      	bhi.n	8013c76 <_realloc_r+0x5a>
 8013c50:	4621      	mov	r1, r4
 8013c52:	4640      	mov	r0, r8
 8013c54:	f7ff f802 	bl	8012c5c <_malloc_r>
 8013c58:	4605      	mov	r5, r0
 8013c5a:	2800      	cmp	r0, #0
 8013c5c:	d0ed      	beq.n	8013c3a <_realloc_r+0x1e>
 8013c5e:	42bc      	cmp	r4, r7
 8013c60:	4622      	mov	r2, r4
 8013c62:	4631      	mov	r1, r6
 8013c64:	bf28      	it	cs
 8013c66:	463a      	movcs	r2, r7
 8013c68:	f7fa fed0 	bl	800ea0c <memcpy>
 8013c6c:	4631      	mov	r1, r6
 8013c6e:	4640      	mov	r0, r8
 8013c70:	f7fe ff88 	bl	8012b84 <_free_r>
 8013c74:	e7e1      	b.n	8013c3a <_realloc_r+0x1e>
 8013c76:	4635      	mov	r5, r6
 8013c78:	e7df      	b.n	8013c3a <_realloc_r+0x1e>

08013c7a <abort>:
 8013c7a:	b508      	push	{r3, lr}
 8013c7c:	2006      	movs	r0, #6
 8013c7e:	f000 f833 	bl	8013ce8 <raise>
 8013c82:	2001      	movs	r0, #1
 8013c84:	f7f0 fb32 	bl	80042ec <_exit>

08013c88 <_malloc_usable_size_r>:
 8013c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c8c:	1f18      	subs	r0, r3, #4
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	bfbc      	itt	lt
 8013c92:	580b      	ldrlt	r3, [r1, r0]
 8013c94:	18c0      	addlt	r0, r0, r3
 8013c96:	4770      	bx	lr

08013c98 <_raise_r>:
 8013c98:	291f      	cmp	r1, #31
 8013c9a:	b538      	push	{r3, r4, r5, lr}
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	460d      	mov	r5, r1
 8013ca0:	d904      	bls.n	8013cac <_raise_r+0x14>
 8013ca2:	2316      	movs	r3, #22
 8013ca4:	6003      	str	r3, [r0, #0]
 8013ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8013caa:	bd38      	pop	{r3, r4, r5, pc}
 8013cac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013cae:	b112      	cbz	r2, 8013cb6 <_raise_r+0x1e>
 8013cb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013cb4:	b94b      	cbnz	r3, 8013cca <_raise_r+0x32>
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	f000 f830 	bl	8013d1c <_getpid_r>
 8013cbc:	462a      	mov	r2, r5
 8013cbe:	4601      	mov	r1, r0
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cc6:	f000 b817 	b.w	8013cf8 <_kill_r>
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	d00a      	beq.n	8013ce4 <_raise_r+0x4c>
 8013cce:	1c59      	adds	r1, r3, #1
 8013cd0:	d103      	bne.n	8013cda <_raise_r+0x42>
 8013cd2:	2316      	movs	r3, #22
 8013cd4:	6003      	str	r3, [r0, #0]
 8013cd6:	2001      	movs	r0, #1
 8013cd8:	e7e7      	b.n	8013caa <_raise_r+0x12>
 8013cda:	2400      	movs	r4, #0
 8013cdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013ce0:	4628      	mov	r0, r5
 8013ce2:	4798      	blx	r3
 8013ce4:	2000      	movs	r0, #0
 8013ce6:	e7e0      	b.n	8013caa <_raise_r+0x12>

08013ce8 <raise>:
 8013ce8:	4b02      	ldr	r3, [pc, #8]	; (8013cf4 <raise+0xc>)
 8013cea:	4601      	mov	r1, r0
 8013cec:	6818      	ldr	r0, [r3, #0]
 8013cee:	f7ff bfd3 	b.w	8013c98 <_raise_r>
 8013cf2:	bf00      	nop
 8013cf4:	20000110 	.word	0x20000110

08013cf8 <_kill_r>:
 8013cf8:	b538      	push	{r3, r4, r5, lr}
 8013cfa:	4d07      	ldr	r5, [pc, #28]	; (8013d18 <_kill_r+0x20>)
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	4604      	mov	r4, r0
 8013d00:	4608      	mov	r0, r1
 8013d02:	4611      	mov	r1, r2
 8013d04:	602b      	str	r3, [r5, #0]
 8013d06:	f7f0 fae1 	bl	80042cc <_kill>
 8013d0a:	1c43      	adds	r3, r0, #1
 8013d0c:	d102      	bne.n	8013d14 <_kill_r+0x1c>
 8013d0e:	682b      	ldr	r3, [r5, #0]
 8013d10:	b103      	cbz	r3, 8013d14 <_kill_r+0x1c>
 8013d12:	6023      	str	r3, [r4, #0]
 8013d14:	bd38      	pop	{r3, r4, r5, pc}
 8013d16:	bf00      	nop
 8013d18:	2000314c 	.word	0x2000314c

08013d1c <_getpid_r>:
 8013d1c:	f7f0 bace 	b.w	80042bc <_getpid>

08013d20 <_init>:
 8013d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d22:	bf00      	nop
 8013d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d26:	bc08      	pop	{r3}
 8013d28:	469e      	mov	lr, r3
 8013d2a:	4770      	bx	lr

08013d2c <_fini>:
 8013d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d2e:	bf00      	nop
 8013d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d32:	bc08      	pop	{r3}
 8013d34:	469e      	mov	lr, r3
 8013d36:	4770      	bx	lr
