
LFDI Tuning Control Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000116c  08014490  08014490  00024490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155fc  080155fc  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  080155fc  080155fc  000255fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015604  08015604  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015604  08015604  00025604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015608  08015608  00025608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0801560c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302e4  2**0
                  CONTENTS
 10 .bss          00002f30  200002e8  200002e8  000302e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003218  20003218  000302e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000212b1  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f67  00000000  00000000  000515c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b08  00000000  00000000  00056530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018c8  00000000  00000000  00058038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b591  00000000  00000000  00059900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000248e2  00000000  00000000  00084e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed5eb  00000000  00000000  000a9773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00196d5e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000089b8  00000000  00000000  00196db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014478 	.word	0x08014478

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	08014478 	.word	0x08014478

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <DAC_InitStruct>:
//Max Voltage peak to peak
float REFERENCE_VOLTAGE = 3;


//
void DAC_InitStruct(struct sDAC* s, SPI_HandleTypeDef* hspi){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	
	s->spi = hspi;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	601a      	str	r2, [r3, #0]
	Set_Config(s);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f831 	bl	80010b0 <Set_Config>
	Set_Max_Peak_To_Peak_Voltage(s, 0);
 800104e:	2100      	movs	r1, #0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f999 	bl	8001388 <Set_Max_Peak_To_Peak_Voltage>
	/* USER CODE BEGIN 1 */
	//Set all DAC Channels Up. Should probably be put into TCB init
	for (int i = 0; i < 6; i++){
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e021      	b.n	80010a0 <DAC_InitStruct+0x68>
		s->DAC_Channels[i].DAC_number = i;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3302      	adds	r3, #2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	460a      	mov	r2, r1
 800106c:	721a      	strb	r2, [r3, #8]
		s->DAC_Channels[i].upper_bound = 0xFFFF;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3302      	adds	r3, #2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	809a      	strh	r2, [r3, #4]
		s->DAC_Channels[i].lower_bound = 0x0000;
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3302      	adds	r3, #2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	80da      	strh	r2, [r3, #6]
		s->DAC_Channels[i].enabled = true;
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3302      	adds	r3, #2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	2201      	movs	r2, #1
 8001098:	729a      	strb	r2, [r3, #10]
	for (int i = 0; i < 6; i++){
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	ddda      	ble.n	800105c <DAC_InitStruct+0x24>
	}

}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <Set_Config>:
//@brief: This function will set a configuration value to the configuration register
//@param s: The DAC struct to use
//@return: None
void Set_Config(struct sDAC* s){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	uint8_t Data[3] = {0x00, 0x00, 0x00};
 80010b8:	4a30      	ldr	r2, [pc, #192]	; (800117c <Set_Config+0xcc>)
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	4611      	mov	r1, r2
 80010c2:	8019      	strh	r1, [r3, #0]
 80010c4:	3302      	adds	r3, #2
 80010c6:	0c12      	lsrs	r2, r2, #16
 80010c8:	701a      	strb	r2, [r3, #0]
	uint8_t read_command[3] = {READ|CONFIG, 0x00, 0x00};
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <Set_Config+0xd0>)
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <Set_Config+0xd4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	743b      	strb	r3, [r7, #16]
 80010d8:	2300      	movs	r3, #0
 80010da:	747b      	strb	r3, [r7, #17]
 80010dc:	2300      	movs	r3, #0
 80010de:	74bb      	strb	r3, [r7, #18]
	
	Hardware_Reset(s);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f923 	bl	800132c <Hardware_Reset>
	//Make sure SCE is 0. This will make it so that the DAC will use the Values direclty written to it
	//rather than trying to use the individual offset and gain of each register to re-adjust
	//the value
	//Gain_A = 1 -> gain is set to 4xVref GAIN_A = 0 -> gain is set to 6xVref
	
	uint8_t tx_data[3] = {WRITE|CONFIG, AB, 0x00};
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <Set_Config+0xd8>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <Set_Config+0xd4>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	733b      	strb	r3, [r7, #12]
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <Set_Config+0xdc>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	737b      	strb	r3, [r7, #13]
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f843 	bl	8001190 <Send_Command>
	Send_Command(s, read_command);
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f83d 	bl	8001190 <Send_Command>
	Recieve_Data(s, Data);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f85b 	bl	80011d8 <Recieve_Data>
	
	//if Data is the same as tx_data then the command was successful
	if(Data[1] == tx_data[1] && Data[2] == tx_data[2]){
 8001122:	7d7a      	ldrb	r2, [r7, #21]
 8001124:	7b7b      	ldrb	r3, [r7, #13]
 8001126:	429a      	cmp	r2, r3
 8001128:	d117      	bne.n	800115a <Set_Config+0xaa>
 800112a:	7dba      	ldrb	r2, [r7, #22]
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	429a      	cmp	r2, r3
 8001130:	d113      	bne.n	800115a <Set_Config+0xaa>
		s->config = (Data[1] << 8) | Data[2];
 8001132:	7d7b      	ldrb	r3, [r7, #21]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	7dbb      	ldrb	r3, [r7, #22]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21b      	sxth	r3, r3
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	809a      	strh	r2, [r3, #4]
		s->Configured = true;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	729a      	strb	r2, [r3, #10]
		s->State = DAC_STATE_OK;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2204      	movs	r2, #4
 8001150:	72da      	strb	r2, [r3, #11]
		s->Ready = true;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	731a      	strb	r2, [r3, #12]
 8001158:	e00c      	b.n	8001174 <Set_Config+0xc4>
	}else{
		s->State = DAC_STATE_INITFAILED;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	72da      	strb	r2, [r3, #11]
		s->Ready = false;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	731a      	strb	r2, [r3, #12]
		s->Errors++;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	89db      	ldrh	r3, [r3, #14]
 800116a:	3301      	adds	r3, #1
 800116c:	b29a      	uxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	81da      	strh	r2, [r3, #14]
	}
			

}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	08014490 	.word	0x08014490
 8001180:	20000000 	.word	0x20000000
 8001184:	20000305 	.word	0x20000305
 8001188:	20000304 	.word	0x20000304
 800118c:	20000002 	.word	0x20000002

08001190 <Send_Command>:
//        The second byte is the MSB of the register
//        The third byte is the LSB of the register
//@param: spi: The spi handle to use
//@param: command: The command to send
//@return: none
void Send_Command(struct sDAC* s, uint8_t* Command){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f8aa 	bl	80012f4 <Set_nCS_high>
	hal_status = HAL_SPI_Transmit(s->spi, Command, 3, 1);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	f008 fd3e 	bl	8009c2a <HAL_SPI_Transmit>
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
	while (!(s->spi->Instance->SR & SPI_SR_TXE));
 80011b2:	bf00      	nop
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f7      	beq.n	80011b4 <Send_Command+0x24>
	Set_nCS_high(true);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 f895 	bl	80012f4 <Set_nCS_high>
	Delay_us(10);
 80011ca:	200a      	movs	r0, #10
 80011cc:	f002 f894 	bl	80032f8 <Delay_us>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <Recieve_Data>:

//@brief: This function recieves data from the DAC and stores it in the data array
//@param: spi: The spi handle
//@param: Data: buffer to store the data in
//@return: None
void Recieve_Data(struct sDAC* s, uint8_t* Data){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af02      	add	r7, sp, #8
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f886 	bl	80012f4 <Set_nCS_high>
	hal_status = HAL_SPI_TransmitReceive(s->spi,NOP_Send, Data, 3, 100);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2303      	movs	r3, #3
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	490b      	ldr	r1, [pc, #44]	; (8001224 <Recieve_Data+0x4c>)
 80011f6:	f008 fe54 	bl	8009ea2 <HAL_SPI_TransmitReceive>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
	while ((s->spi->Instance->SR & SPI_SR_RXNE));
 80011fe:	bf00      	nop
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f7      	bne.n	8001200 <Recieve_Data+0x28>
	Set_nCS_high(true);
 8001210:	2001      	movs	r0, #1
 8001212:	f000 f86f 	bl	80012f4 <Set_nCS_high>
	Delay_us(10);
 8001216:	200a      	movs	r0, #10
 8001218:	f002 f86e 	bl	80032f8 <Delay_us>

}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000004 	.word	0x20000004

08001228 <Set_DAC_Value>:
//@brief: This function sets the value of the given dac
//@param: DAC_Num: The DAC number to set the offset of
//@param: val: The value to set the dac to
//@param spi: The spi handle to use
//@return: None
void Set_DAC_Value(struct sDAC* s, uint8_t DAC_Num, uint16_t val){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
 8001234:	4613      	mov	r3, r2
 8001236:	803b      	strh	r3, [r7, #0]
	//Make sure DAC is between 0 and 7
	if(DAC_Num > 7){
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	2b07      	cmp	r3, #7
 800123c:	d819      	bhi.n	8001272 <Set_DAC_Value+0x4a>
		return;
	}
	uint8_t DAC_REG = Set_DAC0+DAC_Num;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <Set_DAC_Value+0x54>)
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	4413      	add	r3, r2
 8001246:	73fb      	strb	r3, [r7, #15]
	//Set the DAC to the correct value by adding the DAC number to the Set_DAC0 command
	uint8_t tx_data[3] = {WRITE|DAC_REG, (val >> 8), (val & 0xFF)};
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <Set_DAC_Value+0x58>)
 800124a:	781a      	ldrb	r2, [r3, #0]
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	4313      	orrs	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	733b      	strb	r3, [r7, #12]
 8001254:	883b      	ldrh	r3, [r7, #0]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	b29b      	uxth	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	737b      	strb	r3, [r7, #13]
 800125e:	883b      	ldrh	r3, [r7, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4619      	mov	r1, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff90 	bl	8001190 <Send_Command>
 8001270:	e000      	b.n	8001274 <Set_DAC_Value+0x4c>
		return;
 8001272:	bf00      	nop
	
}
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000001 	.word	0x20000001
 8001280:	20000304 	.word	0x20000304

08001284 <Set_nLDAC_high>:
}

//@brief: This function sets the nLDAC pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nLDAC_high(bool HIGH){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <Set_nLDAC_high+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <Set_nLDAC_high+0x34>)
 800129c:	f004 f836 	bl	800530c <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
	}
}
 80012a0:	e005      	b.n	80012ae <Set_nLDAC_high+0x2a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <Set_nLDAC_high+0x34>)
 80012aa:	f004 f82f 	bl	800530c <HAL_GPIO_WritePin>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020c00 	.word	0x40020c00

080012bc <Set_nRST_high>:
}

//@brief: This function sets the nRST pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nRST_high(bool HIGH){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <Set_nRST_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <Set_nRST_high+0x34>)
 80012d4:	f004 f81a 	bl	800530c <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
	}

}
 80012d8:	e005      	b.n	80012e6 <Set_nRST_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <Set_nRST_high+0x34>)
 80012e2:	f004 f813 	bl	800530c <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <Set_nCS_high>:
}

//@brief: This function sets the nCS pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nCS_high(bool HIGH){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <Set_nCS_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130a:	4807      	ldr	r0, [pc, #28]	; (8001328 <Set_nCS_high+0x34>)
 800130c:	f003 fffe 	bl	800530c <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
	}

}
 8001310:	e005      	b.n	800131e <Set_nCS_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <Set_nCS_high+0x34>)
 800131a:	f003 fff7 	bl	800530c <HAL_GPIO_WritePin>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000

0800132c <Hardware_Reset>:
	return state;
}


//Reset the DAC Values using the nRST Pin
void Hardware_Reset(struct sDAC* s){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	Set_nRST_high(false);
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ffc1 	bl	80012bc <Set_nRST_high>
	Delay_us(10);
 800133a:	200a      	movs	r0, #10
 800133c:	f001 ffdc 	bl	80032f8 <Delay_us>
	Set_nRST_high(true);
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff ffbb 	bl	80012bc <Set_nRST_high>
	Delay_us(10);
 8001346:	200a      	movs	r0, #10
 8001348:	f001 ffd6 	bl	80032f8 <Delay_us>
	s->State = DAC_STATE_UNKNOWN;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	72da      	strb	r2, [r3, #11]
	s->Ready= false;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	731a      	strb	r2, [r3, #12]
	s->Errors = 0;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	81da      	strh	r2, [r3, #14]
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <Syncronous_Update>:


//Syncronous Update of LDAC using the nLDAC Pin NOTE: Only Needed if nLDAC is tied High
void Syncronous_Update(void){
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
	Set_nLDAC_high(false);
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff ff8a 	bl	8001284 <Set_nLDAC_high>
	Delay_us(10);
 8001370:	200a      	movs	r0, #10
 8001372:	f001 ffc1 	bl	80032f8 <Delay_us>
	Set_nLDAC_high(true);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ff84 	bl	8001284 <Set_nLDAC_high>
	Delay_us(10);
 800137c:	200a      	movs	r0, #10
 800137e:	f001 ffbb 	bl	80032f8 <Delay_us>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <Set_Max_Peak_To_Peak_Voltage>:


//@brief: This function calculates the max peak to peak voltage that can be achieved
void Set_Max_Peak_To_Peak_Voltage(struct sDAC* s, bool Gain){
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
	//The max Voltage is 11.2V so we need to scale the voltage to fit in 16 bits
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	if(Gain){
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00a      	beq.n	80013b0 <Set_Max_Peak_To_Peak_Voltage+0x28>
		s->max_peak2peak = REFERENCE_VOLTAGE*4;
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80013a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edc3 7a04 	vstr	s15, [r3, #16]
	}else
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
	return;
 80013ae:	e00a      	b.n	80013c6 <Set_Max_Peak_To_Peak_Voltage+0x3e>
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	edc3 7a04 	vstr	s15, [r3, #16]
	return;
 80013c4:	bf00      	nop
}
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20000008 	.word	0x20000008

080013d4 <Set_Voltage_Peak_to_Peak>:

//@brief: This function sets the upper and lower bounds of a DAC Channel
//@param: s: The DAC Channel to set the bounds of
//@param: voltage: The voltage to set the bounds to
void Set_Voltage_Peak_to_Peak(struct sDAC* sDAC, uint8_t Channel_Number, float* voltage){
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	460b      	mov	r3, r1
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	72fb      	strb	r3, [r7, #11]
	//The max Voltage Peak to Peak is 22.4V so we need to scale the voltage to fit in 16 bits
	//Find the upper and lower bounds of the voltage with Zero Bias
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	float percentage = (*voltage/(float)sDAC->max_peak2peak)/2;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edd3 6a00 	vldr	s13, [r3]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80013ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fa:	edc7 7a05 	vstr	s15, [r7, #20]
	sDAC->DAC_Channels[Channel_Number].upper_bound = 0xFFFF/2 + percentage*0xFFFF;
 80013fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001402:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001464 <Set_Voltage_Peak_to_Peak+0x90>
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001468 <Set_Voltage_Peak_to_Peak+0x94>
 800140e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001412:	7afb      	ldrb	r3, [r7, #11]
 8001414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001418:	ee17 2a90 	vmov	r2, s15
 800141c:	b291      	uxth	r1, r2
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	3302      	adds	r3, #2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	460a      	mov	r2, r1
 8001428:	809a      	strh	r2, [r3, #4]
	sDAC->DAC_Channels[Channel_Number].lower_bound = 0xFFFF/2 - percentage*0xFFFF;
 800142a:	edd7 7a05 	vldr	s15, [r7, #20]
 800142e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001464 <Set_Voltage_Peak_to_Peak+0x90>
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001468 <Set_Voltage_Peak_to_Peak+0x94>
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	7afb      	ldrb	r3, [r7, #11]
 8001440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001444:	ee17 2a90 	vmov	r2, s15
 8001448:	b291      	uxth	r1, r2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	3302      	adds	r3, #2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	460a      	mov	r2, r1
 8001454:	80da      	strh	r2, [r3, #6]
	return;
 8001456:	bf00      	nop

}
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	477fff00 	.word	0x477fff00
 8001468:	46fffe00 	.word	0x46fffe00

0800146c <set_heater>:
#include "Heater_Controller.h"

void set_heater(bool Heater_On){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
    if(Heater_On){
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <set_heater+0x1c>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2120      	movs	r1, #32
 8001480:	4806      	ldr	r0, [pc, #24]	; (800149c <set_heater+0x30>)
 8001482:	f003 ff43 	bl	800530c <HAL_GPIO_WritePin>
    }else{
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
    }
}
 8001486:	e004      	b.n	8001492 <set_heater+0x26>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2120      	movs	r1, #32
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <set_heater+0x30>)
 800148e:	f003 ff3d 	bl	800530c <HAL_GPIO_WritePin>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40020800 	.word	0x40020800

080014a0 <get_heater>:

bool get_heater(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	/* read PC13 */
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5))
 80014a4:	2120      	movs	r1, #32
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <get_heater+0x1c>)
 80014a8:	f003 ff18 	bl	80052dc <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <get_heater+0x16>
	{
	 return true;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <get_heater+0x18>
	}else{
		return false;
 80014b6:	2300      	movs	r3, #0
	}
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40020800 	.word	0x40020800

080014c0 <PID_InitStruct>:
 */

#include "pid.h"

void PID_InitStruct(struct sPID* s)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->Config.Kp = 0.0f;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
  s->Config.Ki = 0.0f;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
  s->Config.Kd = 0.0f;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
  s->Config.Li = 1.0f;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80014f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014f6:	601a      	str	r2, [r3, #0]
  s->Config.TargetP = -273.0f;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80014fe:	4a22      	ldr	r2, [pc, #136]	; (8001588 <PID_InitStruct+0xc8>)
 8001500:	601a      	str	r2, [r3, #0]
  s->Config.Enabled = false;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
  s->Config.History = 16;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2210      	movs	r2, #16
 800150e:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
  s->DeltaT = 0.013f;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001518:	4a1c      	ldr	r2, [pc, #112]	; (800158c <PID_InitStruct+0xcc>)
 800151a:	601a      	str	r2, [r3, #0]
  s->IntegratorCount = 0;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  for (i=0;i<255;i++)
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e009      	b.n	800153e <PID_InitStruct+0x7e>
    s->LastP[i]=0.0f;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
  for (i=0;i<255;i++)
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	3301      	adds	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	2bff      	cmp	r3, #255	; 0xff
 8001542:	d1f2      	bne.n	800152a <PID_InitStruct+0x6a>
  s->Effort = 0.0f;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
  s->Ep = 0.0f;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
  s->Ei = 0.0f;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
  s->Ed = 0.0f;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
  s->Config.Frequency = 200;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	22c8      	movs	r2, #200	; 0xc8
 8001578:	f8a3 242e 	strh.w	r2, [r3, #1070]	; 0x42e
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	c3888000 	.word	0xc3888000
 800158c:	3c54fdf4 	.word	0x3c54fdf4

08001590 <PID_SavePoint>:

void PID_SavePoint(struct sPID* s, float p)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	ed87 0a00 	vstr	s0, [r7]
  uint8_t i;
  for (i=(s->Config.History-1); i>0; i--)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 80015a2:	3b01      	subs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e00d      	b.n	80015c4 <PID_SavePoint+0x34>
    s->LastP[i] = s->LastP[i-1];
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	1e5a      	subs	r2, r3, #1
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	0092      	lsls	r2, r2, #2
 80015b2:	440a      	add	r2, r1
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	601a      	str	r2, [r3, #0]
  for (i=(s->Config.History-1); i>0; i--)
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1ee      	bne.n	80015a8 <PID_SavePoint+0x18>
  s->LastP[0] = p;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	601a      	str	r2, [r3, #0]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <PID_SumError>:

float PID_SumError(struct sPID* s)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->IntegratorCount++;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80015ea:	3301      	adds	r3, #1
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  if (s->IntegratorCount < s->Config.History)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001600:	429a      	cmp	r2, r3
 8001602:	d202      	bcs.n	800160a <PID_SumError+0x2e>
    return 0;
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e05b      	b.n	80016c2 <PID_SumError+0xe6>
  else
    s->IntegratorCount = s->Config.History;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 242d 	ldrb.w	r2, [r3, #1069]	; 0x42d
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  float err = 0;
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e015      	b.n	800164e <PID_SumError+0x72>
    err += (s->Config.TargetP - s->LastP[i]);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8001628:	ed93 7a00 	vldr	s14, [r3]
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001644:	edc7 7a02 	vstr	s15, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	3301      	adds	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	429a      	cmp	r2, r3
 8001658:	d3e3      	bcc.n	8001622 <PID_SumError+0x46>
  err *= (s->Config.Ki);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ed97 7a02 	vldr	s14, [r7, #8]
 8001668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166c:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err < (-s->Config.Li))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	eef1 7a67 	vneg.f32	s15, s15
 800167e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168a:	d508      	bpl.n	800169e <PID_SumError+0xc2>
    err = -(s->Config.Li);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	eef1 7a67 	vneg.f32	s15, s15
 800169a:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err > s->Config.Li)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80016ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	dd04      	ble.n	80016c0 <PID_SumError+0xe4>
    err = s->Config.Li;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60bb      	str	r3, [r7, #8]
  return err;
 80016c0:	68bb      	ldr	r3, [r7, #8]
}
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <PID_Velocity>:


float PID_Velocity(struct sPID* s)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint8_t periods = 4;
 80016dc:	2304      	movs	r3, #4
 80016de:	73fb      	strb	r3, [r7, #15]
  if (s->IntegratorCount > periods)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80016e6:	7bfa      	ldrb	r2, [r7, #15]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d219      	bcs.n	8001720 <PID_Velocity+0x4c>
    return (s->LastP[0]-s->LastP[periods])/(s->DeltaT*periods);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	ed93 7a00 	vldr	s14, [r3]
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001708:	edd3 6a00 	vldr	s13, [r3]
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800171e:	e001      	b.n	8001724 <PID_Velocity+0x50>
  else
    return 0;
 8001720:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001738 <PID_Velocity+0x64>
}
 8001724:	eef0 7a66 	vmov.f32	s15, s13
 8001728:	eeb0 0a67 	vmov.f32	s0, s15
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	00000000 	.word	0x00000000

0800173c <PID_CalculateEffort>:

// calculate the error and return a value between 0 and 1
float PID_CalculateEffort(struct sPID* s, float p)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	ed87 0a00 	vstr	s0, [r7]
  float eff;
  if ((s->Config.Enabled == false) ||
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 342c 	ldrb.w	r3, [r3, #1068]	; 0x42c
 800174e:	f083 0301 	eor.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d115      	bne.n	8001784 <PID_CalculateEffort+0x48>
      (s->Config.TargetP < -200) ||
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800175e:	edd3 7a00 	vldr	s15, [r3]
  if ((s->Config.Enabled == false) ||
 8001762:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001898 <PID_CalculateEffort+0x15c>
 8001766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d409      	bmi.n	8001784 <PID_CalculateEffort+0x48>
      (s->DeltaT == 0))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001776:	edd3 7a00 	vldr	s15, [r3]
      (s->Config.TargetP < -200) ||
 800177a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	d117      	bne.n	80017b4 <PID_CalculateEffort+0x78>
  {
    s->Ep = -1;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800178a:	4a44      	ldr	r2, [pc, #272]	; (800189c <PID_CalculateEffort+0x160>)
 800178c:	601a      	str	r2, [r3, #0]
    s->Ed = -1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001794:	4a41      	ldr	r2, [pc, #260]	; (800189c <PID_CalculateEffort+0x160>)
 8001796:	601a      	str	r2, [r3, #0]
    s->Ei = -1;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800179e:	4a3f      	ldr	r2, [pc, #252]	; (800189c <PID_CalculateEffort+0x160>)
 80017a0:	601a      	str	r2, [r3, #0]
    s->Effort = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
    return 0;
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	e069      	b.n	8001888 <PID_CalculateEffort+0x14c>
  }
  s->Ep = (s->Config.TargetP - p) * (s->Config.Kp);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	edd7 7a00 	vldr	s15, [r7]
 80017c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80017da:	edc3 7a00 	vstr	s15, [r3]
  s->Ed = (0 - PID_Velocity(s)) * (s->Config.Kd);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ff78 	bl	80016d4 <PID_Velocity>
 80017e4:	eef0 7a40 	vmov.f32	s15, s0
 80017e8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80018a0 <PID_CalculateEffort+0x164>
 80017ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001804:	edc3 7a00 	vstr	s15, [r3]
  s->Ei = PID_SumError(s);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fee7 	bl	80015dc <PID_SumError>
 800180e:	eef0 7a40 	vmov.f32	s15, s0
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001818:	edc3 7a00 	vstr	s15, [r3]
  eff = s->Ep + s->Ed + s->Ei;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001822:	ed93 7a00 	vldr	s14, [r3]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001842:	edc7 7a03 	vstr	s15, [r7, #12]

  if (eff > 1)
 8001846:	edd7 7a03 	vldr	s15, [r7, #12]
 800184a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800184e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001856:	dd02      	ble.n	800185e <PID_CalculateEffort+0x122>
    eff = 1;
 8001858:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800185c:	60fb      	str	r3, [r7, #12]
  if (eff < 0)
 800185e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	d502      	bpl.n	8001872 <PID_CalculateEffort+0x136>
    eff = 0;
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  PID_SavePoint(s, p);
 8001872:	ed97 0a00 	vldr	s0, [r7]
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fe8a 	bl	8001590 <PID_SavePoint>
  s->Effort = eff;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	601a      	str	r2, [r3, #0]
  return eff;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eeb0 0a67 	vmov.f32	s0, s15
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	c3480000 	.word	0xc3480000
 800189c:	bf800000 	.word	0xbf800000
	...

080018a8 <TMP117_InitStruct>:
//@param s Pointer to the structure to initialize
//@param interface Pointer to the I2C interface to use
//@param addpin Value of the address pin
//@return None
void TMP117_InitStruct(struct sTMP117* s, I2C_HandleTypeDef* interface, uint8_t addpin)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	4613      	mov	r3, r2
 80018b4:	71fb      	strb	r3, [r7, #7]
   * 0x01 V+
   * 0x10 SDA
   * 0x11 SCL
   */
  uint8_t i;
  s->Address = 0b1001000 | addpin;
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	701a      	strb	r2, [r3, #0]
  s->Interface = interface;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	605a      	str	r2, [r3, #4]
  s->Average = -273;
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	a31f      	add	r3, pc, #124	; (adr r3, 8001948 <TMP117_InitStruct+0xa0>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
  s->Configured = false;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
  s->SamplesInAverage = 16;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2210      	movs	r2, #16
 80018e0:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
  s->Index = 0;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  s->State = TMP117_STATE_UNKNOWN;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  for (i=0;i<64;i++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	75fb      	strb	r3, [r7, #23]
 80018f8:	e00c      	b.n	8001914 <TMP117_InitStruct+0x6c>
    s->Temperature[i] = -273;
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	3301      	adds	r3, #1
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	18d1      	adds	r1, r2, r3
 8001904:	a310      	add	r3, pc, #64	; (adr r3, 8001948 <TMP117_InitStruct+0xa0>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	e9c1 2300 	strd	r2, r3, [r1]
  for (i=0;i<64;i++)
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	3301      	adds	r3, #1
 8001912:	75fb      	strb	r3, [r7, #23]
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b3f      	cmp	r3, #63	; 0x3f
 8001918:	d9ef      	bls.n	80018fa <TMP117_InitStruct+0x52>
  s->LastTemperature = -273;
 800191a:	68f9      	ldr	r1, [r7, #12]
 800191c:	a30a      	add	r3, pc, #40	; (adr r3, 8001948 <TMP117_InitStruct+0xa0>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Ready = false;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  s->Errors = 0;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
}
 8001936:	bf00      	nop
 8001938:	371c      	adds	r7, #28
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	f3af 8000 	nop.w
 8001948:	00000000 	.word	0x00000000
 800194c:	c0711000 	.word	0xc0711000

08001950 <TMP117_Configure>:

//@brief Configure the TMP117
//@param s Pointer to the structure to configure
//@return None
void TMP117_Configure(struct sTMP117* s)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af02      	add	r7, sp, #8
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef res;
  printf("Attempting to init... ");
 8001958:	481c      	ldr	r0, [pc, #112]	; (80019cc <TMP117_Configure+0x7c>)
 800195a:	f00e faad 	bl	800feb8 <iprintf>
  uint8_t buffer[3] = {0};
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <TMP117_Configure+0x80>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	81bb      	strh	r3, [r7, #12]
 8001964:	2300      	movs	r3, #0
 8001966:	73bb      	strb	r3, [r7, #14]
  buffer[0] = 1;
 8001968:	2301      	movs	r3, #1
 800196a:	733b      	strb	r3, [r7, #12]
  buffer[2] = 1 << 5;
 800196c:	2320      	movs	r3, #32
 800196e:	73bb      	strb	r3, [r7, #14]
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 3, 10); // 8 samples averaged
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6858      	ldr	r0, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b29b      	uxth	r3, r3
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	b299      	uxth	r1, r3
 800197e:	f107 020c 	add.w	r2, r7, #12
 8001982:	230a      	movs	r3, #10
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2303      	movs	r3, #3
 8001988:	f003 fe1e 	bl	80055c8 <HAL_I2C_Master_Transmit>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
  if (res == HAL_OK)
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d107      	bne.n	80019a6 <TMP117_Configure+0x56>
  {
    s->Configured = true;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    printf("OK!\n");
 800199e:	480d      	ldr	r0, [pc, #52]	; (80019d4 <TMP117_Configure+0x84>)
 80019a0:	f00e fb10 	bl	800ffc4 <puts>
  {
    s->Errors++;
    s->State = TMP117_STATE_INITFAILED;
    printf("Failed!\n");
  }
}
 80019a4:	e00e      	b.n	80019c4 <TMP117_Configure+0x74>
    s->Errors++;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019ac:	3301      	adds	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    s->State = TMP117_STATE_INITFAILED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    printf("Failed!\n");
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <TMP117_Configure+0x88>)
 80019c0:	f00e fb00 	bl	800ffc4 <puts>
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	080144b8 	.word	0x080144b8
 80019d0:	080144dc 	.word	0x080144dc
 80019d4:	080144d0 	.word	0x080144d0
 80019d8:	080144d4 	.word	0x080144d4

080019dc <TMP117_GetTemperature>:

//@brief Get the temperature from the TMP117
//@param s Pointer to the structure to get the temperature from
//@return None
void TMP117_GetTemperature(struct sTMP117* s)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b08b      	sub	sp, #44	; 0x2c
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t u;
  double t = 0;
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
  //setup an empty Buffer to request the temperature
  uint8_t buffer[2] = {0};
 80019f0:	2300      	movs	r3, #0
 80019f2:	81bb      	strh	r3, [r7, #12]
  uint16_t data = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef res;
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 1, 10); // request temperature
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6858      	ldr	r0, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	b299      	uxth	r1, r3
 8001a06:	f107 020c 	add.w	r2, r7, #12
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f003 fdda 	bl	80055c8 <HAL_I2C_Master_Transmit>
 8001a14:	4603      	mov	r3, r0
 8001a16:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 8001a18:	7cfb      	ldrb	r3, [r7, #19]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d01a      	beq.n	8001a54 <TMP117_GetTemperature+0x78>
  {
    s->State = TMP117_STATE_REQUESTNOACK;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2202      	movs	r2, #2
 8001a22:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    //If this temperature sensor gets more than 100 errors in a row, it's probably not connected
    if (s->Errors > 100)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a3c:	2b64      	cmp	r3, #100	; 0x64
 8001a3e:	f240 80b3 	bls.w	8001ba8 <TMP117_GetTemperature+0x1cc>
    {
      s->Configured = false;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 8001a52:	e0a9      	b.n	8001ba8 <TMP117_GetTemperature+0x1cc>
  }

  res = HAL_I2C_Master_Receive(s->Interface, (s->Address << 1), buffer, 2, 10); // receive temperature
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6858      	ldr	r0, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	b299      	uxth	r1, r3
 8001a62:	f107 020c 	add.w	r2, r7, #12
 8001a66:	230a      	movs	r3, #10
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f003 feaa 	bl	80057c4 <HAL_I2C_Master_Receive>
 8001a70:	4603      	mov	r3, r0
 8001a72:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 8001a74:	7cfb      	ldrb	r3, [r7, #19]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d01a      	beq.n	8001ab0 <TMP117_GetTemperature+0xd4>
  {
    s->State = TMP117_STATE_RECEIVEFAIL;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a88:	3301      	adds	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    if (s->Errors > 100)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a98:	2b64      	cmp	r3, #100	; 0x64
 8001a9a:	f240 8087 	bls.w	8001bac <TMP117_GetTemperature+0x1d0>
    {
      s->Configured = false;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 8001aae:	e07d      	b.n	8001bac <TMP117_GetTemperature+0x1d0>
  }

  
  s->State = TMP117_STATE_VALIDTEMP;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  data = (buffer[0] << 8) | buffer[1];
 8001ab8:	7b3b      	ldrb	r3, [r7, #12]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	7b7b      	ldrb	r3, [r7, #13]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	817b      	strh	r3, [r7, #10]
  u = *(&(data));
 8001aca:	897b      	ldrh	r3, [r7, #10]
 8001acc:	823b      	strh	r3, [r7, #16]
  //Conver the Temp as per documentation
  s->Temperature[s->Index] = ((double)u) * 0.0078125;
 8001ace:	8a3b      	ldrh	r3, [r7, #16]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd37 	bl	8000544 <__aeabi_ui2d>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001adc:	461c      	mov	r4, r3
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ae6:	f7fe fda7 	bl	8000638 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	1c61      	adds	r1, r4, #1
 8001af2:	00c9      	lsls	r1, r1, #3
 8001af4:	4401      	add	r1, r0
 8001af6:	e9c1 2300 	strd	r2, r3, [r1]
  s->LastTemperature = s->Temperature[s->Index];
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	3301      	adds	r3, #1
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Index++;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  //If we finally have enough Temperatures to average, set the Ready flag
  //if we have engough samples, set the flags
  if (s->Index >= s->SamplesInAverage)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 2211 	ldrb.w	r2, [r3, #529]	; 0x211
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d307      	bcc.n	8001b42 <TMP117_GetTemperature+0x166>
  {
    s->Ready = true;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
    s->Index = 0;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  }
  
  //average the Temperatures
  if (s->Ready)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d030      	beq.n	8001bae <TMP117_GetTemperature+0x1d2>
  {
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e011      	b.n	8001b76 <TMP117_GetTemperature+0x19a>
    {
      t += s->Temperature[i];
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b64:	f7fe fbb2 	bl	80002cc <__adddf3>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	4293      	cmp	r3, r2
 8001b82:	dbe6      	blt.n	8001b52 <TMP117_GetTemperature+0x176>
    }
    s->Average = t / s->SamplesInAverage;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcea 	bl	8000564 <__aeabi_i2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b98:	f7fe fe78 	bl	800088c <__aeabi_ddiv>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
 8001ba6:	e002      	b.n	8001bae <TMP117_GetTemperature+0x1d2>
    return;
 8001ba8:	bf00      	nop
 8001baa:	e000      	b.n	8001bae <TMP117_GetTemperature+0x1d2>
    return;
 8001bac:	bf00      	nop
  }


}
 8001bae:	3724      	adds	r7, #36	; 0x24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd90      	pop	{r4, r7, pc}

08001bb4 <TCB_InitStruct>:
#include "TuningControlBoard.h"



//This Will Setup the TCB structer by initiallizing the DAC and the TMP117 and the Controller
void TCB_InitStruct(struct sTuningControlBoard* s, I2C_HandleTypeDef* hi2c, SPI_HandleTypeDef* hspi){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]

    //For each of the Seven Temperature sensors initialize the struct
    for(int i = 0; i < 4; i++){
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e011      	b.n	8001bea <TCB_InitStruct+0x36>
    	TMP117_InitStruct(&s->Sensor[i], hi2c, i);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f44f 720a 	mov.w	r2, #552	; 0x228
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fe62 	bl	80018a8 <TMP117_InitStruct>
    for(int i = 0; i < 4; i++){
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3301      	adds	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	ddea      	ble.n	8001bc6 <TCB_InitStruct+0x12>
    }   
    Controller_InitStruct(&s->Controller,&s->Sensor[0], 0);
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f001 fa74 	bl	80030e8 <Controller_InitStruct>
    DAC_InitStruct(&s->DAC8718, hspi);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fa15 	bl	8001038 <DAC_InitStruct>

}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c1c:	f3bf 8f4f 	dsb	sy
}
 8001c20:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <__NVIC_SystemReset+0x24>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c2a:	4904      	ldr	r1, [pc, #16]	; (8001c3c <__NVIC_SystemReset+0x24>)
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <__NVIC_SystemReset+0x28>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c32:	f3bf 8f4f 	dsb	sy
}
 8001c36:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <__NVIC_SystemReset+0x20>
 8001c3c:	e000ed00 	.word	0xe000ed00
 8001c40:	05fa0004 	.word	0x05fa0004

08001c44 <ProcessUserInput>:

//Get the User Input and process it
//@param Controller: pointer to the controller struct
//@param buffer: pointer to the buffer
void ProcessUserInput(struct sController* Controller, uint8_t* buffer)
{
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b0ca      	sub	sp, #296	; 0x128
 8001c48:	af04      	add	r7, sp, #16
 8001c4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c52:	6018      	str	r0, [r3, #0]
 8001c54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c5c:	6019      	str	r1, [r3, #0]
  uint16_t i = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  uint8_t u = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
  char output[250];
  char c;
  float f = 0;
 8001c6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
  for (i=0; buffer[i]; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001c7e:	e02c      	b.n	8001cda <ProcessUserInput+0x96>
    buffer[i] = tolower(buffer[i]);
 8001c80:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c84:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001c88:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8001c96:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <ProcessUserInput+0x70>)
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d106      	bne.n	8001cb8 <ProcessUserInput+0x74>
 8001caa:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001cae:	3320      	adds	r3, #32
 8001cb0:	e004      	b.n	8001cbc <ProcessUserInput+0x78>
 8001cb2:	bf00      	nop
 8001cb4:	0801513c 	.word	0x0801513c
 8001cb8:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001cbc:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8001cc0:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001cc4:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001cc8:	6809      	ldr	r1, [r1, #0]
 8001cca:	440a      	add	r2, r1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	7013      	strb	r3, [r2, #0]
  for (i=0; buffer[i]; i++)
 8001cd0:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001cda:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001cde:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001ce2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1c7      	bne.n	8001c80 <ProcessUserInput+0x3c>
//  printf("String: %s\n", buffer);

  replacestr(buffer, "=", "");
 8001cf0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cf4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cf8:	4ab3      	ldr	r2, [pc, #716]	; (8001fc8 <ProcessUserInput+0x384>)
 8001cfa:	49b4      	ldr	r1, [pc, #720]	; (8001fcc <ProcessUserInput+0x388>)
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	f001 fb21 	bl	8003344 <replacestr>
  replacestr(buffer, " ", "");
 8001d02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d0a:	4aaf      	ldr	r2, [pc, #700]	; (8001fc8 <ProcessUserInput+0x384>)
 8001d0c:	49b0      	ldr	r1, [pc, #704]	; (8001fd0 <ProcessUserInput+0x38c>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	f001 fb18 	bl	8003344 <replacestr>
  replacestr(buffer, " ", "");
 8001d14:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d1c:	4aaa      	ldr	r2, [pc, #680]	; (8001fc8 <ProcessUserInput+0x384>)
 8001d1e:	49ac      	ldr	r1, [pc, #688]	; (8001fd0 <ProcessUserInput+0x38c>)
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	f001 fb0f 	bl	8003344 <replacestr>
  replacestr(buffer, " ", "");
 8001d26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d2a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d2e:	4aa6      	ldr	r2, [pc, #664]	; (8001fc8 <ProcessUserInput+0x384>)
 8001d30:	49a7      	ldr	r1, [pc, #668]	; (8001fd0 <ProcessUserInput+0x38c>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	f001 fb06 	bl	8003344 <replacestr>
  replacestr(buffer, " ", "");
 8001d38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d40:	4aa1      	ldr	r2, [pc, #644]	; (8001fc8 <ProcessUserInput+0x384>)
 8001d42:	49a3      	ldr	r1, [pc, #652]	; (8001fd0 <ProcessUserInput+0x38c>)
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	f001 fafd 	bl	8003344 <replacestr>
  replacestr(buffer, " ", "");
 8001d4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d4e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d52:	4a9d      	ldr	r2, [pc, #628]	; (8001fc8 <ProcessUserInput+0x384>)
 8001d54:	499e      	ldr	r1, [pc, #632]	; (8001fd0 <ProcessUserInput+0x38c>)
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	f001 faf4 	bl	8003344 <replacestr>
  replacestr(buffer, "channel", "c");
 8001d5c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d64:	4a9b      	ldr	r2, [pc, #620]	; (8001fd4 <ProcessUserInput+0x390>)
 8001d66:	499c      	ldr	r1, [pc, #624]	; (8001fd8 <ProcessUserInput+0x394>)
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	f001 faeb 	bl	8003344 <replacestr>
//  replacestr(buffer, "controller", "c");
  replacestr(buffer, "chan", "c");
 8001d6e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d72:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d76:	4a97      	ldr	r2, [pc, #604]	; (8001fd4 <ProcessUserInput+0x390>)
 8001d78:	4998      	ldr	r1, [pc, #608]	; (8001fdc <ProcessUserInput+0x398>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	f001 fae2 	bl	8003344 <replacestr>
//  replacestr(buffer, "con", "c");
  replacestr(buffer, "address", "a");
 8001d80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d88:	4a95      	ldr	r2, [pc, #596]	; (8001fe0 <ProcessUserInput+0x39c>)
 8001d8a:	4996      	ldr	r1, [pc, #600]	; (8001fe4 <ProcessUserInput+0x3a0>)
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	f001 fad9 	bl	8003344 <replacestr>
  replacestr(buffer, "kp", "p");
 8001d92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d9a:	4a93      	ldr	r2, [pc, #588]	; (8001fe8 <ProcessUserInput+0x3a4>)
 8001d9c:	4993      	ldr	r1, [pc, #588]	; (8001fec <ProcessUserInput+0x3a8>)
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	f001 fad0 	bl	8003344 <replacestr>
  replacestr(buffer, "kd", "d");
 8001da4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001da8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dac:	4a90      	ldr	r2, [pc, #576]	; (8001ff0 <ProcessUserInput+0x3ac>)
 8001dae:	4991      	ldr	r1, [pc, #580]	; (8001ff4 <ProcessUserInput+0x3b0>)
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	f001 fac7 	bl	8003344 <replacestr>
  replacestr(buffer, "ki", "i");
 8001db6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dbe:	4a8e      	ldr	r2, [pc, #568]	; (8001ff8 <ProcessUserInput+0x3b4>)
 8001dc0:	498e      	ldr	r1, [pc, #568]	; (8001ffc <ProcessUserInput+0x3b8>)
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	f001 fabe 	bl	8003344 <replacestr>
  replacestr(buffer, "li", "l");
 8001dc8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dcc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dd0:	4a8b      	ldr	r2, [pc, #556]	; (8002000 <ProcessUserInput+0x3bc>)
 8001dd2:	498c      	ldr	r1, [pc, #560]	; (8002004 <ProcessUserInput+0x3c0>)
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	f001 fab5 	bl	8003344 <replacestr>
  replacestr(buffer, "target", "t");
 8001dda:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001de2:	4a89      	ldr	r2, [pc, #548]	; (8002008 <ProcessUserInput+0x3c4>)
 8001de4:	4989      	ldr	r1, [pc, #548]	; (800200c <ProcessUserInput+0x3c8>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	f001 faac 	bl	8003344 <replacestr>
  replacestr(buffer, "temperature", "t");
 8001dec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001df0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001df4:	4a84      	ldr	r2, [pc, #528]	; (8002008 <ProcessUserInput+0x3c4>)
 8001df6:	4986      	ldr	r1, [pc, #536]	; (8002010 <ProcessUserInput+0x3cc>)
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	f001 faa3 	bl	8003344 <replacestr>
  replacestr(buffer, "temp", "t");
 8001dfe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e02:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e06:	4a80      	ldr	r2, [pc, #512]	; (8002008 <ProcessUserInput+0x3c4>)
 8001e08:	4982      	ldr	r1, [pc, #520]	; (8002014 <ProcessUserInput+0x3d0>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	f001 fa9a 	bl	8003344 <replacestr>
  replacestr(buffer, "frequency", "f");
 8001e10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e18:	4a7f      	ldr	r2, [pc, #508]	; (8002018 <ProcessUserInput+0x3d4>)
 8001e1a:	4980      	ldr	r1, [pc, #512]	; (800201c <ProcessUserInput+0x3d8>)
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	f001 fa91 	bl	8003344 <replacestr>
  replacestr(buffer, "freq", "f");
 8001e22:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e2a:	4a7b      	ldr	r2, [pc, #492]	; (8002018 <ProcessUserInput+0x3d4>)
 8001e2c:	497c      	ldr	r1, [pc, #496]	; (8002020 <ProcessUserInput+0x3dc>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	f001 fa88 	bl	8003344 <replacestr>
  replacestr(buffer, "enable", "n");
 8001e34:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e3c:	4a79      	ldr	r2, [pc, #484]	; (8002024 <ProcessUserInput+0x3e0>)
 8001e3e:	497a      	ldr	r1, [pc, #488]	; (8002028 <ProcessUserInput+0x3e4>)
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	f001 fa7f 	bl	8003344 <replacestr>
  replacestr(buffer, "disable", "f");
 8001e46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e4a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e4e:	4a72      	ldr	r2, [pc, #456]	; (8002018 <ProcessUserInput+0x3d4>)
 8001e50:	4976      	ldr	r1, [pc, #472]	; (800202c <ProcessUserInput+0x3e8>)
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	f001 fa76 	bl	8003344 <replacestr>
  replacestr(buffer, "save", "s");
 8001e58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e60:	4a73      	ldr	r2, [pc, #460]	; (8002030 <ProcessUserInput+0x3ec>)
 8001e62:	4974      	ldr	r1, [pc, #464]	; (8002034 <ProcessUserInput+0x3f0>)
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	f001 fa6d 	bl	8003344 <replacestr>
  replacestr(buffer, "load", "l");
 8001e6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e72:	4a63      	ldr	r2, [pc, #396]	; (8002000 <ProcessUserInput+0x3bc>)
 8001e74:	4970      	ldr	r1, [pc, #448]	; (8002038 <ProcessUserInput+0x3f4>)
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	f001 fa64 	bl	8003344 <replacestr>
  replacestr(buffer, "history", "h");
 8001e7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e84:	4a6d      	ldr	r2, [pc, #436]	; (800203c <ProcessUserInput+0x3f8>)
 8001e86:	496e      	ldr	r1, [pc, #440]	; (8002040 <ProcessUserInput+0x3fc>)
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	f001 fa5b 	bl	8003344 <replacestr>
  replacestr(buffer, "update", "u");
 8001e8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e96:	4a6b      	ldr	r2, [pc, #428]	; (8002044 <ProcessUserInput+0x400>)
 8001e98:	496b      	ldr	r1, [pc, #428]	; (8002048 <ProcessUserInput+0x404>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	f001 fa52 	bl	8003344 <replacestr>
  replacestr(buffer, "raw", "r");
 8001ea0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ea4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ea8:	4a68      	ldr	r2, [pc, #416]	; (800204c <ProcessUserInput+0x408>)
 8001eaa:	4969      	ldr	r1, [pc, #420]	; (8002050 <ProcessUserInput+0x40c>)
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	f001 fa49 	bl	8003344 <replacestr>
  replacestr(buffer, "bounce", "b");
 8001eb2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001eb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001eba:	4a66      	ldr	r2, [pc, #408]	; (8002054 <ProcessUserInput+0x410>)
 8001ebc:	4966      	ldr	r1, [pc, #408]	; (8002058 <ProcessUserInput+0x414>)
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	f001 fa40 	bl	8003344 <replacestr>
  replacestr(buffer, "wipe", "w");
 8001ec4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ec8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ecc:	4a63      	ldr	r2, [pc, #396]	; (800205c <ProcessUserInput+0x418>)
 8001ece:	4964      	ldr	r1, [pc, #400]	; (8002060 <ProcessUserInput+0x41c>)
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	f001 fa37 	bl	8003344 <replacestr>

//  printf("New String: %s\n", buffer);

  if ((strcmp((char*) buffer, "?") == 0) || (strcmp((char*) buffer, "help") == 0))
 8001ed6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001eda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ede:	4961      	ldr	r1, [pc, #388]	; (8002064 <ProcessUserInput+0x420>)
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	f7fe f985 	bl	80001f0 <strcmp>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00b      	beq.n	8001f04 <ProcessUserInput+0x2c0>
 8001eec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ef0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ef4:	495c      	ldr	r1, [pc, #368]	; (8002068 <ProcessUserInput+0x424>)
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	f7fe f97a 	bl	80001f0 <strcmp>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 80e4 	bne.w	80020cc <ProcessUserInput+0x488>
  {
    USBSendString("\nQHC Firmware v1.3\n");
 8001f04:	4859      	ldr	r0, [pc, #356]	; (800206c <ProcessUserInput+0x428>)
 8001f06:	f001 f9b9 	bl	800327c <USBSendString>
    USBSendString("Commands can be upper or lower case. Variables can be set with an equals sign or space or nothing.\n");
 8001f0a:	4859      	ldr	r0, [pc, #356]	; (8002070 <ProcessUserInput+0x42c>)
 8001f0c:	f001 f9b6 	bl	800327c <USBSendString>
    USBSendString("\"channel=1\", \"channel 1\", \"channel1\", \"c1\" are all treated the same.\n");
 8001f10:	4858      	ldr	r0, [pc, #352]	; (8002074 <ProcessUserInput+0x430>)
 8001f12:	f001 f9b3 	bl	800327c <USBSendString>
    USBSendString("\n");
 8001f16:	4858      	ldr	r0, [pc, #352]	; (8002078 <ProcessUserInput+0x434>)
 8001f18:	f001 f9b0 	bl	800327c <USBSendString>
//    USBSendString("Controller = n  -- chooses which controller to configure\n");
    USBSendString("Channel = n     -- chooses which channel to configure\n");
 8001f1c:	4857      	ldr	r0, [pc, #348]	; (800207c <ProcessUserInput+0x438>)
 8001f1e:	f001 f9ad 	bl	800327c <USBSendString>
    USBSendString("Address = nn    -- sets the address of the temperature sensor (00, 01, 10, or 11)\n");
 8001f22:	4857      	ldr	r0, [pc, #348]	; (8002080 <ProcessUserInput+0x43c>)
 8001f24:	f001 f9aa 	bl	800327c <USBSendString>
    USBSendString("kP = n.nn       -- sets the proportional gain\n");
 8001f28:	4856      	ldr	r0, [pc, #344]	; (8002084 <ProcessUserInput+0x440>)
 8001f2a:	f001 f9a7 	bl	800327c <USBSendString>
    USBSendString("kD = n.nn       -- sets the derivative gain\n");
 8001f2e:	4856      	ldr	r0, [pc, #344]	; (8002088 <ProcessUserInput+0x444>)
 8001f30:	f001 f9a4 	bl	800327c <USBSendString>
    USBSendString("kI = n.nn       -- sets the integral gain\n");
 8001f34:	4855      	ldr	r0, [pc, #340]	; (800208c <ProcessUserInput+0x448>)
 8001f36:	f001 f9a1 	bl	800327c <USBSendString>
    USBSendString("Li = n.nn       -- sets the integral gain limit\n");
 8001f3a:	4855      	ldr	r0, [pc, #340]	; (8002090 <ProcessUserInput+0x44c>)
 8001f3c:	f001 f99e 	bl	800327c <USBSendString>
    USBSendString("History = nn    -- sets the number of points used in the integral (1-255)\n");
 8001f40:	4854      	ldr	r0, [pc, #336]	; (8002094 <ProcessUserInput+0x450>)
 8001f42:	f001 f99b 	bl	800327c <USBSendString>
    USBSendString("Target = n      -- sets the target temperature\n");
 8001f46:	4854      	ldr	r0, [pc, #336]	; (8002098 <ProcessUserInput+0x454>)
 8001f48:	f001 f998 	bl	800327c <USBSendString>
    USBSendString("Temperature = n -- sets the target temperature\n");
 8001f4c:	4853      	ldr	r0, [pc, #332]	; (800209c <ProcessUserInput+0x458>)
 8001f4e:	f001 f995 	bl	800327c <USBSendString>
    USBSendString("Freq = n        -- sets the PWM frequency (40 = 1 second)\n");
 8001f52:	4853      	ldr	r0, [pc, #332]	; (80020a0 <ProcessUserInput+0x45c>)
 8001f54:	f001 f992 	bl	800327c <USBSendString>
    USBSendString("Enable          -- starts the temperature control loop\n");
 8001f58:	4852      	ldr	r0, [pc, #328]	; (80020a4 <ProcessUserInput+0x460>)
 8001f5a:	f001 f98f 	bl	800327c <USBSendString>
    USBSendString("Disable         -- stops the temperature control loop\n");
 8001f5e:	4852      	ldr	r0, [pc, #328]	; (80020a8 <ProcessUserInput+0x464>)
 8001f60:	f001 f98c 	bl	800327c <USBSendString>
    USBSendString("Update          -- shows the status of all of the controllers\n");
 8001f64:	4851      	ldr	r0, [pc, #324]	; (80020ac <ProcessUserInput+0x468>)
 8001f66:	f001 f989 	bl	800327c <USBSendString>
    USBSendString("Raw             -- shows an easily parsable version of Update\n");
 8001f6a:	4851      	ldr	r0, [pc, #324]	; (80020b0 <ProcessUserInput+0x46c>)
 8001f6c:	f001 f986 	bl	800327c <USBSendString>
    USBSendString("Wipe            -- wipes the existing configuration and load new defaults\n");
 8001f70:	4850      	ldr	r0, [pc, #320]	; (80020b4 <ProcessUserInput+0x470>)
 8001f72:	f001 f983 	bl	800327c <USBSendString>
    USBSendString("Bounce          -- performs a power-cycle / reboot on the system\n");
 8001f76:	4850      	ldr	r0, [pc, #320]	; (80020b8 <ProcessUserInput+0x474>)
 8001f78:	f001 f980 	bl	800327c <USBSendString>
    USBSendString("Load            -- reloads the previously saved values (automatic at power-on)\n");
 8001f7c:	484f      	ldr	r0, [pc, #316]	; (80020bc <ProcessUserInput+0x478>)
 8001f7e:	f001 f97d 	bl	800327c <USBSendString>
    USBSendString("Save            -- saves the currently configured values\n");
 8001f82:	484f      	ldr	r0, [pc, #316]	; (80020c0 <ProcessUserInput+0x47c>)
 8001f84:	f001 f97a 	bl	800327c <USBSendString>
    USBSendString("\n");
 8001f88:	483b      	ldr	r0, [pc, #236]	; (8002078 <ProcessUserInput+0x434>)
 8001f8a:	f001 f977 	bl	800327c <USBSendString>
    if (UI_Controller == 9)
 8001f8e:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <ProcessUserInput+0x480>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b09      	cmp	r3, #9
 8001f94:	d104      	bne.n	8001fa0 <ProcessUserInput+0x35c>
      USBSendString("No controller selected.\n");
 8001f96:	484c      	ldr	r0, [pc, #304]	; (80020c8 <ProcessUserInput+0x484>)
 8001f98:	f001 f970 	bl	800327c <USBSendString>
      ShowEffort(&Controller[UI_Controller]);
      USBSendString("\n");
      */
      ShowAll(&Controller[UI_Controller], true);
    }
    return;
 8001f9c:	f000 bce3 	b.w	8002966 <ProcessUserInput+0xd22>
      ShowAll(&Controller[UI_Controller], true);
 8001fa0:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <ProcessUserInput+0x480>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001fb2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	2101      	movs	r1, #1
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fdb3 	bl	8002b28 <ShowAll>
    return;
 8001fc2:	f000 bcd0 	b.w	8002966 <ProcessUserInput+0xd22>
 8001fc6:	bf00      	nop
 8001fc8:	080144e0 	.word	0x080144e0
 8001fcc:	080144e4 	.word	0x080144e4
 8001fd0:	080144e8 	.word	0x080144e8
 8001fd4:	080144ec 	.word	0x080144ec
 8001fd8:	080144f0 	.word	0x080144f0
 8001fdc:	080144f8 	.word	0x080144f8
 8001fe0:	08014500 	.word	0x08014500
 8001fe4:	08014504 	.word	0x08014504
 8001fe8:	0801450c 	.word	0x0801450c
 8001fec:	08014510 	.word	0x08014510
 8001ff0:	08014514 	.word	0x08014514
 8001ff4:	08014518 	.word	0x08014518
 8001ff8:	0801451c 	.word	0x0801451c
 8001ffc:	08014520 	.word	0x08014520
 8002000:	08014524 	.word	0x08014524
 8002004:	08014528 	.word	0x08014528
 8002008:	0801452c 	.word	0x0801452c
 800200c:	08014530 	.word	0x08014530
 8002010:	08014538 	.word	0x08014538
 8002014:	08014544 	.word	0x08014544
 8002018:	0801454c 	.word	0x0801454c
 800201c:	08014550 	.word	0x08014550
 8002020:	0801455c 	.word	0x0801455c
 8002024:	08014564 	.word	0x08014564
 8002028:	08014568 	.word	0x08014568
 800202c:	08014570 	.word	0x08014570
 8002030:	08014578 	.word	0x08014578
 8002034:	0801457c 	.word	0x0801457c
 8002038:	08014584 	.word	0x08014584
 800203c:	0801458c 	.word	0x0801458c
 8002040:	08014590 	.word	0x08014590
 8002044:	08014598 	.word	0x08014598
 8002048:	0801459c 	.word	0x0801459c
 800204c:	080145a4 	.word	0x080145a4
 8002050:	080145a8 	.word	0x080145a8
 8002054:	080145ac 	.word	0x080145ac
 8002058:	080145b0 	.word	0x080145b0
 800205c:	080145b8 	.word	0x080145b8
 8002060:	080145bc 	.word	0x080145bc
 8002064:	080145c4 	.word	0x080145c4
 8002068:	080145c8 	.word	0x080145c8
 800206c:	080145d0 	.word	0x080145d0
 8002070:	080145e4 	.word	0x080145e4
 8002074:	08014648 	.word	0x08014648
 8002078:	08014690 	.word	0x08014690
 800207c:	08014694 	.word	0x08014694
 8002080:	080146cc 	.word	0x080146cc
 8002084:	08014720 	.word	0x08014720
 8002088:	08014750 	.word	0x08014750
 800208c:	08014780 	.word	0x08014780
 8002090:	080147ac 	.word	0x080147ac
 8002094:	080147e0 	.word	0x080147e0
 8002098:	0801482c 	.word	0x0801482c
 800209c:	0801485c 	.word	0x0801485c
 80020a0:	0801488c 	.word	0x0801488c
 80020a4:	080148c8 	.word	0x080148c8
 80020a8:	08014900 	.word	0x08014900
 80020ac:	08014938 	.word	0x08014938
 80020b0:	08014978 	.word	0x08014978
 80020b4:	080149b8 	.word	0x080149b8
 80020b8:	08014a04 	.word	0x08014a04
 80020bc:	08014a48 	.word	0x08014a48
 80020c0:	08014a98 	.word	0x08014a98
 80020c4:	2000000c 	.word	0x2000000c
 80020c8:	08014ad4 	.word	0x08014ad4
  }

  //Print the Status all the Controllers
  if ((strcmp((char*) buffer, "u") == 0) || (strcmp((char*) buffer, "/") == 0))
 80020cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020d4:	49b4      	ldr	r1, [pc, #720]	; (80023a8 <ProcessUserInput+0x764>)
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	f7fe f88a 	bl	80001f0 <strcmp>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <ProcessUserInput+0x4b4>
 80020e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020e6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020ea:	49b0      	ldr	r1, [pc, #704]	; (80023ac <ProcessUserInput+0x768>)
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	f7fe f87f 	bl	80001f0 <strcmp>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d11e      	bne.n	8002136 <ProcessUserInput+0x4f2>
  {
    for (i=0; i<4; i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 80020fe:	e014      	b.n	800212a <ProcessUserInput+0x4e6>
      ShowAll(&Controller[i], true);
 8002100:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002104:	f44f 62cc 	mov.w	r2, #1632	; 0x660
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002110:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	4413      	add	r3, r2
 8002118:	2101      	movs	r1, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fd04 	bl	8002b28 <ShowAll>
    for (i=0; i<4; i++)
 8002120:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002124:	3301      	adds	r3, #1
 8002126:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 800212a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800212e:	2b03      	cmp	r3, #3
 8002130:	d9e6      	bls.n	8002100 <ProcessUserInput+0x4bc>
    return;
 8002132:	f000 bc18 	b.w	8002966 <ProcessUserInput+0xd22>
  }
  //Print the Status all the Controllers in non readable format
  if (strcmp((char*) buffer, "r") == 0)
 8002136:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800213a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800213e:	499c      	ldr	r1, [pc, #624]	; (80023b0 <ProcessUserInput+0x76c>)
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	f7fe f855 	bl	80001f0 <strcmp>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d11d      	bne.n	8002188 <ProcessUserInput+0x544>
  {
    for (i=0; i<4; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8002152:	e014      	b.n	800217e <ProcessUserInput+0x53a>
      ShowAll(&Controller[i], false);
 8002154:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002158:	f44f 62cc 	mov.w	r2, #1632	; 0x660
 800215c:	fb02 f303 	mul.w	r3, r2, r3
 8002160:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002164:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	4413      	add	r3, r2
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fcda 	bl	8002b28 <ShowAll>
    for (i=0; i<4; i++)
 8002174:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002178:	3301      	adds	r3, #1
 800217a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 800217e:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8002182:	2b03      	cmp	r3, #3
 8002184:	d9e6      	bls.n	8002154 <ProcessUserInput+0x510>
    return;
 8002186:	e3ee      	b.n	8002966 <ProcessUserInput+0xd22>
  }
  //Save the Configuration of a controller
  if (strcmp((char*) buffer, "s") == 0)
 8002188:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800218c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002190:	4988      	ldr	r1, [pc, #544]	; (80023b4 <ProcessUserInput+0x770>)
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	f7fe f82c 	bl	80001f0 <strcmp>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <ProcessUserInput+0x562>
  {

    USBSendString("Cannot Save, No EEPROM.\n");
 800219e:	4886      	ldr	r0, [pc, #536]	; (80023b8 <ProcessUserInput+0x774>)
 80021a0:	f001 f86c 	bl	800327c <USBSendString>
    return;
 80021a4:	e3df      	b.n	8002966 <ProcessUserInput+0xd22>
  }

  if (strcmp((char*) buffer, "l") == 0)
 80021a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ae:	4983      	ldr	r1, [pc, #524]	; (80023bc <ProcessUserInput+0x778>)
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	f7fe f81d 	bl	80001f0 <strcmp>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d103      	bne.n	80021c4 <ProcessUserInput+0x580>
  {
    USBSendString("Cannot load Configuration, No EEPROM.\n");
 80021bc:	4880      	ldr	r0, [pc, #512]	; (80023c0 <ProcessUserInput+0x77c>)
 80021be:	f001 f85d 	bl	800327c <USBSendString>
    return;
 80021c2:	e3d0      	b.n	8002966 <ProcessUserInput+0xd22>
  }

  if (strcmp((char*) buffer, "b") == 0)
 80021c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021cc:	497d      	ldr	r1, [pc, #500]	; (80023c4 <ProcessUserInput+0x780>)
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	f7fe f80e 	bl	80001f0 <strcmp>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <ProcessUserInput+0x59a>
  {
    NVIC_SystemReset();
 80021da:	f7ff fd1d 	bl	8001c18 <__NVIC_SystemReset>
  }

  if (strcmp((char*) buffer, "w") == 0)
 80021de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021e6:	4978      	ldr	r1, [pc, #480]	; (80023c8 <ProcessUserInput+0x784>)
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	f7fe f801 	bl	80001f0 <strcmp>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10a      	bne.n	800220a <ProcessUserInput+0x5c6>
  {
    Controller_WipeConfig(Controller);
 80021f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	f000 ffdf 	bl	80031c0 <Controller_WipeConfig>
    USBSendString("Configuration wiped.\n");
 8002202:	4872      	ldr	r0, [pc, #456]	; (80023cc <ProcessUserInput+0x788>)
 8002204:	f001 f83a 	bl	800327c <USBSendString>
    return;
 8002208:	e3ad      	b.n	8002966 <ProcessUserInput+0xd22>
  }

  if ((strcmp((char*) buffer, "1") == 0) || (strcmp((char*) buffer, "c1") == 0))
 800220a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800220e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002212:	496f      	ldr	r1, [pc, #444]	; (80023d0 <ProcessUserInput+0x78c>)
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	f7fd ffeb 	bl	80001f0 <strcmp>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <ProcessUserInput+0x5f2>
 8002220:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002224:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002228:	496a      	ldr	r1, [pc, #424]	; (80023d4 <ProcessUserInput+0x790>)
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	f7fd ffe0 	bl	80001f0 <strcmp>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d113      	bne.n	800225e <ProcessUserInput+0x61a>
  {
    UI_Controller = 0;
 8002236:	4b68      	ldr	r3, [pc, #416]	; (80023d8 <ProcessUserInput+0x794>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(&Controller[UI_Controller]);
 800223c:	4b66      	ldr	r3, [pc, #408]	; (80023d8 <ProcessUserInput+0x794>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800224e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	4413      	add	r3, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fb9a 	bl	8002990 <ShowControllerConfig>
    return;
 800225c:	e383      	b.n	8002966 <ProcessUserInput+0xd22>
  }

  if ((strcmp((char*) buffer, "2") == 0) || (strcmp((char*) buffer, "c2") == 0))
 800225e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002262:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002266:	495d      	ldr	r1, [pc, #372]	; (80023dc <ProcessUserInput+0x798>)
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	f7fd ffc1 	bl	80001f0 <strcmp>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <ProcessUserInput+0x646>
 8002274:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002278:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800227c:	4958      	ldr	r1, [pc, #352]	; (80023e0 <ProcessUserInput+0x79c>)
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	f7fd ffb6 	bl	80001f0 <strcmp>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d113      	bne.n	80022b2 <ProcessUserInput+0x66e>
  {
    UI_Controller = 1;
 800228a:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <ProcessUserInput+0x794>)
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(&Controller[UI_Controller]);
 8002290:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <ProcessUserInput+0x794>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80022a2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fb70 	bl	8002990 <ShowControllerConfig>
    return;
 80022b0:	e359      	b.n	8002966 <ProcessUserInput+0xd22>
  }

  if ((strcmp((char*) buffer, "3") == 0) || (strcmp((char*) buffer, "c3") == 0))
 80022b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022ba:	494a      	ldr	r1, [pc, #296]	; (80023e4 <ProcessUserInput+0x7a0>)
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	f7fd ff97 	bl	80001f0 <strcmp>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <ProcessUserInput+0x69a>
 80022c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022d0:	4945      	ldr	r1, [pc, #276]	; (80023e8 <ProcessUserInput+0x7a4>)
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	f7fd ff8c 	bl	80001f0 <strcmp>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d113      	bne.n	8002306 <ProcessUserInput+0x6c2>
  {
    UI_Controller = 2;
 80022de:	4b3e      	ldr	r3, [pc, #248]	; (80023d8 <ProcessUserInput+0x794>)
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(&Controller[UI_Controller]);
 80022e4:	4b3c      	ldr	r3, [pc, #240]	; (80023d8 <ProcessUserInput+0x794>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80022f6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4413      	add	r3, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fb46 	bl	8002990 <ShowControllerConfig>
    return;
 8002304:	e32f      	b.n	8002966 <ProcessUserInput+0xd22>
  }

  if ((strcmp((char*) buffer, "4") == 0) || (strcmp((char*) buffer, "c4") == 0))
 8002306:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800230a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800230e:	4937      	ldr	r1, [pc, #220]	; (80023ec <ProcessUserInput+0x7a8>)
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	f7fd ff6d 	bl	80001f0 <strcmp>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <ProcessUserInput+0x6ee>
 800231c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002320:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002324:	4932      	ldr	r1, [pc, #200]	; (80023f0 <ProcessUserInput+0x7ac>)
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	f7fd ff62 	bl	80001f0 <strcmp>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d113      	bne.n	800235a <ProcessUserInput+0x716>
  {
    UI_Controller = 3;
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <ProcessUserInput+0x794>)
 8002334:	2203      	movs	r2, #3
 8002336:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(&Controller[UI_Controller]);
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <ProcessUserInput+0x794>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800234a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	4413      	add	r3, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fb1c 	bl	8002990 <ShowControllerConfig>
    return;
 8002358:	e305      	b.n	8002966 <ProcessUserInput+0xd22>
  }

  if (UI_Controller == 9)
 800235a:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <ProcessUserInput+0x794>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b09      	cmp	r3, #9
 8002360:	d103      	bne.n	800236a <ProcessUserInput+0x726>
  {
    USBSendString("No controller selected.\n");
 8002362:	4824      	ldr	r0, [pc, #144]	; (80023f4 <ProcessUserInput+0x7b0>)
 8002364:	f000 ff8a 	bl	800327c <USBSendString>
    return;
 8002368:	e2fd      	b.n	8002966 <ProcessUserInput+0xd22>
  }


  if (strcmp((char*) buffer, "e") == 0)
 800236a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800236e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002372:	4921      	ldr	r1, [pc, #132]	; (80023f8 <ProcessUserInput+0x7b4>)
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	f7fd ff3b 	bl	80001f0 <strcmp>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d13f      	bne.n	8002400 <ProcessUserInput+0x7bc>
  {
    USBSendString("Controller enabled.\n");
 8002380:	481e      	ldr	r0, [pc, #120]	; (80023fc <ProcessUserInput+0x7b8>)
 8002382:	f000 ff7b 	bl	800327c <USBSendString>
    Controller[UI_Controller].PID.Config.Enabled = true;
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <ProcessUserInput+0x794>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002398:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 80023a6:	e2de      	b.n	8002966 <ProcessUserInput+0xd22>
 80023a8:	08014598 	.word	0x08014598
 80023ac:	08014af0 	.word	0x08014af0
 80023b0:	080145a4 	.word	0x080145a4
 80023b4:	08014578 	.word	0x08014578
 80023b8:	08014af4 	.word	0x08014af4
 80023bc:	08014524 	.word	0x08014524
 80023c0:	08014b10 	.word	0x08014b10
 80023c4:	080145ac 	.word	0x080145ac
 80023c8:	080145b8 	.word	0x080145b8
 80023cc:	08014b38 	.word	0x08014b38
 80023d0:	08014b50 	.word	0x08014b50
 80023d4:	08014b54 	.word	0x08014b54
 80023d8:	2000000c 	.word	0x2000000c
 80023dc:	08014b58 	.word	0x08014b58
 80023e0:	08014b5c 	.word	0x08014b5c
 80023e4:	08014b60 	.word	0x08014b60
 80023e8:	08014b64 	.word	0x08014b64
 80023ec:	08014b68 	.word	0x08014b68
 80023f0:	08014b6c 	.word	0x08014b6c
 80023f4:	08014ad4 	.word	0x08014ad4
 80023f8:	08014b70 	.word	0x08014b70
 80023fc:	08014b74 	.word	0x08014b74
  }

  if (strcmp((char*) buffer, "d") == 0)
 8002400:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002404:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002408:	49cb      	ldr	r1, [pc, #812]	; (8002738 <ProcessUserInput+0xaf4>)
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	f7fd fef0 	bl	80001f0 <strcmp>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d113      	bne.n	800243e <ProcessUserInput+0x7fa>
  {
    USBSendString("Controller disabled.\n");
 8002416:	48c9      	ldr	r0, [pc, #804]	; (800273c <ProcessUserInput+0xaf8>)
 8002418:	f000 ff30 	bl	800327c <USBSendString>
    Controller[UI_Controller].PID.Config.Enabled = false;
 800241c:	4bc8      	ldr	r3, [pc, #800]	; (8002740 <ProcessUserInput+0xafc>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800242e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	4413      	add	r3, r2
 8002436:	2200      	movs	r2, #0
 8002438:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 800243c:	e293      	b.n	8002966 <ProcessUserInput+0xd22>
  }

  if (sscanf((char*) buffer, "%c%f", &c, &f) == 2)
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	f107 0217 	add.w	r2, r7, #23
 8002446:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800244a:	f5a1 7088 	sub.w	r0, r1, #272	; 0x110
 800244e:	49bd      	ldr	r1, [pc, #756]	; (8002744 <ProcessUserInput+0xb00>)
 8002450:	6800      	ldr	r0, [r0, #0]
 8002452:	f00d fe19 	bl	8010088 <siscanf>
 8002456:	4603      	mov	r3, r0
 8002458:	2b02      	cmp	r3, #2
 800245a:	f040 827d 	bne.w	8002958 <ProcessUserInput+0xd14>
  {
    u = (uint8_t) f;
 800245e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800246e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002472:	793b      	ldrb	r3, [r7, #4]
 8002474:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    switch (c)
 8002478:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800247c:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	3b61      	subs	r3, #97	; 0x61
 8002484:	2b13      	cmp	r3, #19
 8002486:	f200 8269 	bhi.w	800295c <ProcessUserInput+0xd18>
 800248a:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <ProcessUserInput+0x84c>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	080024e9 	.word	0x080024e9
 8002494:	0800295d 	.word	0x0800295d
 8002498:	080024e1 	.word	0x080024e1
 800249c:	080026bd 	.word	0x080026bd
 80024a0:	0800295d 	.word	0x0800295d
 80024a4:	08002775 	.word	0x08002775
 80024a8:	0800295d 	.word	0x0800295d
 80024ac:	080028af 	.word	0x080028af
 80024b0:	08002643 	.word	0x08002643
 80024b4:	0800295d 	.word	0x0800295d
 80024b8:	0800295d 	.word	0x0800295d
 80024bc:	08002835 	.word	0x08002835
 80024c0:	0800295d 	.word	0x0800295d
 80024c4:	0800295d 	.word	0x0800295d
 80024c8:	0800295d 	.word	0x0800295d
 80024cc:	080025c9 	.word	0x080025c9
 80024d0:	0800295d 	.word	0x0800295d
 80024d4:	0800295d 	.word	0x0800295d
 80024d8:	0800295d 	.word	0x0800295d
 80024dc:	080028fd 	.word	0x080028fd
    {
      case 'c':
        // we shouldn't get here if a valid number was used
        USBSendString("Invalid controller number.\n");
 80024e0:	4899      	ldr	r0, [pc, #612]	; (8002748 <ProcessUserInput+0xb04>)
 80024e2:	f000 fecb 	bl	800327c <USBSendString>
        return;
 80024e6:	e23e      	b.n	8002966 <ProcessUserInput+0xd22>
        break;
      case 'a':
        switch (u)
 80024e8:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80024ec:	2b0b      	cmp	r3, #11
 80024ee:	d867      	bhi.n	80025c0 <ProcessUserInput+0x97c>
 80024f0:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <ProcessUserInput+0x8b4>)
 80024f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f6:	bf00      	nop
 80024f8:	08002529 	.word	0x08002529
 80024fc:	08002575 	.word	0x08002575
 8002500:	080025c1 	.word	0x080025c1
 8002504:	080025c1 	.word	0x080025c1
 8002508:	080025c1 	.word	0x080025c1
 800250c:	080025c1 	.word	0x080025c1
 8002510:	080025c1 	.word	0x080025c1
 8002514:	080025c1 	.word	0x080025c1
 8002518:	080025c1 	.word	0x080025c1
 800251c:	080025c1 	.word	0x080025c1
 8002520:	0800254f 	.word	0x0800254f
 8002524:	0800259b 	.word	0x0800259b
        {
          case 0:
            USBSendString("Address set to 0b 10 01 00 0x.\n");
 8002528:	4888      	ldr	r0, [pc, #544]	; (800274c <ProcessUserInput+0xb08>)
 800252a:	f000 fea7 	bl	800327c <USBSendString>
            Controller[UI_Controller].Sensor.Address = 0b1001000;
 800252e:	4b84      	ldr	r3, [pc, #528]	; (8002740 <ProcessUserInput+0xafc>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002540:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4413      	add	r3, r2
 8002548:	2248      	movs	r2, #72	; 0x48
 800254a:	721a      	strb	r2, [r3, #8]
            return;
 800254c:	e20b      	b.n	8002966 <ProcessUserInput+0xd22>
            break;
          case 10:
            USBSendString("Address set to 0b 10 01 01 0x.\n");
 800254e:	4880      	ldr	r0, [pc, #512]	; (8002750 <ProcessUserInput+0xb0c>)
 8002550:	f000 fe94 	bl	800327c <USBSendString>
            Controller[UI_Controller].Sensor.Address = 0b1001010;
 8002554:	4b7a      	ldr	r3, [pc, #488]	; (8002740 <ProcessUserInput+0xafc>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002566:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	4413      	add	r3, r2
 800256e:	224a      	movs	r2, #74	; 0x4a
 8002570:	721a      	strb	r2, [r3, #8]
            return;
 8002572:	e1f8      	b.n	8002966 <ProcessUserInput+0xd22>
            break;
          case 1:
            USBSendString("Address set to 0b 10 01 00 1x.\n");
 8002574:	4877      	ldr	r0, [pc, #476]	; (8002754 <ProcessUserInput+0xb10>)
 8002576:	f000 fe81 	bl	800327c <USBSendString>
            Controller[UI_Controller].Sensor.Address = 0b1001001;
 800257a:	4b71      	ldr	r3, [pc, #452]	; (8002740 <ProcessUserInput+0xafc>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800258c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	4413      	add	r3, r2
 8002594:	2249      	movs	r2, #73	; 0x49
 8002596:	721a      	strb	r2, [r3, #8]
            return;
 8002598:	e1e5      	b.n	8002966 <ProcessUserInput+0xd22>
            break;
          case 11:
            USBSendString("Address set to 0b 10 01 01 1x.\n");
 800259a:	486f      	ldr	r0, [pc, #444]	; (8002758 <ProcessUserInput+0xb14>)
 800259c:	f000 fe6e 	bl	800327c <USBSendString>
            Controller[UI_Controller].Sensor.Address = 0b1001011;
 80025a0:	4b67      	ldr	r3, [pc, #412]	; (8002740 <ProcessUserInput+0xafc>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80025b2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	224b      	movs	r2, #75	; 0x4b
 80025bc:	721a      	strb	r2, [r3, #8]
            return;
 80025be:	e1d2      	b.n	8002966 <ProcessUserInput+0xd22>
            break;
          default:
            USBSendString("Invalid Address.\n");
 80025c0:	4866      	ldr	r0, [pc, #408]	; (800275c <ProcessUserInput+0xb18>)
 80025c2:	f000 fe5b 	bl	800327c <USBSendString>
            return;
 80025c6:	e1ce      	b.n	8002966 <ProcessUserInput+0xd22>
        Controller[UI_Controller].Sensor.Configured = false;
        Controller[UI_Controller].Sensor.State = 0;
        Controller[UI_Controller].PID.IntegratorCount = 0;
        break;
      case 'p':
        if (f < 0)
 80025c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025dc:	d503      	bpl.n	80025e6 <ProcessUserInput+0x9a2>
          USBSendString("Invalid value.");
 80025de:	4860      	ldr	r0, [pc, #384]	; (8002760 <ProcessUserInput+0xb1c>)
 80025e0:	f000 fe4c 	bl	800327c <USBSendString>
        {
          snprintf(output, 200, "kp set to %f.\n", f);
          USBSendString(output);
          Controller[UI_Controller].PID.Config.Kp = f;
        }
        return;
 80025e4:	e1bf      	b.n	8002966 <ProcessUserInput+0xd22>
          snprintf(output, 200, "kp set to %f.\n", f);
 80025e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd ffc9 	bl	8000588 <__aeabi_f2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	f107 0018 	add.w	r0, r7, #24
 80025fe:	e9cd 2300 	strd	r2, r3, [sp]
 8002602:	4a58      	ldr	r2, [pc, #352]	; (8002764 <ProcessUserInput+0xb20>)
 8002604:	21c8      	movs	r1, #200	; 0xc8
 8002606:	f00d fceb 	bl	800ffe0 <sniprintf>
          USBSendString(output);
 800260a:	f107 0318 	add.w	r3, r7, #24
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fe34 	bl	800327c <USBSendString>
          Controller[UI_Controller].PID.Config.Kp = f;
 8002614:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <ProcessUserInput+0xafc>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002626:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	18d1      	adds	r1, r2, r3
 800262e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	460b      	mov	r3, r1
 800263a:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 800263e:	601a      	str	r2, [r3, #0]
        return;
 8002640:	e191      	b.n	8002966 <ProcessUserInput+0xd22>
        break;

      case 'i':
        if (f < 0)
 8002642:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002656:	d503      	bpl.n	8002660 <ProcessUserInput+0xa1c>
          USBSendString("Invalid value.");
 8002658:	4841      	ldr	r0, [pc, #260]	; (8002760 <ProcessUserInput+0xb1c>)
 800265a:	f000 fe0f 	bl	800327c <USBSendString>
        {
          snprintf(output, 200, "ki set to %f.\n", f);
          USBSendString(output);
          Controller[UI_Controller].PID.Config.Ki = f;
        }
        return;
 800265e:	e182      	b.n	8002966 <ProcessUserInput+0xd22>
          snprintf(output, 200, "ki set to %f.\n", f);
 8002660:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff8c 	bl	8000588 <__aeabi_f2d>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	f107 0018 	add.w	r0, r7, #24
 8002678:	e9cd 2300 	strd	r2, r3, [sp]
 800267c:	4a3a      	ldr	r2, [pc, #232]	; (8002768 <ProcessUserInput+0xb24>)
 800267e:	21c8      	movs	r1, #200	; 0xc8
 8002680:	f00d fcae 	bl	800ffe0 <sniprintf>
          USBSendString(output);
 8002684:	f107 0318 	add.w	r3, r7, #24
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fdf7 	bl	800327c <USBSendString>
          Controller[UI_Controller].PID.Config.Ki = f;
 800268e:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <ProcessUserInput+0xafc>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80026a0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	18d1      	adds	r1, r2, r3
 80026a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	460b      	mov	r3, r1
 80026b4:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 80026b8:	601a      	str	r2, [r3, #0]
        return;
 80026ba:	e154      	b.n	8002966 <ProcessUserInput+0xd22>
        break;

      case 'd':
        if (f < 0)
 80026bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	d503      	bpl.n	80026da <ProcessUserInput+0xa96>
          USBSendString("Invalid value.");
 80026d2:	4823      	ldr	r0, [pc, #140]	; (8002760 <ProcessUserInput+0xb1c>)
 80026d4:	f000 fdd2 	bl	800327c <USBSendString>
        {
          snprintf(output, 200, "kd set to %f.\n", f);
          USBSendString(output);
          Controller[UI_Controller].PID.Config.Kd = f;
        }
        return;
 80026d8:	e145      	b.n	8002966 <ProcessUserInput+0xd22>
          snprintf(output, 200, "kd set to %f.\n", f);
 80026da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd ff4f 	bl	8000588 <__aeabi_f2d>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	f107 0018 	add.w	r0, r7, #24
 80026f2:	e9cd 2300 	strd	r2, r3, [sp]
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <ProcessUserInput+0xb28>)
 80026f8:	21c8      	movs	r1, #200	; 0xc8
 80026fa:	f00d fc71 	bl	800ffe0 <sniprintf>
          USBSendString(output);
 80026fe:	f107 0318 	add.w	r3, r7, #24
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fdba 	bl	800327c <USBSendString>
          Controller[UI_Controller].PID.Config.Kd = f;
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <ProcessUserInput+0xafc>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800271a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	18d1      	adds	r1, r2, r3
 8002722:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	460b      	mov	r3, r1
 800272e:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002732:	601a      	str	r2, [r3, #0]
        return;
 8002734:	e117      	b.n	8002966 <ProcessUserInput+0xd22>
 8002736:	bf00      	nop
 8002738:	08014514 	.word	0x08014514
 800273c:	08014b8c 	.word	0x08014b8c
 8002740:	2000000c 	.word	0x2000000c
 8002744:	08014ba4 	.word	0x08014ba4
 8002748:	08014bac 	.word	0x08014bac
 800274c:	08014bc8 	.word	0x08014bc8
 8002750:	08014be8 	.word	0x08014be8
 8002754:	08014c08 	.word	0x08014c08
 8002758:	08014c28 	.word	0x08014c28
 800275c:	08014c48 	.word	0x08014c48
 8002760:	08014c5c 	.word	0x08014c5c
 8002764:	08014c6c 	.word	0x08014c6c
 8002768:	08014c7c 	.word	0x08014c7c
 800276c:	08014c8c 	.word	0x08014c8c
 8002770:	44160000 	.word	0x44160000
        break;

      case 'f':
        if ((f < 0) || (f > 600))
 8002774:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002788:	d40c      	bmi.n	80027a4 <ProcessUserInput+0xb60>
 800278a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800278e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002792:	edd3 7a00 	vldr	s15, [r3]
 8002796:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8002770 <ProcessUserInput+0xb2c>
 800279a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a2:	dd03      	ble.n	80027ac <ProcessUserInput+0xb68>
          USBSendString("Invalid value.");
 80027a4:	4872      	ldr	r0, [pc, #456]	; (8002970 <ProcessUserInput+0xd2c>)
 80027a6:	f000 fd69 	bl	800327c <USBSendString>
        {
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
          USBSendString(output);
          Controller[UI_Controller].PID.Config.Frequency = f;
        }
        return;
 80027aa:	e0dc      	b.n	8002966 <ProcessUserInput+0xd22>
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
 80027ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fee6 	bl	8000588 <__aeabi_f2d>
 80027bc:	4604      	mov	r4, r0
 80027be:	460d      	mov	r5, r1
 80027c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002974 <ProcessUserInput+0xd30>
 80027d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027d4:	ee16 0a90 	vmov	r0, s13
 80027d8:	f7fd fed6 	bl	8000588 <__aeabi_f2d>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	f107 0018 	add.w	r0, r7, #24
 80027e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027e8:	e9cd 4500 	strd	r4, r5, [sp]
 80027ec:	4a62      	ldr	r2, [pc, #392]	; (8002978 <ProcessUserInput+0xd34>)
 80027ee:	21c8      	movs	r1, #200	; 0xc8
 80027f0:	f00d fbf6 	bl	800ffe0 <sniprintf>
          USBSendString(output);
 80027f4:	f107 0318 	add.w	r3, r7, #24
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fd3f 	bl	800327c <USBSendString>
          Controller[UI_Controller].PID.Config.Frequency = f;
 80027fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	4b5c      	ldr	r3, [pc, #368]	; (800297c <ProcessUserInput+0xd38>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8002814:	fb02 f303 	mul.w	r3, r2, r3
 8002818:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800281c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	4413      	add	r3, r2
 8002824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002828:	ee17 2a90 	vmov	r2, s15
 800282c:	b292      	uxth	r2, r2
 800282e:	f8a3 265e 	strh.w	r2, [r3, #1630]	; 0x65e
        return;
 8002832:	e098      	b.n	8002966 <ProcessUserInput+0xd22>
        break;


      case 'l':
        if (f < 0)
 8002834:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	d503      	bpl.n	8002852 <ProcessUserInput+0xc0e>
          USBSendString("Invalid value.");
 800284a:	4849      	ldr	r0, [pc, #292]	; (8002970 <ProcessUserInput+0xd2c>)
 800284c:	f000 fd16 	bl	800327c <USBSendString>
        {
          snprintf(output, 200, "Li set to %f.\n", f);
          USBSendString(output);
          Controller[UI_Controller].PID.Config.Li = f;
        }
        return;
 8002850:	e089      	b.n	8002966 <ProcessUserInput+0xd22>
          snprintf(output, 200, "Li set to %f.\n", f);
 8002852:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fd fe93 	bl	8000588 <__aeabi_f2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	f107 0018 	add.w	r0, r7, #24
 800286a:	e9cd 2300 	strd	r2, r3, [sp]
 800286e:	4a44      	ldr	r2, [pc, #272]	; (8002980 <ProcessUserInput+0xd3c>)
 8002870:	21c8      	movs	r1, #200	; 0xc8
 8002872:	f00d fbb5 	bl	800ffe0 <sniprintf>
          USBSendString(output);
 8002876:	f107 0318 	add.w	r3, r7, #24
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fcfe 	bl	800327c <USBSendString>
          Controller[UI_Controller].PID.Config.Li = f;
 8002880:	4b3e      	ldr	r3, [pc, #248]	; (800297c <ProcessUserInput+0xd38>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002892:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	18d1      	adds	r1, r2, r3
 800289a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800289e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	460b      	mov	r3, r1
 80028a6:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 80028aa:	601a      	str	r2, [r3, #0]
        return;
 80028ac:	e05b      	b.n	8002966 <ProcessUserInput+0xd22>
        break;
      case 'h':
        if (u == 0)
 80028ae:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d103      	bne.n	80028be <ProcessUserInput+0xc7a>
          USBSendString("Invalid value.");
 80028b6:	482e      	ldr	r0, [pc, #184]	; (8002970 <ProcessUserInput+0xd2c>)
 80028b8:	f000 fce0 	bl	800327c <USBSendString>
        {
          snprintf(output, 200, "History set to %u.\n", u);
          USBSendString(output);
          Controller[UI_Controller].PID.Config.History = u;
        }
        return;
 80028bc:	e053      	b.n	8002966 <ProcessUserInput+0xd22>
          snprintf(output, 200, "History set to %u.\n", u);
 80028be:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80028c2:	f107 0018 	add.w	r0, r7, #24
 80028c6:	4a2f      	ldr	r2, [pc, #188]	; (8002984 <ProcessUserInput+0xd40>)
 80028c8:	21c8      	movs	r1, #200	; 0xc8
 80028ca:	f00d fb89 	bl	800ffe0 <sniprintf>
          USBSendString(output);
 80028ce:	f107 0318 	add.w	r3, r7, #24
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fcd2 	bl	800327c <USBSendString>
          Controller[UI_Controller].PID.Config.History = u;
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <ProcessUserInput+0xd38>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80028ea:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 80028f6:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
        return;
 80028fa:	e034      	b.n	8002966 <ProcessUserInput+0xd22>
        break;

      case 't':
        snprintf(output, 200, "Target temperature set to %f.\n", f);
 80028fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fe3e 	bl	8000588 <__aeabi_f2d>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	f107 0018 	add.w	r0, r7, #24
 8002914:	e9cd 2300 	strd	r2, r3, [sp]
 8002918:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <ProcessUserInput+0xd44>)
 800291a:	21c8      	movs	r1, #200	; 0xc8
 800291c:	f00d fb60 	bl	800ffe0 <sniprintf>
        USBSendString(output);
 8002920:	f107 0318 	add.w	r3, r7, #24
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fca9 	bl	800327c <USBSendString>
        Controller[UI_Controller].PID.Config.TargetP = f;
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <ProcessUserInput+0xd38>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8002934:	fb02 f303 	mul.w	r3, r2, r3
 8002938:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800293c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	18d1      	adds	r1, r2, r3
 8002944:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	460b      	mov	r3, r1
 8002950:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002954:	601a      	str	r2, [r3, #0]
        return;
 8002956:	e006      	b.n	8002966 <ProcessUserInput+0xd22>
        break;

      default:
        break;
    }
  }
 8002958:	bf00      	nop
 800295a:	e000      	b.n	800295e <ProcessUserInput+0xd1a>
        break;
 800295c:	bf00      	nop
  USBSendString("Unknown command.\n");
 800295e:	480b      	ldr	r0, [pc, #44]	; (800298c <ProcessUserInput+0xd48>)
 8002960:	f000 fc8c 	bl	800327c <USBSendString>
  return;
 8002964:	bf00      	nop
}
 8002966:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800296a:	46bd      	mov	sp, r7
 800296c:	bdb0      	pop	{r4, r5, r7, pc}
 800296e:	bf00      	nop
 8002970:	08014c5c 	.word	0x08014c5c
 8002974:	42200000 	.word	0x42200000
 8002978:	08014c9c 	.word	0x08014c9c
 800297c:	2000000c 	.word	0x2000000c
 8002980:	08014cc0 	.word	0x08014cc0
 8002984:	08014cd0 	.word	0x08014cd0
 8002988:	08014ce4 	.word	0x08014ce4
 800298c:	08014d04 	.word	0x08014d04

08002990 <ShowControllerConfig>:

//Show the Configuration of a Controller
void ShowControllerConfig(struct sController* Controller)
{
 8002990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002994:	b0d1      	sub	sp, #324	; 0x144
 8002996:	af0c      	add	r7, sp, #48	; 0x30
 8002998:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800299c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029a0:	6018      	str	r0, [r3, #0]
  char s1[12];
  char buffer[250];
  FormatTemperature(s1, Controller->PID.Config.TargetP);
 80029a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fde8 	bl	8000588 <__aeabi_f2d>
 80029b8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80029bc:	ec41 0b10 	vmov	d0, r0, r1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fb67 	bl	8003094 <FormatTemperature>
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80029c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	603b      	str	r3, [r7, #0]
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80029d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 80029e2:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fdcf 	bl	8000588 <__aeabi_f2d>
 80029ea:	4604      	mov	r4, r0
 80029ec:	460d      	mov	r5, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80029ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80029fc:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fdc2 	bl	8000588 <__aeabi_f2d>
 8002a04:	4680      	mov	r8, r0
 8002a06:	4689      	mov	r9, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002a08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002a16:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fdb5 	bl	8000588 <__aeabi_f2d>
 8002a1e:	4682      	mov	sl, r0
 8002a20:	468b      	mov	fp, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002a22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002a30:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fda8 	bl	8000588 <__aeabi_f2d>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002a3c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002a40:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002a44:	6809      	ldr	r1, [r1, #0]
 8002a46:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002a4a:	460e      	mov	r6, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002a4c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002a50:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002a54:	6809      	ldr	r1, [r1, #0]
 8002a56:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002a5a:	f107 0008 	add.w	r0, r7, #8
 8002a5e:	910a      	str	r1, [sp, #40]	; 0x28
 8002a60:	9609      	str	r6, [sp, #36]	; 0x24
 8002a62:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002a66:	9108      	str	r1, [sp, #32]
 8002a68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002a6c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002a70:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a74:	e9cd 4500 	strd	r4, r5, [sp]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <ShowControllerConfig+0x178>)
 8002a7c:	21c8      	movs	r1, #200	; 0xc8
 8002a7e:	f00d faaf 	bl	800ffe0 <sniprintf>
  USBSendString(buffer);
 8002a82:	f107 0308 	add.w	r3, r7, #8
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fbf8 	bl	800327c <USBSendString>
  switch (Controller->Sensor.Address & 0x03)
 8002a8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	7a1b      	ldrb	r3, [r3, #8]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d81b      	bhi.n	8002ad8 <ShowControllerConfig+0x148>
 8002aa0:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <ShowControllerConfig+0x118>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002ab9 	.word	0x08002ab9
 8002aac:	08002ac1 	.word	0x08002ac1
 8002ab0:	08002ac9 	.word	0x08002ac9
 8002ab4:	08002ad1 	.word	0x08002ad1
  {
    case 0:
      USBSendString("00");
 8002ab8:	4814      	ldr	r0, [pc, #80]	; (8002b0c <ShowControllerConfig+0x17c>)
 8002aba:	f000 fbdf 	bl	800327c <USBSendString>
      break;
 8002abe:	e00c      	b.n	8002ada <ShowControllerConfig+0x14a>
    case 1:
      USBSendString("01");
 8002ac0:	4813      	ldr	r0, [pc, #76]	; (8002b10 <ShowControllerConfig+0x180>)
 8002ac2:	f000 fbdb 	bl	800327c <USBSendString>
      break;
 8002ac6:	e008      	b.n	8002ada <ShowControllerConfig+0x14a>
    case 2:
      USBSendString("10");
 8002ac8:	4812      	ldr	r0, [pc, #72]	; (8002b14 <ShowControllerConfig+0x184>)
 8002aca:	f000 fbd7 	bl	800327c <USBSendString>
      break;
 8002ace:	e004      	b.n	8002ada <ShowControllerConfig+0x14a>
    case 3:
      USBSendString("11");
 8002ad0:	4811      	ldr	r0, [pc, #68]	; (8002b18 <ShowControllerConfig+0x188>)
 8002ad2:	f000 fbd3 	bl	800327c <USBSendString>
      break;
 8002ad6:	e000      	b.n	8002ada <ShowControllerConfig+0x14a>
    default:
      break;
 8002ad8:	bf00      	nop
  }
  if (Controller->PID.Config.Enabled)
 8002ada:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ade:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <ShowControllerConfig+0x164>
    USBSendString("  ENABLED\n");
 8002aec:	480b      	ldr	r0, [pc, #44]	; (8002b1c <ShowControllerConfig+0x18c>)
 8002aee:	f000 fbc5 	bl	800327c <USBSendString>
  else
    USBSendString("  DISABLED\n");
}
 8002af2:	e002      	b.n	8002afa <ShowControllerConfig+0x16a>
    USBSendString("  DISABLED\n");
 8002af4:	480a      	ldr	r0, [pc, #40]	; (8002b20 <ShowControllerConfig+0x190>)
 8002af6:	f000 fbc1 	bl	800327c <USBSendString>
}
 8002afa:	bf00      	nop
 8002afc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002b00:	46bd      	mov	sp, r7
 8002b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b06:	bf00      	nop
 8002b08:	08014d18 	.word	0x08014d18
 8002b0c:	08014d7c 	.word	0x08014d7c
 8002b10:	08014d80 	.word	0x08014d80
 8002b14:	08014d84 	.word	0x08014d84
 8002b18:	08014d88 	.word	0x08014d88
 8002b1c:	08014d8c 	.word	0x08014d8c
 8002b20:	08014d98 	.word	0x08014d98
 8002b24:	00000000 	.word	0x00000000

08002b28 <ShowAll>:
//Show the Status of a Controller
//@brief Show the Status of a Controller
//@param Controller The Controller to show
//@param readable If true, show the status in human readable form
void ShowAll(struct sController* Controller, bool readable)
{
 8002b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2c:	b0bb      	sub	sp, #236	; 0xec
 8002b2e:	af18      	add	r7, sp, #96	; 0x60
 8002b30:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002b32:	460b      	mov	r3, r1
 8002b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    uint32_t ADCVal = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t i;
    char target[12];
    FormatTemperature(target, Controller->PID.Config.TargetP);
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fd1e 	bl	8000588 <__aeabi_f2d>
 8002b4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b50:	ec41 0b10 	vmov	d0, r0, r1
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fa9d 	bl	8003094 <FormatTemperature>
    char address[3];
    switch (Controller->Sensor.Address & 0x03)
 8002b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5c:	7a1b      	ldrb	r3, [r3, #8]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d832      	bhi.n	8002bcc <ShowAll+0xa4>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <ShowAll+0x44>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002b91 	.word	0x08002b91
 8002b74:	08002ba5 	.word	0x08002ba5
 8002b78:	08002bb9 	.word	0x08002bb9
    {
      case 0: strcpy(address, "00"); break;
 8002b7c:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <ShowAll+0x1a0>)
 8002b7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	4611      	mov	r1, r2
 8002b86:	8019      	strh	r1, [r3, #0]
 8002b88:	3302      	adds	r3, #2
 8002b8a:	0c12      	lsrs	r2, r2, #16
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e01e      	b.n	8002bce <ShowAll+0xa6>
      case 1: strcpy(address, "01"); break;
 8002b90:	4a4e      	ldr	r2, [pc, #312]	; (8002ccc <ShowAll+0x1a4>)
 8002b92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	8019      	strh	r1, [r3, #0]
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	0c12      	lsrs	r2, r2, #16
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e014      	b.n	8002bce <ShowAll+0xa6>
      case 2: strcpy(address, "10"); break;
 8002ba4:	4a4a      	ldr	r2, [pc, #296]	; (8002cd0 <ShowAll+0x1a8>)
 8002ba6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	4611      	mov	r1, r2
 8002bae:	8019      	strh	r1, [r3, #0]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	0c12      	lsrs	r2, r2, #16
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	e00a      	b.n	8002bce <ShowAll+0xa6>
      case 3: strcpy(address, "11"); break;
 8002bb8:	4a46      	ldr	r2, [pc, #280]	; (8002cd4 <ShowAll+0x1ac>)
 8002bba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	8019      	strh	r1, [r3, #0]
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	0c12      	lsrs	r2, r2, #16
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e000      	b.n	8002bce <ShowAll+0xa6>
      default: break;
 8002bcc:	bf00      	nop
    }
    char enabled[10];
    if (Controller->PID.Config.Enabled)
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd0:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d006      	beq.n	8002be6 <ShowAll+0xbe>
      strcpy(enabled, "ENABLED ");
 8002bd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bdc:	4a3e      	ldr	r2, [pc, #248]	; (8002cd8 <ShowAll+0x1b0>)
 8002bde:	ca07      	ldmia	r2, {r0, r1, r2}
 8002be0:	c303      	stmia	r3!, {r0, r1}
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	e005      	b.n	8002bf2 <ShowAll+0xca>
    else
      strcpy(enabled, "DISABLED");
 8002be6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bea:	4a3c      	ldr	r2, [pc, #240]	; (8002cdc <ShowAll+0x1b4>)
 8002bec:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bee:	c303      	stmia	r3!, {r0, r1}
 8002bf0:	701a      	strb	r2, [r3, #0]
    char average[12], last[12], targetp[12];
    FormatTemperature(average, Controller->Sensor.Average);
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8002bf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bfc:	eeb0 0a47 	vmov.f32	s0, s14
 8002c00:	eef0 0a67 	vmov.f32	s1, s15
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fa45 	bl	8003094 <FormatTemperature>
    FormatTemperature(last, Controller->Sensor.LastTemperature);
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
 8002c10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c14:	eeb0 0a47 	vmov.f32	s0, s14
 8002c18:	eef0 0a67 	vmov.f32	s1, s15
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fa39 	bl	8003094 <FormatTemperature>
    FormatTemperature(targetp, Controller->PID.Config.TargetP);
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd fcac 	bl	8000588 <__aeabi_f2d>
 8002c30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c34:	ec41 0b10 	vmov	d0, r0, r1
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fa2b 	bl	8003094 <FormatTemperature>

    char sensor[15];
    switch (Controller->Sensor.State)
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d839      	bhi.n	8002cbc <ShowAll+0x194>
 8002c48:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <ShowAll+0x128>)
 8002c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4e:	bf00      	nop
 8002c50:	08002c65 	.word	0x08002c65
 8002c54:	08002c75 	.word	0x08002c75
 8002c58:	08002c87 	.word	0x08002c87
 8002c5c:	08002c9b 	.word	0x08002c9b
 8002c60:	08002ca9 	.word	0x08002ca9
    {
      case TMP117_STATE_UNKNOWN:      strcpy(sensor, "Unknown");       break;
 8002c64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <ShowAll+0x1b8>)
 8002c6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c72:	e024      	b.n	8002cbe <ShowAll+0x196>
      case TMP117_STATE_INITFAILED:   strcpy(sensor, "Config failed"); break;
 8002c74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c78:	4a1a      	ldr	r2, [pc, #104]	; (8002ce4 <ShowAll+0x1bc>)
 8002c7a:	461c      	mov	r4, r3
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c80:	c407      	stmia	r4!, {r0, r1, r2}
 8002c82:	8023      	strh	r3, [r4, #0]
 8002c84:	e01b      	b.n	8002cbe <ShowAll+0x196>
      case TMP117_STATE_REQUESTNOACK: strcpy(sensor, "Req failed");    break;
 8002c86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c8a:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <ShowAll+0x1c0>)
 8002c8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c8e:	c303      	stmia	r3!, {r0, r1}
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	3302      	adds	r3, #2
 8002c94:	0c12      	lsrs	r2, r2, #16
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e011      	b.n	8002cbe <ShowAll+0x196>
      case TMP117_STATE_RECEIVEFAIL:  strcpy(sensor, "No response");   break;
 8002c9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c9e:	4a13      	ldr	r2, [pc, #76]	; (8002cec <ShowAll+0x1c4>)
 8002ca0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ca2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ca6:	e00a      	b.n	8002cbe <ShowAll+0x196>
      case TMP117_STATE_VALIDTEMP:    strcpy(sensor, "OK");            break;
 8002ca8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cac:	4a10      	ldr	r2, [pc, #64]	; (8002cf0 <ShowAll+0x1c8>)
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	8019      	strh	r1, [r3, #0]
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	0c12      	lsrs	r2, r2, #16
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e000      	b.n	8002cbe <ShowAll+0x196>
      default: break;
 8002cbc:	bf00      	nop
    }

    static char buffer[250];

    for (i=0; i<8; i++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8002cc4:	e02a      	b.n	8002d1c <ShowAll+0x1f4>
 8002cc6:	bf00      	nop
 8002cc8:	08014d7c 	.word	0x08014d7c
 8002ccc:	08014d80 	.word	0x08014d80
 8002cd0:	08014d84 	.word	0x08014d84
 8002cd4:	08014d88 	.word	0x08014d88
 8002cd8:	08014e4c 	.word	0x08014e4c
 8002cdc:	08014e58 	.word	0x08014e58
 8002ce0:	08014e64 	.word	0x08014e64
 8002ce4:	08014e6c 	.word	0x08014e6c
 8002ce8:	08014e7c 	.word	0x08014e7c
 8002cec:	08014e88 	.word	0x08014e88
 8002cf0:	08014e94 	.word	0x08014e94
      ADCVal += ADCChannelSamples[(Controller->Heater) - 1][i];
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	1e5a      	subs	r2, r3, #1
 8002cfa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8002cfe:	4972      	ldr	r1, [pc, #456]	; (8002ec8 <ShowAll+0x3a0>)
 8002d00:	00d2      	lsls	r2, r2, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    for (i=0; i<8; i++)
 8002d12:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8002d16:	3301      	adds	r3, #1
 8002d18:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8002d1c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8002d20:	2b07      	cmp	r3, #7
 8002d22:	d9e7      	bls.n	8002cf4 <ShowAll+0x1cc>

    if (readable)
 8002d24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80dd 	beq.w	8002ee8 <ShowAll+0x3c0>
    {
      snprintf(buffer, 200, "C%u: kp=%5.2f   ep=% 7.1f    temp=%8s  freq: %04u  %s\n", Controller->Heater, Controller->PID.Config.Kp, 100 * Controller->PID.Ep, last, Controller->PID.Config.Frequency, enabled);
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461e      	mov	r6, r3
 8002d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d36:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fc23 	bl	8000588 <__aeabi_f2d>
 8002d42:	4604      	mov	r4, r0
 8002d44:	460d      	mov	r5, r1
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002d4c:	edd3 7a00 	vldr	s15, [r3]
 8002d50:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002ee4 <ShowAll+0x3bc>
 8002d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d58:	ee17 0a90 	vmov	r0, s15
 8002d5c:	f7fd fc14 	bl	8000588 <__aeabi_f2d>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d66:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
 8002d6a:	4608      	mov	r0, r1
 8002d6c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002d70:	9106      	str	r1, [sp, #24]
 8002d72:	9005      	str	r0, [sp, #20]
 8002d74:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002d78:	9104      	str	r1, [sp, #16]
 8002d7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d7e:	e9cd 4500 	strd	r4, r5, [sp]
 8002d82:	4633      	mov	r3, r6
 8002d84:	4a51      	ldr	r2, [pc, #324]	; (8002ecc <ShowAll+0x3a4>)
 8002d86:	21c8      	movs	r1, #200	; 0xc8
 8002d88:	4851      	ldr	r0, [pc, #324]	; (8002ed0 <ShowAll+0x3a8>)
 8002d8a:	f00d f929 	bl	800ffe0 <sniprintf>
      USBSendString(buffer);
 8002d8e:	4850      	ldr	r0, [pc, #320]	; (8002ed0 <ShowAll+0x3a8>)
 8002d90:	f000 fa74 	bl	800327c <USBSendString>
      snprintf(buffer, 200,  "  : kd=%5.2f   ed=% 7.1f     avg=%8s  i2c: %2s\n", Controller->PID.Config.Kd, 100 * Controller->PID.Ed, average, address);
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fbf3 	bl	8000588 <__aeabi_f2d>
 8002da2:	4604      	mov	r4, r0
 8002da4:	460d      	mov	r5, r1
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002dac:	edd3 7a00 	vldr	s15, [r3]
 8002db0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002ee4 <ShowAll+0x3bc>
 8002db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db8:	ee17 0a90 	vmov	r0, s15
 8002dbc:	f7fd fbe4 	bl	8000588 <__aeabi_f2d>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002dc8:	9105      	str	r1, [sp, #20]
 8002dca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002dce:	9104      	str	r1, [sp, #16]
 8002dd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002dd4:	e9cd 4500 	strd	r4, r5, [sp]
 8002dd8:	4a3e      	ldr	r2, [pc, #248]	; (8002ed4 <ShowAll+0x3ac>)
 8002dda:	21c8      	movs	r1, #200	; 0xc8
 8002ddc:	483c      	ldr	r0, [pc, #240]	; (8002ed0 <ShowAll+0x3a8>)
 8002dde:	f00d f8ff 	bl	800ffe0 <sniprintf>
      USBSendString(buffer);
 8002de2:	483b      	ldr	r0, [pc, #236]	; (8002ed0 <ShowAll+0x3a8>)
 8002de4:	f000 fa4a 	bl	800327c <USBSendString>
      snprintf(buffer, 200,  "  : ki=%5.2f   ei=% 7.1f  target=%8s  history=%3u\n", Controller->PID.Config.Ki, 100 * Controller->PID.Ei, target, Controller->PID.Config.History);
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fbc9 	bl	8000588 <__aeabi_f2d>
 8002df6:	4604      	mov	r4, r0
 8002df8:	460d      	mov	r5, r1
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002ee4 <ShowAll+0x3bc>
 8002e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e0c:	ee17 0a90 	vmov	r0, s15
 8002e10:	f7fd fbba 	bl	8000588 <__aeabi_f2d>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e1a:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
 8002e1e:	9105      	str	r1, [sp, #20]
 8002e20:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002e24:	9104      	str	r1, [sp, #16]
 8002e26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e2a:	e9cd 4500 	strd	r4, r5, [sp]
 8002e2e:	4a2a      	ldr	r2, [pc, #168]	; (8002ed8 <ShowAll+0x3b0>)
 8002e30:	21c8      	movs	r1, #200	; 0xc8
 8002e32:	4827      	ldr	r0, [pc, #156]	; (8002ed0 <ShowAll+0x3a8>)
 8002e34:	f00d f8d4 	bl	800ffe0 <sniprintf>
      USBSendString(buffer);
 8002e38:	4825      	ldr	r0, [pc, #148]	; (8002ed0 <ShowAll+0x3a8>)
 8002e3a:	f000 fa1f 	bl	800327c <USBSendString>
      snprintf(buffer, 200,  "  : li=%5.2f  eff=% 7.1f    curr=%7.3fA  sensor: %s\n\n", Controller->PID.Config.Li, 100 * Controller->PID.Effort, ADCVal / 8 / pow(2,12) * (3.3 / 0.1), sensor);
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fb9e 	bl	8000588 <__aeabi_f2d>
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	460d      	mov	r5, r1
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002e56:	edd3 7a00 	vldr	s15, [r3]
 8002e5a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002ee4 <ShowAll+0x3bc>
 8002e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e62:	ee17 0a90 	vmov	r0, s15
 8002e66:	f7fd fb8f 	bl	8000588 <__aeabi_f2d>
 8002e6a:	4680      	mov	r8, r0
 8002e6c:	4689      	mov	r9, r1
 8002e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e72:	08db      	lsrs	r3, r3, #3
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fb65 	bl	8000544 <__aeabi_ui2d>
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	4b17      	ldr	r3, [pc, #92]	; (8002edc <ShowAll+0x3b4>)
 8002e80:	f7fd fd04 	bl	800088c <__aeabi_ddiv>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	a30c      	add	r3, pc, #48	; (adr r3, 8002ec0 <ShowAll+0x398>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd fbd1 	bl	8000638 <__aeabi_dmul>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002e9e:	9106      	str	r1, [sp, #24]
 8002ea0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ea4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002ea8:	e9cd 4500 	strd	r4, r5, [sp]
 8002eac:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <ShowAll+0x3b8>)
 8002eae:	21c8      	movs	r1, #200	; 0xc8
 8002eb0:	4807      	ldr	r0, [pc, #28]	; (8002ed0 <ShowAll+0x3a8>)
 8002eb2:	f00d f895 	bl	800ffe0 <sniprintf>
      USBSendString(buffer);
 8002eb6:	4806      	ldr	r0, [pc, #24]	; (8002ed0 <ShowAll+0x3a8>)
 8002eb8:	f000 f9e0 	bl	800327c <USBSendString>
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
      USBSendString(buffer);

//      HAL_Delay(1); // don't butcher our buffer before we're done with it
    }
}
 8002ebc:	e0cb      	b.n	8003056 <ShowAll+0x52e>
 8002ebe:	bf00      	nop
 8002ec0:	ffffffff 	.word	0xffffffff
 8002ec4:	40407fff 	.word	0x40407fff
 8002ec8:	200006d8 	.word	0x200006d8
 8002ecc:	08014e98 	.word	0x08014e98
 8002ed0:	20000308 	.word	0x20000308
 8002ed4:	08014ed0 	.word	0x08014ed0
 8002ed8:	08014f00 	.word	0x08014f00
 8002edc:	40b00000 	.word	0x40b00000
 8002ee0:	08014f34 	.word	0x08014f34
 8002ee4:	42c80000 	.word	0x42c80000
      if (Controller->Heater == 1)
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <ShowAll+0x3cc>
        ShowRawHeader();
 8002ef0:	f000 f8c0 	bl	8003074 <ShowRawHeader>
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	781b      	ldrb	r3, [r3, #0]
      snprintf(buffer, 200, "C%u %5.2f %5.2f %5.2f % 7.1f % 7.1f % 7.1f % 7.1f %7.3f %8s %8s %8s  %2s  %03u  %04u  %s  %s\n",
 8002ef8:	461e      	mov	r6, r3
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002f00:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u %5.2f %5.2f %5.2f % 7.1f % 7.1f % 7.1f % 7.1f %7.3f %8s %8s %8s  %2s  %03u  %04u  %s  %s\n",
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fb40 	bl	8000588 <__aeabi_f2d>
 8002f08:	e9c7 0108 	strd	r0, r1, [r7, #32]
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0e:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002f12:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u %5.2f %5.2f %5.2f % 7.1f % 7.1f % 7.1f % 7.1f %7.3f %8s %8s %8s  %2s  %03u  %04u  %s  %s\n",
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd fb37 	bl	8000588 <__aeabi_f2d>
 8002f1a:	e9c7 0106 	strd	r0, r1, [r7, #24]
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002f24:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u %5.2f %5.2f %5.2f % 7.1f % 7.1f % 7.1f % 7.1f %7.3f %8s %8s %8s  %2s  %03u  %04u  %s  %s\n",
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd fb2e 	bl	8000588 <__aeabi_f2d>
 8002f2c:	e9c7 0104 	strd	r0, r1, [r7, #16]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f32:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002f36:	edd3 7a00 	vldr	s15, [r3]
 8002f3a:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8002ee4 <ShowAll+0x3bc>
 8002f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u %5.2f %5.2f %5.2f % 7.1f % 7.1f % 7.1f % 7.1f %7.3f %8s %8s %8s  %2s  %03u  %04u  %s  %s\n",
 8002f42:	ee17 0a90 	vmov	r0, s15
 8002f46:	f7fd fb1f 	bl	8000588 <__aeabi_f2d>
 8002f4a:	e9c7 0102 	strd	r0, r1, [r7, #8]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002f54:	edd3 7a00 	vldr	s15, [r3]
 8002f58:	ed1f 7a1e 	vldr	s14, [pc, #-120]	; 8002ee4 <ShowAll+0x3bc>
 8002f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u %5.2f %5.2f %5.2f % 7.1f % 7.1f % 7.1f % 7.1f %7.3f %8s %8s %8s  %2s  %03u  %04u  %s  %s\n",
 8002f60:	ee17 0a90 	vmov	r0, s15
 8002f64:	f7fd fb10 	bl	8000588 <__aeabi_f2d>
 8002f68:	e9c7 0100 	strd	r0, r1, [r7]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6e:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002f72:	edd3 7a00 	vldr	s15, [r3]
 8002f76:	ed1f 7a25 	vldr	s14, [pc, #-148]	; 8002ee4 <ShowAll+0x3bc>
 8002f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u %5.2f %5.2f %5.2f % 7.1f % 7.1f % 7.1f % 7.1f %7.3f %8s %8s %8s  %2s  %03u  %04u  %s  %s\n",
 8002f7e:	ee17 0a90 	vmov	r0, s15
 8002f82:	f7fd fb01 	bl	8000588 <__aeabi_f2d>
 8002f86:	4682      	mov	sl, r0
 8002f88:	468b      	mov	fp, r1
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	ed1f 7a2d 	vldr	s14, [pc, #-180]	; 8002ee4 <ShowAll+0x3bc>
 8002f98:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u %5.2f %5.2f %5.2f % 7.1f % 7.1f % 7.1f % 7.1f %7.3f %8s %8s %8s  %2s  %03u  %04u  %s  %s\n",
 8002f9c:	ee17 0a90 	vmov	r0, s15
 8002fa0:	f7fd faf2 	bl	8000588 <__aeabi_f2d>
 8002fa4:	4680      	mov	r8, r0
 8002fa6:	4689      	mov	r9, r1
          ADCVal / 8 / pow(2,12) * (3.3 / 0.1),
 8002fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fac:	08db      	lsrs	r3, r3, #3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd fac8 	bl	8000544 <__aeabi_ui2d>
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <ShowAll+0x540>)
 8002fba:	f7fd fc67 	bl	800088c <__aeabi_ddiv>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
      snprintf(buffer, 200, "C%u %5.2f %5.2f %5.2f % 7.1f % 7.1f % 7.1f % 7.1f %7.3f %8s %8s %8s  %2s  %03u  %04u  %s  %s\n",
 8002fc6:	a326      	add	r3, pc, #152	; (adr r3, 8003060 <ShowAll+0x538>)
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	f7fd fb34 	bl	8000638 <__aeabi_dmul>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4614      	mov	r4, r2
 8002fd6:	461d      	mov	r5, r3
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	f893 365d 	ldrb.w	r3, [r3, #1629]	; 0x65d
      snprintf(buffer, 200, "C%u %5.2f %5.2f %5.2f % 7.1f % 7.1f % 7.1f % 7.1f %7.3f %8s %8s %8s  %2s  %03u  %04u  %s  %s\n",
 8002fde:	4619      	mov	r1, r3
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe2:	f8b3 365e 	ldrh.w	r3, [r3, #1630]	; 0x65e
      snprintf(buffer, 200, "C%u %5.2f %5.2f %5.2f % 7.1f % 7.1f % 7.1f % 7.1f %7.3f %8s %8s %8s  %2s  %03u  %04u  %s  %s\n",
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fec:	9317      	str	r3, [sp, #92]	; 0x5c
 8002fee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ff2:	9316      	str	r3, [sp, #88]	; 0x58
 8002ff4:	9215      	str	r2, [sp, #84]	; 0x54
 8002ff6:	9114      	str	r1, [sp, #80]	; 0x50
 8002ff8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ffc:	9313      	str	r3, [sp, #76]	; 0x4c
 8002ffe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003002:	9312      	str	r3, [sp, #72]	; 0x48
 8003004:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003008:	9311      	str	r3, [sp, #68]	; 0x44
 800300a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800300e:	9310      	str	r3, [sp, #64]	; 0x40
 8003010:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8003014:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003018:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800301c:	ed97 7b00 	vldr	d7, [r7]
 8003020:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003024:	ed97 7b02 	vldr	d7, [r7, #8]
 8003028:	ed8d 7b06 	vstr	d7, [sp, #24]
 800302c:	ed97 7b04 	vldr	d7, [r7, #16]
 8003030:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003034:	ed97 7b06 	vldr	d7, [r7, #24]
 8003038:	ed8d 7b02 	vstr	d7, [sp, #8]
 800303c:	ed97 7b08 	vldr	d7, [r7, #32]
 8003040:	ed8d 7b00 	vstr	d7, [sp]
 8003044:	4633      	mov	r3, r6
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <ShowAll+0x544>)
 8003048:	21c8      	movs	r1, #200	; 0xc8
 800304a:	4809      	ldr	r0, [pc, #36]	; (8003070 <ShowAll+0x548>)
 800304c:	f00c ffc8 	bl	800ffe0 <sniprintf>
      USBSendString(buffer);
 8003050:	4807      	ldr	r0, [pc, #28]	; (8003070 <ShowAll+0x548>)
 8003052:	f000 f913 	bl	800327c <USBSendString>
}
 8003056:	bf00      	nop
 8003058:	378c      	adds	r7, #140	; 0x8c
 800305a:	46bd      	mov	sp, r7
 800305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003060:	ffffffff 	.word	0xffffffff
 8003064:	40407fff 	.word	0x40407fff
 8003068:	40b00000 	.word	0x40b00000
 800306c:	08014f6c 	.word	0x08014f6c
 8003070:	20000308 	.word	0x20000308

08003074 <ShowRawHeader>:


//Prints the header for the raw data
void ShowRawHeader(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  static char buffer[250];
  snprintf(buffer, 200,  "      kp    kd    ki      ep      ed      ei  effort    curr     temp  average   target i2c hist  freq  enabled   sensor\n");
 8003078:	4a04      	ldr	r2, [pc, #16]	; (800308c <ShowRawHeader+0x18>)
 800307a:	21c8      	movs	r1, #200	; 0xc8
 800307c:	4804      	ldr	r0, [pc, #16]	; (8003090 <ShowRawHeader+0x1c>)
 800307e:	f00c ffaf 	bl	800ffe0 <sniprintf>
  USBSendString(buffer);
 8003082:	4803      	ldr	r0, [pc, #12]	; (8003090 <ShowRawHeader+0x1c>)
 8003084:	f000 f8fa 	bl	800327c <USBSendString>
//  HAL_Delay(1); // don't butcher our buffer before we're done with it
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}
 800308c:	08014fcc 	.word	0x08014fcc
 8003090:	20000404 	.word	0x20000404

08003094 <FormatTemperature>:


//Formats the Float to fit into the Temperature Display
void FormatTemperature(char* buffer, double temp)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	ed87 0b00 	vstr	d0, [r7]
  if (temp > -100)
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <FormatTemperature+0x48>)
 80030a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030aa:	f7fd fd55 	bl	8000b58 <__aeabi_dcmpgt>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <FormatTemperature+0x34>
    snprintf(buffer, 10, "% 7.3fC", temp);
 80030b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030b8:	e9cd 2300 	strd	r2, r3, [sp]
 80030bc:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <FormatTemperature+0x4c>)
 80030be:	210a      	movs	r1, #10
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f00c ff8d 	bl	800ffe0 <sniprintf>
  else
    snprintf(buffer, 10, "  error ");
}
 80030c6:	e004      	b.n	80030d2 <FormatTemperature+0x3e>
    snprintf(buffer, 10, "  error ");
 80030c8:	4a06      	ldr	r2, [pc, #24]	; (80030e4 <FormatTemperature+0x50>)
 80030ca:	210a      	movs	r1, #10
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f00c ff87 	bl	800ffe0 <sniprintf>
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	c0590000 	.word	0xc0590000
 80030e0:	08015048 	.word	0x08015048
 80030e4:	08015050 	.word	0x08015050

080030e8 <Controller_InitStruct>:
#include "Controller.h"




void Controller_InitStruct(struct sController* s, struct sTMP117 *t,uint8_t heater){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80030f4:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80030f8:	6018      	str	r0, [r3, #0]
 80030fa:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80030fe:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8003102:	6019      	str	r1, [r3, #0]
 8003104:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003108:	f2a3 4339 	subw	r3, r3, #1081	; 0x439
 800310c:	701a      	strb	r2, [r3, #0]
  struct sPID PID;
  PID_InitStruct(&PID);
 800310e:	f107 0310 	add.w	r3, r7, #16
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe f9d4 	bl	80014c0 <PID_InitStruct>

  s->Heater = heater;
 8003118:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800311c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8003126:	f2a2 4239 	subw	r2, r2, #1081	; 0x439
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	701a      	strb	r2, [r3, #0]
  s->Sensor = *t;
 800312e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003132:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800313c:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	3308      	adds	r3, #8
 8003144:	4611      	mov	r1, r2
 8003146:	f44f 720a 	mov.w	r2, #552	; 0x228
 800314a:	4618      	mov	r0, r3
 800314c:	f00c f80a 	bl	800f164 <memcpy>
  s->PID = PID;
 8003150:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003154:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800315e:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8003162:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003166:	4611      	mov	r1, r2
 8003168:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800316c:	4618      	mov	r0, r3
 800316e:	f00b fff9 	bl	800f164 <memcpy>
}
 8003172:	bf00      	nop
 8003174:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <Controller_SetHeater>:

// this doesn't sit in the struct because we want something global that the interrupt can call
//This Has been Edited so that it can be used in the TCB
void Controller_SetHeater(uint8_t heater, bool state)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	460a      	mov	r2, r1
 8003186:	71fb      	strb	r3, [r7, #7]
 8003188:	4613      	mov	r3, r2
 800318a:	71bb      	strb	r3, [r7, #6]
  //For the TCB
  uint16_t Pin;
  GPIO_TypeDef* Port;
  Port = GPIOC;
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <Controller_SetHeater+0x40>)
 800318e:	60fb      	str	r3, [r7, #12]
  Pin = GPIO_PIN_5;
 8003190:	2320      	movs	r3, #32
 8003192:	817b      	strh	r3, [r7, #10]
  
  if (state)
 8003194:	79bb      	ldrb	r3, [r7, #6]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d006      	beq.n	80031a8 <Controller_SetHeater+0x2c>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 800319a:	897b      	ldrh	r3, [r7, #10]
 800319c:	2201      	movs	r2, #1
 800319e:	4619      	mov	r1, r3
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f002 f8b3 	bl	800530c <HAL_GPIO_WritePin>
  else
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);

}
 80031a6:	e005      	b.n	80031b4 <Controller_SetHeater+0x38>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 80031a8:	897b      	ldrh	r3, [r7, #10]
 80031aa:	2200      	movs	r2, #0
 80031ac:	4619      	mov	r1, r3
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f002 f8ac 	bl	800530c <HAL_GPIO_WritePin>
}
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40020800 	.word	0x40020800

080031c0 <Controller_WipeConfig>:

void Controller_WipeConfig(struct sController* Controller)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  Controller_InitStruct(Controller, &Controller->Sensor, 0);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3308      	adds	r3, #8
 80031cc:	2200      	movs	r2, #0
 80031ce:	4619      	mov	r1, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ff89 	bl	80030e8 <Controller_InitStruct>
  printf("Cannot Save No EEPROM");
 80031d6:	4803      	ldr	r0, [pc, #12]	; (80031e4 <Controller_WipeConfig+0x24>)
 80031d8:	f00c fe6e 	bl	800feb8 <iprintf>
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	0801505c 	.word	0x0801505c

080031e8 <Controller_Step>:



void Controller_Step(struct sController* Controller)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint8_t i = Controller->Heater - 1;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	75fb      	strb	r3, [r7, #23]
  float temp, eff;
  if (Controller->PID.Config.Enabled == false)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 80031fe:	f083 0301 	eor.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <Controller_Step+0x28>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 8003208:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <Controller_Step+0x8c>)
 800320a:	2264      	movs	r2, #100	; 0x64
 800320c:	701a      	strb	r2, [r3, #0]
    return;
 800320e:	e02d      	b.n	800326c <Controller_Step+0x84>
  }
  if (Controller->Sensor.State != TMP117_STATE_VALIDTEMP)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8003216:	2b04      	cmp	r3, #4
 8003218:	d003      	beq.n	8003222 <Controller_Step+0x3a>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <Controller_Step+0x8c>)
 800321c:	2264      	movs	r2, #100	; 0x64
 800321e:	701a      	strb	r2, [r3, #0]
    return;
 8003220:	e024      	b.n	800326c <Controller_Step+0x84>
  }

  temp = Controller->Sensor.Average;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 8003228:	4610      	mov	r0, r2
 800322a:	4619      	mov	r1, r3
 800322c:	f7fd fcfc 	bl	8000c28 <__aeabi_d2f>
 8003230:	4603      	mov	r3, r0
 8003232:	613b      	str	r3, [r7, #16]
  eff = PID_CalculateEffort(&Controller->PID, temp);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800323a:	ed97 0a04 	vldr	s0, [r7, #16]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fa7c 	bl	800173c <PID_CalculateEffort>
 8003244:	ed87 0a03 	vstr	s0, [r7, #12]
  // dwell is a value between 0 and 100 which tells the heater controller how many
  // heater ticks the heater spends off. A complete heater cycle is 200 ticks.
  // For a 40% duty cycle (effort), dwell becomes 60, making the heater off for 60,
  // on for 80, and off for another 60. This weird design causes heaters with
  // different effort values to turn on and off at different times.
  HeaterDwell = 100 * (1 - eff);
 8003248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800324c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003254:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003278 <Controller_Step+0x90>
 8003258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800325c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003260:	edc7 7a00 	vstr	s15, [r7]
 8003264:	783b      	ldrb	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b02      	ldr	r3, [pc, #8]	; (8003274 <Controller_Step+0x8c>)
 800326a:	701a      	strb	r2, [r3, #0]
}
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000010 	.word	0x20000010
 8003278:	42c80000 	.word	0x42c80000

0800327c <USBSendString>:
   }
   return --i;
}

void USBSendString(char* buf)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  int i, res;
  for (i=0;i<50; i++)
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e013      	b.n	80032b2 <USBSendString+0x36>
  {
    res = CDC_Transmit_FS((uint8_t *)buf, strlen(buf));
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fc ffba 	bl	8000204 <strlen>
 8003290:	4603      	mov	r3, r0
 8003292:	b29b      	uxth	r3, r3
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f00b faf0 	bl	800e87c <CDC_Transmit_FS>
 800329c:	4603      	mov	r3, r0
 800329e:	60bb      	str	r3, [r7, #8]
    if (res == USBD_OK)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <USBSendString+0x3e>
      return;

    HAL_Delay(1);
 80032a6:	2001      	movs	r0, #1
 80032a8:	f001 fa94 	bl	80047d4 <HAL_Delay>
  for (i=0;i<50; i++)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3301      	adds	r3, #1
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b31      	cmp	r3, #49	; 0x31
 80032b6:	dde8      	ble.n	800328a <USBSendString+0xe>
 80032b8:	e000      	b.n	80032bc <USBSendString+0x40>
      return;
 80032ba:	bf00      	nop
  }
}
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <InitDWTTimer>:

void InitDWTTimer(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <InitDWTTimer+0x2c>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4a08      	ldr	r2, [pc, #32]	; (80032f0 <InitDWTTimer+0x2c>)
 80032ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d2:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 80032d4:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <InitDWTTimer+0x30>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk ; // enable the counter
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <InitDWTTimer+0x30>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <InitDWTTimer+0x30>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	6013      	str	r3, [r2, #0]
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000edf0 	.word	0xe000edf0
 80032f4:	e0001000 	.word	0xe0001000

080032f8 <Delay_us>:

void Delay_us(uint32_t us)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8003300:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <Delay_us+0x40>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0d      	ldr	r2, [pc, #52]	; (800333c <Delay_us+0x44>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	0c9b      	lsrs	r3, r3, #18
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	60fb      	str	r3, [r7, #12]
  volatile uint32_t start = DWT->CYCCNT;
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <Delay_us+0x48>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	60bb      	str	r3, [r7, #8]
  do  {
  } while((DWT->CYCCNT - start) < cycles);
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <Delay_us+0x48>)
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1ad2      	subs	r2, r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	429a      	cmp	r2, r3
 8003326:	d3f8      	bcc.n	800331a <Delay_us+0x22>
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000014 	.word	0x20000014
 800333c:	431bde83 	.word	0x431bde83
 8003340:	e0001000 	.word	0xe0001000

08003344 <replacestr>:
    return un.u;
}

// in-place string replacement which only works if the new string is smaller than the old string
void replacestr(uint8_t *buffer, const char *search, const char *replace)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
     char *sp;
     char* line = (char*) buffer;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
     if ((sp = strstr(line, search)) == NULL) {
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003358:	f00c ff07 	bl	801016a <strstr>
 800335c:	6238      	str	r0, [r7, #32]
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d023      	beq.n	80033ac <replacestr+0x68>
         return;
     }
     int search_len = strlen(search);
 8003364:	68b8      	ldr	r0, [r7, #8]
 8003366:	f7fc ff4d 	bl	8000204 <strlen>
 800336a:	4603      	mov	r3, r0
 800336c:	61fb      	str	r3, [r7, #28]
     int replace_len = strlen(replace);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fc ff48 	bl	8000204 <strlen>
 8003374:	4603      	mov	r3, r0
 8003376:	61bb      	str	r3, [r7, #24]
     int tail_len = strlen(sp+search_len);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	6a3a      	ldr	r2, [r7, #32]
 800337c:	4413      	add	r3, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f7fc ff40 	bl	8000204 <strlen>
 8003384:	4603      	mov	r3, r0
 8003386:	617b      	str	r3, [r7, #20]

     memmove(sp+replace_len,sp+search_len,tail_len+1);
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	6a3a      	ldr	r2, [r7, #32]
 800338c:	18d0      	adds	r0, r2, r3
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	6a3a      	ldr	r2, [r7, #32]
 8003392:	18d1      	adds	r1, r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3301      	adds	r3, #1
 8003398:	461a      	mov	r2, r3
 800339a:	f00b fef1 	bl	800f180 <memmove>
     memcpy(sp, replace, replace_len);
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	461a      	mov	r2, r3
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	6a38      	ldr	r0, [r7, #32]
 80033a6:	f00b fedd 	bl	800f164 <memcpy>
 80033aa:	e000      	b.n	80033ae <replacestr+0x6a>
         return;
 80033ac:	bf00      	nop
}
 80033ae:	3728      	adds	r7, #40	; 0x28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80033bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80033c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80033cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80033d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80033d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00b      	beq.n	80033f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80033dc:	e000      	b.n	80033e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80033de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80033e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f9      	beq.n	80033de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80033ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80033f4:	687b      	ldr	r3, [r7, #4]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This Intterupot is called every .25ms Will Toggle the State of the Dac Channels
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a6e      	ldr	r2, [pc, #440]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d149      	bne.n	80034a8 <HAL_TIM_PeriodElapsedCallback+0xa4>
  {
    //Syncronous Update of the DACs
    for (int i = 0; i < 6; i++){
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e041      	b.n	800349e <HAL_TIM_PeriodElapsedCallback+0x9a>
      if(TCB.DAC8718.DAC_Channels[i].enabled){
 800341a:	4a6c      	ldr	r2, [pc, #432]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	33ce      	adds	r3, #206	; 0xce
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	7a9b      	ldrb	r3, [r3, #10]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d036      	beq.n	8003498 <HAL_TIM_PeriodElapsedCallback+0x94>
        if(TCB.DAC8718.DAC_Channels[i].state_high){
 800342a:	4a68      	ldr	r2, [pc, #416]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	33ce      	adds	r3, #206	; 0xce
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	7a5b      	ldrb	r3, [r3, #9]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d017      	beq.n	800346a <HAL_TIM_PeriodElapsedCallback+0x66>

          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].lower_bound);
 800343a:	4a64      	ldr	r2, [pc, #400]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	33ce      	adds	r3, #206	; 0xce
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	7a19      	ldrb	r1, [r3, #8]
 8003446:	4a61      	ldr	r2, [pc, #388]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	33ce      	adds	r3, #206	; 0xce
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4413      	add	r3, r2
 8003450:	88db      	ldrh	r3, [r3, #6]
 8003452:	461a      	mov	r2, r3
 8003454:	485e      	ldr	r0, [pc, #376]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003456:	f7fd fee7 	bl	8001228 <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = false;
 800345a:	4a5c      	ldr	r2, [pc, #368]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	33ce      	adds	r3, #206	; 0xce
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	2200      	movs	r2, #0
 8003466:	725a      	strb	r2, [r3, #9]
 8003468:	e016      	b.n	8003498 <HAL_TIM_PeriodElapsedCallback+0x94>
        }else{
          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].upper_bound);
 800346a:	4a58      	ldr	r2, [pc, #352]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	33ce      	adds	r3, #206	; 0xce
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	7a19      	ldrb	r1, [r3, #8]
 8003476:	4a55      	ldr	r2, [pc, #340]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	33ce      	adds	r3, #206	; 0xce
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	889b      	ldrh	r3, [r3, #4]
 8003482:	461a      	mov	r2, r3
 8003484:	4852      	ldr	r0, [pc, #328]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003486:	f7fd fecf 	bl	8001228 <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = true;
 800348a:	4a50      	ldr	r2, [pc, #320]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	33ce      	adds	r3, #206	; 0xce
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	2201      	movs	r2, #1
 8003496:	725a      	strb	r2, [r3, #9]
    for (int i = 0; i < 6; i++){
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	ddba      	ble.n	800341a <HAL_TIM_PeriodElapsedCallback+0x16>
        }
      }
    

    }
    Syncronous_Update();
 80034a4:	f7fd ff5f 	bl	8001366 <Syncronous_Update>
  }


//--------------------This is from Damons Code-----------------------
  uint8_t i;
  if (htim->Instance == htim3.Instance)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4b49      	ldr	r3, [pc, #292]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d123      	bne.n	80034fc <HAL_TIM_PeriodElapsedCallback+0xf8>
  {
    HeaterSubtick += HeaterFrequency;
 80034b4:	4b48      	ldr	r3, [pc, #288]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	4b48      	ldr	r3, [pc, #288]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	4413      	add	r3, r2
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	4b45      	ldr	r3, [pc, #276]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80034c6:	801a      	strh	r2, [r3, #0]
    if (HeaterSubtick > 1000){
 80034c8:	4b44      	ldr	r3, [pc, #272]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034d2:	d913      	bls.n	80034fc <HAL_TIM_PeriodElapsedCallback+0xf8>
        HeaterTick = (HeaterTick + 1) % 200;
 80034d4:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	4a41      	ldr	r2, [pc, #260]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80034de:	fb82 1203 	smull	r1, r2, r2, r3
 80034e2:	1191      	asrs	r1, r2, #6
 80034e4:	17da      	asrs	r2, r3, #31
 80034e6:	1a8a      	subs	r2, r1, r2
 80034e8:	21c8      	movs	r1, #200	; 0xc8
 80034ea:	fb01 f202 	mul.w	r2, r1, r2
 80034ee:	1a9a      	subs	r2, r3, r2
 80034f0:	b292      	uxth	r2, r2
 80034f2:	4b3b      	ldr	r3, [pc, #236]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80034f4:	801a      	strh	r2, [r3, #0]
        HeaterSubtick = 0;
 80034f6:	4b39      	ldr	r3, [pc, #228]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	801a      	strh	r2, [r3, #0]
    }
  }

  if ((HeaterTick > HeaterDwell)&& (HeaterTick < (200 - HeaterDwell))){
 80034fc:	4b3a      	ldr	r3, [pc, #232]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	b29a      	uxth	r2, r3
 8003504:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	429a      	cmp	r2, r3
 800350c:	d210      	bcs.n	8003530 <HAL_TIM_PeriodElapsedCallback+0x12c>
 800350e:	4b34      	ldr	r3, [pc, #208]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	4b34      	ldr	r3, [pc, #208]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8003520:	429a      	cmp	r2, r3
 8003522:	da05      	bge.n	8003530 <HAL_TIM_PeriodElapsedCallback+0x12c>
        Controller_SetHeater(i, true);
 8003524:	7afb      	ldrb	r3, [r7, #11]
 8003526:	2101      	movs	r1, #1
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fe27 	bl	800317c <Controller_SetHeater>
 800352e:	e004      	b.n	800353a <HAL_TIM_PeriodElapsedCallback+0x136>
  }else{
        Controller_SetHeater(i, false);
 8003530:	7afb      	ldrb	r3, [r7, #11]
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fe21 	bl	800317c <Controller_SetHeater>
  }

  //Removed ADC stuff

  if (htim->Instance == htim4.Instance)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d13c      	bne.n	80035c0 <HAL_TIM_PeriodElapsedCallback+0x1bc>
  {
    ClockTick = (ClockTick + 1) % 100;
 8003546:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	3301      	adds	r3, #1
 800354e:	4a25      	ldr	r2, [pc, #148]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003550:	fb82 1203 	smull	r1, r2, r2, r3
 8003554:	1151      	asrs	r1, r2, #5
 8003556:	17da      	asrs	r2, r3, #31
 8003558:	1a8a      	subs	r2, r1, r2
 800355a:	2164      	movs	r1, #100	; 0x64
 800355c:	fb01 f202 	mul.w	r2, r1, r2
 8003560:	1a9a      	subs	r2, r3, r2
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8003566:	701a      	strb	r2, [r3, #0]
    // this should be after the ClockTick increment
    if (ClockTick == 0)
 8003568:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_TIM_PeriodElapsedCallback+0x17c>
      ElapsedSeconds++;
 8003572:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	3301      	adds	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800357e:	801a      	strh	r2, [r3, #0]

    if (++Ticks_TMP117 >= 13)
 8003580:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	3301      	adds	r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	4a1b      	ldr	r2, [pc, #108]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800358c:	4619      	mov	r1, r3
 800358e:	7011      	strb	r1, [r2, #0]
 8003590:	2b0c      	cmp	r3, #12
 8003592:	d905      	bls.n	80035a0 <HAL_TIM_PeriodElapsedCallback+0x19c>
    {
      Ticks_TMP117 = 0;
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
      DoSampleTMP117 = true;
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
    }

    if (++Ticks_CalculatePWM >= 100)
 80035a0:	4b17      	ldr	r3, [pc, #92]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	4a15      	ldr	r2, [pc, #84]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80035ac:	4619      	mov	r1, r3
 80035ae:	7011      	strb	r1, [r2, #0]
 80035b0:	2b63      	cmp	r3, #99	; 0x63
 80035b2:	d905      	bls.n	80035c0 <HAL_TIM_PeriodElapsedCallback+0x1bc>
    {
      Ticks_CalculatePWM = 0;
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
      DoCalculatePWM = true;
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80035bc:	2201      	movs	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
    }

  }

  //--------------------End Damons Code-----------------------
}
 80035c0:	bf00      	nop
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	200005f4 	.word	0x200005f4
 80035cc:	20000758 	.word	0x20000758
 80035d0:	20000db8 	.word	0x20000db8
 80035d4:	2000063c 	.word	0x2000063c
 80035d8:	2000000e 	.word	0x2000000e
 80035dc:	200006d0 	.word	0x200006d0
 80035e0:	200006ce 	.word	0x200006ce
 80035e4:	51eb851f 	.word	0x51eb851f
 80035e8:	20000010 	.word	0x20000010
 80035ec:	20000684 	.word	0x20000684
 80035f0:	200006d4 	.word	0x200006d4
 80035f4:	200006d6 	.word	0x200006d6
 80035f8:	200006d2 	.word	0x200006d2
 80035fc:	200006cc 	.word	0x200006cc
 8003600:	200006d3 	.word	0x200006d3
 8003604:	200006cd 	.word	0x200006cd

08003608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b090      	sub	sp, #64	; 0x40
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800360e:	f001 f86f 	bl	80046f0 <HAL_Init>
  /* USER CODE BEGIN Init */
  
  //This Should Initialize the TCB 7 TMP117s and the DAC8718
  //New Code

  StringFIFOInit(&USBFIFO);
 8003612:	4873      	ldr	r0, [pc, #460]	; (80037e0 <main+0x1d8>)
 8003614:	f000 fe38 	bl	8004288 <StringFIFOInit>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003618:	f000 f8fe 	bl	8003818 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  InitDWTTimer(); // we need this for delay_us
 800361c:	f7ff fe52 	bl	80032c4 <InitDWTTimer>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003620:	f000 fb14 	bl	8003c4c <MX_GPIO_Init>
  MX_ADC1_Init();
 8003624:	f000 f962 	bl	80038ec <MX_ADC1_Init>
  MX_SPI4_Init();
 8003628:	f000 f9f2 	bl	8003a10 <MX_SPI4_Init>
  MX_I2C1_Init();
 800362c:	f000 f9b0 	bl	8003990 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003630:	f000 fa24 	bl	8003a7c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8003634:	f00b f858 	bl	800e6e8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8003638:	f000 fa6c 	bl	8003b14 <MX_TIM3_Init>
  MX_TIM4_Init();
 800363c:	f000 fab8 	bl	8003bb0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  TCB_InitStruct(&TCB, &hi2c1, &hspi4);
 8003640:	4a68      	ldr	r2, [pc, #416]	; (80037e4 <main+0x1dc>)
 8003642:	4969      	ldr	r1, [pc, #420]	; (80037e8 <main+0x1e0>)
 8003644:	4869      	ldr	r0, [pc, #420]	; (80037ec <main+0x1e4>)
 8003646:	f7fe fab5 	bl	8001bb4 <TCB_InitStruct>
  HAL_Delay(500);
 800364a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800364e:	f001 f8c1 	bl	80047d4 <HAL_Delay>
  printf("-- REBOOT --\n");
 8003652:	4867      	ldr	r0, [pc, #412]	; (80037f0 <main+0x1e8>)
 8003654:	f00c fcb6 	bl	800ffc4 <puts>

// if you rearrange the PID.CONFIG struct, you should force rewriting defaults
  // over the EEPROM on next startup. This will *probably* be caught by checking
  // the address of the last controller rather than the first.
  //Welcome to OOP hell
  if (!(TCB.Controller.Sensor.Address & 0b1001000)) // if the stored address is not valid, we probably have invalid data.
 8003658:	4b64      	ldr	r3, [pc, #400]	; (80037ec <main+0x1e4>)
 800365a:	7a1b      	ldrb	r3, [r3, #8]
 800365c:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <main+0x62>
  {
    printf("The configuration is invalid. Rewriting defaults.");
 8003664:	4863      	ldr	r0, [pc, #396]	; (80037f4 <main+0x1ec>)
 8003666:	f00c fc27 	bl	800feb8 <iprintf>
  }

  TMP117_Configure(&TCB.Controller.Sensor);
 800366a:	4863      	ldr	r0, [pc, #396]	; (80037f8 <main+0x1f0>)
 800366c:	f7fe f970 	bl	8001950 <TMP117_Configure>

  HAL_TIM_Base_Start_IT(&htim3); // Heater Timer
 8003670:	4862      	ldr	r0, [pc, #392]	; (80037fc <main+0x1f4>)
 8003672:	f006 fff1 	bl	800a658 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); // Main Timer
 8003676:	4862      	ldr	r0, [pc, #392]	; (8003800 <main+0x1f8>)
 8003678:	f006 ffee 	bl	800a658 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float voltage = 0;
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
  float voltage2 = 0;
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	607b      	str	r3, [r7, #4]

    /* USER CODE BEGIN 3 */

	  
    //Cycle through the DAC channels and set them to the opposite state and increase and decrease the voltage
    for (voltage = 0; voltage < TCB.DAC8718.max_peak2peak; voltage += 0.1){
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	e044      	b.n	800371a <main+0x112>
		  for(uint8_t j = 0; j < 3; j++){
 8003690:	2300      	movs	r3, #0
 8003692:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003696:	e00c      	b.n	80036b2 <main+0xaa>
			  Set_Voltage_Peak_to_Peak(&TCB.DAC8718, j, &voltage);
 8003698:	f107 0208 	add.w	r2, r7, #8
 800369c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036a0:	4619      	mov	r1, r3
 80036a2:	4858      	ldr	r0, [pc, #352]	; (8003804 <main+0x1fc>)
 80036a4:	f7fd fe96 	bl	80013d4 <Set_Voltage_Peak_to_Peak>
		  for(uint8_t j = 0; j < 3; j++){
 80036a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036ac:	3301      	adds	r3, #1
 80036ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80036b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d9ee      	bls.n	8003698 <main+0x90>
		  }
		  voltage2 = TCB.DAC8718.max_peak2peak - voltage;
 80036ba:	4b4c      	ldr	r3, [pc, #304]	; (80037ec <main+0x1e4>)
 80036bc:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 80036c0:	ed93 7a00 	vldr	s14, [r3]
 80036c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80036c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036cc:	edc7 7a01 	vstr	s15, [r7, #4]
		  for(uint8_t j = 3; j < 6; j++){
 80036d0:	2303      	movs	r3, #3
 80036d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80036d6:	e00b      	b.n	80036f0 <main+0xe8>
			  Set_Voltage_Peak_to_Peak(&TCB.DAC8718, j, &voltage2);
 80036d8:	1d3a      	adds	r2, r7, #4
 80036da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80036de:	4619      	mov	r1, r3
 80036e0:	4848      	ldr	r0, [pc, #288]	; (8003804 <main+0x1fc>)
 80036e2:	f7fd fe77 	bl	80013d4 <Set_Voltage_Peak_to_Peak>
		  for(uint8_t j = 3; j < 6; j++){
 80036e6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80036ea:	3301      	adds	r3, #1
 80036ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80036f0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80036f4:	2b05      	cmp	r3, #5
 80036f6:	d9ef      	bls.n	80036d8 <main+0xd0>
    for (voltage = 0; voltage < TCB.DAC8718.max_peak2peak; voltage += 0.1){
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc ff44 	bl	8000588 <__aeabi_f2d>
 8003700:	a335      	add	r3, pc, #212	; (adr r3, 80037d8 <main+0x1d0>)
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f7fc fde1 	bl	80002cc <__adddf3>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4610      	mov	r0, r2
 8003710:	4619      	mov	r1, r3
 8003712:	f7fd fa89 	bl	8000c28 <__aeabi_d2f>
 8003716:	4603      	mov	r3, r0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	4b34      	ldr	r3, [pc, #208]	; (80037ec <main+0x1e4>)
 800371c:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8003720:	ed93 7a00 	vldr	s14, [r3]
 8003724:	edd7 7a02 	vldr	s15, [r7, #8]
 8003728:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003730:	dcae      	bgt.n	8003690 <main+0x88>
		  }
		  //HAL_Delay(100);
	  }
    //Set the heater to the opposite state its currently in
    set_heater(!get_heater());
 8003732:	f7fd feb5 	bl	80014a0 <get_heater>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf14      	ite	ne
 800373c:	2301      	movne	r3, #1
 800373e:	2300      	moveq	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f083 0301 	eor.w	r3, r3, #1
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	b2db      	uxtb	r3, r3
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd fe8c 	bl	800146c <set_heater>



    //-------- Damons Code ----------------------
    // we keep a global copy of this for the timer interrupt
    HeaterFrequency = TCB.Controller.PID.Config.Frequency;
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <main+0x1e4>)
 8003756:	f8b3 265e 	ldrh.w	r2, [r3, #1630]	; 0x65e
 800375a:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <main+0x200>)
 800375c:	801a      	strh	r2, [r3, #0]

    if (TCB.Controller.Sensor.Errors > 10)
 800375e:	4b23      	ldr	r3, [pc, #140]	; (80037ec <main+0x1e4>)
 8003760:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 8003764:	2b0a      	cmp	r3, #10
 8003766:	d901      	bls.n	800376c <main+0x164>
      MX_I2C1_Init();
 8003768:	f000 f912 	bl	8003990 <MX_I2C1_Init>

    if (DoSampleTMP117)
 800376c:	4b27      	ldr	r3, [pc, #156]	; (800380c <main+0x204>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00e      	beq.n	8003794 <main+0x18c>
    {
      DoSampleTMP117 = false;
 8003776:	4b25      	ldr	r3, [pc, #148]	; (800380c <main+0x204>)
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
      if (TCB.Controller.Sensor.Configured){
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <main+0x1e4>)
 800377e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <main+0x186>
          TMP117_GetTemperature(&TCB.Controller.Sensor);
 8003786:	481c      	ldr	r0, [pc, #112]	; (80037f8 <main+0x1f0>)
 8003788:	f7fe f928 	bl	80019dc <TMP117_GetTemperature>
 800378c:	e002      	b.n	8003794 <main+0x18c>
      }else{
          TMP117_Configure(&TCB.Controller.Sensor);
 800378e:	481a      	ldr	r0, [pc, #104]	; (80037f8 <main+0x1f0>)
 8003790:	f7fe f8de 	bl	8001950 <TMP117_Configure>
      }
    }


    if (DoCalculatePWM)
 8003794:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <main+0x208>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <main+0x1a2>
    {
      DoCalculatePWM = false;
 800379e:	4b1c      	ldr	r3, [pc, #112]	; (8003810 <main+0x208>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
      Controller_Step(&TCB.Controller);
 80037a4:	4811      	ldr	r0, [pc, #68]	; (80037ec <main+0x1e4>)
 80037a6:	f7ff fd1f 	bl	80031e8 <Controller_Step>
    }

    if (StringFIFORemove(&USBFIFO, buffer) == 0)
 80037aa:	f107 030c 	add.w	r3, r7, #12
 80037ae:	4619      	mov	r1, r3
 80037b0:	480b      	ldr	r0, [pc, #44]	; (80037e0 <main+0x1d8>)
 80037b2:	f000 fdfd 	bl	80043b0 <StringFIFORemove>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f47f af65 	bne.w	8003688 <main+0x80>
    {
    	printf("Got Inside");
 80037be:	4815      	ldr	r0, [pc, #84]	; (8003814 <main+0x20c>)
 80037c0:	f00c fb7a 	bl	800feb8 <iprintf>
      ProcessUserInput(&TCB.Controller, buffer);
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	4619      	mov	r1, r3
 80037ca:	4808      	ldr	r0, [pc, #32]	; (80037ec <main+0x1e4>)
 80037cc:	f7fe fa3a 	bl	8001c44 <ProcessUserInput>
    for (voltage = 0; voltage < TCB.DAC8718.max_peak2peak; voltage += 0.1){
 80037d0:	e75a      	b.n	8003688 <main+0x80>
 80037d2:	bf00      	nop
 80037d4:	f3af 8000 	nop.w
 80037d8:	9999999a 	.word	0x9999999a
 80037dc:	3fb99999 	.word	0x3fb99999
 80037e0:	20001d28 	.word	0x20001d28
 80037e4:	2000059c 	.word	0x2000059c
 80037e8:	20000548 	.word	0x20000548
 80037ec:	20000758 	.word	0x20000758
 80037f0:	08015074 	.word	0x08015074
 80037f4:	08015084 	.word	0x08015084
 80037f8:	20000760 	.word	0x20000760
 80037fc:	2000063c 	.word	0x2000063c
 8003800:	20000684 	.word	0x20000684
 8003804:	20000db8 	.word	0x20000db8
 8003808:	2000000e 	.word	0x2000000e
 800380c:	200006cc 	.word	0x200006cc
 8003810:	200006cd 	.word	0x200006cd
 8003814:	080150b8 	.word	0x080150b8

08003818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b094      	sub	sp, #80	; 0x50
 800381c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800381e:	f107 0320 	add.w	r3, r7, #32
 8003822:	2230      	movs	r2, #48	; 0x30
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f00b fcc4 	bl	800f1b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800383c:	2300      	movs	r3, #0
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <SystemClock_Config+0xcc>)
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	4a27      	ldr	r2, [pc, #156]	; (80038e4 <SystemClock_Config+0xcc>)
 8003846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384a:	6413      	str	r3, [r2, #64]	; 0x40
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <SystemClock_Config+0xcc>)
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003858:	2300      	movs	r3, #0
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <SystemClock_Config+0xd0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a21      	ldr	r2, [pc, #132]	; (80038e8 <SystemClock_Config+0xd0>)
 8003862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <SystemClock_Config+0xd0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003874:	2301      	movs	r3, #1
 8003876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800387e:	2302      	movs	r3, #2
 8003880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003888:	2304      	movs	r3, #4
 800388a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800388c:	23a8      	movs	r3, #168	; 0xa8
 800388e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003890:	2302      	movs	r3, #2
 8003892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003894:	2307      	movs	r3, #7
 8003896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003898:	f107 0320 	add.w	r3, r7, #32
 800389c:	4618      	mov	r0, r3
 800389e:	f005 fcb7 	bl	8009210 <HAL_RCC_OscConfig>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80038a8:	f000 fb14 	bl	8003ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038ac:	230f      	movs	r3, #15
 80038ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038b0:	2302      	movs	r3, #2
 80038b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80038be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	2105      	movs	r1, #5
 80038ca:	4618      	mov	r0, r3
 80038cc:	f005 ff18 	bl	8009700 <HAL_RCC_ClockConfig>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80038d6:	f000 fafd 	bl	8003ed4 <Error_Handler>
  }
}
 80038da:	bf00      	nop
 80038dc:	3750      	adds	r7, #80	; 0x50
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40007000 	.word	0x40007000

080038ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80038f2:	463b      	mov	r3, r7
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <MX_ADC1_Init+0x98>)
 8003900:	4a21      	ldr	r2, [pc, #132]	; (8003988 <MX_ADC1_Init+0x9c>)
 8003902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003904:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <MX_ADC1_Init+0x98>)
 8003906:	2200      	movs	r2, #0
 8003908:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800390a:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <MX_ADC1_Init+0x98>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003910:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <MX_ADC1_Init+0x98>)
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003916:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <MX_ADC1_Init+0x98>)
 8003918:	2200      	movs	r2, #0
 800391a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <MX_ADC1_Init+0x98>)
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003924:	4b17      	ldr	r3, [pc, #92]	; (8003984 <MX_ADC1_Init+0x98>)
 8003926:	2200      	movs	r2, #0
 8003928:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <MX_ADC1_Init+0x98>)
 800392c:	4a17      	ldr	r2, [pc, #92]	; (800398c <MX_ADC1_Init+0xa0>)
 800392e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003930:	4b14      	ldr	r3, [pc, #80]	; (8003984 <MX_ADC1_Init+0x98>)
 8003932:	2200      	movs	r2, #0
 8003934:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003936:	4b13      	ldr	r3, [pc, #76]	; (8003984 <MX_ADC1_Init+0x98>)
 8003938:	2201      	movs	r2, #1
 800393a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800393c:	4b11      	ldr	r3, [pc, #68]	; (8003984 <MX_ADC1_Init+0x98>)
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <MX_ADC1_Init+0x98>)
 8003946:	2201      	movs	r2, #1
 8003948:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800394a:	480e      	ldr	r0, [pc, #56]	; (8003984 <MX_ADC1_Init+0x98>)
 800394c:	f000 ff66 	bl	800481c <HAL_ADC_Init>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003956:	f000 fabd 	bl	8003ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800395a:	230e      	movs	r3, #14
 800395c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800395e:	2301      	movs	r3, #1
 8003960:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003966:	463b      	mov	r3, r7
 8003968:	4619      	mov	r1, r3
 800396a:	4806      	ldr	r0, [pc, #24]	; (8003984 <MX_ADC1_Init+0x98>)
 800396c:	f000 ff9a 	bl	80048a4 <HAL_ADC_ConfigChannel>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003976:	f000 faad 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000500 	.word	0x20000500
 8003988:	40012000 	.word	0x40012000
 800398c:	0f000001 	.word	0x0f000001

08003990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <MX_I2C1_Init+0x74>)
 8003996:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <MX_I2C1_Init+0x78>)
 8003998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800399a:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <MX_I2C1_Init+0x74>)
 800399c:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <MX_I2C1_Init+0x7c>)
 800399e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039a0:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <MX_I2C1_Init+0x74>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039a6:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <MX_I2C1_Init+0x74>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039ac:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <MX_I2C1_Init+0x74>)
 80039ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <MX_I2C1_Init+0x74>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039ba:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <MX_I2C1_Init+0x74>)
 80039bc:	2200      	movs	r2, #0
 80039be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <MX_I2C1_Init+0x74>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <MX_I2C1_Init+0x74>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039cc:	480d      	ldr	r0, [pc, #52]	; (8003a04 <MX_I2C1_Init+0x74>)
 80039ce:	f001 fcb7 	bl	8005340 <HAL_I2C_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80039d8:	f000 fa7c 	bl	8003ed4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039dc:	2100      	movs	r1, #0
 80039de:	4809      	ldr	r0, [pc, #36]	; (8003a04 <MX_I2C1_Init+0x74>)
 80039e0:	f004 f91e 	bl	8007c20 <HAL_I2CEx_ConfigAnalogFilter>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80039ea:	f000 fa73 	bl	8003ed4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80039ee:	2100      	movs	r1, #0
 80039f0:	4804      	ldr	r0, [pc, #16]	; (8003a04 <MX_I2C1_Init+0x74>)
 80039f2:	f004 f951 	bl	8007c98 <HAL_I2CEx_ConfigDigitalFilter>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80039fc:	f000 fa6a 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000548 	.word	0x20000548
 8003a08:	40005400 	.word	0x40005400
 8003a0c:	000186a0 	.word	0x000186a0

08003a10 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003a14:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <MX_SPI4_Init+0x68>)
 8003a18:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003a1a:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a20:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a40:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a44:	2220      	movs	r2, #32
 8003a46:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a54:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a5c:	220a      	movs	r2, #10
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003a60:	4804      	ldr	r0, [pc, #16]	; (8003a74 <MX_SPI4_Init+0x64>)
 8003a62:	f006 f859 	bl	8009b18 <HAL_SPI_Init>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003a6c:	f000 fa32 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	2000059c 	.word	0x2000059c
 8003a78:	40013400 	.word	0x40013400

08003a7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a82:	f107 0308 	add.w	r3, r7, #8
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	609a      	str	r2, [r3, #8]
 8003a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a90:	463b      	mov	r3, r7
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a98:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <MX_TIM2_Init+0x94>)
 8003a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420;
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <MX_TIM2_Init+0x94>)
 8003aa2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8003aa6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aa8:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <MX_TIM2_Init+0x94>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8003aae:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <MX_TIM2_Init+0x94>)
 8003ab0:	2232      	movs	r2, #50	; 0x32
 8003ab2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ab4:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <MX_TIM2_Init+0x94>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <MX_TIM2_Init+0x94>)
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ac0:	4813      	ldr	r0, [pc, #76]	; (8003b10 <MX_TIM2_Init+0x94>)
 8003ac2:	f006 fd79 	bl	800a5b8 <HAL_TIM_Base_Init>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003acc:	f000 fa02 	bl	8003ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ad4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ad6:	f107 0308 	add.w	r3, r7, #8
 8003ada:	4619      	mov	r1, r3
 8003adc:	480c      	ldr	r0, [pc, #48]	; (8003b10 <MX_TIM2_Init+0x94>)
 8003ade:	f006 ff33 	bl	800a948 <HAL_TIM_ConfigClockSource>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003ae8:	f000 f9f4 	bl	8003ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aec:	2300      	movs	r3, #0
 8003aee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003af4:	463b      	mov	r3, r7
 8003af6:	4619      	mov	r1, r3
 8003af8:	4805      	ldr	r0, [pc, #20]	; (8003b10 <MX_TIM2_Init+0x94>)
 8003afa:	f007 f94f 	bl	800ad9c <HAL_TIMEx_MasterConfigSynchronization>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003b04:	f000 f9e6 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b08:	bf00      	nop
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	200005f4 	.word	0x200005f4

08003b14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b1a:	f107 0308 	add.w	r3, r7, #8
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	609a      	str	r2, [r3, #8]
 8003b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b28:	463b      	mov	r3, r7
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b30:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <MX_TIM3_Init+0x94>)
 8003b32:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <MX_TIM3_Init+0x98>)
 8003b34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680;
 8003b36:	4b1c      	ldr	r3, [pc, #112]	; (8003ba8 <MX_TIM3_Init+0x94>)
 8003b38:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8003b3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <MX_TIM3_Init+0x94>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003b44:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <MX_TIM3_Init+0x94>)
 8003b46:	2264      	movs	r2, #100	; 0x64
 8003b48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b4a:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <MX_TIM3_Init+0x94>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <MX_TIM3_Init+0x94>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b56:	4814      	ldr	r0, [pc, #80]	; (8003ba8 <MX_TIM3_Init+0x94>)
 8003b58:	f006 fd2e 	bl	800a5b8 <HAL_TIM_Base_Init>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003b62:	f000 f9b7 	bl	8003ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b6c:	f107 0308 	add.w	r3, r7, #8
 8003b70:	4619      	mov	r1, r3
 8003b72:	480d      	ldr	r0, [pc, #52]	; (8003ba8 <MX_TIM3_Init+0x94>)
 8003b74:	f006 fee8 	bl	800a948 <HAL_TIM_ConfigClockSource>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003b7e:	f000 f9a9 	bl	8003ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b82:	2300      	movs	r3, #0
 8003b84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b8a:	463b      	mov	r3, r7
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4806      	ldr	r0, [pc, #24]	; (8003ba8 <MX_TIM3_Init+0x94>)
 8003b90:	f007 f904 	bl	800ad9c <HAL_TIMEx_MasterConfigSynchronization>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003b9a:	f000 f99b 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b9e:	bf00      	nop
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	2000063c 	.word	0x2000063c
 8003bac:	40000400 	.word	0x40000400

08003bb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bb6:	f107 0308 	add.w	r3, r7, #8
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	605a      	str	r2, [r3, #4]
 8003bc0:	609a      	str	r2, [r3, #8]
 8003bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bc4:	463b      	mov	r3, r7
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <MX_TIM4_Init+0x94>)
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <MX_TIM4_Init+0x98>)
 8003bd0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4200;
 8003bd2:	4b1c      	ldr	r3, [pc, #112]	; (8003c44 <MX_TIM4_Init+0x94>)
 8003bd4:	f241 0268 	movw	r2, #4200	; 0x1068
 8003bd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bda:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <MX_TIM4_Init+0x94>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003be0:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <MX_TIM4_Init+0x94>)
 8003be2:	2264      	movs	r2, #100	; 0x64
 8003be4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003be6:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <MX_TIM4_Init+0x94>)
 8003be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bee:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <MX_TIM4_Init+0x94>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003bf4:	4813      	ldr	r0, [pc, #76]	; (8003c44 <MX_TIM4_Init+0x94>)
 8003bf6:	f006 fcdf 	bl	800a5b8 <HAL_TIM_Base_Init>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003c00:	f000 f968 	bl	8003ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c0a:	f107 0308 	add.w	r3, r7, #8
 8003c0e:	4619      	mov	r1, r3
 8003c10:	480c      	ldr	r0, [pc, #48]	; (8003c44 <MX_TIM4_Init+0x94>)
 8003c12:	f006 fe99 	bl	800a948 <HAL_TIM_ConfigClockSource>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003c1c:	f000 f95a 	bl	8003ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c20:	2300      	movs	r3, #0
 8003c22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c24:	2300      	movs	r3, #0
 8003c26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c28:	463b      	mov	r3, r7
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4805      	ldr	r0, [pc, #20]	; (8003c44 <MX_TIM4_Init+0x94>)
 8003c2e:	f007 f8b5 	bl	800ad9c <HAL_TIMEx_MasterConfigSynchronization>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003c38:	f000 f94c 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003c3c:	bf00      	nop
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000684 	.word	0x20000684
 8003c48:	40000800 	.word	0x40000800

08003c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08c      	sub	sp, #48	; 0x30
 8003c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c52:	f107 031c 	add.w	r3, r7, #28
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	605a      	str	r2, [r3, #4]
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	4b7d      	ldr	r3, [pc, #500]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	4a7c      	ldr	r2, [pc, #496]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003c6c:	f043 0310 	orr.w	r3, r3, #16
 8003c70:	6313      	str	r3, [r2, #48]	; 0x30
 8003c72:	4b7a      	ldr	r3, [pc, #488]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	4b76      	ldr	r3, [pc, #472]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	4a75      	ldr	r2, [pc, #468]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8e:	4b73      	ldr	r3, [pc, #460]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	4b6f      	ldr	r3, [pc, #444]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a6e      	ldr	r2, [pc, #440]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b6c      	ldr	r3, [pc, #432]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b68      	ldr	r3, [pc, #416]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a67      	ldr	r2, [pc, #412]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b65      	ldr	r3, [pc, #404]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	4b61      	ldr	r3, [pc, #388]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4a60      	ldr	r2, [pc, #384]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003cdc:	f043 0308 	orr.w	r3, r3, #8
 8003ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce2:	4b5e      	ldr	r3, [pc, #376]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	4b5a      	ldr	r3, [pc, #360]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4a59      	ldr	r2, [pc, #356]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfe:	4b57      	ldr	r3, [pc, #348]	; (8003e5c <MX_GPIO_Init+0x210>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|nWakeUp_Pin, GPIO_PIN_RESET);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8003d10:	4853      	ldr	r0, [pc, #332]	; (8003e60 <MX_GPIO_Init+0x214>)
 8003d12:	f001 fafb 	bl	800530c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, GPIO_PIN_RESET);
 8003d16:	2200      	movs	r2, #0
 8003d18:	2120      	movs	r1, #32
 8003d1a:	4852      	ldr	r0, [pc, #328]	; (8003e64 <MX_GPIO_Init+0x218>)
 8003d1c:	f001 faf6 	bl	800530c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, nRst_Pin|nClr_Pin|nCS_Pin, GPIO_PIN_SET);
 8003d20:	2201      	movs	r2, #1
 8003d22:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8003d26:	484e      	ldr	r0, [pc, #312]	; (8003e60 <MX_GPIO_Init+0x214>)
 8003d28:	f001 faf0 	bl	800530c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLDAC_GPIO_Port, nLDAC_Pin, GPIO_PIN_SET);
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d32:	484d      	ldr	r0, [pc, #308]	; (8003e68 <MX_GPIO_Init+0x21c>)
 8003d34:	f001 faea 	bl	800530c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	484a      	ldr	r0, [pc, #296]	; (8003e68 <MX_GPIO_Init+0x21c>)
 8003d3e:	f001 fae5 	bl	800530c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d42:	2308      	movs	r3, #8
 8003d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d46:	2301      	movs	r3, #1
 8003d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d52:	f107 031c 	add.w	r3, r7, #28
 8003d56:	4619      	mov	r1, r3
 8003d58:	4841      	ldr	r0, [pc, #260]	; (8003e60 <MX_GPIO_Init+0x214>)
 8003d5a:	f001 f913 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003d6e:	2308      	movs	r3, #8
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d72:	f107 031c 	add.w	r3, r7, #28
 8003d76:	4619      	mov	r1, r3
 8003d78:	483c      	ldr	r0, [pc, #240]	; (8003e6c <MX_GPIO_Init+0x220>)
 8003d7a:	f001 f903 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d7e:	23f0      	movs	r3, #240	; 0xf0
 8003d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d8e:	2305      	movs	r3, #5
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d92:	f107 031c 	add.w	r3, r7, #28
 8003d96:	4619      	mov	r1, r3
 8003d98:	4834      	ldr	r0, [pc, #208]	; (8003e6c <MX_GPIO_Init+0x220>)
 8003d9a:	f001 f8f3 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Pin */
  GPIO_InitStruct.Pin = Heater_Pin;
 8003d9e:	2320      	movs	r3, #32
 8003da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003da2:	2301      	movs	r3, #1
 8003da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003daa:	2300      	movs	r3, #0
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Heater_GPIO_Port, &GPIO_InitStruct);
 8003dae:	f107 031c 	add.w	r3, r7, #28
 8003db2:	4619      	mov	r1, r3
 8003db4:	482b      	ldr	r0, [pc, #172]	; (8003e64 <MX_GPIO_Init+0x218>)
 8003db6:	f001 f8e5 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : nWakeUp_Pin nRst_Pin nClr_Pin nCS_Pin */
  GPIO_InitStruct.Pin = nWakeUp_Pin|nRst_Pin|nClr_Pin|nCS_Pin;
 8003dba:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dcc:	f107 031c 	add.w	r3, r7, #28
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4823      	ldr	r0, [pc, #140]	; (8003e60 <MX_GPIO_Init+0x214>)
 8003dd4:	f001 f8d6 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : nLDAC_Pin */
  GPIO_InitStruct.Pin = nLDAC_Pin;
 8003dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dde:	2301      	movs	r3, #1
 8003de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003de6:	2302      	movs	r3, #2
 8003de8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nLDAC_GPIO_Port, &GPIO_InitStruct);
 8003dea:	f107 031c 	add.w	r3, r7, #28
 8003dee:	4619      	mov	r1, r3
 8003df0:	481d      	ldr	r0, [pc, #116]	; (8003e68 <MX_GPIO_Init+0x21c>)
 8003df2:	f001 f8c7 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003df6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003dfa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e04:	2303      	movs	r3, #3
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003e08:	230c      	movs	r3, #12
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	4619      	mov	r1, r3
 8003e12:	4814      	ldr	r0, [pc, #80]	; (8003e64 <MX_GPIO_Init+0x218>)
 8003e14:	f001 f8b6 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e24:	2300      	movs	r3, #0
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e28:	f107 031c 	add.w	r3, r7, #28
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	480e      	ldr	r0, [pc, #56]	; (8003e68 <MX_GPIO_Init+0x21c>)
 8003e30:	f001 f8a8 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e34:	2304      	movs	r3, #4
 8003e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e40:	2303      	movs	r3, #3
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003e44:	230c      	movs	r3, #12
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e48:	f107 031c 	add.w	r3, r7, #28
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4806      	ldr	r0, [pc, #24]	; (8003e68 <MX_GPIO_Init+0x21c>)
 8003e50:	f001 f898 	bl	8004f84 <HAL_GPIO_Init>

}
 8003e54:	bf00      	nop
 8003e56:	3730      	adds	r7, #48	; 0x30
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40020800 	.word	0x40020800
 8003e68:	40020c00 	.word	0x40020c00
 8003e6c:	40020000 	.word	0x40020000

08003e70 <_write>:

/* This allows printf to write to the debugger and USB */
/* USB needs #include "usbd_cdc_if.h" */
/* ITM Stimulus port 0 must be enabled in your trace settings */
int _write(int file, char *ptr, int len)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  int i, res;

  for (i=0;i<20; i++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e00d      	b.n	8003e9e <_write+0x2e>
  {
    res = CDC_Transmit_FS((uint8_t*) ptr, len);  // USB out
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	4619      	mov	r1, r3
 8003e88:	68b8      	ldr	r0, [r7, #8]
 8003e8a:	f00a fcf7 	bl	800e87c <CDC_Transmit_FS>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	617b      	str	r3, [r7, #20]
    if (res == USBD_OK)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d006      	beq.n	8003ea6 <_write+0x36>
  for (i=0;i<20; i++)
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b13      	cmp	r3, #19
 8003ea2:	ddee      	ble.n	8003e82 <_write+0x12>
 8003ea4:	e000      	b.n	8003ea8 <_write+0x38>
      break;
 8003ea6:	bf00      	nop
  }

  for (int i = 0; i < len; i++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	e009      	b.n	8003ec2 <_write+0x52>
    ITM_SendChar((*ptr++));              // debugger out
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	60ba      	str	r2, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fa7c 	bl	80033b4 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	dbf1      	blt.n	8003eae <_write+0x3e>
  return len;
 8003eca:	687b      	ldr	r3, [r7, #4]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3720      	adds	r7, #32
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003ed8:	b672      	cpsid	i
}
 8003eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003edc:	e7fe      	b.n	8003edc <Error_Handler+0x8>
	...

08003ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <HAL_MspInit+0x4c>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <HAL_MspInit+0x4c>)
 8003ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_MspInit+0x4c>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	; 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a17      	ldr	r2, [pc, #92]	; (8003fac <HAL_ADC_MspInit+0x7c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d127      	bne.n	8003fa2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <HAL_ADC_MspInit+0x80>)
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <HAL_ADC_MspInit+0x80>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6453      	str	r3, [r2, #68]	; 0x44
 8003f62:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <HAL_ADC_MspInit+0x80>)
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <HAL_ADC_MspInit+0x80>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4a0e      	ldr	r2, [pc, #56]	; (8003fb0 <HAL_ADC_MspInit+0x80>)
 8003f78:	f043 0304 	orr.w	r3, r3, #4
 8003f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7e:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <HAL_ADC_MspInit+0x80>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f8a:	2310      	movs	r3, #16
 8003f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f96:	f107 0314 	add.w	r3, r7, #20
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4805      	ldr	r0, [pc, #20]	; (8003fb4 <HAL_ADC_MspInit+0x84>)
 8003f9e:	f000 fff1 	bl	8004f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fa2:	bf00      	nop
 8003fa4:	3728      	adds	r7, #40	; 0x28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40012000 	.word	0x40012000
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40020800 	.word	0x40020800

08003fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	; 0x28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc0:	f107 0314 	add.w	r3, r7, #20
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	609a      	str	r2, [r3, #8]
 8003fcc:	60da      	str	r2, [r3, #12]
 8003fce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a21      	ldr	r2, [pc, #132]	; (800405c <HAL_I2C_MspInit+0xa4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d13b      	bne.n	8004052 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <HAL_I2C_MspInit+0xa8>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <HAL_I2C_MspInit+0xa8>)
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_I2C_MspInit+0xa8>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ff6:	23c0      	movs	r3, #192	; 0xc0
 8003ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ffa:	2312      	movs	r3, #18
 8003ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004002:	2303      	movs	r3, #3
 8004004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004006:	2304      	movs	r3, #4
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400a:	f107 0314 	add.w	r3, r7, #20
 800400e:	4619      	mov	r1, r3
 8004010:	4814      	ldr	r0, [pc, #80]	; (8004064 <HAL_I2C_MspInit+0xac>)
 8004012:	f000 ffb7 	bl	8004f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	4b11      	ldr	r3, [pc, #68]	; (8004060 <HAL_I2C_MspInit+0xa8>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	4a10      	ldr	r2, [pc, #64]	; (8004060 <HAL_I2C_MspInit+0xa8>)
 8004020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004024:	6413      	str	r3, [r2, #64]	; 0x40
 8004026:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <HAL_I2C_MspInit+0xa8>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004032:	2200      	movs	r2, #0
 8004034:	2100      	movs	r1, #0
 8004036:	201f      	movs	r0, #31
 8004038:	f000 ff3d 	bl	8004eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800403c:	201f      	movs	r0, #31
 800403e:	f000 ff56 	bl	8004eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004042:	2200      	movs	r2, #0
 8004044:	2100      	movs	r1, #0
 8004046:	2020      	movs	r0, #32
 8004048:	f000 ff35 	bl	8004eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800404c:	2020      	movs	r0, #32
 800404e:	f000 ff4e 	bl	8004eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004052:	bf00      	nop
 8004054:	3728      	adds	r7, #40	; 0x28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40005400 	.word	0x40005400
 8004060:	40023800 	.word	0x40023800
 8004064:	40020400 	.word	0x40020400

08004068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004070:	f107 0314 	add.w	r3, r7, #20
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	60da      	str	r2, [r3, #12]
 800407e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <HAL_SPI_MspInit+0x94>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d134      	bne.n	80040f4 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <HAL_SPI_MspInit+0x98>)
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	4a1b      	ldr	r2, [pc, #108]	; (8004100 <HAL_SPI_MspInit+0x98>)
 8004094:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004098:	6453      	str	r3, [r2, #68]	; 0x44
 800409a:	4b19      	ldr	r3, [pc, #100]	; (8004100 <HAL_SPI_MspInit+0x98>)
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <HAL_SPI_MspInit+0x98>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	4a14      	ldr	r2, [pc, #80]	; (8004100 <HAL_SPI_MspInit+0x98>)
 80040b0:	f043 0310 	orr.w	r3, r3, #16
 80040b4:	6313      	str	r3, [r2, #48]	; 0x30
 80040b6:	4b12      	ldr	r3, [pc, #72]	; (8004100 <HAL_SPI_MspInit+0x98>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80040c2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80040c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c8:	2302      	movs	r3, #2
 80040ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d0:	2303      	movs	r3, #3
 80040d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80040d4:	2305      	movs	r3, #5
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	4619      	mov	r1, r3
 80040de:	4809      	ldr	r0, [pc, #36]	; (8004104 <HAL_SPI_MspInit+0x9c>)
 80040e0:	f000 ff50 	bl	8004f84 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80040e4:	2200      	movs	r2, #0
 80040e6:	2100      	movs	r1, #0
 80040e8:	2054      	movs	r0, #84	; 0x54
 80040ea:	f000 fee4 	bl	8004eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80040ee:	2054      	movs	r0, #84	; 0x54
 80040f0:	f000 fefd 	bl	8004eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80040f4:	bf00      	nop
 80040f6:	3728      	adds	r7, #40	; 0x28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40013400 	.word	0x40013400
 8004100:	40023800 	.word	0x40023800
 8004104:	40021000 	.word	0x40021000

08004108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004118:	d116      	bne.n	8004148 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <HAL_TIM_Base_MspInit+0xa8>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <HAL_TIM_Base_MspInit+0xa8>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	6413      	str	r3, [r2, #64]	; 0x40
 800412a:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <HAL_TIM_Base_MspInit+0xa8>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004136:	2200      	movs	r2, #0
 8004138:	2100      	movs	r1, #0
 800413a:	201c      	movs	r0, #28
 800413c:	f000 febb 	bl	8004eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004140:	201c      	movs	r0, #28
 8004142:	f000 fed4 	bl	8004eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004146:	e02e      	b.n	80041a6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a19      	ldr	r2, [pc, #100]	; (80041b4 <HAL_TIM_Base_MspInit+0xac>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10e      	bne.n	8004170 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	4b16      	ldr	r3, [pc, #88]	; (80041b0 <HAL_TIM_Base_MspInit+0xa8>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	4a15      	ldr	r2, [pc, #84]	; (80041b0 <HAL_TIM_Base_MspInit+0xa8>)
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	6413      	str	r3, [r2, #64]	; 0x40
 8004162:	4b13      	ldr	r3, [pc, #76]	; (80041b0 <HAL_TIM_Base_MspInit+0xa8>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	693b      	ldr	r3, [r7, #16]
}
 800416e:	e01a      	b.n	80041a6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <HAL_TIM_Base_MspInit+0xb0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d115      	bne.n	80041a6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <HAL_TIM_Base_MspInit+0xa8>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a0b      	ldr	r2, [pc, #44]	; (80041b0 <HAL_TIM_Base_MspInit+0xa8>)
 8004184:	f043 0304 	orr.w	r3, r3, #4
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <HAL_TIM_Base_MspInit+0xa8>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004196:	2200      	movs	r2, #0
 8004198:	2100      	movs	r1, #0
 800419a:	201e      	movs	r0, #30
 800419c:	f000 fe8b 	bl	8004eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80041a0:	201e      	movs	r0, #30
 80041a2:	f000 fea4 	bl	8004eee <HAL_NVIC_EnableIRQ>
}
 80041a6:	bf00      	nop
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800

080041bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041c0:	e7fe      	b.n	80041c0 <NMI_Handler+0x4>

080041c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041c6:	e7fe      	b.n	80041c6 <HardFault_Handler+0x4>

080041c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041cc:	e7fe      	b.n	80041cc <MemManage_Handler+0x4>

080041ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041d2:	e7fe      	b.n	80041d2 <BusFault_Handler+0x4>

080041d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041d8:	e7fe      	b.n	80041d8 <UsageFault_Handler+0x4>

080041da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041f6:	b480      	push	{r7}
 80041f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004208:	f000 fac4 	bl	8004794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800420c:	bf00      	nop
 800420e:	bd80      	pop	{r7, pc}

08004210 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004214:	4802      	ldr	r0, [pc, #8]	; (8004220 <TIM2_IRQHandler+0x10>)
 8004216:	f006 fa8f 	bl	800a738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	200005f4 	.word	0x200005f4

08004224 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004228:	4802      	ldr	r0, [pc, #8]	; (8004234 <TIM4_IRQHandler+0x10>)
 800422a:	f006 fa85 	bl	800a738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000684 	.word	0x20000684

08004238 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800423c:	4802      	ldr	r0, [pc, #8]	; (8004248 <I2C1_EV_IRQHandler+0x10>)
 800423e:	f001 fce7 	bl	8005c10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000548 	.word	0x20000548

0800424c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004250:	4802      	ldr	r0, [pc, #8]	; (800425c <I2C1_ER_IRQHandler+0x10>)
 8004252:	f001 fe4e 	bl	8005ef2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000548 	.word	0x20000548

08004260 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004264:	4802      	ldr	r0, [pc, #8]	; (8004270 <OTG_FS_IRQHandler+0x10>)
 8004266:	f003 fea6 	bl	8007fb6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20002adc 	.word	0x20002adc

08004274 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8004278:	4802      	ldr	r0, [pc, #8]	; (8004284 <SPI4_IRQHandler+0x10>)
 800427a:	f005 ffb5 	bl	800a1e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	2000059c 	.word	0x2000059c

08004288 <StringFIFOInit>:

#include <stringfifo.h>
#include "string.h"

void StringFIFOInit(struct sStringFIFO* fifo)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint16_t i;
  fifo->head = 0;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  fifo->tail = 0;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	81fb      	strh	r3, [r7, #14]
 80042a4:	e006      	b.n	80042b4 <StringFIFOInit+0x2c>
    fifo->buffer[i]=0;
 80042a6:	89fb      	ldrh	r3, [r7, #14]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	2100      	movs	r1, #0
 80042ac:	54d1      	strb	r1, [r2, r3]
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 80042ae:	89fb      	ldrh	r3, [r7, #14]
 80042b0:	3301      	adds	r3, #1
 80042b2:	81fb      	strh	r3, [r7, #14]
 80042b4:	89fb      	ldrh	r3, [r7, #14]
 80042b6:	2bf9      	cmp	r3, #249	; 0xf9
 80042b8:	d9f5      	bls.n	80042a6 <StringFIFOInit+0x1e>
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <StringFIFOUsed>:

uint16_t StringFIFOUsed(struct sStringFIFO* fifo)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  int16_t used = fifo->tail - fifo->head;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80042de:	b29b      	uxth	r3, r3
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	81fb      	strh	r3, [r7, #14]
  if (used < 0)
 80042e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	da03      	bge.n	80042f6 <StringFIFOUsed+0x2e>
    used += FIFO_BUFFER_SIZE;
 80042ee:	89fb      	ldrh	r3, [r7, #14]
 80042f0:	33fa      	adds	r3, #250	; 0xfa
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	81fb      	strh	r3, [r7, #14]
  return (uint16_t) used;
 80042f6:	89fb      	ldrh	r3, [r7, #14]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <StringFIFOAvailable>:

uint16_t StringFIFOAvailable(struct sStringFIFO* fifo)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint16_t used = StringFIFOUsed(fifo);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ffdb 	bl	80042c8 <StringFIFOUsed>
 8004312:	4603      	mov	r3, r0
 8004314:	81fb      	strh	r3, [r7, #14]
  int16_t available = FIFO_BUFFER_SIZE - used - 1; // don't use the last byte, otherwise we won't know that we're full
 8004316:	89fb      	ldrh	r3, [r7, #14]
 8004318:	f1c3 03f9 	rsb	r3, r3, #249	; 0xf9
 800431c:	b29b      	uxth	r3, r3
 800431e:	81bb      	strh	r3, [r7, #12]
  return available;
 8004320:	89bb      	ldrh	r3, [r7, #12]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <StringFIFOAdd>:

uint8_t StringFIFOAdd(struct sStringFIFO* fifo, uint8_t* item, size_t size)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  int16_t available = StringFIFOAvailable(fifo);
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff ffe3 	bl	8004304 <StringFIFOAvailable>
 800433e:	4603      	mov	r3, r0
 8004340:	82fb      	strh	r3, [r7, #22]

  if (available == 0)
 8004342:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d104      	bne.n	8004354 <StringFIFOAdd+0x28>
  {
    printf("Fifo full\n");
 800434a:	4817      	ldr	r0, [pc, #92]	; (80043a8 <StringFIFOAdd+0x7c>)
 800434c:	f00b fe3a 	bl	800ffc4 <puts>
    return 1;
 8004350:	2301      	movs	r3, #1
 8004352:	e025      	b.n	80043a0 <StringFIFOAdd+0x74>
  }

  if (size > available)
 8004354:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	429a      	cmp	r2, r3
 800435c:	d902      	bls.n	8004364 <StringFIFOAdd+0x38>
    size = available;
 800435e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004362:	607b      	str	r3, [r7, #4]

  memcpy(&fifo->buffer[fifo->tail], item, size);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800436a:	461a      	mov	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	4618      	mov	r0, r3
 8004376:	f00a fef5 	bl	800f164 <memcpy>
  fifo->tail = (fifo->tail + size) % FIFO_BUFFER_SIZE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004380:	461a      	mov	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	441a      	add	r2, r3
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <StringFIFOAdd+0x80>)
 8004388:	fba3 1302 	umull	r1, r3, r3, r2
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	21fa      	movs	r1, #250	; 0xfa
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  return 0;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	080150c4 	.word	0x080150c4
 80043ac:	10624dd3 	.word	0x10624dd3

080043b0 <StringFIFORemove>:

uint8_t StringFIFORemove(struct sStringFIFO* fifo, uint8_t* string)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint16_t i, pos;
  uint16_t used = StringFIFOUsed(fifo);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff ff84 	bl	80042c8 <StringFIFOUsed>
 80043c0:	4603      	mov	r3, r0
 80043c2:	81fb      	strh	r3, [r7, #14]
  uint16_t h_length, t_length;
  int16_t len;

  if (fifo->head == fifo->tail)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 20fa 	ldrb.w	r2, [r3, #250]	; 0xfa
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d101      	bne.n	80043d8 <StringFIFORemove+0x28>
  {
	  //printf("Empty fifo.\n");
    return 3;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e09e      	b.n	8004516 <StringFIFORemove+0x166>
  }

  for (i=0; i<used; i++)
 80043d8:	2300      	movs	r3, #0
 80043da:	82fb      	strh	r3, [r7, #22]
 80043dc:	e095      	b.n	800450a <StringFIFORemove+0x15a>
  {
    pos = (fifo->head + i) % FIFO_BUFFER_SIZE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80043e4:	461a      	mov	r2, r3
 80043e6:	8afb      	ldrh	r3, [r7, #22]
 80043e8:	4413      	add	r3, r2
 80043ea:	4a4d      	ldr	r2, [pc, #308]	; (8004520 <StringFIFORemove+0x170>)
 80043ec:	fb82 1203 	smull	r1, r2, r2, r3
 80043f0:	1111      	asrs	r1, r2, #4
 80043f2:	17da      	asrs	r2, r3, #31
 80043f4:	1a8a      	subs	r2, r1, r2
 80043f6:	21fa      	movs	r1, #250	; 0xfa
 80043f8:	fb01 f202 	mul.w	r2, r1, r2
 80043fc:	1a9a      	subs	r2, r3, r2
 80043fe:	4613      	mov	r3, r2
 8004400:	81bb      	strh	r3, [r7, #12]
    if ((fifo->buffer[pos] == '\n') || (fifo->buffer[pos] == '\r'))
 8004402:	89bb      	ldrh	r3, [r7, #12]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	5cd3      	ldrb	r3, [r2, r3]
 8004408:	2b0a      	cmp	r3, #10
 800440a:	d004      	beq.n	8004416 <StringFIFORemove+0x66>
 800440c:	89bb      	ldrh	r3, [r7, #12]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	5cd3      	ldrb	r3, [r2, r3]
 8004412:	2b0d      	cmp	r3, #13
 8004414:	d176      	bne.n	8004504 <StringFIFORemove+0x154>
    {
      if (i == 0)
 8004416:	8afb      	ldrh	r3, [r7, #22]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d116      	bne.n	800444a <StringFIFORemove+0x9a>
      {
        fifo->head = (fifo->head + 1) % FIFO_BUFFER_SIZE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004422:	3301      	adds	r3, #1
 8004424:	4a3e      	ldr	r2, [pc, #248]	; (8004520 <StringFIFORemove+0x170>)
 8004426:	fb82 1203 	smull	r1, r2, r2, r3
 800442a:	1111      	asrs	r1, r2, #4
 800442c:	17da      	asrs	r2, r3, #31
 800442e:	1a8a      	subs	r2, r1, r2
 8004430:	21fa      	movs	r1, #250	; 0xfa
 8004432:	fb01 f202 	mul.w	r2, r1, r2
 8004436:	1a9a      	subs	r2, r3, r2
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        string[0] = 0;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
//        printf("Zero length string in fifo.\n");
        return 1;
 8004446:	2301      	movs	r3, #1
 8004448:	e065      	b.n	8004516 <StringFIFORemove+0x166>
      }
      len = (pos - fifo->head);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004450:	b29b      	uxth	r3, r3
 8004452:	89ba      	ldrh	r2, [r7, #12]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	b29b      	uxth	r3, r3
 8004458:	823b      	strh	r3, [r7, #16]
      if (len < 0)
 800445a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	da03      	bge.n	800446a <StringFIFORemove+0xba>
        len += FIFO_BUFFER_SIZE;
 8004462:	8a3b      	ldrh	r3, [r7, #16]
 8004464:	33fa      	adds	r3, #250	; 0xfa
 8004466:	b29b      	uxth	r3, r3
 8004468:	823b      	strh	r3, [r7, #16]
      if (len > (FIFO_BUFFER_SIZE - fifo->head))
 800446a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004474:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8004478:	429a      	cmp	r2, r3
 800447a:	dd0b      	ble.n	8004494 <StringFIFORemove+0xe4>
      {
        h_length = FIFO_BUFFER_SIZE - fifo->head;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004482:	b29b      	uxth	r3, r3
 8004484:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8004488:	82bb      	strh	r3, [r7, #20]
        t_length = len - h_length;
 800448a:	8a3a      	ldrh	r2, [r7, #16]
 800448c:	8abb      	ldrh	r3, [r7, #20]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	827b      	strh	r3, [r7, #18]
 8004492:	e003      	b.n	800449c <StringFIFORemove+0xec>
      }
      else
      {
        h_length = len;
 8004494:	8a3b      	ldrh	r3, [r7, #16]
 8004496:	82bb      	strh	r3, [r7, #20]
        t_length = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	827b      	strh	r3, [r7, #18]
      }
      memcpy(string, &fifo->buffer[fifo->head], h_length);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80044a2:	461a      	mov	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4413      	add	r3, r2
 80044a8:	8aba      	ldrh	r2, [r7, #20]
 80044aa:	4619      	mov	r1, r3
 80044ac:	6838      	ldr	r0, [r7, #0]
 80044ae:	f00a fe59 	bl	800f164 <memcpy>
      if (t_length)
 80044b2:	8a7b      	ldrh	r3, [r7, #18]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <StringFIFORemove+0x118>
        memcpy(&string[h_length], fifo->buffer, t_length);
 80044b8:	8abb      	ldrh	r3, [r7, #20]
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	4413      	add	r3, r2
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	8a7a      	ldrh	r2, [r7, #18]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f00a fe4e 	bl	800f164 <memcpy>
      fifo->head = (fifo->head + len + 1) % FIFO_BUFFER_SIZE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80044ce:	461a      	mov	r2, r3
 80044d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80044d4:	4413      	add	r3, r2
 80044d6:	3301      	adds	r3, #1
 80044d8:	4a11      	ldr	r2, [pc, #68]	; (8004520 <StringFIFORemove+0x170>)
 80044da:	fb82 1203 	smull	r1, r2, r2, r3
 80044de:	1111      	asrs	r1, r2, #4
 80044e0:	17da      	asrs	r2, r3, #31
 80044e2:	1a8a      	subs	r2, r1, r2
 80044e4:	21fa      	movs	r1, #250	; 0xfa
 80044e6:	fb01 f202 	mul.w	r2, r1, r2
 80044ea:	1a9a      	subs	r2, r3, r2
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      string[len] = 0;
 80044f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	4413      	add	r3, r2
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
      return 0;
 8004500:	2300      	movs	r3, #0
 8004502:	e008      	b.n	8004516 <StringFIFORemove+0x166>
  for (i=0; i<used; i++)
 8004504:	8afb      	ldrh	r3, [r7, #22]
 8004506:	3301      	adds	r3, #1
 8004508:	82fb      	strh	r3, [r7, #22]
 800450a:	8afa      	ldrh	r2, [r7, #22]
 800450c:	89fb      	ldrh	r3, [r7, #14]
 800450e:	429a      	cmp	r2, r3
 8004510:	f4ff af65 	bcc.w	80043de <StringFIFORemove+0x2e>
    }
  }
//  printf("Fifo has no terminator\n");
  return 2;
 8004514:	2302      	movs	r3, #2
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	10624dd3 	.word	0x10624dd3

08004524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
	return 1;
 8004528:	2301      	movs	r3, #1
}
 800452a:	4618      	mov	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <_kill>:

int _kill(int pid, int sig)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800453e:	f00a fde7 	bl	800f110 <__errno>
 8004542:	4603      	mov	r3, r0
 8004544:	2216      	movs	r2, #22
 8004546:	601a      	str	r2, [r3, #0]
	return -1;
 8004548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_exit>:

void _exit (int status)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800455c:	f04f 31ff 	mov.w	r1, #4294967295
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff ffe7 	bl	8004534 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004566:	e7fe      	b.n	8004566 <_exit+0x12>

08004568 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	e00a      	b.n	8004590 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800457a:	f3af 8000 	nop.w
 800457e:	4601      	mov	r1, r0
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	60ba      	str	r2, [r7, #8]
 8004586:	b2ca      	uxtb	r2, r1
 8004588:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	3301      	adds	r3, #1
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	429a      	cmp	r2, r3
 8004596:	dbf0      	blt.n	800457a <_read+0x12>
	}

return len;
 8004598:	687b      	ldr	r3, [r7, #4]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
	return -1;
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045ca:	605a      	str	r2, [r3, #4]
	return 0;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <_isatty>:

int _isatty(int file)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
	return 1;
 80045e2:	2301      	movs	r3, #1
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
	return 0;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004614:	4a14      	ldr	r2, [pc, #80]	; (8004668 <_sbrk+0x5c>)
 8004616:	4b15      	ldr	r3, [pc, #84]	; (800466c <_sbrk+0x60>)
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004620:	4b13      	ldr	r3, [pc, #76]	; (8004670 <_sbrk+0x64>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <_sbrk+0x64>)
 800462a:	4a12      	ldr	r2, [pc, #72]	; (8004674 <_sbrk+0x68>)
 800462c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <_sbrk+0x64>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	429a      	cmp	r2, r3
 800463a:	d207      	bcs.n	800464c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800463c:	f00a fd68 	bl	800f110 <__errno>
 8004640:	4603      	mov	r3, r0
 8004642:	220c      	movs	r2, #12
 8004644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
 800464a:	e009      	b.n	8004660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800464c:	4b08      	ldr	r3, [pc, #32]	; (8004670 <_sbrk+0x64>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <_sbrk+0x64>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	4a05      	ldr	r2, [pc, #20]	; (8004670 <_sbrk+0x64>)
 800465c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800465e:	68fb      	ldr	r3, [r7, #12]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20030000 	.word	0x20030000
 800466c:	00000400 	.word	0x00000400
 8004670:	20001e24 	.word	0x20001e24
 8004674:	20003218 	.word	0x20003218

08004678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800467c:	4b06      	ldr	r3, [pc, #24]	; (8004698 <SystemInit+0x20>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	4a05      	ldr	r2, [pc, #20]	; (8004698 <SystemInit+0x20>)
 8004684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800468c:	bf00      	nop
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	e000ed00 	.word	0xe000ed00

0800469c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800469c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046a0:	480d      	ldr	r0, [pc, #52]	; (80046d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80046a2:	490e      	ldr	r1, [pc, #56]	; (80046dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80046a4:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80046a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046a8:	e002      	b.n	80046b0 <LoopCopyDataInit>

080046aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ae:	3304      	adds	r3, #4

080046b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046b4:	d3f9      	bcc.n	80046aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046b6:	4a0b      	ldr	r2, [pc, #44]	; (80046e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80046b8:	4c0b      	ldr	r4, [pc, #44]	; (80046e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80046ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046bc:	e001      	b.n	80046c2 <LoopFillZerobss>

080046be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046c0:	3204      	adds	r2, #4

080046c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046c4:	d3fb      	bcc.n	80046be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80046c6:	f7ff ffd7 	bl	8004678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046ca:	f00a fd27 	bl	800f11c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046ce:	f7fe ff9b 	bl	8003608 <main>
  bx  lr    
 80046d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80046d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046dc:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 80046e0:	0801560c 	.word	0x0801560c
  ldr r2, =_sbss
 80046e4:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 80046e8:	20003218 	.word	0x20003218

080046ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046ec:	e7fe      	b.n	80046ec <ADC_IRQHandler>
	...

080046f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046f4:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <HAL_Init+0x40>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a0d      	ldr	r2, [pc, #52]	; (8004730 <HAL_Init+0x40>)
 80046fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <HAL_Init+0x40>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <HAL_Init+0x40>)
 8004706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800470a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800470c:	4b08      	ldr	r3, [pc, #32]	; (8004730 <HAL_Init+0x40>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a07      	ldr	r2, [pc, #28]	; (8004730 <HAL_Init+0x40>)
 8004712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004718:	2003      	movs	r0, #3
 800471a:	f000 fbc1 	bl	8004ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800471e:	200f      	movs	r0, #15
 8004720:	f000 f808 	bl	8004734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004724:	f7ff fbdc 	bl	8003ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40023c00 	.word	0x40023c00

08004734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800473c:	4b12      	ldr	r3, [pc, #72]	; (8004788 <HAL_InitTick+0x54>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4b12      	ldr	r3, [pc, #72]	; (800478c <HAL_InitTick+0x58>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	4619      	mov	r1, r3
 8004746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800474a:	fbb3 f3f1 	udiv	r3, r3, r1
 800474e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fbd9 	bl	8004f0a <HAL_SYSTICK_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e00e      	b.n	8004780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b0f      	cmp	r3, #15
 8004766:	d80a      	bhi.n	800477e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004768:	2200      	movs	r2, #0
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	f000 fba1 	bl	8004eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004774:	4a06      	ldr	r2, [pc, #24]	; (8004790 <HAL_InitTick+0x5c>)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20000014 	.word	0x20000014
 800478c:	2000001c 	.word	0x2000001c
 8004790:	20000018 	.word	0x20000018

08004794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004798:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <HAL_IncTick+0x20>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <HAL_IncTick+0x24>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4413      	add	r3, r2
 80047a4:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <HAL_IncTick+0x24>)
 80047a6:	6013      	str	r3, [r2, #0]
}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	2000001c 	.word	0x2000001c
 80047b8:	20001e28 	.word	0x20001e28

080047bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return uwTick;
 80047c0:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <HAL_GetTick+0x14>)
 80047c2:	681b      	ldr	r3, [r3, #0]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20001e28 	.word	0x20001e28

080047d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047dc:	f7ff ffee 	bl	80047bc <HAL_GetTick>
 80047e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d005      	beq.n	80047fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <HAL_Delay+0x44>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047fa:	bf00      	nop
 80047fc:	f7ff ffde 	bl	80047bc <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	429a      	cmp	r2, r3
 800480a:	d8f7      	bhi.n	80047fc <HAL_Delay+0x28>
  {
  }
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	2000001c 	.word	0x2000001c

0800481c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e033      	b.n	800489a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fb78 	bl	8003f30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b00      	cmp	r3, #0
 8004858:	d118      	bne.n	800488c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004862:	f023 0302 	bic.w	r3, r3, #2
 8004866:	f043 0202 	orr.w	r2, r3, #2
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f94a 	bl	8004b08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f023 0303 	bic.w	r3, r3, #3
 8004882:	f043 0201 	orr.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	641a      	str	r2, [r3, #64]	; 0x40
 800488a:	e001      	b.n	8004890 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004898:	7bfb      	ldrb	r3, [r7, #15]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x1c>
 80048bc:	2302      	movs	r3, #2
 80048be:	e113      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x244>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b09      	cmp	r3, #9
 80048ce:	d925      	bls.n	800491c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	4613      	mov	r3, r2
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	4413      	add	r3, r2
 80048e4:	3b1e      	subs	r3, #30
 80048e6:	2207      	movs	r2, #7
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	43da      	mvns	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	400a      	ands	r2, r1
 80048f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68d9      	ldr	r1, [r3, #12]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	4618      	mov	r0, r3
 8004908:	4603      	mov	r3, r0
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4403      	add	r3, r0
 800490e:	3b1e      	subs	r3, #30
 8004910:	409a      	lsls	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	60da      	str	r2, [r3, #12]
 800491a:	e022      	b.n	8004962 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6919      	ldr	r1, [r3, #16]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	4613      	mov	r3, r2
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4413      	add	r3, r2
 8004930:	2207      	movs	r2, #7
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43da      	mvns	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	400a      	ands	r2, r1
 800493e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6919      	ldr	r1, [r3, #16]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	4618      	mov	r0, r3
 8004952:	4603      	mov	r3, r0
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4403      	add	r3, r0
 8004958:	409a      	lsls	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b06      	cmp	r3, #6
 8004968:	d824      	bhi.n	80049b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	3b05      	subs	r3, #5
 800497c:	221f      	movs	r2, #31
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43da      	mvns	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	400a      	ands	r2, r1
 800498a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	4618      	mov	r0, r3
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	3b05      	subs	r3, #5
 80049a6:	fa00 f203 	lsl.w	r2, r0, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	635a      	str	r2, [r3, #52]	; 0x34
 80049b2:	e04c      	b.n	8004a4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	d824      	bhi.n	8004a06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	3b23      	subs	r3, #35	; 0x23
 80049ce:	221f      	movs	r2, #31
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	43da      	mvns	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	400a      	ands	r2, r1
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	4618      	mov	r0, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	3b23      	subs	r3, #35	; 0x23
 80049f8:	fa00 f203 	lsl.w	r2, r0, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30
 8004a04:	e023      	b.n	8004a4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	3b41      	subs	r3, #65	; 0x41
 8004a18:	221f      	movs	r2, #31
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	400a      	ands	r2, r1
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	4618      	mov	r0, r3
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	3b41      	subs	r3, #65	; 0x41
 8004a42:	fa00 f203 	lsl.w	r2, r0, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a4e:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <HAL_ADC_ConfigChannel+0x250>)
 8004a50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a28      	ldr	r2, [pc, #160]	; (8004af8 <HAL_ADC_ConfigChannel+0x254>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d10f      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x1d8>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b12      	cmp	r3, #18
 8004a62:	d10b      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1d      	ldr	r2, [pc, #116]	; (8004af8 <HAL_ADC_ConfigChannel+0x254>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d12b      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x23a>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1c      	ldr	r2, [pc, #112]	; (8004afc <HAL_ADC_ConfigChannel+0x258>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <HAL_ADC_ConfigChannel+0x1f4>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b11      	cmp	r3, #17
 8004a96:	d122      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a11      	ldr	r2, [pc, #68]	; (8004afc <HAL_ADC_ConfigChannel+0x258>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d111      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <HAL_ADC_ConfigChannel+0x25c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a11      	ldr	r2, [pc, #68]	; (8004b04 <HAL_ADC_ConfigChannel+0x260>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	0c9a      	lsrs	r2, r3, #18
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ad0:	e002      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f9      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40012300 	.word	0x40012300
 8004af8:	40012000 	.word	0x40012000
 8004afc:	10000012 	.word	0x10000012
 8004b00:	20000014 	.word	0x20000014
 8004b04:	431bde83 	.word	0x431bde83

08004b08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b10:	4b79      	ldr	r3, [pc, #484]	; (8004cf8 <ADC_Init+0x1f0>)
 8004b12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6859      	ldr	r1, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	021a      	lsls	r2, r3, #8
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6859      	ldr	r1, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6899      	ldr	r1, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	4a58      	ldr	r2, [pc, #352]	; (8004cfc <ADC_Init+0x1f4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d022      	beq.n	8004be6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6899      	ldr	r1, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004bd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6899      	ldr	r1, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	e00f      	b.n	8004c06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0202 	bic.w	r2, r2, #2
 8004c14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6899      	ldr	r1, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	7e1b      	ldrb	r3, [r3, #24]
 8004c20:	005a      	lsls	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01b      	beq.n	8004c6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6859      	ldr	r1, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	035a      	lsls	r2, r3, #13
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	e007      	b.n	8004c7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	051a      	lsls	r2, r3, #20
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6899      	ldr	r1, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cbe:	025a      	lsls	r2, r3, #9
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6899      	ldr	r1, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	029a      	lsls	r2, r3, #10
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	609a      	str	r2, [r3, #8]
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	40012300 	.word	0x40012300
 8004cfc:	0f000001 	.word	0x0f000001

08004d00 <__NVIC_SetPriorityGrouping>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <__NVIC_SetPriorityGrouping+0x44>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d32:	4a04      	ldr	r2, [pc, #16]	; (8004d44 <__NVIC_SetPriorityGrouping+0x44>)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	60d3      	str	r3, [r2, #12]
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	e000ed00 	.word	0xe000ed00

08004d48 <__NVIC_GetPriorityGrouping>:
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <__NVIC_GetPriorityGrouping+0x18>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	0a1b      	lsrs	r3, r3, #8
 8004d52:	f003 0307 	and.w	r3, r3, #7
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <__NVIC_EnableIRQ>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	db0b      	blt.n	8004d8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	f003 021f 	and.w	r2, r3, #31
 8004d7c:	4907      	ldr	r1, [pc, #28]	; (8004d9c <__NVIC_EnableIRQ+0x38>)
 8004d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	2001      	movs	r0, #1
 8004d86:	fa00 f202 	lsl.w	r2, r0, r2
 8004d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	e000e100 	.word	0xe000e100

08004da0 <__NVIC_SetPriority>:
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	6039      	str	r1, [r7, #0]
 8004daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	db0a      	blt.n	8004dca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	490c      	ldr	r1, [pc, #48]	; (8004dec <__NVIC_SetPriority+0x4c>)
 8004dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbe:	0112      	lsls	r2, r2, #4
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004dc8:	e00a      	b.n	8004de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	4908      	ldr	r1, [pc, #32]	; (8004df0 <__NVIC_SetPriority+0x50>)
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	3b04      	subs	r3, #4
 8004dd8:	0112      	lsls	r2, r2, #4
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	440b      	add	r3, r1
 8004dde:	761a      	strb	r2, [r3, #24]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	e000e100 	.word	0xe000e100
 8004df0:	e000ed00 	.word	0xe000ed00

08004df4 <NVIC_EncodePriority>:
{
 8004df4:	b480      	push	{r7}
 8004df6:	b089      	sub	sp, #36	; 0x24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f1c3 0307 	rsb	r3, r3, #7
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	bf28      	it	cs
 8004e12:	2304      	movcs	r3, #4
 8004e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	2b06      	cmp	r3, #6
 8004e1c:	d902      	bls.n	8004e24 <NVIC_EncodePriority+0x30>
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	3b03      	subs	r3, #3
 8004e22:	e000      	b.n	8004e26 <NVIC_EncodePriority+0x32>
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e28:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43da      	mvns	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	401a      	ands	r2, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	fa01 f303 	lsl.w	r3, r1, r3
 8004e46:	43d9      	mvns	r1, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e4c:	4313      	orrs	r3, r2
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3724      	adds	r7, #36	; 0x24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <SysTick_Config>:
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e6c:	d301      	bcc.n	8004e72 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e00f      	b.n	8004e92 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e72:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <SysTick_Config+0x40>)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e7a:	210f      	movs	r1, #15
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	f7ff ff8e 	bl	8004da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <SysTick_Config+0x40>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e8a:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <SysTick_Config+0x40>)
 8004e8c:	2207      	movs	r2, #7
 8004e8e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	e000e010 	.word	0xe000e010

08004ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ff29 	bl	8004d00 <__NVIC_SetPriorityGrouping>
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b086      	sub	sp, #24
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ec8:	f7ff ff3e 	bl	8004d48 <__NVIC_GetPriorityGrouping>
 8004ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	6978      	ldr	r0, [r7, #20]
 8004ed4:	f7ff ff8e 	bl	8004df4 <NVIC_EncodePriority>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff ff5d 	bl	8004da0 <__NVIC_SetPriority>
}
 8004ee6:	bf00      	nop
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff ff31 	bl	8004d64 <__NVIC_EnableIRQ>
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ffa2 	bl	8004e5c <SysTick_Config>
 8004f18:	4603      	mov	r3, r0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d004      	beq.n	8004f40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2280      	movs	r2, #128	; 0x80
 8004f3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e00c      	b.n	8004f5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2205      	movs	r2, #5
 8004f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f74:	b2db      	uxtb	r3, r3
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b089      	sub	sp, #36	; 0x24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	e177      	b.n	8005290 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	f040 8166 	bne.w	800528a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d005      	beq.n	8004fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d130      	bne.n	8005038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800500c:	2201      	movs	r2, #1
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 0201 	and.w	r2, r3, #1
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4313      	orrs	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	2b03      	cmp	r3, #3
 8005042:	d017      	beq.n	8005074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	2203      	movs	r2, #3
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d123      	bne.n	80050c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	08da      	lsrs	r2, r3, #3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3208      	adds	r2, #8
 8005088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800508c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	220f      	movs	r2, #15
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4013      	ands	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	08da      	lsrs	r2, r3, #3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3208      	adds	r2, #8
 80050c2:	69b9      	ldr	r1, [r7, #24]
 80050c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	2203      	movs	r2, #3
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f003 0203 	and.w	r2, r3, #3
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80c0 	beq.w	800528a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	4b66      	ldr	r3, [pc, #408]	; (80052a8 <HAL_GPIO_Init+0x324>)
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	4a65      	ldr	r2, [pc, #404]	; (80052a8 <HAL_GPIO_Init+0x324>)
 8005114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005118:	6453      	str	r3, [r2, #68]	; 0x44
 800511a:	4b63      	ldr	r3, [pc, #396]	; (80052a8 <HAL_GPIO_Init+0x324>)
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005126:	4a61      	ldr	r2, [pc, #388]	; (80052ac <HAL_GPIO_Init+0x328>)
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	089b      	lsrs	r3, r3, #2
 800512c:	3302      	adds	r3, #2
 800512e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	220f      	movs	r2, #15
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <HAL_GPIO_Init+0x32c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d037      	beq.n	80051c2 <HAL_GPIO_Init+0x23e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a57      	ldr	r2, [pc, #348]	; (80052b4 <HAL_GPIO_Init+0x330>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d031      	beq.n	80051be <HAL_GPIO_Init+0x23a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a56      	ldr	r2, [pc, #344]	; (80052b8 <HAL_GPIO_Init+0x334>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02b      	beq.n	80051ba <HAL_GPIO_Init+0x236>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a55      	ldr	r2, [pc, #340]	; (80052bc <HAL_GPIO_Init+0x338>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d025      	beq.n	80051b6 <HAL_GPIO_Init+0x232>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a54      	ldr	r2, [pc, #336]	; (80052c0 <HAL_GPIO_Init+0x33c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01f      	beq.n	80051b2 <HAL_GPIO_Init+0x22e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a53      	ldr	r2, [pc, #332]	; (80052c4 <HAL_GPIO_Init+0x340>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d019      	beq.n	80051ae <HAL_GPIO_Init+0x22a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a52      	ldr	r2, [pc, #328]	; (80052c8 <HAL_GPIO_Init+0x344>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_GPIO_Init+0x226>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a51      	ldr	r2, [pc, #324]	; (80052cc <HAL_GPIO_Init+0x348>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00d      	beq.n	80051a6 <HAL_GPIO_Init+0x222>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a50      	ldr	r2, [pc, #320]	; (80052d0 <HAL_GPIO_Init+0x34c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <HAL_GPIO_Init+0x21e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a4f      	ldr	r2, [pc, #316]	; (80052d4 <HAL_GPIO_Init+0x350>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d101      	bne.n	800519e <HAL_GPIO_Init+0x21a>
 800519a:	2309      	movs	r3, #9
 800519c:	e012      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 800519e:	230a      	movs	r3, #10
 80051a0:	e010      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051a2:	2308      	movs	r3, #8
 80051a4:	e00e      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051a6:	2307      	movs	r3, #7
 80051a8:	e00c      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051aa:	2306      	movs	r3, #6
 80051ac:	e00a      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051ae:	2305      	movs	r3, #5
 80051b0:	e008      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051b2:	2304      	movs	r3, #4
 80051b4:	e006      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051b6:	2303      	movs	r3, #3
 80051b8:	e004      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e002      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051c2:	2300      	movs	r3, #0
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	f002 0203 	and.w	r2, r2, #3
 80051ca:	0092      	lsls	r2, r2, #2
 80051cc:	4093      	lsls	r3, r2
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051d4:	4935      	ldr	r1, [pc, #212]	; (80052ac <HAL_GPIO_Init+0x328>)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	089b      	lsrs	r3, r3, #2
 80051da:	3302      	adds	r3, #2
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051e2:	4b3d      	ldr	r3, [pc, #244]	; (80052d8 <HAL_GPIO_Init+0x354>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	43db      	mvns	r3, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4013      	ands	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005206:	4a34      	ldr	r2, [pc, #208]	; (80052d8 <HAL_GPIO_Init+0x354>)
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800520c:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <HAL_GPIO_Init+0x354>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	43db      	mvns	r3, r3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4013      	ands	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005230:	4a29      	ldr	r2, [pc, #164]	; (80052d8 <HAL_GPIO_Init+0x354>)
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005236:	4b28      	ldr	r3, [pc, #160]	; (80052d8 <HAL_GPIO_Init+0x354>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	43db      	mvns	r3, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4013      	ands	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800525a:	4a1f      	ldr	r2, [pc, #124]	; (80052d8 <HAL_GPIO_Init+0x354>)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <HAL_GPIO_Init+0x354>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	43db      	mvns	r3, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4013      	ands	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005284:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <HAL_GPIO_Init+0x354>)
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	3301      	adds	r3, #1
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	2b0f      	cmp	r3, #15
 8005294:	f67f ae84 	bls.w	8004fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005298:	bf00      	nop
 800529a:	bf00      	nop
 800529c:	3724      	adds	r7, #36	; 0x24
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40013800 	.word	0x40013800
 80052b0:	40020000 	.word	0x40020000
 80052b4:	40020400 	.word	0x40020400
 80052b8:	40020800 	.word	0x40020800
 80052bc:	40020c00 	.word	0x40020c00
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40021400 	.word	0x40021400
 80052c8:	40021800 	.word	0x40021800
 80052cc:	40021c00 	.word	0x40021c00
 80052d0:	40022000 	.word	0x40022000
 80052d4:	40022400 	.word	0x40022400
 80052d8:	40013c00 	.word	0x40013c00

080052dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	887b      	ldrh	r3, [r7, #2]
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
 80052f8:	e001      	b.n	80052fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	807b      	strh	r3, [r7, #2]
 8005318:	4613      	mov	r3, r2
 800531a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800531c:	787b      	ldrb	r3, [r7, #1]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005322:	887a      	ldrh	r2, [r7, #2]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005328:	e003      	b.n	8005332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800532a:	887b      	ldrh	r3, [r7, #2]
 800532c:	041a      	lsls	r2, r3, #16
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	619a      	str	r2, [r3, #24]
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e12b      	b.n	80055aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fe fe26 	bl	8003fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	; 0x24
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0201 	bic.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005392:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053a4:	f004 fba4 	bl	8009af0 <HAL_RCC_GetPCLK1Freq>
 80053a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4a81      	ldr	r2, [pc, #516]	; (80055b4 <HAL_I2C_Init+0x274>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d807      	bhi.n	80053c4 <HAL_I2C_Init+0x84>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4a80      	ldr	r2, [pc, #512]	; (80055b8 <HAL_I2C_Init+0x278>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	bf94      	ite	ls
 80053bc:	2301      	movls	r3, #1
 80053be:	2300      	movhi	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	e006      	b.n	80053d2 <HAL_I2C_Init+0x92>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4a7d      	ldr	r2, [pc, #500]	; (80055bc <HAL_I2C_Init+0x27c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	bf94      	ite	ls
 80053cc:	2301      	movls	r3, #1
 80053ce:	2300      	movhi	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0e7      	b.n	80055aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4a78      	ldr	r2, [pc, #480]	; (80055c0 <HAL_I2C_Init+0x280>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	0c9b      	lsrs	r3, r3, #18
 80053e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	4a6a      	ldr	r2, [pc, #424]	; (80055b4 <HAL_I2C_Init+0x274>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d802      	bhi.n	8005414 <HAL_I2C_Init+0xd4>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	3301      	adds	r3, #1
 8005412:	e009      	b.n	8005428 <HAL_I2C_Init+0xe8>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	4a69      	ldr	r2, [pc, #420]	; (80055c4 <HAL_I2C_Init+0x284>)
 8005420:	fba2 2303 	umull	r2, r3, r2, r3
 8005424:	099b      	lsrs	r3, r3, #6
 8005426:	3301      	adds	r3, #1
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6812      	ldr	r2, [r2, #0]
 800542c:	430b      	orrs	r3, r1
 800542e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800543a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	495c      	ldr	r1, [pc, #368]	; (80055b4 <HAL_I2C_Init+0x274>)
 8005444:	428b      	cmp	r3, r1
 8005446:	d819      	bhi.n	800547c <HAL_I2C_Init+0x13c>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	1e59      	subs	r1, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	fbb1 f3f3 	udiv	r3, r1, r3
 8005456:	1c59      	adds	r1, r3, #1
 8005458:	f640 73fc 	movw	r3, #4092	; 0xffc
 800545c:	400b      	ands	r3, r1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_I2C_Init+0x138>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1e59      	subs	r1, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005470:	3301      	adds	r3, #1
 8005472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005476:	e051      	b.n	800551c <HAL_I2C_Init+0x1dc>
 8005478:	2304      	movs	r3, #4
 800547a:	e04f      	b.n	800551c <HAL_I2C_Init+0x1dc>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d111      	bne.n	80054a8 <HAL_I2C_Init+0x168>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	1e58      	subs	r0, r3, #1
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6859      	ldr	r1, [r3, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	440b      	add	r3, r1
 8005492:	fbb0 f3f3 	udiv	r3, r0, r3
 8005496:	3301      	adds	r3, #1
 8005498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800549c:	2b00      	cmp	r3, #0
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	e012      	b.n	80054ce <HAL_I2C_Init+0x18e>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	1e58      	subs	r0, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6859      	ldr	r1, [r3, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	0099      	lsls	r1, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80054be:	3301      	adds	r3, #1
 80054c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_I2C_Init+0x196>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e022      	b.n	800551c <HAL_I2C_Init+0x1dc>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10e      	bne.n	80054fc <HAL_I2C_Init+0x1bc>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1e58      	subs	r0, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6859      	ldr	r1, [r3, #4]
 80054e6:	460b      	mov	r3, r1
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	440b      	add	r3, r1
 80054ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80054f0:	3301      	adds	r3, #1
 80054f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fa:	e00f      	b.n	800551c <HAL_I2C_Init+0x1dc>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	1e58      	subs	r0, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6859      	ldr	r1, [r3, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	0099      	lsls	r1, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005512:	3301      	adds	r3, #1
 8005514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	6809      	ldr	r1, [r1, #0]
 8005520:	4313      	orrs	r3, r2
 8005522:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69da      	ldr	r2, [r3, #28]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800554a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6911      	ldr	r1, [r2, #16]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	68d2      	ldr	r2, [r2, #12]
 8005556:	4311      	orrs	r1, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	430b      	orrs	r3, r1
 800555e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695a      	ldr	r2, [r3, #20]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	000186a0 	.word	0x000186a0
 80055b8:	001e847f 	.word	0x001e847f
 80055bc:	003d08ff 	.word	0x003d08ff
 80055c0:	431bde83 	.word	0x431bde83
 80055c4:	10624dd3 	.word	0x10624dd3

080055c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	607a      	str	r2, [r7, #4]
 80055d2:	461a      	mov	r2, r3
 80055d4:	460b      	mov	r3, r1
 80055d6:	817b      	strh	r3, [r7, #10]
 80055d8:	4613      	mov	r3, r2
 80055da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055dc:	f7ff f8ee 	bl	80047bc <HAL_GetTick>
 80055e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	f040 80e0 	bne.w	80057b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	2319      	movs	r3, #25
 80055f6:	2201      	movs	r2, #1
 80055f8:	4970      	ldr	r1, [pc, #448]	; (80057bc <HAL_I2C_Master_Transmit+0x1f4>)
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f002 f8e6 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
 8005608:	e0d3      	b.n	80057b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_I2C_Master_Transmit+0x50>
 8005614:	2302      	movs	r3, #2
 8005616:	e0cc      	b.n	80057b2 <HAL_I2C_Master_Transmit+0x1ea>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b01      	cmp	r3, #1
 800562c:	d007      	beq.n	800563e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0201 	orr.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800564c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2221      	movs	r2, #33	; 0x21
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2210      	movs	r2, #16
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	893a      	ldrh	r2, [r7, #8]
 800566e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4a50      	ldr	r2, [pc, #320]	; (80057c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800567e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005680:	8979      	ldrh	r1, [r7, #10]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	6a3a      	ldr	r2, [r7, #32]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f001 fea8 	bl	80073dc <I2C_MasterRequestWrite>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e08d      	b.n	80057b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005696:	2300      	movs	r3, #0
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056ac:	e066      	b.n	800577c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	6a39      	ldr	r1, [r7, #32]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f002 f960 	bl	8007978 <I2C_WaitOnTXEFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00d      	beq.n	80056da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d107      	bne.n	80056d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e06b      	b.n	80057b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b04      	cmp	r3, #4
 8005716:	d11b      	bne.n	8005750 <HAL_I2C_Master_Transmit+0x188>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571c:	2b00      	cmp	r3, #0
 800571e:	d017      	beq.n	8005750 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	781a      	ldrb	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	6a39      	ldr	r1, [r7, #32]
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f002 f950 	bl	80079fa <I2C_WaitOnBTFFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00d      	beq.n	800577c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	2b04      	cmp	r3, #4
 8005766:	d107      	bne.n	8005778 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005776:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e01a      	b.n	80057b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005780:	2b00      	cmp	r3, #0
 8005782:	d194      	bne.n	80056ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e000      	b.n	80057b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	00100002 	.word	0x00100002
 80057c0:	ffff0000 	.word	0xffff0000

080057c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08c      	sub	sp, #48	; 0x30
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	607a      	str	r2, [r7, #4]
 80057ce:	461a      	mov	r2, r3
 80057d0:	460b      	mov	r3, r1
 80057d2:	817b      	strh	r3, [r7, #10]
 80057d4:	4613      	mov	r3, r2
 80057d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057d8:	f7fe fff0 	bl	80047bc <HAL_GetTick>
 80057dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	f040 820b 	bne.w	8005c02 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	2319      	movs	r3, #25
 80057f2:	2201      	movs	r2, #1
 80057f4:	497c      	ldr	r1, [pc, #496]	; (80059e8 <HAL_I2C_Master_Receive+0x224>)
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f001 ffe8 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005802:	2302      	movs	r3, #2
 8005804:	e1fe      	b.n	8005c04 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_I2C_Master_Receive+0x50>
 8005810:	2302      	movs	r3, #2
 8005812:	e1f7      	b.n	8005c04 <HAL_I2C_Master_Receive+0x440>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b01      	cmp	r3, #1
 8005828:	d007      	beq.n	800583a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0201 	orr.w	r2, r2, #1
 8005838:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005848:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2222      	movs	r2, #34	; 0x22
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2210      	movs	r2, #16
 8005856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	893a      	ldrh	r2, [r7, #8]
 800586a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a5c      	ldr	r2, [pc, #368]	; (80059ec <HAL_I2C_Master_Receive+0x228>)
 800587a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800587c:	8979      	ldrh	r1, [r7, #10]
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f001 fe2c 	bl	80074e0 <I2C_MasterRequestRead>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e1b8      	b.n	8005c04 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005896:	2b00      	cmp	r3, #0
 8005898:	d113      	bne.n	80058c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589a:	2300      	movs	r3, #0
 800589c:	623b      	str	r3, [r7, #32]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	623b      	str	r3, [r7, #32]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	623b      	str	r3, [r7, #32]
 80058ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	e18c      	b.n	8005bdc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d11b      	bne.n	8005902 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	61fb      	str	r3, [r7, #28]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	61fb      	str	r3, [r7, #28]
 80058ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e16c      	b.n	8005bdc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	2b02      	cmp	r3, #2
 8005908:	d11b      	bne.n	8005942 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005918:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005928:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800592a:	2300      	movs	r3, #0
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	e14c      	b.n	8005bdc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005950:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005968:	e138      	b.n	8005bdc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596e:	2b03      	cmp	r3, #3
 8005970:	f200 80f1 	bhi.w	8005b56 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005978:	2b01      	cmp	r3, #1
 800597a:	d123      	bne.n	80059c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800597c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f002 f8ad 	bl	8007ae0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e139      	b.n	8005c04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059c2:	e10b      	b.n	8005bdc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d14e      	bne.n	8005a6a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	2200      	movs	r2, #0
 80059d4:	4906      	ldr	r1, [pc, #24]	; (80059f0 <HAL_I2C_Master_Receive+0x22c>)
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f001 fef8 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e10e      	b.n	8005c04 <HAL_I2C_Master_Receive+0x440>
 80059e6:	bf00      	nop
 80059e8:	00100002 	.word	0x00100002
 80059ec:	ffff0000 	.word	0xffff0000
 80059f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a68:	e0b8      	b.n	8005bdc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	2200      	movs	r2, #0
 8005a72:	4966      	ldr	r1, [pc, #408]	; (8005c0c <HAL_I2C_Master_Receive+0x448>)
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f001 fea9 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0bf      	b.n	8005c04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	2200      	movs	r2, #0
 8005ace:	494f      	ldr	r1, [pc, #316]	; (8005c0c <HAL_I2C_Master_Receive+0x448>)
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f001 fe7b 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e091      	b.n	8005c04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b54:	e042      	b.n	8005bdc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f001 ffc0 	bl	8007ae0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e04c      	b.n	8005c04 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d118      	bne.n	8005bdc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f47f aec2 	bne.w	800596a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e000      	b.n	8005c04 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
  }
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3728      	adds	r7, #40	; 0x28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	00010004 	.word	0x00010004

08005c10 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c38:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b10      	cmp	r3, #16
 8005c3e:	d003      	beq.n	8005c48 <HAL_I2C_EV_IRQHandler+0x38>
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	f040 80c1 	bne.w	8005dca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10d      	bne.n	8005c7e <HAL_I2C_EV_IRQHandler+0x6e>
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c68:	d003      	beq.n	8005c72 <HAL_I2C_EV_IRQHandler+0x62>
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c70:	d101      	bne.n	8005c76 <HAL_I2C_EV_IRQHandler+0x66>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <HAL_I2C_EV_IRQHandler+0x68>
 8005c76:	2300      	movs	r3, #0
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	f000 8132 	beq.w	8005ee2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00c      	beq.n	8005ca2 <HAL_I2C_EV_IRQHandler+0x92>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	0a5b      	lsrs	r3, r3, #9
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d006      	beq.n	8005ca2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 ffa8 	bl	8007bea <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fd83 	bl	80067a6 <I2C_Master_SB>
 8005ca0:	e092      	b.n	8005dc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	08db      	lsrs	r3, r3, #3
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <HAL_I2C_EV_IRQHandler+0xb2>
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	0a5b      	lsrs	r3, r3, #9
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fdf9 	bl	80068b2 <I2C_Master_ADD10>
 8005cc0:	e082      	b.n	8005dc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	085b      	lsrs	r3, r3, #1
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <HAL_I2C_EV_IRQHandler+0xd2>
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	0a5b      	lsrs	r3, r3, #9
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fe13 	bl	8006906 <I2C_Master_ADDR>
 8005ce0:	e072      	b.n	8005dc8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	089b      	lsrs	r3, r3, #2
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d03b      	beq.n	8005d66 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cfc:	f000 80f3 	beq.w	8005ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	09db      	lsrs	r3, r3, #7
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00f      	beq.n	8005d2c <HAL_I2C_EV_IRQHandler+0x11c>
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	0a9b      	lsrs	r3, r3, #10
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <HAL_I2C_EV_IRQHandler+0x11c>
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	089b      	lsrs	r3, r3, #2
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f9f3 	bl	8006110 <I2C_MasterTransmit_TXE>
 8005d2a:	e04d      	b.n	8005dc8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	089b      	lsrs	r3, r3, #2
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80d6 	beq.w	8005ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	0a5b      	lsrs	r3, r3, #9
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80cf 	beq.w	8005ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	2b21      	cmp	r3, #33	; 0x21
 8005d4c:	d103      	bne.n	8005d56 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa7a 	bl	8006248 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d54:	e0c7      	b.n	8005ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	2b40      	cmp	r3, #64	; 0x40
 8005d5a:	f040 80c4 	bne.w	8005ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fae8 	bl	8006334 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d64:	e0bf      	b.n	8005ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d74:	f000 80b7 	beq.w	8005ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	099b      	lsrs	r3, r3, #6
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00f      	beq.n	8005da4 <HAL_I2C_EV_IRQHandler+0x194>
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	0a9b      	lsrs	r3, r3, #10
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <HAL_I2C_EV_IRQHandler+0x194>
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	089b      	lsrs	r3, r3, #2
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d103      	bne.n	8005da4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fb5d 	bl	800645c <I2C_MasterReceive_RXNE>
 8005da2:	e011      	b.n	8005dc8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	089b      	lsrs	r3, r3, #2
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 809a 	beq.w	8005ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	0a5b      	lsrs	r3, r3, #9
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8093 	beq.w	8005ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fc06 	bl	80065d2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dc6:	e08e      	b.n	8005ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005dc8:	e08d      	b.n	8005ee6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d004      	beq.n	8005ddc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	e007      	b.n	8005dec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	085b      	lsrs	r3, r3, #1
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d012      	beq.n	8005e1e <HAL_I2C_EV_IRQHandler+0x20e>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	0a5b      	lsrs	r3, r3, #9
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00c      	beq.n	8005e1e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005e14:	69b9      	ldr	r1, [r7, #24]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 ffc4 	bl	8006da4 <I2C_Slave_ADDR>
 8005e1c:	e066      	b.n	8005eec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <HAL_I2C_EV_IRQHandler+0x22e>
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	0a5b      	lsrs	r3, r3, #9
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fffe 	bl	8006e38 <I2C_Slave_STOPF>
 8005e3c:	e056      	b.n	8005eec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e3e:	7bbb      	ldrb	r3, [r7, #14]
 8005e40:	2b21      	cmp	r3, #33	; 0x21
 8005e42:	d002      	beq.n	8005e4a <HAL_I2C_EV_IRQHandler+0x23a>
 8005e44:	7bbb      	ldrb	r3, [r7, #14]
 8005e46:	2b29      	cmp	r3, #41	; 0x29
 8005e48:	d125      	bne.n	8005e96 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	09db      	lsrs	r3, r3, #7
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00f      	beq.n	8005e76 <HAL_I2C_EV_IRQHandler+0x266>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	0a9b      	lsrs	r3, r3, #10
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <HAL_I2C_EV_IRQHandler+0x266>
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	089b      	lsrs	r3, r3, #2
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 feda 	bl	8006c28 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e74:	e039      	b.n	8005eea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	089b      	lsrs	r3, r3, #2
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d033      	beq.n	8005eea <HAL_I2C_EV_IRQHandler+0x2da>
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	0a5b      	lsrs	r3, r3, #9
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d02d      	beq.n	8005eea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 ff07 	bl	8006ca2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e94:	e029      	b.n	8005eea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	099b      	lsrs	r3, r3, #6
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00f      	beq.n	8005ec2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	0a9b      	lsrs	r3, r3, #10
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	089b      	lsrs	r3, r3, #2
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d103      	bne.n	8005ec2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 ff12 	bl	8006ce4 <I2C_SlaveReceive_RXNE>
 8005ec0:	e014      	b.n	8005eec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	089b      	lsrs	r3, r3, #2
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <HAL_I2C_EV_IRQHandler+0x2dc>
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	0a5b      	lsrs	r3, r3, #9
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d008      	beq.n	8005eec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 ff40 	bl	8006d60 <I2C_SlaveReceive_BTF>
 8005ee0:	e004      	b.n	8005eec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005ee2:	bf00      	nop
 8005ee4:	e002      	b.n	8005eec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ee6:	bf00      	nop
 8005ee8:	e000      	b.n	8005eec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005eec:	3720      	adds	r7, #32
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b08a      	sub	sp, #40	; 0x28
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f14:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	0a1b      	lsrs	r3, r3, #8
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <HAL_I2C_ER_IRQHandler+0x4e>
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	0a1b      	lsrs	r3, r3, #8
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f3e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	0a5b      	lsrs	r3, r3, #9
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00e      	beq.n	8005f6a <HAL_I2C_ER_IRQHandler+0x78>
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d008      	beq.n	8005f6a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	f043 0302 	orr.w	r3, r3, #2
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005f68:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	0a9b      	lsrs	r3, r3, #10
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d03f      	beq.n	8005ff6 <HAL_I2C_ER_IRQHandler+0x104>
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d039      	beq.n	8005ff6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005f82:	7efb      	ldrb	r3, [r7, #27]
 8005f84:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f94:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005f9c:	7ebb      	ldrb	r3, [r7, #26]
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d112      	bne.n	8005fc8 <HAL_I2C_ER_IRQHandler+0xd6>
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10f      	bne.n	8005fc8 <HAL_I2C_ER_IRQHandler+0xd6>
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	2b21      	cmp	r3, #33	; 0x21
 8005fac:	d008      	beq.n	8005fc0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005fae:	7cfb      	ldrb	r3, [r7, #19]
 8005fb0:	2b29      	cmp	r3, #41	; 0x29
 8005fb2:	d005      	beq.n	8005fc0 <HAL_I2C_ER_IRQHandler+0xce>
 8005fb4:	7cfb      	ldrb	r3, [r7, #19]
 8005fb6:	2b28      	cmp	r3, #40	; 0x28
 8005fb8:	d106      	bne.n	8005fc8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b21      	cmp	r3, #33	; 0x21
 8005fbe:	d103      	bne.n	8005fc8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 f869 	bl	8007098 <I2C_Slave_AF>
 8005fc6:	e016      	b.n	8005ff6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fd0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	f043 0304 	orr.w	r3, r3, #4
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005fda:	7efb      	ldrb	r3, [r7, #27]
 8005fdc:	2b10      	cmp	r3, #16
 8005fde:	d002      	beq.n	8005fe6 <HAL_I2C_ER_IRQHandler+0xf4>
 8005fe0:	7efb      	ldrb	r3, [r7, #27]
 8005fe2:	2b40      	cmp	r3, #64	; 0x40
 8005fe4:	d107      	bne.n	8005ff6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	0adb      	lsrs	r3, r3, #11
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00e      	beq.n	8006020 <HAL_I2C_ER_IRQHandler+0x12e>
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	0a1b      	lsrs	r3, r3, #8
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d008      	beq.n	8006020 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	f043 0308 	orr.w	r3, r3, #8
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800601e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	2b00      	cmp	r3, #0
 8006024:	d008      	beq.n	8006038 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f001 f8a0 	bl	8007178 <I2C_ITError>
  }
}
 8006038:	bf00      	nop
 800603a:	3728      	adds	r7, #40	; 0x28
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	70fb      	strb	r3, [r7, #3]
 800609c:	4613      	mov	r3, r2
 800609e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006126:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006132:	2b00      	cmp	r3, #0
 8006134:	d150      	bne.n	80061d8 <I2C_MasterTransmit_TXE+0xc8>
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	2b21      	cmp	r3, #33	; 0x21
 800613a:	d14d      	bne.n	80061d8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b08      	cmp	r3, #8
 8006140:	d01d      	beq.n	800617e <I2C_MasterTransmit_TXE+0x6e>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b20      	cmp	r3, #32
 8006146:	d01a      	beq.n	800617e <I2C_MasterTransmit_TXE+0x6e>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800614e:	d016      	beq.n	800617e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800615e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2211      	movs	r2, #17
 8006164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff ff62 	bl	8006040 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800617c:	e060      	b.n	8006240 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800618c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800619c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	d107      	bne.n	80061c8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff ff7d 	bl	80060c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061c6:	e03b      	b.n	8006240 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ff35 	bl	8006040 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061d6:	e033      	b.n	8006240 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	2b21      	cmp	r3, #33	; 0x21
 80061dc:	d005      	beq.n	80061ea <I2C_MasterTransmit_TXE+0xda>
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	2b40      	cmp	r3, #64	; 0x40
 80061e2:	d12d      	bne.n	8006240 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	2b22      	cmp	r3, #34	; 0x22
 80061e8:	d12a      	bne.n	8006240 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d108      	bne.n	8006206 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006202:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006204:	e01c      	b.n	8006240 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b40      	cmp	r3, #64	; 0x40
 8006210:	d103      	bne.n	800621a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f88e 	bl	8006334 <I2C_MemoryTransmit_TXE_BTF>
}
 8006218:	e012      	b.n	8006240 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	781a      	ldrb	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800623e:	e7ff      	b.n	8006240 <I2C_MasterTransmit_TXE+0x130>
 8006240:	bf00      	nop
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b21      	cmp	r3, #33	; 0x21
 8006260:	d164      	bne.n	800632c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d012      	beq.n	8006292 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	781a      	ldrb	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006286:	b29b      	uxth	r3, r3
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006290:	e04c      	b.n	800632c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d01d      	beq.n	80062d4 <I2C_MasterTransmit_BTF+0x8c>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b20      	cmp	r3, #32
 800629c:	d01a      	beq.n	80062d4 <I2C_MasterTransmit_BTF+0x8c>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062a4:	d016      	beq.n	80062d4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062b4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2211      	movs	r2, #17
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff feb7 	bl	8006040 <HAL_I2C_MasterTxCpltCallback>
}
 80062d2:	e02b      	b.n	800632c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062e2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d107      	bne.n	800631e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff fed2 	bl	80060c0 <HAL_I2C_MemTxCpltCallback>
}
 800631c:	e006      	b.n	800632c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff fe8a 	bl	8006040 <HAL_I2C_MasterTxCpltCallback>
}
 800632c:	bf00      	nop
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006342:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	2b00      	cmp	r3, #0
 800634a:	d11d      	bne.n	8006388 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d10b      	bne.n	800636c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006358:	b2da      	uxtb	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006364:	1c9a      	adds	r2, r3, #2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800636a:	e073      	b.n	8006454 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006370:	b29b      	uxth	r3, r3
 8006372:	121b      	asrs	r3, r3, #8
 8006374:	b2da      	uxtb	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006386:	e065      	b.n	8006454 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	2b01      	cmp	r3, #1
 800638e:	d10b      	bne.n	80063a8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006394:	b2da      	uxtb	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063a6:	e055      	b.n	8006454 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d151      	bne.n	8006454 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	2b22      	cmp	r3, #34	; 0x22
 80063b4:	d10d      	bne.n	80063d2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063d0:	e040      	b.n	8006454 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d015      	beq.n	8006408 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	2b21      	cmp	r3, #33	; 0x21
 80063e0:	d112      	bne.n	8006408 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	781a      	ldrb	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006406:	e025      	b.n	8006454 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d120      	bne.n	8006454 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	2b21      	cmp	r3, #33	; 0x21
 8006416:	d11d      	bne.n	8006454 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006426:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006436:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff fe36 	bl	80060c0 <HAL_I2C_MemTxCpltCallback>
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b22      	cmp	r3, #34	; 0x22
 800646e:	f040 80ac 	bne.w	80065ca <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006476:	b29b      	uxth	r3, r3
 8006478:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b03      	cmp	r3, #3
 800647e:	d921      	bls.n	80064c4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691a      	ldr	r2, [r3, #16]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	f040 808c 	bne.w	80065ca <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80064c2:	e082      	b.n	80065ca <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d075      	beq.n	80065b8 <I2C_MasterReceive_RXNE+0x15c>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d002      	beq.n	80064d8 <I2C_MasterReceive_RXNE+0x7c>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d16f      	bne.n	80065b8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 facf 	bl	8007a7c <I2C_WaitOnSTOPRequestThroughIT>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d142      	bne.n	800656a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006502:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b40      	cmp	r3, #64	; 0x40
 800653c:	d10a      	bne.n	8006554 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff fdc1 	bl	80060d4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006552:	e03a      	b.n	80065ca <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2212      	movs	r2, #18
 8006560:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff fd76 	bl	8006054 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006568:	e02f      	b.n	80065ca <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006578:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff fd99 	bl	80060e8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80065b6:	e008      	b.n	80065ca <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c6:	605a      	str	r2, [r3, #4]
}
 80065c8:	e7ff      	b.n	80065ca <I2C_MasterReceive_RXNE+0x16e>
 80065ca:	bf00      	nop
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b084      	sub	sp, #16
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065de:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d11b      	bne.n	8006622 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006620:	e0bd      	b.n	800679e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b03      	cmp	r3, #3
 800662a:	d129      	bne.n	8006680 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800663a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b04      	cmp	r3, #4
 8006640:	d00a      	beq.n	8006658 <I2C_MasterReceive_BTF+0x86>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b02      	cmp	r3, #2
 8006646:	d007      	beq.n	8006658 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006656:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800667e:	e08e      	b.n	800679e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d176      	bne.n	8006778 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d002      	beq.n	8006696 <I2C_MasterReceive_BTF+0xc4>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b10      	cmp	r3, #16
 8006694:	d108      	bne.n	80066a8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e019      	b.n	80066dc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d002      	beq.n	80066b4 <I2C_MasterReceive_BTF+0xe2>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d108      	bne.n	80066c6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	e00a      	b.n	80066dc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d007      	beq.n	80066dc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691a      	ldr	r2, [r3, #16]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006736:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b40      	cmp	r3, #64	; 0x40
 800674a:	d10a      	bne.n	8006762 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff fcba 	bl	80060d4 <HAL_I2C_MemRxCpltCallback>
}
 8006760:	e01d      	b.n	800679e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2212      	movs	r2, #18
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff fc6f 	bl	8006054 <HAL_I2C_MasterRxCpltCallback>
}
 8006776:	e012      	b.n	800679e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d117      	bne.n	80067ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80067d4:	e067      	b.n	80068a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f043 0301 	orr.w	r3, r3, #1
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	611a      	str	r2, [r3, #16]
}
 80067e8:	e05d      	b.n	80068a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067f2:	d133      	bne.n	800685c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b21      	cmp	r3, #33	; 0x21
 80067fe:	d109      	bne.n	8006814 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006804:	b2db      	uxtb	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006810:	611a      	str	r2, [r3, #16]
 8006812:	e008      	b.n	8006826 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f043 0301 	orr.w	r3, r3, #1
 800681e:	b2da      	uxtb	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <I2C_Master_SB+0x92>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d108      	bne.n	800684a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	2b00      	cmp	r3, #0
 800683e:	d032      	beq.n	80068a6 <I2C_Master_SB+0x100>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006846:	2b00      	cmp	r3, #0
 8006848:	d02d      	beq.n	80068a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006858:	605a      	str	r2, [r3, #4]
}
 800685a:	e024      	b.n	80068a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10e      	bne.n	8006882 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006868:	b29b      	uxth	r3, r3
 800686a:	11db      	asrs	r3, r3, #7
 800686c:	b2db      	uxtb	r3, r3
 800686e:	f003 0306 	and.w	r3, r3, #6
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f063 030f 	orn	r3, r3, #15
 8006878:	b2da      	uxtb	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	611a      	str	r2, [r3, #16]
}
 8006880:	e011      	b.n	80068a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006886:	2b01      	cmp	r3, #1
 8006888:	d10d      	bne.n	80068a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688e:	b29b      	uxth	r3, r3
 8006890:	11db      	asrs	r3, r3, #7
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 0306 	and.w	r3, r3, #6
 8006898:	b2db      	uxtb	r3, r3
 800689a:	f063 030e 	orn	r3, r3, #14
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	611a      	str	r2, [r3, #16]
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d004      	beq.n	80068d8 <I2C_Master_ADD10+0x26>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d108      	bne.n	80068ea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00c      	beq.n	80068fa <I2C_Master_ADD10+0x48>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d007      	beq.n	80068fa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f8:	605a      	str	r2, [r3, #4]
  }
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006906:	b480      	push	{r7}
 8006908:	b091      	sub	sp, #68	; 0x44
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006914:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b22      	cmp	r3, #34	; 0x22
 800692e:	f040 8169 	bne.w	8006c04 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10f      	bne.n	800695a <I2C_Master_ADDR+0x54>
 800693a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	d10b      	bne.n	800695a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006942:	2300      	movs	r3, #0
 8006944:	633b      	str	r3, [r7, #48]	; 0x30
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	633b      	str	r3, [r7, #48]	; 0x30
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	633b      	str	r3, [r7, #48]	; 0x30
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	e160      	b.n	8006c1c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695e:	2b00      	cmp	r3, #0
 8006960:	d11d      	bne.n	800699e <I2C_Master_ADDR+0x98>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800696a:	d118      	bne.n	800699e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800696c:	2300      	movs	r3, #0
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006990:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	651a      	str	r2, [r3, #80]	; 0x50
 800699c:	e13e      	b.n	8006c1c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d113      	bne.n	80069d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069a8:	2300      	movs	r3, #0
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	e115      	b.n	8006bfc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	f040 808a 	bne.w	8006af0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069e2:	d137      	bne.n	8006a54 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a02:	d113      	bne.n	8006a2c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a12:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a14:	2300      	movs	r3, #0
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	e0e7      	b.n	8006bfc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	623b      	str	r3, [r7, #32]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	623b      	str	r3, [r7, #32]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	623b      	str	r3, [r7, #32]
 8006a40:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	e0d3      	b.n	8006bfc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d02e      	beq.n	8006ab8 <I2C_Master_ADDR+0x1b2>
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d02b      	beq.n	8006ab8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a62:	2b12      	cmp	r3, #18
 8006a64:	d102      	bne.n	8006a6c <I2C_Master_ADDR+0x166>
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d125      	bne.n	8006ab8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d00e      	beq.n	8006a90 <I2C_Master_ADDR+0x18a>
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d00b      	beq.n	8006a90 <I2C_Master_ADDR+0x18a>
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	2b10      	cmp	r3, #16
 8006a7c:	d008      	beq.n	8006a90 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	e007      	b.n	8006aa0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a9e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	61fb      	str	r3, [r7, #28]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	e0a1      	b.n	8006bfc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac8:	2300      	movs	r3, #0
 8006aca:	61bb      	str	r3, [r7, #24]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	e085      	b.n	8006bfc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d14d      	bne.n	8006b96 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d016      	beq.n	8006b2e <I2C_Master_ADDR+0x228>
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d013      	beq.n	8006b2e <I2C_Master_ADDR+0x228>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d010      	beq.n	8006b2e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b1a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	e007      	b.n	8006b3e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b3c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b4c:	d117      	bne.n	8006b7e <I2C_Master_ADDR+0x278>
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b54:	d00b      	beq.n	8006b6e <I2C_Master_ADDR+0x268>
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d008      	beq.n	8006b6e <I2C_Master_ADDR+0x268>
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	d005      	beq.n	8006b6e <I2C_Master_ADDR+0x268>
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b64:	2b10      	cmp	r3, #16
 8006b66:	d002      	beq.n	8006b6e <I2C_Master_ADDR+0x268>
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d107      	bne.n	8006b7e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b7e:	2300      	movs	r3, #0
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	e032      	b.n	8006bfc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ba4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb4:	d117      	bne.n	8006be6 <I2C_Master_ADDR+0x2e0>
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bbc:	d00b      	beq.n	8006bd6 <I2C_Master_ADDR+0x2d0>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d008      	beq.n	8006bd6 <I2C_Master_ADDR+0x2d0>
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d005      	beq.n	8006bd6 <I2C_Master_ADDR+0x2d0>
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bcc:	2b10      	cmp	r3, #16
 8006bce:	d002      	beq.n	8006bd6 <I2C_Master_ADDR+0x2d0>
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d107      	bne.n	8006be6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006be4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006be6:	2300      	movs	r3, #0
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	613b      	str	r3, [r7, #16]
 8006bfa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006c02:	e00b      	b.n	8006c1c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	60fb      	str	r3, [r7, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	68fb      	ldr	r3, [r7, #12]
}
 8006c1a:	e7ff      	b.n	8006c1c <I2C_Master_ADDR+0x316>
 8006c1c:	bf00      	nop
 8006c1e:	3744      	adds	r7, #68	; 0x44
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d02b      	beq.n	8006c9a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	781a      	ldrb	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d114      	bne.n	8006c9a <I2C_SlaveTransmit_TXE+0x72>
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b29      	cmp	r3, #41	; 0x29
 8006c74:	d111      	bne.n	8006c9a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c84:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2221      	movs	r2, #33	; 0x21
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2228      	movs	r2, #40	; 0x28
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff f9e7 	bl	8006068 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006c9a:	bf00      	nop
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d011      	beq.n	8006cd8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	781a      	ldrb	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d02c      	beq.n	8006d58 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	691a      	ldr	r2, [r3, #16]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	b2d2      	uxtb	r2, r2
 8006d0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d114      	bne.n	8006d58 <I2C_SlaveReceive_RXNE+0x74>
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b2a      	cmp	r3, #42	; 0x2a
 8006d32:	d111      	bne.n	8006d58 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d42:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2222      	movs	r2, #34	; 0x22
 8006d48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2228      	movs	r2, #40	; 0x28
 8006d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7ff f992 	bl	800607c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006d58:	bf00      	nop
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d012      	beq.n	8006d98 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006dbe:	2b28      	cmp	r3, #40	; 0x28
 8006dc0:	d127      	bne.n	8006e12 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	089b      	lsrs	r3, r3, #2
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006dde:	2301      	movs	r3, #1
 8006de0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	09db      	lsrs	r3, r3, #7
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d103      	bne.n	8006df6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	81bb      	strh	r3, [r7, #12]
 8006df4:	e002      	b.n	8006dfc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006e04:	89ba      	ldrh	r2, [r7, #12]
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff f940 	bl	8006090 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006e10:	e00e      	b.n	8006e30 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e12:	2300      	movs	r3, #0
 8006e14:	60bb      	str	r3, [r7, #8]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	60bb      	str	r3, [r7, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	60bb      	str	r3, [r7, #8]
 8006e26:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006e30:	bf00      	nop
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e46:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e56:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60bb      	str	r3, [r7, #8]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	60bb      	str	r3, [r7, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0201 	orr.w	r2, r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e84:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e94:	d172      	bne.n	8006f7c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	2b22      	cmp	r3, #34	; 0x22
 8006e9a:	d002      	beq.n	8006ea2 <I2C_Slave_STOPF+0x6a>
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8006ea0:	d135      	bne.n	8006f0e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d005      	beq.n	8006ec6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	f043 0204 	orr.w	r2, r3, #4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ed4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe f843 	bl	8004f66 <HAL_DMA_GetState>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d049      	beq.n	8006f7a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	4a69      	ldr	r2, [pc, #420]	; (8007090 <I2C_Slave_STOPF+0x258>)
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe f815 	bl	8004f22 <HAL_DMA_Abort_IT>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d03d      	beq.n	8006f7a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f0c:	e035      	b.n	8006f7a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	f043 0204 	orr.w	r2, r3, #4
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe f80d 	bl	8004f66 <HAL_DMA_GetState>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d014      	beq.n	8006f7c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f56:	4a4e      	ldr	r2, [pc, #312]	; (8007090 <I2C_Slave_STOPF+0x258>)
 8006f58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fd ffdf 	bl	8004f22 <HAL_DMA_Abort_IT>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
 8006f78:	e000      	b.n	8006f7c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f7a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d03e      	beq.n	8007004 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d112      	bne.n	8006fba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc4:	2b40      	cmp	r3, #64	; 0x40
 8006fc6:	d112      	bne.n	8006fee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691a      	ldr	r2, [r3, #16]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffc:	f043 0204 	orr.w	r2, r3, #4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f8b3 	bl	8007178 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007012:	e039      	b.n	8007088 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007014:	7bfb      	ldrb	r3, [r7, #15]
 8007016:	2b2a      	cmp	r3, #42	; 0x2a
 8007018:	d109      	bne.n	800702e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2228      	movs	r2, #40	; 0x28
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7ff f827 	bl	800607c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b28      	cmp	r3, #40	; 0x28
 8007038:	d111      	bne.n	800705e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a15      	ldr	r2, [pc, #84]	; (8007094 <I2C_Slave_STOPF+0x25c>)
 800703e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7ff f828 	bl	80060ac <HAL_I2C_ListenCpltCallback>
}
 800705c:	e014      	b.n	8007088 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	2b22      	cmp	r3, #34	; 0x22
 8007064:	d002      	beq.n	800706c <I2C_Slave_STOPF+0x234>
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	2b22      	cmp	r3, #34	; 0x22
 800706a:	d10d      	bne.n	8007088 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fe fffa 	bl	800607c <HAL_I2C_SlaveRxCpltCallback>
}
 8007088:	bf00      	nop
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	0800767d 	.word	0x0800767d
 8007094:	ffff0000 	.word	0xffff0000

08007098 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d002      	beq.n	80070ba <I2C_Slave_AF+0x22>
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b20      	cmp	r3, #32
 80070b8:	d129      	bne.n	800710e <I2C_Slave_AF+0x76>
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	2b28      	cmp	r3, #40	; 0x28
 80070be:	d126      	bne.n	800710e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a2c      	ldr	r2, [pc, #176]	; (8007174 <I2C_Slave_AF+0xdc>)
 80070c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070d4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070de:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fe ffd0 	bl	80060ac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800710c:	e02e      	b.n	800716c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	2b21      	cmp	r3, #33	; 0x21
 8007112:	d126      	bne.n	8007162 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a17      	ldr	r2, [pc, #92]	; (8007174 <I2C_Slave_AF+0xdc>)
 8007118:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2221      	movs	r2, #33	; 0x21
 800711e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800713e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007148:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007158:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fe ff84 	bl	8006068 <HAL_I2C_SlaveTxCpltCallback>
}
 8007160:	e004      	b.n	800716c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800716a:	615a      	str	r2, [r3, #20]
}
 800716c:	bf00      	nop
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	ffff0000 	.word	0xffff0000

08007178 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007186:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800718e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b10      	cmp	r3, #16
 8007194:	d002      	beq.n	800719c <I2C_ITError+0x24>
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	2b40      	cmp	r3, #64	; 0x40
 800719a:	d10a      	bne.n	80071b2 <I2C_ITError+0x3a>
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	2b22      	cmp	r3, #34	; 0x22
 80071a0:	d107      	bne.n	80071b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071b8:	2b28      	cmp	r3, #40	; 0x28
 80071ba:	d107      	bne.n	80071cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2228      	movs	r2, #40	; 0x28
 80071c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071ca:	e015      	b.n	80071f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071da:	d00a      	beq.n	80071f2 <I2C_ITError+0x7a>
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	2b60      	cmp	r3, #96	; 0x60
 80071e0:	d007      	beq.n	80071f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007206:	d162      	bne.n	80072ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007216:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b01      	cmp	r3, #1
 8007224:	d020      	beq.n	8007268 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	4a6a      	ldr	r2, [pc, #424]	; (80073d4 <I2C_ITError+0x25c>)
 800722c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007232:	4618      	mov	r0, r3
 8007234:	f7fd fe75 	bl	8004f22 <HAL_DMA_Abort_IT>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 8089 	beq.w	8007352 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0201 	bic.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007262:	4610      	mov	r0, r2
 8007264:	4798      	blx	r3
 8007266:	e074      	b.n	8007352 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	4a59      	ldr	r2, [pc, #356]	; (80073d4 <I2C_ITError+0x25c>)
 800726e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	4618      	mov	r0, r3
 8007276:	f7fd fe54 	bl	8004f22 <HAL_DMA_Abort_IT>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d068      	beq.n	8007352 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d10b      	bne.n	80072a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	691a      	ldr	r2, [r3, #16]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	b2d2      	uxtb	r2, r2
 800729a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0201 	bic.w	r2, r2, #1
 80072b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072c8:	4610      	mov	r0, r2
 80072ca:	4798      	blx	r3
 80072cc:	e041      	b.n	8007352 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b60      	cmp	r3, #96	; 0x60
 80072d8:	d125      	bne.n	8007326 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f2:	2b40      	cmp	r3, #64	; 0x40
 80072f4:	d10b      	bne.n	800730e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	b2d2      	uxtb	r2, r2
 8007302:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fe feec 	bl	80060fc <HAL_I2C_AbortCpltCallback>
 8007324:	e015      	b.n	8007352 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007330:	2b40      	cmp	r3, #64	; 0x40
 8007332:	d10b      	bne.n	800734c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	b2d2      	uxtb	r2, r2
 8007340:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7fe fecb 	bl	80060e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10e      	bne.n	8007380 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007368:	2b00      	cmp	r3, #0
 800736a:	d109      	bne.n	8007380 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007372:	2b00      	cmp	r3, #0
 8007374:	d104      	bne.n	8007380 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800738e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007396:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d113      	bne.n	80073cc <I2C_ITError+0x254>
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b28      	cmp	r3, #40	; 0x28
 80073a8:	d110      	bne.n	80073cc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a0a      	ldr	r2, [pc, #40]	; (80073d8 <I2C_ITError+0x260>)
 80073ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7fe fe70 	bl	80060ac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073cc:	bf00      	nop
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	0800767d 	.word	0x0800767d
 80073d8:	ffff0000 	.word	0xffff0000

080073dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	607a      	str	r2, [r7, #4]
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	460b      	mov	r3, r1
 80073ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d006      	beq.n	8007406 <I2C_MasterRequestWrite+0x2a>
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d003      	beq.n	8007406 <I2C_MasterRequestWrite+0x2a>
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007404:	d108      	bne.n	8007418 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	e00b      	b.n	8007430 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741c:	2b12      	cmp	r3, #18
 800741e:	d107      	bne.n	8007430 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800742e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 f9c5 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00d      	beq.n	8007464 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007456:	d103      	bne.n	8007460 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800745e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e035      	b.n	80074d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800746c:	d108      	bne.n	8007480 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800746e:	897b      	ldrh	r3, [r7, #10]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	461a      	mov	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800747c:	611a      	str	r2, [r3, #16]
 800747e:	e01b      	b.n	80074b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007480:	897b      	ldrh	r3, [r7, #10]
 8007482:	11db      	asrs	r3, r3, #7
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 0306 	and.w	r3, r3, #6
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f063 030f 	orn	r3, r3, #15
 8007490:	b2da      	uxtb	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	490e      	ldr	r1, [pc, #56]	; (80074d8 <I2C_MasterRequestWrite+0xfc>)
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 f9eb 	bl	800787a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e010      	b.n	80074d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80074ae:	897b      	ldrh	r3, [r7, #10]
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	4907      	ldr	r1, [pc, #28]	; (80074dc <I2C_MasterRequestWrite+0x100>)
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f9db 	bl	800787a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e000      	b.n	80074d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	00010008 	.word	0x00010008
 80074dc:	00010002 	.word	0x00010002

080074e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	460b      	mov	r3, r1
 80074ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007504:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b08      	cmp	r3, #8
 800750a:	d006      	beq.n	800751a <I2C_MasterRequestRead+0x3a>
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d003      	beq.n	800751a <I2C_MasterRequestRead+0x3a>
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007518:	d108      	bne.n	800752c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	e00b      	b.n	8007544 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	2b11      	cmp	r3, #17
 8007532:	d107      	bne.n	8007544 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007542:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f93b 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00d      	beq.n	8007578 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800756a:	d103      	bne.n	8007574 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007572:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e079      	b.n	800766c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007580:	d108      	bne.n	8007594 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007582:	897b      	ldrh	r3, [r7, #10]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	f043 0301 	orr.w	r3, r3, #1
 800758a:	b2da      	uxtb	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	611a      	str	r2, [r3, #16]
 8007592:	e05f      	b.n	8007654 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007594:	897b      	ldrh	r3, [r7, #10]
 8007596:	11db      	asrs	r3, r3, #7
 8007598:	b2db      	uxtb	r3, r3
 800759a:	f003 0306 	and.w	r3, r3, #6
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	f063 030f 	orn	r3, r3, #15
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	4930      	ldr	r1, [pc, #192]	; (8007674 <I2C_MasterRequestRead+0x194>)
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 f961 	bl	800787a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e054      	b.n	800766c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075c2:	897b      	ldrh	r3, [r7, #10]
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	4929      	ldr	r1, [pc, #164]	; (8007678 <I2C_MasterRequestRead+0x198>)
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 f951 	bl	800787a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e044      	b.n	800766c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075e2:	2300      	movs	r3, #0
 80075e4:	613b      	str	r3, [r7, #16]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	613b      	str	r3, [r7, #16]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	613b      	str	r3, [r7, #16]
 80075f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007606:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f8d9 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00d      	beq.n	800763c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762e:	d103      	bne.n	8007638 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007636:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e017      	b.n	800766c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800763c:	897b      	ldrh	r3, [r7, #10]
 800763e:	11db      	asrs	r3, r3, #7
 8007640:	b2db      	uxtb	r3, r3
 8007642:	f003 0306 	and.w	r3, r3, #6
 8007646:	b2db      	uxtb	r3, r3
 8007648:	f063 030e 	orn	r3, r3, #14
 800764c:	b2da      	uxtb	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	4907      	ldr	r1, [pc, #28]	; (8007678 <I2C_MasterRequestRead+0x198>)
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 f90d 	bl	800787a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e000      	b.n	800766c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	00010008 	.word	0x00010008
 8007678:	00010002 	.word	0x00010002

0800767c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007694:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007696:	4b4b      	ldr	r3, [pc, #300]	; (80077c4 <I2C_DMAAbort+0x148>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	08db      	lsrs	r3, r3, #3
 800769c:	4a4a      	ldr	r2, [pc, #296]	; (80077c8 <I2C_DMAAbort+0x14c>)
 800769e:	fba2 2303 	umull	r2, r3, r2, r3
 80076a2:	0a1a      	lsrs	r2, r3, #8
 80076a4:	4613      	mov	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	00da      	lsls	r2, r3, #3
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	f043 0220 	orr.w	r2, r3, #32
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80076c2:	e00a      	b.n	80076da <I2C_DMAAbort+0x5e>
    }
    count--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d8:	d0ea      	beq.n	80076b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e6:	2200      	movs	r2, #0
 80076e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f6:	2200      	movs	r2, #0
 80076f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007708:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2200      	movs	r2, #0
 800770e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771c:	2200      	movs	r2, #0
 800771e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	2200      	movs	r2, #0
 800772e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0201 	bic.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b60      	cmp	r3, #96	; 0x60
 800774a:	d10e      	bne.n	800776a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2200      	movs	r2, #0
 8007760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007762:	6978      	ldr	r0, [r7, #20]
 8007764:	f7fe fcca 	bl	80060fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007768:	e027      	b.n	80077ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800776a:	7cfb      	ldrb	r3, [r7, #19]
 800776c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007770:	2b28      	cmp	r3, #40	; 0x28
 8007772:	d117      	bne.n	80077a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0201 	orr.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007792:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2200      	movs	r2, #0
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2228      	movs	r2, #40	; 0x28
 800779e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077a2:	e007      	b.n	80077b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80077b4:	6978      	ldr	r0, [r7, #20]
 80077b6:	f7fe fc97 	bl	80060e8 <HAL_I2C_ErrorCallback>
}
 80077ba:	bf00      	nop
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000014 	.word	0x20000014
 80077c8:	14f8b589 	.word	0x14f8b589

080077cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	4613      	mov	r3, r2
 80077da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077dc:	e025      	b.n	800782a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d021      	beq.n	800782a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e6:	f7fc ffe9 	bl	80047bc <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d302      	bcc.n	80077fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d116      	bne.n	800782a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2220      	movs	r2, #32
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	f043 0220 	orr.w	r2, r3, #32
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e023      	b.n	8007872 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	0c1b      	lsrs	r3, r3, #16
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d10d      	bne.n	8007850 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	43da      	mvns	r2, r3
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4013      	ands	r3, r2
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	bf0c      	ite	eq
 8007846:	2301      	moveq	r3, #1
 8007848:	2300      	movne	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	e00c      	b.n	800786a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	43da      	mvns	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4013      	ands	r3, r2
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	bf0c      	ite	eq
 8007862:	2301      	moveq	r3, #1
 8007864:	2300      	movne	r3, #0
 8007866:	b2db      	uxtb	r3, r3
 8007868:	461a      	mov	r2, r3
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	429a      	cmp	r2, r3
 800786e:	d0b6      	beq.n	80077de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	607a      	str	r2, [r7, #4]
 8007886:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007888:	e051      	b.n	800792e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007898:	d123      	bne.n	80078e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2220      	movs	r2, #32
 80078be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	f043 0204 	orr.w	r2, r3, #4
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e046      	b.n	8007970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e8:	d021      	beq.n	800792e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ea:	f7fc ff67 	bl	80047bc <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d302      	bcc.n	8007900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d116      	bne.n	800792e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2220      	movs	r2, #32
 800790a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	f043 0220 	orr.w	r2, r3, #32
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e020      	b.n	8007970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	0c1b      	lsrs	r3, r3, #16
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b01      	cmp	r3, #1
 8007936:	d10c      	bne.n	8007952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	43da      	mvns	r2, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4013      	ands	r3, r2
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	bf14      	ite	ne
 800794a:	2301      	movne	r3, #1
 800794c:	2300      	moveq	r3, #0
 800794e:	b2db      	uxtb	r3, r3
 8007950:	e00b      	b.n	800796a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	43da      	mvns	r2, r3
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	4013      	ands	r3, r2
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	bf14      	ite	ne
 8007964:	2301      	movne	r3, #1
 8007966:	2300      	moveq	r3, #0
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d18d      	bne.n	800788a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007984:	e02d      	b.n	80079e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 f900 	bl	8007b8c <I2C_IsAcknowledgeFailed>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e02d      	b.n	80079f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d021      	beq.n	80079e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800799e:	f7fc ff0d 	bl	80047bc <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d302      	bcc.n	80079b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d116      	bne.n	80079e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	f043 0220 	orr.w	r2, r3, #32
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e007      	b.n	80079f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ec:	2b80      	cmp	r3, #128	; 0x80
 80079ee:	d1ca      	bne.n	8007986 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	60b9      	str	r1, [r7, #8]
 8007a04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a06:	e02d      	b.n	8007a64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f8bf 	bl	8007b8c <I2C_IsAcknowledgeFailed>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e02d      	b.n	8007a74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1e:	d021      	beq.n	8007a64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a20:	f7fc fecc 	bl	80047bc <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d302      	bcc.n	8007a36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d116      	bne.n	8007a64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a50:	f043 0220 	orr.w	r2, r3, #32
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e007      	b.n	8007a74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d1ca      	bne.n	8007a08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007a88:	4b13      	ldr	r3, [pc, #76]	; (8007ad8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	08db      	lsrs	r3, r3, #3
 8007a8e:	4a13      	ldr	r2, [pc, #76]	; (8007adc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007a90:	fba2 2303 	umull	r2, r3, r2, r3
 8007a94:	0a1a      	lsrs	r2, r3, #8
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d107      	bne.n	8007aba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	f043 0220 	orr.w	r2, r3, #32
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e008      	b.n	8007acc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac8:	d0e9      	beq.n	8007a9e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	20000014 	.word	0x20000014
 8007adc:	14f8b589 	.word	0x14f8b589

08007ae0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007aec:	e042      	b.n	8007b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	f003 0310 	and.w	r3, r3, #16
 8007af8:	2b10      	cmp	r3, #16
 8007afa:	d119      	bne.n	8007b30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0210 	mvn.w	r2, #16
 8007b04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e029      	b.n	8007b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b30:	f7fc fe44 	bl	80047bc <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d302      	bcc.n	8007b46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d116      	bne.n	8007b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	f043 0220 	orr.w	r2, r3, #32
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e007      	b.n	8007b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7e:	2b40      	cmp	r3, #64	; 0x40
 8007b80:	d1b5      	bne.n	8007aee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ba2:	d11b      	bne.n	8007bdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc8:	f043 0204 	orr.w	r2, r3, #4
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e000      	b.n	8007bde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007bfa:	d103      	bne.n	8007c04 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c02:	e007      	b.n	8007c14 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007c0c:	d102      	bne.n	8007c14 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2208      	movs	r2, #8
 8007c12:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	d129      	bne.n	8007c8a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2224      	movs	r2, #36	; 0x24
 8007c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0201 	bic.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0210 	bic.w	r2, r2, #16
 8007c5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f042 0201 	orr.w	r2, r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e000      	b.n	8007c8c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007c8a:	2302      	movs	r3, #2
  }
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	d12a      	bne.n	8007d08 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2224      	movs	r2, #36	; 0x24
 8007cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0201 	bic.w	r2, r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007cd2:	89fb      	ldrh	r3, [r7, #14]
 8007cd4:	f023 030f 	bic.w	r3, r3, #15
 8007cd8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	89fb      	ldrh	r3, [r7, #14]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	89fa      	ldrh	r2, [r7, #14]
 8007cea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0201 	orr.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	e000      	b.n	8007d0a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007d08:	2302      	movs	r3, #2
  }
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007d16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d18:	b08f      	sub	sp, #60	; 0x3c
 8007d1a:	af0a      	add	r7, sp, #40	; 0x28
 8007d1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e10f      	b.n	8007f48 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d106      	bne.n	8007d48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f006 fed0 	bl	800eae8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2203      	movs	r2, #3
 8007d4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d102      	bne.n	8007d62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f003 f9bd 	bl	800b0e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	603b      	str	r3, [r7, #0]
 8007d72:	687e      	ldr	r6, [r7, #4]
 8007d74:	466d      	mov	r5, sp
 8007d76:	f106 0410 	add.w	r4, r6, #16
 8007d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d86:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d8a:	1d33      	adds	r3, r6, #4
 8007d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d8e:	6838      	ldr	r0, [r7, #0]
 8007d90:	f003 f894 	bl	800aebc <USB_CoreInit>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d005      	beq.n	8007da6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e0d0      	b.n	8007f48 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2100      	movs	r1, #0
 8007dac:	4618      	mov	r0, r3
 8007dae:	f003 f9ab 	bl	800b108 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007db2:	2300      	movs	r3, #0
 8007db4:	73fb      	strb	r3, [r7, #15]
 8007db6:	e04a      	b.n	8007e4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007db8:	7bfa      	ldrb	r2, [r7, #15]
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	440b      	add	r3, r1
 8007dc6:	333d      	adds	r3, #61	; 0x3d
 8007dc8:	2201      	movs	r2, #1
 8007dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007dcc:	7bfa      	ldrb	r2, [r7, #15]
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	440b      	add	r3, r1
 8007dda:	333c      	adds	r3, #60	; 0x3c
 8007ddc:	7bfa      	ldrb	r2, [r7, #15]
 8007dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007de0:	7bfa      	ldrb	r2, [r7, #15]
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	b298      	uxth	r0, r3
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	4613      	mov	r3, r2
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	4413      	add	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	440b      	add	r3, r1
 8007df2:	3344      	adds	r3, #68	; 0x44
 8007df4:	4602      	mov	r2, r0
 8007df6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007df8:	7bfa      	ldrb	r2, [r7, #15]
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	4413      	add	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	440b      	add	r3, r1
 8007e06:	3340      	adds	r3, #64	; 0x40
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007e0c:	7bfa      	ldrb	r2, [r7, #15]
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	4613      	mov	r3, r2
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	3348      	adds	r3, #72	; 0x48
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007e20:	7bfa      	ldrb	r2, [r7, #15]
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	4613      	mov	r3, r2
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	334c      	adds	r3, #76	; 0x4c
 8007e30:	2200      	movs	r2, #0
 8007e32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007e34:	7bfa      	ldrb	r2, [r7, #15]
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	440b      	add	r3, r1
 8007e42:	3354      	adds	r3, #84	; 0x54
 8007e44:	2200      	movs	r2, #0
 8007e46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	73fb      	strb	r3, [r7, #15]
 8007e4e:	7bfa      	ldrb	r2, [r7, #15]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d3af      	bcc.n	8007db8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
 8007e5c:	e044      	b.n	8007ee8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007e5e:	7bfa      	ldrb	r2, [r7, #15]
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	4613      	mov	r3, r2
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	440b      	add	r3, r1
 8007e6c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007e74:	7bfa      	ldrb	r2, [r7, #15]
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	440b      	add	r3, r1
 8007e82:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007e86:	7bfa      	ldrb	r2, [r7, #15]
 8007e88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007e8a:	7bfa      	ldrb	r2, [r7, #15]
 8007e8c:	6879      	ldr	r1, [r7, #4]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	440b      	add	r3, r1
 8007e98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007ea0:	7bfa      	ldrb	r2, [r7, #15]
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007eb6:	7bfa      	ldrb	r2, [r7, #15]
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	00db      	lsls	r3, r3, #3
 8007ebe:	4413      	add	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	440b      	add	r3, r1
 8007ec4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007ecc:	7bfa      	ldrb	r2, [r7, #15]
 8007ece:	6879      	ldr	r1, [r7, #4]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	4413      	add	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	440b      	add	r3, r1
 8007eda:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007ede:	2200      	movs	r2, #0
 8007ee0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	73fb      	strb	r3, [r7, #15]
 8007ee8:	7bfa      	ldrb	r2, [r7, #15]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d3b5      	bcc.n	8007e5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	603b      	str	r3, [r7, #0]
 8007ef8:	687e      	ldr	r6, [r7, #4]
 8007efa:	466d      	mov	r5, sp
 8007efc:	f106 0410 	add.w	r4, r6, #16
 8007f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f10:	1d33      	adds	r3, r6, #4
 8007f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f14:	6838      	ldr	r0, [r7, #0]
 8007f16:	f003 f943 	bl	800b1a0 <USB_DevInit>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d005      	beq.n	8007f2c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e00d      	b.n	8007f48 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f004 fa92 	bl	800c46a <USB_DevDisconnect>

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_PCD_Start+0x1c>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e020      	b.n	8007fae <HAL_PCD_Start+0x5e>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d109      	bne.n	8007f90 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d005      	beq.n	8007f90 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f003 f895 	bl	800b0c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f004 fa42 	bl	800c428 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007fb6:	b590      	push	{r4, r7, lr}
 8007fb8:	b08d      	sub	sp, #52	; 0x34
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f004 fb00 	bl	800c5d2 <USB_GetMode>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f040 848a 	bne.w	80088ee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f004 fa64 	bl	800c4ac <USB_ReadInterrupts>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 8480 	beq.w	80088ec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	0a1b      	lsrs	r3, r3, #8
 8007ff6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4618      	mov	r0, r3
 8008006:	f004 fa51 	bl	800c4ac <USB_ReadInterrupts>
 800800a:	4603      	mov	r3, r0
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b02      	cmp	r3, #2
 8008012:	d107      	bne.n	8008024 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695a      	ldr	r2, [r3, #20]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f002 0202 	and.w	r2, r2, #2
 8008022:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4618      	mov	r0, r3
 800802a:	f004 fa3f 	bl	800c4ac <USB_ReadInterrupts>
 800802e:	4603      	mov	r3, r0
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b10      	cmp	r3, #16
 8008036:	d161      	bne.n	80080fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	699a      	ldr	r2, [r3, #24]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0210 	bic.w	r2, r2, #16
 8008046:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	f003 020f 	and.w	r2, r3, #15
 8008054:	4613      	mov	r3, r2
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	4413      	add	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	4413      	add	r3, r2
 8008064:	3304      	adds	r3, #4
 8008066:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	0c5b      	lsrs	r3, r3, #17
 800806c:	f003 030f 	and.w	r3, r3, #15
 8008070:	2b02      	cmp	r3, #2
 8008072:	d124      	bne.n	80080be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800807a:	4013      	ands	r3, r2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d035      	beq.n	80080ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	091b      	lsrs	r3, r3, #4
 8008088:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800808a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800808e:	b29b      	uxth	r3, r3
 8008090:	461a      	mov	r2, r3
 8008092:	6a38      	ldr	r0, [r7, #32]
 8008094:	f004 f876 	bl	800c184 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	691a      	ldr	r2, [r3, #16]
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	091b      	lsrs	r3, r3, #4
 80080a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080a4:	441a      	add	r2, r3
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	6a1a      	ldr	r2, [r3, #32]
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	091b      	lsrs	r3, r3, #4
 80080b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080b6:	441a      	add	r2, r3
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	621a      	str	r2, [r3, #32]
 80080bc:	e016      	b.n	80080ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	0c5b      	lsrs	r3, r3, #17
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	2b06      	cmp	r3, #6
 80080c8:	d110      	bne.n	80080ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80080d0:	2208      	movs	r2, #8
 80080d2:	4619      	mov	r1, r3
 80080d4:	6a38      	ldr	r0, [r7, #32]
 80080d6:	f004 f855 	bl	800c184 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	6a1a      	ldr	r2, [r3, #32]
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	091b      	lsrs	r3, r3, #4
 80080e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080e6:	441a      	add	r2, r3
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f042 0210 	orr.w	r2, r2, #16
 80080fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f004 f9d3 	bl	800c4ac <USB_ReadInterrupts>
 8008106:	4603      	mov	r3, r0
 8008108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800810c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008110:	f040 80a7 	bne.w	8008262 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4618      	mov	r0, r3
 800811e:	f004 f9d8 	bl	800c4d2 <USB_ReadDevAllOutEpInterrupt>
 8008122:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008124:	e099      	b.n	800825a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 808e 	beq.w	800824e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008138:	b2d2      	uxtb	r2, r2
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f004 f9fc 	bl	800c53a <USB_ReadDevOutEPInterrupt>
 8008142:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00c      	beq.n	8008168 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	461a      	mov	r2, r3
 800815c:	2301      	movs	r3, #1
 800815e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fec2 	bl	8008eec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00c      	beq.n	800818c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	4413      	add	r3, r2
 800817a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817e:	461a      	mov	r2, r3
 8008180:	2308      	movs	r3, #8
 8008182:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 ff98 	bl	80090bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	f003 0310 	and.w	r3, r3, #16
 8008192:	2b00      	cmp	r3, #0
 8008194:	d008      	beq.n	80081a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a2:	461a      	mov	r2, r3
 80081a4:	2310      	movs	r3, #16
 80081a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d030      	beq.n	8008214 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ba:	2b80      	cmp	r3, #128	; 0x80
 80081bc:	d109      	bne.n	80081d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	69fa      	ldr	r2, [r7, #28]
 80081c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80081d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d4:	4613      	mov	r3, r2
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	4413      	add	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	4413      	add	r3, r2
 80081e4:	3304      	adds	r3, #4
 80081e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	78db      	ldrb	r3, [r3, #3]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d108      	bne.n	8008202 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2200      	movs	r2, #0
 80081f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f006 fd79 	bl	800ecf4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820e:	461a      	mov	r2, r3
 8008210:	2302      	movs	r3, #2
 8008212:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f003 0320 	and.w	r3, r3, #32
 800821a:	2b00      	cmp	r3, #0
 800821c:	d008      	beq.n	8008230 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822a:	461a      	mov	r2, r3
 800822c:	2320      	movs	r3, #32
 800822e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d009      	beq.n	800824e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008246:	461a      	mov	r2, r3
 8008248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800824c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	3301      	adds	r3, #1
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	085b      	lsrs	r3, r3, #1
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	2b00      	cmp	r3, #0
 800825e:	f47f af62 	bne.w	8008126 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f004 f920 	bl	800c4ac <USB_ReadInterrupts>
 800826c:	4603      	mov	r3, r0
 800826e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008272:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008276:	f040 80db 	bne.w	8008430 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f004 f941 	bl	800c506 <USB_ReadDevAllInEpInterrupt>
 8008284:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800828a:	e0cd      	b.n	8008428 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 80c2 	beq.w	800841c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	4611      	mov	r1, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f004 f967 	bl	800c576 <USB_ReadDevInEPInterrupt>
 80082a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d057      	beq.n	8008364 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	2201      	movs	r2, #1
 80082bc:	fa02 f303 	lsl.w	r3, r2, r3
 80082c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	43db      	mvns	r3, r3
 80082ce:	69f9      	ldr	r1, [r7, #28]
 80082d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082d4:	4013      	ands	r3, r2
 80082d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e4:	461a      	mov	r2, r3
 80082e6:	2301      	movs	r3, #1
 80082e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d132      	bne.n	8008358 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f6:	4613      	mov	r3, r2
 80082f8:	00db      	lsls	r3, r3, #3
 80082fa:	4413      	add	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	440b      	add	r3, r1
 8008300:	334c      	adds	r3, #76	; 0x4c
 8008302:	6819      	ldr	r1, [r3, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008308:	4613      	mov	r3, r2
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4403      	add	r3, r0
 8008312:	3348      	adds	r3, #72	; 0x48
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4419      	add	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831c:	4613      	mov	r3, r2
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4403      	add	r3, r0
 8008326:	334c      	adds	r3, #76	; 0x4c
 8008328:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	d113      	bne.n	8008358 <HAL_PCD_IRQHandler+0x3a2>
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008334:	4613      	mov	r3, r2
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	440b      	add	r3, r1
 800833e:	3354      	adds	r3, #84	; 0x54
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d108      	bne.n	8008358 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008350:	461a      	mov	r2, r3
 8008352:	2101      	movs	r1, #1
 8008354:	f004 f96e 	bl	800c634 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	b2db      	uxtb	r3, r3
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f006 fc43 	bl	800ebea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f003 0308 	and.w	r3, r3, #8
 800836a:	2b00      	cmp	r3, #0
 800836c:	d008      	beq.n	8008380 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	4413      	add	r3, r2
 8008376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837a:	461a      	mov	r2, r3
 800837c:	2308      	movs	r3, #8
 800837e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f003 0310 	and.w	r3, r3, #16
 8008386:	2b00      	cmp	r3, #0
 8008388:	d008      	beq.n	800839c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008396:	461a      	mov	r2, r3
 8008398:	2310      	movs	r3, #16
 800839a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d008      	beq.n	80083b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b2:	461a      	mov	r2, r3
 80083b4:	2340      	movs	r3, #64	; 0x40
 80083b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d023      	beq.n	800840a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80083c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083c4:	6a38      	ldr	r0, [r7, #32]
 80083c6:	f003 f84f 	bl	800b468 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80083ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083cc:	4613      	mov	r3, r2
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	3338      	adds	r3, #56	; 0x38
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	4413      	add	r3, r2
 80083da:	3304      	adds	r3, #4
 80083dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	78db      	ldrb	r3, [r3, #3]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d108      	bne.n	80083f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2200      	movs	r2, #0
 80083ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f006 fc90 	bl	800ed18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008404:	461a      	mov	r2, r3
 8008406:	2302      	movs	r3, #2
 8008408:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fcdb 	bl	8008dd2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	3301      	adds	r3, #1
 8008420:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	085b      	lsrs	r3, r3, #1
 8008426:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	2b00      	cmp	r3, #0
 800842c:	f47f af2e 	bne.w	800828c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4618      	mov	r0, r3
 8008436:	f004 f839 	bl	800c4ac <USB_ReadInterrupts>
 800843a:	4603      	mov	r3, r0
 800843c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008444:	d122      	bne.n	800848c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	69fa      	ldr	r2, [r7, #28]
 8008450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008454:	f023 0301 	bic.w	r3, r3, #1
 8008458:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008460:	2b01      	cmp	r3, #1
 8008462:	d108      	bne.n	8008476 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800846c:	2100      	movs	r1, #0
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fec2 	bl	80091f8 <HAL_PCDEx_LPM_Callback>
 8008474:	e002      	b.n	800847c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f006 fc2e 	bl	800ecd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	695a      	ldr	r2, [r3, #20]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800848a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f004 f80b 	bl	800c4ac <USB_ReadInterrupts>
 8008496:	4603      	mov	r3, r0
 8008498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800849c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084a0:	d112      	bne.n	80084c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d102      	bne.n	80084b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f006 fbea 	bl	800ec8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695a      	ldr	r2, [r3, #20]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80084c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f003 ffed 	bl	800c4ac <USB_ReadInterrupts>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084dc:	f040 80b7 	bne.w	800864e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	69fa      	ldr	r2, [r7, #28]
 80084ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084ee:	f023 0301 	bic.w	r3, r3, #1
 80084f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2110      	movs	r1, #16
 80084fa:	4618      	mov	r0, r3
 80084fc:	f002 ffb4 	bl	800b468 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008500:	2300      	movs	r3, #0
 8008502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008504:	e046      	b.n	8008594 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008512:	461a      	mov	r2, r3
 8008514:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008518:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800852a:	0151      	lsls	r1, r2, #5
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	440a      	add	r2, r1
 8008530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008534:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008538:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800853a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008546:	461a      	mov	r2, r3
 8008548:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800854c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800855e:	0151      	lsls	r1, r2, #5
 8008560:	69fa      	ldr	r2, [r7, #28]
 8008562:	440a      	add	r2, r1
 8008564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008568:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800856c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800857e:	0151      	lsls	r1, r2, #5
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	440a      	add	r2, r1
 8008584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008588:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800858c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	3301      	adds	r3, #1
 8008592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800859a:	429a      	cmp	r2, r3
 800859c:	d3b3      	bcc.n	8008506 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80085b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d016      	beq.n	80085e8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085c4:	69fa      	ldr	r2, [r7, #28]
 80085c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ca:	f043 030b 	orr.w	r3, r3, #11
 80085ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085da:	69fa      	ldr	r2, [r7, #28]
 80085dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085e0:	f043 030b 	orr.w	r3, r3, #11
 80085e4:	6453      	str	r3, [r2, #68]	; 0x44
 80085e6:	e015      	b.n	8008614 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	69fa      	ldr	r2, [r7, #28]
 80085f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80085fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800860e:	f043 030b 	orr.w	r3, r3, #11
 8008612:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	69fa      	ldr	r2, [r7, #28]
 800861e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008622:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008626:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6818      	ldr	r0, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008638:	461a      	mov	r2, r3
 800863a:	f003 fffb 	bl	800c634 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	695a      	ldr	r2, [r3, #20]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800864c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4618      	mov	r0, r3
 8008654:	f003 ff2a 	bl	800c4ac <USB_ReadInterrupts>
 8008658:	4603      	mov	r3, r0
 800865a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800865e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008662:	d124      	bne.n	80086ae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4618      	mov	r0, r3
 800866a:	f003 ffc0 	bl	800c5ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f002 ff75 	bl	800b562 <USB_GetDevSpeed>
 8008678:	4603      	mov	r3, r0
 800867a:	461a      	mov	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681c      	ldr	r4, [r3, #0]
 8008684:	f001 fa28 	bl	8009ad8 <HAL_RCC_GetHCLKFreq>
 8008688:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800868e:	b2db      	uxtb	r3, r3
 8008690:	461a      	mov	r2, r3
 8008692:	4620      	mov	r0, r4
 8008694:	f002 fc74 	bl	800af80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f006 face 	bl	800ec3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	695a      	ldr	r2, [r3, #20]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80086ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f003 fefa 	bl	800c4ac <USB_ReadInterrupts>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f003 0308 	and.w	r3, r3, #8
 80086be:	2b08      	cmp	r3, #8
 80086c0:	d10a      	bne.n	80086d8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f006 faab 	bl	800ec1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	695a      	ldr	r2, [r3, #20]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f002 0208 	and.w	r2, r2, #8
 80086d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4618      	mov	r0, r3
 80086de:	f003 fee5 	bl	800c4ac <USB_ReadInterrupts>
 80086e2:	4603      	mov	r3, r0
 80086e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e8:	2b80      	cmp	r3, #128	; 0x80
 80086ea:	d122      	bne.n	8008732 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086f8:	2301      	movs	r3, #1
 80086fa:	627b      	str	r3, [r7, #36]	; 0x24
 80086fc:	e014      	b.n	8008728 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008702:	4613      	mov	r3, r2
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d105      	bne.n	8008722 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	b2db      	uxtb	r3, r3
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fb27 	bl	8008d70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	3301      	adds	r3, #1
 8008726:	627b      	str	r3, [r7, #36]	; 0x24
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872e:	429a      	cmp	r2, r3
 8008730:	d3e5      	bcc.n	80086fe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f003 feb8 	bl	800c4ac <USB_ReadInterrupts>
 800873c:	4603      	mov	r3, r0
 800873e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008746:	d13b      	bne.n	80087c0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008748:	2301      	movs	r3, #1
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
 800874c:	e02b      	b.n	80087a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008762:	4613      	mov	r3, r2
 8008764:	00db      	lsls	r3, r3, #3
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	440b      	add	r3, r1
 800876c:	3340      	adds	r3, #64	; 0x40
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d115      	bne.n	80087a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008774:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008776:	2b00      	cmp	r3, #0
 8008778:	da12      	bge.n	80087a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877e:	4613      	mov	r3, r2
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	333f      	adds	r3, #63	; 0x3f
 800878a:	2201      	movs	r2, #1
 800878c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	b2db      	uxtb	r3, r3
 8008792:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008796:	b2db      	uxtb	r3, r3
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fae8 	bl	8008d70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	3301      	adds	r3, #1
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d3ce      	bcc.n	800874e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695a      	ldr	r2, [r3, #20]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80087be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f003 fe71 	bl	800c4ac <USB_ReadInterrupts>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087d4:	d155      	bne.n	8008882 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80087d6:	2301      	movs	r3, #1
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
 80087da:	e045      	b.n	8008868 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f0:	4613      	mov	r3, r2
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	4413      	add	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	440b      	add	r3, r1
 80087fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d12e      	bne.n	8008862 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008804:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008806:	2b00      	cmp	r3, #0
 8008808:	da2b      	bge.n	8008862 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008816:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800881a:	429a      	cmp	r2, r3
 800881c:	d121      	bne.n	8008862 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008822:	4613      	mov	r3, r2
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008830:	2201      	movs	r2, #1
 8008832:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	69fa      	ldr	r2, [r7, #28]
 8008856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800885a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800885e:	6053      	str	r3, [r2, #4]
            break;
 8008860:	e007      	b.n	8008872 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	3301      	adds	r3, #1
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886e:	429a      	cmp	r2, r3
 8008870:	d3b4      	bcc.n	80087dc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	695a      	ldr	r2, [r3, #20]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4618      	mov	r0, r3
 8008888:	f003 fe10 	bl	800c4ac <USB_ReadInterrupts>
 800888c:	4603      	mov	r3, r0
 800888e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008896:	d10a      	bne.n	80088ae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f006 fa4f 	bl	800ed3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	695a      	ldr	r2, [r3, #20]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80088ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f003 fdfa 	bl	800c4ac <USB_ReadInterrupts>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f003 0304 	and.w	r3, r3, #4
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d115      	bne.n	80088ee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f006 fa3f 	bl	800ed58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6859      	ldr	r1, [r3, #4]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	605a      	str	r2, [r3, #4]
 80088ea:	e000      	b.n	80088ee <HAL_PCD_IRQHandler+0x938>
      return;
 80088ec:	bf00      	nop
    }
  }
}
 80088ee:	3734      	adds	r7, #52	; 0x34
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd90      	pop	{r4, r7, pc}

080088f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008906:	2b01      	cmp	r3, #1
 8008908:	d101      	bne.n	800890e <HAL_PCD_SetAddress+0x1a>
 800890a:	2302      	movs	r3, #2
 800890c:	e013      	b.n	8008936 <HAL_PCD_SetAddress+0x42>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	78fa      	ldrb	r2, [r7, #3]
 8008924:	4611      	mov	r1, r2
 8008926:	4618      	mov	r0, r3
 8008928:	f003 fd58 	bl	800c3dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b084      	sub	sp, #16
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	4608      	mov	r0, r1
 8008948:	4611      	mov	r1, r2
 800894a:	461a      	mov	r2, r3
 800894c:	4603      	mov	r3, r0
 800894e:	70fb      	strb	r3, [r7, #3]
 8008950:	460b      	mov	r3, r1
 8008952:	803b      	strh	r3, [r7, #0]
 8008954:	4613      	mov	r3, r2
 8008956:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800895c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008960:	2b00      	cmp	r3, #0
 8008962:	da0f      	bge.n	8008984 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	f003 020f 	and.w	r2, r3, #15
 800896a:	4613      	mov	r3, r2
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	4413      	add	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	3338      	adds	r3, #56	; 0x38
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	4413      	add	r3, r2
 8008978:	3304      	adds	r3, #4
 800897a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2201      	movs	r2, #1
 8008980:	705a      	strb	r2, [r3, #1]
 8008982:	e00f      	b.n	80089a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	f003 020f 	and.w	r2, r3, #15
 800898a:	4613      	mov	r3, r2
 800898c:	00db      	lsls	r3, r3, #3
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	4413      	add	r3, r2
 800899a:	3304      	adds	r3, #4
 800899c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80089b0:	883a      	ldrh	r2, [r7, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	78ba      	ldrb	r2, [r7, #2]
 80089ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	785b      	ldrb	r3, [r3, #1]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d004      	beq.n	80089ce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80089ce:	78bb      	ldrb	r3, [r7, #2]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d102      	bne.n	80089da <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d101      	bne.n	80089e8 <HAL_PCD_EP_Open+0xaa>
 80089e4:	2302      	movs	r3, #2
 80089e6:	e00e      	b.n	8008a06 <HAL_PCD_EP_Open+0xc8>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68f9      	ldr	r1, [r7, #12]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f002 fdd8 	bl	800b5ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008a04:	7afb      	ldrb	r3, [r7, #11]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008a1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	da0f      	bge.n	8008a42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a22:	78fb      	ldrb	r3, [r7, #3]
 8008a24:	f003 020f 	and.w	r2, r3, #15
 8008a28:	4613      	mov	r3, r2
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	3338      	adds	r3, #56	; 0x38
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	4413      	add	r3, r2
 8008a36:	3304      	adds	r3, #4
 8008a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	705a      	strb	r2, [r3, #1]
 8008a40:	e00f      	b.n	8008a62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a42:	78fb      	ldrb	r3, [r7, #3]
 8008a44:	f003 020f 	and.w	r2, r3, #15
 8008a48:	4613      	mov	r3, r2
 8008a4a:	00db      	lsls	r3, r3, #3
 8008a4c:	4413      	add	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	4413      	add	r3, r2
 8008a58:	3304      	adds	r3, #4
 8008a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008a62:	78fb      	ldrb	r3, [r7, #3]
 8008a64:	f003 030f 	and.w	r3, r3, #15
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_PCD_EP_Close+0x6e>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e00e      	b.n	8008a9a <HAL_PCD_EP_Close+0x8c>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68f9      	ldr	r1, [r7, #12]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f002 fe16 	bl	800b6bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b086      	sub	sp, #24
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ab2:	7afb      	ldrb	r3, [r7, #11]
 8008ab4:	f003 020f 	and.w	r2, r3, #15
 8008ab8:	4613      	mov	r3, r2
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	3304      	adds	r3, #4
 8008aca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2200      	movs	r2, #0
 8008adc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ae4:	7afb      	ldrb	r3, [r7, #11]
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d102      	bne.n	8008afe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008afe:	7afb      	ldrb	r3, [r7, #11]
 8008b00:	f003 030f 	and.w	r3, r3, #15
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d109      	bne.n	8008b1c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	461a      	mov	r2, r3
 8008b14:	6979      	ldr	r1, [r7, #20]
 8008b16:	f003 f8f5 	bl	800bd04 <USB_EP0StartXfer>
 8008b1a:	e008      	b.n	8008b2e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	461a      	mov	r2, r3
 8008b28:	6979      	ldr	r1, [r7, #20]
 8008b2a:	f002 fea3 	bl	800b874 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	f003 020f 	and.w	r2, r3, #15
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	00db      	lsls	r3, r3, #3
 8008b50:	4413      	add	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	440b      	add	r3, r1
 8008b56:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008b5a:	681b      	ldr	r3, [r3, #0]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	607a      	str	r2, [r7, #4]
 8008b72:	603b      	str	r3, [r7, #0]
 8008b74:	460b      	mov	r3, r1
 8008b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b78:	7afb      	ldrb	r3, [r7, #11]
 8008b7a:	f003 020f 	and.w	r2, r3, #15
 8008b7e:	4613      	mov	r3, r2
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	3338      	adds	r3, #56	; 0x38
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ba8:	7afb      	ldrb	r3, [r7, #11]
 8008baa:	f003 030f 	and.w	r3, r3, #15
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d102      	bne.n	8008bc2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008bc2:	7afb      	ldrb	r3, [r7, #11]
 8008bc4:	f003 030f 	and.w	r3, r3, #15
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d109      	bne.n	8008be0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6818      	ldr	r0, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	6979      	ldr	r1, [r7, #20]
 8008bda:	f003 f893 	bl	800bd04 <USB_EP0StartXfer>
 8008bde:	e008      	b.n	8008bf2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	461a      	mov	r2, r3
 8008bec:	6979      	ldr	r1, [r7, #20]
 8008bee:	f002 fe41 	bl	800b874 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	f003 020f 	and.w	r2, r3, #15
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d901      	bls.n	8008c1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e050      	b.n	8008cbc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	da0f      	bge.n	8008c42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c22:	78fb      	ldrb	r3, [r7, #3]
 8008c24:	f003 020f 	and.w	r2, r3, #15
 8008c28:	4613      	mov	r3, r2
 8008c2a:	00db      	lsls	r3, r3, #3
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	3338      	adds	r3, #56	; 0x38
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	4413      	add	r3, r2
 8008c36:	3304      	adds	r3, #4
 8008c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	705a      	strb	r2, [r3, #1]
 8008c40:	e00d      	b.n	8008c5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008c42:	78fa      	ldrb	r2, [r7, #3]
 8008c44:	4613      	mov	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	4413      	add	r3, r2
 8008c54:	3304      	adds	r3, #4
 8008c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2201      	movs	r2, #1
 8008c62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	f003 030f 	and.w	r3, r3, #15
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d101      	bne.n	8008c7e <HAL_PCD_EP_SetStall+0x82>
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	e01e      	b.n	8008cbc <HAL_PCD_EP_SetStall+0xc0>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68f9      	ldr	r1, [r7, #12]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f003 fad1 	bl	800c234 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c92:	78fb      	ldrb	r3, [r7, #3]
 8008c94:	f003 030f 	and.w	r3, r3, #15
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10a      	bne.n	8008cb2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6818      	ldr	r0, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	b2d9      	uxtb	r1, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008cac:	461a      	mov	r2, r3
 8008cae:	f003 fcc1 	bl	800c634 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	f003 020f 	and.w	r2, r3, #15
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d901      	bls.n	8008ce2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e042      	b.n	8008d68 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ce2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	da0f      	bge.n	8008d0a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cea:	78fb      	ldrb	r3, [r7, #3]
 8008cec:	f003 020f 	and.w	r2, r3, #15
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	00db      	lsls	r3, r3, #3
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	3338      	adds	r3, #56	; 0x38
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	3304      	adds	r3, #4
 8008d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2201      	movs	r2, #1
 8008d06:	705a      	strb	r2, [r3, #1]
 8008d08:	e00f      	b.n	8008d2a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	f003 020f 	and.w	r2, r3, #15
 8008d10:	4613      	mov	r3, r2
 8008d12:	00db      	lsls	r3, r3, #3
 8008d14:	4413      	add	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	4413      	add	r3, r2
 8008d20:	3304      	adds	r3, #4
 8008d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	f003 030f 	and.w	r3, r3, #15
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d101      	bne.n	8008d4a <HAL_PCD_EP_ClrStall+0x86>
 8008d46:	2302      	movs	r3, #2
 8008d48:	e00e      	b.n	8008d68 <HAL_PCD_EP_ClrStall+0xa4>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68f9      	ldr	r1, [r7, #12]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f003 fad9 	bl	800c310 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	da0c      	bge.n	8008d9e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	f003 020f 	and.w	r2, r3, #15
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	3338      	adds	r3, #56	; 0x38
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	4413      	add	r3, r2
 8008d98:	3304      	adds	r3, #4
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	e00c      	b.n	8008db8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	f003 020f 	and.w	r2, r3, #15
 8008da4:	4613      	mov	r3, r2
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	4413      	add	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	4413      	add	r3, r2
 8008db4:	3304      	adds	r3, #4
 8008db6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68f9      	ldr	r1, [r7, #12]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f003 f8f8 	bl	800bfb4 <USB_EPStopXfer>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b08a      	sub	sp, #40	; 0x28
 8008dd6:	af02      	add	r7, sp, #8
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	4613      	mov	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	3338      	adds	r3, #56	; 0x38
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	4413      	add	r3, r2
 8008df6:	3304      	adds	r3, #4
 8008df8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6a1a      	ldr	r2, [r3, #32]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d901      	bls.n	8008e0a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e06c      	b.n	8008ee4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	699a      	ldr	r2, [r3, #24]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d902      	bls.n	8008e26 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	3303      	adds	r3, #3
 8008e2a:	089b      	lsrs	r3, r3, #2
 8008e2c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e2e:	e02b      	b.n	8008e88 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	699a      	ldr	r2, [r3, #24]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	69fa      	ldr	r2, [r7, #28]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d902      	bls.n	8008e4c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	3303      	adds	r3, #3
 8008e50:	089b      	lsrs	r3, r3, #2
 8008e52:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6919      	ldr	r1, [r3, #16]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	4603      	mov	r3, r0
 8008e6a:	6978      	ldr	r0, [r7, #20]
 8008e6c:	f003 f94c 	bl	800c108 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	691a      	ldr	r2, [r3, #16]
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	441a      	add	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6a1a      	ldr	r2, [r3, #32]
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	441a      	add	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d809      	bhi.n	8008eb2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6a1a      	ldr	r2, [r3, #32]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d203      	bcs.n	8008eb2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1be      	bne.n	8008e30 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	699a      	ldr	r2, [r3, #24]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d811      	bhi.n	8008ee2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	f003 030f 	and.w	r3, r3, #15
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	43db      	mvns	r3, r3
 8008ed8:	6939      	ldr	r1, [r7, #16]
 8008eda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ede:	4013      	ands	r3, r2
 8008ee0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3720      	adds	r7, #32
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	333c      	adds	r3, #60	; 0x3c
 8008f04:	3304      	adds	r3, #4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d17b      	bne.n	800901a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f003 0308 	and.w	r3, r3, #8
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d015      	beq.n	8008f58 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	4a61      	ldr	r2, [pc, #388]	; (80090b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	f240 80b9 	bls.w	80090a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 80b3 	beq.w	80090a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	015a      	lsls	r2, r3, #5
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f54:	6093      	str	r3, [r2, #8]
 8008f56:	e0a7      	b.n	80090a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d009      	beq.n	8008f76 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6e:	461a      	mov	r2, r3
 8008f70:	2320      	movs	r3, #32
 8008f72:	6093      	str	r3, [r2, #8]
 8008f74:	e098      	b.n	80090a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f040 8093 	bne.w	80090a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	4a4b      	ldr	r2, [pc, #300]	; (80090b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d90f      	bls.n	8008faa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00a      	beq.n	8008faa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fa6:	6093      	str	r3, [r2, #8]
 8008fa8:	e07e      	b.n	80090a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	4613      	mov	r3, r2
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	4413      	add	r3, r2
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	69da      	ldr	r2, [r3, #28]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	0159      	lsls	r1, r3, #5
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	440b      	add	r3, r1
 8008fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fd6:	1ad2      	subs	r2, r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d114      	bne.n	800900c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d109      	bne.n	8008ffe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	f003 fb1c 	bl	800c634 <USB_EP0_OutStart>
 8008ffc:	e006      	b.n	800900c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	691a      	ldr	r2, [r3, #16]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	441a      	add	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	b2db      	uxtb	r3, r3
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f005 fdce 	bl	800ebb4 <HAL_PCD_DataOutStageCallback>
 8009018:	e046      	b.n	80090a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	4a26      	ldr	r2, [pc, #152]	; (80090b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d124      	bne.n	800906c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00a      	beq.n	8009042 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009038:	461a      	mov	r2, r3
 800903a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800903e:	6093      	str	r3, [r2, #8]
 8009040:	e032      	b.n	80090a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f003 0320 	and.w	r3, r3, #32
 8009048:	2b00      	cmp	r3, #0
 800904a:	d008      	beq.n	800905e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009058:	461a      	mov	r2, r3
 800905a:	2320      	movs	r3, #32
 800905c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f005 fda5 	bl	800ebb4 <HAL_PCD_DataOutStageCallback>
 800906a:	e01d      	b.n	80090a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d114      	bne.n	800909c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	4613      	mov	r3, r2
 8009078:	00db      	lsls	r3, r3, #3
 800907a:	4413      	add	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	440b      	add	r3, r1
 8009080:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d108      	bne.n	800909c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009094:	461a      	mov	r2, r3
 8009096:	2100      	movs	r1, #0
 8009098:	f003 facc 	bl	800c634 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f005 fd86 	bl	800ebb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	4f54300a 	.word	0x4f54300a
 80090b8:	4f54310a 	.word	0x4f54310a

080090bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	333c      	adds	r3, #60	; 0x3c
 80090d4:	3304      	adds	r3, #4
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4a15      	ldr	r2, [pc, #84]	; (8009144 <PCD_EP_OutSetupPacket_int+0x88>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d90e      	bls.n	8009110 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d009      	beq.n	8009110 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009108:	461a      	mov	r2, r3
 800910a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800910e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f005 fd3d 	bl	800eb90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	4a0a      	ldr	r2, [pc, #40]	; (8009144 <PCD_EP_OutSetupPacket_int+0x88>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d90c      	bls.n	8009138 <PCD_EP_OutSetupPacket_int+0x7c>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d108      	bne.n	8009138 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009130:	461a      	mov	r2, r3
 8009132:	2101      	movs	r1, #1
 8009134:	f003 fa7e 	bl	800c634 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	4f54300a 	.word	0x4f54300a

08009148 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
 8009154:	4613      	mov	r3, r2
 8009156:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d107      	bne.n	8009176 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009166:	883b      	ldrh	r3, [r7, #0]
 8009168:	0419      	lsls	r1, r3, #16
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	430a      	orrs	r2, r1
 8009172:	629a      	str	r2, [r3, #40]	; 0x28
 8009174:	e028      	b.n	80091c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917c:	0c1b      	lsrs	r3, r3, #16
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	4413      	add	r3, r2
 8009182:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]
 8009188:	e00d      	b.n	80091a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	3340      	adds	r3, #64	; 0x40
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	0c1b      	lsrs	r3, r3, #16
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	4413      	add	r3, r2
 800919e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	3301      	adds	r3, #1
 80091a4:	73fb      	strb	r3, [r7, #15]
 80091a6:	7bfa      	ldrb	r2, [r7, #15]
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d3ec      	bcc.n	800918a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80091b0:	883b      	ldrh	r3, [r7, #0]
 80091b2:	0418      	lsls	r0, r3, #16
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6819      	ldr	r1, [r3, #0]
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	4302      	orrs	r2, r0
 80091c0:	3340      	adds	r3, #64	; 0x40
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	440b      	add	r3, r1
 80091c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	460b      	mov	r3, r1
 80091e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	887a      	ldrh	r2, [r7, #2]
 80091e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d101      	bne.n	8009222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e267      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	d075      	beq.n	800931a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800922e:	4b88      	ldr	r3, [pc, #544]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f003 030c 	and.w	r3, r3, #12
 8009236:	2b04      	cmp	r3, #4
 8009238:	d00c      	beq.n	8009254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800923a:	4b85      	ldr	r3, [pc, #532]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009242:	2b08      	cmp	r3, #8
 8009244:	d112      	bne.n	800926c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009246:	4b82      	ldr	r3, [pc, #520]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800924e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009252:	d10b      	bne.n	800926c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009254:	4b7e      	ldr	r3, [pc, #504]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d05b      	beq.n	8009318 <HAL_RCC_OscConfig+0x108>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d157      	bne.n	8009318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e242      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009274:	d106      	bne.n	8009284 <HAL_RCC_OscConfig+0x74>
 8009276:	4b76      	ldr	r3, [pc, #472]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a75      	ldr	r2, [pc, #468]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 800927c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	e01d      	b.n	80092c0 <HAL_RCC_OscConfig+0xb0>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800928c:	d10c      	bne.n	80092a8 <HAL_RCC_OscConfig+0x98>
 800928e:	4b70      	ldr	r3, [pc, #448]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a6f      	ldr	r2, [pc, #444]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 8009294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009298:	6013      	str	r3, [r2, #0]
 800929a:	4b6d      	ldr	r3, [pc, #436]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a6c      	ldr	r2, [pc, #432]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 80092a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	e00b      	b.n	80092c0 <HAL_RCC_OscConfig+0xb0>
 80092a8:	4b69      	ldr	r3, [pc, #420]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a68      	ldr	r2, [pc, #416]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 80092ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	4b66      	ldr	r3, [pc, #408]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a65      	ldr	r2, [pc, #404]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 80092ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d013      	beq.n	80092f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092c8:	f7fb fa78 	bl	80047bc <HAL_GetTick>
 80092cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092ce:	e008      	b.n	80092e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092d0:	f7fb fa74 	bl	80047bc <HAL_GetTick>
 80092d4:	4602      	mov	r2, r0
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	2b64      	cmp	r3, #100	; 0x64
 80092dc:	d901      	bls.n	80092e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e207      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092e2:	4b5b      	ldr	r3, [pc, #364]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d0f0      	beq.n	80092d0 <HAL_RCC_OscConfig+0xc0>
 80092ee:	e014      	b.n	800931a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092f0:	f7fb fa64 	bl	80047bc <HAL_GetTick>
 80092f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092f6:	e008      	b.n	800930a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092f8:	f7fb fa60 	bl	80047bc <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b64      	cmp	r3, #100	; 0x64
 8009304:	d901      	bls.n	800930a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e1f3      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800930a:	4b51      	ldr	r3, [pc, #324]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1f0      	bne.n	80092f8 <HAL_RCC_OscConfig+0xe8>
 8009316:	e000      	b.n	800931a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d063      	beq.n	80093ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009326:	4b4a      	ldr	r3, [pc, #296]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f003 030c 	and.w	r3, r3, #12
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00b      	beq.n	800934a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009332:	4b47      	ldr	r3, [pc, #284]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800933a:	2b08      	cmp	r3, #8
 800933c:	d11c      	bne.n	8009378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800933e:	4b44      	ldr	r3, [pc, #272]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d116      	bne.n	8009378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800934a:	4b41      	ldr	r3, [pc, #260]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0302 	and.w	r3, r3, #2
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <HAL_RCC_OscConfig+0x152>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d001      	beq.n	8009362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e1c7      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009362:	4b3b      	ldr	r3, [pc, #236]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	4937      	ldr	r1, [pc, #220]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 8009372:	4313      	orrs	r3, r2
 8009374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009376:	e03a      	b.n	80093ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d020      	beq.n	80093c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009380:	4b34      	ldr	r3, [pc, #208]	; (8009454 <HAL_RCC_OscConfig+0x244>)
 8009382:	2201      	movs	r2, #1
 8009384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009386:	f7fb fa19 	bl	80047bc <HAL_GetTick>
 800938a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800938c:	e008      	b.n	80093a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800938e:	f7fb fa15 	bl	80047bc <HAL_GetTick>
 8009392:	4602      	mov	r2, r0
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	2b02      	cmp	r3, #2
 800939a:	d901      	bls.n	80093a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e1a8      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093a0:	4b2b      	ldr	r3, [pc, #172]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0f0      	beq.n	800938e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093ac:	4b28      	ldr	r3, [pc, #160]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	4925      	ldr	r1, [pc, #148]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 80093bc:	4313      	orrs	r3, r2
 80093be:	600b      	str	r3, [r1, #0]
 80093c0:	e015      	b.n	80093ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093c2:	4b24      	ldr	r3, [pc, #144]	; (8009454 <HAL_RCC_OscConfig+0x244>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c8:	f7fb f9f8 	bl	80047bc <HAL_GetTick>
 80093cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093ce:	e008      	b.n	80093e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093d0:	f7fb f9f4 	bl	80047bc <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d901      	bls.n	80093e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e187      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093e2:	4b1b      	ldr	r3, [pc, #108]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0302 	and.w	r3, r3, #2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1f0      	bne.n	80093d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0308 	and.w	r3, r3, #8
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d036      	beq.n	8009468 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d016      	beq.n	8009430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009402:	4b15      	ldr	r3, [pc, #84]	; (8009458 <HAL_RCC_OscConfig+0x248>)
 8009404:	2201      	movs	r2, #1
 8009406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009408:	f7fb f9d8 	bl	80047bc <HAL_GetTick>
 800940c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800940e:	e008      	b.n	8009422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009410:	f7fb f9d4 	bl	80047bc <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b02      	cmp	r3, #2
 800941c:	d901      	bls.n	8009422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e167      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009422:	4b0b      	ldr	r3, [pc, #44]	; (8009450 <HAL_RCC_OscConfig+0x240>)
 8009424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009426:	f003 0302 	and.w	r3, r3, #2
 800942a:	2b00      	cmp	r3, #0
 800942c:	d0f0      	beq.n	8009410 <HAL_RCC_OscConfig+0x200>
 800942e:	e01b      	b.n	8009468 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009430:	4b09      	ldr	r3, [pc, #36]	; (8009458 <HAL_RCC_OscConfig+0x248>)
 8009432:	2200      	movs	r2, #0
 8009434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009436:	f7fb f9c1 	bl	80047bc <HAL_GetTick>
 800943a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800943c:	e00e      	b.n	800945c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800943e:	f7fb f9bd 	bl	80047bc <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	2b02      	cmp	r3, #2
 800944a:	d907      	bls.n	800945c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	e150      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
 8009450:	40023800 	.word	0x40023800
 8009454:	42470000 	.word	0x42470000
 8009458:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800945c:	4b88      	ldr	r3, [pc, #544]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 800945e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009460:	f003 0302 	and.w	r3, r3, #2
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1ea      	bne.n	800943e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 8097 	beq.w	80095a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009476:	2300      	movs	r3, #0
 8009478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800947a:	4b81      	ldr	r3, [pc, #516]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 800947c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10f      	bne.n	80094a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009486:	2300      	movs	r3, #0
 8009488:	60bb      	str	r3, [r7, #8]
 800948a:	4b7d      	ldr	r3, [pc, #500]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 800948c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948e:	4a7c      	ldr	r2, [pc, #496]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 8009490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009494:	6413      	str	r3, [r2, #64]	; 0x40
 8009496:	4b7a      	ldr	r3, [pc, #488]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 8009498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800949e:	60bb      	str	r3, [r7, #8]
 80094a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094a2:	2301      	movs	r3, #1
 80094a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094a6:	4b77      	ldr	r3, [pc, #476]	; (8009684 <HAL_RCC_OscConfig+0x474>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d118      	bne.n	80094e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094b2:	4b74      	ldr	r3, [pc, #464]	; (8009684 <HAL_RCC_OscConfig+0x474>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a73      	ldr	r2, [pc, #460]	; (8009684 <HAL_RCC_OscConfig+0x474>)
 80094b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094be:	f7fb f97d 	bl	80047bc <HAL_GetTick>
 80094c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094c4:	e008      	b.n	80094d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094c6:	f7fb f979 	bl	80047bc <HAL_GetTick>
 80094ca:	4602      	mov	r2, r0
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d901      	bls.n	80094d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	e10c      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094d8:	4b6a      	ldr	r3, [pc, #424]	; (8009684 <HAL_RCC_OscConfig+0x474>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d0f0      	beq.n	80094c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d106      	bne.n	80094fa <HAL_RCC_OscConfig+0x2ea>
 80094ec:	4b64      	ldr	r3, [pc, #400]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 80094ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f0:	4a63      	ldr	r2, [pc, #396]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 80094f2:	f043 0301 	orr.w	r3, r3, #1
 80094f6:	6713      	str	r3, [r2, #112]	; 0x70
 80094f8:	e01c      	b.n	8009534 <HAL_RCC_OscConfig+0x324>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	2b05      	cmp	r3, #5
 8009500:	d10c      	bne.n	800951c <HAL_RCC_OscConfig+0x30c>
 8009502:	4b5f      	ldr	r3, [pc, #380]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 8009504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009506:	4a5e      	ldr	r2, [pc, #376]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 8009508:	f043 0304 	orr.w	r3, r3, #4
 800950c:	6713      	str	r3, [r2, #112]	; 0x70
 800950e:	4b5c      	ldr	r3, [pc, #368]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 8009510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009512:	4a5b      	ldr	r2, [pc, #364]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 8009514:	f043 0301 	orr.w	r3, r3, #1
 8009518:	6713      	str	r3, [r2, #112]	; 0x70
 800951a:	e00b      	b.n	8009534 <HAL_RCC_OscConfig+0x324>
 800951c:	4b58      	ldr	r3, [pc, #352]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 800951e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009520:	4a57      	ldr	r2, [pc, #348]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 8009522:	f023 0301 	bic.w	r3, r3, #1
 8009526:	6713      	str	r3, [r2, #112]	; 0x70
 8009528:	4b55      	ldr	r3, [pc, #340]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 800952a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952c:	4a54      	ldr	r2, [pc, #336]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 800952e:	f023 0304 	bic.w	r3, r3, #4
 8009532:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d015      	beq.n	8009568 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800953c:	f7fb f93e 	bl	80047bc <HAL_GetTick>
 8009540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009542:	e00a      	b.n	800955a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009544:	f7fb f93a 	bl	80047bc <HAL_GetTick>
 8009548:	4602      	mov	r2, r0
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009552:	4293      	cmp	r3, r2
 8009554:	d901      	bls.n	800955a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e0cb      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800955a:	4b49      	ldr	r3, [pc, #292]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 800955c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0ee      	beq.n	8009544 <HAL_RCC_OscConfig+0x334>
 8009566:	e014      	b.n	8009592 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009568:	f7fb f928 	bl	80047bc <HAL_GetTick>
 800956c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800956e:	e00a      	b.n	8009586 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009570:	f7fb f924 	bl	80047bc <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	f241 3288 	movw	r2, #5000	; 0x1388
 800957e:	4293      	cmp	r3, r2
 8009580:	d901      	bls.n	8009586 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e0b5      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009586:	4b3e      	ldr	r3, [pc, #248]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 8009588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1ee      	bne.n	8009570 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009592:	7dfb      	ldrb	r3, [r7, #23]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d105      	bne.n	80095a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009598:	4b39      	ldr	r3, [pc, #228]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 800959a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959c:	4a38      	ldr	r2, [pc, #224]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 800959e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 80a1 	beq.w	80096f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80095ae:	4b34      	ldr	r3, [pc, #208]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f003 030c 	and.w	r3, r3, #12
 80095b6:	2b08      	cmp	r3, #8
 80095b8:	d05c      	beq.n	8009674 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d141      	bne.n	8009646 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095c2:	4b31      	ldr	r3, [pc, #196]	; (8009688 <HAL_RCC_OscConfig+0x478>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095c8:	f7fb f8f8 	bl	80047bc <HAL_GetTick>
 80095cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ce:	e008      	b.n	80095e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095d0:	f7fb f8f4 	bl	80047bc <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d901      	bls.n	80095e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e087      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095e2:	4b27      	ldr	r3, [pc, #156]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1f0      	bne.n	80095d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	69da      	ldr	r2, [r3, #28]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	431a      	orrs	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fc:	019b      	lsls	r3, r3, #6
 80095fe:	431a      	orrs	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009604:	085b      	lsrs	r3, r3, #1
 8009606:	3b01      	subs	r3, #1
 8009608:	041b      	lsls	r3, r3, #16
 800960a:	431a      	orrs	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009610:	061b      	lsls	r3, r3, #24
 8009612:	491b      	ldr	r1, [pc, #108]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 8009614:	4313      	orrs	r3, r2
 8009616:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009618:	4b1b      	ldr	r3, [pc, #108]	; (8009688 <HAL_RCC_OscConfig+0x478>)
 800961a:	2201      	movs	r2, #1
 800961c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800961e:	f7fb f8cd 	bl	80047bc <HAL_GetTick>
 8009622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009624:	e008      	b.n	8009638 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009626:	f7fb f8c9 	bl	80047bc <HAL_GetTick>
 800962a:	4602      	mov	r2, r0
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	2b02      	cmp	r3, #2
 8009632:	d901      	bls.n	8009638 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e05c      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009638:	4b11      	ldr	r3, [pc, #68]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d0f0      	beq.n	8009626 <HAL_RCC_OscConfig+0x416>
 8009644:	e054      	b.n	80096f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009646:	4b10      	ldr	r3, [pc, #64]	; (8009688 <HAL_RCC_OscConfig+0x478>)
 8009648:	2200      	movs	r2, #0
 800964a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800964c:	f7fb f8b6 	bl	80047bc <HAL_GetTick>
 8009650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009652:	e008      	b.n	8009666 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009654:	f7fb f8b2 	bl	80047bc <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b02      	cmp	r3, #2
 8009660:	d901      	bls.n	8009666 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	e045      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009666:	4b06      	ldr	r3, [pc, #24]	; (8009680 <HAL_RCC_OscConfig+0x470>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1f0      	bne.n	8009654 <HAL_RCC_OscConfig+0x444>
 8009672:	e03d      	b.n	80096f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d107      	bne.n	800968c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e038      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
 8009680:	40023800 	.word	0x40023800
 8009684:	40007000 	.word	0x40007000
 8009688:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800968c:	4b1b      	ldr	r3, [pc, #108]	; (80096fc <HAL_RCC_OscConfig+0x4ec>)
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	2b01      	cmp	r3, #1
 8009698:	d028      	beq.n	80096ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d121      	bne.n	80096ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d11a      	bne.n	80096ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80096bc:	4013      	ands	r3, r2
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80096c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d111      	bne.n	80096ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d2:	085b      	lsrs	r3, r3, #1
 80096d4:	3b01      	subs	r3, #1
 80096d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80096d8:	429a      	cmp	r2, r3
 80096da:	d107      	bne.n	80096ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d001      	beq.n	80096f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e000      	b.n	80096f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	40023800 	.word	0x40023800

08009700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e0cc      	b.n	80098ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009714:	4b68      	ldr	r3, [pc, #416]	; (80098b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 030f 	and.w	r3, r3, #15
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	d90c      	bls.n	800973c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009722:	4b65      	ldr	r3, [pc, #404]	; (80098b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	b2d2      	uxtb	r2, r2
 8009728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800972a:	4b63      	ldr	r3, [pc, #396]	; (80098b8 <HAL_RCC_ClockConfig+0x1b8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 030f 	and.w	r3, r3, #15
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d001      	beq.n	800973c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e0b8      	b.n	80098ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d020      	beq.n	800978a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0304 	and.w	r3, r3, #4
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009754:	4b59      	ldr	r3, [pc, #356]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	4a58      	ldr	r2, [pc, #352]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 800975a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800975e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0308 	and.w	r3, r3, #8
 8009768:	2b00      	cmp	r3, #0
 800976a:	d005      	beq.n	8009778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800976c:	4b53      	ldr	r3, [pc, #332]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	4a52      	ldr	r2, [pc, #328]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 8009772:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009778:	4b50      	ldr	r3, [pc, #320]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	494d      	ldr	r1, [pc, #308]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 8009786:	4313      	orrs	r3, r2
 8009788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	d044      	beq.n	8009820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d107      	bne.n	80097ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800979e:	4b47      	ldr	r3, [pc, #284]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d119      	bne.n	80097de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e07f      	b.n	80098ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d003      	beq.n	80097be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d107      	bne.n	80097ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097be:	4b3f      	ldr	r3, [pc, #252]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d109      	bne.n	80097de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e06f      	b.n	80098ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097ce:	4b3b      	ldr	r3, [pc, #236]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e067      	b.n	80098ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097de:	4b37      	ldr	r3, [pc, #220]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f023 0203 	bic.w	r2, r3, #3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	4934      	ldr	r1, [pc, #208]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80097f0:	f7fa ffe4 	bl	80047bc <HAL_GetTick>
 80097f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097f6:	e00a      	b.n	800980e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097f8:	f7fa ffe0 	bl	80047bc <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	f241 3288 	movw	r2, #5000	; 0x1388
 8009806:	4293      	cmp	r3, r2
 8009808:	d901      	bls.n	800980e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e04f      	b.n	80098ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800980e:	4b2b      	ldr	r3, [pc, #172]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f003 020c 	and.w	r2, r3, #12
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	429a      	cmp	r2, r3
 800981e:	d1eb      	bne.n	80097f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009820:	4b25      	ldr	r3, [pc, #148]	; (80098b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 030f 	and.w	r3, r3, #15
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d20c      	bcs.n	8009848 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800982e:	4b22      	ldr	r3, [pc, #136]	; (80098b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	b2d2      	uxtb	r2, r2
 8009834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009836:	4b20      	ldr	r3, [pc, #128]	; (80098b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 030f 	and.w	r3, r3, #15
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d001      	beq.n	8009848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e032      	b.n	80098ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b00      	cmp	r3, #0
 8009852:	d008      	beq.n	8009866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009854:	4b19      	ldr	r3, [pc, #100]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	4916      	ldr	r1, [pc, #88]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 8009862:	4313      	orrs	r3, r2
 8009864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0308 	and.w	r3, r3, #8
 800986e:	2b00      	cmp	r3, #0
 8009870:	d009      	beq.n	8009886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009872:	4b12      	ldr	r3, [pc, #72]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	490e      	ldr	r1, [pc, #56]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 8009882:	4313      	orrs	r3, r2
 8009884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009886:	f000 f821 	bl	80098cc <HAL_RCC_GetSysClockFreq>
 800988a:	4602      	mov	r2, r0
 800988c:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <HAL_RCC_ClockConfig+0x1bc>)
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	091b      	lsrs	r3, r3, #4
 8009892:	f003 030f 	and.w	r3, r3, #15
 8009896:	490a      	ldr	r1, [pc, #40]	; (80098c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009898:	5ccb      	ldrb	r3, [r1, r3]
 800989a:	fa22 f303 	lsr.w	r3, r2, r3
 800989e:	4a09      	ldr	r2, [pc, #36]	; (80098c4 <HAL_RCC_ClockConfig+0x1c4>)
 80098a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80098a2:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <HAL_RCC_ClockConfig+0x1c8>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fa ff44 	bl	8004734 <HAL_InitTick>

  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	40023c00 	.word	0x40023c00
 80098bc:	40023800 	.word	0x40023800
 80098c0:	08015124 	.word	0x08015124
 80098c4:	20000014 	.word	0x20000014
 80098c8:	20000018 	.word	0x20000018

080098cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098d0:	b094      	sub	sp, #80	; 0x50
 80098d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80098d4:	2300      	movs	r3, #0
 80098d6:	647b      	str	r3, [r7, #68]	; 0x44
 80098d8:	2300      	movs	r3, #0
 80098da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098dc:	2300      	movs	r3, #0
 80098de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098e4:	4b79      	ldr	r3, [pc, #484]	; (8009acc <HAL_RCC_GetSysClockFreq+0x200>)
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f003 030c 	and.w	r3, r3, #12
 80098ec:	2b08      	cmp	r3, #8
 80098ee:	d00d      	beq.n	800990c <HAL_RCC_GetSysClockFreq+0x40>
 80098f0:	2b08      	cmp	r3, #8
 80098f2:	f200 80e1 	bhi.w	8009ab8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <HAL_RCC_GetSysClockFreq+0x34>
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d003      	beq.n	8009906 <HAL_RCC_GetSysClockFreq+0x3a>
 80098fe:	e0db      	b.n	8009ab8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009900:	4b73      	ldr	r3, [pc, #460]	; (8009ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009902:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009904:	e0db      	b.n	8009abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009906:	4b73      	ldr	r3, [pc, #460]	; (8009ad4 <HAL_RCC_GetSysClockFreq+0x208>)
 8009908:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800990a:	e0d8      	b.n	8009abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800990c:	4b6f      	ldr	r3, [pc, #444]	; (8009acc <HAL_RCC_GetSysClockFreq+0x200>)
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009914:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009916:	4b6d      	ldr	r3, [pc, #436]	; (8009acc <HAL_RCC_GetSysClockFreq+0x200>)
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d063      	beq.n	80099ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009922:	4b6a      	ldr	r3, [pc, #424]	; (8009acc <HAL_RCC_GetSysClockFreq+0x200>)
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	099b      	lsrs	r3, r3, #6
 8009928:	2200      	movs	r2, #0
 800992a:	63bb      	str	r3, [r7, #56]	; 0x38
 800992c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800992e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009934:	633b      	str	r3, [r7, #48]	; 0x30
 8009936:	2300      	movs	r3, #0
 8009938:	637b      	str	r3, [r7, #52]	; 0x34
 800993a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800993e:	4622      	mov	r2, r4
 8009940:	462b      	mov	r3, r5
 8009942:	f04f 0000 	mov.w	r0, #0
 8009946:	f04f 0100 	mov.w	r1, #0
 800994a:	0159      	lsls	r1, r3, #5
 800994c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009950:	0150      	lsls	r0, r2, #5
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4621      	mov	r1, r4
 8009958:	1a51      	subs	r1, r2, r1
 800995a:	6139      	str	r1, [r7, #16]
 800995c:	4629      	mov	r1, r5
 800995e:	eb63 0301 	sbc.w	r3, r3, r1
 8009962:	617b      	str	r3, [r7, #20]
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	f04f 0300 	mov.w	r3, #0
 800996c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009970:	4659      	mov	r1, fp
 8009972:	018b      	lsls	r3, r1, #6
 8009974:	4651      	mov	r1, sl
 8009976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800997a:	4651      	mov	r1, sl
 800997c:	018a      	lsls	r2, r1, #6
 800997e:	4651      	mov	r1, sl
 8009980:	ebb2 0801 	subs.w	r8, r2, r1
 8009984:	4659      	mov	r1, fp
 8009986:	eb63 0901 	sbc.w	r9, r3, r1
 800998a:	f04f 0200 	mov.w	r2, #0
 800998e:	f04f 0300 	mov.w	r3, #0
 8009992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800999a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800999e:	4690      	mov	r8, r2
 80099a0:	4699      	mov	r9, r3
 80099a2:	4623      	mov	r3, r4
 80099a4:	eb18 0303 	adds.w	r3, r8, r3
 80099a8:	60bb      	str	r3, [r7, #8]
 80099aa:	462b      	mov	r3, r5
 80099ac:	eb49 0303 	adc.w	r3, r9, r3
 80099b0:	60fb      	str	r3, [r7, #12]
 80099b2:	f04f 0200 	mov.w	r2, #0
 80099b6:	f04f 0300 	mov.w	r3, #0
 80099ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80099be:	4629      	mov	r1, r5
 80099c0:	024b      	lsls	r3, r1, #9
 80099c2:	4621      	mov	r1, r4
 80099c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80099c8:	4621      	mov	r1, r4
 80099ca:	024a      	lsls	r2, r1, #9
 80099cc:	4610      	mov	r0, r2
 80099ce:	4619      	mov	r1, r3
 80099d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099d2:	2200      	movs	r2, #0
 80099d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80099d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099dc:	f7f7 f974 	bl	8000cc8 <__aeabi_uldivmod>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	4613      	mov	r3, r2
 80099e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099e8:	e058      	b.n	8009a9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099ea:	4b38      	ldr	r3, [pc, #224]	; (8009acc <HAL_RCC_GetSysClockFreq+0x200>)
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	099b      	lsrs	r3, r3, #6
 80099f0:	2200      	movs	r2, #0
 80099f2:	4618      	mov	r0, r3
 80099f4:	4611      	mov	r1, r2
 80099f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80099fa:	623b      	str	r3, [r7, #32]
 80099fc:	2300      	movs	r3, #0
 80099fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009a00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009a04:	4642      	mov	r2, r8
 8009a06:	464b      	mov	r3, r9
 8009a08:	f04f 0000 	mov.w	r0, #0
 8009a0c:	f04f 0100 	mov.w	r1, #0
 8009a10:	0159      	lsls	r1, r3, #5
 8009a12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a16:	0150      	lsls	r0, r2, #5
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4641      	mov	r1, r8
 8009a1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009a22:	4649      	mov	r1, r9
 8009a24:	eb63 0b01 	sbc.w	fp, r3, r1
 8009a28:	f04f 0200 	mov.w	r2, #0
 8009a2c:	f04f 0300 	mov.w	r3, #0
 8009a30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009a34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009a38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009a3c:	ebb2 040a 	subs.w	r4, r2, sl
 8009a40:	eb63 050b 	sbc.w	r5, r3, fp
 8009a44:	f04f 0200 	mov.w	r2, #0
 8009a48:	f04f 0300 	mov.w	r3, #0
 8009a4c:	00eb      	lsls	r3, r5, #3
 8009a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a52:	00e2      	lsls	r2, r4, #3
 8009a54:	4614      	mov	r4, r2
 8009a56:	461d      	mov	r5, r3
 8009a58:	4643      	mov	r3, r8
 8009a5a:	18e3      	adds	r3, r4, r3
 8009a5c:	603b      	str	r3, [r7, #0]
 8009a5e:	464b      	mov	r3, r9
 8009a60:	eb45 0303 	adc.w	r3, r5, r3
 8009a64:	607b      	str	r3, [r7, #4]
 8009a66:	f04f 0200 	mov.w	r2, #0
 8009a6a:	f04f 0300 	mov.w	r3, #0
 8009a6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009a72:	4629      	mov	r1, r5
 8009a74:	028b      	lsls	r3, r1, #10
 8009a76:	4621      	mov	r1, r4
 8009a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	028a      	lsls	r2, r1, #10
 8009a80:	4610      	mov	r0, r2
 8009a82:	4619      	mov	r1, r3
 8009a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a86:	2200      	movs	r2, #0
 8009a88:	61bb      	str	r3, [r7, #24]
 8009a8a:	61fa      	str	r2, [r7, #28]
 8009a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a90:	f7f7 f91a 	bl	8000cc8 <__aeabi_uldivmod>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4613      	mov	r3, r2
 8009a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a9c:	4b0b      	ldr	r3, [pc, #44]	; (8009acc <HAL_RCC_GetSysClockFreq+0x200>)
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	0c1b      	lsrs	r3, r3, #16
 8009aa2:	f003 0303 	and.w	r3, r3, #3
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009aac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009ab6:	e002      	b.n	8009abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009ab8:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009aba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3750      	adds	r7, #80	; 0x50
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009aca:	bf00      	nop
 8009acc:	40023800 	.word	0x40023800
 8009ad0:	00f42400 	.word	0x00f42400
 8009ad4:	007a1200 	.word	0x007a1200

08009ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009adc:	4b03      	ldr	r3, [pc, #12]	; (8009aec <HAL_RCC_GetHCLKFreq+0x14>)
 8009ade:	681b      	ldr	r3, [r3, #0]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	20000014 	.word	0x20000014

08009af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009af4:	f7ff fff0 	bl	8009ad8 <HAL_RCC_GetHCLKFreq>
 8009af8:	4602      	mov	r2, r0
 8009afa:	4b05      	ldr	r3, [pc, #20]	; (8009b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	0a9b      	lsrs	r3, r3, #10
 8009b00:	f003 0307 	and.w	r3, r3, #7
 8009b04:	4903      	ldr	r1, [pc, #12]	; (8009b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b06:	5ccb      	ldrb	r3, [r1, r3]
 8009b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	40023800 	.word	0x40023800
 8009b14:	08015134 	.word	0x08015134

08009b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e07b      	b.n	8009c22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d108      	bne.n	8009b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b3a:	d009      	beq.n	8009b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	61da      	str	r2, [r3, #28]
 8009b42:	e005      	b.n	8009b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d106      	bne.n	8009b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7fa fa7c 	bl	8004068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2202      	movs	r2, #2
 8009b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ba2:	431a      	orrs	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	431a      	orrs	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	431a      	orrs	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a1b      	ldr	r3, [r3, #32]
 8009bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd4:	ea42 0103 	orr.w	r1, r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	0c1b      	lsrs	r3, r3, #16
 8009bee:	f003 0104 	and.w	r1, r3, #4
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	f003 0210 	and.w	r2, r3, #16
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	69da      	ldr	r2, [r3, #28]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b088      	sub	sp, #32
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	603b      	str	r3, [r7, #0]
 8009c36:	4613      	mov	r3, r2
 8009c38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d101      	bne.n	8009c4c <HAL_SPI_Transmit+0x22>
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e126      	b.n	8009e9a <HAL_SPI_Transmit+0x270>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c54:	f7fa fdb2 	bl	80047bc <HAL_GetTick>
 8009c58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009c5a:	88fb      	ldrh	r3, [r7, #6]
 8009c5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d002      	beq.n	8009c70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c6e:	e10b      	b.n	8009e88 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <HAL_SPI_Transmit+0x52>
 8009c76:	88fb      	ldrh	r3, [r7, #6]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d102      	bne.n	8009c82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c80:	e102      	b.n	8009e88 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2203      	movs	r2, #3
 8009c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	88fa      	ldrh	r2, [r7, #6]
 8009c9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	88fa      	ldrh	r2, [r7, #6]
 8009ca0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cc8:	d10f      	bne.n	8009cea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ce8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf4:	2b40      	cmp	r3, #64	; 0x40
 8009cf6:	d007      	beq.n	8009d08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d10:	d14b      	bne.n	8009daa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <HAL_SPI_Transmit+0xf6>
 8009d1a:	8afb      	ldrh	r3, [r7, #22]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d13e      	bne.n	8009d9e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d24:	881a      	ldrh	r2, [r3, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d30:	1c9a      	adds	r2, r3, #2
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009d44:	e02b      	b.n	8009d9e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	f003 0302 	and.w	r3, r3, #2
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d112      	bne.n	8009d7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d58:	881a      	ldrh	r2, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d64:	1c9a      	adds	r2, r3, #2
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	3b01      	subs	r3, #1
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d78:	e011      	b.n	8009d9e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d7a:	f7fa fd1f 	bl	80047bc <HAL_GetTick>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d803      	bhi.n	8009d92 <HAL_SPI_Transmit+0x168>
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d90:	d102      	bne.n	8009d98 <HAL_SPI_Transmit+0x16e>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d102      	bne.n	8009d9e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d9c:	e074      	b.n	8009e88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1ce      	bne.n	8009d46 <HAL_SPI_Transmit+0x11c>
 8009da8:	e04c      	b.n	8009e44 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d002      	beq.n	8009db8 <HAL_SPI_Transmit+0x18e>
 8009db2:	8afb      	ldrh	r3, [r7, #22]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d140      	bne.n	8009e3a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	330c      	adds	r3, #12
 8009dc2:	7812      	ldrb	r2, [r2, #0]
 8009dc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009dde:	e02c      	b.n	8009e3a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f003 0302 	and.w	r3, r3, #2
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d113      	bne.n	8009e16 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	330c      	adds	r3, #12
 8009df8:	7812      	ldrb	r2, [r2, #0]
 8009dfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e00:	1c5a      	adds	r2, r3, #1
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	86da      	strh	r2, [r3, #54]	; 0x36
 8009e14:	e011      	b.n	8009e3a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e16:	f7fa fcd1 	bl	80047bc <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d803      	bhi.n	8009e2e <HAL_SPI_Transmit+0x204>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2c:	d102      	bne.n	8009e34 <HAL_SPI_Transmit+0x20a>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009e38:	e026      	b.n	8009e88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1cd      	bne.n	8009de0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e44:	69ba      	ldr	r2, [r7, #24]
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 fb73 	bl	800a534 <SPI_EndRxTxTransaction>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d002      	beq.n	8009e5a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2220      	movs	r2, #32
 8009e58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10a      	bne.n	8009e78 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e62:	2300      	movs	r3, #0
 8009e64:	613b      	str	r3, [r7, #16]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	613b      	str	r3, [r7, #16]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	613b      	str	r3, [r7, #16]
 8009e76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d002      	beq.n	8009e86 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	77fb      	strb	r3, [r7, #31]
 8009e84:	e000      	b.n	8009e88 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009e86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3720      	adds	r7, #32
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b08c      	sub	sp, #48	; 0x30
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	607a      	str	r2, [r7, #4]
 8009eae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d101      	bne.n	8009ec8 <HAL_SPI_TransmitReceive+0x26>
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	e18a      	b.n	800a1de <HAL_SPI_TransmitReceive+0x33c>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ed0:	f7fa fc74 	bl	80047bc <HAL_GetTick>
 8009ed4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009edc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009ee6:	887b      	ldrh	r3, [r7, #2]
 8009ee8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009eea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d00f      	beq.n	8009f12 <HAL_SPI_TransmitReceive+0x70>
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ef8:	d107      	bne.n	8009f0a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d103      	bne.n	8009f0a <HAL_SPI_TransmitReceive+0x68>
 8009f02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	d003      	beq.n	8009f12 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009f10:	e15b      	b.n	800a1ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d005      	beq.n	8009f24 <HAL_SPI_TransmitReceive+0x82>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <HAL_SPI_TransmitReceive+0x82>
 8009f1e:	887b      	ldrh	r3, [r7, #2]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d103      	bne.n	8009f2c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009f2a:	e14e      	b.n	800a1ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	d003      	beq.n	8009f40 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2205      	movs	r2, #5
 8009f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	887a      	ldrh	r2, [r7, #2]
 8009f50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	887a      	ldrh	r2, [r7, #2]
 8009f56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	887a      	ldrh	r2, [r7, #2]
 8009f62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	887a      	ldrh	r2, [r7, #2]
 8009f68:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f80:	2b40      	cmp	r3, #64	; 0x40
 8009f82:	d007      	beq.n	8009f94 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f9c:	d178      	bne.n	800a090 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d002      	beq.n	8009fac <HAL_SPI_TransmitReceive+0x10a>
 8009fa6:	8b7b      	ldrh	r3, [r7, #26]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d166      	bne.n	800a07a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb0:	881a      	ldrh	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbc:	1c9a      	adds	r2, r3, #2
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fd0:	e053      	b.n	800a07a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f003 0302 	and.w	r3, r3, #2
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d11b      	bne.n	800a018 <HAL_SPI_TransmitReceive+0x176>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d016      	beq.n	800a018 <HAL_SPI_TransmitReceive+0x176>
 8009fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d113      	bne.n	800a018 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff4:	881a      	ldrh	r2, [r3, #0]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a000:	1c9a      	adds	r2, r3, #2
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	3b01      	subs	r3, #1
 800a00e:	b29a      	uxth	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a014:	2300      	movs	r3, #0
 800a016:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	2b01      	cmp	r3, #1
 800a024:	d119      	bne.n	800a05a <HAL_SPI_TransmitReceive+0x1b8>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d014      	beq.n	800a05a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03a:	b292      	uxth	r2, r2
 800a03c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a042:	1c9a      	adds	r2, r3, #2
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	3b01      	subs	r3, #1
 800a050:	b29a      	uxth	r2, r3
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a056:	2301      	movs	r3, #1
 800a058:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a05a:	f7fa fbaf 	bl	80047bc <HAL_GetTick>
 800a05e:	4602      	mov	r2, r0
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a066:	429a      	cmp	r2, r3
 800a068:	d807      	bhi.n	800a07a <HAL_SPI_TransmitReceive+0x1d8>
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a070:	d003      	beq.n	800a07a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a078:	e0a7      	b.n	800a1ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a07e:	b29b      	uxth	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1a6      	bne.n	8009fd2 <HAL_SPI_TransmitReceive+0x130>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a088:	b29b      	uxth	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1a1      	bne.n	8009fd2 <HAL_SPI_TransmitReceive+0x130>
 800a08e:	e07c      	b.n	800a18a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <HAL_SPI_TransmitReceive+0x1fc>
 800a098:	8b7b      	ldrh	r3, [r7, #26]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d16b      	bne.n	800a176 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	330c      	adds	r3, #12
 800a0a8:	7812      	ldrb	r2, [r2, #0]
 800a0aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b0:	1c5a      	adds	r2, r3, #1
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0c4:	e057      	b.n	800a176 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f003 0302 	and.w	r3, r3, #2
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d11c      	bne.n	800a10e <HAL_SPI_TransmitReceive+0x26c>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d017      	beq.n	800a10e <HAL_SPI_TransmitReceive+0x26c>
 800a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d114      	bne.n	800a10e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	330c      	adds	r3, #12
 800a0ee:	7812      	ldrb	r2, [r2, #0]
 800a0f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a100:	b29b      	uxth	r3, r3
 800a102:	3b01      	subs	r3, #1
 800a104:	b29a      	uxth	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f003 0301 	and.w	r3, r3, #1
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d119      	bne.n	800a150 <HAL_SPI_TransmitReceive+0x2ae>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a120:	b29b      	uxth	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d014      	beq.n	800a150 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68da      	ldr	r2, [r3, #12]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a130:	b2d2      	uxtb	r2, r2
 800a132:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a138:	1c5a      	adds	r2, r3, #1
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a142:	b29b      	uxth	r3, r3
 800a144:	3b01      	subs	r3, #1
 800a146:	b29a      	uxth	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a14c:	2301      	movs	r3, #1
 800a14e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a150:	f7fa fb34 	bl	80047bc <HAL_GetTick>
 800a154:	4602      	mov	r2, r0
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d803      	bhi.n	800a168 <HAL_SPI_TransmitReceive+0x2c6>
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a166:	d102      	bne.n	800a16e <HAL_SPI_TransmitReceive+0x2cc>
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d103      	bne.n	800a176 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a174:	e029      	b.n	800a1ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1a2      	bne.n	800a0c6 <HAL_SPI_TransmitReceive+0x224>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a184:	b29b      	uxth	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d19d      	bne.n	800a0c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a18a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 f9d0 	bl	800a534 <SPI_EndRxTxTransaction>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d006      	beq.n	800a1a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a1a6:	e010      	b.n	800a1ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10b      	bne.n	800a1c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	617b      	str	r3, [r7, #20]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	617b      	str	r3, [r7, #20]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	617b      	str	r3, [r7, #20]
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	e000      	b.n	800a1ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a1c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a1da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3730      	adds	r7, #48	; 0x30
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	099b      	lsrs	r3, r3, #6
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10f      	bne.n	800a22c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00a      	beq.n	800a22c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	099b      	lsrs	r3, r3, #6
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d004      	beq.n	800a22c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	4798      	blx	r3
    return;
 800a22a:	e0d7      	b.n	800a3dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	085b      	lsrs	r3, r3, #1
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <HAL_SPI_IRQHandler+0x66>
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	09db      	lsrs	r3, r3, #7
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	2b00      	cmp	r3, #0
 800a242:	d004      	beq.n	800a24e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	4798      	blx	r3
    return;
 800a24c:	e0c6      	b.n	800a3dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	095b      	lsrs	r3, r3, #5
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10c      	bne.n	800a274 <HAL_SPI_IRQHandler+0x8c>
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	099b      	lsrs	r3, r3, #6
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	2b00      	cmp	r3, #0
 800a264:	d106      	bne.n	800a274 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	0a1b      	lsrs	r3, r3, #8
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 80b4 	beq.w	800a3dc <HAL_SPI_IRQHandler+0x1f4>
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	095b      	lsrs	r3, r3, #5
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f000 80ad 	beq.w	800a3dc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	099b      	lsrs	r3, r3, #6
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d023      	beq.n	800a2d6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b03      	cmp	r3, #3
 800a298:	d011      	beq.n	800a2be <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a29e:	f043 0204 	orr.w	r2, r3, #4
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	617b      	str	r3, [r7, #20]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	617b      	str	r3, [r7, #20]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	617b      	str	r3, [r7, #20]
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	e00b      	b.n	800a2d6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2be:	2300      	movs	r3, #0
 800a2c0:	613b      	str	r3, [r7, #16]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	613b      	str	r3, [r7, #16]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	613b      	str	r3, [r7, #16]
 800a2d2:	693b      	ldr	r3, [r7, #16]
        return;
 800a2d4:	e082      	b.n	800a3dc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	095b      	lsrs	r3, r3, #5
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d014      	beq.n	800a30c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e6:	f043 0201 	orr.w	r2, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60fb      	str	r3, [r7, #12]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	60fb      	str	r3, [r7, #12]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a308:	601a      	str	r2, [r3, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	0a1b      	lsrs	r3, r3, #8
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00c      	beq.n	800a332 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a31c:	f043 0208 	orr.w	r2, r3, #8
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a324:	2300      	movs	r3, #0
 800a326:	60bb      	str	r3, [r7, #8]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	60bb      	str	r3, [r7, #8]
 800a330:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a336:	2b00      	cmp	r3, #0
 800a338:	d04f      	beq.n	800a3da <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a348:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	f003 0302 	and.w	r3, r3, #2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d104      	bne.n	800a366 <HAL_SPI_IRQHandler+0x17e>
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	2b00      	cmp	r3, #0
 800a364:	d034      	beq.n	800a3d0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f022 0203 	bic.w	r2, r2, #3
 800a374:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d011      	beq.n	800a3a2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a382:	4a18      	ldr	r2, [pc, #96]	; (800a3e4 <HAL_SPI_IRQHandler+0x1fc>)
 800a384:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fa fdc9 	bl	8004f22 <HAL_DMA_Abort_IT>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d005      	beq.n	800a3a2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a39a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d016      	beq.n	800a3d8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ae:	4a0d      	ldr	r2, [pc, #52]	; (800a3e4 <HAL_SPI_IRQHandler+0x1fc>)
 800a3b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fa fdb3 	bl	8004f22 <HAL_DMA_Abort_IT>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a3ce:	e003      	b.n	800a3d8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f809 	bl	800a3e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a3d6:	e000      	b.n	800a3da <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a3d8:	bf00      	nop
    return;
 800a3da:	bf00      	nop
  }
}
 800a3dc:	3720      	adds	r7, #32
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	0800a3fd 	.word	0x0800a3fd

0800a3e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a408:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7ff ffe6 	bl	800a3e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a41c:	bf00      	nop
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b088      	sub	sp, #32
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	603b      	str	r3, [r7, #0]
 800a430:	4613      	mov	r3, r2
 800a432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a434:	f7fa f9c2 	bl	80047bc <HAL_GetTick>
 800a438:	4602      	mov	r2, r0
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	1a9b      	subs	r3, r3, r2
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	4413      	add	r3, r2
 800a442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a444:	f7fa f9ba 	bl	80047bc <HAL_GetTick>
 800a448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a44a:	4b39      	ldr	r3, [pc, #228]	; (800a530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	015b      	lsls	r3, r3, #5
 800a450:	0d1b      	lsrs	r3, r3, #20
 800a452:	69fa      	ldr	r2, [r7, #28]
 800a454:	fb02 f303 	mul.w	r3, r2, r3
 800a458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a45a:	e054      	b.n	800a506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a462:	d050      	beq.n	800a506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a464:	f7fa f9aa 	bl	80047bc <HAL_GetTick>
 800a468:	4602      	mov	r2, r0
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	69fa      	ldr	r2, [r7, #28]
 800a470:	429a      	cmp	r2, r3
 800a472:	d902      	bls.n	800a47a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d13d      	bne.n	800a4f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	685a      	ldr	r2, [r3, #4]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a492:	d111      	bne.n	800a4b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a49c:	d004      	beq.n	800a4a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a6:	d107      	bne.n	800a4b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4c0:	d10f      	bne.n	800a4e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e017      	b.n	800a526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d101      	bne.n	800a500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	3b01      	subs	r3, #1
 800a504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	689a      	ldr	r2, [r3, #8]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	4013      	ands	r3, r2
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	429a      	cmp	r2, r3
 800a514:	bf0c      	ite	eq
 800a516:	2301      	moveq	r3, #1
 800a518:	2300      	movne	r3, #0
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	461a      	mov	r2, r3
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	429a      	cmp	r2, r3
 800a522:	d19b      	bne.n	800a45c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3720      	adds	r7, #32
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	20000014 	.word	0x20000014

0800a534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b088      	sub	sp, #32
 800a538:	af02      	add	r7, sp, #8
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a540:	4b1b      	ldr	r3, [pc, #108]	; (800a5b0 <SPI_EndRxTxTransaction+0x7c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a1b      	ldr	r2, [pc, #108]	; (800a5b4 <SPI_EndRxTxTransaction+0x80>)
 800a546:	fba2 2303 	umull	r2, r3, r2, r3
 800a54a:	0d5b      	lsrs	r3, r3, #21
 800a54c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a550:	fb02 f303 	mul.w	r3, r2, r3
 800a554:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a55e:	d112      	bne.n	800a586 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2200      	movs	r2, #0
 800a568:	2180      	movs	r1, #128	; 0x80
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f7ff ff5a 	bl	800a424 <SPI_WaitFlagStateUntilTimeout>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d016      	beq.n	800a5a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a57a:	f043 0220 	orr.w	r2, r3, #32
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a582:	2303      	movs	r3, #3
 800a584:	e00f      	b.n	800a5a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00a      	beq.n	800a5a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	3b01      	subs	r3, #1
 800a590:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a59c:	2b80      	cmp	r3, #128	; 0x80
 800a59e:	d0f2      	beq.n	800a586 <SPI_EndRxTxTransaction+0x52>
 800a5a0:	e000      	b.n	800a5a4 <SPI_EndRxTxTransaction+0x70>
        break;
 800a5a2:	bf00      	nop
  }

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20000014 	.word	0x20000014
 800a5b4:	165e9f81 	.word	0x165e9f81

0800a5b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e041      	b.n	800a64e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d106      	bne.n	800a5e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7f9 fd92 	bl	8004108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4610      	mov	r0, r2
 800a5f8:	f000 fa96 	bl	800ab28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d001      	beq.n	800a670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e04e      	b.n	800a70e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2202      	movs	r2, #2
 800a674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68da      	ldr	r2, [r3, #12]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f042 0201 	orr.w	r2, r2, #1
 800a686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a23      	ldr	r2, [pc, #140]	; (800a71c <HAL_TIM_Base_Start_IT+0xc4>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d022      	beq.n	800a6d8 <HAL_TIM_Base_Start_IT+0x80>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a69a:	d01d      	beq.n	800a6d8 <HAL_TIM_Base_Start_IT+0x80>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a1f      	ldr	r2, [pc, #124]	; (800a720 <HAL_TIM_Base_Start_IT+0xc8>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d018      	beq.n	800a6d8 <HAL_TIM_Base_Start_IT+0x80>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a1e      	ldr	r2, [pc, #120]	; (800a724 <HAL_TIM_Base_Start_IT+0xcc>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d013      	beq.n	800a6d8 <HAL_TIM_Base_Start_IT+0x80>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a1c      	ldr	r2, [pc, #112]	; (800a728 <HAL_TIM_Base_Start_IT+0xd0>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d00e      	beq.n	800a6d8 <HAL_TIM_Base_Start_IT+0x80>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a1b      	ldr	r2, [pc, #108]	; (800a72c <HAL_TIM_Base_Start_IT+0xd4>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d009      	beq.n	800a6d8 <HAL_TIM_Base_Start_IT+0x80>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a19      	ldr	r2, [pc, #100]	; (800a730 <HAL_TIM_Base_Start_IT+0xd8>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d004      	beq.n	800a6d8 <HAL_TIM_Base_Start_IT+0x80>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a18      	ldr	r2, [pc, #96]	; (800a734 <HAL_TIM_Base_Start_IT+0xdc>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d111      	bne.n	800a6fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f003 0307 	and.w	r3, r3, #7
 800a6e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b06      	cmp	r3, #6
 800a6e8:	d010      	beq.n	800a70c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f042 0201 	orr.w	r2, r2, #1
 800a6f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6fa:	e007      	b.n	800a70c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f042 0201 	orr.w	r2, r2, #1
 800a70a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	40010000 	.word	0x40010000
 800a720:	40000400 	.word	0x40000400
 800a724:	40000800 	.word	0x40000800
 800a728:	40000c00 	.word	0x40000c00
 800a72c:	40010400 	.word	0x40010400
 800a730:	40014000 	.word	0x40014000
 800a734:	40001800 	.word	0x40001800

0800a738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d122      	bne.n	800a794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f003 0302 	and.w	r3, r3, #2
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d11b      	bne.n	800a794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f06f 0202 	mvn.w	r2, #2
 800a764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	f003 0303 	and.w	r3, r3, #3
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f9b5 	bl	800aaea <HAL_TIM_IC_CaptureCallback>
 800a780:	e005      	b.n	800a78e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f9a7 	bl	800aad6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f9b8 	bl	800aafe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	f003 0304 	and.w	r3, r3, #4
 800a79e:	2b04      	cmp	r3, #4
 800a7a0:	d122      	bne.n	800a7e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f003 0304 	and.w	r3, r3, #4
 800a7ac:	2b04      	cmp	r3, #4
 800a7ae:	d11b      	bne.n	800a7e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f06f 0204 	mvn.w	r2, #4
 800a7b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2202      	movs	r2, #2
 800a7be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	699b      	ldr	r3, [r3, #24]
 800a7c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f98b 	bl	800aaea <HAL_TIM_IC_CaptureCallback>
 800a7d4:	e005      	b.n	800a7e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f97d 	bl	800aad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f98e 	bl	800aafe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	f003 0308 	and.w	r3, r3, #8
 800a7f2:	2b08      	cmp	r3, #8
 800a7f4:	d122      	bne.n	800a83c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f003 0308 	and.w	r3, r3, #8
 800a800:	2b08      	cmp	r3, #8
 800a802:	d11b      	bne.n	800a83c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f06f 0208 	mvn.w	r2, #8
 800a80c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2204      	movs	r2, #4
 800a812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	f003 0303 	and.w	r3, r3, #3
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d003      	beq.n	800a82a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f961 	bl	800aaea <HAL_TIM_IC_CaptureCallback>
 800a828:	e005      	b.n	800a836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f953 	bl	800aad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 f964 	bl	800aafe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	f003 0310 	and.w	r3, r3, #16
 800a846:	2b10      	cmp	r3, #16
 800a848:	d122      	bne.n	800a890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f003 0310 	and.w	r3, r3, #16
 800a854:	2b10      	cmp	r3, #16
 800a856:	d11b      	bne.n	800a890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f06f 0210 	mvn.w	r2, #16
 800a860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2208      	movs	r2, #8
 800a866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	69db      	ldr	r3, [r3, #28]
 800a86e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a872:	2b00      	cmp	r3, #0
 800a874:	d003      	beq.n	800a87e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 f937 	bl	800aaea <HAL_TIM_IC_CaptureCallback>
 800a87c:	e005      	b.n	800a88a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f929 	bl	800aad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f93a 	bl	800aafe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d10e      	bne.n	800a8bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	f003 0301 	and.w	r3, r3, #1
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d107      	bne.n	800a8bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f06f 0201 	mvn.w	r2, #1
 800a8b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7f8 fda4 	bl	8003404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8c6:	2b80      	cmp	r3, #128	; 0x80
 800a8c8:	d10e      	bne.n	800a8e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d4:	2b80      	cmp	r3, #128	; 0x80
 800a8d6:	d107      	bne.n	800a8e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a8e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fae0 	bl	800aea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8f2:	2b40      	cmp	r3, #64	; 0x40
 800a8f4:	d10e      	bne.n	800a914 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a900:	2b40      	cmp	r3, #64	; 0x40
 800a902:	d107      	bne.n	800a914 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a90c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f8ff 	bl	800ab12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	f003 0320 	and.w	r3, r3, #32
 800a91e:	2b20      	cmp	r3, #32
 800a920:	d10e      	bne.n	800a940 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	f003 0320 	and.w	r3, r3, #32
 800a92c:	2b20      	cmp	r3, #32
 800a92e:	d107      	bne.n	800a940 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f06f 0220 	mvn.w	r2, #32
 800a938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 faaa 	bl	800ae94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a940:	bf00      	nop
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d101      	bne.n	800a964 <HAL_TIM_ConfigClockSource+0x1c>
 800a960:	2302      	movs	r3, #2
 800a962:	e0b4      	b.n	800aace <HAL_TIM_ConfigClockSource+0x186>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2202      	movs	r2, #2
 800a970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a98a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a99c:	d03e      	beq.n	800aa1c <HAL_TIM_ConfigClockSource+0xd4>
 800a99e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9a2:	f200 8087 	bhi.w	800aab4 <HAL_TIM_ConfigClockSource+0x16c>
 800a9a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9aa:	f000 8086 	beq.w	800aaba <HAL_TIM_ConfigClockSource+0x172>
 800a9ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9b2:	d87f      	bhi.n	800aab4 <HAL_TIM_ConfigClockSource+0x16c>
 800a9b4:	2b70      	cmp	r3, #112	; 0x70
 800a9b6:	d01a      	beq.n	800a9ee <HAL_TIM_ConfigClockSource+0xa6>
 800a9b8:	2b70      	cmp	r3, #112	; 0x70
 800a9ba:	d87b      	bhi.n	800aab4 <HAL_TIM_ConfigClockSource+0x16c>
 800a9bc:	2b60      	cmp	r3, #96	; 0x60
 800a9be:	d050      	beq.n	800aa62 <HAL_TIM_ConfigClockSource+0x11a>
 800a9c0:	2b60      	cmp	r3, #96	; 0x60
 800a9c2:	d877      	bhi.n	800aab4 <HAL_TIM_ConfigClockSource+0x16c>
 800a9c4:	2b50      	cmp	r3, #80	; 0x50
 800a9c6:	d03c      	beq.n	800aa42 <HAL_TIM_ConfigClockSource+0xfa>
 800a9c8:	2b50      	cmp	r3, #80	; 0x50
 800a9ca:	d873      	bhi.n	800aab4 <HAL_TIM_ConfigClockSource+0x16c>
 800a9cc:	2b40      	cmp	r3, #64	; 0x40
 800a9ce:	d058      	beq.n	800aa82 <HAL_TIM_ConfigClockSource+0x13a>
 800a9d0:	2b40      	cmp	r3, #64	; 0x40
 800a9d2:	d86f      	bhi.n	800aab4 <HAL_TIM_ConfigClockSource+0x16c>
 800a9d4:	2b30      	cmp	r3, #48	; 0x30
 800a9d6:	d064      	beq.n	800aaa2 <HAL_TIM_ConfigClockSource+0x15a>
 800a9d8:	2b30      	cmp	r3, #48	; 0x30
 800a9da:	d86b      	bhi.n	800aab4 <HAL_TIM_ConfigClockSource+0x16c>
 800a9dc:	2b20      	cmp	r3, #32
 800a9de:	d060      	beq.n	800aaa2 <HAL_TIM_ConfigClockSource+0x15a>
 800a9e0:	2b20      	cmp	r3, #32
 800a9e2:	d867      	bhi.n	800aab4 <HAL_TIM_ConfigClockSource+0x16c>
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d05c      	beq.n	800aaa2 <HAL_TIM_ConfigClockSource+0x15a>
 800a9e8:	2b10      	cmp	r3, #16
 800a9ea:	d05a      	beq.n	800aaa2 <HAL_TIM_ConfigClockSource+0x15a>
 800a9ec:	e062      	b.n	800aab4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	6899      	ldr	r1, [r3, #8]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	f000 f9ad 	bl	800ad5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aa10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68ba      	ldr	r2, [r7, #8]
 800aa18:	609a      	str	r2, [r3, #8]
      break;
 800aa1a:	e04f      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	6899      	ldr	r1, [r3, #8]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	f000 f996 	bl	800ad5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689a      	ldr	r2, [r3, #8]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa3e:	609a      	str	r2, [r3, #8]
      break;
 800aa40:	e03c      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6818      	ldr	r0, [r3, #0]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	6859      	ldr	r1, [r3, #4]
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f000 f90a 	bl	800ac68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2150      	movs	r1, #80	; 0x50
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f000 f963 	bl	800ad26 <TIM_ITRx_SetConfig>
      break;
 800aa60:	e02c      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6818      	ldr	r0, [r3, #0]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	6859      	ldr	r1, [r3, #4]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	f000 f929 	bl	800acc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2160      	movs	r1, #96	; 0x60
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 f953 	bl	800ad26 <TIM_ITRx_SetConfig>
      break;
 800aa80:	e01c      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6818      	ldr	r0, [r3, #0]
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	6859      	ldr	r1, [r3, #4]
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f000 f8ea 	bl	800ac68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2140      	movs	r1, #64	; 0x40
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 f943 	bl	800ad26 <TIM_ITRx_SetConfig>
      break;
 800aaa0:	e00c      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	4610      	mov	r0, r2
 800aaae:	f000 f93a 	bl	800ad26 <TIM_ITRx_SetConfig>
      break;
 800aab2:	e003      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	73fb      	strb	r3, [r7, #15]
      break;
 800aab8:	e000      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aaba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b083      	sub	sp, #12
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aade:	bf00      	nop
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aaea:	b480      	push	{r7}
 800aaec:	b083      	sub	sp, #12
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aaf2:	bf00      	nop
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b083      	sub	sp, #12
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab06:	bf00      	nop
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b083      	sub	sp, #12
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab1a:	bf00      	nop
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
	...

0800ab28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a40      	ldr	r2, [pc, #256]	; (800ac3c <TIM_Base_SetConfig+0x114>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d013      	beq.n	800ab68 <TIM_Base_SetConfig+0x40>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab46:	d00f      	beq.n	800ab68 <TIM_Base_SetConfig+0x40>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a3d      	ldr	r2, [pc, #244]	; (800ac40 <TIM_Base_SetConfig+0x118>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d00b      	beq.n	800ab68 <TIM_Base_SetConfig+0x40>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a3c      	ldr	r2, [pc, #240]	; (800ac44 <TIM_Base_SetConfig+0x11c>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d007      	beq.n	800ab68 <TIM_Base_SetConfig+0x40>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a3b      	ldr	r2, [pc, #236]	; (800ac48 <TIM_Base_SetConfig+0x120>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d003      	beq.n	800ab68 <TIM_Base_SetConfig+0x40>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a3a      	ldr	r2, [pc, #232]	; (800ac4c <TIM_Base_SetConfig+0x124>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d108      	bne.n	800ab7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a2f      	ldr	r2, [pc, #188]	; (800ac3c <TIM_Base_SetConfig+0x114>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d02b      	beq.n	800abda <TIM_Base_SetConfig+0xb2>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab88:	d027      	beq.n	800abda <TIM_Base_SetConfig+0xb2>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a2c      	ldr	r2, [pc, #176]	; (800ac40 <TIM_Base_SetConfig+0x118>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d023      	beq.n	800abda <TIM_Base_SetConfig+0xb2>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a2b      	ldr	r2, [pc, #172]	; (800ac44 <TIM_Base_SetConfig+0x11c>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d01f      	beq.n	800abda <TIM_Base_SetConfig+0xb2>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a2a      	ldr	r2, [pc, #168]	; (800ac48 <TIM_Base_SetConfig+0x120>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d01b      	beq.n	800abda <TIM_Base_SetConfig+0xb2>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a29      	ldr	r2, [pc, #164]	; (800ac4c <TIM_Base_SetConfig+0x124>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d017      	beq.n	800abda <TIM_Base_SetConfig+0xb2>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a28      	ldr	r2, [pc, #160]	; (800ac50 <TIM_Base_SetConfig+0x128>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d013      	beq.n	800abda <TIM_Base_SetConfig+0xb2>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a27      	ldr	r2, [pc, #156]	; (800ac54 <TIM_Base_SetConfig+0x12c>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d00f      	beq.n	800abda <TIM_Base_SetConfig+0xb2>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a26      	ldr	r2, [pc, #152]	; (800ac58 <TIM_Base_SetConfig+0x130>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d00b      	beq.n	800abda <TIM_Base_SetConfig+0xb2>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a25      	ldr	r2, [pc, #148]	; (800ac5c <TIM_Base_SetConfig+0x134>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d007      	beq.n	800abda <TIM_Base_SetConfig+0xb2>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a24      	ldr	r2, [pc, #144]	; (800ac60 <TIM_Base_SetConfig+0x138>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d003      	beq.n	800abda <TIM_Base_SetConfig+0xb2>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a23      	ldr	r2, [pc, #140]	; (800ac64 <TIM_Base_SetConfig+0x13c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d108      	bne.n	800abec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	4313      	orrs	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	689a      	ldr	r2, [r3, #8]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a0a      	ldr	r2, [pc, #40]	; (800ac3c <TIM_Base_SetConfig+0x114>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d003      	beq.n	800ac20 <TIM_Base_SetConfig+0xf8>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a0c      	ldr	r2, [pc, #48]	; (800ac4c <TIM_Base_SetConfig+0x124>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d103      	bne.n	800ac28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	691a      	ldr	r2, [r3, #16]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	615a      	str	r2, [r3, #20]
}
 800ac2e:	bf00      	nop
 800ac30:	3714      	adds	r7, #20
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	40010000 	.word	0x40010000
 800ac40:	40000400 	.word	0x40000400
 800ac44:	40000800 	.word	0x40000800
 800ac48:	40000c00 	.word	0x40000c00
 800ac4c:	40010400 	.word	0x40010400
 800ac50:	40014000 	.word	0x40014000
 800ac54:	40014400 	.word	0x40014400
 800ac58:	40014800 	.word	0x40014800
 800ac5c:	40001800 	.word	0x40001800
 800ac60:	40001c00 	.word	0x40001c00
 800ac64:	40002000 	.word	0x40002000

0800ac68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b087      	sub	sp, #28
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6a1b      	ldr	r3, [r3, #32]
 800ac78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	f023 0201 	bic.w	r2, r3, #1
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	011b      	lsls	r3, r3, #4
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	f023 030a 	bic.w	r3, r3, #10
 800aca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	4313      	orrs	r3, r2
 800acac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	693a      	ldr	r2, [r7, #16]
 800acb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	621a      	str	r2, [r3, #32]
}
 800acba:	bf00      	nop
 800acbc:	371c      	adds	r7, #28
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acc6:	b480      	push	{r7}
 800acc8:	b087      	sub	sp, #28
 800acca:	af00      	add	r7, sp, #0
 800accc:	60f8      	str	r0, [r7, #12]
 800acce:	60b9      	str	r1, [r7, #8]
 800acd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	f023 0210 	bic.w	r2, r3, #16
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6a1b      	ldr	r3, [r3, #32]
 800ace8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800acf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	031b      	lsls	r3, r3, #12
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	011b      	lsls	r3, r3, #4
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	621a      	str	r2, [r3, #32]
}
 800ad1a:	bf00      	nop
 800ad1c:	371c      	adds	r7, #28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b085      	sub	sp, #20
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	f043 0307 	orr.w	r3, r3, #7
 800ad48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	609a      	str	r2, [r3, #8]
}
 800ad50:	bf00      	nop
 800ad52:	3714      	adds	r7, #20
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
 800ad68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	021a      	lsls	r2, r3, #8
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	431a      	orrs	r2, r3
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	609a      	str	r2, [r3, #8]
}
 800ad90:	bf00      	nop
 800ad92:	371c      	adds	r7, #28
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adac:	2b01      	cmp	r3, #1
 800adae:	d101      	bne.n	800adb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adb0:	2302      	movs	r3, #2
 800adb2:	e05a      	b.n	800ae6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2202      	movs	r2, #2
 800adc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a21      	ldr	r2, [pc, #132]	; (800ae78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d022      	beq.n	800ae3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae00:	d01d      	beq.n	800ae3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a1d      	ldr	r2, [pc, #116]	; (800ae7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d018      	beq.n	800ae3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a1b      	ldr	r2, [pc, #108]	; (800ae80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d013      	beq.n	800ae3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a1a      	ldr	r2, [pc, #104]	; (800ae84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d00e      	beq.n	800ae3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a18      	ldr	r2, [pc, #96]	; (800ae88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d009      	beq.n	800ae3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a17      	ldr	r2, [pc, #92]	; (800ae8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d004      	beq.n	800ae3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a15      	ldr	r2, [pc, #84]	; (800ae90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d10c      	bne.n	800ae58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3714      	adds	r7, #20
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	40010000 	.word	0x40010000
 800ae7c:	40000400 	.word	0x40000400
 800ae80:	40000800 	.word	0x40000800
 800ae84:	40000c00 	.word	0x40000c00
 800ae88:	40010400 	.word	0x40010400
 800ae8c:	40014000 	.word	0x40014000
 800ae90:	40001800 	.word	0x40001800

0800ae94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae9c:	bf00      	nop
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aeb0:	bf00      	nop
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aebc:	b084      	sub	sp, #16
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b084      	sub	sp, #16
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	f107 001c 	add.w	r0, r7, #28
 800aeca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d122      	bne.n	800af1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800aee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aefc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d105      	bne.n	800af0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f001 fbee 	bl	800c6f0 <USB_CoreReset>
 800af14:	4603      	mov	r3, r0
 800af16:	73fb      	strb	r3, [r7, #15]
 800af18:	e01a      	b.n	800af50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f001 fbe2 	bl	800c6f0 <USB_CoreReset>
 800af2c:	4603      	mov	r3, r0
 800af2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800af30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af32:	2b00      	cmp	r3, #0
 800af34:	d106      	bne.n	800af44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	639a      	str	r2, [r3, #56]	; 0x38
 800af42:	e005      	b.n	800af50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	2b01      	cmp	r3, #1
 800af54:	d10b      	bne.n	800af6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	f043 0206 	orr.w	r2, r3, #6
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	f043 0220 	orr.w	r2, r3, #32
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af7a:	b004      	add	sp, #16
 800af7c:	4770      	bx	lr
	...

0800af80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800af80:	b480      	push	{r7}
 800af82:	b087      	sub	sp, #28
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	4613      	mov	r3, r2
 800af8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800af8e:	79fb      	ldrb	r3, [r7, #7]
 800af90:	2b02      	cmp	r3, #2
 800af92:	d165      	bne.n	800b060 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	4a41      	ldr	r2, [pc, #260]	; (800b09c <USB_SetTurnaroundTime+0x11c>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d906      	bls.n	800afaa <USB_SetTurnaroundTime+0x2a>
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	4a40      	ldr	r2, [pc, #256]	; (800b0a0 <USB_SetTurnaroundTime+0x120>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d202      	bcs.n	800afaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800afa4:	230f      	movs	r3, #15
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e062      	b.n	800b070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	4a3c      	ldr	r2, [pc, #240]	; (800b0a0 <USB_SetTurnaroundTime+0x120>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d306      	bcc.n	800afc0 <USB_SetTurnaroundTime+0x40>
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	4a3b      	ldr	r2, [pc, #236]	; (800b0a4 <USB_SetTurnaroundTime+0x124>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d202      	bcs.n	800afc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800afba:	230e      	movs	r3, #14
 800afbc:	617b      	str	r3, [r7, #20]
 800afbe:	e057      	b.n	800b070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	4a38      	ldr	r2, [pc, #224]	; (800b0a4 <USB_SetTurnaroundTime+0x124>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d306      	bcc.n	800afd6 <USB_SetTurnaroundTime+0x56>
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	4a37      	ldr	r2, [pc, #220]	; (800b0a8 <USB_SetTurnaroundTime+0x128>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d202      	bcs.n	800afd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800afd0:	230d      	movs	r3, #13
 800afd2:	617b      	str	r3, [r7, #20]
 800afd4:	e04c      	b.n	800b070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	4a33      	ldr	r2, [pc, #204]	; (800b0a8 <USB_SetTurnaroundTime+0x128>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d306      	bcc.n	800afec <USB_SetTurnaroundTime+0x6c>
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	4a32      	ldr	r2, [pc, #200]	; (800b0ac <USB_SetTurnaroundTime+0x12c>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d802      	bhi.n	800afec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800afe6:	230c      	movs	r3, #12
 800afe8:	617b      	str	r3, [r7, #20]
 800afea:	e041      	b.n	800b070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	4a2f      	ldr	r2, [pc, #188]	; (800b0ac <USB_SetTurnaroundTime+0x12c>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d906      	bls.n	800b002 <USB_SetTurnaroundTime+0x82>
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	4a2e      	ldr	r2, [pc, #184]	; (800b0b0 <USB_SetTurnaroundTime+0x130>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d802      	bhi.n	800b002 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800affc:	230b      	movs	r3, #11
 800affe:	617b      	str	r3, [r7, #20]
 800b000:	e036      	b.n	800b070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	4a2a      	ldr	r2, [pc, #168]	; (800b0b0 <USB_SetTurnaroundTime+0x130>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d906      	bls.n	800b018 <USB_SetTurnaroundTime+0x98>
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	4a29      	ldr	r2, [pc, #164]	; (800b0b4 <USB_SetTurnaroundTime+0x134>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d802      	bhi.n	800b018 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b012:	230a      	movs	r3, #10
 800b014:	617b      	str	r3, [r7, #20]
 800b016:	e02b      	b.n	800b070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	4a26      	ldr	r2, [pc, #152]	; (800b0b4 <USB_SetTurnaroundTime+0x134>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d906      	bls.n	800b02e <USB_SetTurnaroundTime+0xae>
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	4a25      	ldr	r2, [pc, #148]	; (800b0b8 <USB_SetTurnaroundTime+0x138>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d202      	bcs.n	800b02e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b028:	2309      	movs	r3, #9
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	e020      	b.n	800b070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	4a21      	ldr	r2, [pc, #132]	; (800b0b8 <USB_SetTurnaroundTime+0x138>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d306      	bcc.n	800b044 <USB_SetTurnaroundTime+0xc4>
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	4a20      	ldr	r2, [pc, #128]	; (800b0bc <USB_SetTurnaroundTime+0x13c>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d802      	bhi.n	800b044 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b03e:	2308      	movs	r3, #8
 800b040:	617b      	str	r3, [r7, #20]
 800b042:	e015      	b.n	800b070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	4a1d      	ldr	r2, [pc, #116]	; (800b0bc <USB_SetTurnaroundTime+0x13c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d906      	bls.n	800b05a <USB_SetTurnaroundTime+0xda>
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	4a1c      	ldr	r2, [pc, #112]	; (800b0c0 <USB_SetTurnaroundTime+0x140>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d202      	bcs.n	800b05a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b054:	2307      	movs	r3, #7
 800b056:	617b      	str	r3, [r7, #20]
 800b058:	e00a      	b.n	800b070 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b05a:	2306      	movs	r3, #6
 800b05c:	617b      	str	r3, [r7, #20]
 800b05e:	e007      	b.n	800b070 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b060:	79fb      	ldrb	r3, [r7, #7]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d102      	bne.n	800b06c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b066:	2309      	movs	r3, #9
 800b068:	617b      	str	r3, [r7, #20]
 800b06a:	e001      	b.n	800b070 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b06c:	2309      	movs	r3, #9
 800b06e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	68da      	ldr	r2, [r3, #12]
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	029b      	lsls	r3, r3, #10
 800b084:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b088:	431a      	orrs	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	371c      	adds	r7, #28
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	00d8acbf 	.word	0x00d8acbf
 800b0a0:	00e4e1c0 	.word	0x00e4e1c0
 800b0a4:	00f42400 	.word	0x00f42400
 800b0a8:	01067380 	.word	0x01067380
 800b0ac:	011a499f 	.word	0x011a499f
 800b0b0:	01312cff 	.word	0x01312cff
 800b0b4:	014ca43f 	.word	0x014ca43f
 800b0b8:	016e3600 	.word	0x016e3600
 800b0bc:	01a6ab1f 	.word	0x01a6ab1f
 800b0c0:	01e84800 	.word	0x01e84800

0800b0c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	f043 0201 	orr.w	r2, r3, #1
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b083      	sub	sp, #12
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	f023 0201 	bic.w	r2, r3, #1
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	460b      	mov	r3, r1
 800b112:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b114:	2300      	movs	r3, #0
 800b116:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b124:	78fb      	ldrb	r3, [r7, #3]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d115      	bne.n	800b156 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b136:	2001      	movs	r0, #1
 800b138:	f7f9 fb4c 	bl	80047d4 <HAL_Delay>
      ms++;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	3301      	adds	r3, #1
 800b140:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f001 fa45 	bl	800c5d2 <USB_GetMode>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d01e      	beq.n	800b18c <USB_SetCurrentMode+0x84>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b31      	cmp	r3, #49	; 0x31
 800b152:	d9f0      	bls.n	800b136 <USB_SetCurrentMode+0x2e>
 800b154:	e01a      	b.n	800b18c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b156:	78fb      	ldrb	r3, [r7, #3]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d115      	bne.n	800b188 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b168:	2001      	movs	r0, #1
 800b16a:	f7f9 fb33 	bl	80047d4 <HAL_Delay>
      ms++;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3301      	adds	r3, #1
 800b172:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f001 fa2c 	bl	800c5d2 <USB_GetMode>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d005      	beq.n	800b18c <USB_SetCurrentMode+0x84>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2b31      	cmp	r3, #49	; 0x31
 800b184:	d9f0      	bls.n	800b168 <USB_SetCurrentMode+0x60>
 800b186:	e001      	b.n	800b18c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	e005      	b.n	800b198 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b32      	cmp	r3, #50	; 0x32
 800b190:	d101      	bne.n	800b196 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	e000      	b.n	800b198 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b086      	sub	sp, #24
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b1ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	613b      	str	r3, [r7, #16]
 800b1be:	e009      	b.n	800b1d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	3340      	adds	r3, #64	; 0x40
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	613b      	str	r3, [r7, #16]
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	2b0e      	cmp	r3, #14
 800b1d8:	d9f2      	bls.n	800b1c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d11c      	bne.n	800b21a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1ee:	f043 0302 	orr.w	r3, r3, #2
 800b1f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b204:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b210:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	639a      	str	r2, [r3, #56]	; 0x38
 800b218:	e00b      	b.n	800b232 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b238:	461a      	mov	r2, r3
 800b23a:	2300      	movs	r3, #0
 800b23c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b244:	4619      	mov	r1, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b24c:	461a      	mov	r2, r3
 800b24e:	680b      	ldr	r3, [r1, #0]
 800b250:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b254:	2b01      	cmp	r3, #1
 800b256:	d10c      	bne.n	800b272 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d104      	bne.n	800b268 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b25e:	2100      	movs	r1, #0
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f965 	bl	800b530 <USB_SetDevSpeed>
 800b266:	e008      	b.n	800b27a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b268:	2101      	movs	r1, #1
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f960 	bl	800b530 <USB_SetDevSpeed>
 800b270:	e003      	b.n	800b27a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b272:	2103      	movs	r1, #3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f95b 	bl	800b530 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b27a:	2110      	movs	r1, #16
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 f8f3 	bl	800b468 <USB_FlushTxFifo>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f91f 	bl	800b4d0 <USB_FlushRxFifo>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	2300      	movs	r3, #0
 800b2be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	613b      	str	r3, [r7, #16]
 800b2c4:	e043      	b.n	800b34e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	015a      	lsls	r2, r3, #5
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2dc:	d118      	bne.n	800b310 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10a      	bne.n	800b2fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	015a      	lsls	r2, r3, #5
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	e013      	b.n	800b322 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	015a      	lsls	r2, r3, #5
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	4413      	add	r3, r2
 800b302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b306:	461a      	mov	r2, r3
 800b308:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	e008      	b.n	800b322 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	015a      	lsls	r2, r3, #5
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	4413      	add	r3, r2
 800b318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b31c:	461a      	mov	r2, r3
 800b31e:	2300      	movs	r3, #0
 800b320:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	015a      	lsls	r2, r3, #5
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	4413      	add	r3, r2
 800b32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b32e:	461a      	mov	r2, r3
 800b330:	2300      	movs	r3, #0
 800b332:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	015a      	lsls	r2, r3, #5
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	4413      	add	r3, r2
 800b33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b340:	461a      	mov	r2, r3
 800b342:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b346:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	3301      	adds	r3, #1
 800b34c:	613b      	str	r3, [r7, #16]
 800b34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	429a      	cmp	r2, r3
 800b354:	d3b7      	bcc.n	800b2c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b356:	2300      	movs	r3, #0
 800b358:	613b      	str	r3, [r7, #16]
 800b35a:	e043      	b.n	800b3e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	015a      	lsls	r2, r3, #5
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	4413      	add	r3, r2
 800b364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b36e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b372:	d118      	bne.n	800b3a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10a      	bne.n	800b390 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	015a      	lsls	r2, r3, #5
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	4413      	add	r3, r2
 800b382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b386:	461a      	mov	r2, r3
 800b388:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	e013      	b.n	800b3b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	015a      	lsls	r2, r3, #5
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	4413      	add	r3, r2
 800b398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39c:	461a      	mov	r2, r3
 800b39e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b3a2:	6013      	str	r3, [r2, #0]
 800b3a4:	e008      	b.n	800b3b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	015a      	lsls	r2, r3, #5
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	015a      	lsls	r2, r3, #5
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	613b      	str	r3, [r7, #16]
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d3b7      	bcc.n	800b35c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b40c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b410:	2b00      	cmp	r3, #0
 800b412:	d105      	bne.n	800b420 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	699b      	ldr	r3, [r3, #24]
 800b418:	f043 0210 	orr.w	r2, r3, #16
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	699a      	ldr	r2, [r3, #24]
 800b424:	4b0f      	ldr	r3, [pc, #60]	; (800b464 <USB_DevInit+0x2c4>)
 800b426:	4313      	orrs	r3, r2
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d005      	beq.n	800b43e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	f043 0208 	orr.w	r2, r3, #8
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b43e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b440:	2b01      	cmp	r3, #1
 800b442:	d107      	bne.n	800b454 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	699b      	ldr	r3, [r3, #24]
 800b448:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b44c:	f043 0304 	orr.w	r3, r3, #4
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b454:	7dfb      	ldrb	r3, [r7, #23]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b460:	b004      	add	sp, #16
 800b462:	4770      	bx	lr
 800b464:	803c3800 	.word	0x803c3800

0800b468 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3301      	adds	r3, #1
 800b47a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	4a13      	ldr	r2, [pc, #76]	; (800b4cc <USB_FlushTxFifo+0x64>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d901      	bls.n	800b488 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e01b      	b.n	800b4c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	daf2      	bge.n	800b476 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b490:	2300      	movs	r3, #0
 800b492:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	019b      	lsls	r3, r3, #6
 800b498:	f043 0220 	orr.w	r2, r3, #32
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	4a08      	ldr	r2, [pc, #32]	; (800b4cc <USB_FlushTxFifo+0x64>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d901      	bls.n	800b4b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b4ae:	2303      	movs	r3, #3
 800b4b0:	e006      	b.n	800b4c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	f003 0320 	and.w	r3, r3, #32
 800b4ba:	2b20      	cmp	r3, #32
 800b4bc:	d0f0      	beq.n	800b4a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	00030d40 	.word	0x00030d40

0800b4d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	4a11      	ldr	r2, [pc, #68]	; (800b52c <USB_FlushRxFifo+0x5c>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d901      	bls.n	800b4ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	e018      	b.n	800b520 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	daf2      	bge.n	800b4dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2210      	movs	r2, #16
 800b4fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	3301      	adds	r3, #1
 800b504:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	4a08      	ldr	r2, [pc, #32]	; (800b52c <USB_FlushRxFifo+0x5c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d901      	bls.n	800b512 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e006      	b.n	800b520 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	f003 0310 	and.w	r3, r3, #16
 800b51a:	2b10      	cmp	r3, #16
 800b51c:	d0f0      	beq.n	800b500 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3714      	adds	r7, #20
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	00030d40 	.word	0x00030d40

0800b530 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	78fb      	ldrb	r3, [r7, #3]
 800b54a:	68f9      	ldr	r1, [r7, #12]
 800b54c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b550:	4313      	orrs	r3, r2
 800b552:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b562:	b480      	push	{r7}
 800b564:	b087      	sub	sp, #28
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	f003 0306 	and.w	r3, r3, #6
 800b57a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d102      	bne.n	800b588 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b582:	2300      	movs	r3, #0
 800b584:	75fb      	strb	r3, [r7, #23]
 800b586:	e00a      	b.n	800b59e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d002      	beq.n	800b594 <USB_GetDevSpeed+0x32>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b06      	cmp	r3, #6
 800b592:	d102      	bne.n	800b59a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b594:	2302      	movs	r3, #2
 800b596:	75fb      	strb	r3, [r7, #23]
 800b598:	e001      	b.n	800b59e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b59a:	230f      	movs	r3, #15
 800b59c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	371c      	adds	r7, #28
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	785b      	ldrb	r3, [r3, #1]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d13a      	bne.n	800b63e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ce:	69da      	ldr	r2, [r3, #28]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	f003 030f 	and.w	r3, r3, #15
 800b5d8:	2101      	movs	r1, #1
 800b5da:	fa01 f303 	lsl.w	r3, r1, r3
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	68f9      	ldr	r1, [r7, #12]
 800b5e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	015a      	lsls	r2, r3, #5
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d155      	bne.n	800b6ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	015a      	lsls	r2, r3, #5
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	4413      	add	r3, r2
 800b608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	791b      	ldrb	r3, [r3, #4]
 800b61a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b61c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	059b      	lsls	r3, r3, #22
 800b622:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b624:	4313      	orrs	r3, r2
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	0151      	lsls	r1, r2, #5
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	440a      	add	r2, r1
 800b62e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b63a:	6013      	str	r3, [r2, #0]
 800b63c:	e036      	b.n	800b6ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b644:	69da      	ldr	r2, [r3, #28]
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	f003 030f 	and.w	r3, r3, #15
 800b64e:	2101      	movs	r1, #1
 800b650:	fa01 f303 	lsl.w	r3, r1, r3
 800b654:	041b      	lsls	r3, r3, #16
 800b656:	68f9      	ldr	r1, [r7, #12]
 800b658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b65c:	4313      	orrs	r3, r2
 800b65e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	015a      	lsls	r2, r3, #5
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	4413      	add	r3, r2
 800b668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b672:	2b00      	cmp	r3, #0
 800b674:	d11a      	bne.n	800b6ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	015a      	lsls	r2, r3, #5
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4413      	add	r3, r2
 800b67e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	791b      	ldrb	r3, [r3, #4]
 800b690:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b692:	430b      	orrs	r3, r1
 800b694:	4313      	orrs	r3, r2
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	0151      	lsls	r1, r2, #5
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	440a      	add	r2, r1
 800b69e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
	...

0800b6bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	785b      	ldrb	r3, [r3, #1]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d161      	bne.n	800b79c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	015a      	lsls	r2, r3, #5
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	4413      	add	r3, r2
 800b6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6ee:	d11f      	bne.n	800b730 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	015a      	lsls	r2, r3, #5
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	0151      	lsls	r1, r2, #5
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	440a      	add	r2, r1
 800b706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b70a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b70e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4413      	add	r3, r2
 800b718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	0151      	lsls	r1, r2, #5
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	440a      	add	r2, r1
 800b726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b72a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b72e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	f003 030f 	and.w	r3, r3, #15
 800b740:	2101      	movs	r1, #1
 800b742:	fa01 f303 	lsl.w	r3, r1, r3
 800b746:	b29b      	uxth	r3, r3
 800b748:	43db      	mvns	r3, r3
 800b74a:	68f9      	ldr	r1, [r7, #12]
 800b74c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b750:	4013      	ands	r3, r2
 800b752:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b75a:	69da      	ldr	r2, [r3, #28]
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	f003 030f 	and.w	r3, r3, #15
 800b764:	2101      	movs	r1, #1
 800b766:	fa01 f303 	lsl.w	r3, r1, r3
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	43db      	mvns	r3, r3
 800b76e:	68f9      	ldr	r1, [r7, #12]
 800b770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b774:	4013      	ands	r3, r2
 800b776:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	0159      	lsls	r1, r3, #5
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	440b      	add	r3, r1
 800b78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b792:	4619      	mov	r1, r3
 800b794:	4b35      	ldr	r3, [pc, #212]	; (800b86c <USB_DeactivateEndpoint+0x1b0>)
 800b796:	4013      	ands	r3, r2
 800b798:	600b      	str	r3, [r1, #0]
 800b79a:	e060      	b.n	800b85e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	015a      	lsls	r2, r3, #5
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7b2:	d11f      	bne.n	800b7f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	0151      	lsls	r1, r2, #5
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	440a      	add	r2, r1
 800b7ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	0151      	lsls	r1, r2, #5
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	440a      	add	r2, r1
 800b7ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	f003 030f 	and.w	r3, r3, #15
 800b804:	2101      	movs	r1, #1
 800b806:	fa01 f303 	lsl.w	r3, r1, r3
 800b80a:	041b      	lsls	r3, r3, #16
 800b80c:	43db      	mvns	r3, r3
 800b80e:	68f9      	ldr	r1, [r7, #12]
 800b810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b814:	4013      	ands	r3, r2
 800b816:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81e:	69da      	ldr	r2, [r3, #28]
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	f003 030f 	and.w	r3, r3, #15
 800b828:	2101      	movs	r1, #1
 800b82a:	fa01 f303 	lsl.w	r3, r1, r3
 800b82e:	041b      	lsls	r3, r3, #16
 800b830:	43db      	mvns	r3, r3
 800b832:	68f9      	ldr	r1, [r7, #12]
 800b834:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b838:	4013      	ands	r3, r2
 800b83a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	015a      	lsls	r2, r3, #5
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	4413      	add	r3, r2
 800b844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	0159      	lsls	r1, r3, #5
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	440b      	add	r3, r1
 800b852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b856:	4619      	mov	r1, r3
 800b858:	4b05      	ldr	r3, [pc, #20]	; (800b870 <USB_DeactivateEndpoint+0x1b4>)
 800b85a:	4013      	ands	r3, r2
 800b85c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3714      	adds	r7, #20
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	ec337800 	.word	0xec337800
 800b870:	eff37800 	.word	0xeff37800

0800b874 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b08a      	sub	sp, #40	; 0x28
 800b878:	af02      	add	r7, sp, #8
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	4613      	mov	r3, r2
 800b880:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	785b      	ldrb	r3, [r3, #1]
 800b890:	2b01      	cmp	r3, #1
 800b892:	f040 815c 	bne.w	800bb4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d132      	bne.n	800b904 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	015a      	lsls	r2, r3, #5
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	69ba      	ldr	r2, [r7, #24]
 800b8ae:	0151      	lsls	r1, r2, #5
 800b8b0:	69fa      	ldr	r2, [r7, #28]
 800b8b2:	440a      	add	r2, r1
 800b8b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b8bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b8c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	015a      	lsls	r2, r3, #5
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	69ba      	ldr	r2, [r7, #24]
 800b8d2:	0151      	lsls	r1, r2, #5
 800b8d4:	69fa      	ldr	r2, [r7, #28]
 800b8d6:	440a      	add	r2, r1
 800b8d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	69ba      	ldr	r2, [r7, #24]
 800b8f2:	0151      	lsls	r1, r2, #5
 800b8f4:	69fa      	ldr	r2, [r7, #28]
 800b8f6:	440a      	add	r2, r1
 800b8f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8fc:	0cdb      	lsrs	r3, r3, #19
 800b8fe:	04db      	lsls	r3, r3, #19
 800b900:	6113      	str	r3, [r2, #16]
 800b902:	e074      	b.n	800b9ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	015a      	lsls	r2, r3, #5
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	4413      	add	r3, r2
 800b90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	69ba      	ldr	r2, [r7, #24]
 800b914:	0151      	lsls	r1, r2, #5
 800b916:	69fa      	ldr	r2, [r7, #28]
 800b918:	440a      	add	r2, r1
 800b91a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b91e:	0cdb      	lsrs	r3, r3, #19
 800b920:	04db      	lsls	r3, r3, #19
 800b922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	015a      	lsls	r2, r3, #5
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	4413      	add	r3, r2
 800b92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	69ba      	ldr	r2, [r7, #24]
 800b934:	0151      	lsls	r1, r2, #5
 800b936:	69fa      	ldr	r2, [r7, #28]
 800b938:	440a      	add	r2, r1
 800b93a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b93e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b942:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b946:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	015a      	lsls	r2, r3, #5
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b954:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	6999      	ldr	r1, [r3, #24]
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	440b      	add	r3, r1
 800b960:	1e59      	subs	r1, r3, #1
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	fbb1 f3f3 	udiv	r3, r1, r3
 800b96a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b96c:	4b9d      	ldr	r3, [pc, #628]	; (800bbe4 <USB_EPStartXfer+0x370>)
 800b96e:	400b      	ands	r3, r1
 800b970:	69b9      	ldr	r1, [r7, #24]
 800b972:	0148      	lsls	r0, r1, #5
 800b974:	69f9      	ldr	r1, [r7, #28]
 800b976:	4401      	add	r1, r0
 800b978:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b97c:	4313      	orrs	r3, r2
 800b97e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	015a      	lsls	r2, r3, #5
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	4413      	add	r3, r2
 800b988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b98c:	691a      	ldr	r2, [r3, #16]
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b996:	69b9      	ldr	r1, [r7, #24]
 800b998:	0148      	lsls	r0, r1, #5
 800b99a:	69f9      	ldr	r1, [r7, #28]
 800b99c:	4401      	add	r1, r0
 800b99e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	791b      	ldrb	r3, [r3, #4]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d11f      	bne.n	800b9ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	015a      	lsls	r2, r3, #5
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	69ba      	ldr	r2, [r7, #24]
 800b9be:	0151      	lsls	r1, r2, #5
 800b9c0:	69fa      	ldr	r2, [r7, #28]
 800b9c2:	440a      	add	r2, r1
 800b9c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b9cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	015a      	lsls	r2, r3, #5
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	69ba      	ldr	r2, [r7, #24]
 800b9de:	0151      	lsls	r1, r2, #5
 800b9e0:	69fa      	ldr	r2, [r7, #28]
 800b9e2:	440a      	add	r2, r1
 800b9e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b9ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b9ee:	79fb      	ldrb	r3, [r7, #7]
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d14b      	bne.n	800ba8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d009      	beq.n	800ba10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	015a      	lsls	r2, r3, #5
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	4413      	add	r3, r2
 800ba04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba08:	461a      	mov	r2, r3
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	695b      	ldr	r3, [r3, #20]
 800ba0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	791b      	ldrb	r3, [r3, #4]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d128      	bne.n	800ba6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d110      	bne.n	800ba4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	015a      	lsls	r2, r3, #5
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	4413      	add	r3, r2
 800ba30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	69ba      	ldr	r2, [r7, #24]
 800ba38:	0151      	lsls	r1, r2, #5
 800ba3a:	69fa      	ldr	r2, [r7, #28]
 800ba3c:	440a      	add	r2, r1
 800ba3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	e00f      	b.n	800ba6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	015a      	lsls	r2, r3, #5
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	4413      	add	r3, r2
 800ba52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	69ba      	ldr	r2, [r7, #24]
 800ba5a:	0151      	lsls	r1, r2, #5
 800ba5c:	69fa      	ldr	r2, [r7, #28]
 800ba5e:	440a      	add	r2, r1
 800ba60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	015a      	lsls	r2, r3, #5
 800ba6e:	69fb      	ldr	r3, [r7, #28]
 800ba70:	4413      	add	r3, r2
 800ba72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	69ba      	ldr	r2, [r7, #24]
 800ba7a:	0151      	lsls	r1, r2, #5
 800ba7c:	69fa      	ldr	r2, [r7, #28]
 800ba7e:	440a      	add	r2, r1
 800ba80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ba88:	6013      	str	r3, [r2, #0]
 800ba8a:	e133      	b.n	800bcf4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	015a      	lsls	r2, r3, #5
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	4413      	add	r3, r2
 800ba94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	69ba      	ldr	r2, [r7, #24]
 800ba9c:	0151      	lsls	r1, r2, #5
 800ba9e:	69fa      	ldr	r2, [r7, #28]
 800baa0:	440a      	add	r2, r1
 800baa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800baaa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	791b      	ldrb	r3, [r3, #4]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d015      	beq.n	800bae0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	699b      	ldr	r3, [r3, #24]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f000 811b 	beq.w	800bcf4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	f003 030f 	and.w	r3, r3, #15
 800bace:	2101      	movs	r1, #1
 800bad0:	fa01 f303 	lsl.w	r3, r1, r3
 800bad4:	69f9      	ldr	r1, [r7, #28]
 800bad6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bada:	4313      	orrs	r3, r2
 800badc:	634b      	str	r3, [r1, #52]	; 0x34
 800bade:	e109      	b.n	800bcf4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baec:	2b00      	cmp	r3, #0
 800baee:	d110      	bne.n	800bb12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	015a      	lsls	r2, r3, #5
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	4413      	add	r3, r2
 800baf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	69ba      	ldr	r2, [r7, #24]
 800bb00:	0151      	lsls	r1, r2, #5
 800bb02:	69fa      	ldr	r2, [r7, #28]
 800bb04:	440a      	add	r2, r1
 800bb06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb0e:	6013      	str	r3, [r2, #0]
 800bb10:	e00f      	b.n	800bb32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	015a      	lsls	r2, r3, #5
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	4413      	add	r3, r2
 800bb1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	69ba      	ldr	r2, [r7, #24]
 800bb22:	0151      	lsls	r1, r2, #5
 800bb24:	69fa      	ldr	r2, [r7, #28]
 800bb26:	440a      	add	r2, r1
 800bb28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	6919      	ldr	r1, [r3, #16]
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	781a      	ldrb	r2, [r3, #0]
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	b298      	uxth	r0, r3
 800bb40:	79fb      	ldrb	r3, [r7, #7]
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	4603      	mov	r3, r0
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f000 fade 	bl	800c108 <USB_WritePacket>
 800bb4c:	e0d2      	b.n	800bcf4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	015a      	lsls	r2, r3, #5
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	4413      	add	r3, r2
 800bb56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	69ba      	ldr	r2, [r7, #24]
 800bb5e:	0151      	lsls	r1, r2, #5
 800bb60:	69fa      	ldr	r2, [r7, #28]
 800bb62:	440a      	add	r2, r1
 800bb64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb68:	0cdb      	lsrs	r3, r3, #19
 800bb6a:	04db      	lsls	r3, r3, #19
 800bb6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	015a      	lsls	r2, r3, #5
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	4413      	add	r3, r2
 800bb76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	69ba      	ldr	r2, [r7, #24]
 800bb7e:	0151      	lsls	r1, r2, #5
 800bb80:	69fa      	ldr	r2, [r7, #28]
 800bb82:	440a      	add	r2, r1
 800bb84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	699b      	ldr	r3, [r3, #24]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d126      	bne.n	800bbe8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	015a      	lsls	r2, r3, #5
 800bb9e:	69fb      	ldr	r3, [r7, #28]
 800bba0:	4413      	add	r3, r2
 800bba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba6:	691a      	ldr	r2, [r3, #16]
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbb0:	69b9      	ldr	r1, [r7, #24]
 800bbb2:	0148      	lsls	r0, r1, #5
 800bbb4:	69f9      	ldr	r1, [r7, #28]
 800bbb6:	4401      	add	r1, r0
 800bbb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	015a      	lsls	r2, r3, #5
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	69ba      	ldr	r2, [r7, #24]
 800bbd0:	0151      	lsls	r1, r2, #5
 800bbd2:	69fa      	ldr	r2, [r7, #28]
 800bbd4:	440a      	add	r2, r1
 800bbd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbde:	6113      	str	r3, [r2, #16]
 800bbe0:	e03a      	b.n	800bc58 <USB_EPStartXfer+0x3e4>
 800bbe2:	bf00      	nop
 800bbe4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	699a      	ldr	r2, [r3, #24]
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	1e5a      	subs	r2, r3, #1
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbfc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	8afa      	ldrh	r2, [r7, #22]
 800bc04:	fb03 f202 	mul.w	r2, r3, r2
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	015a      	lsls	r2, r3, #5
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	4413      	add	r3, r2
 800bc14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc18:	691a      	ldr	r2, [r3, #16]
 800bc1a:	8afb      	ldrh	r3, [r7, #22]
 800bc1c:	04d9      	lsls	r1, r3, #19
 800bc1e:	4b38      	ldr	r3, [pc, #224]	; (800bd00 <USB_EPStartXfer+0x48c>)
 800bc20:	400b      	ands	r3, r1
 800bc22:	69b9      	ldr	r1, [r7, #24]
 800bc24:	0148      	lsls	r0, r1, #5
 800bc26:	69f9      	ldr	r1, [r7, #28]
 800bc28:	4401      	add	r1, r0
 800bc2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	015a      	lsls	r2, r3, #5
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	4413      	add	r3, r2
 800bc3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc3e:	691a      	ldr	r2, [r3, #16]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc48:	69b9      	ldr	r1, [r7, #24]
 800bc4a:	0148      	lsls	r0, r1, #5
 800bc4c:	69f9      	ldr	r1, [r7, #28]
 800bc4e:	4401      	add	r1, r0
 800bc50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bc54:	4313      	orrs	r3, r2
 800bc56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bc58:	79fb      	ldrb	r3, [r7, #7]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d10d      	bne.n	800bc7a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d009      	beq.n	800bc7a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	6919      	ldr	r1, [r3, #16]
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	015a      	lsls	r2, r3, #5
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	4413      	add	r3, r2
 800bc72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc76:	460a      	mov	r2, r1
 800bc78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	791b      	ldrb	r3, [r3, #4]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d128      	bne.n	800bcd4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d110      	bne.n	800bcb4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	015a      	lsls	r2, r3, #5
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	4413      	add	r3, r2
 800bc9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	69ba      	ldr	r2, [r7, #24]
 800bca2:	0151      	lsls	r1, r2, #5
 800bca4:	69fa      	ldr	r2, [r7, #28]
 800bca6:	440a      	add	r2, r1
 800bca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bcb0:	6013      	str	r3, [r2, #0]
 800bcb2:	e00f      	b.n	800bcd4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	015a      	lsls	r2, r3, #5
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	4413      	add	r3, r2
 800bcbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	69ba      	ldr	r2, [r7, #24]
 800bcc4:	0151      	lsls	r1, r2, #5
 800bcc6:	69fa      	ldr	r2, [r7, #28]
 800bcc8:	440a      	add	r2, r1
 800bcca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	015a      	lsls	r2, r3, #5
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	4413      	add	r3, r2
 800bcdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	69ba      	ldr	r2, [r7, #24]
 800bce4:	0151      	lsls	r1, r2, #5
 800bce6:	69fa      	ldr	r2, [r7, #28]
 800bce8:	440a      	add	r2, r1
 800bcea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bcf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3720      	adds	r7, #32
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	1ff80000 	.word	0x1ff80000

0800bd04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b087      	sub	sp, #28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	785b      	ldrb	r3, [r3, #1]
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	f040 80ce 	bne.w	800bec2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	699b      	ldr	r3, [r3, #24]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d132      	bne.n	800bd94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	015a      	lsls	r2, r3, #5
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	4413      	add	r3, r2
 800bd36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	0151      	lsls	r1, r2, #5
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	440a      	add	r2, r1
 800bd44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bd50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	015a      	lsls	r2, r3, #5
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	4413      	add	r3, r2
 800bd5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	693a      	ldr	r2, [r7, #16]
 800bd62:	0151      	lsls	r1, r2, #5
 800bd64:	697a      	ldr	r2, [r7, #20]
 800bd66:	440a      	add	r2, r1
 800bd68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	015a      	lsls	r2, r3, #5
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	4413      	add	r3, r2
 800bd7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	693a      	ldr	r2, [r7, #16]
 800bd82:	0151      	lsls	r1, r2, #5
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	440a      	add	r2, r1
 800bd88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd8c:	0cdb      	lsrs	r3, r3, #19
 800bd8e:	04db      	lsls	r3, r3, #19
 800bd90:	6113      	str	r3, [r2, #16]
 800bd92:	e04e      	b.n	800be32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	015a      	lsls	r2, r3, #5
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	0151      	lsls	r1, r2, #5
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	440a      	add	r2, r1
 800bdaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdae:	0cdb      	lsrs	r3, r3, #19
 800bdb0:	04db      	lsls	r3, r3, #19
 800bdb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	015a      	lsls	r2, r3, #5
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	0151      	lsls	r1, r2, #5
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	440a      	add	r2, r1
 800bdca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bdd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bdd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	699a      	ldr	r2, [r3, #24]
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d903      	bls.n	800bdec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	68da      	ldr	r2, [r3, #12]
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	693a      	ldr	r2, [r7, #16]
 800bdfc:	0151      	lsls	r1, r2, #5
 800bdfe:	697a      	ldr	r2, [r7, #20]
 800be00:	440a      	add	r2, r1
 800be02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	015a      	lsls	r2, r3, #5
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	4413      	add	r3, r2
 800be14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be18:	691a      	ldr	r2, [r3, #16]
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be22:	6939      	ldr	r1, [r7, #16]
 800be24:	0148      	lsls	r0, r1, #5
 800be26:	6979      	ldr	r1, [r7, #20]
 800be28:	4401      	add	r1, r0
 800be2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800be2e:	4313      	orrs	r3, r2
 800be30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800be32:	79fb      	ldrb	r3, [r7, #7]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d11e      	bne.n	800be76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	695b      	ldr	r3, [r3, #20]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d009      	beq.n	800be54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	015a      	lsls	r2, r3, #5
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	4413      	add	r3, r2
 800be48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be4c:	461a      	mov	r2, r3
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	015a      	lsls	r2, r3, #5
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	4413      	add	r3, r2
 800be5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	0151      	lsls	r1, r2, #5
 800be66:	697a      	ldr	r2, [r7, #20]
 800be68:	440a      	add	r2, r1
 800be6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be72:	6013      	str	r3, [r2, #0]
 800be74:	e097      	b.n	800bfa6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	015a      	lsls	r2, r3, #5
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	4413      	add	r3, r2
 800be7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	0151      	lsls	r1, r2, #5
 800be88:	697a      	ldr	r2, [r7, #20]
 800be8a:	440a      	add	r2, r1
 800be8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	699b      	ldr	r3, [r3, #24]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f000 8083 	beq.w	800bfa6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	f003 030f 	and.w	r3, r3, #15
 800beb0:	2101      	movs	r1, #1
 800beb2:	fa01 f303 	lsl.w	r3, r1, r3
 800beb6:	6979      	ldr	r1, [r7, #20]
 800beb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bebc:	4313      	orrs	r3, r2
 800bebe:	634b      	str	r3, [r1, #52]	; 0x34
 800bec0:	e071      	b.n	800bfa6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	0151      	lsls	r1, r2, #5
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	440a      	add	r2, r1
 800bed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bedc:	0cdb      	lsrs	r3, r3, #19
 800bede:	04db      	lsls	r3, r3, #19
 800bee0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	0151      	lsls	r1, r2, #5
 800bef4:	697a      	ldr	r2, [r7, #20]
 800bef6:	440a      	add	r2, r1
 800bef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800befc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d003      	beq.n	800bf16 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	68da      	ldr	r2, [r3, #12]
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	68da      	ldr	r2, [r3, #12]
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	015a      	lsls	r2, r3, #5
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	4413      	add	r3, r2
 800bf26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	693a      	ldr	r2, [r7, #16]
 800bf2e:	0151      	lsls	r1, r2, #5
 800bf30:	697a      	ldr	r2, [r7, #20]
 800bf32:	440a      	add	r2, r1
 800bf34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	015a      	lsls	r2, r3, #5
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	4413      	add	r3, r2
 800bf46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf4a:	691a      	ldr	r2, [r3, #16]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	69db      	ldr	r3, [r3, #28]
 800bf50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf54:	6939      	ldr	r1, [r7, #16]
 800bf56:	0148      	lsls	r0, r1, #5
 800bf58:	6979      	ldr	r1, [r7, #20]
 800bf5a:	4401      	add	r1, r0
 800bf5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf60:	4313      	orrs	r3, r2
 800bf62:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bf64:	79fb      	ldrb	r3, [r7, #7]
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d10d      	bne.n	800bf86 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d009      	beq.n	800bf86 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	6919      	ldr	r1, [r3, #16]
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	015a      	lsls	r2, r3, #5
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf82:	460a      	mov	r2, r1
 800bf84:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	015a      	lsls	r2, r3, #5
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	693a      	ldr	r2, [r7, #16]
 800bf96:	0151      	lsls	r1, r2, #5
 800bf98:	697a      	ldr	r2, [r7, #20]
 800bf9a:	440a      	add	r2, r1
 800bf9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfa0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfa4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bfa6:	2300      	movs	r3, #0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	371c      	adds	r7, #28
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b087      	sub	sp, #28
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	785b      	ldrb	r3, [r3, #1]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d14a      	bne.n	800c068 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	015a      	lsls	r2, r3, #5
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfea:	f040 8086 	bne.w	800c0fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	015a      	lsls	r2, r3, #5
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	4413      	add	r3, r2
 800bff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	7812      	ldrb	r2, [r2, #0]
 800c002:	0151      	lsls	r1, r2, #5
 800c004:	693a      	ldr	r2, [r7, #16]
 800c006:	440a      	add	r2, r1
 800c008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c00c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c010:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	015a      	lsls	r2, r3, #5
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	4413      	add	r3, r2
 800c01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	7812      	ldrb	r2, [r2, #0]
 800c026:	0151      	lsls	r1, r2, #5
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	440a      	add	r2, r1
 800c02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c030:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c034:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	3301      	adds	r3, #1
 800c03a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f242 7210 	movw	r2, #10000	; 0x2710
 800c042:	4293      	cmp	r3, r2
 800c044:	d902      	bls.n	800c04c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	75fb      	strb	r3, [r7, #23]
          break;
 800c04a:	e056      	b.n	800c0fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	015a      	lsls	r2, r3, #5
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	4413      	add	r3, r2
 800c056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c064:	d0e7      	beq.n	800c036 <USB_EPStopXfer+0x82>
 800c066:	e048      	b.n	800c0fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	015a      	lsls	r2, r3, #5
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	4413      	add	r3, r2
 800c072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c07c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c080:	d13b      	bne.n	800c0fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	015a      	lsls	r2, r3, #5
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	4413      	add	r3, r2
 800c08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	7812      	ldrb	r2, [r2, #0]
 800c096:	0151      	lsls	r1, r2, #5
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	440a      	add	r2, r1
 800c09c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	015a      	lsls	r2, r3, #5
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	683a      	ldr	r2, [r7, #0]
 800c0b8:	7812      	ldrb	r2, [r2, #0]
 800c0ba:	0151      	lsls	r1, r2, #5
 800c0bc:	693a      	ldr	r2, [r7, #16]
 800c0be:	440a      	add	r2, r1
 800c0c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f242 7210 	movw	r2, #10000	; 0x2710
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d902      	bls.n	800c0e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	75fb      	strb	r3, [r7, #23]
          break;
 800c0de:	e00c      	b.n	800c0fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	015a      	lsls	r2, r3, #5
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0f8:	d0e7      	beq.n	800c0ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c0fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	371c      	adds	r7, #28
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c108:	b480      	push	{r7}
 800c10a:	b089      	sub	sp, #36	; 0x24
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	4611      	mov	r1, r2
 800c114:	461a      	mov	r2, r3
 800c116:	460b      	mov	r3, r1
 800c118:	71fb      	strb	r3, [r7, #7]
 800c11a:	4613      	mov	r3, r2
 800c11c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c126:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d123      	bne.n	800c176 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c12e:	88bb      	ldrh	r3, [r7, #4]
 800c130:	3303      	adds	r3, #3
 800c132:	089b      	lsrs	r3, r3, #2
 800c134:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c136:	2300      	movs	r3, #0
 800c138:	61bb      	str	r3, [r7, #24]
 800c13a:	e018      	b.n	800c16e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c13c:	79fb      	ldrb	r3, [r7, #7]
 800c13e:	031a      	lsls	r2, r3, #12
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	4413      	add	r3, r2
 800c144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c148:	461a      	mov	r2, r3
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	3301      	adds	r3, #1
 800c154:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	3301      	adds	r3, #1
 800c15a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	3301      	adds	r3, #1
 800c160:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	3301      	adds	r3, #1
 800c166:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	3301      	adds	r3, #1
 800c16c:	61bb      	str	r3, [r7, #24]
 800c16e:	69ba      	ldr	r2, [r7, #24]
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	429a      	cmp	r2, r3
 800c174:	d3e2      	bcc.n	800c13c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3724      	adds	r7, #36	; 0x24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c184:	b480      	push	{r7}
 800c186:	b08b      	sub	sp, #44	; 0x2c
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	4613      	mov	r3, r2
 800c190:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c19a:	88fb      	ldrh	r3, [r7, #6]
 800c19c:	089b      	lsrs	r3, r3, #2
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c1a2:	88fb      	ldrh	r3, [r7, #6]
 800c1a4:	f003 0303 	and.w	r3, r3, #3
 800c1a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	623b      	str	r3, [r7, #32]
 800c1ae:	e014      	b.n	800c1da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ba:	601a      	str	r2, [r3, #0]
    pDest++;
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1be:	3301      	adds	r3, #1
 800c1c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	623b      	str	r3, [r7, #32]
 800c1da:	6a3a      	ldr	r2, [r7, #32]
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d3e6      	bcc.n	800c1b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c1e2:	8bfb      	ldrh	r3, [r7, #30]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d01e      	beq.n	800c226 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f107 0310 	add.w	r3, r7, #16
 800c1f8:	6812      	ldr	r2, [r2, #0]
 800c1fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	6a3b      	ldr	r3, [r7, #32]
 800c200:	b2db      	uxtb	r3, r3
 800c202:	00db      	lsls	r3, r3, #3
 800c204:	fa22 f303 	lsr.w	r3, r2, r3
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20c:	701a      	strb	r2, [r3, #0]
      i++;
 800c20e:	6a3b      	ldr	r3, [r7, #32]
 800c210:	3301      	adds	r3, #1
 800c212:	623b      	str	r3, [r7, #32]
      pDest++;
 800c214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c216:	3301      	adds	r3, #1
 800c218:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c21a:	8bfb      	ldrh	r3, [r7, #30]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c220:	8bfb      	ldrh	r3, [r7, #30]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1ea      	bne.n	800c1fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c228:	4618      	mov	r0, r3
 800c22a:	372c      	adds	r7, #44	; 0x2c
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	785b      	ldrb	r3, [r3, #1]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d12c      	bne.n	800c2aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	015a      	lsls	r2, r3, #5
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	4413      	add	r3, r2
 800c258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	db12      	blt.n	800c288 <USB_EPSetStall+0x54>
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00f      	beq.n	800c288 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	015a      	lsls	r2, r3, #5
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	4413      	add	r3, r2
 800c270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	0151      	lsls	r1, r2, #5
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	440a      	add	r2, r1
 800c27e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c282:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c286:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	015a      	lsls	r2, r3, #5
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4413      	add	r3, r2
 800c290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	0151      	lsls	r1, r2, #5
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	440a      	add	r2, r1
 800c29e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2a6:	6013      	str	r3, [r2, #0]
 800c2a8:	e02b      	b.n	800c302 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	015a      	lsls	r2, r3, #5
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	db12      	blt.n	800c2e2 <USB_EPSetStall+0xae>
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00f      	beq.n	800c2e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	015a      	lsls	r2, r3, #5
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	0151      	lsls	r1, r2, #5
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	440a      	add	r2, r1
 800c2d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c2e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	015a      	lsls	r2, r3, #5
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	0151      	lsls	r1, r2, #5
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	440a      	add	r2, r1
 800c2f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c300:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	785b      	ldrb	r3, [r3, #1]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d128      	bne.n	800c37e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4413      	add	r3, r2
 800c334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	0151      	lsls	r1, r2, #5
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	440a      	add	r2, r1
 800c342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c346:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c34a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	791b      	ldrb	r3, [r3, #4]
 800c350:	2b03      	cmp	r3, #3
 800c352:	d003      	beq.n	800c35c <USB_EPClearStall+0x4c>
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	791b      	ldrb	r3, [r3, #4]
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d138      	bne.n	800c3ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	015a      	lsls	r2, r3, #5
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	4413      	add	r3, r2
 800c364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	68ba      	ldr	r2, [r7, #8]
 800c36c:	0151      	lsls	r1, r2, #5
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	440a      	add	r2, r1
 800c372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c37a:	6013      	str	r3, [r2, #0]
 800c37c:	e027      	b.n	800c3ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	015a      	lsls	r2, r3, #5
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	4413      	add	r3, r2
 800c386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	0151      	lsls	r1, r2, #5
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	440a      	add	r2, r1
 800c394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c398:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c39c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	791b      	ldrb	r3, [r3, #4]
 800c3a2:	2b03      	cmp	r3, #3
 800c3a4:	d003      	beq.n	800c3ae <USB_EPClearStall+0x9e>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	791b      	ldrb	r3, [r3, #4]
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d10f      	bne.n	800c3ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	015a      	lsls	r2, r3, #5
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	0151      	lsls	r1, r2, #5
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	440a      	add	r2, r1
 800c3c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c3fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	78fb      	ldrb	r3, [r7, #3]
 800c40a:	011b      	lsls	r3, r3, #4
 800c40c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c410:	68f9      	ldr	r1, [r7, #12]
 800c412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c416:	4313      	orrs	r3, r2
 800c418:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c442:	f023 0303 	bic.w	r3, r3, #3
 800c446:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c456:	f023 0302 	bic.w	r3, r3, #2
 800c45a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr

0800c46a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c46a:	b480      	push	{r7}
 800c46c:	b085      	sub	sp, #20
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c484:	f023 0303 	bic.w	r3, r3, #3
 800c488:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c498:	f043 0302 	orr.w	r3, r3, #2
 800c49c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	695b      	ldr	r3, [r3, #20]
 800c4b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3714      	adds	r7, #20
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4d2:	b480      	push	{r7}
 800c4d4:	b085      	sub	sp, #20
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4e4:	699b      	ldr	r3, [r3, #24]
 800c4e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4ee:	69db      	ldr	r3, [r3, #28]
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	4013      	ands	r3, r2
 800c4f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	0c1b      	lsrs	r3, r3, #16
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c506:	b480      	push	{r7}
 800c508:	b085      	sub	sp, #20
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	4013      	ands	r3, r2
 800c528:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	b29b      	uxth	r3, r3
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c53a:	b480      	push	{r7}
 800c53c:	b085      	sub	sp, #20
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
 800c542:	460b      	mov	r3, r1
 800c544:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c54a:	78fb      	ldrb	r3, [r7, #3]
 800c54c:	015a      	lsls	r2, r3, #5
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	4413      	add	r3, r2
 800c552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c560:	695b      	ldr	r3, [r3, #20]
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	4013      	ands	r3, r2
 800c566:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c568:	68bb      	ldr	r3, [r7, #8]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3714      	adds	r7, #20
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr

0800c576 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c576:	b480      	push	{r7}
 800c578:	b087      	sub	sp, #28
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
 800c57e:	460b      	mov	r3, r1
 800c580:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c598:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c59a:	78fb      	ldrb	r3, [r7, #3]
 800c59c:	f003 030f 	and.w	r3, r3, #15
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a6:	01db      	lsls	r3, r3, #7
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c5b0:	78fb      	ldrb	r3, [r7, #3]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	4013      	ands	r3, r2
 800c5c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c5c4:	68bb      	ldr	r3, [r7, #8]
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	371c      	adds	r7, #28
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b083      	sub	sp, #12
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	f003 0301 	and.w	r3, r3, #1
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	370c      	adds	r7, #12
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b085      	sub	sp, #20
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	68fa      	ldr	r2, [r7, #12]
 800c604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c608:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c60c:	f023 0307 	bic.w	r3, r3, #7
 800c610:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c624:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3714      	adds	r7, #20
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c634:	b480      	push	{r7}
 800c636:	b087      	sub	sp, #28
 800c638:	af00      	add	r7, sp, #0
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	460b      	mov	r3, r1
 800c63e:	607a      	str	r2, [r7, #4]
 800c640:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	333c      	adds	r3, #60	; 0x3c
 800c64a:	3304      	adds	r3, #4
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	4a26      	ldr	r2, [pc, #152]	; (800c6ec <USB_EP0_OutStart+0xb8>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d90a      	bls.n	800c66e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c668:	d101      	bne.n	800c66e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c66a:	2300      	movs	r3, #0
 800c66c:	e037      	b.n	800c6de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c674:	461a      	mov	r2, r3
 800c676:	2300      	movs	r3, #0
 800c678:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c68c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	697a      	ldr	r2, [r7, #20]
 800c698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c69c:	f043 0318 	orr.w	r3, r3, #24
 800c6a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	697a      	ldr	r2, [r7, #20]
 800c6ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c6b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c6b6:	7afb      	ldrb	r3, [r7, #11]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d10f      	bne.n	800c6dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c6da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	371c      	adds	r7, #28
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	4f54300a 	.word	0x4f54300a

0800c6f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	3301      	adds	r3, #1
 800c700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	4a13      	ldr	r2, [pc, #76]	; (800c754 <USB_CoreReset+0x64>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d901      	bls.n	800c70e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e01b      	b.n	800c746 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	2b00      	cmp	r3, #0
 800c714:	daf2      	bge.n	800c6fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c716:	2300      	movs	r3, #0
 800c718:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	691b      	ldr	r3, [r3, #16]
 800c71e:	f043 0201 	orr.w	r2, r3, #1
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	3301      	adds	r3, #1
 800c72a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	4a09      	ldr	r2, [pc, #36]	; (800c754 <USB_CoreReset+0x64>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d901      	bls.n	800c738 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c734:	2303      	movs	r3, #3
 800c736:	e006      	b.n	800c746 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	2b01      	cmp	r3, #1
 800c742:	d0f0      	beq.n	800c726 <USB_CoreReset+0x36>

  return HAL_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	00030d40 	.word	0x00030d40

0800c758 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	460b      	mov	r3, r1
 800c762:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c764:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c768:	f002 fc8e 	bl	800f088 <USBD_static_malloc>
 800c76c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d109      	bne.n	800c788 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	32b0      	adds	r2, #176	; 0xb0
 800c77e:	2100      	movs	r1, #0
 800c780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c784:	2302      	movs	r3, #2
 800c786:	e0d4      	b.n	800c932 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c788:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c78c:	2100      	movs	r1, #0
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f002 fd10 	bl	800f1b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	32b0      	adds	r2, #176	; 0xb0
 800c79e:	68f9      	ldr	r1, [r7, #12]
 800c7a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	32b0      	adds	r2, #176	; 0xb0
 800c7ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	7c1b      	ldrb	r3, [r3, #16]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d138      	bne.n	800c832 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c7c0:	4b5e      	ldr	r3, [pc, #376]	; (800c93c <USBD_CDC_Init+0x1e4>)
 800c7c2:	7819      	ldrb	r1, [r3, #0]
 800c7c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f002 fb39 	bl	800ee42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c7d0:	4b5a      	ldr	r3, [pc, #360]	; (800c93c <USBD_CDC_Init+0x1e4>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	f003 020f 	and.w	r2, r3, #15
 800c7d8:	6879      	ldr	r1, [r7, #4]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	4413      	add	r3, r2
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	440b      	add	r3, r1
 800c7e4:	3324      	adds	r3, #36	; 0x24
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c7ea:	4b55      	ldr	r3, [pc, #340]	; (800c940 <USBD_CDC_Init+0x1e8>)
 800c7ec:	7819      	ldrb	r1, [r3, #0]
 800c7ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f002 fb24 	bl	800ee42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c7fa:	4b51      	ldr	r3, [pc, #324]	; (800c940 <USBD_CDC_Init+0x1e8>)
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	f003 020f 	and.w	r2, r3, #15
 800c802:	6879      	ldr	r1, [r7, #4]
 800c804:	4613      	mov	r3, r2
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	4413      	add	r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	440b      	add	r3, r1
 800c80e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c812:	2201      	movs	r2, #1
 800c814:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c816:	4b4b      	ldr	r3, [pc, #300]	; (800c944 <USBD_CDC_Init+0x1ec>)
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	f003 020f 	and.w	r2, r3, #15
 800c81e:	6879      	ldr	r1, [r7, #4]
 800c820:	4613      	mov	r3, r2
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	4413      	add	r3, r2
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	440b      	add	r3, r1
 800c82a:	3326      	adds	r3, #38	; 0x26
 800c82c:	2210      	movs	r2, #16
 800c82e:	801a      	strh	r2, [r3, #0]
 800c830:	e035      	b.n	800c89e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c832:	4b42      	ldr	r3, [pc, #264]	; (800c93c <USBD_CDC_Init+0x1e4>)
 800c834:	7819      	ldrb	r1, [r3, #0]
 800c836:	2340      	movs	r3, #64	; 0x40
 800c838:	2202      	movs	r2, #2
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f002 fb01 	bl	800ee42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c840:	4b3e      	ldr	r3, [pc, #248]	; (800c93c <USBD_CDC_Init+0x1e4>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	f003 020f 	and.w	r2, r3, #15
 800c848:	6879      	ldr	r1, [r7, #4]
 800c84a:	4613      	mov	r3, r2
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	4413      	add	r3, r2
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	440b      	add	r3, r1
 800c854:	3324      	adds	r3, #36	; 0x24
 800c856:	2201      	movs	r2, #1
 800c858:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c85a:	4b39      	ldr	r3, [pc, #228]	; (800c940 <USBD_CDC_Init+0x1e8>)
 800c85c:	7819      	ldrb	r1, [r3, #0]
 800c85e:	2340      	movs	r3, #64	; 0x40
 800c860:	2202      	movs	r2, #2
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f002 faed 	bl	800ee42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c868:	4b35      	ldr	r3, [pc, #212]	; (800c940 <USBD_CDC_Init+0x1e8>)
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	f003 020f 	and.w	r2, r3, #15
 800c870:	6879      	ldr	r1, [r7, #4]
 800c872:	4613      	mov	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	440b      	add	r3, r1
 800c87c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c880:	2201      	movs	r2, #1
 800c882:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c884:	4b2f      	ldr	r3, [pc, #188]	; (800c944 <USBD_CDC_Init+0x1ec>)
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	f003 020f 	and.w	r2, r3, #15
 800c88c:	6879      	ldr	r1, [r7, #4]
 800c88e:	4613      	mov	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4413      	add	r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	440b      	add	r3, r1
 800c898:	3326      	adds	r3, #38	; 0x26
 800c89a:	2210      	movs	r2, #16
 800c89c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c89e:	4b29      	ldr	r3, [pc, #164]	; (800c944 <USBD_CDC_Init+0x1ec>)
 800c8a0:	7819      	ldrb	r1, [r3, #0]
 800c8a2:	2308      	movs	r3, #8
 800c8a4:	2203      	movs	r2, #3
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f002 facb 	bl	800ee42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c8ac:	4b25      	ldr	r3, [pc, #148]	; (800c944 <USBD_CDC_Init+0x1ec>)
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	f003 020f 	and.w	r2, r3, #15
 800c8b4:	6879      	ldr	r1, [r7, #4]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4413      	add	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	440b      	add	r3, r1
 800c8c0:	3324      	adds	r3, #36	; 0x24
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	33b0      	adds	r3, #176	; 0xb0
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d101      	bne.n	800c900 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c8fc:	2302      	movs	r3, #2
 800c8fe:	e018      	b.n	800c932 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	7c1b      	ldrb	r3, [r3, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10a      	bne.n	800c91e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c908:	4b0d      	ldr	r3, [pc, #52]	; (800c940 <USBD_CDC_Init+0x1e8>)
 800c90a:	7819      	ldrb	r1, [r3, #0]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c912:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f002 fb82 	bl	800f020 <USBD_LL_PrepareReceive>
 800c91c:	e008      	b.n	800c930 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c91e:	4b08      	ldr	r3, [pc, #32]	; (800c940 <USBD_CDC_Init+0x1e8>)
 800c920:	7819      	ldrb	r1, [r3, #0]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c928:	2340      	movs	r3, #64	; 0x40
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f002 fb78 	bl	800f020 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	200000a7 	.word	0x200000a7
 800c940:	200000a8 	.word	0x200000a8
 800c944:	200000a9 	.word	0x200000a9

0800c948 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	460b      	mov	r3, r1
 800c952:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c954:	4b3a      	ldr	r3, [pc, #232]	; (800ca40 <USBD_CDC_DeInit+0xf8>)
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	4619      	mov	r1, r3
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f002 fa97 	bl	800ee8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c960:	4b37      	ldr	r3, [pc, #220]	; (800ca40 <USBD_CDC_DeInit+0xf8>)
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	f003 020f 	and.w	r2, r3, #15
 800c968:	6879      	ldr	r1, [r7, #4]
 800c96a:	4613      	mov	r3, r2
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	4413      	add	r3, r2
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	440b      	add	r3, r1
 800c974:	3324      	adds	r3, #36	; 0x24
 800c976:	2200      	movs	r2, #0
 800c978:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c97a:	4b32      	ldr	r3, [pc, #200]	; (800ca44 <USBD_CDC_DeInit+0xfc>)
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	4619      	mov	r1, r3
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f002 fa84 	bl	800ee8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c986:	4b2f      	ldr	r3, [pc, #188]	; (800ca44 <USBD_CDC_DeInit+0xfc>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	f003 020f 	and.w	r2, r3, #15
 800c98e:	6879      	ldr	r1, [r7, #4]
 800c990:	4613      	mov	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4413      	add	r3, r2
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	440b      	add	r3, r1
 800c99a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c99e:	2200      	movs	r2, #0
 800c9a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c9a2:	4b29      	ldr	r3, [pc, #164]	; (800ca48 <USBD_CDC_DeInit+0x100>)
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f002 fa70 	bl	800ee8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c9ae:	4b26      	ldr	r3, [pc, #152]	; (800ca48 <USBD_CDC_DeInit+0x100>)
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	f003 020f 	and.w	r2, r3, #15
 800c9b6:	6879      	ldr	r1, [r7, #4]
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4413      	add	r3, r2
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	440b      	add	r3, r1
 800c9c2:	3324      	adds	r3, #36	; 0x24
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c9c8:	4b1f      	ldr	r3, [pc, #124]	; (800ca48 <USBD_CDC_DeInit+0x100>)
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	f003 020f 	and.w	r2, r3, #15
 800c9d0:	6879      	ldr	r1, [r7, #4]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	4413      	add	r3, r2
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	440b      	add	r3, r1
 800c9dc:	3326      	adds	r3, #38	; 0x26
 800c9de:	2200      	movs	r2, #0
 800c9e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	32b0      	adds	r2, #176	; 0xb0
 800c9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d01f      	beq.n	800ca34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	33b0      	adds	r3, #176	; 0xb0
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	4413      	add	r3, r2
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	32b0      	adds	r2, #176	; 0xb0
 800ca12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f002 fb44 	bl	800f0a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	32b0      	adds	r2, #176	; 0xb0
 800ca26:	2100      	movs	r1, #0
 800ca28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	200000a7 	.word	0x200000a7
 800ca44:	200000a8 	.word	0x200000a8
 800ca48:	200000a9 	.word	0x200000a9

0800ca4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	32b0      	adds	r2, #176	; 0xb0
 800ca60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ca66:	2300      	movs	r3, #0
 800ca68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d101      	bne.n	800ca7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ca78:	2303      	movs	r3, #3
 800ca7a:	e0bf      	b.n	800cbfc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d050      	beq.n	800cb2a <USBD_CDC_Setup+0xde>
 800ca88:	2b20      	cmp	r3, #32
 800ca8a:	f040 80af 	bne.w	800cbec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	88db      	ldrh	r3, [r3, #6]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d03a      	beq.n	800cb0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	b25b      	sxtb	r3, r3
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	da1b      	bge.n	800cad8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	33b0      	adds	r3, #176	; 0xb0
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4413      	add	r3, r2
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	683a      	ldr	r2, [r7, #0]
 800cab4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cab6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cab8:	683a      	ldr	r2, [r7, #0]
 800caba:	88d2      	ldrh	r2, [r2, #6]
 800cabc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	88db      	ldrh	r3, [r3, #6]
 800cac2:	2b07      	cmp	r3, #7
 800cac4:	bf28      	it	cs
 800cac6:	2307      	movcs	r3, #7
 800cac8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	89fa      	ldrh	r2, [r7, #14]
 800cace:	4619      	mov	r1, r3
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f001 fd89 	bl	800e5e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cad6:	e090      	b.n	800cbfa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	785a      	ldrb	r2, [r3, #1]
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	88db      	ldrh	r3, [r3, #6]
 800cae6:	2b3f      	cmp	r3, #63	; 0x3f
 800cae8:	d803      	bhi.n	800caf2 <USBD_CDC_Setup+0xa6>
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	88db      	ldrh	r3, [r3, #6]
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	e000      	b.n	800caf4 <USBD_CDC_Setup+0xa8>
 800caf2:	2240      	movs	r2, #64	; 0x40
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cafa:	6939      	ldr	r1, [r7, #16]
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cb02:	461a      	mov	r2, r3
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f001 fd9b 	bl	800e640 <USBD_CtlPrepareRx>
      break;
 800cb0a:	e076      	b.n	800cbfa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	33b0      	adds	r3, #176	; 0xb0
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	7850      	ldrb	r0, [r2, #1]
 800cb22:	2200      	movs	r2, #0
 800cb24:	6839      	ldr	r1, [r7, #0]
 800cb26:	4798      	blx	r3
      break;
 800cb28:	e067      	b.n	800cbfa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	785b      	ldrb	r3, [r3, #1]
 800cb2e:	2b0b      	cmp	r3, #11
 800cb30:	d851      	bhi.n	800cbd6 <USBD_CDC_Setup+0x18a>
 800cb32:	a201      	add	r2, pc, #4	; (adr r2, 800cb38 <USBD_CDC_Setup+0xec>)
 800cb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb38:	0800cb69 	.word	0x0800cb69
 800cb3c:	0800cbe5 	.word	0x0800cbe5
 800cb40:	0800cbd7 	.word	0x0800cbd7
 800cb44:	0800cbd7 	.word	0x0800cbd7
 800cb48:	0800cbd7 	.word	0x0800cbd7
 800cb4c:	0800cbd7 	.word	0x0800cbd7
 800cb50:	0800cbd7 	.word	0x0800cbd7
 800cb54:	0800cbd7 	.word	0x0800cbd7
 800cb58:	0800cbd7 	.word	0x0800cbd7
 800cb5c:	0800cbd7 	.word	0x0800cbd7
 800cb60:	0800cb93 	.word	0x0800cb93
 800cb64:	0800cbbd 	.word	0x0800cbbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	2b03      	cmp	r3, #3
 800cb72:	d107      	bne.n	800cb84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cb74:	f107 030a 	add.w	r3, r7, #10
 800cb78:	2202      	movs	r2, #2
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f001 fd33 	bl	800e5e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cb82:	e032      	b.n	800cbea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cb84:	6839      	ldr	r1, [r7, #0]
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f001 fcbd 	bl	800e506 <USBD_CtlError>
            ret = USBD_FAIL;
 800cb8c:	2303      	movs	r3, #3
 800cb8e:	75fb      	strb	r3, [r7, #23]
          break;
 800cb90:	e02b      	b.n	800cbea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d107      	bne.n	800cbae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cb9e:	f107 030d 	add.w	r3, r7, #13
 800cba2:	2201      	movs	r2, #1
 800cba4:	4619      	mov	r1, r3
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f001 fd1e 	bl	800e5e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cbac:	e01d      	b.n	800cbea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cbae:	6839      	ldr	r1, [r7, #0]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f001 fca8 	bl	800e506 <USBD_CtlError>
            ret = USBD_FAIL;
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	75fb      	strb	r3, [r7, #23]
          break;
 800cbba:	e016      	b.n	800cbea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	2b03      	cmp	r3, #3
 800cbc6:	d00f      	beq.n	800cbe8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cbc8:	6839      	ldr	r1, [r7, #0]
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f001 fc9b 	bl	800e506 <USBD_CtlError>
            ret = USBD_FAIL;
 800cbd0:	2303      	movs	r3, #3
 800cbd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cbd4:	e008      	b.n	800cbe8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cbd6:	6839      	ldr	r1, [r7, #0]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f001 fc94 	bl	800e506 <USBD_CtlError>
          ret = USBD_FAIL;
 800cbde:	2303      	movs	r3, #3
 800cbe0:	75fb      	strb	r3, [r7, #23]
          break;
 800cbe2:	e002      	b.n	800cbea <USBD_CDC_Setup+0x19e>
          break;
 800cbe4:	bf00      	nop
 800cbe6:	e008      	b.n	800cbfa <USBD_CDC_Setup+0x1ae>
          break;
 800cbe8:	bf00      	nop
      }
      break;
 800cbea:	e006      	b.n	800cbfa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f001 fc89 	bl	800e506 <USBD_CtlError>
      ret = USBD_FAIL;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	75fb      	strb	r3, [r7, #23]
      break;
 800cbf8:	bf00      	nop
  }

  return (uint8_t)ret;
 800cbfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3718      	adds	r7, #24
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	32b0      	adds	r2, #176	; 0xb0
 800cc22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d101      	bne.n	800cc2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cc2a:	2303      	movs	r3, #3
 800cc2c:	e065      	b.n	800ccfa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	32b0      	adds	r2, #176	; 0xb0
 800cc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cc3e:	78fb      	ldrb	r3, [r7, #3]
 800cc40:	f003 020f 	and.w	r2, r3, #15
 800cc44:	6879      	ldr	r1, [r7, #4]
 800cc46:	4613      	mov	r3, r2
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	440b      	add	r3, r1
 800cc50:	3318      	adds	r3, #24
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d02f      	beq.n	800ccb8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cc58:	78fb      	ldrb	r3, [r7, #3]
 800cc5a:	f003 020f 	and.w	r2, r3, #15
 800cc5e:	6879      	ldr	r1, [r7, #4]
 800cc60:	4613      	mov	r3, r2
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4413      	add	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	440b      	add	r3, r1
 800cc6a:	3318      	adds	r3, #24
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	78fb      	ldrb	r3, [r7, #3]
 800cc70:	f003 010f 	and.w	r1, r3, #15
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	460b      	mov	r3, r1
 800cc78:	00db      	lsls	r3, r3, #3
 800cc7a:	440b      	add	r3, r1
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	4403      	add	r3, r0
 800cc80:	3348      	adds	r3, #72	; 0x48
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	fbb2 f1f3 	udiv	r1, r2, r3
 800cc88:	fb01 f303 	mul.w	r3, r1, r3
 800cc8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d112      	bne.n	800ccb8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cc92:	78fb      	ldrb	r3, [r7, #3]
 800cc94:	f003 020f 	and.w	r2, r3, #15
 800cc98:	6879      	ldr	r1, [r7, #4]
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	4413      	add	r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	440b      	add	r3, r1
 800cca4:	3318      	adds	r3, #24
 800cca6:	2200      	movs	r2, #0
 800cca8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ccaa:	78f9      	ldrb	r1, [r7, #3]
 800ccac:	2300      	movs	r3, #0
 800ccae:	2200      	movs	r2, #0
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f002 f994 	bl	800efde <USBD_LL_Transmit>
 800ccb6:	e01f      	b.n	800ccf8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	33b0      	adds	r3, #176	; 0xb0
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	4413      	add	r3, r2
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d010      	beq.n	800ccf8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	33b0      	adds	r3, #176	; 0xb0
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	68ba      	ldr	r2, [r7, #8]
 800ccea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ccee:	68ba      	ldr	r2, [r7, #8]
 800ccf0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ccf4:	78fa      	ldrb	r2, [r7, #3]
 800ccf6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	32b0      	adds	r2, #176	; 0xb0
 800cd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	32b0      	adds	r2, #176	; 0xb0
 800cd28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d101      	bne.n	800cd34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cd30:	2303      	movs	r3, #3
 800cd32:	e01a      	b.n	800cd6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cd34:	78fb      	ldrb	r3, [r7, #3]
 800cd36:	4619      	mov	r1, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f002 f992 	bl	800f062 <USBD_LL_GetRxDataSize>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	33b0      	adds	r3, #176	; 0xb0
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	4413      	add	r3, r2
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cd64:	4611      	mov	r1, r2
 800cd66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b084      	sub	sp, #16
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	32b0      	adds	r2, #176	; 0xb0
 800cd84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d101      	bne.n	800cd94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cd90:	2303      	movs	r3, #3
 800cd92:	e025      	b.n	800cde0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	33b0      	adds	r3, #176	; 0xb0
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	4413      	add	r3, r2
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d01a      	beq.n	800cdde <USBD_CDC_EP0_RxReady+0x6c>
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cdae:	2bff      	cmp	r3, #255	; 0xff
 800cdb0:	d015      	beq.n	800cdde <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	33b0      	adds	r3, #176	; 0xb0
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	4413      	add	r3, r2
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cdca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cdd2:	b292      	uxth	r2, r2
 800cdd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	22ff      	movs	r2, #255	; 0xff
 800cdda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3710      	adds	r7, #16
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cdf0:	2182      	movs	r1, #130	; 0x82
 800cdf2:	4818      	ldr	r0, [pc, #96]	; (800ce54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cdf4:	f000 fd4f 	bl	800d896 <USBD_GetEpDesc>
 800cdf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cdfa:	2101      	movs	r1, #1
 800cdfc:	4815      	ldr	r0, [pc, #84]	; (800ce54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cdfe:	f000 fd4a 	bl	800d896 <USBD_GetEpDesc>
 800ce02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ce04:	2181      	movs	r1, #129	; 0x81
 800ce06:	4813      	ldr	r0, [pc, #76]	; (800ce54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ce08:	f000 fd45 	bl	800d896 <USBD_GetEpDesc>
 800ce0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d002      	beq.n	800ce1a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	2210      	movs	r2, #16
 800ce18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d006      	beq.n	800ce2e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce28:	711a      	strb	r2, [r3, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d006      	beq.n	800ce42 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce3c:	711a      	strb	r2, [r3, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2243      	movs	r2, #67	; 0x43
 800ce46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ce48:	4b02      	ldr	r3, [pc, #8]	; (800ce54 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3718      	adds	r7, #24
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	20000064 	.word	0x20000064

0800ce58 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b086      	sub	sp, #24
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ce60:	2182      	movs	r1, #130	; 0x82
 800ce62:	4818      	ldr	r0, [pc, #96]	; (800cec4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ce64:	f000 fd17 	bl	800d896 <USBD_GetEpDesc>
 800ce68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ce6a:	2101      	movs	r1, #1
 800ce6c:	4815      	ldr	r0, [pc, #84]	; (800cec4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ce6e:	f000 fd12 	bl	800d896 <USBD_GetEpDesc>
 800ce72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ce74:	2181      	movs	r1, #129	; 0x81
 800ce76:	4813      	ldr	r0, [pc, #76]	; (800cec4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ce78:	f000 fd0d 	bl	800d896 <USBD_GetEpDesc>
 800ce7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d002      	beq.n	800ce8a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	2210      	movs	r2, #16
 800ce88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d006      	beq.n	800ce9e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	2200      	movs	r2, #0
 800ce94:	711a      	strb	r2, [r3, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f042 0202 	orr.w	r2, r2, #2
 800ce9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d006      	beq.n	800ceb2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	711a      	strb	r2, [r3, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f042 0202 	orr.w	r2, r2, #2
 800ceb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2243      	movs	r2, #67	; 0x43
 800ceb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ceb8:	4b02      	ldr	r3, [pc, #8]	; (800cec4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	20000064 	.word	0x20000064

0800cec8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b086      	sub	sp, #24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ced0:	2182      	movs	r1, #130	; 0x82
 800ced2:	4818      	ldr	r0, [pc, #96]	; (800cf34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ced4:	f000 fcdf 	bl	800d896 <USBD_GetEpDesc>
 800ced8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ceda:	2101      	movs	r1, #1
 800cedc:	4815      	ldr	r0, [pc, #84]	; (800cf34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cede:	f000 fcda 	bl	800d896 <USBD_GetEpDesc>
 800cee2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cee4:	2181      	movs	r1, #129	; 0x81
 800cee6:	4813      	ldr	r0, [pc, #76]	; (800cf34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cee8:	f000 fcd5 	bl	800d896 <USBD_GetEpDesc>
 800ceec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2210      	movs	r2, #16
 800cef8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d006      	beq.n	800cf0e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf08:	711a      	strb	r2, [r3, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d006      	beq.n	800cf22 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf1c:	711a      	strb	r2, [r3, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2243      	movs	r2, #67	; 0x43
 800cf26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cf28:	4b02      	ldr	r3, [pc, #8]	; (800cf34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3718      	adds	r7, #24
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	20000064 	.word	0x20000064

0800cf38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	220a      	movs	r2, #10
 800cf44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cf46:	4b03      	ldr	r3, [pc, #12]	; (800cf54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr
 800cf54:	20000020 	.word	0x20000020

0800cf58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	e009      	b.n	800cf80 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	33b0      	adds	r3, #176	; 0xb0
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	4413      	add	r3, r2
 800cf7a:	683a      	ldr	r2, [r7, #0]
 800cf7c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b087      	sub	sp, #28
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	32b0      	adds	r2, #176	; 0xb0
 800cfa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d101      	bne.n	800cfb2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cfae:	2303      	movs	r3, #3
 800cfb0:	e008      	b.n	800cfc4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	68ba      	ldr	r2, [r7, #8]
 800cfb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	371c      	adds	r7, #28
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	32b0      	adds	r2, #176	; 0xb0
 800cfe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cff0:	2303      	movs	r3, #3
 800cff2:	e004      	b.n	800cffe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
	...

0800d00c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	32b0      	adds	r2, #176	; 0xb0
 800d01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d022:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d024:	2301      	movs	r3, #1
 800d026:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	32b0      	adds	r2, #176	; 0xb0
 800d032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d101      	bne.n	800d03e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d03a:	2303      	movs	r3, #3
 800d03c:	e025      	b.n	800d08a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d044:	2b00      	cmp	r3, #0
 800d046:	d11f      	bne.n	800d088 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	2201      	movs	r2, #1
 800d04c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d050:	4b10      	ldr	r3, [pc, #64]	; (800d094 <USBD_CDC_TransmitPacket+0x88>)
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	f003 020f 	and.w	r2, r3, #15
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	4613      	mov	r3, r2
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	4413      	add	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4403      	add	r3, r0
 800d06a:	3318      	adds	r3, #24
 800d06c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d06e:	4b09      	ldr	r3, [pc, #36]	; (800d094 <USBD_CDC_TransmitPacket+0x88>)
 800d070:	7819      	ldrb	r1, [r3, #0]
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f001 ffad 	bl	800efde <USBD_LL_Transmit>

    ret = USBD_OK;
 800d084:	2300      	movs	r3, #0
 800d086:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d088:	7bfb      	ldrb	r3, [r7, #15]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	200000a7 	.word	0x200000a7

0800d098 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	32b0      	adds	r2, #176	; 0xb0
 800d0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	32b0      	adds	r2, #176	; 0xb0
 800d0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d101      	bne.n	800d0c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d0c2:	2303      	movs	r3, #3
 800d0c4:	e018      	b.n	800d0f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	7c1b      	ldrb	r3, [r3, #16]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10a      	bne.n	800d0e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d0ce:	4b0c      	ldr	r3, [pc, #48]	; (800d100 <USBD_CDC_ReceivePacket+0x68>)
 800d0d0:	7819      	ldrb	r1, [r3, #0]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f001 ff9f 	bl	800f020 <USBD_LL_PrepareReceive>
 800d0e2:	e008      	b.n	800d0f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d0e4:	4b06      	ldr	r3, [pc, #24]	; (800d100 <USBD_CDC_ReceivePacket+0x68>)
 800d0e6:	7819      	ldrb	r1, [r3, #0]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0ee:	2340      	movs	r3, #64	; 0x40
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f001 ff95 	bl	800f020 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d0f6:	2300      	movs	r3, #0
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}
 800d100:	200000a8 	.word	0x200000a8

0800d104 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b086      	sub	sp, #24
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	4613      	mov	r3, r2
 800d110:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d101      	bne.n	800d11c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d118:	2303      	movs	r3, #3
 800d11a:	e01f      	b.n	800d15c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2200      	movs	r2, #0
 800d120:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d003      	beq.n	800d142 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2201      	movs	r2, #1
 800d146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	79fa      	ldrb	r2, [r7, #7]
 800d14e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f001 fe0f 	bl	800ed74 <USBD_LL_Init>
 800d156:	4603      	mov	r3, r0
 800d158:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3718      	adds	r7, #24
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d16e:	2300      	movs	r3, #0
 800d170:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d101      	bne.n	800d17c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d178:	2303      	movs	r3, #3
 800d17a:	e025      	b.n	800d1c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	32ae      	adds	r2, #174	; 0xae
 800d18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d194:	2b00      	cmp	r3, #0
 800d196:	d00f      	beq.n	800d1b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	32ae      	adds	r2, #174	; 0xae
 800d1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a8:	f107 020e 	add.w	r2, r7, #14
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	4798      	blx	r3
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d1be:	1c5a      	adds	r2, r3, #1
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d1c6:	2300      	movs	r3, #0
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f001 fe17 	bl	800ee0c <USBD_LL_Start>
 800d1de:	4603      	mov	r3, r0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d1f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	370c      	adds	r7, #12
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b084      	sub	sp, #16
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
 800d206:	460b      	mov	r3, r1
 800d208:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d20a:	2300      	movs	r3, #0
 800d20c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d214:	2b00      	cmp	r3, #0
 800d216:	d009      	beq.n	800d22c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	78fa      	ldrb	r2, [r7, #3]
 800d222:	4611      	mov	r1, r2
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	4798      	blx	r3
 800d228:	4603      	mov	r3, r0
 800d22a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b084      	sub	sp, #16
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
 800d23e:	460b      	mov	r3, r1
 800d240:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d242:	2300      	movs	r3, #0
 800d244:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	78fa      	ldrb	r2, [r7, #3]
 800d250:	4611      	mov	r1, r2
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	4798      	blx	r3
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d001      	beq.n	800d260 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d25c:	2303      	movs	r3, #3
 800d25e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d260:	7bfb      	ldrb	r3, [r7, #15]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b084      	sub	sp, #16
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
 800d272:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f001 f908 	bl	800e492 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2201      	movs	r2, #1
 800d286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d290:	461a      	mov	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d29e:	f003 031f 	and.w	r3, r3, #31
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	d01a      	beq.n	800d2dc <USBD_LL_SetupStage+0x72>
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d822      	bhi.n	800d2f0 <USBD_LL_SetupStage+0x86>
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d002      	beq.n	800d2b4 <USBD_LL_SetupStage+0x4a>
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d00a      	beq.n	800d2c8 <USBD_LL_SetupStage+0x5e>
 800d2b2:	e01d      	b.n	800d2f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 fb5f 	bl	800d980 <USBD_StdDevReq>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	73fb      	strb	r3, [r7, #15]
      break;
 800d2c6:	e020      	b.n	800d30a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 fbc7 	bl	800da64 <USBD_StdItfReq>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	73fb      	strb	r3, [r7, #15]
      break;
 800d2da:	e016      	b.n	800d30a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 fc29 	bl	800db3c <USBD_StdEPReq>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d2ee:	e00c      	b.n	800d30a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d2f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f001 fde4 	bl	800eecc <USBD_LL_StallEP>
 800d304:	4603      	mov	r3, r0
 800d306:	73fb      	strb	r3, [r7, #15]
      break;
 800d308:	bf00      	nop
  }

  return ret;
 800d30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b086      	sub	sp, #24
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	460b      	mov	r3, r1
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d322:	2300      	movs	r3, #0
 800d324:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d326:	7afb      	ldrb	r3, [r7, #11]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d16e      	bne.n	800d40a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d332:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	f040 8098 	bne.w	800d470 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	689a      	ldr	r2, [r3, #8]
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d913      	bls.n	800d374 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	689a      	ldr	r2, [r3, #8]
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	1ad2      	subs	r2, r2, r3
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	68da      	ldr	r2, [r3, #12]
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	4293      	cmp	r3, r2
 800d364:	bf28      	it	cs
 800d366:	4613      	movcs	r3, r2
 800d368:	461a      	mov	r2, r3
 800d36a:	6879      	ldr	r1, [r7, #4]
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f001 f984 	bl	800e67a <USBD_CtlContinueRx>
 800d372:	e07d      	b.n	800d470 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d37a:	f003 031f 	and.w	r3, r3, #31
 800d37e:	2b02      	cmp	r3, #2
 800d380:	d014      	beq.n	800d3ac <USBD_LL_DataOutStage+0x98>
 800d382:	2b02      	cmp	r3, #2
 800d384:	d81d      	bhi.n	800d3c2 <USBD_LL_DataOutStage+0xae>
 800d386:	2b00      	cmp	r3, #0
 800d388:	d002      	beq.n	800d390 <USBD_LL_DataOutStage+0x7c>
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d003      	beq.n	800d396 <USBD_LL_DataOutStage+0x82>
 800d38e:	e018      	b.n	800d3c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d390:	2300      	movs	r3, #0
 800d392:	75bb      	strb	r3, [r7, #22]
            break;
 800d394:	e018      	b.n	800d3c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	4619      	mov	r1, r3
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f000 fa5e 	bl	800d862 <USBD_CoreFindIF>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	75bb      	strb	r3, [r7, #22]
            break;
 800d3aa:	e00d      	b.n	800d3c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	f000 fa60 	bl	800d87c <USBD_CoreFindEP>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	75bb      	strb	r3, [r7, #22]
            break;
 800d3c0:	e002      	b.n	800d3c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	75bb      	strb	r3, [r7, #22]
            break;
 800d3c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d3c8:	7dbb      	ldrb	r3, [r7, #22]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d119      	bne.n	800d402 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	d113      	bne.n	800d402 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d3da:	7dba      	ldrb	r2, [r7, #22]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	32ae      	adds	r2, #174	; 0xae
 800d3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3e4:	691b      	ldr	r3, [r3, #16]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00b      	beq.n	800d402 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d3ea:	7dba      	ldrb	r2, [r7, #22]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d3f2:	7dba      	ldrb	r2, [r7, #22]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	32ae      	adds	r2, #174	; 0xae
 800d3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3fc:	691b      	ldr	r3, [r3, #16]
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f001 f94a 	bl	800e69c <USBD_CtlSendStatus>
 800d408:	e032      	b.n	800d470 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d40a:	7afb      	ldrb	r3, [r7, #11]
 800d40c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d410:	b2db      	uxtb	r3, r3
 800d412:	4619      	mov	r1, r3
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f000 fa31 	bl	800d87c <USBD_CoreFindEP>
 800d41a:	4603      	mov	r3, r0
 800d41c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d41e:	7dbb      	ldrb	r3, [r7, #22]
 800d420:	2bff      	cmp	r3, #255	; 0xff
 800d422:	d025      	beq.n	800d470 <USBD_LL_DataOutStage+0x15c>
 800d424:	7dbb      	ldrb	r3, [r7, #22]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d122      	bne.n	800d470 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b03      	cmp	r3, #3
 800d434:	d117      	bne.n	800d466 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d436:	7dba      	ldrb	r2, [r7, #22]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	32ae      	adds	r2, #174	; 0xae
 800d43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d440:	699b      	ldr	r3, [r3, #24]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00f      	beq.n	800d466 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d446:	7dba      	ldrb	r2, [r7, #22]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d44e:	7dba      	ldrb	r2, [r7, #22]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	32ae      	adds	r2, #174	; 0xae
 800d454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	7afa      	ldrb	r2, [r7, #11]
 800d45c:	4611      	mov	r1, r2
 800d45e:	68f8      	ldr	r0, [r7, #12]
 800d460:	4798      	blx	r3
 800d462:	4603      	mov	r3, r0
 800d464:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d466:	7dfb      	ldrb	r3, [r7, #23]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d001      	beq.n	800d470 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d46c:	7dfb      	ldrb	r3, [r7, #23]
 800d46e:	e000      	b.n	800d472 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d470:	2300      	movs	r3, #0
}
 800d472:	4618      	mov	r0, r3
 800d474:	3718      	adds	r7, #24
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}

0800d47a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d47a:	b580      	push	{r7, lr}
 800d47c:	b086      	sub	sp, #24
 800d47e:	af00      	add	r7, sp, #0
 800d480:	60f8      	str	r0, [r7, #12]
 800d482:	460b      	mov	r3, r1
 800d484:	607a      	str	r2, [r7, #4]
 800d486:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d488:	7afb      	ldrb	r3, [r7, #11]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d16f      	bne.n	800d56e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	3314      	adds	r3, #20
 800d492:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	d15a      	bne.n	800d554 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	689a      	ldr	r2, [r3, #8]
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	68db      	ldr	r3, [r3, #12]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d914      	bls.n	800d4d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	689a      	ldr	r2, [r3, #8]
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	1ad2      	subs	r2, r2, r3
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	6879      	ldr	r1, [r7, #4]
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f001 f8ac 	bl	800e61e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f001 fda7 	bl	800f020 <USBD_LL_PrepareReceive>
 800d4d2:	e03f      	b.n	800d554 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	68da      	ldr	r2, [r3, #12]
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	689b      	ldr	r3, [r3, #8]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d11c      	bne.n	800d51a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	685a      	ldr	r2, [r3, #4]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d316      	bcc.n	800d51a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	685a      	ldr	r2, [r3, #4]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d20f      	bcs.n	800d51a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f001 f88d 	bl	800e61e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2200      	movs	r2, #0
 800d508:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d50c:	2300      	movs	r3, #0
 800d50e:	2200      	movs	r2, #0
 800d510:	2100      	movs	r1, #0
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f001 fd84 	bl	800f020 <USBD_LL_PrepareReceive>
 800d518:	e01c      	b.n	800d554 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d520:	b2db      	uxtb	r3, r3
 800d522:	2b03      	cmp	r3, #3
 800d524:	d10f      	bne.n	800d546 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d52c:	68db      	ldr	r3, [r3, #12]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d009      	beq.n	800d546 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2200      	movs	r2, #0
 800d536:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	68f8      	ldr	r0, [r7, #12]
 800d544:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d546:	2180      	movs	r1, #128	; 0x80
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f001 fcbf 	bl	800eecc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f001 f8b7 	bl	800e6c2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d03a      	beq.n	800d5d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f7ff fe42 	bl	800d1e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2200      	movs	r2, #0
 800d568:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d56c:	e032      	b.n	800d5d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d56e:	7afb      	ldrb	r3, [r7, #11]
 800d570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d574:	b2db      	uxtb	r3, r3
 800d576:	4619      	mov	r1, r3
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f000 f97f 	bl	800d87c <USBD_CoreFindEP>
 800d57e:	4603      	mov	r3, r0
 800d580:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d582:	7dfb      	ldrb	r3, [r7, #23]
 800d584:	2bff      	cmp	r3, #255	; 0xff
 800d586:	d025      	beq.n	800d5d4 <USBD_LL_DataInStage+0x15a>
 800d588:	7dfb      	ldrb	r3, [r7, #23]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d122      	bne.n	800d5d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d594:	b2db      	uxtb	r3, r3
 800d596:	2b03      	cmp	r3, #3
 800d598:	d11c      	bne.n	800d5d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d59a:	7dfa      	ldrb	r2, [r7, #23]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	32ae      	adds	r2, #174	; 0xae
 800d5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d014      	beq.n	800d5d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d5aa:	7dfa      	ldrb	r2, [r7, #23]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d5b2:	7dfa      	ldrb	r2, [r7, #23]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	32ae      	adds	r2, #174	; 0xae
 800d5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5bc:	695b      	ldr	r3, [r3, #20]
 800d5be:	7afa      	ldrb	r2, [r7, #11]
 800d5c0:	4611      	mov	r1, r2
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	4798      	blx	r3
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d5ca:	7dbb      	ldrb	r3, [r7, #22]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d001      	beq.n	800d5d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d5d0:	7dbb      	ldrb	r3, [r7, #22]
 800d5d2:	e000      	b.n	800d5d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3718      	adds	r7, #24
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b084      	sub	sp, #16
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d616:	2b00      	cmp	r3, #0
 800d618:	d014      	beq.n	800d644 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00e      	beq.n	800d644 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	6852      	ldr	r2, [r2, #4]
 800d632:	b2d2      	uxtb	r2, r2
 800d634:	4611      	mov	r1, r2
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	4798      	blx	r3
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d001      	beq.n	800d644 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d640:	2303      	movs	r3, #3
 800d642:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d644:	2340      	movs	r3, #64	; 0x40
 800d646:	2200      	movs	r2, #0
 800d648:	2100      	movs	r1, #0
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f001 fbf9 	bl	800ee42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2201      	movs	r2, #1
 800d654:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2240      	movs	r2, #64	; 0x40
 800d65c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d660:	2340      	movs	r3, #64	; 0x40
 800d662:	2200      	movs	r2, #0
 800d664:	2180      	movs	r1, #128	; 0x80
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f001 fbeb 	bl	800ee42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2201      	movs	r2, #1
 800d670:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2240      	movs	r2, #64	; 0x40
 800d676:	621a      	str	r2, [r3, #32]

  return ret;
 800d678:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d682:	b480      	push	{r7}
 800d684:	b083      	sub	sp, #12
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
 800d68a:	460b      	mov	r3, r1
 800d68c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	78fa      	ldrb	r2, [r7, #3]
 800d692:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d694:	2300      	movs	r3, #0
}
 800d696:	4618      	mov	r0, r3
 800d698:	370c      	adds	r7, #12
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr

0800d6a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d6a2:	b480      	push	{r7}
 800d6a4:	b083      	sub	sp, #12
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2204      	movs	r2, #4
 800d6bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	370c      	adds	r7, #12
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr

0800d6ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d6ce:	b480      	push	{r7}
 800d6d0:	b083      	sub	sp, #12
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	2b04      	cmp	r3, #4
 800d6e0:	d106      	bne.n	800d6f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d6e8:	b2da      	uxtb	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d6f0:	2300      	movs	r3, #0
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	370c      	adds	r7, #12
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr

0800d6fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b082      	sub	sp, #8
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	2b03      	cmp	r3, #3
 800d710:	d110      	bne.n	800d734 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00b      	beq.n	800d734 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d722:	69db      	ldr	r3, [r3, #28]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d005      	beq.n	800d734 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d72e:	69db      	ldr	r3, [r3, #28]
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3708      	adds	r7, #8
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b082      	sub	sp, #8
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
 800d746:	460b      	mov	r3, r1
 800d748:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	32ae      	adds	r2, #174	; 0xae
 800d754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d101      	bne.n	800d760 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d75c:	2303      	movs	r3, #3
 800d75e:	e01c      	b.n	800d79a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d766:	b2db      	uxtb	r3, r3
 800d768:	2b03      	cmp	r3, #3
 800d76a:	d115      	bne.n	800d798 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	32ae      	adds	r2, #174	; 0xae
 800d776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d77a:	6a1b      	ldr	r3, [r3, #32]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00b      	beq.n	800d798 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	32ae      	adds	r2, #174	; 0xae
 800d78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d78e:	6a1b      	ldr	r3, [r3, #32]
 800d790:	78fa      	ldrb	r2, [r7, #3]
 800d792:	4611      	mov	r1, r2
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3708      	adds	r7, #8
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b082      	sub	sp, #8
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	32ae      	adds	r2, #174	; 0xae
 800d7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d101      	bne.n	800d7c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d7c0:	2303      	movs	r3, #3
 800d7c2:	e01c      	b.n	800d7fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	2b03      	cmp	r3, #3
 800d7ce:	d115      	bne.n	800d7fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	32ae      	adds	r2, #174	; 0xae
 800d7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00b      	beq.n	800d7fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	32ae      	adds	r2, #174	; 0xae
 800d7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f4:	78fa      	ldrb	r2, [r7, #3]
 800d7f6:	4611      	mov	r1, r2
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d7fc:	2300      	movs	r3, #0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d806:	b480      	push	{r7}
 800d808:	b083      	sub	sp, #12
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d824:	2300      	movs	r3, #0
 800d826:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d836:	2b00      	cmp	r3, #0
 800d838:	d00e      	beq.n	800d858 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	6852      	ldr	r2, [r2, #4]
 800d846:	b2d2      	uxtb	r2, r2
 800d848:	4611      	mov	r1, r2
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	4798      	blx	r3
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d001      	beq.n	800d858 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d854:	2303      	movs	r3, #3
 800d856:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d858:	7bfb      	ldrb	r3, [r7, #15]
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}

0800d862 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d862:	b480      	push	{r7}
 800d864:	b083      	sub	sp, #12
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
 800d86a:	460b      	mov	r3, r1
 800d86c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d86e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d870:	4618      	mov	r0, r3
 800d872:	370c      	adds	r7, #12
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	460b      	mov	r3, r1
 800d886:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d888:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	370c      	adds	r7, #12
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr

0800d896 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b086      	sub	sp, #24
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
 800d89e:	460b      	mov	r3, r1
 800d8a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	885b      	ldrh	r3, [r3, #2]
 800d8b2:	b29a      	uxth	r2, r3
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d920      	bls.n	800d900 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d8c6:	e013      	b.n	800d8f0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d8c8:	f107 030a 	add.w	r3, r7, #10
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	6978      	ldr	r0, [r7, #20]
 800d8d0:	f000 f81b 	bl	800d90a <USBD_GetNextDesc>
 800d8d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	785b      	ldrb	r3, [r3, #1]
 800d8da:	2b05      	cmp	r3, #5
 800d8dc:	d108      	bne.n	800d8f0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	789b      	ldrb	r3, [r3, #2]
 800d8e6:	78fa      	ldrb	r2, [r7, #3]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d008      	beq.n	800d8fe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	885b      	ldrh	r3, [r3, #2]
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	897b      	ldrh	r3, [r7, #10]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d8e5      	bhi.n	800d8c8 <USBD_GetEpDesc+0x32>
 800d8fc:	e000      	b.n	800d900 <USBD_GetEpDesc+0x6a>
          break;
 800d8fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d900:	693b      	ldr	r3, [r7, #16]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3718      	adds	r7, #24
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d90a:	b480      	push	{r7}
 800d90c:	b085      	sub	sp, #20
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	881a      	ldrh	r2, [r3, #0]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	b29b      	uxth	r3, r3
 800d922:	4413      	add	r3, r2
 800d924:	b29a      	uxth	r2, r3
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	461a      	mov	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4413      	add	r3, r2
 800d934:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d936:	68fb      	ldr	r3, [r7, #12]
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3714      	adds	r7, #20
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d944:	b480      	push	{r7}
 800d946:	b087      	sub	sp, #28
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	3301      	adds	r3, #1
 800d95a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d962:	8a3b      	ldrh	r3, [r7, #16]
 800d964:	021b      	lsls	r3, r3, #8
 800d966:	b21a      	sxth	r2, r3
 800d968:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d96c:	4313      	orrs	r3, r2
 800d96e:	b21b      	sxth	r3, r3
 800d970:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d972:	89fb      	ldrh	r3, [r7, #14]
}
 800d974:	4618      	mov	r0, r3
 800d976:	371c      	adds	r7, #28
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d98a:	2300      	movs	r3, #0
 800d98c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d996:	2b40      	cmp	r3, #64	; 0x40
 800d998:	d005      	beq.n	800d9a6 <USBD_StdDevReq+0x26>
 800d99a:	2b40      	cmp	r3, #64	; 0x40
 800d99c:	d857      	bhi.n	800da4e <USBD_StdDevReq+0xce>
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00f      	beq.n	800d9c2 <USBD_StdDevReq+0x42>
 800d9a2:	2b20      	cmp	r3, #32
 800d9a4:	d153      	bne.n	800da4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	32ae      	adds	r2, #174	; 0xae
 800d9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b4:	689b      	ldr	r3, [r3, #8]
 800d9b6:	6839      	ldr	r1, [r7, #0]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	4798      	blx	r3
 800d9bc:	4603      	mov	r3, r0
 800d9be:	73fb      	strb	r3, [r7, #15]
      break;
 800d9c0:	e04a      	b.n	800da58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	785b      	ldrb	r3, [r3, #1]
 800d9c6:	2b09      	cmp	r3, #9
 800d9c8:	d83b      	bhi.n	800da42 <USBD_StdDevReq+0xc2>
 800d9ca:	a201      	add	r2, pc, #4	; (adr r2, 800d9d0 <USBD_StdDevReq+0x50>)
 800d9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d0:	0800da25 	.word	0x0800da25
 800d9d4:	0800da39 	.word	0x0800da39
 800d9d8:	0800da43 	.word	0x0800da43
 800d9dc:	0800da2f 	.word	0x0800da2f
 800d9e0:	0800da43 	.word	0x0800da43
 800d9e4:	0800da03 	.word	0x0800da03
 800d9e8:	0800d9f9 	.word	0x0800d9f9
 800d9ec:	0800da43 	.word	0x0800da43
 800d9f0:	0800da1b 	.word	0x0800da1b
 800d9f4:	0800da0d 	.word	0x0800da0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d9f8:	6839      	ldr	r1, [r7, #0]
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 fa3c 	bl	800de78 <USBD_GetDescriptor>
          break;
 800da00:	e024      	b.n	800da4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800da02:	6839      	ldr	r1, [r7, #0]
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 fba1 	bl	800e14c <USBD_SetAddress>
          break;
 800da0a:	e01f      	b.n	800da4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800da0c:	6839      	ldr	r1, [r7, #0]
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 fbe0 	bl	800e1d4 <USBD_SetConfig>
 800da14:	4603      	mov	r3, r0
 800da16:	73fb      	strb	r3, [r7, #15]
          break;
 800da18:	e018      	b.n	800da4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800da1a:	6839      	ldr	r1, [r7, #0]
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 fc83 	bl	800e328 <USBD_GetConfig>
          break;
 800da22:	e013      	b.n	800da4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800da24:	6839      	ldr	r1, [r7, #0]
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f000 fcb4 	bl	800e394 <USBD_GetStatus>
          break;
 800da2c:	e00e      	b.n	800da4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800da2e:	6839      	ldr	r1, [r7, #0]
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 fce3 	bl	800e3fc <USBD_SetFeature>
          break;
 800da36:	e009      	b.n	800da4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800da38:	6839      	ldr	r1, [r7, #0]
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 fd07 	bl	800e44e <USBD_ClrFeature>
          break;
 800da40:	e004      	b.n	800da4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800da42:	6839      	ldr	r1, [r7, #0]
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 fd5e 	bl	800e506 <USBD_CtlError>
          break;
 800da4a:	bf00      	nop
      }
      break;
 800da4c:	e004      	b.n	800da58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800da4e:	6839      	ldr	r1, [r7, #0]
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f000 fd58 	bl	800e506 <USBD_CtlError>
      break;
 800da56:	bf00      	nop
  }

  return ret;
 800da58:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop

0800da64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da6e:	2300      	movs	r3, #0
 800da70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da7a:	2b40      	cmp	r3, #64	; 0x40
 800da7c:	d005      	beq.n	800da8a <USBD_StdItfReq+0x26>
 800da7e:	2b40      	cmp	r3, #64	; 0x40
 800da80:	d852      	bhi.n	800db28 <USBD_StdItfReq+0xc4>
 800da82:	2b00      	cmp	r3, #0
 800da84:	d001      	beq.n	800da8a <USBD_StdItfReq+0x26>
 800da86:	2b20      	cmp	r3, #32
 800da88:	d14e      	bne.n	800db28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da90:	b2db      	uxtb	r3, r3
 800da92:	3b01      	subs	r3, #1
 800da94:	2b02      	cmp	r3, #2
 800da96:	d840      	bhi.n	800db1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	889b      	ldrh	r3, [r3, #4]
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d836      	bhi.n	800db10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	889b      	ldrh	r3, [r3, #4]
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	4619      	mov	r1, r3
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7ff fed9 	bl	800d862 <USBD_CoreFindIF>
 800dab0:	4603      	mov	r3, r0
 800dab2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dab4:	7bbb      	ldrb	r3, [r7, #14]
 800dab6:	2bff      	cmp	r3, #255	; 0xff
 800dab8:	d01d      	beq.n	800daf6 <USBD_StdItfReq+0x92>
 800daba:	7bbb      	ldrb	r3, [r7, #14]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d11a      	bne.n	800daf6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dac0:	7bba      	ldrb	r2, [r7, #14]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	32ae      	adds	r2, #174	; 0xae
 800dac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d00f      	beq.n	800daf0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dad0:	7bba      	ldrb	r2, [r7, #14]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dad8:	7bba      	ldrb	r2, [r7, #14]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	32ae      	adds	r2, #174	; 0xae
 800dade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	6839      	ldr	r1, [r7, #0]
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	4798      	blx	r3
 800daea:	4603      	mov	r3, r0
 800daec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800daee:	e004      	b.n	800dafa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800daf0:	2303      	movs	r3, #3
 800daf2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800daf4:	e001      	b.n	800dafa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800daf6:	2303      	movs	r3, #3
 800daf8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	88db      	ldrh	r3, [r3, #6]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d110      	bne.n	800db24 <USBD_StdItfReq+0xc0>
 800db02:	7bfb      	ldrb	r3, [r7, #15]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d10d      	bne.n	800db24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 fdc7 	bl	800e69c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800db0e:	e009      	b.n	800db24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fcf7 	bl	800e506 <USBD_CtlError>
          break;
 800db18:	e004      	b.n	800db24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800db1a:	6839      	ldr	r1, [r7, #0]
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fcf2 	bl	800e506 <USBD_CtlError>
          break;
 800db22:	e000      	b.n	800db26 <USBD_StdItfReq+0xc2>
          break;
 800db24:	bf00      	nop
      }
      break;
 800db26:	e004      	b.n	800db32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800db28:	6839      	ldr	r1, [r7, #0]
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 fceb 	bl	800e506 <USBD_CtlError>
      break;
 800db30:	bf00      	nop
  }

  return ret;
 800db32:	7bfb      	ldrb	r3, [r7, #15]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800db46:	2300      	movs	r3, #0
 800db48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	889b      	ldrh	r3, [r3, #4]
 800db4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db58:	2b40      	cmp	r3, #64	; 0x40
 800db5a:	d007      	beq.n	800db6c <USBD_StdEPReq+0x30>
 800db5c:	2b40      	cmp	r3, #64	; 0x40
 800db5e:	f200 817f 	bhi.w	800de60 <USBD_StdEPReq+0x324>
 800db62:	2b00      	cmp	r3, #0
 800db64:	d02a      	beq.n	800dbbc <USBD_StdEPReq+0x80>
 800db66:	2b20      	cmp	r3, #32
 800db68:	f040 817a 	bne.w	800de60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800db6c:	7bbb      	ldrb	r3, [r7, #14]
 800db6e:	4619      	mov	r1, r3
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7ff fe83 	bl	800d87c <USBD_CoreFindEP>
 800db76:	4603      	mov	r3, r0
 800db78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db7a:	7b7b      	ldrb	r3, [r7, #13]
 800db7c:	2bff      	cmp	r3, #255	; 0xff
 800db7e:	f000 8174 	beq.w	800de6a <USBD_StdEPReq+0x32e>
 800db82:	7b7b      	ldrb	r3, [r7, #13]
 800db84:	2b00      	cmp	r3, #0
 800db86:	f040 8170 	bne.w	800de6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800db8a:	7b7a      	ldrb	r2, [r7, #13]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800db92:	7b7a      	ldrb	r2, [r7, #13]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	32ae      	adds	r2, #174	; 0xae
 800db98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db9c:	689b      	ldr	r3, [r3, #8]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f000 8163 	beq.w	800de6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dba4:	7b7a      	ldrb	r2, [r7, #13]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	32ae      	adds	r2, #174	; 0xae
 800dbaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	6839      	ldr	r1, [r7, #0]
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	4798      	blx	r3
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dbba:	e156      	b.n	800de6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	785b      	ldrb	r3, [r3, #1]
 800dbc0:	2b03      	cmp	r3, #3
 800dbc2:	d008      	beq.n	800dbd6 <USBD_StdEPReq+0x9a>
 800dbc4:	2b03      	cmp	r3, #3
 800dbc6:	f300 8145 	bgt.w	800de54 <USBD_StdEPReq+0x318>
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 809b 	beq.w	800dd06 <USBD_StdEPReq+0x1ca>
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d03c      	beq.n	800dc4e <USBD_StdEPReq+0x112>
 800dbd4:	e13e      	b.n	800de54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	2b02      	cmp	r3, #2
 800dbe0:	d002      	beq.n	800dbe8 <USBD_StdEPReq+0xac>
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d016      	beq.n	800dc14 <USBD_StdEPReq+0xd8>
 800dbe6:	e02c      	b.n	800dc42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dbe8:	7bbb      	ldrb	r3, [r7, #14]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00d      	beq.n	800dc0a <USBD_StdEPReq+0xce>
 800dbee:	7bbb      	ldrb	r3, [r7, #14]
 800dbf0:	2b80      	cmp	r3, #128	; 0x80
 800dbf2:	d00a      	beq.n	800dc0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dbf4:	7bbb      	ldrb	r3, [r7, #14]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f001 f967 	bl	800eecc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dbfe:	2180      	movs	r1, #128	; 0x80
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f001 f963 	bl	800eecc <USBD_LL_StallEP>
 800dc06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc08:	e020      	b.n	800dc4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dc0a:	6839      	ldr	r1, [r7, #0]
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 fc7a 	bl	800e506 <USBD_CtlError>
              break;
 800dc12:	e01b      	b.n	800dc4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	885b      	ldrh	r3, [r3, #2]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10e      	bne.n	800dc3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dc1c:	7bbb      	ldrb	r3, [r7, #14]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00b      	beq.n	800dc3a <USBD_StdEPReq+0xfe>
 800dc22:	7bbb      	ldrb	r3, [r7, #14]
 800dc24:	2b80      	cmp	r3, #128	; 0x80
 800dc26:	d008      	beq.n	800dc3a <USBD_StdEPReq+0xfe>
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	88db      	ldrh	r3, [r3, #6]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d104      	bne.n	800dc3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc30:	7bbb      	ldrb	r3, [r7, #14]
 800dc32:	4619      	mov	r1, r3
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f001 f949 	bl	800eecc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 fd2e 	bl	800e69c <USBD_CtlSendStatus>

              break;
 800dc40:	e004      	b.n	800dc4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dc42:	6839      	ldr	r1, [r7, #0]
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 fc5e 	bl	800e506 <USBD_CtlError>
              break;
 800dc4a:	bf00      	nop
          }
          break;
 800dc4c:	e107      	b.n	800de5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	d002      	beq.n	800dc60 <USBD_StdEPReq+0x124>
 800dc5a:	2b03      	cmp	r3, #3
 800dc5c:	d016      	beq.n	800dc8c <USBD_StdEPReq+0x150>
 800dc5e:	e04b      	b.n	800dcf8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc60:	7bbb      	ldrb	r3, [r7, #14]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00d      	beq.n	800dc82 <USBD_StdEPReq+0x146>
 800dc66:	7bbb      	ldrb	r3, [r7, #14]
 800dc68:	2b80      	cmp	r3, #128	; 0x80
 800dc6a:	d00a      	beq.n	800dc82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc6c:	7bbb      	ldrb	r3, [r7, #14]
 800dc6e:	4619      	mov	r1, r3
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f001 f92b 	bl	800eecc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc76:	2180      	movs	r1, #128	; 0x80
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f001 f927 	bl	800eecc <USBD_LL_StallEP>
 800dc7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc80:	e040      	b.n	800dd04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 fc3e 	bl	800e506 <USBD_CtlError>
              break;
 800dc8a:	e03b      	b.n	800dd04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	885b      	ldrh	r3, [r3, #2]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d136      	bne.n	800dd02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dc94:	7bbb      	ldrb	r3, [r7, #14]
 800dc96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d004      	beq.n	800dca8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dc9e:	7bbb      	ldrb	r3, [r7, #14]
 800dca0:	4619      	mov	r1, r3
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f001 f931 	bl	800ef0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 fcf7 	bl	800e69c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dcae:	7bbb      	ldrb	r3, [r7, #14]
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f7ff fde2 	bl	800d87c <USBD_CoreFindEP>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dcbc:	7b7b      	ldrb	r3, [r7, #13]
 800dcbe:	2bff      	cmp	r3, #255	; 0xff
 800dcc0:	d01f      	beq.n	800dd02 <USBD_StdEPReq+0x1c6>
 800dcc2:	7b7b      	ldrb	r3, [r7, #13]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d11c      	bne.n	800dd02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dcc8:	7b7a      	ldrb	r2, [r7, #13]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dcd0:	7b7a      	ldrb	r2, [r7, #13]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	32ae      	adds	r2, #174	; 0xae
 800dcd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d010      	beq.n	800dd02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dce0:	7b7a      	ldrb	r2, [r7, #13]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	32ae      	adds	r2, #174	; 0xae
 800dce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	6839      	ldr	r1, [r7, #0]
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	4798      	blx	r3
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dcf6:	e004      	b.n	800dd02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dcf8:	6839      	ldr	r1, [r7, #0]
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 fc03 	bl	800e506 <USBD_CtlError>
              break;
 800dd00:	e000      	b.n	800dd04 <USBD_StdEPReq+0x1c8>
              break;
 800dd02:	bf00      	nop
          }
          break;
 800dd04:	e0ab      	b.n	800de5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	d002      	beq.n	800dd18 <USBD_StdEPReq+0x1dc>
 800dd12:	2b03      	cmp	r3, #3
 800dd14:	d032      	beq.n	800dd7c <USBD_StdEPReq+0x240>
 800dd16:	e097      	b.n	800de48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd18:	7bbb      	ldrb	r3, [r7, #14]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d007      	beq.n	800dd2e <USBD_StdEPReq+0x1f2>
 800dd1e:	7bbb      	ldrb	r3, [r7, #14]
 800dd20:	2b80      	cmp	r3, #128	; 0x80
 800dd22:	d004      	beq.n	800dd2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dd24:	6839      	ldr	r1, [r7, #0]
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 fbed 	bl	800e506 <USBD_CtlError>
                break;
 800dd2c:	e091      	b.n	800de52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	da0b      	bge.n	800dd4e <USBD_StdEPReq+0x212>
 800dd36:	7bbb      	ldrb	r3, [r7, #14]
 800dd38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4413      	add	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	3310      	adds	r3, #16
 800dd46:	687a      	ldr	r2, [r7, #4]
 800dd48:	4413      	add	r3, r2
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	e00b      	b.n	800dd66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd4e:	7bbb      	ldrb	r3, [r7, #14]
 800dd50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd54:	4613      	mov	r3, r2
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	4413      	add	r3, r2
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	4413      	add	r3, r2
 800dd64:	3304      	adds	r3, #4
 800dd66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	2202      	movs	r2, #2
 800dd72:	4619      	mov	r1, r3
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 fc37 	bl	800e5e8 <USBD_CtlSendData>
              break;
 800dd7a:	e06a      	b.n	800de52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dd7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	da11      	bge.n	800dda8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dd84:	7bbb      	ldrb	r3, [r7, #14]
 800dd86:	f003 020f 	and.w	r2, r3, #15
 800dd8a:	6879      	ldr	r1, [r7, #4]
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	4413      	add	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	440b      	add	r3, r1
 800dd96:	3324      	adds	r3, #36	; 0x24
 800dd98:	881b      	ldrh	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d117      	bne.n	800ddce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dd9e:	6839      	ldr	r1, [r7, #0]
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 fbb0 	bl	800e506 <USBD_CtlError>
                  break;
 800dda6:	e054      	b.n	800de52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dda8:	7bbb      	ldrb	r3, [r7, #14]
 800ddaa:	f003 020f 	and.w	r2, r3, #15
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	4413      	add	r3, r2
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	440b      	add	r3, r1
 800ddba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ddbe:	881b      	ldrh	r3, [r3, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d104      	bne.n	800ddce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ddc4:	6839      	ldr	r1, [r7, #0]
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 fb9d 	bl	800e506 <USBD_CtlError>
                  break;
 800ddcc:	e041      	b.n	800de52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	da0b      	bge.n	800ddee <USBD_StdEPReq+0x2b2>
 800ddd6:	7bbb      	ldrb	r3, [r7, #14]
 800ddd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dddc:	4613      	mov	r3, r2
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4413      	add	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	3310      	adds	r3, #16
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	4413      	add	r3, r2
 800ddea:	3304      	adds	r3, #4
 800ddec:	e00b      	b.n	800de06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ddee:	7bbb      	ldrb	r3, [r7, #14]
 800ddf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	4413      	add	r3, r2
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	4413      	add	r3, r2
 800de04:	3304      	adds	r3, #4
 800de06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800de08:	7bbb      	ldrb	r3, [r7, #14]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d002      	beq.n	800de14 <USBD_StdEPReq+0x2d8>
 800de0e:	7bbb      	ldrb	r3, [r7, #14]
 800de10:	2b80      	cmp	r3, #128	; 0x80
 800de12:	d103      	bne.n	800de1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	2200      	movs	r2, #0
 800de18:	601a      	str	r2, [r3, #0]
 800de1a:	e00e      	b.n	800de3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800de1c:	7bbb      	ldrb	r3, [r7, #14]
 800de1e:	4619      	mov	r1, r3
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f001 f891 	bl	800ef48 <USBD_LL_IsStallEP>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d003      	beq.n	800de34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	2201      	movs	r2, #1
 800de30:	601a      	str	r2, [r3, #0]
 800de32:	e002      	b.n	800de3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	2200      	movs	r2, #0
 800de38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	2202      	movs	r2, #2
 800de3e:	4619      	mov	r1, r3
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 fbd1 	bl	800e5e8 <USBD_CtlSendData>
              break;
 800de46:	e004      	b.n	800de52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 fb5b 	bl	800e506 <USBD_CtlError>
              break;
 800de50:	bf00      	nop
          }
          break;
 800de52:	e004      	b.n	800de5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800de54:	6839      	ldr	r1, [r7, #0]
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 fb55 	bl	800e506 <USBD_CtlError>
          break;
 800de5c:	bf00      	nop
      }
      break;
 800de5e:	e005      	b.n	800de6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800de60:	6839      	ldr	r1, [r7, #0]
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 fb4f 	bl	800e506 <USBD_CtlError>
      break;
 800de68:	e000      	b.n	800de6c <USBD_StdEPReq+0x330>
      break;
 800de6a:	bf00      	nop
  }

  return ret;
 800de6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3710      	adds	r7, #16
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
	...

0800de78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de82:	2300      	movs	r3, #0
 800de84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800de86:	2300      	movs	r3, #0
 800de88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800de8a:	2300      	movs	r3, #0
 800de8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	885b      	ldrh	r3, [r3, #2]
 800de92:	0a1b      	lsrs	r3, r3, #8
 800de94:	b29b      	uxth	r3, r3
 800de96:	3b01      	subs	r3, #1
 800de98:	2b06      	cmp	r3, #6
 800de9a:	f200 8128 	bhi.w	800e0ee <USBD_GetDescriptor+0x276>
 800de9e:	a201      	add	r2, pc, #4	; (adr r2, 800dea4 <USBD_GetDescriptor+0x2c>)
 800dea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea4:	0800dec1 	.word	0x0800dec1
 800dea8:	0800ded9 	.word	0x0800ded9
 800deac:	0800df19 	.word	0x0800df19
 800deb0:	0800e0ef 	.word	0x0800e0ef
 800deb4:	0800e0ef 	.word	0x0800e0ef
 800deb8:	0800e08f 	.word	0x0800e08f
 800debc:	0800e0bb 	.word	0x0800e0bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	7c12      	ldrb	r2, [r2, #16]
 800decc:	f107 0108 	add.w	r1, r7, #8
 800ded0:	4610      	mov	r0, r2
 800ded2:	4798      	blx	r3
 800ded4:	60f8      	str	r0, [r7, #12]
      break;
 800ded6:	e112      	b.n	800e0fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	7c1b      	ldrb	r3, [r3, #16]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10d      	bne.n	800defc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee8:	f107 0208 	add.w	r2, r7, #8
 800deec:	4610      	mov	r0, r2
 800deee:	4798      	blx	r3
 800def0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	3301      	adds	r3, #1
 800def6:	2202      	movs	r2, #2
 800def8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800defa:	e100      	b.n	800e0fe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df04:	f107 0208 	add.w	r2, r7, #8
 800df08:	4610      	mov	r0, r2
 800df0a:	4798      	blx	r3
 800df0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	3301      	adds	r3, #1
 800df12:	2202      	movs	r2, #2
 800df14:	701a      	strb	r2, [r3, #0]
      break;
 800df16:	e0f2      	b.n	800e0fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	885b      	ldrh	r3, [r3, #2]
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b05      	cmp	r3, #5
 800df20:	f200 80ac 	bhi.w	800e07c <USBD_GetDescriptor+0x204>
 800df24:	a201      	add	r2, pc, #4	; (adr r2, 800df2c <USBD_GetDescriptor+0xb4>)
 800df26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df2a:	bf00      	nop
 800df2c:	0800df45 	.word	0x0800df45
 800df30:	0800df79 	.word	0x0800df79
 800df34:	0800dfad 	.word	0x0800dfad
 800df38:	0800dfe1 	.word	0x0800dfe1
 800df3c:	0800e015 	.word	0x0800e015
 800df40:	0800e049 	.word	0x0800e049
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00b      	beq.n	800df68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	7c12      	ldrb	r2, [r2, #16]
 800df5c:	f107 0108 	add.w	r1, r7, #8
 800df60:	4610      	mov	r0, r2
 800df62:	4798      	blx	r3
 800df64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df66:	e091      	b.n	800e08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df68:	6839      	ldr	r1, [r7, #0]
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 facb 	bl	800e506 <USBD_CtlError>
            err++;
 800df70:	7afb      	ldrb	r3, [r7, #11]
 800df72:	3301      	adds	r3, #1
 800df74:	72fb      	strb	r3, [r7, #11]
          break;
 800df76:	e089      	b.n	800e08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00b      	beq.n	800df9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	7c12      	ldrb	r2, [r2, #16]
 800df90:	f107 0108 	add.w	r1, r7, #8
 800df94:	4610      	mov	r0, r2
 800df96:	4798      	blx	r3
 800df98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df9a:	e077      	b.n	800e08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df9c:	6839      	ldr	r1, [r7, #0]
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f000 fab1 	bl	800e506 <USBD_CtlError>
            err++;
 800dfa4:	7afb      	ldrb	r3, [r7, #11]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	72fb      	strb	r3, [r7, #11]
          break;
 800dfaa:	e06f      	b.n	800e08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00b      	beq.n	800dfd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	7c12      	ldrb	r2, [r2, #16]
 800dfc4:	f107 0108 	add.w	r1, r7, #8
 800dfc8:	4610      	mov	r0, r2
 800dfca:	4798      	blx	r3
 800dfcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfce:	e05d      	b.n	800e08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 fa97 	bl	800e506 <USBD_CtlError>
            err++;
 800dfd8:	7afb      	ldrb	r3, [r7, #11]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	72fb      	strb	r3, [r7, #11]
          break;
 800dfde:	e055      	b.n	800e08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfe6:	691b      	ldr	r3, [r3, #16]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00b      	beq.n	800e004 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dff2:	691b      	ldr	r3, [r3, #16]
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	7c12      	ldrb	r2, [r2, #16]
 800dff8:	f107 0108 	add.w	r1, r7, #8
 800dffc:	4610      	mov	r0, r2
 800dffe:	4798      	blx	r3
 800e000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e002:	e043      	b.n	800e08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e004:	6839      	ldr	r1, [r7, #0]
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f000 fa7d 	bl	800e506 <USBD_CtlError>
            err++;
 800e00c:	7afb      	ldrb	r3, [r7, #11]
 800e00e:	3301      	adds	r3, #1
 800e010:	72fb      	strb	r3, [r7, #11]
          break;
 800e012:	e03b      	b.n	800e08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e01a:	695b      	ldr	r3, [r3, #20]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d00b      	beq.n	800e038 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e026:	695b      	ldr	r3, [r3, #20]
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	7c12      	ldrb	r2, [r2, #16]
 800e02c:	f107 0108 	add.w	r1, r7, #8
 800e030:	4610      	mov	r0, r2
 800e032:	4798      	blx	r3
 800e034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e036:	e029      	b.n	800e08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e038:	6839      	ldr	r1, [r7, #0]
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f000 fa63 	bl	800e506 <USBD_CtlError>
            err++;
 800e040:	7afb      	ldrb	r3, [r7, #11]
 800e042:	3301      	adds	r3, #1
 800e044:	72fb      	strb	r3, [r7, #11]
          break;
 800e046:	e021      	b.n	800e08c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e04e:	699b      	ldr	r3, [r3, #24]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00b      	beq.n	800e06c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e05a:	699b      	ldr	r3, [r3, #24]
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	7c12      	ldrb	r2, [r2, #16]
 800e060:	f107 0108 	add.w	r1, r7, #8
 800e064:	4610      	mov	r0, r2
 800e066:	4798      	blx	r3
 800e068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e06a:	e00f      	b.n	800e08c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 fa49 	bl	800e506 <USBD_CtlError>
            err++;
 800e074:	7afb      	ldrb	r3, [r7, #11]
 800e076:	3301      	adds	r3, #1
 800e078:	72fb      	strb	r3, [r7, #11]
          break;
 800e07a:	e007      	b.n	800e08c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e07c:	6839      	ldr	r1, [r7, #0]
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 fa41 	bl	800e506 <USBD_CtlError>
          err++;
 800e084:	7afb      	ldrb	r3, [r7, #11]
 800e086:	3301      	adds	r3, #1
 800e088:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e08a:	bf00      	nop
      }
      break;
 800e08c:	e037      	b.n	800e0fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	7c1b      	ldrb	r3, [r3, #16]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d109      	bne.n	800e0aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e09e:	f107 0208 	add.w	r2, r7, #8
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	4798      	blx	r3
 800e0a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0a8:	e029      	b.n	800e0fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e0aa:	6839      	ldr	r1, [r7, #0]
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 fa2a 	bl	800e506 <USBD_CtlError>
        err++;
 800e0b2:	7afb      	ldrb	r3, [r7, #11]
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	72fb      	strb	r3, [r7, #11]
      break;
 800e0b8:	e021      	b.n	800e0fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	7c1b      	ldrb	r3, [r3, #16]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d10d      	bne.n	800e0de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ca:	f107 0208 	add.w	r2, r7, #8
 800e0ce:	4610      	mov	r0, r2
 800e0d0:	4798      	blx	r3
 800e0d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	2207      	movs	r2, #7
 800e0da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0dc:	e00f      	b.n	800e0fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 fa10 	bl	800e506 <USBD_CtlError>
        err++;
 800e0e6:	7afb      	ldrb	r3, [r7, #11]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	72fb      	strb	r3, [r7, #11]
      break;
 800e0ec:	e007      	b.n	800e0fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e0ee:	6839      	ldr	r1, [r7, #0]
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 fa08 	bl	800e506 <USBD_CtlError>
      err++;
 800e0f6:	7afb      	ldrb	r3, [r7, #11]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	72fb      	strb	r3, [r7, #11]
      break;
 800e0fc:	bf00      	nop
  }

  if (err != 0U)
 800e0fe:	7afb      	ldrb	r3, [r7, #11]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d11e      	bne.n	800e142 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	88db      	ldrh	r3, [r3, #6]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d016      	beq.n	800e13a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e10c:	893b      	ldrh	r3, [r7, #8]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00e      	beq.n	800e130 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	88da      	ldrh	r2, [r3, #6]
 800e116:	893b      	ldrh	r3, [r7, #8]
 800e118:	4293      	cmp	r3, r2
 800e11a:	bf28      	it	cs
 800e11c:	4613      	movcs	r3, r2
 800e11e:	b29b      	uxth	r3, r3
 800e120:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e122:	893b      	ldrh	r3, [r7, #8]
 800e124:	461a      	mov	r2, r3
 800e126:	68f9      	ldr	r1, [r7, #12]
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 fa5d 	bl	800e5e8 <USBD_CtlSendData>
 800e12e:	e009      	b.n	800e144 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f9e7 	bl	800e506 <USBD_CtlError>
 800e138:	e004      	b.n	800e144 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 faae 	bl	800e69c <USBD_CtlSendStatus>
 800e140:	e000      	b.n	800e144 <USBD_GetDescriptor+0x2cc>
    return;
 800e142:	bf00      	nop
  }
}
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop

0800e14c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	889b      	ldrh	r3, [r3, #4]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d131      	bne.n	800e1c2 <USBD_SetAddress+0x76>
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	88db      	ldrh	r3, [r3, #6]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d12d      	bne.n	800e1c2 <USBD_SetAddress+0x76>
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	885b      	ldrh	r3, [r3, #2]
 800e16a:	2b7f      	cmp	r3, #127	; 0x7f
 800e16c:	d829      	bhi.n	800e1c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	885b      	ldrh	r3, [r3, #2]
 800e172:	b2db      	uxtb	r3, r3
 800e174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e178:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e180:	b2db      	uxtb	r3, r3
 800e182:	2b03      	cmp	r3, #3
 800e184:	d104      	bne.n	800e190 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e186:	6839      	ldr	r1, [r7, #0]
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 f9bc 	bl	800e506 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e18e:	e01d      	b.n	800e1cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	7bfa      	ldrb	r2, [r7, #15]
 800e194:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e198:	7bfb      	ldrb	r3, [r7, #15]
 800e19a:	4619      	mov	r1, r3
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 feff 	bl	800efa0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 fa7a 	bl	800e69c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e1a8:	7bfb      	ldrb	r3, [r7, #15]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d004      	beq.n	800e1b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2202      	movs	r2, #2
 800e1b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1b6:	e009      	b.n	800e1cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1c0:	e004      	b.n	800e1cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e1c2:	6839      	ldr	r1, [r7, #0]
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 f99e 	bl	800e506 <USBD_CtlError>
  }
}
 800e1ca:	bf00      	nop
 800e1cc:	bf00      	nop
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	885b      	ldrh	r3, [r3, #2]
 800e1e6:	b2da      	uxtb	r2, r3
 800e1e8:	4b4e      	ldr	r3, [pc, #312]	; (800e324 <USBD_SetConfig+0x150>)
 800e1ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e1ec:	4b4d      	ldr	r3, [pc, #308]	; (800e324 <USBD_SetConfig+0x150>)
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d905      	bls.n	800e200 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e1f4:	6839      	ldr	r1, [r7, #0]
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 f985 	bl	800e506 <USBD_CtlError>
    return USBD_FAIL;
 800e1fc:	2303      	movs	r3, #3
 800e1fe:	e08c      	b.n	800e31a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e206:	b2db      	uxtb	r3, r3
 800e208:	2b02      	cmp	r3, #2
 800e20a:	d002      	beq.n	800e212 <USBD_SetConfig+0x3e>
 800e20c:	2b03      	cmp	r3, #3
 800e20e:	d029      	beq.n	800e264 <USBD_SetConfig+0x90>
 800e210:	e075      	b.n	800e2fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e212:	4b44      	ldr	r3, [pc, #272]	; (800e324 <USBD_SetConfig+0x150>)
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d020      	beq.n	800e25c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e21a:	4b42      	ldr	r3, [pc, #264]	; (800e324 <USBD_SetConfig+0x150>)
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	461a      	mov	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e224:	4b3f      	ldr	r3, [pc, #252]	; (800e324 <USBD_SetConfig+0x150>)
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	4619      	mov	r1, r3
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7fe ffe7 	bl	800d1fe <USBD_SetClassConfig>
 800e230:	4603      	mov	r3, r0
 800e232:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e234:	7bfb      	ldrb	r3, [r7, #15]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d008      	beq.n	800e24c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e23a:	6839      	ldr	r1, [r7, #0]
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f000 f962 	bl	800e506 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2202      	movs	r2, #2
 800e246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e24a:	e065      	b.n	800e318 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 fa25 	bl	800e69c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2203      	movs	r2, #3
 800e256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e25a:	e05d      	b.n	800e318 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 fa1d 	bl	800e69c <USBD_CtlSendStatus>
      break;
 800e262:	e059      	b.n	800e318 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e264:	4b2f      	ldr	r3, [pc, #188]	; (800e324 <USBD_SetConfig+0x150>)
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d112      	bne.n	800e292 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2202      	movs	r2, #2
 800e270:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e274:	4b2b      	ldr	r3, [pc, #172]	; (800e324 <USBD_SetConfig+0x150>)
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	461a      	mov	r2, r3
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e27e:	4b29      	ldr	r3, [pc, #164]	; (800e324 <USBD_SetConfig+0x150>)
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	4619      	mov	r1, r3
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7fe ffd6 	bl	800d236 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 fa06 	bl	800e69c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e290:	e042      	b.n	800e318 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e292:	4b24      	ldr	r3, [pc, #144]	; (800e324 <USBD_SetConfig+0x150>)
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	461a      	mov	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d02a      	beq.n	800e2f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7fe ffc4 	bl	800d236 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e2ae:	4b1d      	ldr	r3, [pc, #116]	; (800e324 <USBD_SetConfig+0x150>)
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e2b8:	4b1a      	ldr	r3, [pc, #104]	; (800e324 <USBD_SetConfig+0x150>)
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	4619      	mov	r1, r3
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f7fe ff9d 	bl	800d1fe <USBD_SetClassConfig>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e2c8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00f      	beq.n	800e2ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e2ce:	6839      	ldr	r1, [r7, #0]
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 f918 	bl	800e506 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	4619      	mov	r1, r3
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7fe ffa9 	bl	800d236 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2202      	movs	r2, #2
 800e2e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e2ec:	e014      	b.n	800e318 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 f9d4 	bl	800e69c <USBD_CtlSendStatus>
      break;
 800e2f4:	e010      	b.n	800e318 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 f9d0 	bl	800e69c <USBD_CtlSendStatus>
      break;
 800e2fc:	e00c      	b.n	800e318 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e2fe:	6839      	ldr	r1, [r7, #0]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 f900 	bl	800e506 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e306:	4b07      	ldr	r3, [pc, #28]	; (800e324 <USBD_SetConfig+0x150>)
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	4619      	mov	r1, r3
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f7fe ff92 	bl	800d236 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e312:	2303      	movs	r3, #3
 800e314:	73fb      	strb	r3, [r7, #15]
      break;
 800e316:	bf00      	nop
  }

  return ret;
 800e318:	7bfb      	ldrb	r3, [r7, #15]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	20001e2c 	.word	0x20001e2c

0800e328 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	88db      	ldrh	r3, [r3, #6]
 800e336:	2b01      	cmp	r3, #1
 800e338:	d004      	beq.n	800e344 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e33a:	6839      	ldr	r1, [r7, #0]
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 f8e2 	bl	800e506 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e342:	e023      	b.n	800e38c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	2b02      	cmp	r3, #2
 800e34e:	dc02      	bgt.n	800e356 <USBD_GetConfig+0x2e>
 800e350:	2b00      	cmp	r3, #0
 800e352:	dc03      	bgt.n	800e35c <USBD_GetConfig+0x34>
 800e354:	e015      	b.n	800e382 <USBD_GetConfig+0x5a>
 800e356:	2b03      	cmp	r3, #3
 800e358:	d00b      	beq.n	800e372 <USBD_GetConfig+0x4a>
 800e35a:	e012      	b.n	800e382 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	3308      	adds	r3, #8
 800e366:	2201      	movs	r2, #1
 800e368:	4619      	mov	r1, r3
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 f93c 	bl	800e5e8 <USBD_CtlSendData>
        break;
 800e370:	e00c      	b.n	800e38c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	3304      	adds	r3, #4
 800e376:	2201      	movs	r2, #1
 800e378:	4619      	mov	r1, r3
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f934 	bl	800e5e8 <USBD_CtlSendData>
        break;
 800e380:	e004      	b.n	800e38c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e382:	6839      	ldr	r1, [r7, #0]
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f000 f8be 	bl	800e506 <USBD_CtlError>
        break;
 800e38a:	bf00      	nop
}
 800e38c:	bf00      	nop
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	2b02      	cmp	r3, #2
 800e3aa:	d81e      	bhi.n	800e3ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	88db      	ldrh	r3, [r3, #6]
 800e3b0:	2b02      	cmp	r3, #2
 800e3b2:	d004      	beq.n	800e3be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e3b4:	6839      	ldr	r1, [r7, #0]
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 f8a5 	bl	800e506 <USBD_CtlError>
        break;
 800e3bc:	e01a      	b.n	800e3f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d005      	beq.n	800e3da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	f043 0202 	orr.w	r2, r3, #2
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	330c      	adds	r3, #12
 800e3de:	2202      	movs	r2, #2
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 f900 	bl	800e5e8 <USBD_CtlSendData>
      break;
 800e3e8:	e004      	b.n	800e3f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e3ea:	6839      	ldr	r1, [r7, #0]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 f88a 	bl	800e506 <USBD_CtlError>
      break;
 800e3f2:	bf00      	nop
  }
}
 800e3f4:	bf00      	nop
 800e3f6:	3708      	adds	r7, #8
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	885b      	ldrh	r3, [r3, #2]
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d107      	bne.n	800e41e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2201      	movs	r2, #1
 800e412:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 f940 	bl	800e69c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e41c:	e013      	b.n	800e446 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	885b      	ldrh	r3, [r3, #2]
 800e422:	2b02      	cmp	r3, #2
 800e424:	d10b      	bne.n	800e43e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	889b      	ldrh	r3, [r3, #4]
 800e42a:	0a1b      	lsrs	r3, r3, #8
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f930 	bl	800e69c <USBD_CtlSendStatus>
}
 800e43c:	e003      	b.n	800e446 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e43e:	6839      	ldr	r1, [r7, #0]
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 f860 	bl	800e506 <USBD_CtlError>
}
 800e446:	bf00      	nop
 800e448:	3708      	adds	r7, #8
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b082      	sub	sp, #8
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
 800e456:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	3b01      	subs	r3, #1
 800e462:	2b02      	cmp	r3, #2
 800e464:	d80b      	bhi.n	800e47e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	885b      	ldrh	r3, [r3, #2]
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d10c      	bne.n	800e488 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 f910 	bl	800e69c <USBD_CtlSendStatus>
      }
      break;
 800e47c:	e004      	b.n	800e488 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 f840 	bl	800e506 <USBD_CtlError>
      break;
 800e486:	e000      	b.n	800e48a <USBD_ClrFeature+0x3c>
      break;
 800e488:	bf00      	nop
  }
}
 800e48a:	bf00      	nop
 800e48c:	3708      	adds	r7, #8
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b084      	sub	sp, #16
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
 800e49a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	781a      	ldrb	r2, [r3, #0]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	781a      	ldrb	r2, [r3, #0]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f7ff fa41 	bl	800d944 <SWAPBYTE>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e4d6:	68f8      	ldr	r0, [r7, #12]
 800e4d8:	f7ff fa34 	bl	800d944 <SWAPBYTE>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	461a      	mov	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f7ff fa27 	bl	800d944 <SWAPBYTE>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	80da      	strh	r2, [r3, #6]
}
 800e4fe:	bf00      	nop
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b082      	sub	sp, #8
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
 800e50e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e510:	2180      	movs	r1, #128	; 0x80
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 fcda 	bl	800eecc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e518:	2100      	movs	r1, #0
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fcd6 	bl	800eecc <USBD_LL_StallEP>
}
 800e520:	bf00      	nop
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e534:	2300      	movs	r3, #0
 800e536:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d036      	beq.n	800e5ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e542:	6938      	ldr	r0, [r7, #16]
 800e544:	f000 f836 	bl	800e5b4 <USBD_GetLen>
 800e548:	4603      	mov	r3, r0
 800e54a:	3301      	adds	r3, #1
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	005b      	lsls	r3, r3, #1
 800e550:	b29a      	uxth	r2, r3
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e556:	7dfb      	ldrb	r3, [r7, #23]
 800e558:	68ba      	ldr	r2, [r7, #8]
 800e55a:	4413      	add	r3, r2
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	7812      	ldrb	r2, [r2, #0]
 800e560:	701a      	strb	r2, [r3, #0]
  idx++;
 800e562:	7dfb      	ldrb	r3, [r7, #23]
 800e564:	3301      	adds	r3, #1
 800e566:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e568:	7dfb      	ldrb	r3, [r7, #23]
 800e56a:	68ba      	ldr	r2, [r7, #8]
 800e56c:	4413      	add	r3, r2
 800e56e:	2203      	movs	r2, #3
 800e570:	701a      	strb	r2, [r3, #0]
  idx++;
 800e572:	7dfb      	ldrb	r3, [r7, #23]
 800e574:	3301      	adds	r3, #1
 800e576:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e578:	e013      	b.n	800e5a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e57a:	7dfb      	ldrb	r3, [r7, #23]
 800e57c:	68ba      	ldr	r2, [r7, #8]
 800e57e:	4413      	add	r3, r2
 800e580:	693a      	ldr	r2, [r7, #16]
 800e582:	7812      	ldrb	r2, [r2, #0]
 800e584:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	3301      	adds	r3, #1
 800e58a:	613b      	str	r3, [r7, #16]
    idx++;
 800e58c:	7dfb      	ldrb	r3, [r7, #23]
 800e58e:	3301      	adds	r3, #1
 800e590:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e592:	7dfb      	ldrb	r3, [r7, #23]
 800e594:	68ba      	ldr	r2, [r7, #8]
 800e596:	4413      	add	r3, r2
 800e598:	2200      	movs	r2, #0
 800e59a:	701a      	strb	r2, [r3, #0]
    idx++;
 800e59c:	7dfb      	ldrb	r3, [r7, #23]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1e7      	bne.n	800e57a <USBD_GetString+0x52>
 800e5aa:	e000      	b.n	800e5ae <USBD_GetString+0x86>
    return;
 800e5ac:	bf00      	nop
  }
}
 800e5ae:	3718      	adds	r7, #24
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e5c4:	e005      	b.n	800e5d2 <USBD_GetLen+0x1e>
  {
    len++;
 800e5c6:	7bfb      	ldrb	r3, [r7, #15]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1f5      	bne.n	800e5c6 <USBD_GetLen+0x12>
  }

  return len;
 800e5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3714      	adds	r7, #20
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	60b9      	str	r1, [r7, #8]
 800e5f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2202      	movs	r2, #2
 800e5f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	2100      	movs	r1, #0
 800e60e:	68f8      	ldr	r0, [r7, #12]
 800e610:	f000 fce5 	bl	800efde <USBD_LL_Transmit>

  return USBD_OK;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3710      	adds	r7, #16
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b084      	sub	sp, #16
 800e622:	af00      	add	r7, sp, #0
 800e624:	60f8      	str	r0, [r7, #12]
 800e626:	60b9      	str	r1, [r7, #8]
 800e628:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	68ba      	ldr	r2, [r7, #8]
 800e62e:	2100      	movs	r1, #0
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f000 fcd4 	bl	800efde <USBD_LL_Transmit>

  return USBD_OK;
 800e636:	2300      	movs	r3, #0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3710      	adds	r7, #16
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2203      	movs	r2, #3
 800e650:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	68ba      	ldr	r2, [r7, #8]
 800e668:	2100      	movs	r1, #0
 800e66a:	68f8      	ldr	r0, [r7, #12]
 800e66c:	f000 fcd8 	bl	800f020 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e670:	2300      	movs	r3, #0
}
 800e672:	4618      	mov	r0, r3
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}

0800e67a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e67a:	b580      	push	{r7, lr}
 800e67c:	b084      	sub	sp, #16
 800e67e:	af00      	add	r7, sp, #0
 800e680:	60f8      	str	r0, [r7, #12]
 800e682:	60b9      	str	r1, [r7, #8]
 800e684:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	68ba      	ldr	r2, [r7, #8]
 800e68a:	2100      	movs	r1, #0
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f000 fcc7 	bl	800f020 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2204      	movs	r2, #4
 800e6a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 fc93 	bl	800efde <USBD_LL_Transmit>

  return USBD_OK;
 800e6b8:	2300      	movs	r3, #0
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b082      	sub	sp, #8
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2205      	movs	r2, #5
 800e6ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 fca1 	bl	800f020 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6de:	2300      	movs	r3, #0
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3708      	adds	r7, #8
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	4912      	ldr	r1, [pc, #72]	; (800e738 <MX_USB_DEVICE_Init+0x50>)
 800e6f0:	4812      	ldr	r0, [pc, #72]	; (800e73c <MX_USB_DEVICE_Init+0x54>)
 800e6f2:	f7fe fd07 	bl	800d104 <USBD_Init>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d001      	beq.n	800e700 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e6fc:	f7f5 fbea 	bl	8003ed4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e700:	490f      	ldr	r1, [pc, #60]	; (800e740 <MX_USB_DEVICE_Init+0x58>)
 800e702:	480e      	ldr	r0, [pc, #56]	; (800e73c <MX_USB_DEVICE_Init+0x54>)
 800e704:	f7fe fd2e 	bl	800d164 <USBD_RegisterClass>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d001      	beq.n	800e712 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e70e:	f7f5 fbe1 	bl	8003ed4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e712:	490c      	ldr	r1, [pc, #48]	; (800e744 <MX_USB_DEVICE_Init+0x5c>)
 800e714:	4809      	ldr	r0, [pc, #36]	; (800e73c <MX_USB_DEVICE_Init+0x54>)
 800e716:	f7fe fc1f 	bl	800cf58 <USBD_CDC_RegisterInterface>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d001      	beq.n	800e724 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e720:	f7f5 fbd8 	bl	8003ed4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e724:	4805      	ldr	r0, [pc, #20]	; (800e73c <MX_USB_DEVICE_Init+0x54>)
 800e726:	f7fe fd53 	bl	800d1d0 <USBD_Start>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d001      	beq.n	800e734 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e730:	f7f5 fbd0 	bl	8003ed4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e734:	bf00      	nop
 800e736:	bd80      	pop	{r7, pc}
 800e738:	200000c0 	.word	0x200000c0
 800e73c:	20001e30 	.word	0x20001e30
 800e740:	2000002c 	.word	0x2000002c
 800e744:	200000ac 	.word	0x200000ac

0800e748 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e74c:	2200      	movs	r2, #0
 800e74e:	4905      	ldr	r1, [pc, #20]	; (800e764 <CDC_Init_FS+0x1c>)
 800e750:	4805      	ldr	r0, [pc, #20]	; (800e768 <CDC_Init_FS+0x20>)
 800e752:	f7fe fc1b 	bl	800cf8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e756:	4905      	ldr	r1, [pc, #20]	; (800e76c <CDC_Init_FS+0x24>)
 800e758:	4803      	ldr	r0, [pc, #12]	; (800e768 <CDC_Init_FS+0x20>)
 800e75a:	f7fe fc39 	bl	800cfd0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e75e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e760:	4618      	mov	r0, r3
 800e762:	bd80      	pop	{r7, pc}
 800e764:	200024f4 	.word	0x200024f4
 800e768:	20001e30 	.word	0x20001e30
 800e76c:	2000210c 	.word	0x2000210c

0800e770 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e770:	b480      	push	{r7}
 800e772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e774:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e776:	4618      	mov	r0, r3
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	4603      	mov	r3, r0
 800e788:	6039      	str	r1, [r7, #0]
 800e78a:	71fb      	strb	r3, [r7, #7]
 800e78c:	4613      	mov	r3, r2
 800e78e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e790:	79fb      	ldrb	r3, [r7, #7]
 800e792:	2b23      	cmp	r3, #35	; 0x23
 800e794:	d84a      	bhi.n	800e82c <CDC_Control_FS+0xac>
 800e796:	a201      	add	r2, pc, #4	; (adr r2, 800e79c <CDC_Control_FS+0x1c>)
 800e798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e79c:	0800e82d 	.word	0x0800e82d
 800e7a0:	0800e82d 	.word	0x0800e82d
 800e7a4:	0800e82d 	.word	0x0800e82d
 800e7a8:	0800e82d 	.word	0x0800e82d
 800e7ac:	0800e82d 	.word	0x0800e82d
 800e7b0:	0800e82d 	.word	0x0800e82d
 800e7b4:	0800e82d 	.word	0x0800e82d
 800e7b8:	0800e82d 	.word	0x0800e82d
 800e7bc:	0800e82d 	.word	0x0800e82d
 800e7c0:	0800e82d 	.word	0x0800e82d
 800e7c4:	0800e82d 	.word	0x0800e82d
 800e7c8:	0800e82d 	.word	0x0800e82d
 800e7cc:	0800e82d 	.word	0x0800e82d
 800e7d0:	0800e82d 	.word	0x0800e82d
 800e7d4:	0800e82d 	.word	0x0800e82d
 800e7d8:	0800e82d 	.word	0x0800e82d
 800e7dc:	0800e82d 	.word	0x0800e82d
 800e7e0:	0800e82d 	.word	0x0800e82d
 800e7e4:	0800e82d 	.word	0x0800e82d
 800e7e8:	0800e82d 	.word	0x0800e82d
 800e7ec:	0800e82d 	.word	0x0800e82d
 800e7f0:	0800e82d 	.word	0x0800e82d
 800e7f4:	0800e82d 	.word	0x0800e82d
 800e7f8:	0800e82d 	.word	0x0800e82d
 800e7fc:	0800e82d 	.word	0x0800e82d
 800e800:	0800e82d 	.word	0x0800e82d
 800e804:	0800e82d 	.word	0x0800e82d
 800e808:	0800e82d 	.word	0x0800e82d
 800e80c:	0800e82d 	.word	0x0800e82d
 800e810:	0800e82d 	.word	0x0800e82d
 800e814:	0800e82d 	.word	0x0800e82d
 800e818:	0800e82d 	.word	0x0800e82d
 800e81c:	0800e82d 	.word	0x0800e82d
 800e820:	0800e82d 	.word	0x0800e82d
 800e824:	0800e82d 	.word	0x0800e82d
 800e828:	0800e82d 	.word	0x0800e82d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e82c:	bf00      	nop
  }

  return (USBD_OK);
 800e82e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e830:	4618      	mov	r0, r3
 800e832:	370c      	adds	r7, #12
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr

0800e83c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint16_t len = (uint8_t) *Len;
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	81fb      	strh	r3, [r7, #14]
  StringFIFOAdd(&USBFIFO, Buf, len);
 800e84e:	89fb      	ldrh	r3, [r7, #14]
 800e850:	461a      	mov	r2, r3
 800e852:	6879      	ldr	r1, [r7, #4]
 800e854:	4807      	ldr	r0, [pc, #28]	; (800e874 <CDC_Receive_FS+0x38>)
 800e856:	f7f5 fd69 	bl	800432c <StringFIFOAdd>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e85a:	6879      	ldr	r1, [r7, #4]
 800e85c:	4806      	ldr	r0, [pc, #24]	; (800e878 <CDC_Receive_FS+0x3c>)
 800e85e:	f7fe fbb7 	bl	800cfd0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e862:	4805      	ldr	r0, [pc, #20]	; (800e878 <CDC_Receive_FS+0x3c>)
 800e864:	f7fe fc18 	bl	800d098 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e868:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	20001d28 	.word	0x20001d28
 800e878:	20001e30 	.word	0x20001e30

0800e87c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	460b      	mov	r3, r1
 800e886:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e888:	2300      	movs	r3, #0
 800e88a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e88c:	4b0d      	ldr	r3, [pc, #52]	; (800e8c4 <CDC_Transmit_FS+0x48>)
 800e88e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e892:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d001      	beq.n	800e8a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e00b      	b.n	800e8ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e8a2:	887b      	ldrh	r3, [r7, #2]
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	6879      	ldr	r1, [r7, #4]
 800e8a8:	4806      	ldr	r0, [pc, #24]	; (800e8c4 <CDC_Transmit_FS+0x48>)
 800e8aa:	f7fe fb6f 	bl	800cf8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e8ae:	4805      	ldr	r0, [pc, #20]	; (800e8c4 <CDC_Transmit_FS+0x48>)
 800e8b0:	f7fe fbac 	bl	800d00c <USBD_CDC_TransmitPacket>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3710      	adds	r7, #16
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	20001e30 	.word	0x20001e30

0800e8c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	6039      	str	r1, [r7, #0]
 800e8d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	2212      	movs	r2, #18
 800e8d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e8da:	4b03      	ldr	r3, [pc, #12]	; (800e8e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr
 800e8e8:	200000dc 	.word	0x200000dc

0800e8ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	6039      	str	r1, [r7, #0]
 800e8f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	2204      	movs	r2, #4
 800e8fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e8fe:	4b03      	ldr	r3, [pc, #12]	; (800e90c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e900:	4618      	mov	r0, r3
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr
 800e90c:	200000f0 	.word	0x200000f0

0800e910 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	4603      	mov	r3, r0
 800e918:	6039      	str	r1, [r7, #0]
 800e91a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e91c:	79fb      	ldrb	r3, [r7, #7]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d105      	bne.n	800e92e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e922:	683a      	ldr	r2, [r7, #0]
 800e924:	4907      	ldr	r1, [pc, #28]	; (800e944 <USBD_FS_ProductStrDescriptor+0x34>)
 800e926:	4808      	ldr	r0, [pc, #32]	; (800e948 <USBD_FS_ProductStrDescriptor+0x38>)
 800e928:	f7ff fdfe 	bl	800e528 <USBD_GetString>
 800e92c:	e004      	b.n	800e938 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e92e:	683a      	ldr	r2, [r7, #0]
 800e930:	4904      	ldr	r1, [pc, #16]	; (800e944 <USBD_FS_ProductStrDescriptor+0x34>)
 800e932:	4805      	ldr	r0, [pc, #20]	; (800e948 <USBD_FS_ProductStrDescriptor+0x38>)
 800e934:	f7ff fdf8 	bl	800e528 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e938:	4b02      	ldr	r3, [pc, #8]	; (800e944 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3708      	adds	r7, #8
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	200028dc 	.word	0x200028dc
 800e948:	080150d0 	.word	0x080150d0

0800e94c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	4603      	mov	r3, r0
 800e954:	6039      	str	r1, [r7, #0]
 800e956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e958:	683a      	ldr	r2, [r7, #0]
 800e95a:	4904      	ldr	r1, [pc, #16]	; (800e96c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e95c:	4804      	ldr	r0, [pc, #16]	; (800e970 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e95e:	f7ff fde3 	bl	800e528 <USBD_GetString>
  return USBD_StrDesc;
 800e962:	4b02      	ldr	r3, [pc, #8]	; (800e96c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e964:	4618      	mov	r0, r3
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	200028dc 	.word	0x200028dc
 800e970:	080150e8 	.word	0x080150e8

0800e974 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	4603      	mov	r3, r0
 800e97c:	6039      	str	r1, [r7, #0]
 800e97e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	221a      	movs	r2, #26
 800e984:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e986:	f000 f843 	bl	800ea10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e98a:	4b02      	ldr	r3, [pc, #8]	; (800e994 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3708      	adds	r7, #8
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	200000f4 	.word	0x200000f4

0800e998 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	4603      	mov	r3, r0
 800e9a0:	6039      	str	r1, [r7, #0]
 800e9a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e9a4:	79fb      	ldrb	r3, [r7, #7]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d105      	bne.n	800e9b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e9aa:	683a      	ldr	r2, [r7, #0]
 800e9ac:	4907      	ldr	r1, [pc, #28]	; (800e9cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800e9ae:	4808      	ldr	r0, [pc, #32]	; (800e9d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e9b0:	f7ff fdba 	bl	800e528 <USBD_GetString>
 800e9b4:	e004      	b.n	800e9c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e9b6:	683a      	ldr	r2, [r7, #0]
 800e9b8:	4904      	ldr	r1, [pc, #16]	; (800e9cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800e9ba:	4805      	ldr	r0, [pc, #20]	; (800e9d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e9bc:	f7ff fdb4 	bl	800e528 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e9c0:	4b02      	ldr	r3, [pc, #8]	; (800e9cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	200028dc 	.word	0x200028dc
 800e9d0:	080150fc 	.word	0x080150fc

0800e9d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	4603      	mov	r3, r0
 800e9dc:	6039      	str	r1, [r7, #0]
 800e9de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e9e0:	79fb      	ldrb	r3, [r7, #7]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d105      	bne.n	800e9f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e9e6:	683a      	ldr	r2, [r7, #0]
 800e9e8:	4907      	ldr	r1, [pc, #28]	; (800ea08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e9ea:	4808      	ldr	r0, [pc, #32]	; (800ea0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e9ec:	f7ff fd9c 	bl	800e528 <USBD_GetString>
 800e9f0:	e004      	b.n	800e9fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e9f2:	683a      	ldr	r2, [r7, #0]
 800e9f4:	4904      	ldr	r1, [pc, #16]	; (800ea08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e9f6:	4805      	ldr	r0, [pc, #20]	; (800ea0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e9f8:	f7ff fd96 	bl	800e528 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e9fc:	4b02      	ldr	r3, [pc, #8]	; (800ea08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	200028dc 	.word	0x200028dc
 800ea0c:	08015108 	.word	0x08015108

0800ea10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ea16:	4b0f      	ldr	r3, [pc, #60]	; (800ea54 <Get_SerialNum+0x44>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ea1c:	4b0e      	ldr	r3, [pc, #56]	; (800ea58 <Get_SerialNum+0x48>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ea22:	4b0e      	ldr	r3, [pc, #56]	; (800ea5c <Get_SerialNum+0x4c>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ea28:	68fa      	ldr	r2, [r7, #12]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d009      	beq.n	800ea4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ea36:	2208      	movs	r2, #8
 800ea38:	4909      	ldr	r1, [pc, #36]	; (800ea60 <Get_SerialNum+0x50>)
 800ea3a:	68f8      	ldr	r0, [r7, #12]
 800ea3c:	f000 f814 	bl	800ea68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ea40:	2204      	movs	r2, #4
 800ea42:	4908      	ldr	r1, [pc, #32]	; (800ea64 <Get_SerialNum+0x54>)
 800ea44:	68b8      	ldr	r0, [r7, #8]
 800ea46:	f000 f80f 	bl	800ea68 <IntToUnicode>
  }
}
 800ea4a:	bf00      	nop
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	1fff7a10 	.word	0x1fff7a10
 800ea58:	1fff7a14 	.word	0x1fff7a14
 800ea5c:	1fff7a18 	.word	0x1fff7a18
 800ea60:	200000f6 	.word	0x200000f6
 800ea64:	20000106 	.word	0x20000106

0800ea68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b087      	sub	sp, #28
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	4613      	mov	r3, r2
 800ea74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ea76:	2300      	movs	r3, #0
 800ea78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	75fb      	strb	r3, [r7, #23]
 800ea7e:	e027      	b.n	800ead0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	0f1b      	lsrs	r3, r3, #28
 800ea84:	2b09      	cmp	r3, #9
 800ea86:	d80b      	bhi.n	800eaa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	0f1b      	lsrs	r3, r3, #28
 800ea8c:	b2da      	uxtb	r2, r3
 800ea8e:	7dfb      	ldrb	r3, [r7, #23]
 800ea90:	005b      	lsls	r3, r3, #1
 800ea92:	4619      	mov	r1, r3
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	440b      	add	r3, r1
 800ea98:	3230      	adds	r2, #48	; 0x30
 800ea9a:	b2d2      	uxtb	r2, r2
 800ea9c:	701a      	strb	r2, [r3, #0]
 800ea9e:	e00a      	b.n	800eab6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	0f1b      	lsrs	r3, r3, #28
 800eaa4:	b2da      	uxtb	r2, r3
 800eaa6:	7dfb      	ldrb	r3, [r7, #23]
 800eaa8:	005b      	lsls	r3, r3, #1
 800eaaa:	4619      	mov	r1, r3
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	440b      	add	r3, r1
 800eab0:	3237      	adds	r2, #55	; 0x37
 800eab2:	b2d2      	uxtb	r2, r2
 800eab4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	011b      	lsls	r3, r3, #4
 800eaba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800eabc:	7dfb      	ldrb	r3, [r7, #23]
 800eabe:	005b      	lsls	r3, r3, #1
 800eac0:	3301      	adds	r3, #1
 800eac2:	68ba      	ldr	r2, [r7, #8]
 800eac4:	4413      	add	r3, r2
 800eac6:	2200      	movs	r2, #0
 800eac8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	3301      	adds	r3, #1
 800eace:	75fb      	strb	r3, [r7, #23]
 800ead0:	7dfa      	ldrb	r2, [r7, #23]
 800ead2:	79fb      	ldrb	r3, [r7, #7]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d3d3      	bcc.n	800ea80 <IntToUnicode+0x18>
  }
}
 800ead8:	bf00      	nop
 800eada:	bf00      	nop
 800eadc:	371c      	adds	r7, #28
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr
	...

0800eae8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b08a      	sub	sp, #40	; 0x28
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eaf0:	f107 0314 	add.w	r3, r7, #20
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	601a      	str	r2, [r3, #0]
 800eaf8:	605a      	str	r2, [r3, #4]
 800eafa:	609a      	str	r2, [r3, #8]
 800eafc:	60da      	str	r2, [r3, #12]
 800eafe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb08:	d13a      	bne.n	800eb80 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	613b      	str	r3, [r7, #16]
 800eb0e:	4b1e      	ldr	r3, [pc, #120]	; (800eb88 <HAL_PCD_MspInit+0xa0>)
 800eb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb12:	4a1d      	ldr	r2, [pc, #116]	; (800eb88 <HAL_PCD_MspInit+0xa0>)
 800eb14:	f043 0301 	orr.w	r3, r3, #1
 800eb18:	6313      	str	r3, [r2, #48]	; 0x30
 800eb1a:	4b1b      	ldr	r3, [pc, #108]	; (800eb88 <HAL_PCD_MspInit+0xa0>)
 800eb1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb1e:	f003 0301 	and.w	r3, r3, #1
 800eb22:	613b      	str	r3, [r7, #16]
 800eb24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800eb26:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800eb2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb2c:	2302      	movs	r3, #2
 800eb2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb30:	2300      	movs	r3, #0
 800eb32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb34:	2303      	movs	r3, #3
 800eb36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eb38:	230a      	movs	r3, #10
 800eb3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb3c:	f107 0314 	add.w	r3, r7, #20
 800eb40:	4619      	mov	r1, r3
 800eb42:	4812      	ldr	r0, [pc, #72]	; (800eb8c <HAL_PCD_MspInit+0xa4>)
 800eb44:	f7f6 fa1e 	bl	8004f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eb48:	4b0f      	ldr	r3, [pc, #60]	; (800eb88 <HAL_PCD_MspInit+0xa0>)
 800eb4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb4c:	4a0e      	ldr	r2, [pc, #56]	; (800eb88 <HAL_PCD_MspInit+0xa0>)
 800eb4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb52:	6353      	str	r3, [r2, #52]	; 0x34
 800eb54:	2300      	movs	r3, #0
 800eb56:	60fb      	str	r3, [r7, #12]
 800eb58:	4b0b      	ldr	r3, [pc, #44]	; (800eb88 <HAL_PCD_MspInit+0xa0>)
 800eb5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb5c:	4a0a      	ldr	r2, [pc, #40]	; (800eb88 <HAL_PCD_MspInit+0xa0>)
 800eb5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eb62:	6453      	str	r3, [r2, #68]	; 0x44
 800eb64:	4b08      	ldr	r3, [pc, #32]	; (800eb88 <HAL_PCD_MspInit+0xa0>)
 800eb66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb6c:	60fb      	str	r3, [r7, #12]
 800eb6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eb70:	2200      	movs	r2, #0
 800eb72:	2100      	movs	r1, #0
 800eb74:	2043      	movs	r0, #67	; 0x43
 800eb76:	f7f6 f99e 	bl	8004eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eb7a:	2043      	movs	r0, #67	; 0x43
 800eb7c:	f7f6 f9b7 	bl	8004eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eb80:	bf00      	nop
 800eb82:	3728      	adds	r7, #40	; 0x28
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	40023800 	.word	0x40023800
 800eb8c:	40020000 	.word	0x40020000

0800eb90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800eba4:	4619      	mov	r1, r3
 800eba6:	4610      	mov	r0, r2
 800eba8:	f7fe fb5f 	bl	800d26a <USBD_LL_SetupStage>
}
 800ebac:	bf00      	nop
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	460b      	mov	r3, r1
 800ebbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ebc6:	78fa      	ldrb	r2, [r7, #3]
 800ebc8:	6879      	ldr	r1, [r7, #4]
 800ebca:	4613      	mov	r3, r2
 800ebcc:	00db      	lsls	r3, r3, #3
 800ebce:	4413      	add	r3, r2
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	440b      	add	r3, r1
 800ebd4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	78fb      	ldrb	r3, [r7, #3]
 800ebdc:	4619      	mov	r1, r3
 800ebde:	f7fe fb99 	bl	800d314 <USBD_LL_DataOutStage>
}
 800ebe2:	bf00      	nop
 800ebe4:	3708      	adds	r7, #8
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b082      	sub	sp, #8
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ebfc:	78fa      	ldrb	r2, [r7, #3]
 800ebfe:	6879      	ldr	r1, [r7, #4]
 800ec00:	4613      	mov	r3, r2
 800ec02:	00db      	lsls	r3, r3, #3
 800ec04:	4413      	add	r3, r2
 800ec06:	009b      	lsls	r3, r3, #2
 800ec08:	440b      	add	r3, r1
 800ec0a:	334c      	adds	r3, #76	; 0x4c
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	78fb      	ldrb	r3, [r7, #3]
 800ec10:	4619      	mov	r1, r3
 800ec12:	f7fe fc32 	bl	800d47a <USBD_LL_DataInStage>
}
 800ec16:	bf00      	nop
 800ec18:	3708      	adds	r7, #8
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b082      	sub	sp, #8
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7fe fd66 	bl	800d6fe <USBD_LL_SOF>
}
 800ec32:	bf00      	nop
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b084      	sub	sp, #16
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ec42:	2301      	movs	r3, #1
 800ec44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d102      	bne.n	800ec54 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	73fb      	strb	r3, [r7, #15]
 800ec52:	e008      	b.n	800ec66 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	2b02      	cmp	r3, #2
 800ec5a:	d102      	bne.n	800ec62 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	73fb      	strb	r3, [r7, #15]
 800ec60:	e001      	b.n	800ec66 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ec62:	f7f5 f937 	bl	8003ed4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec6c:	7bfa      	ldrb	r2, [r7, #15]
 800ec6e:	4611      	mov	r1, r2
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fe fd06 	bl	800d682 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7fe fcae 	bl	800d5de <USBD_LL_Reset>
}
 800ec82:	bf00      	nop
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
	...

0800ec8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fe fd01 	bl	800d6a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	6812      	ldr	r2, [r2, #0]
 800ecae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ecb2:	f043 0301 	orr.w	r3, r3, #1
 800ecb6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6a1b      	ldr	r3, [r3, #32]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d005      	beq.n	800eccc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ecc0:	4b04      	ldr	r3, [pc, #16]	; (800ecd4 <HAL_PCD_SuspendCallback+0x48>)
 800ecc2:	691b      	ldr	r3, [r3, #16]
 800ecc4:	4a03      	ldr	r2, [pc, #12]	; (800ecd4 <HAL_PCD_SuspendCallback+0x48>)
 800ecc6:	f043 0306 	orr.w	r3, r3, #6
 800ecca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eccc:	bf00      	nop
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	e000ed00 	.word	0xe000ed00

0800ecd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fe fcf1 	bl	800d6ce <USBD_LL_Resume>
}
 800ecec:	bf00      	nop
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ed06:	78fa      	ldrb	r2, [r7, #3]
 800ed08:	4611      	mov	r1, r2
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fe fd49 	bl	800d7a2 <USBD_LL_IsoOUTIncomplete>
}
 800ed10:	bf00      	nop
 800ed12:	3708      	adds	r7, #8
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	460b      	mov	r3, r1
 800ed22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ed2a:	78fa      	ldrb	r2, [r7, #3]
 800ed2c:	4611      	mov	r1, r2
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fe fd05 	bl	800d73e <USBD_LL_IsoINIncomplete>
}
 800ed34:	bf00      	nop
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fe fd5b 	bl	800d806 <USBD_LL_DevConnected>
}
 800ed50:	bf00      	nop
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7fe fd58 	bl	800d81c <USBD_LL_DevDisconnected>
}
 800ed6c:	bf00      	nop
 800ed6e:	3708      	adds	r7, #8
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d13c      	bne.n	800edfe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ed84:	4a20      	ldr	r2, [pc, #128]	; (800ee08 <USBD_LL_Init+0x94>)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4a1e      	ldr	r2, [pc, #120]	; (800ee08 <USBD_LL_Init+0x94>)
 800ed90:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ed94:	4b1c      	ldr	r3, [pc, #112]	; (800ee08 <USBD_LL_Init+0x94>)
 800ed96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ed9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ed9c:	4b1a      	ldr	r3, [pc, #104]	; (800ee08 <USBD_LL_Init+0x94>)
 800ed9e:	2204      	movs	r2, #4
 800eda0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eda2:	4b19      	ldr	r3, [pc, #100]	; (800ee08 <USBD_LL_Init+0x94>)
 800eda4:	2202      	movs	r2, #2
 800eda6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eda8:	4b17      	ldr	r3, [pc, #92]	; (800ee08 <USBD_LL_Init+0x94>)
 800edaa:	2200      	movs	r2, #0
 800edac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800edae:	4b16      	ldr	r3, [pc, #88]	; (800ee08 <USBD_LL_Init+0x94>)
 800edb0:	2202      	movs	r2, #2
 800edb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800edb4:	4b14      	ldr	r3, [pc, #80]	; (800ee08 <USBD_LL_Init+0x94>)
 800edb6:	2201      	movs	r2, #1
 800edb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800edba:	4b13      	ldr	r3, [pc, #76]	; (800ee08 <USBD_LL_Init+0x94>)
 800edbc:	2200      	movs	r2, #0
 800edbe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800edc0:	4b11      	ldr	r3, [pc, #68]	; (800ee08 <USBD_LL_Init+0x94>)
 800edc2:	2200      	movs	r2, #0
 800edc4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800edc6:	4b10      	ldr	r3, [pc, #64]	; (800ee08 <USBD_LL_Init+0x94>)
 800edc8:	2200      	movs	r2, #0
 800edca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800edcc:	4b0e      	ldr	r3, [pc, #56]	; (800ee08 <USBD_LL_Init+0x94>)
 800edce:	2200      	movs	r2, #0
 800edd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800edd2:	480d      	ldr	r0, [pc, #52]	; (800ee08 <USBD_LL_Init+0x94>)
 800edd4:	f7f8 ff9f 	bl	8007d16 <HAL_PCD_Init>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d001      	beq.n	800ede2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800edde:	f7f5 f879 	bl	8003ed4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ede2:	2180      	movs	r1, #128	; 0x80
 800ede4:	4808      	ldr	r0, [pc, #32]	; (800ee08 <USBD_LL_Init+0x94>)
 800ede6:	f7fa f9f6 	bl	80091d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800edea:	2240      	movs	r2, #64	; 0x40
 800edec:	2100      	movs	r1, #0
 800edee:	4806      	ldr	r0, [pc, #24]	; (800ee08 <USBD_LL_Init+0x94>)
 800edf0:	f7fa f9aa 	bl	8009148 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800edf4:	2280      	movs	r2, #128	; 0x80
 800edf6:	2101      	movs	r1, #1
 800edf8:	4803      	ldr	r0, [pc, #12]	; (800ee08 <USBD_LL_Init+0x94>)
 800edfa:	f7fa f9a5 	bl	8009148 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800edfe:	2300      	movs	r3, #0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	20002adc 	.word	0x20002adc

0800ee0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee14:	2300      	movs	r3, #0
 800ee16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7f9 f894 	bl	8007f50 <HAL_PCD_Start>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee2c:	7bfb      	ldrb	r3, [r7, #15]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f000 f942 	bl	800f0b8 <USBD_Get_USB_Status>
 800ee34:	4603      	mov	r3, r0
 800ee36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b084      	sub	sp, #16
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	4608      	mov	r0, r1
 800ee4c:	4611      	mov	r1, r2
 800ee4e:	461a      	mov	r2, r3
 800ee50:	4603      	mov	r3, r0
 800ee52:	70fb      	strb	r3, [r7, #3]
 800ee54:	460b      	mov	r3, r1
 800ee56:	70bb      	strb	r3, [r7, #2]
 800ee58:	4613      	mov	r3, r2
 800ee5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee60:	2300      	movs	r3, #0
 800ee62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ee6a:	78bb      	ldrb	r3, [r7, #2]
 800ee6c:	883a      	ldrh	r2, [r7, #0]
 800ee6e:	78f9      	ldrb	r1, [r7, #3]
 800ee70:	f7f9 fd65 	bl	800893e <HAL_PCD_EP_Open>
 800ee74:	4603      	mov	r3, r0
 800ee76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee78:	7bfb      	ldrb	r3, [r7, #15]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f000 f91c 	bl	800f0b8 <USBD_Get_USB_Status>
 800ee80:	4603      	mov	r3, r0
 800ee82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b084      	sub	sp, #16
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
 800ee96:	460b      	mov	r3, r1
 800ee98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eea8:	78fa      	ldrb	r2, [r7, #3]
 800eeaa:	4611      	mov	r1, r2
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7f9 fdae 	bl	8008a0e <HAL_PCD_EP_Close>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f000 f8fd 	bl	800f0b8 <USBD_Get_USB_Status>
 800eebe:	4603      	mov	r3, r0
 800eec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eec2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	460b      	mov	r3, r1
 800eed6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eed8:	2300      	movs	r3, #0
 800eeda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eedc:	2300      	movs	r3, #0
 800eede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eee6:	78fa      	ldrb	r2, [r7, #3]
 800eee8:	4611      	mov	r1, r2
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7f9 fe86 	bl	8008bfc <HAL_PCD_EP_SetStall>
 800eef0:	4603      	mov	r3, r0
 800eef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eef4:	7bfb      	ldrb	r3, [r7, #15]
 800eef6:	4618      	mov	r0, r3
 800eef8:	f000 f8de 	bl	800f0b8 <USBD_Get_USB_Status>
 800eefc:	4603      	mov	r3, r0
 800eefe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3710      	adds	r7, #16
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}

0800ef0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b084      	sub	sp, #16
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
 800ef12:	460b      	mov	r3, r1
 800ef14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef16:	2300      	movs	r3, #0
 800ef18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ef24:	78fa      	ldrb	r2, [r7, #3]
 800ef26:	4611      	mov	r1, r2
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7f9 fecb 	bl	8008cc4 <HAL_PCD_EP_ClrStall>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef32:	7bfb      	ldrb	r3, [r7, #15]
 800ef34:	4618      	mov	r0, r3
 800ef36:	f000 f8bf 	bl	800f0b8 <USBD_Get_USB_Status>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3710      	adds	r7, #16
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b085      	sub	sp, #20
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	460b      	mov	r3, r1
 800ef52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ef5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ef5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	da0b      	bge.n	800ef7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ef64:	78fb      	ldrb	r3, [r7, #3]
 800ef66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef6a:	68f9      	ldr	r1, [r7, #12]
 800ef6c:	4613      	mov	r3, r2
 800ef6e:	00db      	lsls	r3, r3, #3
 800ef70:	4413      	add	r3, r2
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	440b      	add	r3, r1
 800ef76:	333e      	adds	r3, #62	; 0x3e
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	e00b      	b.n	800ef94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ef7c:	78fb      	ldrb	r3, [r7, #3]
 800ef7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef82:	68f9      	ldr	r1, [r7, #12]
 800ef84:	4613      	mov	r3, r2
 800ef86:	00db      	lsls	r3, r3, #3
 800ef88:	4413      	add	r3, r2
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	440b      	add	r3, r1
 800ef8e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ef92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3714      	adds	r7, #20
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	460b      	mov	r3, r1
 800efaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efac:	2300      	movs	r3, #0
 800efae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efb0:	2300      	movs	r3, #0
 800efb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800efba:	78fa      	ldrb	r2, [r7, #3]
 800efbc:	4611      	mov	r1, r2
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7f9 fc98 	bl	80088f4 <HAL_PCD_SetAddress>
 800efc4:	4603      	mov	r3, r0
 800efc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efc8:	7bfb      	ldrb	r3, [r7, #15]
 800efca:	4618      	mov	r0, r3
 800efcc:	f000 f874 	bl	800f0b8 <USBD_Get_USB_Status>
 800efd0:	4603      	mov	r3, r0
 800efd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3710      	adds	r7, #16
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800efde:	b580      	push	{r7, lr}
 800efe0:	b086      	sub	sp, #24
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	60f8      	str	r0, [r7, #12]
 800efe6:	607a      	str	r2, [r7, #4]
 800efe8:	603b      	str	r3, [r7, #0]
 800efea:	460b      	mov	r3, r1
 800efec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efee:	2300      	movs	r3, #0
 800eff0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eff2:	2300      	movs	r3, #0
 800eff4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800effc:	7af9      	ldrb	r1, [r7, #11]
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	f7f9 fdb1 	bl	8008b68 <HAL_PCD_EP_Transmit>
 800f006:	4603      	mov	r3, r0
 800f008:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f00a:	7dfb      	ldrb	r3, [r7, #23]
 800f00c:	4618      	mov	r0, r3
 800f00e:	f000 f853 	bl	800f0b8 <USBD_Get_USB_Status>
 800f012:	4603      	mov	r3, r0
 800f014:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f016:	7dbb      	ldrb	r3, [r7, #22]
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3718      	adds	r7, #24
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b086      	sub	sp, #24
 800f024:	af00      	add	r7, sp, #0
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	607a      	str	r2, [r7, #4]
 800f02a:	603b      	str	r3, [r7, #0]
 800f02c:	460b      	mov	r3, r1
 800f02e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f030:	2300      	movs	r3, #0
 800f032:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f034:	2300      	movs	r3, #0
 800f036:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f03e:	7af9      	ldrb	r1, [r7, #11]
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	f7f9 fd2d 	bl	8008aa2 <HAL_PCD_EP_Receive>
 800f048:	4603      	mov	r3, r0
 800f04a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f04c:	7dfb      	ldrb	r3, [r7, #23]
 800f04e:	4618      	mov	r0, r3
 800f050:	f000 f832 	bl	800f0b8 <USBD_Get_USB_Status>
 800f054:	4603      	mov	r3, r0
 800f056:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f058:	7dbb      	ldrb	r3, [r7, #22]
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3718      	adds	r7, #24
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}

0800f062 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f062:	b580      	push	{r7, lr}
 800f064:	b082      	sub	sp, #8
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
 800f06a:	460b      	mov	r3, r1
 800f06c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f074:	78fa      	ldrb	r2, [r7, #3]
 800f076:	4611      	mov	r1, r2
 800f078:	4618      	mov	r0, r3
 800f07a:	f7f9 fd5d 	bl	8008b38 <HAL_PCD_EP_GetRxCount>
 800f07e:	4603      	mov	r3, r0
}
 800f080:	4618      	mov	r0, r3
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f088:	b480      	push	{r7}
 800f08a:	b083      	sub	sp, #12
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f090:	4b03      	ldr	r3, [pc, #12]	; (800f0a0 <USBD_static_malloc+0x18>)
}
 800f092:	4618      	mov	r0, r3
 800f094:	370c      	adds	r7, #12
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr
 800f09e:	bf00      	nop
 800f0a0:	20002fe8 	.word	0x20002fe8

0800f0a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]

}
 800f0ac:	bf00      	nop
 800f0ae:	370c      	adds	r7, #12
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr

0800f0b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b085      	sub	sp, #20
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	4603      	mov	r3, r0
 800f0c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f0c6:	79fb      	ldrb	r3, [r7, #7]
 800f0c8:	2b03      	cmp	r3, #3
 800f0ca:	d817      	bhi.n	800f0fc <USBD_Get_USB_Status+0x44>
 800f0cc:	a201      	add	r2, pc, #4	; (adr r2, 800f0d4 <USBD_Get_USB_Status+0x1c>)
 800f0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d2:	bf00      	nop
 800f0d4:	0800f0e5 	.word	0x0800f0e5
 800f0d8:	0800f0eb 	.word	0x0800f0eb
 800f0dc:	0800f0f1 	.word	0x0800f0f1
 800f0e0:	0800f0f7 	.word	0x0800f0f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f0e8:	e00b      	b.n	800f102 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f0ea:	2303      	movs	r3, #3
 800f0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800f0ee:	e008      	b.n	800f102 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800f0f4:	e005      	b.n	800f102 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f0f6:	2303      	movs	r3, #3
 800f0f8:	73fb      	strb	r3, [r7, #15]
    break;
 800f0fa:	e002      	b.n	800f102 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f0fc:	2303      	movs	r3, #3
 800f0fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f100:	bf00      	nop
  }
  return usb_status;
 800f102:	7bfb      	ldrb	r3, [r7, #15]
}
 800f104:	4618      	mov	r0, r3
 800f106:	3714      	adds	r7, #20
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <__errno>:
 800f110:	4b01      	ldr	r3, [pc, #4]	; (800f118 <__errno+0x8>)
 800f112:	6818      	ldr	r0, [r3, #0]
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop
 800f118:	20000110 	.word	0x20000110

0800f11c <__libc_init_array>:
 800f11c:	b570      	push	{r4, r5, r6, lr}
 800f11e:	4d0d      	ldr	r5, [pc, #52]	; (800f154 <__libc_init_array+0x38>)
 800f120:	4c0d      	ldr	r4, [pc, #52]	; (800f158 <__libc_init_array+0x3c>)
 800f122:	1b64      	subs	r4, r4, r5
 800f124:	10a4      	asrs	r4, r4, #2
 800f126:	2600      	movs	r6, #0
 800f128:	42a6      	cmp	r6, r4
 800f12a:	d109      	bne.n	800f140 <__libc_init_array+0x24>
 800f12c:	4d0b      	ldr	r5, [pc, #44]	; (800f15c <__libc_init_array+0x40>)
 800f12e:	4c0c      	ldr	r4, [pc, #48]	; (800f160 <__libc_init_array+0x44>)
 800f130:	f005 f9a2 	bl	8014478 <_init>
 800f134:	1b64      	subs	r4, r4, r5
 800f136:	10a4      	asrs	r4, r4, #2
 800f138:	2600      	movs	r6, #0
 800f13a:	42a6      	cmp	r6, r4
 800f13c:	d105      	bne.n	800f14a <__libc_init_array+0x2e>
 800f13e:	bd70      	pop	{r4, r5, r6, pc}
 800f140:	f855 3b04 	ldr.w	r3, [r5], #4
 800f144:	4798      	blx	r3
 800f146:	3601      	adds	r6, #1
 800f148:	e7ee      	b.n	800f128 <__libc_init_array+0xc>
 800f14a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f14e:	4798      	blx	r3
 800f150:	3601      	adds	r6, #1
 800f152:	e7f2      	b.n	800f13a <__libc_init_array+0x1e>
 800f154:	08015604 	.word	0x08015604
 800f158:	08015604 	.word	0x08015604
 800f15c:	08015604 	.word	0x08015604
 800f160:	08015608 	.word	0x08015608

0800f164 <memcpy>:
 800f164:	440a      	add	r2, r1
 800f166:	4291      	cmp	r1, r2
 800f168:	f100 33ff 	add.w	r3, r0, #4294967295
 800f16c:	d100      	bne.n	800f170 <memcpy+0xc>
 800f16e:	4770      	bx	lr
 800f170:	b510      	push	{r4, lr}
 800f172:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f17a:	4291      	cmp	r1, r2
 800f17c:	d1f9      	bne.n	800f172 <memcpy+0xe>
 800f17e:	bd10      	pop	{r4, pc}

0800f180 <memmove>:
 800f180:	4288      	cmp	r0, r1
 800f182:	b510      	push	{r4, lr}
 800f184:	eb01 0402 	add.w	r4, r1, r2
 800f188:	d902      	bls.n	800f190 <memmove+0x10>
 800f18a:	4284      	cmp	r4, r0
 800f18c:	4623      	mov	r3, r4
 800f18e:	d807      	bhi.n	800f1a0 <memmove+0x20>
 800f190:	1e43      	subs	r3, r0, #1
 800f192:	42a1      	cmp	r1, r4
 800f194:	d008      	beq.n	800f1a8 <memmove+0x28>
 800f196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f19a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f19e:	e7f8      	b.n	800f192 <memmove+0x12>
 800f1a0:	4402      	add	r2, r0
 800f1a2:	4601      	mov	r1, r0
 800f1a4:	428a      	cmp	r2, r1
 800f1a6:	d100      	bne.n	800f1aa <memmove+0x2a>
 800f1a8:	bd10      	pop	{r4, pc}
 800f1aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1b2:	e7f7      	b.n	800f1a4 <memmove+0x24>

0800f1b4 <memset>:
 800f1b4:	4402      	add	r2, r0
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d100      	bne.n	800f1be <memset+0xa>
 800f1bc:	4770      	bx	lr
 800f1be:	f803 1b01 	strb.w	r1, [r3], #1
 800f1c2:	e7f9      	b.n	800f1b8 <memset+0x4>

0800f1c4 <__cvt>:
 800f1c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1c8:	ec55 4b10 	vmov	r4, r5, d0
 800f1cc:	2d00      	cmp	r5, #0
 800f1ce:	460e      	mov	r6, r1
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	462b      	mov	r3, r5
 800f1d4:	bfbb      	ittet	lt
 800f1d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f1da:	461d      	movlt	r5, r3
 800f1dc:	2300      	movge	r3, #0
 800f1de:	232d      	movlt	r3, #45	; 0x2d
 800f1e0:	700b      	strb	r3, [r1, #0]
 800f1e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f1e8:	4691      	mov	r9, r2
 800f1ea:	f023 0820 	bic.w	r8, r3, #32
 800f1ee:	bfbc      	itt	lt
 800f1f0:	4622      	movlt	r2, r4
 800f1f2:	4614      	movlt	r4, r2
 800f1f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f1f8:	d005      	beq.n	800f206 <__cvt+0x42>
 800f1fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f1fe:	d100      	bne.n	800f202 <__cvt+0x3e>
 800f200:	3601      	adds	r6, #1
 800f202:	2102      	movs	r1, #2
 800f204:	e000      	b.n	800f208 <__cvt+0x44>
 800f206:	2103      	movs	r1, #3
 800f208:	ab03      	add	r3, sp, #12
 800f20a:	9301      	str	r3, [sp, #4]
 800f20c:	ab02      	add	r3, sp, #8
 800f20e:	9300      	str	r3, [sp, #0]
 800f210:	ec45 4b10 	vmov	d0, r4, r5
 800f214:	4653      	mov	r3, sl
 800f216:	4632      	mov	r2, r6
 800f218:	f001 ffda 	bl	80111d0 <_dtoa_r>
 800f21c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f220:	4607      	mov	r7, r0
 800f222:	d102      	bne.n	800f22a <__cvt+0x66>
 800f224:	f019 0f01 	tst.w	r9, #1
 800f228:	d022      	beq.n	800f270 <__cvt+0xac>
 800f22a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f22e:	eb07 0906 	add.w	r9, r7, r6
 800f232:	d110      	bne.n	800f256 <__cvt+0x92>
 800f234:	783b      	ldrb	r3, [r7, #0]
 800f236:	2b30      	cmp	r3, #48	; 0x30
 800f238:	d10a      	bne.n	800f250 <__cvt+0x8c>
 800f23a:	2200      	movs	r2, #0
 800f23c:	2300      	movs	r3, #0
 800f23e:	4620      	mov	r0, r4
 800f240:	4629      	mov	r1, r5
 800f242:	f7f1 fc61 	bl	8000b08 <__aeabi_dcmpeq>
 800f246:	b918      	cbnz	r0, 800f250 <__cvt+0x8c>
 800f248:	f1c6 0601 	rsb	r6, r6, #1
 800f24c:	f8ca 6000 	str.w	r6, [sl]
 800f250:	f8da 3000 	ldr.w	r3, [sl]
 800f254:	4499      	add	r9, r3
 800f256:	2200      	movs	r2, #0
 800f258:	2300      	movs	r3, #0
 800f25a:	4620      	mov	r0, r4
 800f25c:	4629      	mov	r1, r5
 800f25e:	f7f1 fc53 	bl	8000b08 <__aeabi_dcmpeq>
 800f262:	b108      	cbz	r0, 800f268 <__cvt+0xa4>
 800f264:	f8cd 900c 	str.w	r9, [sp, #12]
 800f268:	2230      	movs	r2, #48	; 0x30
 800f26a:	9b03      	ldr	r3, [sp, #12]
 800f26c:	454b      	cmp	r3, r9
 800f26e:	d307      	bcc.n	800f280 <__cvt+0xbc>
 800f270:	9b03      	ldr	r3, [sp, #12]
 800f272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f274:	1bdb      	subs	r3, r3, r7
 800f276:	4638      	mov	r0, r7
 800f278:	6013      	str	r3, [r2, #0]
 800f27a:	b004      	add	sp, #16
 800f27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f280:	1c59      	adds	r1, r3, #1
 800f282:	9103      	str	r1, [sp, #12]
 800f284:	701a      	strb	r2, [r3, #0]
 800f286:	e7f0      	b.n	800f26a <__cvt+0xa6>

0800f288 <__exponent>:
 800f288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f28a:	4603      	mov	r3, r0
 800f28c:	2900      	cmp	r1, #0
 800f28e:	bfb8      	it	lt
 800f290:	4249      	neglt	r1, r1
 800f292:	f803 2b02 	strb.w	r2, [r3], #2
 800f296:	bfb4      	ite	lt
 800f298:	222d      	movlt	r2, #45	; 0x2d
 800f29a:	222b      	movge	r2, #43	; 0x2b
 800f29c:	2909      	cmp	r1, #9
 800f29e:	7042      	strb	r2, [r0, #1]
 800f2a0:	dd2a      	ble.n	800f2f8 <__exponent+0x70>
 800f2a2:	f10d 0407 	add.w	r4, sp, #7
 800f2a6:	46a4      	mov	ip, r4
 800f2a8:	270a      	movs	r7, #10
 800f2aa:	46a6      	mov	lr, r4
 800f2ac:	460a      	mov	r2, r1
 800f2ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800f2b2:	fb07 1516 	mls	r5, r7, r6, r1
 800f2b6:	3530      	adds	r5, #48	; 0x30
 800f2b8:	2a63      	cmp	r2, #99	; 0x63
 800f2ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800f2be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f2c2:	4631      	mov	r1, r6
 800f2c4:	dcf1      	bgt.n	800f2aa <__exponent+0x22>
 800f2c6:	3130      	adds	r1, #48	; 0x30
 800f2c8:	f1ae 0502 	sub.w	r5, lr, #2
 800f2cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f2d0:	1c44      	adds	r4, r0, #1
 800f2d2:	4629      	mov	r1, r5
 800f2d4:	4561      	cmp	r1, ip
 800f2d6:	d30a      	bcc.n	800f2ee <__exponent+0x66>
 800f2d8:	f10d 0209 	add.w	r2, sp, #9
 800f2dc:	eba2 020e 	sub.w	r2, r2, lr
 800f2e0:	4565      	cmp	r5, ip
 800f2e2:	bf88      	it	hi
 800f2e4:	2200      	movhi	r2, #0
 800f2e6:	4413      	add	r3, r2
 800f2e8:	1a18      	subs	r0, r3, r0
 800f2ea:	b003      	add	sp, #12
 800f2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f2f6:	e7ed      	b.n	800f2d4 <__exponent+0x4c>
 800f2f8:	2330      	movs	r3, #48	; 0x30
 800f2fa:	3130      	adds	r1, #48	; 0x30
 800f2fc:	7083      	strb	r3, [r0, #2]
 800f2fe:	70c1      	strb	r1, [r0, #3]
 800f300:	1d03      	adds	r3, r0, #4
 800f302:	e7f1      	b.n	800f2e8 <__exponent+0x60>

0800f304 <_printf_float>:
 800f304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f308:	ed2d 8b02 	vpush	{d8}
 800f30c:	b08d      	sub	sp, #52	; 0x34
 800f30e:	460c      	mov	r4, r1
 800f310:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f314:	4616      	mov	r6, r2
 800f316:	461f      	mov	r7, r3
 800f318:	4605      	mov	r5, r0
 800f31a:	f003 fa6d 	bl	80127f8 <_localeconv_r>
 800f31e:	f8d0 a000 	ldr.w	sl, [r0]
 800f322:	4650      	mov	r0, sl
 800f324:	f7f0 ff6e 	bl	8000204 <strlen>
 800f328:	2300      	movs	r3, #0
 800f32a:	930a      	str	r3, [sp, #40]	; 0x28
 800f32c:	6823      	ldr	r3, [r4, #0]
 800f32e:	9305      	str	r3, [sp, #20]
 800f330:	f8d8 3000 	ldr.w	r3, [r8]
 800f334:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f338:	3307      	adds	r3, #7
 800f33a:	f023 0307 	bic.w	r3, r3, #7
 800f33e:	f103 0208 	add.w	r2, r3, #8
 800f342:	f8c8 2000 	str.w	r2, [r8]
 800f346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f34e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f352:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f356:	9307      	str	r3, [sp, #28]
 800f358:	f8cd 8018 	str.w	r8, [sp, #24]
 800f35c:	ee08 0a10 	vmov	s16, r0
 800f360:	4b9f      	ldr	r3, [pc, #636]	; (800f5e0 <_printf_float+0x2dc>)
 800f362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f366:	f04f 32ff 	mov.w	r2, #4294967295
 800f36a:	f7f1 fbff 	bl	8000b6c <__aeabi_dcmpun>
 800f36e:	bb88      	cbnz	r0, 800f3d4 <_printf_float+0xd0>
 800f370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f374:	4b9a      	ldr	r3, [pc, #616]	; (800f5e0 <_printf_float+0x2dc>)
 800f376:	f04f 32ff 	mov.w	r2, #4294967295
 800f37a:	f7f1 fbd9 	bl	8000b30 <__aeabi_dcmple>
 800f37e:	bb48      	cbnz	r0, 800f3d4 <_printf_float+0xd0>
 800f380:	2200      	movs	r2, #0
 800f382:	2300      	movs	r3, #0
 800f384:	4640      	mov	r0, r8
 800f386:	4649      	mov	r1, r9
 800f388:	f7f1 fbc8 	bl	8000b1c <__aeabi_dcmplt>
 800f38c:	b110      	cbz	r0, 800f394 <_printf_float+0x90>
 800f38e:	232d      	movs	r3, #45	; 0x2d
 800f390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f394:	4b93      	ldr	r3, [pc, #588]	; (800f5e4 <_printf_float+0x2e0>)
 800f396:	4894      	ldr	r0, [pc, #592]	; (800f5e8 <_printf_float+0x2e4>)
 800f398:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f39c:	bf94      	ite	ls
 800f39e:	4698      	movls	r8, r3
 800f3a0:	4680      	movhi	r8, r0
 800f3a2:	2303      	movs	r3, #3
 800f3a4:	6123      	str	r3, [r4, #16]
 800f3a6:	9b05      	ldr	r3, [sp, #20]
 800f3a8:	f023 0204 	bic.w	r2, r3, #4
 800f3ac:	6022      	str	r2, [r4, #0]
 800f3ae:	f04f 0900 	mov.w	r9, #0
 800f3b2:	9700      	str	r7, [sp, #0]
 800f3b4:	4633      	mov	r3, r6
 800f3b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800f3b8:	4621      	mov	r1, r4
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	f000 f9d8 	bl	800f770 <_printf_common>
 800f3c0:	3001      	adds	r0, #1
 800f3c2:	f040 8090 	bne.w	800f4e6 <_printf_float+0x1e2>
 800f3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ca:	b00d      	add	sp, #52	; 0x34
 800f3cc:	ecbd 8b02 	vpop	{d8}
 800f3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d4:	4642      	mov	r2, r8
 800f3d6:	464b      	mov	r3, r9
 800f3d8:	4640      	mov	r0, r8
 800f3da:	4649      	mov	r1, r9
 800f3dc:	f7f1 fbc6 	bl	8000b6c <__aeabi_dcmpun>
 800f3e0:	b140      	cbz	r0, 800f3f4 <_printf_float+0xf0>
 800f3e2:	464b      	mov	r3, r9
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	bfbc      	itt	lt
 800f3e8:	232d      	movlt	r3, #45	; 0x2d
 800f3ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f3ee:	487f      	ldr	r0, [pc, #508]	; (800f5ec <_printf_float+0x2e8>)
 800f3f0:	4b7f      	ldr	r3, [pc, #508]	; (800f5f0 <_printf_float+0x2ec>)
 800f3f2:	e7d1      	b.n	800f398 <_printf_float+0x94>
 800f3f4:	6863      	ldr	r3, [r4, #4]
 800f3f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f3fa:	9206      	str	r2, [sp, #24]
 800f3fc:	1c5a      	adds	r2, r3, #1
 800f3fe:	d13f      	bne.n	800f480 <_printf_float+0x17c>
 800f400:	2306      	movs	r3, #6
 800f402:	6063      	str	r3, [r4, #4]
 800f404:	9b05      	ldr	r3, [sp, #20]
 800f406:	6861      	ldr	r1, [r4, #4]
 800f408:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f40c:	2300      	movs	r3, #0
 800f40e:	9303      	str	r3, [sp, #12]
 800f410:	ab0a      	add	r3, sp, #40	; 0x28
 800f412:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f416:	ab09      	add	r3, sp, #36	; 0x24
 800f418:	ec49 8b10 	vmov	d0, r8, r9
 800f41c:	9300      	str	r3, [sp, #0]
 800f41e:	6022      	str	r2, [r4, #0]
 800f420:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f424:	4628      	mov	r0, r5
 800f426:	f7ff fecd 	bl	800f1c4 <__cvt>
 800f42a:	9b06      	ldr	r3, [sp, #24]
 800f42c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f42e:	2b47      	cmp	r3, #71	; 0x47
 800f430:	4680      	mov	r8, r0
 800f432:	d108      	bne.n	800f446 <_printf_float+0x142>
 800f434:	1cc8      	adds	r0, r1, #3
 800f436:	db02      	blt.n	800f43e <_printf_float+0x13a>
 800f438:	6863      	ldr	r3, [r4, #4]
 800f43a:	4299      	cmp	r1, r3
 800f43c:	dd41      	ble.n	800f4c2 <_printf_float+0x1be>
 800f43e:	f1ab 0b02 	sub.w	fp, fp, #2
 800f442:	fa5f fb8b 	uxtb.w	fp, fp
 800f446:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f44a:	d820      	bhi.n	800f48e <_printf_float+0x18a>
 800f44c:	3901      	subs	r1, #1
 800f44e:	465a      	mov	r2, fp
 800f450:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f454:	9109      	str	r1, [sp, #36]	; 0x24
 800f456:	f7ff ff17 	bl	800f288 <__exponent>
 800f45a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f45c:	1813      	adds	r3, r2, r0
 800f45e:	2a01      	cmp	r2, #1
 800f460:	4681      	mov	r9, r0
 800f462:	6123      	str	r3, [r4, #16]
 800f464:	dc02      	bgt.n	800f46c <_printf_float+0x168>
 800f466:	6822      	ldr	r2, [r4, #0]
 800f468:	07d2      	lsls	r2, r2, #31
 800f46a:	d501      	bpl.n	800f470 <_printf_float+0x16c>
 800f46c:	3301      	adds	r3, #1
 800f46e:	6123      	str	r3, [r4, #16]
 800f470:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f474:	2b00      	cmp	r3, #0
 800f476:	d09c      	beq.n	800f3b2 <_printf_float+0xae>
 800f478:	232d      	movs	r3, #45	; 0x2d
 800f47a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f47e:	e798      	b.n	800f3b2 <_printf_float+0xae>
 800f480:	9a06      	ldr	r2, [sp, #24]
 800f482:	2a47      	cmp	r2, #71	; 0x47
 800f484:	d1be      	bne.n	800f404 <_printf_float+0x100>
 800f486:	2b00      	cmp	r3, #0
 800f488:	d1bc      	bne.n	800f404 <_printf_float+0x100>
 800f48a:	2301      	movs	r3, #1
 800f48c:	e7b9      	b.n	800f402 <_printf_float+0xfe>
 800f48e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f492:	d118      	bne.n	800f4c6 <_printf_float+0x1c2>
 800f494:	2900      	cmp	r1, #0
 800f496:	6863      	ldr	r3, [r4, #4]
 800f498:	dd0b      	ble.n	800f4b2 <_printf_float+0x1ae>
 800f49a:	6121      	str	r1, [r4, #16]
 800f49c:	b913      	cbnz	r3, 800f4a4 <_printf_float+0x1a0>
 800f49e:	6822      	ldr	r2, [r4, #0]
 800f4a0:	07d0      	lsls	r0, r2, #31
 800f4a2:	d502      	bpl.n	800f4aa <_printf_float+0x1a6>
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	440b      	add	r3, r1
 800f4a8:	6123      	str	r3, [r4, #16]
 800f4aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800f4ac:	f04f 0900 	mov.w	r9, #0
 800f4b0:	e7de      	b.n	800f470 <_printf_float+0x16c>
 800f4b2:	b913      	cbnz	r3, 800f4ba <_printf_float+0x1b6>
 800f4b4:	6822      	ldr	r2, [r4, #0]
 800f4b6:	07d2      	lsls	r2, r2, #31
 800f4b8:	d501      	bpl.n	800f4be <_printf_float+0x1ba>
 800f4ba:	3302      	adds	r3, #2
 800f4bc:	e7f4      	b.n	800f4a8 <_printf_float+0x1a4>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	e7f2      	b.n	800f4a8 <_printf_float+0x1a4>
 800f4c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4c8:	4299      	cmp	r1, r3
 800f4ca:	db05      	blt.n	800f4d8 <_printf_float+0x1d4>
 800f4cc:	6823      	ldr	r3, [r4, #0]
 800f4ce:	6121      	str	r1, [r4, #16]
 800f4d0:	07d8      	lsls	r0, r3, #31
 800f4d2:	d5ea      	bpl.n	800f4aa <_printf_float+0x1a6>
 800f4d4:	1c4b      	adds	r3, r1, #1
 800f4d6:	e7e7      	b.n	800f4a8 <_printf_float+0x1a4>
 800f4d8:	2900      	cmp	r1, #0
 800f4da:	bfd4      	ite	le
 800f4dc:	f1c1 0202 	rsble	r2, r1, #2
 800f4e0:	2201      	movgt	r2, #1
 800f4e2:	4413      	add	r3, r2
 800f4e4:	e7e0      	b.n	800f4a8 <_printf_float+0x1a4>
 800f4e6:	6823      	ldr	r3, [r4, #0]
 800f4e8:	055a      	lsls	r2, r3, #21
 800f4ea:	d407      	bmi.n	800f4fc <_printf_float+0x1f8>
 800f4ec:	6923      	ldr	r3, [r4, #16]
 800f4ee:	4642      	mov	r2, r8
 800f4f0:	4631      	mov	r1, r6
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	47b8      	blx	r7
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	d12c      	bne.n	800f554 <_printf_float+0x250>
 800f4fa:	e764      	b.n	800f3c6 <_printf_float+0xc2>
 800f4fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f500:	f240 80e0 	bls.w	800f6c4 <_printf_float+0x3c0>
 800f504:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f508:	2200      	movs	r2, #0
 800f50a:	2300      	movs	r3, #0
 800f50c:	f7f1 fafc 	bl	8000b08 <__aeabi_dcmpeq>
 800f510:	2800      	cmp	r0, #0
 800f512:	d034      	beq.n	800f57e <_printf_float+0x27a>
 800f514:	4a37      	ldr	r2, [pc, #220]	; (800f5f4 <_printf_float+0x2f0>)
 800f516:	2301      	movs	r3, #1
 800f518:	4631      	mov	r1, r6
 800f51a:	4628      	mov	r0, r5
 800f51c:	47b8      	blx	r7
 800f51e:	3001      	adds	r0, #1
 800f520:	f43f af51 	beq.w	800f3c6 <_printf_float+0xc2>
 800f524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f528:	429a      	cmp	r2, r3
 800f52a:	db02      	blt.n	800f532 <_printf_float+0x22e>
 800f52c:	6823      	ldr	r3, [r4, #0]
 800f52e:	07d8      	lsls	r0, r3, #31
 800f530:	d510      	bpl.n	800f554 <_printf_float+0x250>
 800f532:	ee18 3a10 	vmov	r3, s16
 800f536:	4652      	mov	r2, sl
 800f538:	4631      	mov	r1, r6
 800f53a:	4628      	mov	r0, r5
 800f53c:	47b8      	blx	r7
 800f53e:	3001      	adds	r0, #1
 800f540:	f43f af41 	beq.w	800f3c6 <_printf_float+0xc2>
 800f544:	f04f 0800 	mov.w	r8, #0
 800f548:	f104 091a 	add.w	r9, r4, #26
 800f54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f54e:	3b01      	subs	r3, #1
 800f550:	4543      	cmp	r3, r8
 800f552:	dc09      	bgt.n	800f568 <_printf_float+0x264>
 800f554:	6823      	ldr	r3, [r4, #0]
 800f556:	079b      	lsls	r3, r3, #30
 800f558:	f100 8105 	bmi.w	800f766 <_printf_float+0x462>
 800f55c:	68e0      	ldr	r0, [r4, #12]
 800f55e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f560:	4298      	cmp	r0, r3
 800f562:	bfb8      	it	lt
 800f564:	4618      	movlt	r0, r3
 800f566:	e730      	b.n	800f3ca <_printf_float+0xc6>
 800f568:	2301      	movs	r3, #1
 800f56a:	464a      	mov	r2, r9
 800f56c:	4631      	mov	r1, r6
 800f56e:	4628      	mov	r0, r5
 800f570:	47b8      	blx	r7
 800f572:	3001      	adds	r0, #1
 800f574:	f43f af27 	beq.w	800f3c6 <_printf_float+0xc2>
 800f578:	f108 0801 	add.w	r8, r8, #1
 800f57c:	e7e6      	b.n	800f54c <_printf_float+0x248>
 800f57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f580:	2b00      	cmp	r3, #0
 800f582:	dc39      	bgt.n	800f5f8 <_printf_float+0x2f4>
 800f584:	4a1b      	ldr	r2, [pc, #108]	; (800f5f4 <_printf_float+0x2f0>)
 800f586:	2301      	movs	r3, #1
 800f588:	4631      	mov	r1, r6
 800f58a:	4628      	mov	r0, r5
 800f58c:	47b8      	blx	r7
 800f58e:	3001      	adds	r0, #1
 800f590:	f43f af19 	beq.w	800f3c6 <_printf_float+0xc2>
 800f594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f598:	4313      	orrs	r3, r2
 800f59a:	d102      	bne.n	800f5a2 <_printf_float+0x29e>
 800f59c:	6823      	ldr	r3, [r4, #0]
 800f59e:	07d9      	lsls	r1, r3, #31
 800f5a0:	d5d8      	bpl.n	800f554 <_printf_float+0x250>
 800f5a2:	ee18 3a10 	vmov	r3, s16
 800f5a6:	4652      	mov	r2, sl
 800f5a8:	4631      	mov	r1, r6
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	47b8      	blx	r7
 800f5ae:	3001      	adds	r0, #1
 800f5b0:	f43f af09 	beq.w	800f3c6 <_printf_float+0xc2>
 800f5b4:	f04f 0900 	mov.w	r9, #0
 800f5b8:	f104 0a1a 	add.w	sl, r4, #26
 800f5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5be:	425b      	negs	r3, r3
 800f5c0:	454b      	cmp	r3, r9
 800f5c2:	dc01      	bgt.n	800f5c8 <_printf_float+0x2c4>
 800f5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5c6:	e792      	b.n	800f4ee <_printf_float+0x1ea>
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	4652      	mov	r2, sl
 800f5cc:	4631      	mov	r1, r6
 800f5ce:	4628      	mov	r0, r5
 800f5d0:	47b8      	blx	r7
 800f5d2:	3001      	adds	r0, #1
 800f5d4:	f43f aef7 	beq.w	800f3c6 <_printf_float+0xc2>
 800f5d8:	f109 0901 	add.w	r9, r9, #1
 800f5dc:	e7ee      	b.n	800f5bc <_printf_float+0x2b8>
 800f5de:	bf00      	nop
 800f5e0:	7fefffff 	.word	0x7fefffff
 800f5e4:	08015244 	.word	0x08015244
 800f5e8:	08015248 	.word	0x08015248
 800f5ec:	08015250 	.word	0x08015250
 800f5f0:	0801524c 	.word	0x0801524c
 800f5f4:	080155a9 	.word	0x080155a9
 800f5f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	bfa8      	it	ge
 800f600:	461a      	movge	r2, r3
 800f602:	2a00      	cmp	r2, #0
 800f604:	4691      	mov	r9, r2
 800f606:	dc37      	bgt.n	800f678 <_printf_float+0x374>
 800f608:	f04f 0b00 	mov.w	fp, #0
 800f60c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f610:	f104 021a 	add.w	r2, r4, #26
 800f614:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f616:	9305      	str	r3, [sp, #20]
 800f618:	eba3 0309 	sub.w	r3, r3, r9
 800f61c:	455b      	cmp	r3, fp
 800f61e:	dc33      	bgt.n	800f688 <_printf_float+0x384>
 800f620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f624:	429a      	cmp	r2, r3
 800f626:	db3b      	blt.n	800f6a0 <_printf_float+0x39c>
 800f628:	6823      	ldr	r3, [r4, #0]
 800f62a:	07da      	lsls	r2, r3, #31
 800f62c:	d438      	bmi.n	800f6a0 <_printf_float+0x39c>
 800f62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f630:	9a05      	ldr	r2, [sp, #20]
 800f632:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f634:	1a9a      	subs	r2, r3, r2
 800f636:	eba3 0901 	sub.w	r9, r3, r1
 800f63a:	4591      	cmp	r9, r2
 800f63c:	bfa8      	it	ge
 800f63e:	4691      	movge	r9, r2
 800f640:	f1b9 0f00 	cmp.w	r9, #0
 800f644:	dc35      	bgt.n	800f6b2 <_printf_float+0x3ae>
 800f646:	f04f 0800 	mov.w	r8, #0
 800f64a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f64e:	f104 0a1a 	add.w	sl, r4, #26
 800f652:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f656:	1a9b      	subs	r3, r3, r2
 800f658:	eba3 0309 	sub.w	r3, r3, r9
 800f65c:	4543      	cmp	r3, r8
 800f65e:	f77f af79 	ble.w	800f554 <_printf_float+0x250>
 800f662:	2301      	movs	r3, #1
 800f664:	4652      	mov	r2, sl
 800f666:	4631      	mov	r1, r6
 800f668:	4628      	mov	r0, r5
 800f66a:	47b8      	blx	r7
 800f66c:	3001      	adds	r0, #1
 800f66e:	f43f aeaa 	beq.w	800f3c6 <_printf_float+0xc2>
 800f672:	f108 0801 	add.w	r8, r8, #1
 800f676:	e7ec      	b.n	800f652 <_printf_float+0x34e>
 800f678:	4613      	mov	r3, r2
 800f67a:	4631      	mov	r1, r6
 800f67c:	4642      	mov	r2, r8
 800f67e:	4628      	mov	r0, r5
 800f680:	47b8      	blx	r7
 800f682:	3001      	adds	r0, #1
 800f684:	d1c0      	bne.n	800f608 <_printf_float+0x304>
 800f686:	e69e      	b.n	800f3c6 <_printf_float+0xc2>
 800f688:	2301      	movs	r3, #1
 800f68a:	4631      	mov	r1, r6
 800f68c:	4628      	mov	r0, r5
 800f68e:	9205      	str	r2, [sp, #20]
 800f690:	47b8      	blx	r7
 800f692:	3001      	adds	r0, #1
 800f694:	f43f ae97 	beq.w	800f3c6 <_printf_float+0xc2>
 800f698:	9a05      	ldr	r2, [sp, #20]
 800f69a:	f10b 0b01 	add.w	fp, fp, #1
 800f69e:	e7b9      	b.n	800f614 <_printf_float+0x310>
 800f6a0:	ee18 3a10 	vmov	r3, s16
 800f6a4:	4652      	mov	r2, sl
 800f6a6:	4631      	mov	r1, r6
 800f6a8:	4628      	mov	r0, r5
 800f6aa:	47b8      	blx	r7
 800f6ac:	3001      	adds	r0, #1
 800f6ae:	d1be      	bne.n	800f62e <_printf_float+0x32a>
 800f6b0:	e689      	b.n	800f3c6 <_printf_float+0xc2>
 800f6b2:	9a05      	ldr	r2, [sp, #20]
 800f6b4:	464b      	mov	r3, r9
 800f6b6:	4442      	add	r2, r8
 800f6b8:	4631      	mov	r1, r6
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	47b8      	blx	r7
 800f6be:	3001      	adds	r0, #1
 800f6c0:	d1c1      	bne.n	800f646 <_printf_float+0x342>
 800f6c2:	e680      	b.n	800f3c6 <_printf_float+0xc2>
 800f6c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6c6:	2a01      	cmp	r2, #1
 800f6c8:	dc01      	bgt.n	800f6ce <_printf_float+0x3ca>
 800f6ca:	07db      	lsls	r3, r3, #31
 800f6cc:	d538      	bpl.n	800f740 <_printf_float+0x43c>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	4642      	mov	r2, r8
 800f6d2:	4631      	mov	r1, r6
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	47b8      	blx	r7
 800f6d8:	3001      	adds	r0, #1
 800f6da:	f43f ae74 	beq.w	800f3c6 <_printf_float+0xc2>
 800f6de:	ee18 3a10 	vmov	r3, s16
 800f6e2:	4652      	mov	r2, sl
 800f6e4:	4631      	mov	r1, r6
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	47b8      	blx	r7
 800f6ea:	3001      	adds	r0, #1
 800f6ec:	f43f ae6b 	beq.w	800f3c6 <_printf_float+0xc2>
 800f6f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	f7f1 fa06 	bl	8000b08 <__aeabi_dcmpeq>
 800f6fc:	b9d8      	cbnz	r0, 800f736 <_printf_float+0x432>
 800f6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f700:	f108 0201 	add.w	r2, r8, #1
 800f704:	3b01      	subs	r3, #1
 800f706:	4631      	mov	r1, r6
 800f708:	4628      	mov	r0, r5
 800f70a:	47b8      	blx	r7
 800f70c:	3001      	adds	r0, #1
 800f70e:	d10e      	bne.n	800f72e <_printf_float+0x42a>
 800f710:	e659      	b.n	800f3c6 <_printf_float+0xc2>
 800f712:	2301      	movs	r3, #1
 800f714:	4652      	mov	r2, sl
 800f716:	4631      	mov	r1, r6
 800f718:	4628      	mov	r0, r5
 800f71a:	47b8      	blx	r7
 800f71c:	3001      	adds	r0, #1
 800f71e:	f43f ae52 	beq.w	800f3c6 <_printf_float+0xc2>
 800f722:	f108 0801 	add.w	r8, r8, #1
 800f726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f728:	3b01      	subs	r3, #1
 800f72a:	4543      	cmp	r3, r8
 800f72c:	dcf1      	bgt.n	800f712 <_printf_float+0x40e>
 800f72e:	464b      	mov	r3, r9
 800f730:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f734:	e6dc      	b.n	800f4f0 <_printf_float+0x1ec>
 800f736:	f04f 0800 	mov.w	r8, #0
 800f73a:	f104 0a1a 	add.w	sl, r4, #26
 800f73e:	e7f2      	b.n	800f726 <_printf_float+0x422>
 800f740:	2301      	movs	r3, #1
 800f742:	4642      	mov	r2, r8
 800f744:	e7df      	b.n	800f706 <_printf_float+0x402>
 800f746:	2301      	movs	r3, #1
 800f748:	464a      	mov	r2, r9
 800f74a:	4631      	mov	r1, r6
 800f74c:	4628      	mov	r0, r5
 800f74e:	47b8      	blx	r7
 800f750:	3001      	adds	r0, #1
 800f752:	f43f ae38 	beq.w	800f3c6 <_printf_float+0xc2>
 800f756:	f108 0801 	add.w	r8, r8, #1
 800f75a:	68e3      	ldr	r3, [r4, #12]
 800f75c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f75e:	1a5b      	subs	r3, r3, r1
 800f760:	4543      	cmp	r3, r8
 800f762:	dcf0      	bgt.n	800f746 <_printf_float+0x442>
 800f764:	e6fa      	b.n	800f55c <_printf_float+0x258>
 800f766:	f04f 0800 	mov.w	r8, #0
 800f76a:	f104 0919 	add.w	r9, r4, #25
 800f76e:	e7f4      	b.n	800f75a <_printf_float+0x456>

0800f770 <_printf_common>:
 800f770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f774:	4616      	mov	r6, r2
 800f776:	4699      	mov	r9, r3
 800f778:	688a      	ldr	r2, [r1, #8]
 800f77a:	690b      	ldr	r3, [r1, #16]
 800f77c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f780:	4293      	cmp	r3, r2
 800f782:	bfb8      	it	lt
 800f784:	4613      	movlt	r3, r2
 800f786:	6033      	str	r3, [r6, #0]
 800f788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f78c:	4607      	mov	r7, r0
 800f78e:	460c      	mov	r4, r1
 800f790:	b10a      	cbz	r2, 800f796 <_printf_common+0x26>
 800f792:	3301      	adds	r3, #1
 800f794:	6033      	str	r3, [r6, #0]
 800f796:	6823      	ldr	r3, [r4, #0]
 800f798:	0699      	lsls	r1, r3, #26
 800f79a:	bf42      	ittt	mi
 800f79c:	6833      	ldrmi	r3, [r6, #0]
 800f79e:	3302      	addmi	r3, #2
 800f7a0:	6033      	strmi	r3, [r6, #0]
 800f7a2:	6825      	ldr	r5, [r4, #0]
 800f7a4:	f015 0506 	ands.w	r5, r5, #6
 800f7a8:	d106      	bne.n	800f7b8 <_printf_common+0x48>
 800f7aa:	f104 0a19 	add.w	sl, r4, #25
 800f7ae:	68e3      	ldr	r3, [r4, #12]
 800f7b0:	6832      	ldr	r2, [r6, #0]
 800f7b2:	1a9b      	subs	r3, r3, r2
 800f7b4:	42ab      	cmp	r3, r5
 800f7b6:	dc26      	bgt.n	800f806 <_printf_common+0x96>
 800f7b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f7bc:	1e13      	subs	r3, r2, #0
 800f7be:	6822      	ldr	r2, [r4, #0]
 800f7c0:	bf18      	it	ne
 800f7c2:	2301      	movne	r3, #1
 800f7c4:	0692      	lsls	r2, r2, #26
 800f7c6:	d42b      	bmi.n	800f820 <_printf_common+0xb0>
 800f7c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7cc:	4649      	mov	r1, r9
 800f7ce:	4638      	mov	r0, r7
 800f7d0:	47c0      	blx	r8
 800f7d2:	3001      	adds	r0, #1
 800f7d4:	d01e      	beq.n	800f814 <_printf_common+0xa4>
 800f7d6:	6823      	ldr	r3, [r4, #0]
 800f7d8:	68e5      	ldr	r5, [r4, #12]
 800f7da:	6832      	ldr	r2, [r6, #0]
 800f7dc:	f003 0306 	and.w	r3, r3, #6
 800f7e0:	2b04      	cmp	r3, #4
 800f7e2:	bf08      	it	eq
 800f7e4:	1aad      	subeq	r5, r5, r2
 800f7e6:	68a3      	ldr	r3, [r4, #8]
 800f7e8:	6922      	ldr	r2, [r4, #16]
 800f7ea:	bf0c      	ite	eq
 800f7ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7f0:	2500      	movne	r5, #0
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	bfc4      	itt	gt
 800f7f6:	1a9b      	subgt	r3, r3, r2
 800f7f8:	18ed      	addgt	r5, r5, r3
 800f7fa:	2600      	movs	r6, #0
 800f7fc:	341a      	adds	r4, #26
 800f7fe:	42b5      	cmp	r5, r6
 800f800:	d11a      	bne.n	800f838 <_printf_common+0xc8>
 800f802:	2000      	movs	r0, #0
 800f804:	e008      	b.n	800f818 <_printf_common+0xa8>
 800f806:	2301      	movs	r3, #1
 800f808:	4652      	mov	r2, sl
 800f80a:	4649      	mov	r1, r9
 800f80c:	4638      	mov	r0, r7
 800f80e:	47c0      	blx	r8
 800f810:	3001      	adds	r0, #1
 800f812:	d103      	bne.n	800f81c <_printf_common+0xac>
 800f814:	f04f 30ff 	mov.w	r0, #4294967295
 800f818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f81c:	3501      	adds	r5, #1
 800f81e:	e7c6      	b.n	800f7ae <_printf_common+0x3e>
 800f820:	18e1      	adds	r1, r4, r3
 800f822:	1c5a      	adds	r2, r3, #1
 800f824:	2030      	movs	r0, #48	; 0x30
 800f826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f82a:	4422      	add	r2, r4
 800f82c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f834:	3302      	adds	r3, #2
 800f836:	e7c7      	b.n	800f7c8 <_printf_common+0x58>
 800f838:	2301      	movs	r3, #1
 800f83a:	4622      	mov	r2, r4
 800f83c:	4649      	mov	r1, r9
 800f83e:	4638      	mov	r0, r7
 800f840:	47c0      	blx	r8
 800f842:	3001      	adds	r0, #1
 800f844:	d0e6      	beq.n	800f814 <_printf_common+0xa4>
 800f846:	3601      	adds	r6, #1
 800f848:	e7d9      	b.n	800f7fe <_printf_common+0x8e>
	...

0800f84c <_printf_i>:
 800f84c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f850:	7e0f      	ldrb	r7, [r1, #24]
 800f852:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f854:	2f78      	cmp	r7, #120	; 0x78
 800f856:	4691      	mov	r9, r2
 800f858:	4680      	mov	r8, r0
 800f85a:	460c      	mov	r4, r1
 800f85c:	469a      	mov	sl, r3
 800f85e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f862:	d807      	bhi.n	800f874 <_printf_i+0x28>
 800f864:	2f62      	cmp	r7, #98	; 0x62
 800f866:	d80a      	bhi.n	800f87e <_printf_i+0x32>
 800f868:	2f00      	cmp	r7, #0
 800f86a:	f000 80d8 	beq.w	800fa1e <_printf_i+0x1d2>
 800f86e:	2f58      	cmp	r7, #88	; 0x58
 800f870:	f000 80a3 	beq.w	800f9ba <_printf_i+0x16e>
 800f874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f87c:	e03a      	b.n	800f8f4 <_printf_i+0xa8>
 800f87e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f882:	2b15      	cmp	r3, #21
 800f884:	d8f6      	bhi.n	800f874 <_printf_i+0x28>
 800f886:	a101      	add	r1, pc, #4	; (adr r1, 800f88c <_printf_i+0x40>)
 800f888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f88c:	0800f8e5 	.word	0x0800f8e5
 800f890:	0800f8f9 	.word	0x0800f8f9
 800f894:	0800f875 	.word	0x0800f875
 800f898:	0800f875 	.word	0x0800f875
 800f89c:	0800f875 	.word	0x0800f875
 800f8a0:	0800f875 	.word	0x0800f875
 800f8a4:	0800f8f9 	.word	0x0800f8f9
 800f8a8:	0800f875 	.word	0x0800f875
 800f8ac:	0800f875 	.word	0x0800f875
 800f8b0:	0800f875 	.word	0x0800f875
 800f8b4:	0800f875 	.word	0x0800f875
 800f8b8:	0800fa05 	.word	0x0800fa05
 800f8bc:	0800f929 	.word	0x0800f929
 800f8c0:	0800f9e7 	.word	0x0800f9e7
 800f8c4:	0800f875 	.word	0x0800f875
 800f8c8:	0800f875 	.word	0x0800f875
 800f8cc:	0800fa27 	.word	0x0800fa27
 800f8d0:	0800f875 	.word	0x0800f875
 800f8d4:	0800f929 	.word	0x0800f929
 800f8d8:	0800f875 	.word	0x0800f875
 800f8dc:	0800f875 	.word	0x0800f875
 800f8e0:	0800f9ef 	.word	0x0800f9ef
 800f8e4:	682b      	ldr	r3, [r5, #0]
 800f8e6:	1d1a      	adds	r2, r3, #4
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	602a      	str	r2, [r5, #0]
 800f8ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e0a3      	b.n	800fa40 <_printf_i+0x1f4>
 800f8f8:	6820      	ldr	r0, [r4, #0]
 800f8fa:	6829      	ldr	r1, [r5, #0]
 800f8fc:	0606      	lsls	r6, r0, #24
 800f8fe:	f101 0304 	add.w	r3, r1, #4
 800f902:	d50a      	bpl.n	800f91a <_printf_i+0xce>
 800f904:	680e      	ldr	r6, [r1, #0]
 800f906:	602b      	str	r3, [r5, #0]
 800f908:	2e00      	cmp	r6, #0
 800f90a:	da03      	bge.n	800f914 <_printf_i+0xc8>
 800f90c:	232d      	movs	r3, #45	; 0x2d
 800f90e:	4276      	negs	r6, r6
 800f910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f914:	485e      	ldr	r0, [pc, #376]	; (800fa90 <_printf_i+0x244>)
 800f916:	230a      	movs	r3, #10
 800f918:	e019      	b.n	800f94e <_printf_i+0x102>
 800f91a:	680e      	ldr	r6, [r1, #0]
 800f91c:	602b      	str	r3, [r5, #0]
 800f91e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f922:	bf18      	it	ne
 800f924:	b236      	sxthne	r6, r6
 800f926:	e7ef      	b.n	800f908 <_printf_i+0xbc>
 800f928:	682b      	ldr	r3, [r5, #0]
 800f92a:	6820      	ldr	r0, [r4, #0]
 800f92c:	1d19      	adds	r1, r3, #4
 800f92e:	6029      	str	r1, [r5, #0]
 800f930:	0601      	lsls	r1, r0, #24
 800f932:	d501      	bpl.n	800f938 <_printf_i+0xec>
 800f934:	681e      	ldr	r6, [r3, #0]
 800f936:	e002      	b.n	800f93e <_printf_i+0xf2>
 800f938:	0646      	lsls	r6, r0, #25
 800f93a:	d5fb      	bpl.n	800f934 <_printf_i+0xe8>
 800f93c:	881e      	ldrh	r6, [r3, #0]
 800f93e:	4854      	ldr	r0, [pc, #336]	; (800fa90 <_printf_i+0x244>)
 800f940:	2f6f      	cmp	r7, #111	; 0x6f
 800f942:	bf0c      	ite	eq
 800f944:	2308      	moveq	r3, #8
 800f946:	230a      	movne	r3, #10
 800f948:	2100      	movs	r1, #0
 800f94a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f94e:	6865      	ldr	r5, [r4, #4]
 800f950:	60a5      	str	r5, [r4, #8]
 800f952:	2d00      	cmp	r5, #0
 800f954:	bfa2      	ittt	ge
 800f956:	6821      	ldrge	r1, [r4, #0]
 800f958:	f021 0104 	bicge.w	r1, r1, #4
 800f95c:	6021      	strge	r1, [r4, #0]
 800f95e:	b90e      	cbnz	r6, 800f964 <_printf_i+0x118>
 800f960:	2d00      	cmp	r5, #0
 800f962:	d04d      	beq.n	800fa00 <_printf_i+0x1b4>
 800f964:	4615      	mov	r5, r2
 800f966:	fbb6 f1f3 	udiv	r1, r6, r3
 800f96a:	fb03 6711 	mls	r7, r3, r1, r6
 800f96e:	5dc7      	ldrb	r7, [r0, r7]
 800f970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f974:	4637      	mov	r7, r6
 800f976:	42bb      	cmp	r3, r7
 800f978:	460e      	mov	r6, r1
 800f97a:	d9f4      	bls.n	800f966 <_printf_i+0x11a>
 800f97c:	2b08      	cmp	r3, #8
 800f97e:	d10b      	bne.n	800f998 <_printf_i+0x14c>
 800f980:	6823      	ldr	r3, [r4, #0]
 800f982:	07de      	lsls	r6, r3, #31
 800f984:	d508      	bpl.n	800f998 <_printf_i+0x14c>
 800f986:	6923      	ldr	r3, [r4, #16]
 800f988:	6861      	ldr	r1, [r4, #4]
 800f98a:	4299      	cmp	r1, r3
 800f98c:	bfde      	ittt	le
 800f98e:	2330      	movle	r3, #48	; 0x30
 800f990:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f994:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f998:	1b52      	subs	r2, r2, r5
 800f99a:	6122      	str	r2, [r4, #16]
 800f99c:	f8cd a000 	str.w	sl, [sp]
 800f9a0:	464b      	mov	r3, r9
 800f9a2:	aa03      	add	r2, sp, #12
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	4640      	mov	r0, r8
 800f9a8:	f7ff fee2 	bl	800f770 <_printf_common>
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d14c      	bne.n	800fa4a <_printf_i+0x1fe>
 800f9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b4:	b004      	add	sp, #16
 800f9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ba:	4835      	ldr	r0, [pc, #212]	; (800fa90 <_printf_i+0x244>)
 800f9bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f9c0:	6829      	ldr	r1, [r5, #0]
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f9c8:	6029      	str	r1, [r5, #0]
 800f9ca:	061d      	lsls	r5, r3, #24
 800f9cc:	d514      	bpl.n	800f9f8 <_printf_i+0x1ac>
 800f9ce:	07df      	lsls	r7, r3, #31
 800f9d0:	bf44      	itt	mi
 800f9d2:	f043 0320 	orrmi.w	r3, r3, #32
 800f9d6:	6023      	strmi	r3, [r4, #0]
 800f9d8:	b91e      	cbnz	r6, 800f9e2 <_printf_i+0x196>
 800f9da:	6823      	ldr	r3, [r4, #0]
 800f9dc:	f023 0320 	bic.w	r3, r3, #32
 800f9e0:	6023      	str	r3, [r4, #0]
 800f9e2:	2310      	movs	r3, #16
 800f9e4:	e7b0      	b.n	800f948 <_printf_i+0xfc>
 800f9e6:	6823      	ldr	r3, [r4, #0]
 800f9e8:	f043 0320 	orr.w	r3, r3, #32
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	2378      	movs	r3, #120	; 0x78
 800f9f0:	4828      	ldr	r0, [pc, #160]	; (800fa94 <_printf_i+0x248>)
 800f9f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f9f6:	e7e3      	b.n	800f9c0 <_printf_i+0x174>
 800f9f8:	0659      	lsls	r1, r3, #25
 800f9fa:	bf48      	it	mi
 800f9fc:	b2b6      	uxthmi	r6, r6
 800f9fe:	e7e6      	b.n	800f9ce <_printf_i+0x182>
 800fa00:	4615      	mov	r5, r2
 800fa02:	e7bb      	b.n	800f97c <_printf_i+0x130>
 800fa04:	682b      	ldr	r3, [r5, #0]
 800fa06:	6826      	ldr	r6, [r4, #0]
 800fa08:	6961      	ldr	r1, [r4, #20]
 800fa0a:	1d18      	adds	r0, r3, #4
 800fa0c:	6028      	str	r0, [r5, #0]
 800fa0e:	0635      	lsls	r5, r6, #24
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	d501      	bpl.n	800fa18 <_printf_i+0x1cc>
 800fa14:	6019      	str	r1, [r3, #0]
 800fa16:	e002      	b.n	800fa1e <_printf_i+0x1d2>
 800fa18:	0670      	lsls	r0, r6, #25
 800fa1a:	d5fb      	bpl.n	800fa14 <_printf_i+0x1c8>
 800fa1c:	8019      	strh	r1, [r3, #0]
 800fa1e:	2300      	movs	r3, #0
 800fa20:	6123      	str	r3, [r4, #16]
 800fa22:	4615      	mov	r5, r2
 800fa24:	e7ba      	b.n	800f99c <_printf_i+0x150>
 800fa26:	682b      	ldr	r3, [r5, #0]
 800fa28:	1d1a      	adds	r2, r3, #4
 800fa2a:	602a      	str	r2, [r5, #0]
 800fa2c:	681d      	ldr	r5, [r3, #0]
 800fa2e:	6862      	ldr	r2, [r4, #4]
 800fa30:	2100      	movs	r1, #0
 800fa32:	4628      	mov	r0, r5
 800fa34:	f7f0 fbf4 	bl	8000220 <memchr>
 800fa38:	b108      	cbz	r0, 800fa3e <_printf_i+0x1f2>
 800fa3a:	1b40      	subs	r0, r0, r5
 800fa3c:	6060      	str	r0, [r4, #4]
 800fa3e:	6863      	ldr	r3, [r4, #4]
 800fa40:	6123      	str	r3, [r4, #16]
 800fa42:	2300      	movs	r3, #0
 800fa44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa48:	e7a8      	b.n	800f99c <_printf_i+0x150>
 800fa4a:	6923      	ldr	r3, [r4, #16]
 800fa4c:	462a      	mov	r2, r5
 800fa4e:	4649      	mov	r1, r9
 800fa50:	4640      	mov	r0, r8
 800fa52:	47d0      	blx	sl
 800fa54:	3001      	adds	r0, #1
 800fa56:	d0ab      	beq.n	800f9b0 <_printf_i+0x164>
 800fa58:	6823      	ldr	r3, [r4, #0]
 800fa5a:	079b      	lsls	r3, r3, #30
 800fa5c:	d413      	bmi.n	800fa86 <_printf_i+0x23a>
 800fa5e:	68e0      	ldr	r0, [r4, #12]
 800fa60:	9b03      	ldr	r3, [sp, #12]
 800fa62:	4298      	cmp	r0, r3
 800fa64:	bfb8      	it	lt
 800fa66:	4618      	movlt	r0, r3
 800fa68:	e7a4      	b.n	800f9b4 <_printf_i+0x168>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	4632      	mov	r2, r6
 800fa6e:	4649      	mov	r1, r9
 800fa70:	4640      	mov	r0, r8
 800fa72:	47d0      	blx	sl
 800fa74:	3001      	adds	r0, #1
 800fa76:	d09b      	beq.n	800f9b0 <_printf_i+0x164>
 800fa78:	3501      	adds	r5, #1
 800fa7a:	68e3      	ldr	r3, [r4, #12]
 800fa7c:	9903      	ldr	r1, [sp, #12]
 800fa7e:	1a5b      	subs	r3, r3, r1
 800fa80:	42ab      	cmp	r3, r5
 800fa82:	dcf2      	bgt.n	800fa6a <_printf_i+0x21e>
 800fa84:	e7eb      	b.n	800fa5e <_printf_i+0x212>
 800fa86:	2500      	movs	r5, #0
 800fa88:	f104 0619 	add.w	r6, r4, #25
 800fa8c:	e7f5      	b.n	800fa7a <_printf_i+0x22e>
 800fa8e:	bf00      	nop
 800fa90:	08015254 	.word	0x08015254
 800fa94:	08015265 	.word	0x08015265

0800fa98 <_scanf_float>:
 800fa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa9c:	b087      	sub	sp, #28
 800fa9e:	4617      	mov	r7, r2
 800faa0:	9303      	str	r3, [sp, #12]
 800faa2:	688b      	ldr	r3, [r1, #8]
 800faa4:	1e5a      	subs	r2, r3, #1
 800faa6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800faaa:	bf83      	ittte	hi
 800faac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fab0:	195b      	addhi	r3, r3, r5
 800fab2:	9302      	strhi	r3, [sp, #8]
 800fab4:	2300      	movls	r3, #0
 800fab6:	bf86      	itte	hi
 800fab8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fabc:	608b      	strhi	r3, [r1, #8]
 800fabe:	9302      	strls	r3, [sp, #8]
 800fac0:	680b      	ldr	r3, [r1, #0]
 800fac2:	468b      	mov	fp, r1
 800fac4:	2500      	movs	r5, #0
 800fac6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800faca:	f84b 3b1c 	str.w	r3, [fp], #28
 800face:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fad2:	4680      	mov	r8, r0
 800fad4:	460c      	mov	r4, r1
 800fad6:	465e      	mov	r6, fp
 800fad8:	46aa      	mov	sl, r5
 800fada:	46a9      	mov	r9, r5
 800fadc:	9501      	str	r5, [sp, #4]
 800fade:	68a2      	ldr	r2, [r4, #8]
 800fae0:	b152      	cbz	r2, 800faf8 <_scanf_float+0x60>
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	2b4e      	cmp	r3, #78	; 0x4e
 800fae8:	d864      	bhi.n	800fbb4 <_scanf_float+0x11c>
 800faea:	2b40      	cmp	r3, #64	; 0x40
 800faec:	d83c      	bhi.n	800fb68 <_scanf_float+0xd0>
 800faee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800faf2:	b2c8      	uxtb	r0, r1
 800faf4:	280e      	cmp	r0, #14
 800faf6:	d93a      	bls.n	800fb6e <_scanf_float+0xd6>
 800faf8:	f1b9 0f00 	cmp.w	r9, #0
 800fafc:	d003      	beq.n	800fb06 <_scanf_float+0x6e>
 800fafe:	6823      	ldr	r3, [r4, #0]
 800fb00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb04:	6023      	str	r3, [r4, #0]
 800fb06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb0a:	f1ba 0f01 	cmp.w	sl, #1
 800fb0e:	f200 8113 	bhi.w	800fd38 <_scanf_float+0x2a0>
 800fb12:	455e      	cmp	r6, fp
 800fb14:	f200 8105 	bhi.w	800fd22 <_scanf_float+0x28a>
 800fb18:	2501      	movs	r5, #1
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	b007      	add	sp, #28
 800fb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fb26:	2a0d      	cmp	r2, #13
 800fb28:	d8e6      	bhi.n	800faf8 <_scanf_float+0x60>
 800fb2a:	a101      	add	r1, pc, #4	; (adr r1, 800fb30 <_scanf_float+0x98>)
 800fb2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fb30:	0800fc6f 	.word	0x0800fc6f
 800fb34:	0800faf9 	.word	0x0800faf9
 800fb38:	0800faf9 	.word	0x0800faf9
 800fb3c:	0800faf9 	.word	0x0800faf9
 800fb40:	0800fccf 	.word	0x0800fccf
 800fb44:	0800fca7 	.word	0x0800fca7
 800fb48:	0800faf9 	.word	0x0800faf9
 800fb4c:	0800faf9 	.word	0x0800faf9
 800fb50:	0800fc7d 	.word	0x0800fc7d
 800fb54:	0800faf9 	.word	0x0800faf9
 800fb58:	0800faf9 	.word	0x0800faf9
 800fb5c:	0800faf9 	.word	0x0800faf9
 800fb60:	0800faf9 	.word	0x0800faf9
 800fb64:	0800fc35 	.word	0x0800fc35
 800fb68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fb6c:	e7db      	b.n	800fb26 <_scanf_float+0x8e>
 800fb6e:	290e      	cmp	r1, #14
 800fb70:	d8c2      	bhi.n	800faf8 <_scanf_float+0x60>
 800fb72:	a001      	add	r0, pc, #4	; (adr r0, 800fb78 <_scanf_float+0xe0>)
 800fb74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fb78:	0800fc27 	.word	0x0800fc27
 800fb7c:	0800faf9 	.word	0x0800faf9
 800fb80:	0800fc27 	.word	0x0800fc27
 800fb84:	0800fcbb 	.word	0x0800fcbb
 800fb88:	0800faf9 	.word	0x0800faf9
 800fb8c:	0800fbd5 	.word	0x0800fbd5
 800fb90:	0800fc11 	.word	0x0800fc11
 800fb94:	0800fc11 	.word	0x0800fc11
 800fb98:	0800fc11 	.word	0x0800fc11
 800fb9c:	0800fc11 	.word	0x0800fc11
 800fba0:	0800fc11 	.word	0x0800fc11
 800fba4:	0800fc11 	.word	0x0800fc11
 800fba8:	0800fc11 	.word	0x0800fc11
 800fbac:	0800fc11 	.word	0x0800fc11
 800fbb0:	0800fc11 	.word	0x0800fc11
 800fbb4:	2b6e      	cmp	r3, #110	; 0x6e
 800fbb6:	d809      	bhi.n	800fbcc <_scanf_float+0x134>
 800fbb8:	2b60      	cmp	r3, #96	; 0x60
 800fbba:	d8b2      	bhi.n	800fb22 <_scanf_float+0x8a>
 800fbbc:	2b54      	cmp	r3, #84	; 0x54
 800fbbe:	d077      	beq.n	800fcb0 <_scanf_float+0x218>
 800fbc0:	2b59      	cmp	r3, #89	; 0x59
 800fbc2:	d199      	bne.n	800faf8 <_scanf_float+0x60>
 800fbc4:	2d07      	cmp	r5, #7
 800fbc6:	d197      	bne.n	800faf8 <_scanf_float+0x60>
 800fbc8:	2508      	movs	r5, #8
 800fbca:	e029      	b.n	800fc20 <_scanf_float+0x188>
 800fbcc:	2b74      	cmp	r3, #116	; 0x74
 800fbce:	d06f      	beq.n	800fcb0 <_scanf_float+0x218>
 800fbd0:	2b79      	cmp	r3, #121	; 0x79
 800fbd2:	e7f6      	b.n	800fbc2 <_scanf_float+0x12a>
 800fbd4:	6821      	ldr	r1, [r4, #0]
 800fbd6:	05c8      	lsls	r0, r1, #23
 800fbd8:	d51a      	bpl.n	800fc10 <_scanf_float+0x178>
 800fbda:	9b02      	ldr	r3, [sp, #8]
 800fbdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fbe0:	6021      	str	r1, [r4, #0]
 800fbe2:	f109 0901 	add.w	r9, r9, #1
 800fbe6:	b11b      	cbz	r3, 800fbf0 <_scanf_float+0x158>
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	3201      	adds	r2, #1
 800fbec:	9302      	str	r3, [sp, #8]
 800fbee:	60a2      	str	r2, [r4, #8]
 800fbf0:	68a3      	ldr	r3, [r4, #8]
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	60a3      	str	r3, [r4, #8]
 800fbf6:	6923      	ldr	r3, [r4, #16]
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	6123      	str	r3, [r4, #16]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	3b01      	subs	r3, #1
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	607b      	str	r3, [r7, #4]
 800fc04:	f340 8084 	ble.w	800fd10 <_scanf_float+0x278>
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	603b      	str	r3, [r7, #0]
 800fc0e:	e766      	b.n	800fade <_scanf_float+0x46>
 800fc10:	eb1a 0f05 	cmn.w	sl, r5
 800fc14:	f47f af70 	bne.w	800faf8 <_scanf_float+0x60>
 800fc18:	6822      	ldr	r2, [r4, #0]
 800fc1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fc1e:	6022      	str	r2, [r4, #0]
 800fc20:	f806 3b01 	strb.w	r3, [r6], #1
 800fc24:	e7e4      	b.n	800fbf0 <_scanf_float+0x158>
 800fc26:	6822      	ldr	r2, [r4, #0]
 800fc28:	0610      	lsls	r0, r2, #24
 800fc2a:	f57f af65 	bpl.w	800faf8 <_scanf_float+0x60>
 800fc2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fc32:	e7f4      	b.n	800fc1e <_scanf_float+0x186>
 800fc34:	f1ba 0f00 	cmp.w	sl, #0
 800fc38:	d10e      	bne.n	800fc58 <_scanf_float+0x1c0>
 800fc3a:	f1b9 0f00 	cmp.w	r9, #0
 800fc3e:	d10e      	bne.n	800fc5e <_scanf_float+0x1c6>
 800fc40:	6822      	ldr	r2, [r4, #0]
 800fc42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fc46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fc4a:	d108      	bne.n	800fc5e <_scanf_float+0x1c6>
 800fc4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fc50:	6022      	str	r2, [r4, #0]
 800fc52:	f04f 0a01 	mov.w	sl, #1
 800fc56:	e7e3      	b.n	800fc20 <_scanf_float+0x188>
 800fc58:	f1ba 0f02 	cmp.w	sl, #2
 800fc5c:	d055      	beq.n	800fd0a <_scanf_float+0x272>
 800fc5e:	2d01      	cmp	r5, #1
 800fc60:	d002      	beq.n	800fc68 <_scanf_float+0x1d0>
 800fc62:	2d04      	cmp	r5, #4
 800fc64:	f47f af48 	bne.w	800faf8 <_scanf_float+0x60>
 800fc68:	3501      	adds	r5, #1
 800fc6a:	b2ed      	uxtb	r5, r5
 800fc6c:	e7d8      	b.n	800fc20 <_scanf_float+0x188>
 800fc6e:	f1ba 0f01 	cmp.w	sl, #1
 800fc72:	f47f af41 	bne.w	800faf8 <_scanf_float+0x60>
 800fc76:	f04f 0a02 	mov.w	sl, #2
 800fc7a:	e7d1      	b.n	800fc20 <_scanf_float+0x188>
 800fc7c:	b97d      	cbnz	r5, 800fc9e <_scanf_float+0x206>
 800fc7e:	f1b9 0f00 	cmp.w	r9, #0
 800fc82:	f47f af3c 	bne.w	800fafe <_scanf_float+0x66>
 800fc86:	6822      	ldr	r2, [r4, #0]
 800fc88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fc8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fc90:	f47f af39 	bne.w	800fb06 <_scanf_float+0x6e>
 800fc94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fc98:	6022      	str	r2, [r4, #0]
 800fc9a:	2501      	movs	r5, #1
 800fc9c:	e7c0      	b.n	800fc20 <_scanf_float+0x188>
 800fc9e:	2d03      	cmp	r5, #3
 800fca0:	d0e2      	beq.n	800fc68 <_scanf_float+0x1d0>
 800fca2:	2d05      	cmp	r5, #5
 800fca4:	e7de      	b.n	800fc64 <_scanf_float+0x1cc>
 800fca6:	2d02      	cmp	r5, #2
 800fca8:	f47f af26 	bne.w	800faf8 <_scanf_float+0x60>
 800fcac:	2503      	movs	r5, #3
 800fcae:	e7b7      	b.n	800fc20 <_scanf_float+0x188>
 800fcb0:	2d06      	cmp	r5, #6
 800fcb2:	f47f af21 	bne.w	800faf8 <_scanf_float+0x60>
 800fcb6:	2507      	movs	r5, #7
 800fcb8:	e7b2      	b.n	800fc20 <_scanf_float+0x188>
 800fcba:	6822      	ldr	r2, [r4, #0]
 800fcbc:	0591      	lsls	r1, r2, #22
 800fcbe:	f57f af1b 	bpl.w	800faf8 <_scanf_float+0x60>
 800fcc2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fcc6:	6022      	str	r2, [r4, #0]
 800fcc8:	f8cd 9004 	str.w	r9, [sp, #4]
 800fccc:	e7a8      	b.n	800fc20 <_scanf_float+0x188>
 800fcce:	6822      	ldr	r2, [r4, #0]
 800fcd0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fcd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fcd8:	d006      	beq.n	800fce8 <_scanf_float+0x250>
 800fcda:	0550      	lsls	r0, r2, #21
 800fcdc:	f57f af0c 	bpl.w	800faf8 <_scanf_float+0x60>
 800fce0:	f1b9 0f00 	cmp.w	r9, #0
 800fce4:	f43f af0f 	beq.w	800fb06 <_scanf_float+0x6e>
 800fce8:	0591      	lsls	r1, r2, #22
 800fcea:	bf58      	it	pl
 800fcec:	9901      	ldrpl	r1, [sp, #4]
 800fcee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fcf2:	bf58      	it	pl
 800fcf4:	eba9 0101 	subpl.w	r1, r9, r1
 800fcf8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fcfc:	bf58      	it	pl
 800fcfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fd02:	6022      	str	r2, [r4, #0]
 800fd04:	f04f 0900 	mov.w	r9, #0
 800fd08:	e78a      	b.n	800fc20 <_scanf_float+0x188>
 800fd0a:	f04f 0a03 	mov.w	sl, #3
 800fd0e:	e787      	b.n	800fc20 <_scanf_float+0x188>
 800fd10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fd14:	4639      	mov	r1, r7
 800fd16:	4640      	mov	r0, r8
 800fd18:	4798      	blx	r3
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	f43f aedf 	beq.w	800fade <_scanf_float+0x46>
 800fd20:	e6ea      	b.n	800faf8 <_scanf_float+0x60>
 800fd22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fd26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fd2a:	463a      	mov	r2, r7
 800fd2c:	4640      	mov	r0, r8
 800fd2e:	4798      	blx	r3
 800fd30:	6923      	ldr	r3, [r4, #16]
 800fd32:	3b01      	subs	r3, #1
 800fd34:	6123      	str	r3, [r4, #16]
 800fd36:	e6ec      	b.n	800fb12 <_scanf_float+0x7a>
 800fd38:	1e6b      	subs	r3, r5, #1
 800fd3a:	2b06      	cmp	r3, #6
 800fd3c:	d825      	bhi.n	800fd8a <_scanf_float+0x2f2>
 800fd3e:	2d02      	cmp	r5, #2
 800fd40:	d836      	bhi.n	800fdb0 <_scanf_float+0x318>
 800fd42:	455e      	cmp	r6, fp
 800fd44:	f67f aee8 	bls.w	800fb18 <_scanf_float+0x80>
 800fd48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fd4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fd50:	463a      	mov	r2, r7
 800fd52:	4640      	mov	r0, r8
 800fd54:	4798      	blx	r3
 800fd56:	6923      	ldr	r3, [r4, #16]
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	6123      	str	r3, [r4, #16]
 800fd5c:	e7f1      	b.n	800fd42 <_scanf_float+0x2aa>
 800fd5e:	9802      	ldr	r0, [sp, #8]
 800fd60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fd64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fd68:	9002      	str	r0, [sp, #8]
 800fd6a:	463a      	mov	r2, r7
 800fd6c:	4640      	mov	r0, r8
 800fd6e:	4798      	blx	r3
 800fd70:	6923      	ldr	r3, [r4, #16]
 800fd72:	3b01      	subs	r3, #1
 800fd74:	6123      	str	r3, [r4, #16]
 800fd76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd7a:	fa5f fa8a 	uxtb.w	sl, sl
 800fd7e:	f1ba 0f02 	cmp.w	sl, #2
 800fd82:	d1ec      	bne.n	800fd5e <_scanf_float+0x2c6>
 800fd84:	3d03      	subs	r5, #3
 800fd86:	b2ed      	uxtb	r5, r5
 800fd88:	1b76      	subs	r6, r6, r5
 800fd8a:	6823      	ldr	r3, [r4, #0]
 800fd8c:	05da      	lsls	r2, r3, #23
 800fd8e:	d52f      	bpl.n	800fdf0 <_scanf_float+0x358>
 800fd90:	055b      	lsls	r3, r3, #21
 800fd92:	d510      	bpl.n	800fdb6 <_scanf_float+0x31e>
 800fd94:	455e      	cmp	r6, fp
 800fd96:	f67f aebf 	bls.w	800fb18 <_scanf_float+0x80>
 800fd9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fd9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fda2:	463a      	mov	r2, r7
 800fda4:	4640      	mov	r0, r8
 800fda6:	4798      	blx	r3
 800fda8:	6923      	ldr	r3, [r4, #16]
 800fdaa:	3b01      	subs	r3, #1
 800fdac:	6123      	str	r3, [r4, #16]
 800fdae:	e7f1      	b.n	800fd94 <_scanf_float+0x2fc>
 800fdb0:	46aa      	mov	sl, r5
 800fdb2:	9602      	str	r6, [sp, #8]
 800fdb4:	e7df      	b.n	800fd76 <_scanf_float+0x2de>
 800fdb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fdba:	6923      	ldr	r3, [r4, #16]
 800fdbc:	2965      	cmp	r1, #101	; 0x65
 800fdbe:	f103 33ff 	add.w	r3, r3, #4294967295
 800fdc2:	f106 35ff 	add.w	r5, r6, #4294967295
 800fdc6:	6123      	str	r3, [r4, #16]
 800fdc8:	d00c      	beq.n	800fde4 <_scanf_float+0x34c>
 800fdca:	2945      	cmp	r1, #69	; 0x45
 800fdcc:	d00a      	beq.n	800fde4 <_scanf_float+0x34c>
 800fdce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fdd2:	463a      	mov	r2, r7
 800fdd4:	4640      	mov	r0, r8
 800fdd6:	4798      	blx	r3
 800fdd8:	6923      	ldr	r3, [r4, #16]
 800fdda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fdde:	3b01      	subs	r3, #1
 800fde0:	1eb5      	subs	r5, r6, #2
 800fde2:	6123      	str	r3, [r4, #16]
 800fde4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fde8:	463a      	mov	r2, r7
 800fdea:	4640      	mov	r0, r8
 800fdec:	4798      	blx	r3
 800fdee:	462e      	mov	r6, r5
 800fdf0:	6825      	ldr	r5, [r4, #0]
 800fdf2:	f015 0510 	ands.w	r5, r5, #16
 800fdf6:	d159      	bne.n	800feac <_scanf_float+0x414>
 800fdf8:	7035      	strb	r5, [r6, #0]
 800fdfa:	6823      	ldr	r3, [r4, #0]
 800fdfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fe00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe04:	d11b      	bne.n	800fe3e <_scanf_float+0x3a6>
 800fe06:	9b01      	ldr	r3, [sp, #4]
 800fe08:	454b      	cmp	r3, r9
 800fe0a:	eba3 0209 	sub.w	r2, r3, r9
 800fe0e:	d123      	bne.n	800fe58 <_scanf_float+0x3c0>
 800fe10:	2200      	movs	r2, #0
 800fe12:	4659      	mov	r1, fp
 800fe14:	4640      	mov	r0, r8
 800fe16:	f000 ffe1 	bl	8010ddc <_strtod_r>
 800fe1a:	6822      	ldr	r2, [r4, #0]
 800fe1c:	9b03      	ldr	r3, [sp, #12]
 800fe1e:	f012 0f02 	tst.w	r2, #2
 800fe22:	ec57 6b10 	vmov	r6, r7, d0
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	d021      	beq.n	800fe6e <_scanf_float+0x3d6>
 800fe2a:	9903      	ldr	r1, [sp, #12]
 800fe2c:	1d1a      	adds	r2, r3, #4
 800fe2e:	600a      	str	r2, [r1, #0]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	e9c3 6700 	strd	r6, r7, [r3]
 800fe36:	68e3      	ldr	r3, [r4, #12]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	60e3      	str	r3, [r4, #12]
 800fe3c:	e66d      	b.n	800fb1a <_scanf_float+0x82>
 800fe3e:	9b04      	ldr	r3, [sp, #16]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d0e5      	beq.n	800fe10 <_scanf_float+0x378>
 800fe44:	9905      	ldr	r1, [sp, #20]
 800fe46:	230a      	movs	r3, #10
 800fe48:	462a      	mov	r2, r5
 800fe4a:	3101      	adds	r1, #1
 800fe4c:	4640      	mov	r0, r8
 800fe4e:	f001 f84d 	bl	8010eec <_strtol_r>
 800fe52:	9b04      	ldr	r3, [sp, #16]
 800fe54:	9e05      	ldr	r6, [sp, #20]
 800fe56:	1ac2      	subs	r2, r0, r3
 800fe58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fe5c:	429e      	cmp	r6, r3
 800fe5e:	bf28      	it	cs
 800fe60:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fe64:	4912      	ldr	r1, [pc, #72]	; (800feb0 <_scanf_float+0x418>)
 800fe66:	4630      	mov	r0, r6
 800fe68:	f000 f8ee 	bl	8010048 <siprintf>
 800fe6c:	e7d0      	b.n	800fe10 <_scanf_float+0x378>
 800fe6e:	9903      	ldr	r1, [sp, #12]
 800fe70:	f012 0f04 	tst.w	r2, #4
 800fe74:	f103 0204 	add.w	r2, r3, #4
 800fe78:	600a      	str	r2, [r1, #0]
 800fe7a:	d1d9      	bne.n	800fe30 <_scanf_float+0x398>
 800fe7c:	f8d3 8000 	ldr.w	r8, [r3]
 800fe80:	ee10 2a10 	vmov	r2, s0
 800fe84:	ee10 0a10 	vmov	r0, s0
 800fe88:	463b      	mov	r3, r7
 800fe8a:	4639      	mov	r1, r7
 800fe8c:	f7f0 fe6e 	bl	8000b6c <__aeabi_dcmpun>
 800fe90:	b128      	cbz	r0, 800fe9e <_scanf_float+0x406>
 800fe92:	4808      	ldr	r0, [pc, #32]	; (800feb4 <_scanf_float+0x41c>)
 800fe94:	f000 f89e 	bl	800ffd4 <nanf>
 800fe98:	ed88 0a00 	vstr	s0, [r8]
 800fe9c:	e7cb      	b.n	800fe36 <_scanf_float+0x39e>
 800fe9e:	4630      	mov	r0, r6
 800fea0:	4639      	mov	r1, r7
 800fea2:	f7f0 fec1 	bl	8000c28 <__aeabi_d2f>
 800fea6:	f8c8 0000 	str.w	r0, [r8]
 800feaa:	e7c4      	b.n	800fe36 <_scanf_float+0x39e>
 800feac:	2500      	movs	r5, #0
 800feae:	e634      	b.n	800fb1a <_scanf_float+0x82>
 800feb0:	08015276 	.word	0x08015276
 800feb4:	080155fb 	.word	0x080155fb

0800feb8 <iprintf>:
 800feb8:	b40f      	push	{r0, r1, r2, r3}
 800feba:	4b0a      	ldr	r3, [pc, #40]	; (800fee4 <iprintf+0x2c>)
 800febc:	b513      	push	{r0, r1, r4, lr}
 800febe:	681c      	ldr	r4, [r3, #0]
 800fec0:	b124      	cbz	r4, 800fecc <iprintf+0x14>
 800fec2:	69a3      	ldr	r3, [r4, #24]
 800fec4:	b913      	cbnz	r3, 800fecc <iprintf+0x14>
 800fec6:	4620      	mov	r0, r4
 800fec8:	f002 f88a 	bl	8011fe0 <__sinit>
 800fecc:	ab05      	add	r3, sp, #20
 800fece:	9a04      	ldr	r2, [sp, #16]
 800fed0:	68a1      	ldr	r1, [r4, #8]
 800fed2:	9301      	str	r3, [sp, #4]
 800fed4:	4620      	mov	r0, r4
 800fed6:	f003 fe39 	bl	8013b4c <_vfiprintf_r>
 800feda:	b002      	add	sp, #8
 800fedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fee0:	b004      	add	sp, #16
 800fee2:	4770      	bx	lr
 800fee4:	20000110 	.word	0x20000110

0800fee8 <_puts_r>:
 800fee8:	b570      	push	{r4, r5, r6, lr}
 800feea:	460e      	mov	r6, r1
 800feec:	4605      	mov	r5, r0
 800feee:	b118      	cbz	r0, 800fef8 <_puts_r+0x10>
 800fef0:	6983      	ldr	r3, [r0, #24]
 800fef2:	b90b      	cbnz	r3, 800fef8 <_puts_r+0x10>
 800fef4:	f002 f874 	bl	8011fe0 <__sinit>
 800fef8:	69ab      	ldr	r3, [r5, #24]
 800fefa:	68ac      	ldr	r4, [r5, #8]
 800fefc:	b913      	cbnz	r3, 800ff04 <_puts_r+0x1c>
 800fefe:	4628      	mov	r0, r5
 800ff00:	f002 f86e 	bl	8011fe0 <__sinit>
 800ff04:	4b2c      	ldr	r3, [pc, #176]	; (800ffb8 <_puts_r+0xd0>)
 800ff06:	429c      	cmp	r4, r3
 800ff08:	d120      	bne.n	800ff4c <_puts_r+0x64>
 800ff0a:	686c      	ldr	r4, [r5, #4]
 800ff0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff0e:	07db      	lsls	r3, r3, #31
 800ff10:	d405      	bmi.n	800ff1e <_puts_r+0x36>
 800ff12:	89a3      	ldrh	r3, [r4, #12]
 800ff14:	0598      	lsls	r0, r3, #22
 800ff16:	d402      	bmi.n	800ff1e <_puts_r+0x36>
 800ff18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff1a:	f002 fc72 	bl	8012802 <__retarget_lock_acquire_recursive>
 800ff1e:	89a3      	ldrh	r3, [r4, #12]
 800ff20:	0719      	lsls	r1, r3, #28
 800ff22:	d51d      	bpl.n	800ff60 <_puts_r+0x78>
 800ff24:	6923      	ldr	r3, [r4, #16]
 800ff26:	b1db      	cbz	r3, 800ff60 <_puts_r+0x78>
 800ff28:	3e01      	subs	r6, #1
 800ff2a:	68a3      	ldr	r3, [r4, #8]
 800ff2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ff30:	3b01      	subs	r3, #1
 800ff32:	60a3      	str	r3, [r4, #8]
 800ff34:	bb39      	cbnz	r1, 800ff86 <_puts_r+0x9e>
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	da38      	bge.n	800ffac <_puts_r+0xc4>
 800ff3a:	4622      	mov	r2, r4
 800ff3c:	210a      	movs	r1, #10
 800ff3e:	4628      	mov	r0, r5
 800ff40:	f000 ffd6 	bl	8010ef0 <__swbuf_r>
 800ff44:	3001      	adds	r0, #1
 800ff46:	d011      	beq.n	800ff6c <_puts_r+0x84>
 800ff48:	250a      	movs	r5, #10
 800ff4a:	e011      	b.n	800ff70 <_puts_r+0x88>
 800ff4c:	4b1b      	ldr	r3, [pc, #108]	; (800ffbc <_puts_r+0xd4>)
 800ff4e:	429c      	cmp	r4, r3
 800ff50:	d101      	bne.n	800ff56 <_puts_r+0x6e>
 800ff52:	68ac      	ldr	r4, [r5, #8]
 800ff54:	e7da      	b.n	800ff0c <_puts_r+0x24>
 800ff56:	4b1a      	ldr	r3, [pc, #104]	; (800ffc0 <_puts_r+0xd8>)
 800ff58:	429c      	cmp	r4, r3
 800ff5a:	bf08      	it	eq
 800ff5c:	68ec      	ldreq	r4, [r5, #12]
 800ff5e:	e7d5      	b.n	800ff0c <_puts_r+0x24>
 800ff60:	4621      	mov	r1, r4
 800ff62:	4628      	mov	r0, r5
 800ff64:	f001 f828 	bl	8010fb8 <__swsetup_r>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d0dd      	beq.n	800ff28 <_puts_r+0x40>
 800ff6c:	f04f 35ff 	mov.w	r5, #4294967295
 800ff70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff72:	07da      	lsls	r2, r3, #31
 800ff74:	d405      	bmi.n	800ff82 <_puts_r+0x9a>
 800ff76:	89a3      	ldrh	r3, [r4, #12]
 800ff78:	059b      	lsls	r3, r3, #22
 800ff7a:	d402      	bmi.n	800ff82 <_puts_r+0x9a>
 800ff7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff7e:	f002 fc41 	bl	8012804 <__retarget_lock_release_recursive>
 800ff82:	4628      	mov	r0, r5
 800ff84:	bd70      	pop	{r4, r5, r6, pc}
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	da04      	bge.n	800ff94 <_puts_r+0xac>
 800ff8a:	69a2      	ldr	r2, [r4, #24]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	dc06      	bgt.n	800ff9e <_puts_r+0xb6>
 800ff90:	290a      	cmp	r1, #10
 800ff92:	d004      	beq.n	800ff9e <_puts_r+0xb6>
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	1c5a      	adds	r2, r3, #1
 800ff98:	6022      	str	r2, [r4, #0]
 800ff9a:	7019      	strb	r1, [r3, #0]
 800ff9c:	e7c5      	b.n	800ff2a <_puts_r+0x42>
 800ff9e:	4622      	mov	r2, r4
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	f000 ffa5 	bl	8010ef0 <__swbuf_r>
 800ffa6:	3001      	adds	r0, #1
 800ffa8:	d1bf      	bne.n	800ff2a <_puts_r+0x42>
 800ffaa:	e7df      	b.n	800ff6c <_puts_r+0x84>
 800ffac:	6823      	ldr	r3, [r4, #0]
 800ffae:	250a      	movs	r5, #10
 800ffb0:	1c5a      	adds	r2, r3, #1
 800ffb2:	6022      	str	r2, [r4, #0]
 800ffb4:	701d      	strb	r5, [r3, #0]
 800ffb6:	e7db      	b.n	800ff70 <_puts_r+0x88>
 800ffb8:	08015380 	.word	0x08015380
 800ffbc:	080153a0 	.word	0x080153a0
 800ffc0:	08015360 	.word	0x08015360

0800ffc4 <puts>:
 800ffc4:	4b02      	ldr	r3, [pc, #8]	; (800ffd0 <puts+0xc>)
 800ffc6:	4601      	mov	r1, r0
 800ffc8:	6818      	ldr	r0, [r3, #0]
 800ffca:	f7ff bf8d 	b.w	800fee8 <_puts_r>
 800ffce:	bf00      	nop
 800ffd0:	20000110 	.word	0x20000110

0800ffd4 <nanf>:
 800ffd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ffdc <nanf+0x8>
 800ffd8:	4770      	bx	lr
 800ffda:	bf00      	nop
 800ffdc:	7fc00000 	.word	0x7fc00000

0800ffe0 <sniprintf>:
 800ffe0:	b40c      	push	{r2, r3}
 800ffe2:	b530      	push	{r4, r5, lr}
 800ffe4:	4b17      	ldr	r3, [pc, #92]	; (8010044 <sniprintf+0x64>)
 800ffe6:	1e0c      	subs	r4, r1, #0
 800ffe8:	681d      	ldr	r5, [r3, #0]
 800ffea:	b09d      	sub	sp, #116	; 0x74
 800ffec:	da08      	bge.n	8010000 <sniprintf+0x20>
 800ffee:	238b      	movs	r3, #139	; 0x8b
 800fff0:	602b      	str	r3, [r5, #0]
 800fff2:	f04f 30ff 	mov.w	r0, #4294967295
 800fff6:	b01d      	add	sp, #116	; 0x74
 800fff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fffc:	b002      	add	sp, #8
 800fffe:	4770      	bx	lr
 8010000:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010004:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010008:	bf14      	ite	ne
 801000a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801000e:	4623      	moveq	r3, r4
 8010010:	9304      	str	r3, [sp, #16]
 8010012:	9307      	str	r3, [sp, #28]
 8010014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010018:	9002      	str	r0, [sp, #8]
 801001a:	9006      	str	r0, [sp, #24]
 801001c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010020:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010022:	ab21      	add	r3, sp, #132	; 0x84
 8010024:	a902      	add	r1, sp, #8
 8010026:	4628      	mov	r0, r5
 8010028:	9301      	str	r3, [sp, #4]
 801002a:	f003 fa93 	bl	8013554 <_svfiprintf_r>
 801002e:	1c43      	adds	r3, r0, #1
 8010030:	bfbc      	itt	lt
 8010032:	238b      	movlt	r3, #139	; 0x8b
 8010034:	602b      	strlt	r3, [r5, #0]
 8010036:	2c00      	cmp	r4, #0
 8010038:	d0dd      	beq.n	800fff6 <sniprintf+0x16>
 801003a:	9b02      	ldr	r3, [sp, #8]
 801003c:	2200      	movs	r2, #0
 801003e:	701a      	strb	r2, [r3, #0]
 8010040:	e7d9      	b.n	800fff6 <sniprintf+0x16>
 8010042:	bf00      	nop
 8010044:	20000110 	.word	0x20000110

08010048 <siprintf>:
 8010048:	b40e      	push	{r1, r2, r3}
 801004a:	b500      	push	{lr}
 801004c:	b09c      	sub	sp, #112	; 0x70
 801004e:	ab1d      	add	r3, sp, #116	; 0x74
 8010050:	9002      	str	r0, [sp, #8]
 8010052:	9006      	str	r0, [sp, #24]
 8010054:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010058:	4809      	ldr	r0, [pc, #36]	; (8010080 <siprintf+0x38>)
 801005a:	9107      	str	r1, [sp, #28]
 801005c:	9104      	str	r1, [sp, #16]
 801005e:	4909      	ldr	r1, [pc, #36]	; (8010084 <siprintf+0x3c>)
 8010060:	f853 2b04 	ldr.w	r2, [r3], #4
 8010064:	9105      	str	r1, [sp, #20]
 8010066:	6800      	ldr	r0, [r0, #0]
 8010068:	9301      	str	r3, [sp, #4]
 801006a:	a902      	add	r1, sp, #8
 801006c:	f003 fa72 	bl	8013554 <_svfiprintf_r>
 8010070:	9b02      	ldr	r3, [sp, #8]
 8010072:	2200      	movs	r2, #0
 8010074:	701a      	strb	r2, [r3, #0]
 8010076:	b01c      	add	sp, #112	; 0x70
 8010078:	f85d eb04 	ldr.w	lr, [sp], #4
 801007c:	b003      	add	sp, #12
 801007e:	4770      	bx	lr
 8010080:	20000110 	.word	0x20000110
 8010084:	ffff0208 	.word	0xffff0208

08010088 <siscanf>:
 8010088:	b40e      	push	{r1, r2, r3}
 801008a:	b510      	push	{r4, lr}
 801008c:	b09f      	sub	sp, #124	; 0x7c
 801008e:	ac21      	add	r4, sp, #132	; 0x84
 8010090:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010094:	f854 2b04 	ldr.w	r2, [r4], #4
 8010098:	9201      	str	r2, [sp, #4]
 801009a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801009e:	9004      	str	r0, [sp, #16]
 80100a0:	9008      	str	r0, [sp, #32]
 80100a2:	f7f0 f8af 	bl	8000204 <strlen>
 80100a6:	4b0c      	ldr	r3, [pc, #48]	; (80100d8 <siscanf+0x50>)
 80100a8:	9005      	str	r0, [sp, #20]
 80100aa:	9009      	str	r0, [sp, #36]	; 0x24
 80100ac:	930d      	str	r3, [sp, #52]	; 0x34
 80100ae:	480b      	ldr	r0, [pc, #44]	; (80100dc <siscanf+0x54>)
 80100b0:	9a01      	ldr	r2, [sp, #4]
 80100b2:	6800      	ldr	r0, [r0, #0]
 80100b4:	9403      	str	r4, [sp, #12]
 80100b6:	2300      	movs	r3, #0
 80100b8:	9311      	str	r3, [sp, #68]	; 0x44
 80100ba:	9316      	str	r3, [sp, #88]	; 0x58
 80100bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80100c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80100c4:	a904      	add	r1, sp, #16
 80100c6:	4623      	mov	r3, r4
 80100c8:	f003 fb9e 	bl	8013808 <__ssvfiscanf_r>
 80100cc:	b01f      	add	sp, #124	; 0x7c
 80100ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100d2:	b003      	add	sp, #12
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop
 80100d8:	08010103 	.word	0x08010103
 80100dc:	20000110 	.word	0x20000110

080100e0 <__sread>:
 80100e0:	b510      	push	{r4, lr}
 80100e2:	460c      	mov	r4, r1
 80100e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100e8:	f003 ffb2 	bl	8014050 <_read_r>
 80100ec:	2800      	cmp	r0, #0
 80100ee:	bfab      	itete	ge
 80100f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80100f2:	89a3      	ldrhlt	r3, [r4, #12]
 80100f4:	181b      	addge	r3, r3, r0
 80100f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80100fa:	bfac      	ite	ge
 80100fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80100fe:	81a3      	strhlt	r3, [r4, #12]
 8010100:	bd10      	pop	{r4, pc}

08010102 <__seofread>:
 8010102:	2000      	movs	r0, #0
 8010104:	4770      	bx	lr

08010106 <__swrite>:
 8010106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801010a:	461f      	mov	r7, r3
 801010c:	898b      	ldrh	r3, [r1, #12]
 801010e:	05db      	lsls	r3, r3, #23
 8010110:	4605      	mov	r5, r0
 8010112:	460c      	mov	r4, r1
 8010114:	4616      	mov	r6, r2
 8010116:	d505      	bpl.n	8010124 <__swrite+0x1e>
 8010118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801011c:	2302      	movs	r3, #2
 801011e:	2200      	movs	r2, #0
 8010120:	f002 fb72 	bl	8012808 <_lseek_r>
 8010124:	89a3      	ldrh	r3, [r4, #12]
 8010126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801012a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801012e:	81a3      	strh	r3, [r4, #12]
 8010130:	4632      	mov	r2, r6
 8010132:	463b      	mov	r3, r7
 8010134:	4628      	mov	r0, r5
 8010136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801013a:	f000 bf2b 	b.w	8010f94 <_write_r>

0801013e <__sseek>:
 801013e:	b510      	push	{r4, lr}
 8010140:	460c      	mov	r4, r1
 8010142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010146:	f002 fb5f 	bl	8012808 <_lseek_r>
 801014a:	1c43      	adds	r3, r0, #1
 801014c:	89a3      	ldrh	r3, [r4, #12]
 801014e:	bf15      	itete	ne
 8010150:	6560      	strne	r0, [r4, #84]	; 0x54
 8010152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801015a:	81a3      	strheq	r3, [r4, #12]
 801015c:	bf18      	it	ne
 801015e:	81a3      	strhne	r3, [r4, #12]
 8010160:	bd10      	pop	{r4, pc}

08010162 <__sclose>:
 8010162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010166:	f000 bf95 	b.w	8011094 <_close_r>

0801016a <strstr>:
 801016a:	780a      	ldrb	r2, [r1, #0]
 801016c:	b570      	push	{r4, r5, r6, lr}
 801016e:	b96a      	cbnz	r2, 801018c <strstr+0x22>
 8010170:	bd70      	pop	{r4, r5, r6, pc}
 8010172:	429a      	cmp	r2, r3
 8010174:	d109      	bne.n	801018a <strstr+0x20>
 8010176:	460c      	mov	r4, r1
 8010178:	4605      	mov	r5, r0
 801017a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801017e:	2b00      	cmp	r3, #0
 8010180:	d0f6      	beq.n	8010170 <strstr+0x6>
 8010182:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010186:	429e      	cmp	r6, r3
 8010188:	d0f7      	beq.n	801017a <strstr+0x10>
 801018a:	3001      	adds	r0, #1
 801018c:	7803      	ldrb	r3, [r0, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d1ef      	bne.n	8010172 <strstr+0x8>
 8010192:	4618      	mov	r0, r3
 8010194:	e7ec      	b.n	8010170 <strstr+0x6>

08010196 <sulp>:
 8010196:	b570      	push	{r4, r5, r6, lr}
 8010198:	4604      	mov	r4, r0
 801019a:	460d      	mov	r5, r1
 801019c:	ec45 4b10 	vmov	d0, r4, r5
 80101a0:	4616      	mov	r6, r2
 80101a2:	f002 ff35 	bl	8013010 <__ulp>
 80101a6:	ec51 0b10 	vmov	r0, r1, d0
 80101aa:	b17e      	cbz	r6, 80101cc <sulp+0x36>
 80101ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80101b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	dd09      	ble.n	80101cc <sulp+0x36>
 80101b8:	051b      	lsls	r3, r3, #20
 80101ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80101be:	2400      	movs	r4, #0
 80101c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80101c4:	4622      	mov	r2, r4
 80101c6:	462b      	mov	r3, r5
 80101c8:	f7f0 fa36 	bl	8000638 <__aeabi_dmul>
 80101cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080101d0 <_strtod_l>:
 80101d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	ed2d 8b02 	vpush	{d8}
 80101d8:	b09d      	sub	sp, #116	; 0x74
 80101da:	461f      	mov	r7, r3
 80101dc:	2300      	movs	r3, #0
 80101de:	9318      	str	r3, [sp, #96]	; 0x60
 80101e0:	4ba2      	ldr	r3, [pc, #648]	; (801046c <_strtod_l+0x29c>)
 80101e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	9305      	str	r3, [sp, #20]
 80101e8:	4604      	mov	r4, r0
 80101ea:	4618      	mov	r0, r3
 80101ec:	4688      	mov	r8, r1
 80101ee:	f7f0 f809 	bl	8000204 <strlen>
 80101f2:	f04f 0a00 	mov.w	sl, #0
 80101f6:	4605      	mov	r5, r0
 80101f8:	f04f 0b00 	mov.w	fp, #0
 80101fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010200:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010202:	781a      	ldrb	r2, [r3, #0]
 8010204:	2a2b      	cmp	r2, #43	; 0x2b
 8010206:	d04e      	beq.n	80102a6 <_strtod_l+0xd6>
 8010208:	d83b      	bhi.n	8010282 <_strtod_l+0xb2>
 801020a:	2a0d      	cmp	r2, #13
 801020c:	d834      	bhi.n	8010278 <_strtod_l+0xa8>
 801020e:	2a08      	cmp	r2, #8
 8010210:	d834      	bhi.n	801027c <_strtod_l+0xac>
 8010212:	2a00      	cmp	r2, #0
 8010214:	d03e      	beq.n	8010294 <_strtod_l+0xc4>
 8010216:	2300      	movs	r3, #0
 8010218:	930a      	str	r3, [sp, #40]	; 0x28
 801021a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801021c:	7833      	ldrb	r3, [r6, #0]
 801021e:	2b30      	cmp	r3, #48	; 0x30
 8010220:	f040 80b0 	bne.w	8010384 <_strtod_l+0x1b4>
 8010224:	7873      	ldrb	r3, [r6, #1]
 8010226:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801022a:	2b58      	cmp	r3, #88	; 0x58
 801022c:	d168      	bne.n	8010300 <_strtod_l+0x130>
 801022e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010230:	9301      	str	r3, [sp, #4]
 8010232:	ab18      	add	r3, sp, #96	; 0x60
 8010234:	9702      	str	r7, [sp, #8]
 8010236:	9300      	str	r3, [sp, #0]
 8010238:	4a8d      	ldr	r2, [pc, #564]	; (8010470 <_strtod_l+0x2a0>)
 801023a:	ab19      	add	r3, sp, #100	; 0x64
 801023c:	a917      	add	r1, sp, #92	; 0x5c
 801023e:	4620      	mov	r0, r4
 8010240:	f001 ffd2 	bl	80121e8 <__gethex>
 8010244:	f010 0707 	ands.w	r7, r0, #7
 8010248:	4605      	mov	r5, r0
 801024a:	d005      	beq.n	8010258 <_strtod_l+0x88>
 801024c:	2f06      	cmp	r7, #6
 801024e:	d12c      	bne.n	80102aa <_strtod_l+0xda>
 8010250:	3601      	adds	r6, #1
 8010252:	2300      	movs	r3, #0
 8010254:	9617      	str	r6, [sp, #92]	; 0x5c
 8010256:	930a      	str	r3, [sp, #40]	; 0x28
 8010258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801025a:	2b00      	cmp	r3, #0
 801025c:	f040 8590 	bne.w	8010d80 <_strtod_l+0xbb0>
 8010260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010262:	b1eb      	cbz	r3, 80102a0 <_strtod_l+0xd0>
 8010264:	4652      	mov	r2, sl
 8010266:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801026a:	ec43 2b10 	vmov	d0, r2, r3
 801026e:	b01d      	add	sp, #116	; 0x74
 8010270:	ecbd 8b02 	vpop	{d8}
 8010274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010278:	2a20      	cmp	r2, #32
 801027a:	d1cc      	bne.n	8010216 <_strtod_l+0x46>
 801027c:	3301      	adds	r3, #1
 801027e:	9317      	str	r3, [sp, #92]	; 0x5c
 8010280:	e7be      	b.n	8010200 <_strtod_l+0x30>
 8010282:	2a2d      	cmp	r2, #45	; 0x2d
 8010284:	d1c7      	bne.n	8010216 <_strtod_l+0x46>
 8010286:	2201      	movs	r2, #1
 8010288:	920a      	str	r2, [sp, #40]	; 0x28
 801028a:	1c5a      	adds	r2, r3, #1
 801028c:	9217      	str	r2, [sp, #92]	; 0x5c
 801028e:	785b      	ldrb	r3, [r3, #1]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1c2      	bne.n	801021a <_strtod_l+0x4a>
 8010294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010296:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801029a:	2b00      	cmp	r3, #0
 801029c:	f040 856e 	bne.w	8010d7c <_strtod_l+0xbac>
 80102a0:	4652      	mov	r2, sl
 80102a2:	465b      	mov	r3, fp
 80102a4:	e7e1      	b.n	801026a <_strtod_l+0x9a>
 80102a6:	2200      	movs	r2, #0
 80102a8:	e7ee      	b.n	8010288 <_strtod_l+0xb8>
 80102aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80102ac:	b13a      	cbz	r2, 80102be <_strtod_l+0xee>
 80102ae:	2135      	movs	r1, #53	; 0x35
 80102b0:	a81a      	add	r0, sp, #104	; 0x68
 80102b2:	f002 ffb8 	bl	8013226 <__copybits>
 80102b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80102b8:	4620      	mov	r0, r4
 80102ba:	f002 fb77 	bl	80129ac <_Bfree>
 80102be:	3f01      	subs	r7, #1
 80102c0:	2f04      	cmp	r7, #4
 80102c2:	d806      	bhi.n	80102d2 <_strtod_l+0x102>
 80102c4:	e8df f007 	tbb	[pc, r7]
 80102c8:	1714030a 	.word	0x1714030a
 80102cc:	0a          	.byte	0x0a
 80102cd:	00          	.byte	0x00
 80102ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80102d2:	0728      	lsls	r0, r5, #28
 80102d4:	d5c0      	bpl.n	8010258 <_strtod_l+0x88>
 80102d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80102da:	e7bd      	b.n	8010258 <_strtod_l+0x88>
 80102dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80102e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80102e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80102e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80102ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80102ee:	e7f0      	b.n	80102d2 <_strtod_l+0x102>
 80102f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010474 <_strtod_l+0x2a4>
 80102f4:	e7ed      	b.n	80102d2 <_strtod_l+0x102>
 80102f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80102fa:	f04f 3aff 	mov.w	sl, #4294967295
 80102fe:	e7e8      	b.n	80102d2 <_strtod_l+0x102>
 8010300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010302:	1c5a      	adds	r2, r3, #1
 8010304:	9217      	str	r2, [sp, #92]	; 0x5c
 8010306:	785b      	ldrb	r3, [r3, #1]
 8010308:	2b30      	cmp	r3, #48	; 0x30
 801030a:	d0f9      	beq.n	8010300 <_strtod_l+0x130>
 801030c:	2b00      	cmp	r3, #0
 801030e:	d0a3      	beq.n	8010258 <_strtod_l+0x88>
 8010310:	2301      	movs	r3, #1
 8010312:	f04f 0900 	mov.w	r9, #0
 8010316:	9304      	str	r3, [sp, #16]
 8010318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801031a:	9308      	str	r3, [sp, #32]
 801031c:	f8cd 901c 	str.w	r9, [sp, #28]
 8010320:	464f      	mov	r7, r9
 8010322:	220a      	movs	r2, #10
 8010324:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010326:	7806      	ldrb	r6, [r0, #0]
 8010328:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801032c:	b2d9      	uxtb	r1, r3
 801032e:	2909      	cmp	r1, #9
 8010330:	d92a      	bls.n	8010388 <_strtod_l+0x1b8>
 8010332:	9905      	ldr	r1, [sp, #20]
 8010334:	462a      	mov	r2, r5
 8010336:	f003 feef 	bl	8014118 <strncmp>
 801033a:	b398      	cbz	r0, 80103a4 <_strtod_l+0x1d4>
 801033c:	2000      	movs	r0, #0
 801033e:	4632      	mov	r2, r6
 8010340:	463d      	mov	r5, r7
 8010342:	9005      	str	r0, [sp, #20]
 8010344:	4603      	mov	r3, r0
 8010346:	2a65      	cmp	r2, #101	; 0x65
 8010348:	d001      	beq.n	801034e <_strtod_l+0x17e>
 801034a:	2a45      	cmp	r2, #69	; 0x45
 801034c:	d118      	bne.n	8010380 <_strtod_l+0x1b0>
 801034e:	b91d      	cbnz	r5, 8010358 <_strtod_l+0x188>
 8010350:	9a04      	ldr	r2, [sp, #16]
 8010352:	4302      	orrs	r2, r0
 8010354:	d09e      	beq.n	8010294 <_strtod_l+0xc4>
 8010356:	2500      	movs	r5, #0
 8010358:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801035c:	f108 0201 	add.w	r2, r8, #1
 8010360:	9217      	str	r2, [sp, #92]	; 0x5c
 8010362:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010366:	2a2b      	cmp	r2, #43	; 0x2b
 8010368:	d075      	beq.n	8010456 <_strtod_l+0x286>
 801036a:	2a2d      	cmp	r2, #45	; 0x2d
 801036c:	d07b      	beq.n	8010466 <_strtod_l+0x296>
 801036e:	f04f 0c00 	mov.w	ip, #0
 8010372:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010376:	2909      	cmp	r1, #9
 8010378:	f240 8082 	bls.w	8010480 <_strtod_l+0x2b0>
 801037c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010380:	2600      	movs	r6, #0
 8010382:	e09d      	b.n	80104c0 <_strtod_l+0x2f0>
 8010384:	2300      	movs	r3, #0
 8010386:	e7c4      	b.n	8010312 <_strtod_l+0x142>
 8010388:	2f08      	cmp	r7, #8
 801038a:	bfd8      	it	le
 801038c:	9907      	ldrle	r1, [sp, #28]
 801038e:	f100 0001 	add.w	r0, r0, #1
 8010392:	bfda      	itte	le
 8010394:	fb02 3301 	mlale	r3, r2, r1, r3
 8010398:	9307      	strle	r3, [sp, #28]
 801039a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801039e:	3701      	adds	r7, #1
 80103a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80103a2:	e7bf      	b.n	8010324 <_strtod_l+0x154>
 80103a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103a6:	195a      	adds	r2, r3, r5
 80103a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80103aa:	5d5a      	ldrb	r2, [r3, r5]
 80103ac:	2f00      	cmp	r7, #0
 80103ae:	d037      	beq.n	8010420 <_strtod_l+0x250>
 80103b0:	9005      	str	r0, [sp, #20]
 80103b2:	463d      	mov	r5, r7
 80103b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80103b8:	2b09      	cmp	r3, #9
 80103ba:	d912      	bls.n	80103e2 <_strtod_l+0x212>
 80103bc:	2301      	movs	r3, #1
 80103be:	e7c2      	b.n	8010346 <_strtod_l+0x176>
 80103c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103c2:	1c5a      	adds	r2, r3, #1
 80103c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80103c6:	785a      	ldrb	r2, [r3, #1]
 80103c8:	3001      	adds	r0, #1
 80103ca:	2a30      	cmp	r2, #48	; 0x30
 80103cc:	d0f8      	beq.n	80103c0 <_strtod_l+0x1f0>
 80103ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80103d2:	2b08      	cmp	r3, #8
 80103d4:	f200 84d9 	bhi.w	8010d8a <_strtod_l+0xbba>
 80103d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103da:	9005      	str	r0, [sp, #20]
 80103dc:	2000      	movs	r0, #0
 80103de:	9308      	str	r3, [sp, #32]
 80103e0:	4605      	mov	r5, r0
 80103e2:	3a30      	subs	r2, #48	; 0x30
 80103e4:	f100 0301 	add.w	r3, r0, #1
 80103e8:	d014      	beq.n	8010414 <_strtod_l+0x244>
 80103ea:	9905      	ldr	r1, [sp, #20]
 80103ec:	4419      	add	r1, r3
 80103ee:	9105      	str	r1, [sp, #20]
 80103f0:	462b      	mov	r3, r5
 80103f2:	eb00 0e05 	add.w	lr, r0, r5
 80103f6:	210a      	movs	r1, #10
 80103f8:	4573      	cmp	r3, lr
 80103fa:	d113      	bne.n	8010424 <_strtod_l+0x254>
 80103fc:	182b      	adds	r3, r5, r0
 80103fe:	2b08      	cmp	r3, #8
 8010400:	f105 0501 	add.w	r5, r5, #1
 8010404:	4405      	add	r5, r0
 8010406:	dc1c      	bgt.n	8010442 <_strtod_l+0x272>
 8010408:	9907      	ldr	r1, [sp, #28]
 801040a:	230a      	movs	r3, #10
 801040c:	fb03 2301 	mla	r3, r3, r1, r2
 8010410:	9307      	str	r3, [sp, #28]
 8010412:	2300      	movs	r3, #0
 8010414:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010416:	1c51      	adds	r1, r2, #1
 8010418:	9117      	str	r1, [sp, #92]	; 0x5c
 801041a:	7852      	ldrb	r2, [r2, #1]
 801041c:	4618      	mov	r0, r3
 801041e:	e7c9      	b.n	80103b4 <_strtod_l+0x1e4>
 8010420:	4638      	mov	r0, r7
 8010422:	e7d2      	b.n	80103ca <_strtod_l+0x1fa>
 8010424:	2b08      	cmp	r3, #8
 8010426:	dc04      	bgt.n	8010432 <_strtod_l+0x262>
 8010428:	9e07      	ldr	r6, [sp, #28]
 801042a:	434e      	muls	r6, r1
 801042c:	9607      	str	r6, [sp, #28]
 801042e:	3301      	adds	r3, #1
 8010430:	e7e2      	b.n	80103f8 <_strtod_l+0x228>
 8010432:	f103 0c01 	add.w	ip, r3, #1
 8010436:	f1bc 0f10 	cmp.w	ip, #16
 801043a:	bfd8      	it	le
 801043c:	fb01 f909 	mulle.w	r9, r1, r9
 8010440:	e7f5      	b.n	801042e <_strtod_l+0x25e>
 8010442:	2d10      	cmp	r5, #16
 8010444:	bfdc      	itt	le
 8010446:	230a      	movle	r3, #10
 8010448:	fb03 2909 	mlale	r9, r3, r9, r2
 801044c:	e7e1      	b.n	8010412 <_strtod_l+0x242>
 801044e:	2300      	movs	r3, #0
 8010450:	9305      	str	r3, [sp, #20]
 8010452:	2301      	movs	r3, #1
 8010454:	e77c      	b.n	8010350 <_strtod_l+0x180>
 8010456:	f04f 0c00 	mov.w	ip, #0
 801045a:	f108 0202 	add.w	r2, r8, #2
 801045e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010460:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010464:	e785      	b.n	8010372 <_strtod_l+0x1a2>
 8010466:	f04f 0c01 	mov.w	ip, #1
 801046a:	e7f6      	b.n	801045a <_strtod_l+0x28a>
 801046c:	08015428 	.word	0x08015428
 8010470:	0801527c 	.word	0x0801527c
 8010474:	7ff00000 	.word	0x7ff00000
 8010478:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801047a:	1c51      	adds	r1, r2, #1
 801047c:	9117      	str	r1, [sp, #92]	; 0x5c
 801047e:	7852      	ldrb	r2, [r2, #1]
 8010480:	2a30      	cmp	r2, #48	; 0x30
 8010482:	d0f9      	beq.n	8010478 <_strtod_l+0x2a8>
 8010484:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010488:	2908      	cmp	r1, #8
 801048a:	f63f af79 	bhi.w	8010380 <_strtod_l+0x1b0>
 801048e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010492:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010494:	9206      	str	r2, [sp, #24]
 8010496:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010498:	1c51      	adds	r1, r2, #1
 801049a:	9117      	str	r1, [sp, #92]	; 0x5c
 801049c:	7852      	ldrb	r2, [r2, #1]
 801049e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80104a2:	2e09      	cmp	r6, #9
 80104a4:	d937      	bls.n	8010516 <_strtod_l+0x346>
 80104a6:	9e06      	ldr	r6, [sp, #24]
 80104a8:	1b89      	subs	r1, r1, r6
 80104aa:	2908      	cmp	r1, #8
 80104ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80104b0:	dc02      	bgt.n	80104b8 <_strtod_l+0x2e8>
 80104b2:	4576      	cmp	r6, lr
 80104b4:	bfa8      	it	ge
 80104b6:	4676      	movge	r6, lr
 80104b8:	f1bc 0f00 	cmp.w	ip, #0
 80104bc:	d000      	beq.n	80104c0 <_strtod_l+0x2f0>
 80104be:	4276      	negs	r6, r6
 80104c0:	2d00      	cmp	r5, #0
 80104c2:	d14d      	bne.n	8010560 <_strtod_l+0x390>
 80104c4:	9904      	ldr	r1, [sp, #16]
 80104c6:	4301      	orrs	r1, r0
 80104c8:	f47f aec6 	bne.w	8010258 <_strtod_l+0x88>
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	f47f aee1 	bne.w	8010294 <_strtod_l+0xc4>
 80104d2:	2a69      	cmp	r2, #105	; 0x69
 80104d4:	d027      	beq.n	8010526 <_strtod_l+0x356>
 80104d6:	dc24      	bgt.n	8010522 <_strtod_l+0x352>
 80104d8:	2a49      	cmp	r2, #73	; 0x49
 80104da:	d024      	beq.n	8010526 <_strtod_l+0x356>
 80104dc:	2a4e      	cmp	r2, #78	; 0x4e
 80104de:	f47f aed9 	bne.w	8010294 <_strtod_l+0xc4>
 80104e2:	499f      	ldr	r1, [pc, #636]	; (8010760 <_strtod_l+0x590>)
 80104e4:	a817      	add	r0, sp, #92	; 0x5c
 80104e6:	f002 f8d7 	bl	8012698 <__match>
 80104ea:	2800      	cmp	r0, #0
 80104ec:	f43f aed2 	beq.w	8010294 <_strtod_l+0xc4>
 80104f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	2b28      	cmp	r3, #40	; 0x28
 80104f6:	d12d      	bne.n	8010554 <_strtod_l+0x384>
 80104f8:	499a      	ldr	r1, [pc, #616]	; (8010764 <_strtod_l+0x594>)
 80104fa:	aa1a      	add	r2, sp, #104	; 0x68
 80104fc:	a817      	add	r0, sp, #92	; 0x5c
 80104fe:	f002 f8df 	bl	80126c0 <__hexnan>
 8010502:	2805      	cmp	r0, #5
 8010504:	d126      	bne.n	8010554 <_strtod_l+0x384>
 8010506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010508:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801050c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010510:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010514:	e6a0      	b.n	8010258 <_strtod_l+0x88>
 8010516:	210a      	movs	r1, #10
 8010518:	fb01 2e0e 	mla	lr, r1, lr, r2
 801051c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010520:	e7b9      	b.n	8010496 <_strtod_l+0x2c6>
 8010522:	2a6e      	cmp	r2, #110	; 0x6e
 8010524:	e7db      	b.n	80104de <_strtod_l+0x30e>
 8010526:	4990      	ldr	r1, [pc, #576]	; (8010768 <_strtod_l+0x598>)
 8010528:	a817      	add	r0, sp, #92	; 0x5c
 801052a:	f002 f8b5 	bl	8012698 <__match>
 801052e:	2800      	cmp	r0, #0
 8010530:	f43f aeb0 	beq.w	8010294 <_strtod_l+0xc4>
 8010534:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010536:	498d      	ldr	r1, [pc, #564]	; (801076c <_strtod_l+0x59c>)
 8010538:	3b01      	subs	r3, #1
 801053a:	a817      	add	r0, sp, #92	; 0x5c
 801053c:	9317      	str	r3, [sp, #92]	; 0x5c
 801053e:	f002 f8ab 	bl	8012698 <__match>
 8010542:	b910      	cbnz	r0, 801054a <_strtod_l+0x37a>
 8010544:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010546:	3301      	adds	r3, #1
 8010548:	9317      	str	r3, [sp, #92]	; 0x5c
 801054a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801077c <_strtod_l+0x5ac>
 801054e:	f04f 0a00 	mov.w	sl, #0
 8010552:	e681      	b.n	8010258 <_strtod_l+0x88>
 8010554:	4886      	ldr	r0, [pc, #536]	; (8010770 <_strtod_l+0x5a0>)
 8010556:	f003 fd8f 	bl	8014078 <nan>
 801055a:	ec5b ab10 	vmov	sl, fp, d0
 801055e:	e67b      	b.n	8010258 <_strtod_l+0x88>
 8010560:	9b05      	ldr	r3, [sp, #20]
 8010562:	9807      	ldr	r0, [sp, #28]
 8010564:	1af3      	subs	r3, r6, r3
 8010566:	2f00      	cmp	r7, #0
 8010568:	bf08      	it	eq
 801056a:	462f      	moveq	r7, r5
 801056c:	2d10      	cmp	r5, #16
 801056e:	9306      	str	r3, [sp, #24]
 8010570:	46a8      	mov	r8, r5
 8010572:	bfa8      	it	ge
 8010574:	f04f 0810 	movge.w	r8, #16
 8010578:	f7ef ffe4 	bl	8000544 <__aeabi_ui2d>
 801057c:	2d09      	cmp	r5, #9
 801057e:	4682      	mov	sl, r0
 8010580:	468b      	mov	fp, r1
 8010582:	dd13      	ble.n	80105ac <_strtod_l+0x3dc>
 8010584:	4b7b      	ldr	r3, [pc, #492]	; (8010774 <_strtod_l+0x5a4>)
 8010586:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801058a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801058e:	f7f0 f853 	bl	8000638 <__aeabi_dmul>
 8010592:	4682      	mov	sl, r0
 8010594:	4648      	mov	r0, r9
 8010596:	468b      	mov	fp, r1
 8010598:	f7ef ffd4 	bl	8000544 <__aeabi_ui2d>
 801059c:	4602      	mov	r2, r0
 801059e:	460b      	mov	r3, r1
 80105a0:	4650      	mov	r0, sl
 80105a2:	4659      	mov	r1, fp
 80105a4:	f7ef fe92 	bl	80002cc <__adddf3>
 80105a8:	4682      	mov	sl, r0
 80105aa:	468b      	mov	fp, r1
 80105ac:	2d0f      	cmp	r5, #15
 80105ae:	dc38      	bgt.n	8010622 <_strtod_l+0x452>
 80105b0:	9b06      	ldr	r3, [sp, #24]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	f43f ae50 	beq.w	8010258 <_strtod_l+0x88>
 80105b8:	dd24      	ble.n	8010604 <_strtod_l+0x434>
 80105ba:	2b16      	cmp	r3, #22
 80105bc:	dc0b      	bgt.n	80105d6 <_strtod_l+0x406>
 80105be:	496d      	ldr	r1, [pc, #436]	; (8010774 <_strtod_l+0x5a4>)
 80105c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80105c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105c8:	4652      	mov	r2, sl
 80105ca:	465b      	mov	r3, fp
 80105cc:	f7f0 f834 	bl	8000638 <__aeabi_dmul>
 80105d0:	4682      	mov	sl, r0
 80105d2:	468b      	mov	fp, r1
 80105d4:	e640      	b.n	8010258 <_strtod_l+0x88>
 80105d6:	9a06      	ldr	r2, [sp, #24]
 80105d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80105dc:	4293      	cmp	r3, r2
 80105de:	db20      	blt.n	8010622 <_strtod_l+0x452>
 80105e0:	4c64      	ldr	r4, [pc, #400]	; (8010774 <_strtod_l+0x5a4>)
 80105e2:	f1c5 050f 	rsb	r5, r5, #15
 80105e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80105ea:	4652      	mov	r2, sl
 80105ec:	465b      	mov	r3, fp
 80105ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105f2:	f7f0 f821 	bl	8000638 <__aeabi_dmul>
 80105f6:	9b06      	ldr	r3, [sp, #24]
 80105f8:	1b5d      	subs	r5, r3, r5
 80105fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80105fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010602:	e7e3      	b.n	80105cc <_strtod_l+0x3fc>
 8010604:	9b06      	ldr	r3, [sp, #24]
 8010606:	3316      	adds	r3, #22
 8010608:	db0b      	blt.n	8010622 <_strtod_l+0x452>
 801060a:	9b05      	ldr	r3, [sp, #20]
 801060c:	1b9e      	subs	r6, r3, r6
 801060e:	4b59      	ldr	r3, [pc, #356]	; (8010774 <_strtod_l+0x5a4>)
 8010610:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010614:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010618:	4650      	mov	r0, sl
 801061a:	4659      	mov	r1, fp
 801061c:	f7f0 f936 	bl	800088c <__aeabi_ddiv>
 8010620:	e7d6      	b.n	80105d0 <_strtod_l+0x400>
 8010622:	9b06      	ldr	r3, [sp, #24]
 8010624:	eba5 0808 	sub.w	r8, r5, r8
 8010628:	4498      	add	r8, r3
 801062a:	f1b8 0f00 	cmp.w	r8, #0
 801062e:	dd74      	ble.n	801071a <_strtod_l+0x54a>
 8010630:	f018 030f 	ands.w	r3, r8, #15
 8010634:	d00a      	beq.n	801064c <_strtod_l+0x47c>
 8010636:	494f      	ldr	r1, [pc, #316]	; (8010774 <_strtod_l+0x5a4>)
 8010638:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801063c:	4652      	mov	r2, sl
 801063e:	465b      	mov	r3, fp
 8010640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010644:	f7ef fff8 	bl	8000638 <__aeabi_dmul>
 8010648:	4682      	mov	sl, r0
 801064a:	468b      	mov	fp, r1
 801064c:	f038 080f 	bics.w	r8, r8, #15
 8010650:	d04f      	beq.n	80106f2 <_strtod_l+0x522>
 8010652:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010656:	dd22      	ble.n	801069e <_strtod_l+0x4ce>
 8010658:	2500      	movs	r5, #0
 801065a:	462e      	mov	r6, r5
 801065c:	9507      	str	r5, [sp, #28]
 801065e:	9505      	str	r5, [sp, #20]
 8010660:	2322      	movs	r3, #34	; 0x22
 8010662:	f8df b118 	ldr.w	fp, [pc, #280]	; 801077c <_strtod_l+0x5ac>
 8010666:	6023      	str	r3, [r4, #0]
 8010668:	f04f 0a00 	mov.w	sl, #0
 801066c:	9b07      	ldr	r3, [sp, #28]
 801066e:	2b00      	cmp	r3, #0
 8010670:	f43f adf2 	beq.w	8010258 <_strtod_l+0x88>
 8010674:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010676:	4620      	mov	r0, r4
 8010678:	f002 f998 	bl	80129ac <_Bfree>
 801067c:	9905      	ldr	r1, [sp, #20]
 801067e:	4620      	mov	r0, r4
 8010680:	f002 f994 	bl	80129ac <_Bfree>
 8010684:	4631      	mov	r1, r6
 8010686:	4620      	mov	r0, r4
 8010688:	f002 f990 	bl	80129ac <_Bfree>
 801068c:	9907      	ldr	r1, [sp, #28]
 801068e:	4620      	mov	r0, r4
 8010690:	f002 f98c 	bl	80129ac <_Bfree>
 8010694:	4629      	mov	r1, r5
 8010696:	4620      	mov	r0, r4
 8010698:	f002 f988 	bl	80129ac <_Bfree>
 801069c:	e5dc      	b.n	8010258 <_strtod_l+0x88>
 801069e:	4b36      	ldr	r3, [pc, #216]	; (8010778 <_strtod_l+0x5a8>)
 80106a0:	9304      	str	r3, [sp, #16]
 80106a2:	2300      	movs	r3, #0
 80106a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80106a8:	4650      	mov	r0, sl
 80106aa:	4659      	mov	r1, fp
 80106ac:	4699      	mov	r9, r3
 80106ae:	f1b8 0f01 	cmp.w	r8, #1
 80106b2:	dc21      	bgt.n	80106f8 <_strtod_l+0x528>
 80106b4:	b10b      	cbz	r3, 80106ba <_strtod_l+0x4ea>
 80106b6:	4682      	mov	sl, r0
 80106b8:	468b      	mov	fp, r1
 80106ba:	4b2f      	ldr	r3, [pc, #188]	; (8010778 <_strtod_l+0x5a8>)
 80106bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80106c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80106c4:	4652      	mov	r2, sl
 80106c6:	465b      	mov	r3, fp
 80106c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80106cc:	f7ef ffb4 	bl	8000638 <__aeabi_dmul>
 80106d0:	4b2a      	ldr	r3, [pc, #168]	; (801077c <_strtod_l+0x5ac>)
 80106d2:	460a      	mov	r2, r1
 80106d4:	400b      	ands	r3, r1
 80106d6:	492a      	ldr	r1, [pc, #168]	; (8010780 <_strtod_l+0x5b0>)
 80106d8:	428b      	cmp	r3, r1
 80106da:	4682      	mov	sl, r0
 80106dc:	d8bc      	bhi.n	8010658 <_strtod_l+0x488>
 80106de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80106e2:	428b      	cmp	r3, r1
 80106e4:	bf86      	itte	hi
 80106e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010784 <_strtod_l+0x5b4>
 80106ea:	f04f 3aff 	movhi.w	sl, #4294967295
 80106ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80106f2:	2300      	movs	r3, #0
 80106f4:	9304      	str	r3, [sp, #16]
 80106f6:	e084      	b.n	8010802 <_strtod_l+0x632>
 80106f8:	f018 0f01 	tst.w	r8, #1
 80106fc:	d005      	beq.n	801070a <_strtod_l+0x53a>
 80106fe:	9b04      	ldr	r3, [sp, #16]
 8010700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010704:	f7ef ff98 	bl	8000638 <__aeabi_dmul>
 8010708:	2301      	movs	r3, #1
 801070a:	9a04      	ldr	r2, [sp, #16]
 801070c:	3208      	adds	r2, #8
 801070e:	f109 0901 	add.w	r9, r9, #1
 8010712:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010716:	9204      	str	r2, [sp, #16]
 8010718:	e7c9      	b.n	80106ae <_strtod_l+0x4de>
 801071a:	d0ea      	beq.n	80106f2 <_strtod_l+0x522>
 801071c:	f1c8 0800 	rsb	r8, r8, #0
 8010720:	f018 020f 	ands.w	r2, r8, #15
 8010724:	d00a      	beq.n	801073c <_strtod_l+0x56c>
 8010726:	4b13      	ldr	r3, [pc, #76]	; (8010774 <_strtod_l+0x5a4>)
 8010728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801072c:	4650      	mov	r0, sl
 801072e:	4659      	mov	r1, fp
 8010730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010734:	f7f0 f8aa 	bl	800088c <__aeabi_ddiv>
 8010738:	4682      	mov	sl, r0
 801073a:	468b      	mov	fp, r1
 801073c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010740:	d0d7      	beq.n	80106f2 <_strtod_l+0x522>
 8010742:	f1b8 0f1f 	cmp.w	r8, #31
 8010746:	dd1f      	ble.n	8010788 <_strtod_l+0x5b8>
 8010748:	2500      	movs	r5, #0
 801074a:	462e      	mov	r6, r5
 801074c:	9507      	str	r5, [sp, #28]
 801074e:	9505      	str	r5, [sp, #20]
 8010750:	2322      	movs	r3, #34	; 0x22
 8010752:	f04f 0a00 	mov.w	sl, #0
 8010756:	f04f 0b00 	mov.w	fp, #0
 801075a:	6023      	str	r3, [r4, #0]
 801075c:	e786      	b.n	801066c <_strtod_l+0x49c>
 801075e:	bf00      	nop
 8010760:	08015251 	.word	0x08015251
 8010764:	08015290 	.word	0x08015290
 8010768:	08015249 	.word	0x08015249
 801076c:	080152d3 	.word	0x080152d3
 8010770:	080155fb 	.word	0x080155fb
 8010774:	080154c0 	.word	0x080154c0
 8010778:	08015498 	.word	0x08015498
 801077c:	7ff00000 	.word	0x7ff00000
 8010780:	7ca00000 	.word	0x7ca00000
 8010784:	7fefffff 	.word	0x7fefffff
 8010788:	f018 0310 	ands.w	r3, r8, #16
 801078c:	bf18      	it	ne
 801078e:	236a      	movne	r3, #106	; 0x6a
 8010790:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010b40 <_strtod_l+0x970>
 8010794:	9304      	str	r3, [sp, #16]
 8010796:	4650      	mov	r0, sl
 8010798:	4659      	mov	r1, fp
 801079a:	2300      	movs	r3, #0
 801079c:	f018 0f01 	tst.w	r8, #1
 80107a0:	d004      	beq.n	80107ac <_strtod_l+0x5dc>
 80107a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80107a6:	f7ef ff47 	bl	8000638 <__aeabi_dmul>
 80107aa:	2301      	movs	r3, #1
 80107ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80107b0:	f109 0908 	add.w	r9, r9, #8
 80107b4:	d1f2      	bne.n	801079c <_strtod_l+0x5cc>
 80107b6:	b10b      	cbz	r3, 80107bc <_strtod_l+0x5ec>
 80107b8:	4682      	mov	sl, r0
 80107ba:	468b      	mov	fp, r1
 80107bc:	9b04      	ldr	r3, [sp, #16]
 80107be:	b1c3      	cbz	r3, 80107f2 <_strtod_l+0x622>
 80107c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80107c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	4659      	mov	r1, fp
 80107cc:	dd11      	ble.n	80107f2 <_strtod_l+0x622>
 80107ce:	2b1f      	cmp	r3, #31
 80107d0:	f340 8124 	ble.w	8010a1c <_strtod_l+0x84c>
 80107d4:	2b34      	cmp	r3, #52	; 0x34
 80107d6:	bfde      	ittt	le
 80107d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80107dc:	f04f 33ff 	movle.w	r3, #4294967295
 80107e0:	fa03 f202 	lslle.w	r2, r3, r2
 80107e4:	f04f 0a00 	mov.w	sl, #0
 80107e8:	bfcc      	ite	gt
 80107ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80107ee:	ea02 0b01 	andle.w	fp, r2, r1
 80107f2:	2200      	movs	r2, #0
 80107f4:	2300      	movs	r3, #0
 80107f6:	4650      	mov	r0, sl
 80107f8:	4659      	mov	r1, fp
 80107fa:	f7f0 f985 	bl	8000b08 <__aeabi_dcmpeq>
 80107fe:	2800      	cmp	r0, #0
 8010800:	d1a2      	bne.n	8010748 <_strtod_l+0x578>
 8010802:	9b07      	ldr	r3, [sp, #28]
 8010804:	9300      	str	r3, [sp, #0]
 8010806:	9908      	ldr	r1, [sp, #32]
 8010808:	462b      	mov	r3, r5
 801080a:	463a      	mov	r2, r7
 801080c:	4620      	mov	r0, r4
 801080e:	f002 f935 	bl	8012a7c <__s2b>
 8010812:	9007      	str	r0, [sp, #28]
 8010814:	2800      	cmp	r0, #0
 8010816:	f43f af1f 	beq.w	8010658 <_strtod_l+0x488>
 801081a:	9b05      	ldr	r3, [sp, #20]
 801081c:	1b9e      	subs	r6, r3, r6
 801081e:	9b06      	ldr	r3, [sp, #24]
 8010820:	2b00      	cmp	r3, #0
 8010822:	bfb4      	ite	lt
 8010824:	4633      	movlt	r3, r6
 8010826:	2300      	movge	r3, #0
 8010828:	930c      	str	r3, [sp, #48]	; 0x30
 801082a:	9b06      	ldr	r3, [sp, #24]
 801082c:	2500      	movs	r5, #0
 801082e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010832:	9312      	str	r3, [sp, #72]	; 0x48
 8010834:	462e      	mov	r6, r5
 8010836:	9b07      	ldr	r3, [sp, #28]
 8010838:	4620      	mov	r0, r4
 801083a:	6859      	ldr	r1, [r3, #4]
 801083c:	f002 f876 	bl	801292c <_Balloc>
 8010840:	9005      	str	r0, [sp, #20]
 8010842:	2800      	cmp	r0, #0
 8010844:	f43f af0c 	beq.w	8010660 <_strtod_l+0x490>
 8010848:	9b07      	ldr	r3, [sp, #28]
 801084a:	691a      	ldr	r2, [r3, #16]
 801084c:	3202      	adds	r2, #2
 801084e:	f103 010c 	add.w	r1, r3, #12
 8010852:	0092      	lsls	r2, r2, #2
 8010854:	300c      	adds	r0, #12
 8010856:	f7fe fc85 	bl	800f164 <memcpy>
 801085a:	ec4b ab10 	vmov	d0, sl, fp
 801085e:	aa1a      	add	r2, sp, #104	; 0x68
 8010860:	a919      	add	r1, sp, #100	; 0x64
 8010862:	4620      	mov	r0, r4
 8010864:	f002 fc50 	bl	8013108 <__d2b>
 8010868:	ec4b ab18 	vmov	d8, sl, fp
 801086c:	9018      	str	r0, [sp, #96]	; 0x60
 801086e:	2800      	cmp	r0, #0
 8010870:	f43f aef6 	beq.w	8010660 <_strtod_l+0x490>
 8010874:	2101      	movs	r1, #1
 8010876:	4620      	mov	r0, r4
 8010878:	f002 f99a 	bl	8012bb0 <__i2b>
 801087c:	4606      	mov	r6, r0
 801087e:	2800      	cmp	r0, #0
 8010880:	f43f aeee 	beq.w	8010660 <_strtod_l+0x490>
 8010884:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010886:	9904      	ldr	r1, [sp, #16]
 8010888:	2b00      	cmp	r3, #0
 801088a:	bfab      	itete	ge
 801088c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801088e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010890:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010892:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010896:	bfac      	ite	ge
 8010898:	eb03 0902 	addge.w	r9, r3, r2
 801089c:	1ad7      	sublt	r7, r2, r3
 801089e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80108a0:	eba3 0801 	sub.w	r8, r3, r1
 80108a4:	4490      	add	r8, r2
 80108a6:	4ba1      	ldr	r3, [pc, #644]	; (8010b2c <_strtod_l+0x95c>)
 80108a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80108ac:	4598      	cmp	r8, r3
 80108ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80108b2:	f280 80c7 	bge.w	8010a44 <_strtod_l+0x874>
 80108b6:	eba3 0308 	sub.w	r3, r3, r8
 80108ba:	2b1f      	cmp	r3, #31
 80108bc:	eba2 0203 	sub.w	r2, r2, r3
 80108c0:	f04f 0101 	mov.w	r1, #1
 80108c4:	f300 80b1 	bgt.w	8010a2a <_strtod_l+0x85a>
 80108c8:	fa01 f303 	lsl.w	r3, r1, r3
 80108cc:	930d      	str	r3, [sp, #52]	; 0x34
 80108ce:	2300      	movs	r3, #0
 80108d0:	9308      	str	r3, [sp, #32]
 80108d2:	eb09 0802 	add.w	r8, r9, r2
 80108d6:	9b04      	ldr	r3, [sp, #16]
 80108d8:	45c1      	cmp	r9, r8
 80108da:	4417      	add	r7, r2
 80108dc:	441f      	add	r7, r3
 80108de:	464b      	mov	r3, r9
 80108e0:	bfa8      	it	ge
 80108e2:	4643      	movge	r3, r8
 80108e4:	42bb      	cmp	r3, r7
 80108e6:	bfa8      	it	ge
 80108e8:	463b      	movge	r3, r7
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	bfc2      	ittt	gt
 80108ee:	eba8 0803 	subgt.w	r8, r8, r3
 80108f2:	1aff      	subgt	r7, r7, r3
 80108f4:	eba9 0903 	subgt.w	r9, r9, r3
 80108f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	dd17      	ble.n	801092e <_strtod_l+0x75e>
 80108fe:	4631      	mov	r1, r6
 8010900:	461a      	mov	r2, r3
 8010902:	4620      	mov	r0, r4
 8010904:	f002 fa14 	bl	8012d30 <__pow5mult>
 8010908:	4606      	mov	r6, r0
 801090a:	2800      	cmp	r0, #0
 801090c:	f43f aea8 	beq.w	8010660 <_strtod_l+0x490>
 8010910:	4601      	mov	r1, r0
 8010912:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010914:	4620      	mov	r0, r4
 8010916:	f002 f961 	bl	8012bdc <__multiply>
 801091a:	900b      	str	r0, [sp, #44]	; 0x2c
 801091c:	2800      	cmp	r0, #0
 801091e:	f43f ae9f 	beq.w	8010660 <_strtod_l+0x490>
 8010922:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010924:	4620      	mov	r0, r4
 8010926:	f002 f841 	bl	80129ac <_Bfree>
 801092a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801092c:	9318      	str	r3, [sp, #96]	; 0x60
 801092e:	f1b8 0f00 	cmp.w	r8, #0
 8010932:	f300 808c 	bgt.w	8010a4e <_strtod_l+0x87e>
 8010936:	9b06      	ldr	r3, [sp, #24]
 8010938:	2b00      	cmp	r3, #0
 801093a:	dd08      	ble.n	801094e <_strtod_l+0x77e>
 801093c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801093e:	9905      	ldr	r1, [sp, #20]
 8010940:	4620      	mov	r0, r4
 8010942:	f002 f9f5 	bl	8012d30 <__pow5mult>
 8010946:	9005      	str	r0, [sp, #20]
 8010948:	2800      	cmp	r0, #0
 801094a:	f43f ae89 	beq.w	8010660 <_strtod_l+0x490>
 801094e:	2f00      	cmp	r7, #0
 8010950:	dd08      	ble.n	8010964 <_strtod_l+0x794>
 8010952:	9905      	ldr	r1, [sp, #20]
 8010954:	463a      	mov	r2, r7
 8010956:	4620      	mov	r0, r4
 8010958:	f002 fa44 	bl	8012de4 <__lshift>
 801095c:	9005      	str	r0, [sp, #20]
 801095e:	2800      	cmp	r0, #0
 8010960:	f43f ae7e 	beq.w	8010660 <_strtod_l+0x490>
 8010964:	f1b9 0f00 	cmp.w	r9, #0
 8010968:	dd08      	ble.n	801097c <_strtod_l+0x7ac>
 801096a:	4631      	mov	r1, r6
 801096c:	464a      	mov	r2, r9
 801096e:	4620      	mov	r0, r4
 8010970:	f002 fa38 	bl	8012de4 <__lshift>
 8010974:	4606      	mov	r6, r0
 8010976:	2800      	cmp	r0, #0
 8010978:	f43f ae72 	beq.w	8010660 <_strtod_l+0x490>
 801097c:	9a05      	ldr	r2, [sp, #20]
 801097e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010980:	4620      	mov	r0, r4
 8010982:	f002 fabb 	bl	8012efc <__mdiff>
 8010986:	4605      	mov	r5, r0
 8010988:	2800      	cmp	r0, #0
 801098a:	f43f ae69 	beq.w	8010660 <_strtod_l+0x490>
 801098e:	68c3      	ldr	r3, [r0, #12]
 8010990:	930b      	str	r3, [sp, #44]	; 0x2c
 8010992:	2300      	movs	r3, #0
 8010994:	60c3      	str	r3, [r0, #12]
 8010996:	4631      	mov	r1, r6
 8010998:	f002 fa94 	bl	8012ec4 <__mcmp>
 801099c:	2800      	cmp	r0, #0
 801099e:	da60      	bge.n	8010a62 <_strtod_l+0x892>
 80109a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109a2:	ea53 030a 	orrs.w	r3, r3, sl
 80109a6:	f040 8082 	bne.w	8010aae <_strtod_l+0x8de>
 80109aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d17d      	bne.n	8010aae <_strtod_l+0x8de>
 80109b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80109b6:	0d1b      	lsrs	r3, r3, #20
 80109b8:	051b      	lsls	r3, r3, #20
 80109ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80109be:	d976      	bls.n	8010aae <_strtod_l+0x8de>
 80109c0:	696b      	ldr	r3, [r5, #20]
 80109c2:	b913      	cbnz	r3, 80109ca <_strtod_l+0x7fa>
 80109c4:	692b      	ldr	r3, [r5, #16]
 80109c6:	2b01      	cmp	r3, #1
 80109c8:	dd71      	ble.n	8010aae <_strtod_l+0x8de>
 80109ca:	4629      	mov	r1, r5
 80109cc:	2201      	movs	r2, #1
 80109ce:	4620      	mov	r0, r4
 80109d0:	f002 fa08 	bl	8012de4 <__lshift>
 80109d4:	4631      	mov	r1, r6
 80109d6:	4605      	mov	r5, r0
 80109d8:	f002 fa74 	bl	8012ec4 <__mcmp>
 80109dc:	2800      	cmp	r0, #0
 80109de:	dd66      	ble.n	8010aae <_strtod_l+0x8de>
 80109e0:	9904      	ldr	r1, [sp, #16]
 80109e2:	4a53      	ldr	r2, [pc, #332]	; (8010b30 <_strtod_l+0x960>)
 80109e4:	465b      	mov	r3, fp
 80109e6:	2900      	cmp	r1, #0
 80109e8:	f000 8081 	beq.w	8010aee <_strtod_l+0x91e>
 80109ec:	ea02 010b 	and.w	r1, r2, fp
 80109f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80109f4:	dc7b      	bgt.n	8010aee <_strtod_l+0x91e>
 80109f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80109fa:	f77f aea9 	ble.w	8010750 <_strtod_l+0x580>
 80109fe:	4b4d      	ldr	r3, [pc, #308]	; (8010b34 <_strtod_l+0x964>)
 8010a00:	4650      	mov	r0, sl
 8010a02:	4659      	mov	r1, fp
 8010a04:	2200      	movs	r2, #0
 8010a06:	f7ef fe17 	bl	8000638 <__aeabi_dmul>
 8010a0a:	460b      	mov	r3, r1
 8010a0c:	4303      	orrs	r3, r0
 8010a0e:	bf08      	it	eq
 8010a10:	2322      	moveq	r3, #34	; 0x22
 8010a12:	4682      	mov	sl, r0
 8010a14:	468b      	mov	fp, r1
 8010a16:	bf08      	it	eq
 8010a18:	6023      	streq	r3, [r4, #0]
 8010a1a:	e62b      	b.n	8010674 <_strtod_l+0x4a4>
 8010a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a20:	fa02 f303 	lsl.w	r3, r2, r3
 8010a24:	ea03 0a0a 	and.w	sl, r3, sl
 8010a28:	e6e3      	b.n	80107f2 <_strtod_l+0x622>
 8010a2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010a2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010a32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010a36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010a3a:	fa01 f308 	lsl.w	r3, r1, r8
 8010a3e:	9308      	str	r3, [sp, #32]
 8010a40:	910d      	str	r1, [sp, #52]	; 0x34
 8010a42:	e746      	b.n	80108d2 <_strtod_l+0x702>
 8010a44:	2300      	movs	r3, #0
 8010a46:	9308      	str	r3, [sp, #32]
 8010a48:	2301      	movs	r3, #1
 8010a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8010a4c:	e741      	b.n	80108d2 <_strtod_l+0x702>
 8010a4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010a50:	4642      	mov	r2, r8
 8010a52:	4620      	mov	r0, r4
 8010a54:	f002 f9c6 	bl	8012de4 <__lshift>
 8010a58:	9018      	str	r0, [sp, #96]	; 0x60
 8010a5a:	2800      	cmp	r0, #0
 8010a5c:	f47f af6b 	bne.w	8010936 <_strtod_l+0x766>
 8010a60:	e5fe      	b.n	8010660 <_strtod_l+0x490>
 8010a62:	465f      	mov	r7, fp
 8010a64:	d16e      	bne.n	8010b44 <_strtod_l+0x974>
 8010a66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a6c:	b342      	cbz	r2, 8010ac0 <_strtod_l+0x8f0>
 8010a6e:	4a32      	ldr	r2, [pc, #200]	; (8010b38 <_strtod_l+0x968>)
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d128      	bne.n	8010ac6 <_strtod_l+0x8f6>
 8010a74:	9b04      	ldr	r3, [sp, #16]
 8010a76:	4651      	mov	r1, sl
 8010a78:	b1eb      	cbz	r3, 8010ab6 <_strtod_l+0x8e6>
 8010a7a:	4b2d      	ldr	r3, [pc, #180]	; (8010b30 <_strtod_l+0x960>)
 8010a7c:	403b      	ands	r3, r7
 8010a7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010a82:	f04f 32ff 	mov.w	r2, #4294967295
 8010a86:	d819      	bhi.n	8010abc <_strtod_l+0x8ec>
 8010a88:	0d1b      	lsrs	r3, r3, #20
 8010a8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8010a92:	4299      	cmp	r1, r3
 8010a94:	d117      	bne.n	8010ac6 <_strtod_l+0x8f6>
 8010a96:	4b29      	ldr	r3, [pc, #164]	; (8010b3c <_strtod_l+0x96c>)
 8010a98:	429f      	cmp	r7, r3
 8010a9a:	d102      	bne.n	8010aa2 <_strtod_l+0x8d2>
 8010a9c:	3101      	adds	r1, #1
 8010a9e:	f43f addf 	beq.w	8010660 <_strtod_l+0x490>
 8010aa2:	4b23      	ldr	r3, [pc, #140]	; (8010b30 <_strtod_l+0x960>)
 8010aa4:	403b      	ands	r3, r7
 8010aa6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010aaa:	f04f 0a00 	mov.w	sl, #0
 8010aae:	9b04      	ldr	r3, [sp, #16]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d1a4      	bne.n	80109fe <_strtod_l+0x82e>
 8010ab4:	e5de      	b.n	8010674 <_strtod_l+0x4a4>
 8010ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8010aba:	e7ea      	b.n	8010a92 <_strtod_l+0x8c2>
 8010abc:	4613      	mov	r3, r2
 8010abe:	e7e8      	b.n	8010a92 <_strtod_l+0x8c2>
 8010ac0:	ea53 030a 	orrs.w	r3, r3, sl
 8010ac4:	d08c      	beq.n	80109e0 <_strtod_l+0x810>
 8010ac6:	9b08      	ldr	r3, [sp, #32]
 8010ac8:	b1db      	cbz	r3, 8010b02 <_strtod_l+0x932>
 8010aca:	423b      	tst	r3, r7
 8010acc:	d0ef      	beq.n	8010aae <_strtod_l+0x8de>
 8010ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ad0:	9a04      	ldr	r2, [sp, #16]
 8010ad2:	4650      	mov	r0, sl
 8010ad4:	4659      	mov	r1, fp
 8010ad6:	b1c3      	cbz	r3, 8010b0a <_strtod_l+0x93a>
 8010ad8:	f7ff fb5d 	bl	8010196 <sulp>
 8010adc:	4602      	mov	r2, r0
 8010ade:	460b      	mov	r3, r1
 8010ae0:	ec51 0b18 	vmov	r0, r1, d8
 8010ae4:	f7ef fbf2 	bl	80002cc <__adddf3>
 8010ae8:	4682      	mov	sl, r0
 8010aea:	468b      	mov	fp, r1
 8010aec:	e7df      	b.n	8010aae <_strtod_l+0x8de>
 8010aee:	4013      	ands	r3, r2
 8010af0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010af4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010af8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010afc:	f04f 3aff 	mov.w	sl, #4294967295
 8010b00:	e7d5      	b.n	8010aae <_strtod_l+0x8de>
 8010b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b04:	ea13 0f0a 	tst.w	r3, sl
 8010b08:	e7e0      	b.n	8010acc <_strtod_l+0x8fc>
 8010b0a:	f7ff fb44 	bl	8010196 <sulp>
 8010b0e:	4602      	mov	r2, r0
 8010b10:	460b      	mov	r3, r1
 8010b12:	ec51 0b18 	vmov	r0, r1, d8
 8010b16:	f7ef fbd7 	bl	80002c8 <__aeabi_dsub>
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	4682      	mov	sl, r0
 8010b20:	468b      	mov	fp, r1
 8010b22:	f7ef fff1 	bl	8000b08 <__aeabi_dcmpeq>
 8010b26:	2800      	cmp	r0, #0
 8010b28:	d0c1      	beq.n	8010aae <_strtod_l+0x8de>
 8010b2a:	e611      	b.n	8010750 <_strtod_l+0x580>
 8010b2c:	fffffc02 	.word	0xfffffc02
 8010b30:	7ff00000 	.word	0x7ff00000
 8010b34:	39500000 	.word	0x39500000
 8010b38:	000fffff 	.word	0x000fffff
 8010b3c:	7fefffff 	.word	0x7fefffff
 8010b40:	080152a8 	.word	0x080152a8
 8010b44:	4631      	mov	r1, r6
 8010b46:	4628      	mov	r0, r5
 8010b48:	f002 fb3a 	bl	80131c0 <__ratio>
 8010b4c:	ec59 8b10 	vmov	r8, r9, d0
 8010b50:	ee10 0a10 	vmov	r0, s0
 8010b54:	2200      	movs	r2, #0
 8010b56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010b5a:	4649      	mov	r1, r9
 8010b5c:	f7ef ffe8 	bl	8000b30 <__aeabi_dcmple>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	d07a      	beq.n	8010c5a <_strtod_l+0xa8a>
 8010b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d04a      	beq.n	8010c00 <_strtod_l+0xa30>
 8010b6a:	4b95      	ldr	r3, [pc, #596]	; (8010dc0 <_strtod_l+0xbf0>)
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010b72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010dc0 <_strtod_l+0xbf0>
 8010b76:	f04f 0800 	mov.w	r8, #0
 8010b7a:	4b92      	ldr	r3, [pc, #584]	; (8010dc4 <_strtod_l+0xbf4>)
 8010b7c:	403b      	ands	r3, r7
 8010b7e:	930d      	str	r3, [sp, #52]	; 0x34
 8010b80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010b82:	4b91      	ldr	r3, [pc, #580]	; (8010dc8 <_strtod_l+0xbf8>)
 8010b84:	429a      	cmp	r2, r3
 8010b86:	f040 80b0 	bne.w	8010cea <_strtod_l+0xb1a>
 8010b8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010b8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010b92:	ec4b ab10 	vmov	d0, sl, fp
 8010b96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010b9a:	f002 fa39 	bl	8013010 <__ulp>
 8010b9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010ba2:	ec53 2b10 	vmov	r2, r3, d0
 8010ba6:	f7ef fd47 	bl	8000638 <__aeabi_dmul>
 8010baa:	4652      	mov	r2, sl
 8010bac:	465b      	mov	r3, fp
 8010bae:	f7ef fb8d 	bl	80002cc <__adddf3>
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	4983      	ldr	r1, [pc, #524]	; (8010dc4 <_strtod_l+0xbf4>)
 8010bb6:	4a85      	ldr	r2, [pc, #532]	; (8010dcc <_strtod_l+0xbfc>)
 8010bb8:	4019      	ands	r1, r3
 8010bba:	4291      	cmp	r1, r2
 8010bbc:	4682      	mov	sl, r0
 8010bbe:	d960      	bls.n	8010c82 <_strtod_l+0xab2>
 8010bc0:	ee18 3a90 	vmov	r3, s17
 8010bc4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d104      	bne.n	8010bd6 <_strtod_l+0xa06>
 8010bcc:	ee18 3a10 	vmov	r3, s16
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	f43f ad45 	beq.w	8010660 <_strtod_l+0x490>
 8010bd6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010dd8 <_strtod_l+0xc08>
 8010bda:	f04f 3aff 	mov.w	sl, #4294967295
 8010bde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010be0:	4620      	mov	r0, r4
 8010be2:	f001 fee3 	bl	80129ac <_Bfree>
 8010be6:	9905      	ldr	r1, [sp, #20]
 8010be8:	4620      	mov	r0, r4
 8010bea:	f001 fedf 	bl	80129ac <_Bfree>
 8010bee:	4631      	mov	r1, r6
 8010bf0:	4620      	mov	r0, r4
 8010bf2:	f001 fedb 	bl	80129ac <_Bfree>
 8010bf6:	4629      	mov	r1, r5
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	f001 fed7 	bl	80129ac <_Bfree>
 8010bfe:	e61a      	b.n	8010836 <_strtod_l+0x666>
 8010c00:	f1ba 0f00 	cmp.w	sl, #0
 8010c04:	d11b      	bne.n	8010c3e <_strtod_l+0xa6e>
 8010c06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c0a:	b9f3      	cbnz	r3, 8010c4a <_strtod_l+0xa7a>
 8010c0c:	4b6c      	ldr	r3, [pc, #432]	; (8010dc0 <_strtod_l+0xbf0>)
 8010c0e:	2200      	movs	r2, #0
 8010c10:	4640      	mov	r0, r8
 8010c12:	4649      	mov	r1, r9
 8010c14:	f7ef ff82 	bl	8000b1c <__aeabi_dcmplt>
 8010c18:	b9d0      	cbnz	r0, 8010c50 <_strtod_l+0xa80>
 8010c1a:	4640      	mov	r0, r8
 8010c1c:	4649      	mov	r1, r9
 8010c1e:	4b6c      	ldr	r3, [pc, #432]	; (8010dd0 <_strtod_l+0xc00>)
 8010c20:	2200      	movs	r2, #0
 8010c22:	f7ef fd09 	bl	8000638 <__aeabi_dmul>
 8010c26:	4680      	mov	r8, r0
 8010c28:	4689      	mov	r9, r1
 8010c2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010c2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010c32:	9315      	str	r3, [sp, #84]	; 0x54
 8010c34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010c38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010c3c:	e79d      	b.n	8010b7a <_strtod_l+0x9aa>
 8010c3e:	f1ba 0f01 	cmp.w	sl, #1
 8010c42:	d102      	bne.n	8010c4a <_strtod_l+0xa7a>
 8010c44:	2f00      	cmp	r7, #0
 8010c46:	f43f ad83 	beq.w	8010750 <_strtod_l+0x580>
 8010c4a:	4b62      	ldr	r3, [pc, #392]	; (8010dd4 <_strtod_l+0xc04>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	e78e      	b.n	8010b6e <_strtod_l+0x99e>
 8010c50:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010dd0 <_strtod_l+0xc00>
 8010c54:	f04f 0800 	mov.w	r8, #0
 8010c58:	e7e7      	b.n	8010c2a <_strtod_l+0xa5a>
 8010c5a:	4b5d      	ldr	r3, [pc, #372]	; (8010dd0 <_strtod_l+0xc00>)
 8010c5c:	4640      	mov	r0, r8
 8010c5e:	4649      	mov	r1, r9
 8010c60:	2200      	movs	r2, #0
 8010c62:	f7ef fce9 	bl	8000638 <__aeabi_dmul>
 8010c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c68:	4680      	mov	r8, r0
 8010c6a:	4689      	mov	r9, r1
 8010c6c:	b933      	cbnz	r3, 8010c7c <_strtod_l+0xaac>
 8010c6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c72:	900e      	str	r0, [sp, #56]	; 0x38
 8010c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010c7a:	e7dd      	b.n	8010c38 <_strtod_l+0xa68>
 8010c7c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010c80:	e7f9      	b.n	8010c76 <_strtod_l+0xaa6>
 8010c82:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010c86:	9b04      	ldr	r3, [sp, #16]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d1a8      	bne.n	8010bde <_strtod_l+0xa0e>
 8010c8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010c90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c92:	0d1b      	lsrs	r3, r3, #20
 8010c94:	051b      	lsls	r3, r3, #20
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d1a1      	bne.n	8010bde <_strtod_l+0xa0e>
 8010c9a:	4640      	mov	r0, r8
 8010c9c:	4649      	mov	r1, r9
 8010c9e:	f7f0 f82b 	bl	8000cf8 <__aeabi_d2lz>
 8010ca2:	f7ef fc9b 	bl	80005dc <__aeabi_l2d>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	460b      	mov	r3, r1
 8010caa:	4640      	mov	r0, r8
 8010cac:	4649      	mov	r1, r9
 8010cae:	f7ef fb0b 	bl	80002c8 <__aeabi_dsub>
 8010cb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010cb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010cb8:	ea43 030a 	orr.w	r3, r3, sl
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	4680      	mov	r8, r0
 8010cc0:	4689      	mov	r9, r1
 8010cc2:	d055      	beq.n	8010d70 <_strtod_l+0xba0>
 8010cc4:	a336      	add	r3, pc, #216	; (adr r3, 8010da0 <_strtod_l+0xbd0>)
 8010cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cca:	f7ef ff27 	bl	8000b1c <__aeabi_dcmplt>
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	f47f acd0 	bne.w	8010674 <_strtod_l+0x4a4>
 8010cd4:	a334      	add	r3, pc, #208	; (adr r3, 8010da8 <_strtod_l+0xbd8>)
 8010cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cda:	4640      	mov	r0, r8
 8010cdc:	4649      	mov	r1, r9
 8010cde:	f7ef ff3b 	bl	8000b58 <__aeabi_dcmpgt>
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	f43f af7b 	beq.w	8010bde <_strtod_l+0xa0e>
 8010ce8:	e4c4      	b.n	8010674 <_strtod_l+0x4a4>
 8010cea:	9b04      	ldr	r3, [sp, #16]
 8010cec:	b333      	cbz	r3, 8010d3c <_strtod_l+0xb6c>
 8010cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cf0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010cf4:	d822      	bhi.n	8010d3c <_strtod_l+0xb6c>
 8010cf6:	a32e      	add	r3, pc, #184	; (adr r3, 8010db0 <_strtod_l+0xbe0>)
 8010cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfc:	4640      	mov	r0, r8
 8010cfe:	4649      	mov	r1, r9
 8010d00:	f7ef ff16 	bl	8000b30 <__aeabi_dcmple>
 8010d04:	b1a0      	cbz	r0, 8010d30 <_strtod_l+0xb60>
 8010d06:	4649      	mov	r1, r9
 8010d08:	4640      	mov	r0, r8
 8010d0a:	f7ef ff6d 	bl	8000be8 <__aeabi_d2uiz>
 8010d0e:	2801      	cmp	r0, #1
 8010d10:	bf38      	it	cc
 8010d12:	2001      	movcc	r0, #1
 8010d14:	f7ef fc16 	bl	8000544 <__aeabi_ui2d>
 8010d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d1a:	4680      	mov	r8, r0
 8010d1c:	4689      	mov	r9, r1
 8010d1e:	bb23      	cbnz	r3, 8010d6a <_strtod_l+0xb9a>
 8010d20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d24:	9010      	str	r0, [sp, #64]	; 0x40
 8010d26:	9311      	str	r3, [sp, #68]	; 0x44
 8010d28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010d2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d34:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010d38:	1a9b      	subs	r3, r3, r2
 8010d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010d40:	eeb0 0a48 	vmov.f32	s0, s16
 8010d44:	eef0 0a68 	vmov.f32	s1, s17
 8010d48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010d4c:	f002 f960 	bl	8013010 <__ulp>
 8010d50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010d54:	ec53 2b10 	vmov	r2, r3, d0
 8010d58:	f7ef fc6e 	bl	8000638 <__aeabi_dmul>
 8010d5c:	ec53 2b18 	vmov	r2, r3, d8
 8010d60:	f7ef fab4 	bl	80002cc <__adddf3>
 8010d64:	4682      	mov	sl, r0
 8010d66:	468b      	mov	fp, r1
 8010d68:	e78d      	b.n	8010c86 <_strtod_l+0xab6>
 8010d6a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010d6e:	e7db      	b.n	8010d28 <_strtod_l+0xb58>
 8010d70:	a311      	add	r3, pc, #68	; (adr r3, 8010db8 <_strtod_l+0xbe8>)
 8010d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d76:	f7ef fed1 	bl	8000b1c <__aeabi_dcmplt>
 8010d7a:	e7b2      	b.n	8010ce2 <_strtod_l+0xb12>
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010d82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d84:	6013      	str	r3, [r2, #0]
 8010d86:	f7ff ba6b 	b.w	8010260 <_strtod_l+0x90>
 8010d8a:	2a65      	cmp	r2, #101	; 0x65
 8010d8c:	f43f ab5f 	beq.w	801044e <_strtod_l+0x27e>
 8010d90:	2a45      	cmp	r2, #69	; 0x45
 8010d92:	f43f ab5c 	beq.w	801044e <_strtod_l+0x27e>
 8010d96:	2301      	movs	r3, #1
 8010d98:	f7ff bb94 	b.w	80104c4 <_strtod_l+0x2f4>
 8010d9c:	f3af 8000 	nop.w
 8010da0:	94a03595 	.word	0x94a03595
 8010da4:	3fdfffff 	.word	0x3fdfffff
 8010da8:	35afe535 	.word	0x35afe535
 8010dac:	3fe00000 	.word	0x3fe00000
 8010db0:	ffc00000 	.word	0xffc00000
 8010db4:	41dfffff 	.word	0x41dfffff
 8010db8:	94a03595 	.word	0x94a03595
 8010dbc:	3fcfffff 	.word	0x3fcfffff
 8010dc0:	3ff00000 	.word	0x3ff00000
 8010dc4:	7ff00000 	.word	0x7ff00000
 8010dc8:	7fe00000 	.word	0x7fe00000
 8010dcc:	7c9fffff 	.word	0x7c9fffff
 8010dd0:	3fe00000 	.word	0x3fe00000
 8010dd4:	bff00000 	.word	0xbff00000
 8010dd8:	7fefffff 	.word	0x7fefffff

08010ddc <_strtod_r>:
 8010ddc:	4b01      	ldr	r3, [pc, #4]	; (8010de4 <_strtod_r+0x8>)
 8010dde:	f7ff b9f7 	b.w	80101d0 <_strtod_l>
 8010de2:	bf00      	nop
 8010de4:	20000178 	.word	0x20000178

08010de8 <_strtol_l.constprop.0>:
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dee:	d001      	beq.n	8010df4 <_strtol_l.constprop.0+0xc>
 8010df0:	2b24      	cmp	r3, #36	; 0x24
 8010df2:	d906      	bls.n	8010e02 <_strtol_l.constprop.0+0x1a>
 8010df4:	f7fe f98c 	bl	800f110 <__errno>
 8010df8:	2316      	movs	r3, #22
 8010dfa:	6003      	str	r3, [r0, #0]
 8010dfc:	2000      	movs	r0, #0
 8010dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010ee8 <_strtol_l.constprop.0+0x100>
 8010e06:	460d      	mov	r5, r1
 8010e08:	462e      	mov	r6, r5
 8010e0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010e12:	f017 0708 	ands.w	r7, r7, #8
 8010e16:	d1f7      	bne.n	8010e08 <_strtol_l.constprop.0+0x20>
 8010e18:	2c2d      	cmp	r4, #45	; 0x2d
 8010e1a:	d132      	bne.n	8010e82 <_strtol_l.constprop.0+0x9a>
 8010e1c:	782c      	ldrb	r4, [r5, #0]
 8010e1e:	2701      	movs	r7, #1
 8010e20:	1cb5      	adds	r5, r6, #2
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d05b      	beq.n	8010ede <_strtol_l.constprop.0+0xf6>
 8010e26:	2b10      	cmp	r3, #16
 8010e28:	d109      	bne.n	8010e3e <_strtol_l.constprop.0+0x56>
 8010e2a:	2c30      	cmp	r4, #48	; 0x30
 8010e2c:	d107      	bne.n	8010e3e <_strtol_l.constprop.0+0x56>
 8010e2e:	782c      	ldrb	r4, [r5, #0]
 8010e30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010e34:	2c58      	cmp	r4, #88	; 0x58
 8010e36:	d14d      	bne.n	8010ed4 <_strtol_l.constprop.0+0xec>
 8010e38:	786c      	ldrb	r4, [r5, #1]
 8010e3a:	2310      	movs	r3, #16
 8010e3c:	3502      	adds	r5, #2
 8010e3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010e42:	f108 38ff 	add.w	r8, r8, #4294967295
 8010e46:	f04f 0c00 	mov.w	ip, #0
 8010e4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8010e4e:	4666      	mov	r6, ip
 8010e50:	fb03 8a19 	mls	sl, r3, r9, r8
 8010e54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010e58:	f1be 0f09 	cmp.w	lr, #9
 8010e5c:	d816      	bhi.n	8010e8c <_strtol_l.constprop.0+0xa4>
 8010e5e:	4674      	mov	r4, lr
 8010e60:	42a3      	cmp	r3, r4
 8010e62:	dd24      	ble.n	8010eae <_strtol_l.constprop.0+0xc6>
 8010e64:	f1bc 0f00 	cmp.w	ip, #0
 8010e68:	db1e      	blt.n	8010ea8 <_strtol_l.constprop.0+0xc0>
 8010e6a:	45b1      	cmp	r9, r6
 8010e6c:	d31c      	bcc.n	8010ea8 <_strtol_l.constprop.0+0xc0>
 8010e6e:	d101      	bne.n	8010e74 <_strtol_l.constprop.0+0x8c>
 8010e70:	45a2      	cmp	sl, r4
 8010e72:	db19      	blt.n	8010ea8 <_strtol_l.constprop.0+0xc0>
 8010e74:	fb06 4603 	mla	r6, r6, r3, r4
 8010e78:	f04f 0c01 	mov.w	ip, #1
 8010e7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e80:	e7e8      	b.n	8010e54 <_strtol_l.constprop.0+0x6c>
 8010e82:	2c2b      	cmp	r4, #43	; 0x2b
 8010e84:	bf04      	itt	eq
 8010e86:	782c      	ldrbeq	r4, [r5, #0]
 8010e88:	1cb5      	addeq	r5, r6, #2
 8010e8a:	e7ca      	b.n	8010e22 <_strtol_l.constprop.0+0x3a>
 8010e8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010e90:	f1be 0f19 	cmp.w	lr, #25
 8010e94:	d801      	bhi.n	8010e9a <_strtol_l.constprop.0+0xb2>
 8010e96:	3c37      	subs	r4, #55	; 0x37
 8010e98:	e7e2      	b.n	8010e60 <_strtol_l.constprop.0+0x78>
 8010e9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010e9e:	f1be 0f19 	cmp.w	lr, #25
 8010ea2:	d804      	bhi.n	8010eae <_strtol_l.constprop.0+0xc6>
 8010ea4:	3c57      	subs	r4, #87	; 0x57
 8010ea6:	e7db      	b.n	8010e60 <_strtol_l.constprop.0+0x78>
 8010ea8:	f04f 3cff 	mov.w	ip, #4294967295
 8010eac:	e7e6      	b.n	8010e7c <_strtol_l.constprop.0+0x94>
 8010eae:	f1bc 0f00 	cmp.w	ip, #0
 8010eb2:	da05      	bge.n	8010ec0 <_strtol_l.constprop.0+0xd8>
 8010eb4:	2322      	movs	r3, #34	; 0x22
 8010eb6:	6003      	str	r3, [r0, #0]
 8010eb8:	4646      	mov	r6, r8
 8010eba:	b942      	cbnz	r2, 8010ece <_strtol_l.constprop.0+0xe6>
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	e79e      	b.n	8010dfe <_strtol_l.constprop.0+0x16>
 8010ec0:	b107      	cbz	r7, 8010ec4 <_strtol_l.constprop.0+0xdc>
 8010ec2:	4276      	negs	r6, r6
 8010ec4:	2a00      	cmp	r2, #0
 8010ec6:	d0f9      	beq.n	8010ebc <_strtol_l.constprop.0+0xd4>
 8010ec8:	f1bc 0f00 	cmp.w	ip, #0
 8010ecc:	d000      	beq.n	8010ed0 <_strtol_l.constprop.0+0xe8>
 8010ece:	1e69      	subs	r1, r5, #1
 8010ed0:	6011      	str	r1, [r2, #0]
 8010ed2:	e7f3      	b.n	8010ebc <_strtol_l.constprop.0+0xd4>
 8010ed4:	2430      	movs	r4, #48	; 0x30
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d1b1      	bne.n	8010e3e <_strtol_l.constprop.0+0x56>
 8010eda:	2308      	movs	r3, #8
 8010edc:	e7af      	b.n	8010e3e <_strtol_l.constprop.0+0x56>
 8010ede:	2c30      	cmp	r4, #48	; 0x30
 8010ee0:	d0a5      	beq.n	8010e2e <_strtol_l.constprop.0+0x46>
 8010ee2:	230a      	movs	r3, #10
 8010ee4:	e7ab      	b.n	8010e3e <_strtol_l.constprop.0+0x56>
 8010ee6:	bf00      	nop
 8010ee8:	0801513d 	.word	0x0801513d

08010eec <_strtol_r>:
 8010eec:	f7ff bf7c 	b.w	8010de8 <_strtol_l.constprop.0>

08010ef0 <__swbuf_r>:
 8010ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ef2:	460e      	mov	r6, r1
 8010ef4:	4614      	mov	r4, r2
 8010ef6:	4605      	mov	r5, r0
 8010ef8:	b118      	cbz	r0, 8010f02 <__swbuf_r+0x12>
 8010efa:	6983      	ldr	r3, [r0, #24]
 8010efc:	b90b      	cbnz	r3, 8010f02 <__swbuf_r+0x12>
 8010efe:	f001 f86f 	bl	8011fe0 <__sinit>
 8010f02:	4b21      	ldr	r3, [pc, #132]	; (8010f88 <__swbuf_r+0x98>)
 8010f04:	429c      	cmp	r4, r3
 8010f06:	d12b      	bne.n	8010f60 <__swbuf_r+0x70>
 8010f08:	686c      	ldr	r4, [r5, #4]
 8010f0a:	69a3      	ldr	r3, [r4, #24]
 8010f0c:	60a3      	str	r3, [r4, #8]
 8010f0e:	89a3      	ldrh	r3, [r4, #12]
 8010f10:	071a      	lsls	r2, r3, #28
 8010f12:	d52f      	bpl.n	8010f74 <__swbuf_r+0x84>
 8010f14:	6923      	ldr	r3, [r4, #16]
 8010f16:	b36b      	cbz	r3, 8010f74 <__swbuf_r+0x84>
 8010f18:	6923      	ldr	r3, [r4, #16]
 8010f1a:	6820      	ldr	r0, [r4, #0]
 8010f1c:	1ac0      	subs	r0, r0, r3
 8010f1e:	6963      	ldr	r3, [r4, #20]
 8010f20:	b2f6      	uxtb	r6, r6
 8010f22:	4283      	cmp	r3, r0
 8010f24:	4637      	mov	r7, r6
 8010f26:	dc04      	bgt.n	8010f32 <__swbuf_r+0x42>
 8010f28:	4621      	mov	r1, r4
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	f000 ffc4 	bl	8011eb8 <_fflush_r>
 8010f30:	bb30      	cbnz	r0, 8010f80 <__swbuf_r+0x90>
 8010f32:	68a3      	ldr	r3, [r4, #8]
 8010f34:	3b01      	subs	r3, #1
 8010f36:	60a3      	str	r3, [r4, #8]
 8010f38:	6823      	ldr	r3, [r4, #0]
 8010f3a:	1c5a      	adds	r2, r3, #1
 8010f3c:	6022      	str	r2, [r4, #0]
 8010f3e:	701e      	strb	r6, [r3, #0]
 8010f40:	6963      	ldr	r3, [r4, #20]
 8010f42:	3001      	adds	r0, #1
 8010f44:	4283      	cmp	r3, r0
 8010f46:	d004      	beq.n	8010f52 <__swbuf_r+0x62>
 8010f48:	89a3      	ldrh	r3, [r4, #12]
 8010f4a:	07db      	lsls	r3, r3, #31
 8010f4c:	d506      	bpl.n	8010f5c <__swbuf_r+0x6c>
 8010f4e:	2e0a      	cmp	r6, #10
 8010f50:	d104      	bne.n	8010f5c <__swbuf_r+0x6c>
 8010f52:	4621      	mov	r1, r4
 8010f54:	4628      	mov	r0, r5
 8010f56:	f000 ffaf 	bl	8011eb8 <_fflush_r>
 8010f5a:	b988      	cbnz	r0, 8010f80 <__swbuf_r+0x90>
 8010f5c:	4638      	mov	r0, r7
 8010f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f60:	4b0a      	ldr	r3, [pc, #40]	; (8010f8c <__swbuf_r+0x9c>)
 8010f62:	429c      	cmp	r4, r3
 8010f64:	d101      	bne.n	8010f6a <__swbuf_r+0x7a>
 8010f66:	68ac      	ldr	r4, [r5, #8]
 8010f68:	e7cf      	b.n	8010f0a <__swbuf_r+0x1a>
 8010f6a:	4b09      	ldr	r3, [pc, #36]	; (8010f90 <__swbuf_r+0xa0>)
 8010f6c:	429c      	cmp	r4, r3
 8010f6e:	bf08      	it	eq
 8010f70:	68ec      	ldreq	r4, [r5, #12]
 8010f72:	e7ca      	b.n	8010f0a <__swbuf_r+0x1a>
 8010f74:	4621      	mov	r1, r4
 8010f76:	4628      	mov	r0, r5
 8010f78:	f000 f81e 	bl	8010fb8 <__swsetup_r>
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	d0cb      	beq.n	8010f18 <__swbuf_r+0x28>
 8010f80:	f04f 37ff 	mov.w	r7, #4294967295
 8010f84:	e7ea      	b.n	8010f5c <__swbuf_r+0x6c>
 8010f86:	bf00      	nop
 8010f88:	08015380 	.word	0x08015380
 8010f8c:	080153a0 	.word	0x080153a0
 8010f90:	08015360 	.word	0x08015360

08010f94 <_write_r>:
 8010f94:	b538      	push	{r3, r4, r5, lr}
 8010f96:	4d07      	ldr	r5, [pc, #28]	; (8010fb4 <_write_r+0x20>)
 8010f98:	4604      	mov	r4, r0
 8010f9a:	4608      	mov	r0, r1
 8010f9c:	4611      	mov	r1, r2
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	602a      	str	r2, [r5, #0]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	f7f2 ff64 	bl	8003e70 <_write>
 8010fa8:	1c43      	adds	r3, r0, #1
 8010faa:	d102      	bne.n	8010fb2 <_write_r+0x1e>
 8010fac:	682b      	ldr	r3, [r5, #0]
 8010fae:	b103      	cbz	r3, 8010fb2 <_write_r+0x1e>
 8010fb0:	6023      	str	r3, [r4, #0]
 8010fb2:	bd38      	pop	{r3, r4, r5, pc}
 8010fb4:	20003214 	.word	0x20003214

08010fb8 <__swsetup_r>:
 8010fb8:	4b32      	ldr	r3, [pc, #200]	; (8011084 <__swsetup_r+0xcc>)
 8010fba:	b570      	push	{r4, r5, r6, lr}
 8010fbc:	681d      	ldr	r5, [r3, #0]
 8010fbe:	4606      	mov	r6, r0
 8010fc0:	460c      	mov	r4, r1
 8010fc2:	b125      	cbz	r5, 8010fce <__swsetup_r+0x16>
 8010fc4:	69ab      	ldr	r3, [r5, #24]
 8010fc6:	b913      	cbnz	r3, 8010fce <__swsetup_r+0x16>
 8010fc8:	4628      	mov	r0, r5
 8010fca:	f001 f809 	bl	8011fe0 <__sinit>
 8010fce:	4b2e      	ldr	r3, [pc, #184]	; (8011088 <__swsetup_r+0xd0>)
 8010fd0:	429c      	cmp	r4, r3
 8010fd2:	d10f      	bne.n	8010ff4 <__swsetup_r+0x3c>
 8010fd4:	686c      	ldr	r4, [r5, #4]
 8010fd6:	89a3      	ldrh	r3, [r4, #12]
 8010fd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010fdc:	0719      	lsls	r1, r3, #28
 8010fde:	d42c      	bmi.n	801103a <__swsetup_r+0x82>
 8010fe0:	06dd      	lsls	r5, r3, #27
 8010fe2:	d411      	bmi.n	8011008 <__swsetup_r+0x50>
 8010fe4:	2309      	movs	r3, #9
 8010fe6:	6033      	str	r3, [r6, #0]
 8010fe8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010fec:	81a3      	strh	r3, [r4, #12]
 8010fee:	f04f 30ff 	mov.w	r0, #4294967295
 8010ff2:	e03e      	b.n	8011072 <__swsetup_r+0xba>
 8010ff4:	4b25      	ldr	r3, [pc, #148]	; (801108c <__swsetup_r+0xd4>)
 8010ff6:	429c      	cmp	r4, r3
 8010ff8:	d101      	bne.n	8010ffe <__swsetup_r+0x46>
 8010ffa:	68ac      	ldr	r4, [r5, #8]
 8010ffc:	e7eb      	b.n	8010fd6 <__swsetup_r+0x1e>
 8010ffe:	4b24      	ldr	r3, [pc, #144]	; (8011090 <__swsetup_r+0xd8>)
 8011000:	429c      	cmp	r4, r3
 8011002:	bf08      	it	eq
 8011004:	68ec      	ldreq	r4, [r5, #12]
 8011006:	e7e6      	b.n	8010fd6 <__swsetup_r+0x1e>
 8011008:	0758      	lsls	r0, r3, #29
 801100a:	d512      	bpl.n	8011032 <__swsetup_r+0x7a>
 801100c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801100e:	b141      	cbz	r1, 8011022 <__swsetup_r+0x6a>
 8011010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011014:	4299      	cmp	r1, r3
 8011016:	d002      	beq.n	801101e <__swsetup_r+0x66>
 8011018:	4630      	mov	r0, r6
 801101a:	f002 f95f 	bl	80132dc <_free_r>
 801101e:	2300      	movs	r3, #0
 8011020:	6363      	str	r3, [r4, #52]	; 0x34
 8011022:	89a3      	ldrh	r3, [r4, #12]
 8011024:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011028:	81a3      	strh	r3, [r4, #12]
 801102a:	2300      	movs	r3, #0
 801102c:	6063      	str	r3, [r4, #4]
 801102e:	6923      	ldr	r3, [r4, #16]
 8011030:	6023      	str	r3, [r4, #0]
 8011032:	89a3      	ldrh	r3, [r4, #12]
 8011034:	f043 0308 	orr.w	r3, r3, #8
 8011038:	81a3      	strh	r3, [r4, #12]
 801103a:	6923      	ldr	r3, [r4, #16]
 801103c:	b94b      	cbnz	r3, 8011052 <__swsetup_r+0x9a>
 801103e:	89a3      	ldrh	r3, [r4, #12]
 8011040:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011048:	d003      	beq.n	8011052 <__swsetup_r+0x9a>
 801104a:	4621      	mov	r1, r4
 801104c:	4630      	mov	r0, r6
 801104e:	f001 fc13 	bl	8012878 <__smakebuf_r>
 8011052:	89a0      	ldrh	r0, [r4, #12]
 8011054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011058:	f010 0301 	ands.w	r3, r0, #1
 801105c:	d00a      	beq.n	8011074 <__swsetup_r+0xbc>
 801105e:	2300      	movs	r3, #0
 8011060:	60a3      	str	r3, [r4, #8]
 8011062:	6963      	ldr	r3, [r4, #20]
 8011064:	425b      	negs	r3, r3
 8011066:	61a3      	str	r3, [r4, #24]
 8011068:	6923      	ldr	r3, [r4, #16]
 801106a:	b943      	cbnz	r3, 801107e <__swsetup_r+0xc6>
 801106c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011070:	d1ba      	bne.n	8010fe8 <__swsetup_r+0x30>
 8011072:	bd70      	pop	{r4, r5, r6, pc}
 8011074:	0781      	lsls	r1, r0, #30
 8011076:	bf58      	it	pl
 8011078:	6963      	ldrpl	r3, [r4, #20]
 801107a:	60a3      	str	r3, [r4, #8]
 801107c:	e7f4      	b.n	8011068 <__swsetup_r+0xb0>
 801107e:	2000      	movs	r0, #0
 8011080:	e7f7      	b.n	8011072 <__swsetup_r+0xba>
 8011082:	bf00      	nop
 8011084:	20000110 	.word	0x20000110
 8011088:	08015380 	.word	0x08015380
 801108c:	080153a0 	.word	0x080153a0
 8011090:	08015360 	.word	0x08015360

08011094 <_close_r>:
 8011094:	b538      	push	{r3, r4, r5, lr}
 8011096:	4d06      	ldr	r5, [pc, #24]	; (80110b0 <_close_r+0x1c>)
 8011098:	2300      	movs	r3, #0
 801109a:	4604      	mov	r4, r0
 801109c:	4608      	mov	r0, r1
 801109e:	602b      	str	r3, [r5, #0]
 80110a0:	f7f3 fa7f 	bl	80045a2 <_close>
 80110a4:	1c43      	adds	r3, r0, #1
 80110a6:	d102      	bne.n	80110ae <_close_r+0x1a>
 80110a8:	682b      	ldr	r3, [r5, #0]
 80110aa:	b103      	cbz	r3, 80110ae <_close_r+0x1a>
 80110ac:	6023      	str	r3, [r4, #0]
 80110ae:	bd38      	pop	{r3, r4, r5, pc}
 80110b0:	20003214 	.word	0x20003214

080110b4 <quorem>:
 80110b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b8:	6903      	ldr	r3, [r0, #16]
 80110ba:	690c      	ldr	r4, [r1, #16]
 80110bc:	42a3      	cmp	r3, r4
 80110be:	4607      	mov	r7, r0
 80110c0:	f2c0 8081 	blt.w	80111c6 <quorem+0x112>
 80110c4:	3c01      	subs	r4, #1
 80110c6:	f101 0814 	add.w	r8, r1, #20
 80110ca:	f100 0514 	add.w	r5, r0, #20
 80110ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80110d2:	9301      	str	r3, [sp, #4]
 80110d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80110d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80110dc:	3301      	adds	r3, #1
 80110de:	429a      	cmp	r2, r3
 80110e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80110e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80110e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80110ec:	d331      	bcc.n	8011152 <quorem+0x9e>
 80110ee:	f04f 0e00 	mov.w	lr, #0
 80110f2:	4640      	mov	r0, r8
 80110f4:	46ac      	mov	ip, r5
 80110f6:	46f2      	mov	sl, lr
 80110f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80110fc:	b293      	uxth	r3, r2
 80110fe:	fb06 e303 	mla	r3, r6, r3, lr
 8011102:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011106:	b29b      	uxth	r3, r3
 8011108:	ebaa 0303 	sub.w	r3, sl, r3
 801110c:	f8dc a000 	ldr.w	sl, [ip]
 8011110:	0c12      	lsrs	r2, r2, #16
 8011112:	fa13 f38a 	uxtah	r3, r3, sl
 8011116:	fb06 e202 	mla	r2, r6, r2, lr
 801111a:	9300      	str	r3, [sp, #0]
 801111c:	9b00      	ldr	r3, [sp, #0]
 801111e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011122:	b292      	uxth	r2, r2
 8011124:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011128:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801112c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011130:	4581      	cmp	r9, r0
 8011132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011136:	f84c 3b04 	str.w	r3, [ip], #4
 801113a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801113e:	d2db      	bcs.n	80110f8 <quorem+0x44>
 8011140:	f855 300b 	ldr.w	r3, [r5, fp]
 8011144:	b92b      	cbnz	r3, 8011152 <quorem+0x9e>
 8011146:	9b01      	ldr	r3, [sp, #4]
 8011148:	3b04      	subs	r3, #4
 801114a:	429d      	cmp	r5, r3
 801114c:	461a      	mov	r2, r3
 801114e:	d32e      	bcc.n	80111ae <quorem+0xfa>
 8011150:	613c      	str	r4, [r7, #16]
 8011152:	4638      	mov	r0, r7
 8011154:	f001 feb6 	bl	8012ec4 <__mcmp>
 8011158:	2800      	cmp	r0, #0
 801115a:	db24      	blt.n	80111a6 <quorem+0xf2>
 801115c:	3601      	adds	r6, #1
 801115e:	4628      	mov	r0, r5
 8011160:	f04f 0c00 	mov.w	ip, #0
 8011164:	f858 2b04 	ldr.w	r2, [r8], #4
 8011168:	f8d0 e000 	ldr.w	lr, [r0]
 801116c:	b293      	uxth	r3, r2
 801116e:	ebac 0303 	sub.w	r3, ip, r3
 8011172:	0c12      	lsrs	r2, r2, #16
 8011174:	fa13 f38e 	uxtah	r3, r3, lr
 8011178:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801117c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011180:	b29b      	uxth	r3, r3
 8011182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011186:	45c1      	cmp	r9, r8
 8011188:	f840 3b04 	str.w	r3, [r0], #4
 801118c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011190:	d2e8      	bcs.n	8011164 <quorem+0xb0>
 8011192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801119a:	b922      	cbnz	r2, 80111a6 <quorem+0xf2>
 801119c:	3b04      	subs	r3, #4
 801119e:	429d      	cmp	r5, r3
 80111a0:	461a      	mov	r2, r3
 80111a2:	d30a      	bcc.n	80111ba <quorem+0x106>
 80111a4:	613c      	str	r4, [r7, #16]
 80111a6:	4630      	mov	r0, r6
 80111a8:	b003      	add	sp, #12
 80111aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ae:	6812      	ldr	r2, [r2, #0]
 80111b0:	3b04      	subs	r3, #4
 80111b2:	2a00      	cmp	r2, #0
 80111b4:	d1cc      	bne.n	8011150 <quorem+0x9c>
 80111b6:	3c01      	subs	r4, #1
 80111b8:	e7c7      	b.n	801114a <quorem+0x96>
 80111ba:	6812      	ldr	r2, [r2, #0]
 80111bc:	3b04      	subs	r3, #4
 80111be:	2a00      	cmp	r2, #0
 80111c0:	d1f0      	bne.n	80111a4 <quorem+0xf0>
 80111c2:	3c01      	subs	r4, #1
 80111c4:	e7eb      	b.n	801119e <quorem+0xea>
 80111c6:	2000      	movs	r0, #0
 80111c8:	e7ee      	b.n	80111a8 <quorem+0xf4>
 80111ca:	0000      	movs	r0, r0
 80111cc:	0000      	movs	r0, r0
	...

080111d0 <_dtoa_r>:
 80111d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111d4:	ed2d 8b04 	vpush	{d8-d9}
 80111d8:	ec57 6b10 	vmov	r6, r7, d0
 80111dc:	b093      	sub	sp, #76	; 0x4c
 80111de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80111e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80111e4:	9106      	str	r1, [sp, #24]
 80111e6:	ee10 aa10 	vmov	sl, s0
 80111ea:	4604      	mov	r4, r0
 80111ec:	9209      	str	r2, [sp, #36]	; 0x24
 80111ee:	930c      	str	r3, [sp, #48]	; 0x30
 80111f0:	46bb      	mov	fp, r7
 80111f2:	b975      	cbnz	r5, 8011212 <_dtoa_r+0x42>
 80111f4:	2010      	movs	r0, #16
 80111f6:	f001 fb7f 	bl	80128f8 <malloc>
 80111fa:	4602      	mov	r2, r0
 80111fc:	6260      	str	r0, [r4, #36]	; 0x24
 80111fe:	b920      	cbnz	r0, 801120a <_dtoa_r+0x3a>
 8011200:	4ba7      	ldr	r3, [pc, #668]	; (80114a0 <_dtoa_r+0x2d0>)
 8011202:	21ea      	movs	r1, #234	; 0xea
 8011204:	48a7      	ldr	r0, [pc, #668]	; (80114a4 <_dtoa_r+0x2d4>)
 8011206:	f003 f857 	bl	80142b8 <__assert_func>
 801120a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801120e:	6005      	str	r5, [r0, #0]
 8011210:	60c5      	str	r5, [r0, #12]
 8011212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011214:	6819      	ldr	r1, [r3, #0]
 8011216:	b151      	cbz	r1, 801122e <_dtoa_r+0x5e>
 8011218:	685a      	ldr	r2, [r3, #4]
 801121a:	604a      	str	r2, [r1, #4]
 801121c:	2301      	movs	r3, #1
 801121e:	4093      	lsls	r3, r2
 8011220:	608b      	str	r3, [r1, #8]
 8011222:	4620      	mov	r0, r4
 8011224:	f001 fbc2 	bl	80129ac <_Bfree>
 8011228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801122a:	2200      	movs	r2, #0
 801122c:	601a      	str	r2, [r3, #0]
 801122e:	1e3b      	subs	r3, r7, #0
 8011230:	bfaa      	itet	ge
 8011232:	2300      	movge	r3, #0
 8011234:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011238:	f8c8 3000 	strge.w	r3, [r8]
 801123c:	4b9a      	ldr	r3, [pc, #616]	; (80114a8 <_dtoa_r+0x2d8>)
 801123e:	bfbc      	itt	lt
 8011240:	2201      	movlt	r2, #1
 8011242:	f8c8 2000 	strlt.w	r2, [r8]
 8011246:	ea33 030b 	bics.w	r3, r3, fp
 801124a:	d11b      	bne.n	8011284 <_dtoa_r+0xb4>
 801124c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801124e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011252:	6013      	str	r3, [r2, #0]
 8011254:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011258:	4333      	orrs	r3, r6
 801125a:	f000 8592 	beq.w	8011d82 <_dtoa_r+0xbb2>
 801125e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011260:	b963      	cbnz	r3, 801127c <_dtoa_r+0xac>
 8011262:	4b92      	ldr	r3, [pc, #584]	; (80114ac <_dtoa_r+0x2dc>)
 8011264:	e022      	b.n	80112ac <_dtoa_r+0xdc>
 8011266:	4b92      	ldr	r3, [pc, #584]	; (80114b0 <_dtoa_r+0x2e0>)
 8011268:	9301      	str	r3, [sp, #4]
 801126a:	3308      	adds	r3, #8
 801126c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801126e:	6013      	str	r3, [r2, #0]
 8011270:	9801      	ldr	r0, [sp, #4]
 8011272:	b013      	add	sp, #76	; 0x4c
 8011274:	ecbd 8b04 	vpop	{d8-d9}
 8011278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127c:	4b8b      	ldr	r3, [pc, #556]	; (80114ac <_dtoa_r+0x2dc>)
 801127e:	9301      	str	r3, [sp, #4]
 8011280:	3303      	adds	r3, #3
 8011282:	e7f3      	b.n	801126c <_dtoa_r+0x9c>
 8011284:	2200      	movs	r2, #0
 8011286:	2300      	movs	r3, #0
 8011288:	4650      	mov	r0, sl
 801128a:	4659      	mov	r1, fp
 801128c:	f7ef fc3c 	bl	8000b08 <__aeabi_dcmpeq>
 8011290:	ec4b ab19 	vmov	d9, sl, fp
 8011294:	4680      	mov	r8, r0
 8011296:	b158      	cbz	r0, 80112b0 <_dtoa_r+0xe0>
 8011298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801129a:	2301      	movs	r3, #1
 801129c:	6013      	str	r3, [r2, #0]
 801129e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	f000 856b 	beq.w	8011d7c <_dtoa_r+0xbac>
 80112a6:	4883      	ldr	r0, [pc, #524]	; (80114b4 <_dtoa_r+0x2e4>)
 80112a8:	6018      	str	r0, [r3, #0]
 80112aa:	1e43      	subs	r3, r0, #1
 80112ac:	9301      	str	r3, [sp, #4]
 80112ae:	e7df      	b.n	8011270 <_dtoa_r+0xa0>
 80112b0:	ec4b ab10 	vmov	d0, sl, fp
 80112b4:	aa10      	add	r2, sp, #64	; 0x40
 80112b6:	a911      	add	r1, sp, #68	; 0x44
 80112b8:	4620      	mov	r0, r4
 80112ba:	f001 ff25 	bl	8013108 <__d2b>
 80112be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80112c2:	ee08 0a10 	vmov	s16, r0
 80112c6:	2d00      	cmp	r5, #0
 80112c8:	f000 8084 	beq.w	80113d4 <_dtoa_r+0x204>
 80112cc:	ee19 3a90 	vmov	r3, s19
 80112d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80112d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80112d8:	4656      	mov	r6, sl
 80112da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80112de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80112e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80112e6:	4b74      	ldr	r3, [pc, #464]	; (80114b8 <_dtoa_r+0x2e8>)
 80112e8:	2200      	movs	r2, #0
 80112ea:	4630      	mov	r0, r6
 80112ec:	4639      	mov	r1, r7
 80112ee:	f7ee ffeb 	bl	80002c8 <__aeabi_dsub>
 80112f2:	a365      	add	r3, pc, #404	; (adr r3, 8011488 <_dtoa_r+0x2b8>)
 80112f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f8:	f7ef f99e 	bl	8000638 <__aeabi_dmul>
 80112fc:	a364      	add	r3, pc, #400	; (adr r3, 8011490 <_dtoa_r+0x2c0>)
 80112fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011302:	f7ee ffe3 	bl	80002cc <__adddf3>
 8011306:	4606      	mov	r6, r0
 8011308:	4628      	mov	r0, r5
 801130a:	460f      	mov	r7, r1
 801130c:	f7ef f92a 	bl	8000564 <__aeabi_i2d>
 8011310:	a361      	add	r3, pc, #388	; (adr r3, 8011498 <_dtoa_r+0x2c8>)
 8011312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011316:	f7ef f98f 	bl	8000638 <__aeabi_dmul>
 801131a:	4602      	mov	r2, r0
 801131c:	460b      	mov	r3, r1
 801131e:	4630      	mov	r0, r6
 8011320:	4639      	mov	r1, r7
 8011322:	f7ee ffd3 	bl	80002cc <__adddf3>
 8011326:	4606      	mov	r6, r0
 8011328:	460f      	mov	r7, r1
 801132a:	f7ef fc35 	bl	8000b98 <__aeabi_d2iz>
 801132e:	2200      	movs	r2, #0
 8011330:	9000      	str	r0, [sp, #0]
 8011332:	2300      	movs	r3, #0
 8011334:	4630      	mov	r0, r6
 8011336:	4639      	mov	r1, r7
 8011338:	f7ef fbf0 	bl	8000b1c <__aeabi_dcmplt>
 801133c:	b150      	cbz	r0, 8011354 <_dtoa_r+0x184>
 801133e:	9800      	ldr	r0, [sp, #0]
 8011340:	f7ef f910 	bl	8000564 <__aeabi_i2d>
 8011344:	4632      	mov	r2, r6
 8011346:	463b      	mov	r3, r7
 8011348:	f7ef fbde 	bl	8000b08 <__aeabi_dcmpeq>
 801134c:	b910      	cbnz	r0, 8011354 <_dtoa_r+0x184>
 801134e:	9b00      	ldr	r3, [sp, #0]
 8011350:	3b01      	subs	r3, #1
 8011352:	9300      	str	r3, [sp, #0]
 8011354:	9b00      	ldr	r3, [sp, #0]
 8011356:	2b16      	cmp	r3, #22
 8011358:	d85a      	bhi.n	8011410 <_dtoa_r+0x240>
 801135a:	9a00      	ldr	r2, [sp, #0]
 801135c:	4b57      	ldr	r3, [pc, #348]	; (80114bc <_dtoa_r+0x2ec>)
 801135e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011366:	ec51 0b19 	vmov	r0, r1, d9
 801136a:	f7ef fbd7 	bl	8000b1c <__aeabi_dcmplt>
 801136e:	2800      	cmp	r0, #0
 8011370:	d050      	beq.n	8011414 <_dtoa_r+0x244>
 8011372:	9b00      	ldr	r3, [sp, #0]
 8011374:	3b01      	subs	r3, #1
 8011376:	9300      	str	r3, [sp, #0]
 8011378:	2300      	movs	r3, #0
 801137a:	930b      	str	r3, [sp, #44]	; 0x2c
 801137c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801137e:	1b5d      	subs	r5, r3, r5
 8011380:	1e6b      	subs	r3, r5, #1
 8011382:	9305      	str	r3, [sp, #20]
 8011384:	bf45      	ittet	mi
 8011386:	f1c5 0301 	rsbmi	r3, r5, #1
 801138a:	9304      	strmi	r3, [sp, #16]
 801138c:	2300      	movpl	r3, #0
 801138e:	2300      	movmi	r3, #0
 8011390:	bf4c      	ite	mi
 8011392:	9305      	strmi	r3, [sp, #20]
 8011394:	9304      	strpl	r3, [sp, #16]
 8011396:	9b00      	ldr	r3, [sp, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	db3d      	blt.n	8011418 <_dtoa_r+0x248>
 801139c:	9b05      	ldr	r3, [sp, #20]
 801139e:	9a00      	ldr	r2, [sp, #0]
 80113a0:	920a      	str	r2, [sp, #40]	; 0x28
 80113a2:	4413      	add	r3, r2
 80113a4:	9305      	str	r3, [sp, #20]
 80113a6:	2300      	movs	r3, #0
 80113a8:	9307      	str	r3, [sp, #28]
 80113aa:	9b06      	ldr	r3, [sp, #24]
 80113ac:	2b09      	cmp	r3, #9
 80113ae:	f200 8089 	bhi.w	80114c4 <_dtoa_r+0x2f4>
 80113b2:	2b05      	cmp	r3, #5
 80113b4:	bfc4      	itt	gt
 80113b6:	3b04      	subgt	r3, #4
 80113b8:	9306      	strgt	r3, [sp, #24]
 80113ba:	9b06      	ldr	r3, [sp, #24]
 80113bc:	f1a3 0302 	sub.w	r3, r3, #2
 80113c0:	bfcc      	ite	gt
 80113c2:	2500      	movgt	r5, #0
 80113c4:	2501      	movle	r5, #1
 80113c6:	2b03      	cmp	r3, #3
 80113c8:	f200 8087 	bhi.w	80114da <_dtoa_r+0x30a>
 80113cc:	e8df f003 	tbb	[pc, r3]
 80113d0:	59383a2d 	.word	0x59383a2d
 80113d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80113d8:	441d      	add	r5, r3
 80113da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80113de:	2b20      	cmp	r3, #32
 80113e0:	bfc1      	itttt	gt
 80113e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80113e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80113ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80113ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80113f2:	bfda      	itte	le
 80113f4:	f1c3 0320 	rsble	r3, r3, #32
 80113f8:	fa06 f003 	lslle.w	r0, r6, r3
 80113fc:	4318      	orrgt	r0, r3
 80113fe:	f7ef f8a1 	bl	8000544 <__aeabi_ui2d>
 8011402:	2301      	movs	r3, #1
 8011404:	4606      	mov	r6, r0
 8011406:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801140a:	3d01      	subs	r5, #1
 801140c:	930e      	str	r3, [sp, #56]	; 0x38
 801140e:	e76a      	b.n	80112e6 <_dtoa_r+0x116>
 8011410:	2301      	movs	r3, #1
 8011412:	e7b2      	b.n	801137a <_dtoa_r+0x1aa>
 8011414:	900b      	str	r0, [sp, #44]	; 0x2c
 8011416:	e7b1      	b.n	801137c <_dtoa_r+0x1ac>
 8011418:	9b04      	ldr	r3, [sp, #16]
 801141a:	9a00      	ldr	r2, [sp, #0]
 801141c:	1a9b      	subs	r3, r3, r2
 801141e:	9304      	str	r3, [sp, #16]
 8011420:	4253      	negs	r3, r2
 8011422:	9307      	str	r3, [sp, #28]
 8011424:	2300      	movs	r3, #0
 8011426:	930a      	str	r3, [sp, #40]	; 0x28
 8011428:	e7bf      	b.n	80113aa <_dtoa_r+0x1da>
 801142a:	2300      	movs	r3, #0
 801142c:	9308      	str	r3, [sp, #32]
 801142e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011430:	2b00      	cmp	r3, #0
 8011432:	dc55      	bgt.n	80114e0 <_dtoa_r+0x310>
 8011434:	2301      	movs	r3, #1
 8011436:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801143a:	461a      	mov	r2, r3
 801143c:	9209      	str	r2, [sp, #36]	; 0x24
 801143e:	e00c      	b.n	801145a <_dtoa_r+0x28a>
 8011440:	2301      	movs	r3, #1
 8011442:	e7f3      	b.n	801142c <_dtoa_r+0x25c>
 8011444:	2300      	movs	r3, #0
 8011446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011448:	9308      	str	r3, [sp, #32]
 801144a:	9b00      	ldr	r3, [sp, #0]
 801144c:	4413      	add	r3, r2
 801144e:	9302      	str	r3, [sp, #8]
 8011450:	3301      	adds	r3, #1
 8011452:	2b01      	cmp	r3, #1
 8011454:	9303      	str	r3, [sp, #12]
 8011456:	bfb8      	it	lt
 8011458:	2301      	movlt	r3, #1
 801145a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801145c:	2200      	movs	r2, #0
 801145e:	6042      	str	r2, [r0, #4]
 8011460:	2204      	movs	r2, #4
 8011462:	f102 0614 	add.w	r6, r2, #20
 8011466:	429e      	cmp	r6, r3
 8011468:	6841      	ldr	r1, [r0, #4]
 801146a:	d93d      	bls.n	80114e8 <_dtoa_r+0x318>
 801146c:	4620      	mov	r0, r4
 801146e:	f001 fa5d 	bl	801292c <_Balloc>
 8011472:	9001      	str	r0, [sp, #4]
 8011474:	2800      	cmp	r0, #0
 8011476:	d13b      	bne.n	80114f0 <_dtoa_r+0x320>
 8011478:	4b11      	ldr	r3, [pc, #68]	; (80114c0 <_dtoa_r+0x2f0>)
 801147a:	4602      	mov	r2, r0
 801147c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011480:	e6c0      	b.n	8011204 <_dtoa_r+0x34>
 8011482:	2301      	movs	r3, #1
 8011484:	e7df      	b.n	8011446 <_dtoa_r+0x276>
 8011486:	bf00      	nop
 8011488:	636f4361 	.word	0x636f4361
 801148c:	3fd287a7 	.word	0x3fd287a7
 8011490:	8b60c8b3 	.word	0x8b60c8b3
 8011494:	3fc68a28 	.word	0x3fc68a28
 8011498:	509f79fb 	.word	0x509f79fb
 801149c:	3fd34413 	.word	0x3fd34413
 80114a0:	080152dd 	.word	0x080152dd
 80114a4:	080152f4 	.word	0x080152f4
 80114a8:	7ff00000 	.word	0x7ff00000
 80114ac:	080152d9 	.word	0x080152d9
 80114b0:	080152d0 	.word	0x080152d0
 80114b4:	080155aa 	.word	0x080155aa
 80114b8:	3ff80000 	.word	0x3ff80000
 80114bc:	080154c0 	.word	0x080154c0
 80114c0:	0801534f 	.word	0x0801534f
 80114c4:	2501      	movs	r5, #1
 80114c6:	2300      	movs	r3, #0
 80114c8:	9306      	str	r3, [sp, #24]
 80114ca:	9508      	str	r5, [sp, #32]
 80114cc:	f04f 33ff 	mov.w	r3, #4294967295
 80114d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80114d4:	2200      	movs	r2, #0
 80114d6:	2312      	movs	r3, #18
 80114d8:	e7b0      	b.n	801143c <_dtoa_r+0x26c>
 80114da:	2301      	movs	r3, #1
 80114dc:	9308      	str	r3, [sp, #32]
 80114de:	e7f5      	b.n	80114cc <_dtoa_r+0x2fc>
 80114e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80114e6:	e7b8      	b.n	801145a <_dtoa_r+0x28a>
 80114e8:	3101      	adds	r1, #1
 80114ea:	6041      	str	r1, [r0, #4]
 80114ec:	0052      	lsls	r2, r2, #1
 80114ee:	e7b8      	b.n	8011462 <_dtoa_r+0x292>
 80114f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114f2:	9a01      	ldr	r2, [sp, #4]
 80114f4:	601a      	str	r2, [r3, #0]
 80114f6:	9b03      	ldr	r3, [sp, #12]
 80114f8:	2b0e      	cmp	r3, #14
 80114fa:	f200 809d 	bhi.w	8011638 <_dtoa_r+0x468>
 80114fe:	2d00      	cmp	r5, #0
 8011500:	f000 809a 	beq.w	8011638 <_dtoa_r+0x468>
 8011504:	9b00      	ldr	r3, [sp, #0]
 8011506:	2b00      	cmp	r3, #0
 8011508:	dd32      	ble.n	8011570 <_dtoa_r+0x3a0>
 801150a:	4ab7      	ldr	r2, [pc, #732]	; (80117e8 <_dtoa_r+0x618>)
 801150c:	f003 030f 	and.w	r3, r3, #15
 8011510:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011514:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011518:	9b00      	ldr	r3, [sp, #0]
 801151a:	05d8      	lsls	r0, r3, #23
 801151c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011520:	d516      	bpl.n	8011550 <_dtoa_r+0x380>
 8011522:	4bb2      	ldr	r3, [pc, #712]	; (80117ec <_dtoa_r+0x61c>)
 8011524:	ec51 0b19 	vmov	r0, r1, d9
 8011528:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801152c:	f7ef f9ae 	bl	800088c <__aeabi_ddiv>
 8011530:	f007 070f 	and.w	r7, r7, #15
 8011534:	4682      	mov	sl, r0
 8011536:	468b      	mov	fp, r1
 8011538:	2503      	movs	r5, #3
 801153a:	4eac      	ldr	r6, [pc, #688]	; (80117ec <_dtoa_r+0x61c>)
 801153c:	b957      	cbnz	r7, 8011554 <_dtoa_r+0x384>
 801153e:	4642      	mov	r2, r8
 8011540:	464b      	mov	r3, r9
 8011542:	4650      	mov	r0, sl
 8011544:	4659      	mov	r1, fp
 8011546:	f7ef f9a1 	bl	800088c <__aeabi_ddiv>
 801154a:	4682      	mov	sl, r0
 801154c:	468b      	mov	fp, r1
 801154e:	e028      	b.n	80115a2 <_dtoa_r+0x3d2>
 8011550:	2502      	movs	r5, #2
 8011552:	e7f2      	b.n	801153a <_dtoa_r+0x36a>
 8011554:	07f9      	lsls	r1, r7, #31
 8011556:	d508      	bpl.n	801156a <_dtoa_r+0x39a>
 8011558:	4640      	mov	r0, r8
 801155a:	4649      	mov	r1, r9
 801155c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011560:	f7ef f86a 	bl	8000638 <__aeabi_dmul>
 8011564:	3501      	adds	r5, #1
 8011566:	4680      	mov	r8, r0
 8011568:	4689      	mov	r9, r1
 801156a:	107f      	asrs	r7, r7, #1
 801156c:	3608      	adds	r6, #8
 801156e:	e7e5      	b.n	801153c <_dtoa_r+0x36c>
 8011570:	f000 809b 	beq.w	80116aa <_dtoa_r+0x4da>
 8011574:	9b00      	ldr	r3, [sp, #0]
 8011576:	4f9d      	ldr	r7, [pc, #628]	; (80117ec <_dtoa_r+0x61c>)
 8011578:	425e      	negs	r6, r3
 801157a:	4b9b      	ldr	r3, [pc, #620]	; (80117e8 <_dtoa_r+0x618>)
 801157c:	f006 020f 	and.w	r2, r6, #15
 8011580:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011588:	ec51 0b19 	vmov	r0, r1, d9
 801158c:	f7ef f854 	bl	8000638 <__aeabi_dmul>
 8011590:	1136      	asrs	r6, r6, #4
 8011592:	4682      	mov	sl, r0
 8011594:	468b      	mov	fp, r1
 8011596:	2300      	movs	r3, #0
 8011598:	2502      	movs	r5, #2
 801159a:	2e00      	cmp	r6, #0
 801159c:	d17a      	bne.n	8011694 <_dtoa_r+0x4c4>
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d1d3      	bne.n	801154a <_dtoa_r+0x37a>
 80115a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	f000 8082 	beq.w	80116ae <_dtoa_r+0x4de>
 80115aa:	4b91      	ldr	r3, [pc, #580]	; (80117f0 <_dtoa_r+0x620>)
 80115ac:	2200      	movs	r2, #0
 80115ae:	4650      	mov	r0, sl
 80115b0:	4659      	mov	r1, fp
 80115b2:	f7ef fab3 	bl	8000b1c <__aeabi_dcmplt>
 80115b6:	2800      	cmp	r0, #0
 80115b8:	d079      	beq.n	80116ae <_dtoa_r+0x4de>
 80115ba:	9b03      	ldr	r3, [sp, #12]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d076      	beq.n	80116ae <_dtoa_r+0x4de>
 80115c0:	9b02      	ldr	r3, [sp, #8]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	dd36      	ble.n	8011634 <_dtoa_r+0x464>
 80115c6:	9b00      	ldr	r3, [sp, #0]
 80115c8:	4650      	mov	r0, sl
 80115ca:	4659      	mov	r1, fp
 80115cc:	1e5f      	subs	r7, r3, #1
 80115ce:	2200      	movs	r2, #0
 80115d0:	4b88      	ldr	r3, [pc, #544]	; (80117f4 <_dtoa_r+0x624>)
 80115d2:	f7ef f831 	bl	8000638 <__aeabi_dmul>
 80115d6:	9e02      	ldr	r6, [sp, #8]
 80115d8:	4682      	mov	sl, r0
 80115da:	468b      	mov	fp, r1
 80115dc:	3501      	adds	r5, #1
 80115de:	4628      	mov	r0, r5
 80115e0:	f7ee ffc0 	bl	8000564 <__aeabi_i2d>
 80115e4:	4652      	mov	r2, sl
 80115e6:	465b      	mov	r3, fp
 80115e8:	f7ef f826 	bl	8000638 <__aeabi_dmul>
 80115ec:	4b82      	ldr	r3, [pc, #520]	; (80117f8 <_dtoa_r+0x628>)
 80115ee:	2200      	movs	r2, #0
 80115f0:	f7ee fe6c 	bl	80002cc <__adddf3>
 80115f4:	46d0      	mov	r8, sl
 80115f6:	46d9      	mov	r9, fp
 80115f8:	4682      	mov	sl, r0
 80115fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80115fe:	2e00      	cmp	r6, #0
 8011600:	d158      	bne.n	80116b4 <_dtoa_r+0x4e4>
 8011602:	4b7e      	ldr	r3, [pc, #504]	; (80117fc <_dtoa_r+0x62c>)
 8011604:	2200      	movs	r2, #0
 8011606:	4640      	mov	r0, r8
 8011608:	4649      	mov	r1, r9
 801160a:	f7ee fe5d 	bl	80002c8 <__aeabi_dsub>
 801160e:	4652      	mov	r2, sl
 8011610:	465b      	mov	r3, fp
 8011612:	4680      	mov	r8, r0
 8011614:	4689      	mov	r9, r1
 8011616:	f7ef fa9f 	bl	8000b58 <__aeabi_dcmpgt>
 801161a:	2800      	cmp	r0, #0
 801161c:	f040 8295 	bne.w	8011b4a <_dtoa_r+0x97a>
 8011620:	4652      	mov	r2, sl
 8011622:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011626:	4640      	mov	r0, r8
 8011628:	4649      	mov	r1, r9
 801162a:	f7ef fa77 	bl	8000b1c <__aeabi_dcmplt>
 801162e:	2800      	cmp	r0, #0
 8011630:	f040 8289 	bne.w	8011b46 <_dtoa_r+0x976>
 8011634:	ec5b ab19 	vmov	sl, fp, d9
 8011638:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801163a:	2b00      	cmp	r3, #0
 801163c:	f2c0 8148 	blt.w	80118d0 <_dtoa_r+0x700>
 8011640:	9a00      	ldr	r2, [sp, #0]
 8011642:	2a0e      	cmp	r2, #14
 8011644:	f300 8144 	bgt.w	80118d0 <_dtoa_r+0x700>
 8011648:	4b67      	ldr	r3, [pc, #412]	; (80117e8 <_dtoa_r+0x618>)
 801164a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801164e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011654:	2b00      	cmp	r3, #0
 8011656:	f280 80d5 	bge.w	8011804 <_dtoa_r+0x634>
 801165a:	9b03      	ldr	r3, [sp, #12]
 801165c:	2b00      	cmp	r3, #0
 801165e:	f300 80d1 	bgt.w	8011804 <_dtoa_r+0x634>
 8011662:	f040 826f 	bne.w	8011b44 <_dtoa_r+0x974>
 8011666:	4b65      	ldr	r3, [pc, #404]	; (80117fc <_dtoa_r+0x62c>)
 8011668:	2200      	movs	r2, #0
 801166a:	4640      	mov	r0, r8
 801166c:	4649      	mov	r1, r9
 801166e:	f7ee ffe3 	bl	8000638 <__aeabi_dmul>
 8011672:	4652      	mov	r2, sl
 8011674:	465b      	mov	r3, fp
 8011676:	f7ef fa65 	bl	8000b44 <__aeabi_dcmpge>
 801167a:	9e03      	ldr	r6, [sp, #12]
 801167c:	4637      	mov	r7, r6
 801167e:	2800      	cmp	r0, #0
 8011680:	f040 8245 	bne.w	8011b0e <_dtoa_r+0x93e>
 8011684:	9d01      	ldr	r5, [sp, #4]
 8011686:	2331      	movs	r3, #49	; 0x31
 8011688:	f805 3b01 	strb.w	r3, [r5], #1
 801168c:	9b00      	ldr	r3, [sp, #0]
 801168e:	3301      	adds	r3, #1
 8011690:	9300      	str	r3, [sp, #0]
 8011692:	e240      	b.n	8011b16 <_dtoa_r+0x946>
 8011694:	07f2      	lsls	r2, r6, #31
 8011696:	d505      	bpl.n	80116a4 <_dtoa_r+0x4d4>
 8011698:	e9d7 2300 	ldrd	r2, r3, [r7]
 801169c:	f7ee ffcc 	bl	8000638 <__aeabi_dmul>
 80116a0:	3501      	adds	r5, #1
 80116a2:	2301      	movs	r3, #1
 80116a4:	1076      	asrs	r6, r6, #1
 80116a6:	3708      	adds	r7, #8
 80116a8:	e777      	b.n	801159a <_dtoa_r+0x3ca>
 80116aa:	2502      	movs	r5, #2
 80116ac:	e779      	b.n	80115a2 <_dtoa_r+0x3d2>
 80116ae:	9f00      	ldr	r7, [sp, #0]
 80116b0:	9e03      	ldr	r6, [sp, #12]
 80116b2:	e794      	b.n	80115de <_dtoa_r+0x40e>
 80116b4:	9901      	ldr	r1, [sp, #4]
 80116b6:	4b4c      	ldr	r3, [pc, #304]	; (80117e8 <_dtoa_r+0x618>)
 80116b8:	4431      	add	r1, r6
 80116ba:	910d      	str	r1, [sp, #52]	; 0x34
 80116bc:	9908      	ldr	r1, [sp, #32]
 80116be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80116c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80116c6:	2900      	cmp	r1, #0
 80116c8:	d043      	beq.n	8011752 <_dtoa_r+0x582>
 80116ca:	494d      	ldr	r1, [pc, #308]	; (8011800 <_dtoa_r+0x630>)
 80116cc:	2000      	movs	r0, #0
 80116ce:	f7ef f8dd 	bl	800088c <__aeabi_ddiv>
 80116d2:	4652      	mov	r2, sl
 80116d4:	465b      	mov	r3, fp
 80116d6:	f7ee fdf7 	bl	80002c8 <__aeabi_dsub>
 80116da:	9d01      	ldr	r5, [sp, #4]
 80116dc:	4682      	mov	sl, r0
 80116de:	468b      	mov	fp, r1
 80116e0:	4649      	mov	r1, r9
 80116e2:	4640      	mov	r0, r8
 80116e4:	f7ef fa58 	bl	8000b98 <__aeabi_d2iz>
 80116e8:	4606      	mov	r6, r0
 80116ea:	f7ee ff3b 	bl	8000564 <__aeabi_i2d>
 80116ee:	4602      	mov	r2, r0
 80116f0:	460b      	mov	r3, r1
 80116f2:	4640      	mov	r0, r8
 80116f4:	4649      	mov	r1, r9
 80116f6:	f7ee fde7 	bl	80002c8 <__aeabi_dsub>
 80116fa:	3630      	adds	r6, #48	; 0x30
 80116fc:	f805 6b01 	strb.w	r6, [r5], #1
 8011700:	4652      	mov	r2, sl
 8011702:	465b      	mov	r3, fp
 8011704:	4680      	mov	r8, r0
 8011706:	4689      	mov	r9, r1
 8011708:	f7ef fa08 	bl	8000b1c <__aeabi_dcmplt>
 801170c:	2800      	cmp	r0, #0
 801170e:	d163      	bne.n	80117d8 <_dtoa_r+0x608>
 8011710:	4642      	mov	r2, r8
 8011712:	464b      	mov	r3, r9
 8011714:	4936      	ldr	r1, [pc, #216]	; (80117f0 <_dtoa_r+0x620>)
 8011716:	2000      	movs	r0, #0
 8011718:	f7ee fdd6 	bl	80002c8 <__aeabi_dsub>
 801171c:	4652      	mov	r2, sl
 801171e:	465b      	mov	r3, fp
 8011720:	f7ef f9fc 	bl	8000b1c <__aeabi_dcmplt>
 8011724:	2800      	cmp	r0, #0
 8011726:	f040 80b5 	bne.w	8011894 <_dtoa_r+0x6c4>
 801172a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801172c:	429d      	cmp	r5, r3
 801172e:	d081      	beq.n	8011634 <_dtoa_r+0x464>
 8011730:	4b30      	ldr	r3, [pc, #192]	; (80117f4 <_dtoa_r+0x624>)
 8011732:	2200      	movs	r2, #0
 8011734:	4650      	mov	r0, sl
 8011736:	4659      	mov	r1, fp
 8011738:	f7ee ff7e 	bl	8000638 <__aeabi_dmul>
 801173c:	4b2d      	ldr	r3, [pc, #180]	; (80117f4 <_dtoa_r+0x624>)
 801173e:	4682      	mov	sl, r0
 8011740:	468b      	mov	fp, r1
 8011742:	4640      	mov	r0, r8
 8011744:	4649      	mov	r1, r9
 8011746:	2200      	movs	r2, #0
 8011748:	f7ee ff76 	bl	8000638 <__aeabi_dmul>
 801174c:	4680      	mov	r8, r0
 801174e:	4689      	mov	r9, r1
 8011750:	e7c6      	b.n	80116e0 <_dtoa_r+0x510>
 8011752:	4650      	mov	r0, sl
 8011754:	4659      	mov	r1, fp
 8011756:	f7ee ff6f 	bl	8000638 <__aeabi_dmul>
 801175a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801175c:	9d01      	ldr	r5, [sp, #4]
 801175e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011760:	4682      	mov	sl, r0
 8011762:	468b      	mov	fp, r1
 8011764:	4649      	mov	r1, r9
 8011766:	4640      	mov	r0, r8
 8011768:	f7ef fa16 	bl	8000b98 <__aeabi_d2iz>
 801176c:	4606      	mov	r6, r0
 801176e:	f7ee fef9 	bl	8000564 <__aeabi_i2d>
 8011772:	3630      	adds	r6, #48	; 0x30
 8011774:	4602      	mov	r2, r0
 8011776:	460b      	mov	r3, r1
 8011778:	4640      	mov	r0, r8
 801177a:	4649      	mov	r1, r9
 801177c:	f7ee fda4 	bl	80002c8 <__aeabi_dsub>
 8011780:	f805 6b01 	strb.w	r6, [r5], #1
 8011784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011786:	429d      	cmp	r5, r3
 8011788:	4680      	mov	r8, r0
 801178a:	4689      	mov	r9, r1
 801178c:	f04f 0200 	mov.w	r2, #0
 8011790:	d124      	bne.n	80117dc <_dtoa_r+0x60c>
 8011792:	4b1b      	ldr	r3, [pc, #108]	; (8011800 <_dtoa_r+0x630>)
 8011794:	4650      	mov	r0, sl
 8011796:	4659      	mov	r1, fp
 8011798:	f7ee fd98 	bl	80002cc <__adddf3>
 801179c:	4602      	mov	r2, r0
 801179e:	460b      	mov	r3, r1
 80117a0:	4640      	mov	r0, r8
 80117a2:	4649      	mov	r1, r9
 80117a4:	f7ef f9d8 	bl	8000b58 <__aeabi_dcmpgt>
 80117a8:	2800      	cmp	r0, #0
 80117aa:	d173      	bne.n	8011894 <_dtoa_r+0x6c4>
 80117ac:	4652      	mov	r2, sl
 80117ae:	465b      	mov	r3, fp
 80117b0:	4913      	ldr	r1, [pc, #76]	; (8011800 <_dtoa_r+0x630>)
 80117b2:	2000      	movs	r0, #0
 80117b4:	f7ee fd88 	bl	80002c8 <__aeabi_dsub>
 80117b8:	4602      	mov	r2, r0
 80117ba:	460b      	mov	r3, r1
 80117bc:	4640      	mov	r0, r8
 80117be:	4649      	mov	r1, r9
 80117c0:	f7ef f9ac 	bl	8000b1c <__aeabi_dcmplt>
 80117c4:	2800      	cmp	r0, #0
 80117c6:	f43f af35 	beq.w	8011634 <_dtoa_r+0x464>
 80117ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80117cc:	1e6b      	subs	r3, r5, #1
 80117ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80117d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80117d4:	2b30      	cmp	r3, #48	; 0x30
 80117d6:	d0f8      	beq.n	80117ca <_dtoa_r+0x5fa>
 80117d8:	9700      	str	r7, [sp, #0]
 80117da:	e049      	b.n	8011870 <_dtoa_r+0x6a0>
 80117dc:	4b05      	ldr	r3, [pc, #20]	; (80117f4 <_dtoa_r+0x624>)
 80117de:	f7ee ff2b 	bl	8000638 <__aeabi_dmul>
 80117e2:	4680      	mov	r8, r0
 80117e4:	4689      	mov	r9, r1
 80117e6:	e7bd      	b.n	8011764 <_dtoa_r+0x594>
 80117e8:	080154c0 	.word	0x080154c0
 80117ec:	08015498 	.word	0x08015498
 80117f0:	3ff00000 	.word	0x3ff00000
 80117f4:	40240000 	.word	0x40240000
 80117f8:	401c0000 	.word	0x401c0000
 80117fc:	40140000 	.word	0x40140000
 8011800:	3fe00000 	.word	0x3fe00000
 8011804:	9d01      	ldr	r5, [sp, #4]
 8011806:	4656      	mov	r6, sl
 8011808:	465f      	mov	r7, fp
 801180a:	4642      	mov	r2, r8
 801180c:	464b      	mov	r3, r9
 801180e:	4630      	mov	r0, r6
 8011810:	4639      	mov	r1, r7
 8011812:	f7ef f83b 	bl	800088c <__aeabi_ddiv>
 8011816:	f7ef f9bf 	bl	8000b98 <__aeabi_d2iz>
 801181a:	4682      	mov	sl, r0
 801181c:	f7ee fea2 	bl	8000564 <__aeabi_i2d>
 8011820:	4642      	mov	r2, r8
 8011822:	464b      	mov	r3, r9
 8011824:	f7ee ff08 	bl	8000638 <__aeabi_dmul>
 8011828:	4602      	mov	r2, r0
 801182a:	460b      	mov	r3, r1
 801182c:	4630      	mov	r0, r6
 801182e:	4639      	mov	r1, r7
 8011830:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011834:	f7ee fd48 	bl	80002c8 <__aeabi_dsub>
 8011838:	f805 6b01 	strb.w	r6, [r5], #1
 801183c:	9e01      	ldr	r6, [sp, #4]
 801183e:	9f03      	ldr	r7, [sp, #12]
 8011840:	1bae      	subs	r6, r5, r6
 8011842:	42b7      	cmp	r7, r6
 8011844:	4602      	mov	r2, r0
 8011846:	460b      	mov	r3, r1
 8011848:	d135      	bne.n	80118b6 <_dtoa_r+0x6e6>
 801184a:	f7ee fd3f 	bl	80002cc <__adddf3>
 801184e:	4642      	mov	r2, r8
 8011850:	464b      	mov	r3, r9
 8011852:	4606      	mov	r6, r0
 8011854:	460f      	mov	r7, r1
 8011856:	f7ef f97f 	bl	8000b58 <__aeabi_dcmpgt>
 801185a:	b9d0      	cbnz	r0, 8011892 <_dtoa_r+0x6c2>
 801185c:	4642      	mov	r2, r8
 801185e:	464b      	mov	r3, r9
 8011860:	4630      	mov	r0, r6
 8011862:	4639      	mov	r1, r7
 8011864:	f7ef f950 	bl	8000b08 <__aeabi_dcmpeq>
 8011868:	b110      	cbz	r0, 8011870 <_dtoa_r+0x6a0>
 801186a:	f01a 0f01 	tst.w	sl, #1
 801186e:	d110      	bne.n	8011892 <_dtoa_r+0x6c2>
 8011870:	4620      	mov	r0, r4
 8011872:	ee18 1a10 	vmov	r1, s16
 8011876:	f001 f899 	bl	80129ac <_Bfree>
 801187a:	2300      	movs	r3, #0
 801187c:	9800      	ldr	r0, [sp, #0]
 801187e:	702b      	strb	r3, [r5, #0]
 8011880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011882:	3001      	adds	r0, #1
 8011884:	6018      	str	r0, [r3, #0]
 8011886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011888:	2b00      	cmp	r3, #0
 801188a:	f43f acf1 	beq.w	8011270 <_dtoa_r+0xa0>
 801188e:	601d      	str	r5, [r3, #0]
 8011890:	e4ee      	b.n	8011270 <_dtoa_r+0xa0>
 8011892:	9f00      	ldr	r7, [sp, #0]
 8011894:	462b      	mov	r3, r5
 8011896:	461d      	mov	r5, r3
 8011898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801189c:	2a39      	cmp	r2, #57	; 0x39
 801189e:	d106      	bne.n	80118ae <_dtoa_r+0x6de>
 80118a0:	9a01      	ldr	r2, [sp, #4]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d1f7      	bne.n	8011896 <_dtoa_r+0x6c6>
 80118a6:	9901      	ldr	r1, [sp, #4]
 80118a8:	2230      	movs	r2, #48	; 0x30
 80118aa:	3701      	adds	r7, #1
 80118ac:	700a      	strb	r2, [r1, #0]
 80118ae:	781a      	ldrb	r2, [r3, #0]
 80118b0:	3201      	adds	r2, #1
 80118b2:	701a      	strb	r2, [r3, #0]
 80118b4:	e790      	b.n	80117d8 <_dtoa_r+0x608>
 80118b6:	4ba6      	ldr	r3, [pc, #664]	; (8011b50 <_dtoa_r+0x980>)
 80118b8:	2200      	movs	r2, #0
 80118ba:	f7ee febd 	bl	8000638 <__aeabi_dmul>
 80118be:	2200      	movs	r2, #0
 80118c0:	2300      	movs	r3, #0
 80118c2:	4606      	mov	r6, r0
 80118c4:	460f      	mov	r7, r1
 80118c6:	f7ef f91f 	bl	8000b08 <__aeabi_dcmpeq>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	d09d      	beq.n	801180a <_dtoa_r+0x63a>
 80118ce:	e7cf      	b.n	8011870 <_dtoa_r+0x6a0>
 80118d0:	9a08      	ldr	r2, [sp, #32]
 80118d2:	2a00      	cmp	r2, #0
 80118d4:	f000 80d7 	beq.w	8011a86 <_dtoa_r+0x8b6>
 80118d8:	9a06      	ldr	r2, [sp, #24]
 80118da:	2a01      	cmp	r2, #1
 80118dc:	f300 80ba 	bgt.w	8011a54 <_dtoa_r+0x884>
 80118e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118e2:	2a00      	cmp	r2, #0
 80118e4:	f000 80b2 	beq.w	8011a4c <_dtoa_r+0x87c>
 80118e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80118ec:	9e07      	ldr	r6, [sp, #28]
 80118ee:	9d04      	ldr	r5, [sp, #16]
 80118f0:	9a04      	ldr	r2, [sp, #16]
 80118f2:	441a      	add	r2, r3
 80118f4:	9204      	str	r2, [sp, #16]
 80118f6:	9a05      	ldr	r2, [sp, #20]
 80118f8:	2101      	movs	r1, #1
 80118fa:	441a      	add	r2, r3
 80118fc:	4620      	mov	r0, r4
 80118fe:	9205      	str	r2, [sp, #20]
 8011900:	f001 f956 	bl	8012bb0 <__i2b>
 8011904:	4607      	mov	r7, r0
 8011906:	2d00      	cmp	r5, #0
 8011908:	dd0c      	ble.n	8011924 <_dtoa_r+0x754>
 801190a:	9b05      	ldr	r3, [sp, #20]
 801190c:	2b00      	cmp	r3, #0
 801190e:	dd09      	ble.n	8011924 <_dtoa_r+0x754>
 8011910:	42ab      	cmp	r3, r5
 8011912:	9a04      	ldr	r2, [sp, #16]
 8011914:	bfa8      	it	ge
 8011916:	462b      	movge	r3, r5
 8011918:	1ad2      	subs	r2, r2, r3
 801191a:	9204      	str	r2, [sp, #16]
 801191c:	9a05      	ldr	r2, [sp, #20]
 801191e:	1aed      	subs	r5, r5, r3
 8011920:	1ad3      	subs	r3, r2, r3
 8011922:	9305      	str	r3, [sp, #20]
 8011924:	9b07      	ldr	r3, [sp, #28]
 8011926:	b31b      	cbz	r3, 8011970 <_dtoa_r+0x7a0>
 8011928:	9b08      	ldr	r3, [sp, #32]
 801192a:	2b00      	cmp	r3, #0
 801192c:	f000 80af 	beq.w	8011a8e <_dtoa_r+0x8be>
 8011930:	2e00      	cmp	r6, #0
 8011932:	dd13      	ble.n	801195c <_dtoa_r+0x78c>
 8011934:	4639      	mov	r1, r7
 8011936:	4632      	mov	r2, r6
 8011938:	4620      	mov	r0, r4
 801193a:	f001 f9f9 	bl	8012d30 <__pow5mult>
 801193e:	ee18 2a10 	vmov	r2, s16
 8011942:	4601      	mov	r1, r0
 8011944:	4607      	mov	r7, r0
 8011946:	4620      	mov	r0, r4
 8011948:	f001 f948 	bl	8012bdc <__multiply>
 801194c:	ee18 1a10 	vmov	r1, s16
 8011950:	4680      	mov	r8, r0
 8011952:	4620      	mov	r0, r4
 8011954:	f001 f82a 	bl	80129ac <_Bfree>
 8011958:	ee08 8a10 	vmov	s16, r8
 801195c:	9b07      	ldr	r3, [sp, #28]
 801195e:	1b9a      	subs	r2, r3, r6
 8011960:	d006      	beq.n	8011970 <_dtoa_r+0x7a0>
 8011962:	ee18 1a10 	vmov	r1, s16
 8011966:	4620      	mov	r0, r4
 8011968:	f001 f9e2 	bl	8012d30 <__pow5mult>
 801196c:	ee08 0a10 	vmov	s16, r0
 8011970:	2101      	movs	r1, #1
 8011972:	4620      	mov	r0, r4
 8011974:	f001 f91c 	bl	8012bb0 <__i2b>
 8011978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801197a:	2b00      	cmp	r3, #0
 801197c:	4606      	mov	r6, r0
 801197e:	f340 8088 	ble.w	8011a92 <_dtoa_r+0x8c2>
 8011982:	461a      	mov	r2, r3
 8011984:	4601      	mov	r1, r0
 8011986:	4620      	mov	r0, r4
 8011988:	f001 f9d2 	bl	8012d30 <__pow5mult>
 801198c:	9b06      	ldr	r3, [sp, #24]
 801198e:	2b01      	cmp	r3, #1
 8011990:	4606      	mov	r6, r0
 8011992:	f340 8081 	ble.w	8011a98 <_dtoa_r+0x8c8>
 8011996:	f04f 0800 	mov.w	r8, #0
 801199a:	6933      	ldr	r3, [r6, #16]
 801199c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80119a0:	6918      	ldr	r0, [r3, #16]
 80119a2:	f001 f8b5 	bl	8012b10 <__hi0bits>
 80119a6:	f1c0 0020 	rsb	r0, r0, #32
 80119aa:	9b05      	ldr	r3, [sp, #20]
 80119ac:	4418      	add	r0, r3
 80119ae:	f010 001f 	ands.w	r0, r0, #31
 80119b2:	f000 8092 	beq.w	8011ada <_dtoa_r+0x90a>
 80119b6:	f1c0 0320 	rsb	r3, r0, #32
 80119ba:	2b04      	cmp	r3, #4
 80119bc:	f340 808a 	ble.w	8011ad4 <_dtoa_r+0x904>
 80119c0:	f1c0 001c 	rsb	r0, r0, #28
 80119c4:	9b04      	ldr	r3, [sp, #16]
 80119c6:	4403      	add	r3, r0
 80119c8:	9304      	str	r3, [sp, #16]
 80119ca:	9b05      	ldr	r3, [sp, #20]
 80119cc:	4403      	add	r3, r0
 80119ce:	4405      	add	r5, r0
 80119d0:	9305      	str	r3, [sp, #20]
 80119d2:	9b04      	ldr	r3, [sp, #16]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	dd07      	ble.n	80119e8 <_dtoa_r+0x818>
 80119d8:	ee18 1a10 	vmov	r1, s16
 80119dc:	461a      	mov	r2, r3
 80119de:	4620      	mov	r0, r4
 80119e0:	f001 fa00 	bl	8012de4 <__lshift>
 80119e4:	ee08 0a10 	vmov	s16, r0
 80119e8:	9b05      	ldr	r3, [sp, #20]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	dd05      	ble.n	80119fa <_dtoa_r+0x82a>
 80119ee:	4631      	mov	r1, r6
 80119f0:	461a      	mov	r2, r3
 80119f2:	4620      	mov	r0, r4
 80119f4:	f001 f9f6 	bl	8012de4 <__lshift>
 80119f8:	4606      	mov	r6, r0
 80119fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d06e      	beq.n	8011ade <_dtoa_r+0x90e>
 8011a00:	ee18 0a10 	vmov	r0, s16
 8011a04:	4631      	mov	r1, r6
 8011a06:	f001 fa5d 	bl	8012ec4 <__mcmp>
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	da67      	bge.n	8011ade <_dtoa_r+0x90e>
 8011a0e:	9b00      	ldr	r3, [sp, #0]
 8011a10:	3b01      	subs	r3, #1
 8011a12:	ee18 1a10 	vmov	r1, s16
 8011a16:	9300      	str	r3, [sp, #0]
 8011a18:	220a      	movs	r2, #10
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	f000 ffe7 	bl	80129f0 <__multadd>
 8011a22:	9b08      	ldr	r3, [sp, #32]
 8011a24:	ee08 0a10 	vmov	s16, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	f000 81b1 	beq.w	8011d90 <_dtoa_r+0xbc0>
 8011a2e:	2300      	movs	r3, #0
 8011a30:	4639      	mov	r1, r7
 8011a32:	220a      	movs	r2, #10
 8011a34:	4620      	mov	r0, r4
 8011a36:	f000 ffdb 	bl	80129f0 <__multadd>
 8011a3a:	9b02      	ldr	r3, [sp, #8]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	4607      	mov	r7, r0
 8011a40:	f300 808e 	bgt.w	8011b60 <_dtoa_r+0x990>
 8011a44:	9b06      	ldr	r3, [sp, #24]
 8011a46:	2b02      	cmp	r3, #2
 8011a48:	dc51      	bgt.n	8011aee <_dtoa_r+0x91e>
 8011a4a:	e089      	b.n	8011b60 <_dtoa_r+0x990>
 8011a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011a4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011a52:	e74b      	b.n	80118ec <_dtoa_r+0x71c>
 8011a54:	9b03      	ldr	r3, [sp, #12]
 8011a56:	1e5e      	subs	r6, r3, #1
 8011a58:	9b07      	ldr	r3, [sp, #28]
 8011a5a:	42b3      	cmp	r3, r6
 8011a5c:	bfbf      	itttt	lt
 8011a5e:	9b07      	ldrlt	r3, [sp, #28]
 8011a60:	9607      	strlt	r6, [sp, #28]
 8011a62:	1af2      	sublt	r2, r6, r3
 8011a64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011a66:	bfb6      	itet	lt
 8011a68:	189b      	addlt	r3, r3, r2
 8011a6a:	1b9e      	subge	r6, r3, r6
 8011a6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011a6e:	9b03      	ldr	r3, [sp, #12]
 8011a70:	bfb8      	it	lt
 8011a72:	2600      	movlt	r6, #0
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	bfb7      	itett	lt
 8011a78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011a7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011a80:	1a9d      	sublt	r5, r3, r2
 8011a82:	2300      	movlt	r3, #0
 8011a84:	e734      	b.n	80118f0 <_dtoa_r+0x720>
 8011a86:	9e07      	ldr	r6, [sp, #28]
 8011a88:	9d04      	ldr	r5, [sp, #16]
 8011a8a:	9f08      	ldr	r7, [sp, #32]
 8011a8c:	e73b      	b.n	8011906 <_dtoa_r+0x736>
 8011a8e:	9a07      	ldr	r2, [sp, #28]
 8011a90:	e767      	b.n	8011962 <_dtoa_r+0x792>
 8011a92:	9b06      	ldr	r3, [sp, #24]
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	dc18      	bgt.n	8011aca <_dtoa_r+0x8fa>
 8011a98:	f1ba 0f00 	cmp.w	sl, #0
 8011a9c:	d115      	bne.n	8011aca <_dtoa_r+0x8fa>
 8011a9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011aa2:	b993      	cbnz	r3, 8011aca <_dtoa_r+0x8fa>
 8011aa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011aa8:	0d1b      	lsrs	r3, r3, #20
 8011aaa:	051b      	lsls	r3, r3, #20
 8011aac:	b183      	cbz	r3, 8011ad0 <_dtoa_r+0x900>
 8011aae:	9b04      	ldr	r3, [sp, #16]
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	9304      	str	r3, [sp, #16]
 8011ab4:	9b05      	ldr	r3, [sp, #20]
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	9305      	str	r3, [sp, #20]
 8011aba:	f04f 0801 	mov.w	r8, #1
 8011abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	f47f af6a 	bne.w	801199a <_dtoa_r+0x7ca>
 8011ac6:	2001      	movs	r0, #1
 8011ac8:	e76f      	b.n	80119aa <_dtoa_r+0x7da>
 8011aca:	f04f 0800 	mov.w	r8, #0
 8011ace:	e7f6      	b.n	8011abe <_dtoa_r+0x8ee>
 8011ad0:	4698      	mov	r8, r3
 8011ad2:	e7f4      	b.n	8011abe <_dtoa_r+0x8ee>
 8011ad4:	f43f af7d 	beq.w	80119d2 <_dtoa_r+0x802>
 8011ad8:	4618      	mov	r0, r3
 8011ada:	301c      	adds	r0, #28
 8011adc:	e772      	b.n	80119c4 <_dtoa_r+0x7f4>
 8011ade:	9b03      	ldr	r3, [sp, #12]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	dc37      	bgt.n	8011b54 <_dtoa_r+0x984>
 8011ae4:	9b06      	ldr	r3, [sp, #24]
 8011ae6:	2b02      	cmp	r3, #2
 8011ae8:	dd34      	ble.n	8011b54 <_dtoa_r+0x984>
 8011aea:	9b03      	ldr	r3, [sp, #12]
 8011aec:	9302      	str	r3, [sp, #8]
 8011aee:	9b02      	ldr	r3, [sp, #8]
 8011af0:	b96b      	cbnz	r3, 8011b0e <_dtoa_r+0x93e>
 8011af2:	4631      	mov	r1, r6
 8011af4:	2205      	movs	r2, #5
 8011af6:	4620      	mov	r0, r4
 8011af8:	f000 ff7a 	bl	80129f0 <__multadd>
 8011afc:	4601      	mov	r1, r0
 8011afe:	4606      	mov	r6, r0
 8011b00:	ee18 0a10 	vmov	r0, s16
 8011b04:	f001 f9de 	bl	8012ec4 <__mcmp>
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	f73f adbb 	bgt.w	8011684 <_dtoa_r+0x4b4>
 8011b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b10:	9d01      	ldr	r5, [sp, #4]
 8011b12:	43db      	mvns	r3, r3
 8011b14:	9300      	str	r3, [sp, #0]
 8011b16:	f04f 0800 	mov.w	r8, #0
 8011b1a:	4631      	mov	r1, r6
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	f000 ff45 	bl	80129ac <_Bfree>
 8011b22:	2f00      	cmp	r7, #0
 8011b24:	f43f aea4 	beq.w	8011870 <_dtoa_r+0x6a0>
 8011b28:	f1b8 0f00 	cmp.w	r8, #0
 8011b2c:	d005      	beq.n	8011b3a <_dtoa_r+0x96a>
 8011b2e:	45b8      	cmp	r8, r7
 8011b30:	d003      	beq.n	8011b3a <_dtoa_r+0x96a>
 8011b32:	4641      	mov	r1, r8
 8011b34:	4620      	mov	r0, r4
 8011b36:	f000 ff39 	bl	80129ac <_Bfree>
 8011b3a:	4639      	mov	r1, r7
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	f000 ff35 	bl	80129ac <_Bfree>
 8011b42:	e695      	b.n	8011870 <_dtoa_r+0x6a0>
 8011b44:	2600      	movs	r6, #0
 8011b46:	4637      	mov	r7, r6
 8011b48:	e7e1      	b.n	8011b0e <_dtoa_r+0x93e>
 8011b4a:	9700      	str	r7, [sp, #0]
 8011b4c:	4637      	mov	r7, r6
 8011b4e:	e599      	b.n	8011684 <_dtoa_r+0x4b4>
 8011b50:	40240000 	.word	0x40240000
 8011b54:	9b08      	ldr	r3, [sp, #32]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	f000 80ca 	beq.w	8011cf0 <_dtoa_r+0xb20>
 8011b5c:	9b03      	ldr	r3, [sp, #12]
 8011b5e:	9302      	str	r3, [sp, #8]
 8011b60:	2d00      	cmp	r5, #0
 8011b62:	dd05      	ble.n	8011b70 <_dtoa_r+0x9a0>
 8011b64:	4639      	mov	r1, r7
 8011b66:	462a      	mov	r2, r5
 8011b68:	4620      	mov	r0, r4
 8011b6a:	f001 f93b 	bl	8012de4 <__lshift>
 8011b6e:	4607      	mov	r7, r0
 8011b70:	f1b8 0f00 	cmp.w	r8, #0
 8011b74:	d05b      	beq.n	8011c2e <_dtoa_r+0xa5e>
 8011b76:	6879      	ldr	r1, [r7, #4]
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f000 fed7 	bl	801292c <_Balloc>
 8011b7e:	4605      	mov	r5, r0
 8011b80:	b928      	cbnz	r0, 8011b8e <_dtoa_r+0x9be>
 8011b82:	4b87      	ldr	r3, [pc, #540]	; (8011da0 <_dtoa_r+0xbd0>)
 8011b84:	4602      	mov	r2, r0
 8011b86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011b8a:	f7ff bb3b 	b.w	8011204 <_dtoa_r+0x34>
 8011b8e:	693a      	ldr	r2, [r7, #16]
 8011b90:	3202      	adds	r2, #2
 8011b92:	0092      	lsls	r2, r2, #2
 8011b94:	f107 010c 	add.w	r1, r7, #12
 8011b98:	300c      	adds	r0, #12
 8011b9a:	f7fd fae3 	bl	800f164 <memcpy>
 8011b9e:	2201      	movs	r2, #1
 8011ba0:	4629      	mov	r1, r5
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	f001 f91e 	bl	8012de4 <__lshift>
 8011ba8:	9b01      	ldr	r3, [sp, #4]
 8011baa:	f103 0901 	add.w	r9, r3, #1
 8011bae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	9305      	str	r3, [sp, #20]
 8011bb6:	f00a 0301 	and.w	r3, sl, #1
 8011bba:	46b8      	mov	r8, r7
 8011bbc:	9304      	str	r3, [sp, #16]
 8011bbe:	4607      	mov	r7, r0
 8011bc0:	4631      	mov	r1, r6
 8011bc2:	ee18 0a10 	vmov	r0, s16
 8011bc6:	f7ff fa75 	bl	80110b4 <quorem>
 8011bca:	4641      	mov	r1, r8
 8011bcc:	9002      	str	r0, [sp, #8]
 8011bce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011bd2:	ee18 0a10 	vmov	r0, s16
 8011bd6:	f001 f975 	bl	8012ec4 <__mcmp>
 8011bda:	463a      	mov	r2, r7
 8011bdc:	9003      	str	r0, [sp, #12]
 8011bde:	4631      	mov	r1, r6
 8011be0:	4620      	mov	r0, r4
 8011be2:	f001 f98b 	bl	8012efc <__mdiff>
 8011be6:	68c2      	ldr	r2, [r0, #12]
 8011be8:	f109 3bff 	add.w	fp, r9, #4294967295
 8011bec:	4605      	mov	r5, r0
 8011bee:	bb02      	cbnz	r2, 8011c32 <_dtoa_r+0xa62>
 8011bf0:	4601      	mov	r1, r0
 8011bf2:	ee18 0a10 	vmov	r0, s16
 8011bf6:	f001 f965 	bl	8012ec4 <__mcmp>
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	4629      	mov	r1, r5
 8011bfe:	4620      	mov	r0, r4
 8011c00:	9207      	str	r2, [sp, #28]
 8011c02:	f000 fed3 	bl	80129ac <_Bfree>
 8011c06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011c0a:	ea43 0102 	orr.w	r1, r3, r2
 8011c0e:	9b04      	ldr	r3, [sp, #16]
 8011c10:	430b      	orrs	r3, r1
 8011c12:	464d      	mov	r5, r9
 8011c14:	d10f      	bne.n	8011c36 <_dtoa_r+0xa66>
 8011c16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011c1a:	d02a      	beq.n	8011c72 <_dtoa_r+0xaa2>
 8011c1c:	9b03      	ldr	r3, [sp, #12]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	dd02      	ble.n	8011c28 <_dtoa_r+0xa58>
 8011c22:	9b02      	ldr	r3, [sp, #8]
 8011c24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011c28:	f88b a000 	strb.w	sl, [fp]
 8011c2c:	e775      	b.n	8011b1a <_dtoa_r+0x94a>
 8011c2e:	4638      	mov	r0, r7
 8011c30:	e7ba      	b.n	8011ba8 <_dtoa_r+0x9d8>
 8011c32:	2201      	movs	r2, #1
 8011c34:	e7e2      	b.n	8011bfc <_dtoa_r+0xa2c>
 8011c36:	9b03      	ldr	r3, [sp, #12]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	db04      	blt.n	8011c46 <_dtoa_r+0xa76>
 8011c3c:	9906      	ldr	r1, [sp, #24]
 8011c3e:	430b      	orrs	r3, r1
 8011c40:	9904      	ldr	r1, [sp, #16]
 8011c42:	430b      	orrs	r3, r1
 8011c44:	d122      	bne.n	8011c8c <_dtoa_r+0xabc>
 8011c46:	2a00      	cmp	r2, #0
 8011c48:	ddee      	ble.n	8011c28 <_dtoa_r+0xa58>
 8011c4a:	ee18 1a10 	vmov	r1, s16
 8011c4e:	2201      	movs	r2, #1
 8011c50:	4620      	mov	r0, r4
 8011c52:	f001 f8c7 	bl	8012de4 <__lshift>
 8011c56:	4631      	mov	r1, r6
 8011c58:	ee08 0a10 	vmov	s16, r0
 8011c5c:	f001 f932 	bl	8012ec4 <__mcmp>
 8011c60:	2800      	cmp	r0, #0
 8011c62:	dc03      	bgt.n	8011c6c <_dtoa_r+0xa9c>
 8011c64:	d1e0      	bne.n	8011c28 <_dtoa_r+0xa58>
 8011c66:	f01a 0f01 	tst.w	sl, #1
 8011c6a:	d0dd      	beq.n	8011c28 <_dtoa_r+0xa58>
 8011c6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011c70:	d1d7      	bne.n	8011c22 <_dtoa_r+0xa52>
 8011c72:	2339      	movs	r3, #57	; 0x39
 8011c74:	f88b 3000 	strb.w	r3, [fp]
 8011c78:	462b      	mov	r3, r5
 8011c7a:	461d      	mov	r5, r3
 8011c7c:	3b01      	subs	r3, #1
 8011c7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011c82:	2a39      	cmp	r2, #57	; 0x39
 8011c84:	d071      	beq.n	8011d6a <_dtoa_r+0xb9a>
 8011c86:	3201      	adds	r2, #1
 8011c88:	701a      	strb	r2, [r3, #0]
 8011c8a:	e746      	b.n	8011b1a <_dtoa_r+0x94a>
 8011c8c:	2a00      	cmp	r2, #0
 8011c8e:	dd07      	ble.n	8011ca0 <_dtoa_r+0xad0>
 8011c90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011c94:	d0ed      	beq.n	8011c72 <_dtoa_r+0xaa2>
 8011c96:	f10a 0301 	add.w	r3, sl, #1
 8011c9a:	f88b 3000 	strb.w	r3, [fp]
 8011c9e:	e73c      	b.n	8011b1a <_dtoa_r+0x94a>
 8011ca0:	9b05      	ldr	r3, [sp, #20]
 8011ca2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011ca6:	4599      	cmp	r9, r3
 8011ca8:	d047      	beq.n	8011d3a <_dtoa_r+0xb6a>
 8011caa:	ee18 1a10 	vmov	r1, s16
 8011cae:	2300      	movs	r3, #0
 8011cb0:	220a      	movs	r2, #10
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	f000 fe9c 	bl	80129f0 <__multadd>
 8011cb8:	45b8      	cmp	r8, r7
 8011cba:	ee08 0a10 	vmov	s16, r0
 8011cbe:	f04f 0300 	mov.w	r3, #0
 8011cc2:	f04f 020a 	mov.w	r2, #10
 8011cc6:	4641      	mov	r1, r8
 8011cc8:	4620      	mov	r0, r4
 8011cca:	d106      	bne.n	8011cda <_dtoa_r+0xb0a>
 8011ccc:	f000 fe90 	bl	80129f0 <__multadd>
 8011cd0:	4680      	mov	r8, r0
 8011cd2:	4607      	mov	r7, r0
 8011cd4:	f109 0901 	add.w	r9, r9, #1
 8011cd8:	e772      	b.n	8011bc0 <_dtoa_r+0x9f0>
 8011cda:	f000 fe89 	bl	80129f0 <__multadd>
 8011cde:	4639      	mov	r1, r7
 8011ce0:	4680      	mov	r8, r0
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	220a      	movs	r2, #10
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f000 fe82 	bl	80129f0 <__multadd>
 8011cec:	4607      	mov	r7, r0
 8011cee:	e7f1      	b.n	8011cd4 <_dtoa_r+0xb04>
 8011cf0:	9b03      	ldr	r3, [sp, #12]
 8011cf2:	9302      	str	r3, [sp, #8]
 8011cf4:	9d01      	ldr	r5, [sp, #4]
 8011cf6:	ee18 0a10 	vmov	r0, s16
 8011cfa:	4631      	mov	r1, r6
 8011cfc:	f7ff f9da 	bl	80110b4 <quorem>
 8011d00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011d04:	9b01      	ldr	r3, [sp, #4]
 8011d06:	f805 ab01 	strb.w	sl, [r5], #1
 8011d0a:	1aea      	subs	r2, r5, r3
 8011d0c:	9b02      	ldr	r3, [sp, #8]
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	dd09      	ble.n	8011d26 <_dtoa_r+0xb56>
 8011d12:	ee18 1a10 	vmov	r1, s16
 8011d16:	2300      	movs	r3, #0
 8011d18:	220a      	movs	r2, #10
 8011d1a:	4620      	mov	r0, r4
 8011d1c:	f000 fe68 	bl	80129f0 <__multadd>
 8011d20:	ee08 0a10 	vmov	s16, r0
 8011d24:	e7e7      	b.n	8011cf6 <_dtoa_r+0xb26>
 8011d26:	9b02      	ldr	r3, [sp, #8]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	bfc8      	it	gt
 8011d2c:	461d      	movgt	r5, r3
 8011d2e:	9b01      	ldr	r3, [sp, #4]
 8011d30:	bfd8      	it	le
 8011d32:	2501      	movle	r5, #1
 8011d34:	441d      	add	r5, r3
 8011d36:	f04f 0800 	mov.w	r8, #0
 8011d3a:	ee18 1a10 	vmov	r1, s16
 8011d3e:	2201      	movs	r2, #1
 8011d40:	4620      	mov	r0, r4
 8011d42:	f001 f84f 	bl	8012de4 <__lshift>
 8011d46:	4631      	mov	r1, r6
 8011d48:	ee08 0a10 	vmov	s16, r0
 8011d4c:	f001 f8ba 	bl	8012ec4 <__mcmp>
 8011d50:	2800      	cmp	r0, #0
 8011d52:	dc91      	bgt.n	8011c78 <_dtoa_r+0xaa8>
 8011d54:	d102      	bne.n	8011d5c <_dtoa_r+0xb8c>
 8011d56:	f01a 0f01 	tst.w	sl, #1
 8011d5a:	d18d      	bne.n	8011c78 <_dtoa_r+0xaa8>
 8011d5c:	462b      	mov	r3, r5
 8011d5e:	461d      	mov	r5, r3
 8011d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d64:	2a30      	cmp	r2, #48	; 0x30
 8011d66:	d0fa      	beq.n	8011d5e <_dtoa_r+0xb8e>
 8011d68:	e6d7      	b.n	8011b1a <_dtoa_r+0x94a>
 8011d6a:	9a01      	ldr	r2, [sp, #4]
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d184      	bne.n	8011c7a <_dtoa_r+0xaaa>
 8011d70:	9b00      	ldr	r3, [sp, #0]
 8011d72:	3301      	adds	r3, #1
 8011d74:	9300      	str	r3, [sp, #0]
 8011d76:	2331      	movs	r3, #49	; 0x31
 8011d78:	7013      	strb	r3, [r2, #0]
 8011d7a:	e6ce      	b.n	8011b1a <_dtoa_r+0x94a>
 8011d7c:	4b09      	ldr	r3, [pc, #36]	; (8011da4 <_dtoa_r+0xbd4>)
 8011d7e:	f7ff ba95 	b.w	80112ac <_dtoa_r+0xdc>
 8011d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	f47f aa6e 	bne.w	8011266 <_dtoa_r+0x96>
 8011d8a:	4b07      	ldr	r3, [pc, #28]	; (8011da8 <_dtoa_r+0xbd8>)
 8011d8c:	f7ff ba8e 	b.w	80112ac <_dtoa_r+0xdc>
 8011d90:	9b02      	ldr	r3, [sp, #8]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	dcae      	bgt.n	8011cf4 <_dtoa_r+0xb24>
 8011d96:	9b06      	ldr	r3, [sp, #24]
 8011d98:	2b02      	cmp	r3, #2
 8011d9a:	f73f aea8 	bgt.w	8011aee <_dtoa_r+0x91e>
 8011d9e:	e7a9      	b.n	8011cf4 <_dtoa_r+0xb24>
 8011da0:	0801534f 	.word	0x0801534f
 8011da4:	080155a9 	.word	0x080155a9
 8011da8:	080152d0 	.word	0x080152d0

08011dac <__sflush_r>:
 8011dac:	898a      	ldrh	r2, [r1, #12]
 8011dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db2:	4605      	mov	r5, r0
 8011db4:	0710      	lsls	r0, r2, #28
 8011db6:	460c      	mov	r4, r1
 8011db8:	d458      	bmi.n	8011e6c <__sflush_r+0xc0>
 8011dba:	684b      	ldr	r3, [r1, #4]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	dc05      	bgt.n	8011dcc <__sflush_r+0x20>
 8011dc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	dc02      	bgt.n	8011dcc <__sflush_r+0x20>
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dce:	2e00      	cmp	r6, #0
 8011dd0:	d0f9      	beq.n	8011dc6 <__sflush_r+0x1a>
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011dd8:	682f      	ldr	r7, [r5, #0]
 8011dda:	602b      	str	r3, [r5, #0]
 8011ddc:	d032      	beq.n	8011e44 <__sflush_r+0x98>
 8011dde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011de0:	89a3      	ldrh	r3, [r4, #12]
 8011de2:	075a      	lsls	r2, r3, #29
 8011de4:	d505      	bpl.n	8011df2 <__sflush_r+0x46>
 8011de6:	6863      	ldr	r3, [r4, #4]
 8011de8:	1ac0      	subs	r0, r0, r3
 8011dea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011dec:	b10b      	cbz	r3, 8011df2 <__sflush_r+0x46>
 8011dee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011df0:	1ac0      	subs	r0, r0, r3
 8011df2:	2300      	movs	r3, #0
 8011df4:	4602      	mov	r2, r0
 8011df6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011df8:	6a21      	ldr	r1, [r4, #32]
 8011dfa:	4628      	mov	r0, r5
 8011dfc:	47b0      	blx	r6
 8011dfe:	1c43      	adds	r3, r0, #1
 8011e00:	89a3      	ldrh	r3, [r4, #12]
 8011e02:	d106      	bne.n	8011e12 <__sflush_r+0x66>
 8011e04:	6829      	ldr	r1, [r5, #0]
 8011e06:	291d      	cmp	r1, #29
 8011e08:	d82c      	bhi.n	8011e64 <__sflush_r+0xb8>
 8011e0a:	4a2a      	ldr	r2, [pc, #168]	; (8011eb4 <__sflush_r+0x108>)
 8011e0c:	40ca      	lsrs	r2, r1
 8011e0e:	07d6      	lsls	r6, r2, #31
 8011e10:	d528      	bpl.n	8011e64 <__sflush_r+0xb8>
 8011e12:	2200      	movs	r2, #0
 8011e14:	6062      	str	r2, [r4, #4]
 8011e16:	04d9      	lsls	r1, r3, #19
 8011e18:	6922      	ldr	r2, [r4, #16]
 8011e1a:	6022      	str	r2, [r4, #0]
 8011e1c:	d504      	bpl.n	8011e28 <__sflush_r+0x7c>
 8011e1e:	1c42      	adds	r2, r0, #1
 8011e20:	d101      	bne.n	8011e26 <__sflush_r+0x7a>
 8011e22:	682b      	ldr	r3, [r5, #0]
 8011e24:	b903      	cbnz	r3, 8011e28 <__sflush_r+0x7c>
 8011e26:	6560      	str	r0, [r4, #84]	; 0x54
 8011e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e2a:	602f      	str	r7, [r5, #0]
 8011e2c:	2900      	cmp	r1, #0
 8011e2e:	d0ca      	beq.n	8011dc6 <__sflush_r+0x1a>
 8011e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e34:	4299      	cmp	r1, r3
 8011e36:	d002      	beq.n	8011e3e <__sflush_r+0x92>
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f001 fa4f 	bl	80132dc <_free_r>
 8011e3e:	2000      	movs	r0, #0
 8011e40:	6360      	str	r0, [r4, #52]	; 0x34
 8011e42:	e7c1      	b.n	8011dc8 <__sflush_r+0x1c>
 8011e44:	6a21      	ldr	r1, [r4, #32]
 8011e46:	2301      	movs	r3, #1
 8011e48:	4628      	mov	r0, r5
 8011e4a:	47b0      	blx	r6
 8011e4c:	1c41      	adds	r1, r0, #1
 8011e4e:	d1c7      	bne.n	8011de0 <__sflush_r+0x34>
 8011e50:	682b      	ldr	r3, [r5, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d0c4      	beq.n	8011de0 <__sflush_r+0x34>
 8011e56:	2b1d      	cmp	r3, #29
 8011e58:	d001      	beq.n	8011e5e <__sflush_r+0xb2>
 8011e5a:	2b16      	cmp	r3, #22
 8011e5c:	d101      	bne.n	8011e62 <__sflush_r+0xb6>
 8011e5e:	602f      	str	r7, [r5, #0]
 8011e60:	e7b1      	b.n	8011dc6 <__sflush_r+0x1a>
 8011e62:	89a3      	ldrh	r3, [r4, #12]
 8011e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e68:	81a3      	strh	r3, [r4, #12]
 8011e6a:	e7ad      	b.n	8011dc8 <__sflush_r+0x1c>
 8011e6c:	690f      	ldr	r7, [r1, #16]
 8011e6e:	2f00      	cmp	r7, #0
 8011e70:	d0a9      	beq.n	8011dc6 <__sflush_r+0x1a>
 8011e72:	0793      	lsls	r3, r2, #30
 8011e74:	680e      	ldr	r6, [r1, #0]
 8011e76:	bf08      	it	eq
 8011e78:	694b      	ldreq	r3, [r1, #20]
 8011e7a:	600f      	str	r7, [r1, #0]
 8011e7c:	bf18      	it	ne
 8011e7e:	2300      	movne	r3, #0
 8011e80:	eba6 0807 	sub.w	r8, r6, r7
 8011e84:	608b      	str	r3, [r1, #8]
 8011e86:	f1b8 0f00 	cmp.w	r8, #0
 8011e8a:	dd9c      	ble.n	8011dc6 <__sflush_r+0x1a>
 8011e8c:	6a21      	ldr	r1, [r4, #32]
 8011e8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e90:	4643      	mov	r3, r8
 8011e92:	463a      	mov	r2, r7
 8011e94:	4628      	mov	r0, r5
 8011e96:	47b0      	blx	r6
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	dc06      	bgt.n	8011eaa <__sflush_r+0xfe>
 8011e9c:	89a3      	ldrh	r3, [r4, #12]
 8011e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ea2:	81a3      	strh	r3, [r4, #12]
 8011ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea8:	e78e      	b.n	8011dc8 <__sflush_r+0x1c>
 8011eaa:	4407      	add	r7, r0
 8011eac:	eba8 0800 	sub.w	r8, r8, r0
 8011eb0:	e7e9      	b.n	8011e86 <__sflush_r+0xda>
 8011eb2:	bf00      	nop
 8011eb4:	20400001 	.word	0x20400001

08011eb8 <_fflush_r>:
 8011eb8:	b538      	push	{r3, r4, r5, lr}
 8011eba:	690b      	ldr	r3, [r1, #16]
 8011ebc:	4605      	mov	r5, r0
 8011ebe:	460c      	mov	r4, r1
 8011ec0:	b913      	cbnz	r3, 8011ec8 <_fflush_r+0x10>
 8011ec2:	2500      	movs	r5, #0
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	bd38      	pop	{r3, r4, r5, pc}
 8011ec8:	b118      	cbz	r0, 8011ed2 <_fflush_r+0x1a>
 8011eca:	6983      	ldr	r3, [r0, #24]
 8011ecc:	b90b      	cbnz	r3, 8011ed2 <_fflush_r+0x1a>
 8011ece:	f000 f887 	bl	8011fe0 <__sinit>
 8011ed2:	4b14      	ldr	r3, [pc, #80]	; (8011f24 <_fflush_r+0x6c>)
 8011ed4:	429c      	cmp	r4, r3
 8011ed6:	d11b      	bne.n	8011f10 <_fflush_r+0x58>
 8011ed8:	686c      	ldr	r4, [r5, #4]
 8011eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d0ef      	beq.n	8011ec2 <_fflush_r+0xa>
 8011ee2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ee4:	07d0      	lsls	r0, r2, #31
 8011ee6:	d404      	bmi.n	8011ef2 <_fflush_r+0x3a>
 8011ee8:	0599      	lsls	r1, r3, #22
 8011eea:	d402      	bmi.n	8011ef2 <_fflush_r+0x3a>
 8011eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011eee:	f000 fc88 	bl	8012802 <__retarget_lock_acquire_recursive>
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	4621      	mov	r1, r4
 8011ef6:	f7ff ff59 	bl	8011dac <__sflush_r>
 8011efa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011efc:	07da      	lsls	r2, r3, #31
 8011efe:	4605      	mov	r5, r0
 8011f00:	d4e0      	bmi.n	8011ec4 <_fflush_r+0xc>
 8011f02:	89a3      	ldrh	r3, [r4, #12]
 8011f04:	059b      	lsls	r3, r3, #22
 8011f06:	d4dd      	bmi.n	8011ec4 <_fflush_r+0xc>
 8011f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f0a:	f000 fc7b 	bl	8012804 <__retarget_lock_release_recursive>
 8011f0e:	e7d9      	b.n	8011ec4 <_fflush_r+0xc>
 8011f10:	4b05      	ldr	r3, [pc, #20]	; (8011f28 <_fflush_r+0x70>)
 8011f12:	429c      	cmp	r4, r3
 8011f14:	d101      	bne.n	8011f1a <_fflush_r+0x62>
 8011f16:	68ac      	ldr	r4, [r5, #8]
 8011f18:	e7df      	b.n	8011eda <_fflush_r+0x22>
 8011f1a:	4b04      	ldr	r3, [pc, #16]	; (8011f2c <_fflush_r+0x74>)
 8011f1c:	429c      	cmp	r4, r3
 8011f1e:	bf08      	it	eq
 8011f20:	68ec      	ldreq	r4, [r5, #12]
 8011f22:	e7da      	b.n	8011eda <_fflush_r+0x22>
 8011f24:	08015380 	.word	0x08015380
 8011f28:	080153a0 	.word	0x080153a0
 8011f2c:	08015360 	.word	0x08015360

08011f30 <std>:
 8011f30:	2300      	movs	r3, #0
 8011f32:	b510      	push	{r4, lr}
 8011f34:	4604      	mov	r4, r0
 8011f36:	e9c0 3300 	strd	r3, r3, [r0]
 8011f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f3e:	6083      	str	r3, [r0, #8]
 8011f40:	8181      	strh	r1, [r0, #12]
 8011f42:	6643      	str	r3, [r0, #100]	; 0x64
 8011f44:	81c2      	strh	r2, [r0, #14]
 8011f46:	6183      	str	r3, [r0, #24]
 8011f48:	4619      	mov	r1, r3
 8011f4a:	2208      	movs	r2, #8
 8011f4c:	305c      	adds	r0, #92	; 0x5c
 8011f4e:	f7fd f931 	bl	800f1b4 <memset>
 8011f52:	4b05      	ldr	r3, [pc, #20]	; (8011f68 <std+0x38>)
 8011f54:	6263      	str	r3, [r4, #36]	; 0x24
 8011f56:	4b05      	ldr	r3, [pc, #20]	; (8011f6c <std+0x3c>)
 8011f58:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f5a:	4b05      	ldr	r3, [pc, #20]	; (8011f70 <std+0x40>)
 8011f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f5e:	4b05      	ldr	r3, [pc, #20]	; (8011f74 <std+0x44>)
 8011f60:	6224      	str	r4, [r4, #32]
 8011f62:	6323      	str	r3, [r4, #48]	; 0x30
 8011f64:	bd10      	pop	{r4, pc}
 8011f66:	bf00      	nop
 8011f68:	080100e1 	.word	0x080100e1
 8011f6c:	08010107 	.word	0x08010107
 8011f70:	0801013f 	.word	0x0801013f
 8011f74:	08010163 	.word	0x08010163

08011f78 <_cleanup_r>:
 8011f78:	4901      	ldr	r1, [pc, #4]	; (8011f80 <_cleanup_r+0x8>)
 8011f7a:	f000 b8af 	b.w	80120dc <_fwalk_reent>
 8011f7e:	bf00      	nop
 8011f80:	08011eb9 	.word	0x08011eb9

08011f84 <__sfmoreglue>:
 8011f84:	b570      	push	{r4, r5, r6, lr}
 8011f86:	2268      	movs	r2, #104	; 0x68
 8011f88:	1e4d      	subs	r5, r1, #1
 8011f8a:	4355      	muls	r5, r2
 8011f8c:	460e      	mov	r6, r1
 8011f8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f92:	f001 fa0f 	bl	80133b4 <_malloc_r>
 8011f96:	4604      	mov	r4, r0
 8011f98:	b140      	cbz	r0, 8011fac <__sfmoreglue+0x28>
 8011f9a:	2100      	movs	r1, #0
 8011f9c:	e9c0 1600 	strd	r1, r6, [r0]
 8011fa0:	300c      	adds	r0, #12
 8011fa2:	60a0      	str	r0, [r4, #8]
 8011fa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011fa8:	f7fd f904 	bl	800f1b4 <memset>
 8011fac:	4620      	mov	r0, r4
 8011fae:	bd70      	pop	{r4, r5, r6, pc}

08011fb0 <__sfp_lock_acquire>:
 8011fb0:	4801      	ldr	r0, [pc, #4]	; (8011fb8 <__sfp_lock_acquire+0x8>)
 8011fb2:	f000 bc26 	b.w	8012802 <__retarget_lock_acquire_recursive>
 8011fb6:	bf00      	nop
 8011fb8:	20003209 	.word	0x20003209

08011fbc <__sfp_lock_release>:
 8011fbc:	4801      	ldr	r0, [pc, #4]	; (8011fc4 <__sfp_lock_release+0x8>)
 8011fbe:	f000 bc21 	b.w	8012804 <__retarget_lock_release_recursive>
 8011fc2:	bf00      	nop
 8011fc4:	20003209 	.word	0x20003209

08011fc8 <__sinit_lock_acquire>:
 8011fc8:	4801      	ldr	r0, [pc, #4]	; (8011fd0 <__sinit_lock_acquire+0x8>)
 8011fca:	f000 bc1a 	b.w	8012802 <__retarget_lock_acquire_recursive>
 8011fce:	bf00      	nop
 8011fd0:	2000320a 	.word	0x2000320a

08011fd4 <__sinit_lock_release>:
 8011fd4:	4801      	ldr	r0, [pc, #4]	; (8011fdc <__sinit_lock_release+0x8>)
 8011fd6:	f000 bc15 	b.w	8012804 <__retarget_lock_release_recursive>
 8011fda:	bf00      	nop
 8011fdc:	2000320a 	.word	0x2000320a

08011fe0 <__sinit>:
 8011fe0:	b510      	push	{r4, lr}
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	f7ff fff0 	bl	8011fc8 <__sinit_lock_acquire>
 8011fe8:	69a3      	ldr	r3, [r4, #24]
 8011fea:	b11b      	cbz	r3, 8011ff4 <__sinit+0x14>
 8011fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ff0:	f7ff bff0 	b.w	8011fd4 <__sinit_lock_release>
 8011ff4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011ff8:	6523      	str	r3, [r4, #80]	; 0x50
 8011ffa:	4b13      	ldr	r3, [pc, #76]	; (8012048 <__sinit+0x68>)
 8011ffc:	4a13      	ldr	r2, [pc, #76]	; (801204c <__sinit+0x6c>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	62a2      	str	r2, [r4, #40]	; 0x28
 8012002:	42a3      	cmp	r3, r4
 8012004:	bf04      	itt	eq
 8012006:	2301      	moveq	r3, #1
 8012008:	61a3      	streq	r3, [r4, #24]
 801200a:	4620      	mov	r0, r4
 801200c:	f000 f820 	bl	8012050 <__sfp>
 8012010:	6060      	str	r0, [r4, #4]
 8012012:	4620      	mov	r0, r4
 8012014:	f000 f81c 	bl	8012050 <__sfp>
 8012018:	60a0      	str	r0, [r4, #8]
 801201a:	4620      	mov	r0, r4
 801201c:	f000 f818 	bl	8012050 <__sfp>
 8012020:	2200      	movs	r2, #0
 8012022:	60e0      	str	r0, [r4, #12]
 8012024:	2104      	movs	r1, #4
 8012026:	6860      	ldr	r0, [r4, #4]
 8012028:	f7ff ff82 	bl	8011f30 <std>
 801202c:	68a0      	ldr	r0, [r4, #8]
 801202e:	2201      	movs	r2, #1
 8012030:	2109      	movs	r1, #9
 8012032:	f7ff ff7d 	bl	8011f30 <std>
 8012036:	68e0      	ldr	r0, [r4, #12]
 8012038:	2202      	movs	r2, #2
 801203a:	2112      	movs	r1, #18
 801203c:	f7ff ff78 	bl	8011f30 <std>
 8012040:	2301      	movs	r3, #1
 8012042:	61a3      	str	r3, [r4, #24]
 8012044:	e7d2      	b.n	8011fec <__sinit+0xc>
 8012046:	bf00      	nop
 8012048:	08015240 	.word	0x08015240
 801204c:	08011f79 	.word	0x08011f79

08012050 <__sfp>:
 8012050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012052:	4607      	mov	r7, r0
 8012054:	f7ff ffac 	bl	8011fb0 <__sfp_lock_acquire>
 8012058:	4b1e      	ldr	r3, [pc, #120]	; (80120d4 <__sfp+0x84>)
 801205a:	681e      	ldr	r6, [r3, #0]
 801205c:	69b3      	ldr	r3, [r6, #24]
 801205e:	b913      	cbnz	r3, 8012066 <__sfp+0x16>
 8012060:	4630      	mov	r0, r6
 8012062:	f7ff ffbd 	bl	8011fe0 <__sinit>
 8012066:	3648      	adds	r6, #72	; 0x48
 8012068:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801206c:	3b01      	subs	r3, #1
 801206e:	d503      	bpl.n	8012078 <__sfp+0x28>
 8012070:	6833      	ldr	r3, [r6, #0]
 8012072:	b30b      	cbz	r3, 80120b8 <__sfp+0x68>
 8012074:	6836      	ldr	r6, [r6, #0]
 8012076:	e7f7      	b.n	8012068 <__sfp+0x18>
 8012078:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801207c:	b9d5      	cbnz	r5, 80120b4 <__sfp+0x64>
 801207e:	4b16      	ldr	r3, [pc, #88]	; (80120d8 <__sfp+0x88>)
 8012080:	60e3      	str	r3, [r4, #12]
 8012082:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012086:	6665      	str	r5, [r4, #100]	; 0x64
 8012088:	f000 fbba 	bl	8012800 <__retarget_lock_init_recursive>
 801208c:	f7ff ff96 	bl	8011fbc <__sfp_lock_release>
 8012090:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012094:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012098:	6025      	str	r5, [r4, #0]
 801209a:	61a5      	str	r5, [r4, #24]
 801209c:	2208      	movs	r2, #8
 801209e:	4629      	mov	r1, r5
 80120a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80120a4:	f7fd f886 	bl	800f1b4 <memset>
 80120a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80120ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80120b0:	4620      	mov	r0, r4
 80120b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120b4:	3468      	adds	r4, #104	; 0x68
 80120b6:	e7d9      	b.n	801206c <__sfp+0x1c>
 80120b8:	2104      	movs	r1, #4
 80120ba:	4638      	mov	r0, r7
 80120bc:	f7ff ff62 	bl	8011f84 <__sfmoreglue>
 80120c0:	4604      	mov	r4, r0
 80120c2:	6030      	str	r0, [r6, #0]
 80120c4:	2800      	cmp	r0, #0
 80120c6:	d1d5      	bne.n	8012074 <__sfp+0x24>
 80120c8:	f7ff ff78 	bl	8011fbc <__sfp_lock_release>
 80120cc:	230c      	movs	r3, #12
 80120ce:	603b      	str	r3, [r7, #0]
 80120d0:	e7ee      	b.n	80120b0 <__sfp+0x60>
 80120d2:	bf00      	nop
 80120d4:	08015240 	.word	0x08015240
 80120d8:	ffff0001 	.word	0xffff0001

080120dc <_fwalk_reent>:
 80120dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120e0:	4606      	mov	r6, r0
 80120e2:	4688      	mov	r8, r1
 80120e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80120e8:	2700      	movs	r7, #0
 80120ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80120ee:	f1b9 0901 	subs.w	r9, r9, #1
 80120f2:	d505      	bpl.n	8012100 <_fwalk_reent+0x24>
 80120f4:	6824      	ldr	r4, [r4, #0]
 80120f6:	2c00      	cmp	r4, #0
 80120f8:	d1f7      	bne.n	80120ea <_fwalk_reent+0xe>
 80120fa:	4638      	mov	r0, r7
 80120fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012100:	89ab      	ldrh	r3, [r5, #12]
 8012102:	2b01      	cmp	r3, #1
 8012104:	d907      	bls.n	8012116 <_fwalk_reent+0x3a>
 8012106:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801210a:	3301      	adds	r3, #1
 801210c:	d003      	beq.n	8012116 <_fwalk_reent+0x3a>
 801210e:	4629      	mov	r1, r5
 8012110:	4630      	mov	r0, r6
 8012112:	47c0      	blx	r8
 8012114:	4307      	orrs	r7, r0
 8012116:	3568      	adds	r5, #104	; 0x68
 8012118:	e7e9      	b.n	80120ee <_fwalk_reent+0x12>

0801211a <rshift>:
 801211a:	6903      	ldr	r3, [r0, #16]
 801211c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012124:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012128:	f100 0414 	add.w	r4, r0, #20
 801212c:	dd45      	ble.n	80121ba <rshift+0xa0>
 801212e:	f011 011f 	ands.w	r1, r1, #31
 8012132:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012136:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801213a:	d10c      	bne.n	8012156 <rshift+0x3c>
 801213c:	f100 0710 	add.w	r7, r0, #16
 8012140:	4629      	mov	r1, r5
 8012142:	42b1      	cmp	r1, r6
 8012144:	d334      	bcc.n	80121b0 <rshift+0x96>
 8012146:	1a9b      	subs	r3, r3, r2
 8012148:	009b      	lsls	r3, r3, #2
 801214a:	1eea      	subs	r2, r5, #3
 801214c:	4296      	cmp	r6, r2
 801214e:	bf38      	it	cc
 8012150:	2300      	movcc	r3, #0
 8012152:	4423      	add	r3, r4
 8012154:	e015      	b.n	8012182 <rshift+0x68>
 8012156:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801215a:	f1c1 0820 	rsb	r8, r1, #32
 801215e:	40cf      	lsrs	r7, r1
 8012160:	f105 0e04 	add.w	lr, r5, #4
 8012164:	46a1      	mov	r9, r4
 8012166:	4576      	cmp	r6, lr
 8012168:	46f4      	mov	ip, lr
 801216a:	d815      	bhi.n	8012198 <rshift+0x7e>
 801216c:	1a9a      	subs	r2, r3, r2
 801216e:	0092      	lsls	r2, r2, #2
 8012170:	3a04      	subs	r2, #4
 8012172:	3501      	adds	r5, #1
 8012174:	42ae      	cmp	r6, r5
 8012176:	bf38      	it	cc
 8012178:	2200      	movcc	r2, #0
 801217a:	18a3      	adds	r3, r4, r2
 801217c:	50a7      	str	r7, [r4, r2]
 801217e:	b107      	cbz	r7, 8012182 <rshift+0x68>
 8012180:	3304      	adds	r3, #4
 8012182:	1b1a      	subs	r2, r3, r4
 8012184:	42a3      	cmp	r3, r4
 8012186:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801218a:	bf08      	it	eq
 801218c:	2300      	moveq	r3, #0
 801218e:	6102      	str	r2, [r0, #16]
 8012190:	bf08      	it	eq
 8012192:	6143      	streq	r3, [r0, #20]
 8012194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012198:	f8dc c000 	ldr.w	ip, [ip]
 801219c:	fa0c fc08 	lsl.w	ip, ip, r8
 80121a0:	ea4c 0707 	orr.w	r7, ip, r7
 80121a4:	f849 7b04 	str.w	r7, [r9], #4
 80121a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80121ac:	40cf      	lsrs	r7, r1
 80121ae:	e7da      	b.n	8012166 <rshift+0x4c>
 80121b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80121b4:	f847 cf04 	str.w	ip, [r7, #4]!
 80121b8:	e7c3      	b.n	8012142 <rshift+0x28>
 80121ba:	4623      	mov	r3, r4
 80121bc:	e7e1      	b.n	8012182 <rshift+0x68>

080121be <__hexdig_fun>:
 80121be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80121c2:	2b09      	cmp	r3, #9
 80121c4:	d802      	bhi.n	80121cc <__hexdig_fun+0xe>
 80121c6:	3820      	subs	r0, #32
 80121c8:	b2c0      	uxtb	r0, r0
 80121ca:	4770      	bx	lr
 80121cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80121d0:	2b05      	cmp	r3, #5
 80121d2:	d801      	bhi.n	80121d8 <__hexdig_fun+0x1a>
 80121d4:	3847      	subs	r0, #71	; 0x47
 80121d6:	e7f7      	b.n	80121c8 <__hexdig_fun+0xa>
 80121d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80121dc:	2b05      	cmp	r3, #5
 80121de:	d801      	bhi.n	80121e4 <__hexdig_fun+0x26>
 80121e0:	3827      	subs	r0, #39	; 0x27
 80121e2:	e7f1      	b.n	80121c8 <__hexdig_fun+0xa>
 80121e4:	2000      	movs	r0, #0
 80121e6:	4770      	bx	lr

080121e8 <__gethex>:
 80121e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121ec:	ed2d 8b02 	vpush	{d8}
 80121f0:	b089      	sub	sp, #36	; 0x24
 80121f2:	ee08 0a10 	vmov	s16, r0
 80121f6:	9304      	str	r3, [sp, #16]
 80121f8:	4bb4      	ldr	r3, [pc, #720]	; (80124cc <__gethex+0x2e4>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	9301      	str	r3, [sp, #4]
 80121fe:	4618      	mov	r0, r3
 8012200:	468b      	mov	fp, r1
 8012202:	4690      	mov	r8, r2
 8012204:	f7ed fffe 	bl	8000204 <strlen>
 8012208:	9b01      	ldr	r3, [sp, #4]
 801220a:	f8db 2000 	ldr.w	r2, [fp]
 801220e:	4403      	add	r3, r0
 8012210:	4682      	mov	sl, r0
 8012212:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012216:	9305      	str	r3, [sp, #20]
 8012218:	1c93      	adds	r3, r2, #2
 801221a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801221e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012222:	32fe      	adds	r2, #254	; 0xfe
 8012224:	18d1      	adds	r1, r2, r3
 8012226:	461f      	mov	r7, r3
 8012228:	f813 0b01 	ldrb.w	r0, [r3], #1
 801222c:	9100      	str	r1, [sp, #0]
 801222e:	2830      	cmp	r0, #48	; 0x30
 8012230:	d0f8      	beq.n	8012224 <__gethex+0x3c>
 8012232:	f7ff ffc4 	bl	80121be <__hexdig_fun>
 8012236:	4604      	mov	r4, r0
 8012238:	2800      	cmp	r0, #0
 801223a:	d13a      	bne.n	80122b2 <__gethex+0xca>
 801223c:	9901      	ldr	r1, [sp, #4]
 801223e:	4652      	mov	r2, sl
 8012240:	4638      	mov	r0, r7
 8012242:	f001 ff69 	bl	8014118 <strncmp>
 8012246:	4605      	mov	r5, r0
 8012248:	2800      	cmp	r0, #0
 801224a:	d168      	bne.n	801231e <__gethex+0x136>
 801224c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012250:	eb07 060a 	add.w	r6, r7, sl
 8012254:	f7ff ffb3 	bl	80121be <__hexdig_fun>
 8012258:	2800      	cmp	r0, #0
 801225a:	d062      	beq.n	8012322 <__gethex+0x13a>
 801225c:	4633      	mov	r3, r6
 801225e:	7818      	ldrb	r0, [r3, #0]
 8012260:	2830      	cmp	r0, #48	; 0x30
 8012262:	461f      	mov	r7, r3
 8012264:	f103 0301 	add.w	r3, r3, #1
 8012268:	d0f9      	beq.n	801225e <__gethex+0x76>
 801226a:	f7ff ffa8 	bl	80121be <__hexdig_fun>
 801226e:	2301      	movs	r3, #1
 8012270:	fab0 f480 	clz	r4, r0
 8012274:	0964      	lsrs	r4, r4, #5
 8012276:	4635      	mov	r5, r6
 8012278:	9300      	str	r3, [sp, #0]
 801227a:	463a      	mov	r2, r7
 801227c:	4616      	mov	r6, r2
 801227e:	3201      	adds	r2, #1
 8012280:	7830      	ldrb	r0, [r6, #0]
 8012282:	f7ff ff9c 	bl	80121be <__hexdig_fun>
 8012286:	2800      	cmp	r0, #0
 8012288:	d1f8      	bne.n	801227c <__gethex+0x94>
 801228a:	9901      	ldr	r1, [sp, #4]
 801228c:	4652      	mov	r2, sl
 801228e:	4630      	mov	r0, r6
 8012290:	f001 ff42 	bl	8014118 <strncmp>
 8012294:	b980      	cbnz	r0, 80122b8 <__gethex+0xd0>
 8012296:	b94d      	cbnz	r5, 80122ac <__gethex+0xc4>
 8012298:	eb06 050a 	add.w	r5, r6, sl
 801229c:	462a      	mov	r2, r5
 801229e:	4616      	mov	r6, r2
 80122a0:	3201      	adds	r2, #1
 80122a2:	7830      	ldrb	r0, [r6, #0]
 80122a4:	f7ff ff8b 	bl	80121be <__hexdig_fun>
 80122a8:	2800      	cmp	r0, #0
 80122aa:	d1f8      	bne.n	801229e <__gethex+0xb6>
 80122ac:	1bad      	subs	r5, r5, r6
 80122ae:	00ad      	lsls	r5, r5, #2
 80122b0:	e004      	b.n	80122bc <__gethex+0xd4>
 80122b2:	2400      	movs	r4, #0
 80122b4:	4625      	mov	r5, r4
 80122b6:	e7e0      	b.n	801227a <__gethex+0x92>
 80122b8:	2d00      	cmp	r5, #0
 80122ba:	d1f7      	bne.n	80122ac <__gethex+0xc4>
 80122bc:	7833      	ldrb	r3, [r6, #0]
 80122be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80122c2:	2b50      	cmp	r3, #80	; 0x50
 80122c4:	d13b      	bne.n	801233e <__gethex+0x156>
 80122c6:	7873      	ldrb	r3, [r6, #1]
 80122c8:	2b2b      	cmp	r3, #43	; 0x2b
 80122ca:	d02c      	beq.n	8012326 <__gethex+0x13e>
 80122cc:	2b2d      	cmp	r3, #45	; 0x2d
 80122ce:	d02e      	beq.n	801232e <__gethex+0x146>
 80122d0:	1c71      	adds	r1, r6, #1
 80122d2:	f04f 0900 	mov.w	r9, #0
 80122d6:	7808      	ldrb	r0, [r1, #0]
 80122d8:	f7ff ff71 	bl	80121be <__hexdig_fun>
 80122dc:	1e43      	subs	r3, r0, #1
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	2b18      	cmp	r3, #24
 80122e2:	d82c      	bhi.n	801233e <__gethex+0x156>
 80122e4:	f1a0 0210 	sub.w	r2, r0, #16
 80122e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80122ec:	f7ff ff67 	bl	80121be <__hexdig_fun>
 80122f0:	1e43      	subs	r3, r0, #1
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	2b18      	cmp	r3, #24
 80122f6:	d91d      	bls.n	8012334 <__gethex+0x14c>
 80122f8:	f1b9 0f00 	cmp.w	r9, #0
 80122fc:	d000      	beq.n	8012300 <__gethex+0x118>
 80122fe:	4252      	negs	r2, r2
 8012300:	4415      	add	r5, r2
 8012302:	f8cb 1000 	str.w	r1, [fp]
 8012306:	b1e4      	cbz	r4, 8012342 <__gethex+0x15a>
 8012308:	9b00      	ldr	r3, [sp, #0]
 801230a:	2b00      	cmp	r3, #0
 801230c:	bf14      	ite	ne
 801230e:	2700      	movne	r7, #0
 8012310:	2706      	moveq	r7, #6
 8012312:	4638      	mov	r0, r7
 8012314:	b009      	add	sp, #36	; 0x24
 8012316:	ecbd 8b02 	vpop	{d8}
 801231a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801231e:	463e      	mov	r6, r7
 8012320:	4625      	mov	r5, r4
 8012322:	2401      	movs	r4, #1
 8012324:	e7ca      	b.n	80122bc <__gethex+0xd4>
 8012326:	f04f 0900 	mov.w	r9, #0
 801232a:	1cb1      	adds	r1, r6, #2
 801232c:	e7d3      	b.n	80122d6 <__gethex+0xee>
 801232e:	f04f 0901 	mov.w	r9, #1
 8012332:	e7fa      	b.n	801232a <__gethex+0x142>
 8012334:	230a      	movs	r3, #10
 8012336:	fb03 0202 	mla	r2, r3, r2, r0
 801233a:	3a10      	subs	r2, #16
 801233c:	e7d4      	b.n	80122e8 <__gethex+0x100>
 801233e:	4631      	mov	r1, r6
 8012340:	e7df      	b.n	8012302 <__gethex+0x11a>
 8012342:	1bf3      	subs	r3, r6, r7
 8012344:	3b01      	subs	r3, #1
 8012346:	4621      	mov	r1, r4
 8012348:	2b07      	cmp	r3, #7
 801234a:	dc0b      	bgt.n	8012364 <__gethex+0x17c>
 801234c:	ee18 0a10 	vmov	r0, s16
 8012350:	f000 faec 	bl	801292c <_Balloc>
 8012354:	4604      	mov	r4, r0
 8012356:	b940      	cbnz	r0, 801236a <__gethex+0x182>
 8012358:	4b5d      	ldr	r3, [pc, #372]	; (80124d0 <__gethex+0x2e8>)
 801235a:	4602      	mov	r2, r0
 801235c:	21de      	movs	r1, #222	; 0xde
 801235e:	485d      	ldr	r0, [pc, #372]	; (80124d4 <__gethex+0x2ec>)
 8012360:	f001 ffaa 	bl	80142b8 <__assert_func>
 8012364:	3101      	adds	r1, #1
 8012366:	105b      	asrs	r3, r3, #1
 8012368:	e7ee      	b.n	8012348 <__gethex+0x160>
 801236a:	f100 0914 	add.w	r9, r0, #20
 801236e:	f04f 0b00 	mov.w	fp, #0
 8012372:	f1ca 0301 	rsb	r3, sl, #1
 8012376:	f8cd 9008 	str.w	r9, [sp, #8]
 801237a:	f8cd b000 	str.w	fp, [sp]
 801237e:	9306      	str	r3, [sp, #24]
 8012380:	42b7      	cmp	r7, r6
 8012382:	d340      	bcc.n	8012406 <__gethex+0x21e>
 8012384:	9802      	ldr	r0, [sp, #8]
 8012386:	9b00      	ldr	r3, [sp, #0]
 8012388:	f840 3b04 	str.w	r3, [r0], #4
 801238c:	eba0 0009 	sub.w	r0, r0, r9
 8012390:	1080      	asrs	r0, r0, #2
 8012392:	0146      	lsls	r6, r0, #5
 8012394:	6120      	str	r0, [r4, #16]
 8012396:	4618      	mov	r0, r3
 8012398:	f000 fbba 	bl	8012b10 <__hi0bits>
 801239c:	1a30      	subs	r0, r6, r0
 801239e:	f8d8 6000 	ldr.w	r6, [r8]
 80123a2:	42b0      	cmp	r0, r6
 80123a4:	dd63      	ble.n	801246e <__gethex+0x286>
 80123a6:	1b87      	subs	r7, r0, r6
 80123a8:	4639      	mov	r1, r7
 80123aa:	4620      	mov	r0, r4
 80123ac:	f000 ff5e 	bl	801326c <__any_on>
 80123b0:	4682      	mov	sl, r0
 80123b2:	b1a8      	cbz	r0, 80123e0 <__gethex+0x1f8>
 80123b4:	1e7b      	subs	r3, r7, #1
 80123b6:	1159      	asrs	r1, r3, #5
 80123b8:	f003 021f 	and.w	r2, r3, #31
 80123bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80123c0:	f04f 0a01 	mov.w	sl, #1
 80123c4:	fa0a f202 	lsl.w	r2, sl, r2
 80123c8:	420a      	tst	r2, r1
 80123ca:	d009      	beq.n	80123e0 <__gethex+0x1f8>
 80123cc:	4553      	cmp	r3, sl
 80123ce:	dd05      	ble.n	80123dc <__gethex+0x1f4>
 80123d0:	1eb9      	subs	r1, r7, #2
 80123d2:	4620      	mov	r0, r4
 80123d4:	f000 ff4a 	bl	801326c <__any_on>
 80123d8:	2800      	cmp	r0, #0
 80123da:	d145      	bne.n	8012468 <__gethex+0x280>
 80123dc:	f04f 0a02 	mov.w	sl, #2
 80123e0:	4639      	mov	r1, r7
 80123e2:	4620      	mov	r0, r4
 80123e4:	f7ff fe99 	bl	801211a <rshift>
 80123e8:	443d      	add	r5, r7
 80123ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80123ee:	42ab      	cmp	r3, r5
 80123f0:	da4c      	bge.n	801248c <__gethex+0x2a4>
 80123f2:	ee18 0a10 	vmov	r0, s16
 80123f6:	4621      	mov	r1, r4
 80123f8:	f000 fad8 	bl	80129ac <_Bfree>
 80123fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80123fe:	2300      	movs	r3, #0
 8012400:	6013      	str	r3, [r2, #0]
 8012402:	27a3      	movs	r7, #163	; 0xa3
 8012404:	e785      	b.n	8012312 <__gethex+0x12a>
 8012406:	1e73      	subs	r3, r6, #1
 8012408:	9a05      	ldr	r2, [sp, #20]
 801240a:	9303      	str	r3, [sp, #12]
 801240c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012410:	4293      	cmp	r3, r2
 8012412:	d019      	beq.n	8012448 <__gethex+0x260>
 8012414:	f1bb 0f20 	cmp.w	fp, #32
 8012418:	d107      	bne.n	801242a <__gethex+0x242>
 801241a:	9b02      	ldr	r3, [sp, #8]
 801241c:	9a00      	ldr	r2, [sp, #0]
 801241e:	f843 2b04 	str.w	r2, [r3], #4
 8012422:	9302      	str	r3, [sp, #8]
 8012424:	2300      	movs	r3, #0
 8012426:	9300      	str	r3, [sp, #0]
 8012428:	469b      	mov	fp, r3
 801242a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801242e:	f7ff fec6 	bl	80121be <__hexdig_fun>
 8012432:	9b00      	ldr	r3, [sp, #0]
 8012434:	f000 000f 	and.w	r0, r0, #15
 8012438:	fa00 f00b 	lsl.w	r0, r0, fp
 801243c:	4303      	orrs	r3, r0
 801243e:	9300      	str	r3, [sp, #0]
 8012440:	f10b 0b04 	add.w	fp, fp, #4
 8012444:	9b03      	ldr	r3, [sp, #12]
 8012446:	e00d      	b.n	8012464 <__gethex+0x27c>
 8012448:	9b03      	ldr	r3, [sp, #12]
 801244a:	9a06      	ldr	r2, [sp, #24]
 801244c:	4413      	add	r3, r2
 801244e:	42bb      	cmp	r3, r7
 8012450:	d3e0      	bcc.n	8012414 <__gethex+0x22c>
 8012452:	4618      	mov	r0, r3
 8012454:	9901      	ldr	r1, [sp, #4]
 8012456:	9307      	str	r3, [sp, #28]
 8012458:	4652      	mov	r2, sl
 801245a:	f001 fe5d 	bl	8014118 <strncmp>
 801245e:	9b07      	ldr	r3, [sp, #28]
 8012460:	2800      	cmp	r0, #0
 8012462:	d1d7      	bne.n	8012414 <__gethex+0x22c>
 8012464:	461e      	mov	r6, r3
 8012466:	e78b      	b.n	8012380 <__gethex+0x198>
 8012468:	f04f 0a03 	mov.w	sl, #3
 801246c:	e7b8      	b.n	80123e0 <__gethex+0x1f8>
 801246e:	da0a      	bge.n	8012486 <__gethex+0x29e>
 8012470:	1a37      	subs	r7, r6, r0
 8012472:	4621      	mov	r1, r4
 8012474:	ee18 0a10 	vmov	r0, s16
 8012478:	463a      	mov	r2, r7
 801247a:	f000 fcb3 	bl	8012de4 <__lshift>
 801247e:	1bed      	subs	r5, r5, r7
 8012480:	4604      	mov	r4, r0
 8012482:	f100 0914 	add.w	r9, r0, #20
 8012486:	f04f 0a00 	mov.w	sl, #0
 801248a:	e7ae      	b.n	80123ea <__gethex+0x202>
 801248c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012490:	42a8      	cmp	r0, r5
 8012492:	dd72      	ble.n	801257a <__gethex+0x392>
 8012494:	1b45      	subs	r5, r0, r5
 8012496:	42ae      	cmp	r6, r5
 8012498:	dc36      	bgt.n	8012508 <__gethex+0x320>
 801249a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801249e:	2b02      	cmp	r3, #2
 80124a0:	d02a      	beq.n	80124f8 <__gethex+0x310>
 80124a2:	2b03      	cmp	r3, #3
 80124a4:	d02c      	beq.n	8012500 <__gethex+0x318>
 80124a6:	2b01      	cmp	r3, #1
 80124a8:	d11c      	bne.n	80124e4 <__gethex+0x2fc>
 80124aa:	42ae      	cmp	r6, r5
 80124ac:	d11a      	bne.n	80124e4 <__gethex+0x2fc>
 80124ae:	2e01      	cmp	r6, #1
 80124b0:	d112      	bne.n	80124d8 <__gethex+0x2f0>
 80124b2:	9a04      	ldr	r2, [sp, #16]
 80124b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80124b8:	6013      	str	r3, [r2, #0]
 80124ba:	2301      	movs	r3, #1
 80124bc:	6123      	str	r3, [r4, #16]
 80124be:	f8c9 3000 	str.w	r3, [r9]
 80124c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80124c4:	2762      	movs	r7, #98	; 0x62
 80124c6:	601c      	str	r4, [r3, #0]
 80124c8:	e723      	b.n	8012312 <__gethex+0x12a>
 80124ca:	bf00      	nop
 80124cc:	08015428 	.word	0x08015428
 80124d0:	0801534f 	.word	0x0801534f
 80124d4:	080153c0 	.word	0x080153c0
 80124d8:	1e71      	subs	r1, r6, #1
 80124da:	4620      	mov	r0, r4
 80124dc:	f000 fec6 	bl	801326c <__any_on>
 80124e0:	2800      	cmp	r0, #0
 80124e2:	d1e6      	bne.n	80124b2 <__gethex+0x2ca>
 80124e4:	ee18 0a10 	vmov	r0, s16
 80124e8:	4621      	mov	r1, r4
 80124ea:	f000 fa5f 	bl	80129ac <_Bfree>
 80124ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80124f0:	2300      	movs	r3, #0
 80124f2:	6013      	str	r3, [r2, #0]
 80124f4:	2750      	movs	r7, #80	; 0x50
 80124f6:	e70c      	b.n	8012312 <__gethex+0x12a>
 80124f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d1f2      	bne.n	80124e4 <__gethex+0x2fc>
 80124fe:	e7d8      	b.n	80124b2 <__gethex+0x2ca>
 8012500:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012502:	2b00      	cmp	r3, #0
 8012504:	d1d5      	bne.n	80124b2 <__gethex+0x2ca>
 8012506:	e7ed      	b.n	80124e4 <__gethex+0x2fc>
 8012508:	1e6f      	subs	r7, r5, #1
 801250a:	f1ba 0f00 	cmp.w	sl, #0
 801250e:	d131      	bne.n	8012574 <__gethex+0x38c>
 8012510:	b127      	cbz	r7, 801251c <__gethex+0x334>
 8012512:	4639      	mov	r1, r7
 8012514:	4620      	mov	r0, r4
 8012516:	f000 fea9 	bl	801326c <__any_on>
 801251a:	4682      	mov	sl, r0
 801251c:	117b      	asrs	r3, r7, #5
 801251e:	2101      	movs	r1, #1
 8012520:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012524:	f007 071f 	and.w	r7, r7, #31
 8012528:	fa01 f707 	lsl.w	r7, r1, r7
 801252c:	421f      	tst	r7, r3
 801252e:	4629      	mov	r1, r5
 8012530:	4620      	mov	r0, r4
 8012532:	bf18      	it	ne
 8012534:	f04a 0a02 	orrne.w	sl, sl, #2
 8012538:	1b76      	subs	r6, r6, r5
 801253a:	f7ff fdee 	bl	801211a <rshift>
 801253e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012542:	2702      	movs	r7, #2
 8012544:	f1ba 0f00 	cmp.w	sl, #0
 8012548:	d048      	beq.n	80125dc <__gethex+0x3f4>
 801254a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801254e:	2b02      	cmp	r3, #2
 8012550:	d015      	beq.n	801257e <__gethex+0x396>
 8012552:	2b03      	cmp	r3, #3
 8012554:	d017      	beq.n	8012586 <__gethex+0x39e>
 8012556:	2b01      	cmp	r3, #1
 8012558:	d109      	bne.n	801256e <__gethex+0x386>
 801255a:	f01a 0f02 	tst.w	sl, #2
 801255e:	d006      	beq.n	801256e <__gethex+0x386>
 8012560:	f8d9 0000 	ldr.w	r0, [r9]
 8012564:	ea4a 0a00 	orr.w	sl, sl, r0
 8012568:	f01a 0f01 	tst.w	sl, #1
 801256c:	d10e      	bne.n	801258c <__gethex+0x3a4>
 801256e:	f047 0710 	orr.w	r7, r7, #16
 8012572:	e033      	b.n	80125dc <__gethex+0x3f4>
 8012574:	f04f 0a01 	mov.w	sl, #1
 8012578:	e7d0      	b.n	801251c <__gethex+0x334>
 801257a:	2701      	movs	r7, #1
 801257c:	e7e2      	b.n	8012544 <__gethex+0x35c>
 801257e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012580:	f1c3 0301 	rsb	r3, r3, #1
 8012584:	9315      	str	r3, [sp, #84]	; 0x54
 8012586:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012588:	2b00      	cmp	r3, #0
 801258a:	d0f0      	beq.n	801256e <__gethex+0x386>
 801258c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012590:	f104 0314 	add.w	r3, r4, #20
 8012594:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012598:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801259c:	f04f 0c00 	mov.w	ip, #0
 80125a0:	4618      	mov	r0, r3
 80125a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80125a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80125aa:	d01c      	beq.n	80125e6 <__gethex+0x3fe>
 80125ac:	3201      	adds	r2, #1
 80125ae:	6002      	str	r2, [r0, #0]
 80125b0:	2f02      	cmp	r7, #2
 80125b2:	f104 0314 	add.w	r3, r4, #20
 80125b6:	d13f      	bne.n	8012638 <__gethex+0x450>
 80125b8:	f8d8 2000 	ldr.w	r2, [r8]
 80125bc:	3a01      	subs	r2, #1
 80125be:	42b2      	cmp	r2, r6
 80125c0:	d10a      	bne.n	80125d8 <__gethex+0x3f0>
 80125c2:	1171      	asrs	r1, r6, #5
 80125c4:	2201      	movs	r2, #1
 80125c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80125ca:	f006 061f 	and.w	r6, r6, #31
 80125ce:	fa02 f606 	lsl.w	r6, r2, r6
 80125d2:	421e      	tst	r6, r3
 80125d4:	bf18      	it	ne
 80125d6:	4617      	movne	r7, r2
 80125d8:	f047 0720 	orr.w	r7, r7, #32
 80125dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125de:	601c      	str	r4, [r3, #0]
 80125e0:	9b04      	ldr	r3, [sp, #16]
 80125e2:	601d      	str	r5, [r3, #0]
 80125e4:	e695      	b.n	8012312 <__gethex+0x12a>
 80125e6:	4299      	cmp	r1, r3
 80125e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80125ec:	d8d8      	bhi.n	80125a0 <__gethex+0x3b8>
 80125ee:	68a3      	ldr	r3, [r4, #8]
 80125f0:	459b      	cmp	fp, r3
 80125f2:	db19      	blt.n	8012628 <__gethex+0x440>
 80125f4:	6861      	ldr	r1, [r4, #4]
 80125f6:	ee18 0a10 	vmov	r0, s16
 80125fa:	3101      	adds	r1, #1
 80125fc:	f000 f996 	bl	801292c <_Balloc>
 8012600:	4681      	mov	r9, r0
 8012602:	b918      	cbnz	r0, 801260c <__gethex+0x424>
 8012604:	4b1a      	ldr	r3, [pc, #104]	; (8012670 <__gethex+0x488>)
 8012606:	4602      	mov	r2, r0
 8012608:	2184      	movs	r1, #132	; 0x84
 801260a:	e6a8      	b.n	801235e <__gethex+0x176>
 801260c:	6922      	ldr	r2, [r4, #16]
 801260e:	3202      	adds	r2, #2
 8012610:	f104 010c 	add.w	r1, r4, #12
 8012614:	0092      	lsls	r2, r2, #2
 8012616:	300c      	adds	r0, #12
 8012618:	f7fc fda4 	bl	800f164 <memcpy>
 801261c:	4621      	mov	r1, r4
 801261e:	ee18 0a10 	vmov	r0, s16
 8012622:	f000 f9c3 	bl	80129ac <_Bfree>
 8012626:	464c      	mov	r4, r9
 8012628:	6923      	ldr	r3, [r4, #16]
 801262a:	1c5a      	adds	r2, r3, #1
 801262c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012630:	6122      	str	r2, [r4, #16]
 8012632:	2201      	movs	r2, #1
 8012634:	615a      	str	r2, [r3, #20]
 8012636:	e7bb      	b.n	80125b0 <__gethex+0x3c8>
 8012638:	6922      	ldr	r2, [r4, #16]
 801263a:	455a      	cmp	r2, fp
 801263c:	dd0b      	ble.n	8012656 <__gethex+0x46e>
 801263e:	2101      	movs	r1, #1
 8012640:	4620      	mov	r0, r4
 8012642:	f7ff fd6a 	bl	801211a <rshift>
 8012646:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801264a:	3501      	adds	r5, #1
 801264c:	42ab      	cmp	r3, r5
 801264e:	f6ff aed0 	blt.w	80123f2 <__gethex+0x20a>
 8012652:	2701      	movs	r7, #1
 8012654:	e7c0      	b.n	80125d8 <__gethex+0x3f0>
 8012656:	f016 061f 	ands.w	r6, r6, #31
 801265a:	d0fa      	beq.n	8012652 <__gethex+0x46a>
 801265c:	4453      	add	r3, sl
 801265e:	f1c6 0620 	rsb	r6, r6, #32
 8012662:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012666:	f000 fa53 	bl	8012b10 <__hi0bits>
 801266a:	42b0      	cmp	r0, r6
 801266c:	dbe7      	blt.n	801263e <__gethex+0x456>
 801266e:	e7f0      	b.n	8012652 <__gethex+0x46a>
 8012670:	0801534f 	.word	0x0801534f

08012674 <L_shift>:
 8012674:	f1c2 0208 	rsb	r2, r2, #8
 8012678:	0092      	lsls	r2, r2, #2
 801267a:	b570      	push	{r4, r5, r6, lr}
 801267c:	f1c2 0620 	rsb	r6, r2, #32
 8012680:	6843      	ldr	r3, [r0, #4]
 8012682:	6804      	ldr	r4, [r0, #0]
 8012684:	fa03 f506 	lsl.w	r5, r3, r6
 8012688:	432c      	orrs	r4, r5
 801268a:	40d3      	lsrs	r3, r2
 801268c:	6004      	str	r4, [r0, #0]
 801268e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012692:	4288      	cmp	r0, r1
 8012694:	d3f4      	bcc.n	8012680 <L_shift+0xc>
 8012696:	bd70      	pop	{r4, r5, r6, pc}

08012698 <__match>:
 8012698:	b530      	push	{r4, r5, lr}
 801269a:	6803      	ldr	r3, [r0, #0]
 801269c:	3301      	adds	r3, #1
 801269e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80126a2:	b914      	cbnz	r4, 80126aa <__match+0x12>
 80126a4:	6003      	str	r3, [r0, #0]
 80126a6:	2001      	movs	r0, #1
 80126a8:	bd30      	pop	{r4, r5, pc}
 80126aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80126b2:	2d19      	cmp	r5, #25
 80126b4:	bf98      	it	ls
 80126b6:	3220      	addls	r2, #32
 80126b8:	42a2      	cmp	r2, r4
 80126ba:	d0f0      	beq.n	801269e <__match+0x6>
 80126bc:	2000      	movs	r0, #0
 80126be:	e7f3      	b.n	80126a8 <__match+0x10>

080126c0 <__hexnan>:
 80126c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c4:	680b      	ldr	r3, [r1, #0]
 80126c6:	115e      	asrs	r6, r3, #5
 80126c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80126cc:	f013 031f 	ands.w	r3, r3, #31
 80126d0:	b087      	sub	sp, #28
 80126d2:	bf18      	it	ne
 80126d4:	3604      	addne	r6, #4
 80126d6:	2500      	movs	r5, #0
 80126d8:	1f37      	subs	r7, r6, #4
 80126da:	4690      	mov	r8, r2
 80126dc:	6802      	ldr	r2, [r0, #0]
 80126de:	9301      	str	r3, [sp, #4]
 80126e0:	4682      	mov	sl, r0
 80126e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80126e6:	46b9      	mov	r9, r7
 80126e8:	463c      	mov	r4, r7
 80126ea:	9502      	str	r5, [sp, #8]
 80126ec:	46ab      	mov	fp, r5
 80126ee:	7851      	ldrb	r1, [r2, #1]
 80126f0:	1c53      	adds	r3, r2, #1
 80126f2:	9303      	str	r3, [sp, #12]
 80126f4:	b341      	cbz	r1, 8012748 <__hexnan+0x88>
 80126f6:	4608      	mov	r0, r1
 80126f8:	9205      	str	r2, [sp, #20]
 80126fa:	9104      	str	r1, [sp, #16]
 80126fc:	f7ff fd5f 	bl	80121be <__hexdig_fun>
 8012700:	2800      	cmp	r0, #0
 8012702:	d14f      	bne.n	80127a4 <__hexnan+0xe4>
 8012704:	9904      	ldr	r1, [sp, #16]
 8012706:	9a05      	ldr	r2, [sp, #20]
 8012708:	2920      	cmp	r1, #32
 801270a:	d818      	bhi.n	801273e <__hexnan+0x7e>
 801270c:	9b02      	ldr	r3, [sp, #8]
 801270e:	459b      	cmp	fp, r3
 8012710:	dd13      	ble.n	801273a <__hexnan+0x7a>
 8012712:	454c      	cmp	r4, r9
 8012714:	d206      	bcs.n	8012724 <__hexnan+0x64>
 8012716:	2d07      	cmp	r5, #7
 8012718:	dc04      	bgt.n	8012724 <__hexnan+0x64>
 801271a:	462a      	mov	r2, r5
 801271c:	4649      	mov	r1, r9
 801271e:	4620      	mov	r0, r4
 8012720:	f7ff ffa8 	bl	8012674 <L_shift>
 8012724:	4544      	cmp	r4, r8
 8012726:	d950      	bls.n	80127ca <__hexnan+0x10a>
 8012728:	2300      	movs	r3, #0
 801272a:	f1a4 0904 	sub.w	r9, r4, #4
 801272e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012732:	f8cd b008 	str.w	fp, [sp, #8]
 8012736:	464c      	mov	r4, r9
 8012738:	461d      	mov	r5, r3
 801273a:	9a03      	ldr	r2, [sp, #12]
 801273c:	e7d7      	b.n	80126ee <__hexnan+0x2e>
 801273e:	2929      	cmp	r1, #41	; 0x29
 8012740:	d156      	bne.n	80127f0 <__hexnan+0x130>
 8012742:	3202      	adds	r2, #2
 8012744:	f8ca 2000 	str.w	r2, [sl]
 8012748:	f1bb 0f00 	cmp.w	fp, #0
 801274c:	d050      	beq.n	80127f0 <__hexnan+0x130>
 801274e:	454c      	cmp	r4, r9
 8012750:	d206      	bcs.n	8012760 <__hexnan+0xa0>
 8012752:	2d07      	cmp	r5, #7
 8012754:	dc04      	bgt.n	8012760 <__hexnan+0xa0>
 8012756:	462a      	mov	r2, r5
 8012758:	4649      	mov	r1, r9
 801275a:	4620      	mov	r0, r4
 801275c:	f7ff ff8a 	bl	8012674 <L_shift>
 8012760:	4544      	cmp	r4, r8
 8012762:	d934      	bls.n	80127ce <__hexnan+0x10e>
 8012764:	f1a8 0204 	sub.w	r2, r8, #4
 8012768:	4623      	mov	r3, r4
 801276a:	f853 1b04 	ldr.w	r1, [r3], #4
 801276e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012772:	429f      	cmp	r7, r3
 8012774:	d2f9      	bcs.n	801276a <__hexnan+0xaa>
 8012776:	1b3b      	subs	r3, r7, r4
 8012778:	f023 0303 	bic.w	r3, r3, #3
 801277c:	3304      	adds	r3, #4
 801277e:	3401      	adds	r4, #1
 8012780:	3e03      	subs	r6, #3
 8012782:	42b4      	cmp	r4, r6
 8012784:	bf88      	it	hi
 8012786:	2304      	movhi	r3, #4
 8012788:	4443      	add	r3, r8
 801278a:	2200      	movs	r2, #0
 801278c:	f843 2b04 	str.w	r2, [r3], #4
 8012790:	429f      	cmp	r7, r3
 8012792:	d2fb      	bcs.n	801278c <__hexnan+0xcc>
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	b91b      	cbnz	r3, 80127a0 <__hexnan+0xe0>
 8012798:	4547      	cmp	r7, r8
 801279a:	d127      	bne.n	80127ec <__hexnan+0x12c>
 801279c:	2301      	movs	r3, #1
 801279e:	603b      	str	r3, [r7, #0]
 80127a0:	2005      	movs	r0, #5
 80127a2:	e026      	b.n	80127f2 <__hexnan+0x132>
 80127a4:	3501      	adds	r5, #1
 80127a6:	2d08      	cmp	r5, #8
 80127a8:	f10b 0b01 	add.w	fp, fp, #1
 80127ac:	dd06      	ble.n	80127bc <__hexnan+0xfc>
 80127ae:	4544      	cmp	r4, r8
 80127b0:	d9c3      	bls.n	801273a <__hexnan+0x7a>
 80127b2:	2300      	movs	r3, #0
 80127b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80127b8:	2501      	movs	r5, #1
 80127ba:	3c04      	subs	r4, #4
 80127bc:	6822      	ldr	r2, [r4, #0]
 80127be:	f000 000f 	and.w	r0, r0, #15
 80127c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80127c6:	6022      	str	r2, [r4, #0]
 80127c8:	e7b7      	b.n	801273a <__hexnan+0x7a>
 80127ca:	2508      	movs	r5, #8
 80127cc:	e7b5      	b.n	801273a <__hexnan+0x7a>
 80127ce:	9b01      	ldr	r3, [sp, #4]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d0df      	beq.n	8012794 <__hexnan+0xd4>
 80127d4:	f04f 32ff 	mov.w	r2, #4294967295
 80127d8:	f1c3 0320 	rsb	r3, r3, #32
 80127dc:	fa22 f303 	lsr.w	r3, r2, r3
 80127e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80127e4:	401a      	ands	r2, r3
 80127e6:	f846 2c04 	str.w	r2, [r6, #-4]
 80127ea:	e7d3      	b.n	8012794 <__hexnan+0xd4>
 80127ec:	3f04      	subs	r7, #4
 80127ee:	e7d1      	b.n	8012794 <__hexnan+0xd4>
 80127f0:	2004      	movs	r0, #4
 80127f2:	b007      	add	sp, #28
 80127f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080127f8 <_localeconv_r>:
 80127f8:	4800      	ldr	r0, [pc, #0]	; (80127fc <_localeconv_r+0x4>)
 80127fa:	4770      	bx	lr
 80127fc:	20000268 	.word	0x20000268

08012800 <__retarget_lock_init_recursive>:
 8012800:	4770      	bx	lr

08012802 <__retarget_lock_acquire_recursive>:
 8012802:	4770      	bx	lr

08012804 <__retarget_lock_release_recursive>:
 8012804:	4770      	bx	lr
	...

08012808 <_lseek_r>:
 8012808:	b538      	push	{r3, r4, r5, lr}
 801280a:	4d07      	ldr	r5, [pc, #28]	; (8012828 <_lseek_r+0x20>)
 801280c:	4604      	mov	r4, r0
 801280e:	4608      	mov	r0, r1
 8012810:	4611      	mov	r1, r2
 8012812:	2200      	movs	r2, #0
 8012814:	602a      	str	r2, [r5, #0]
 8012816:	461a      	mov	r2, r3
 8012818:	f7f1 feea 	bl	80045f0 <_lseek>
 801281c:	1c43      	adds	r3, r0, #1
 801281e:	d102      	bne.n	8012826 <_lseek_r+0x1e>
 8012820:	682b      	ldr	r3, [r5, #0]
 8012822:	b103      	cbz	r3, 8012826 <_lseek_r+0x1e>
 8012824:	6023      	str	r3, [r4, #0]
 8012826:	bd38      	pop	{r3, r4, r5, pc}
 8012828:	20003214 	.word	0x20003214

0801282c <__swhatbuf_r>:
 801282c:	b570      	push	{r4, r5, r6, lr}
 801282e:	460e      	mov	r6, r1
 8012830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012834:	2900      	cmp	r1, #0
 8012836:	b096      	sub	sp, #88	; 0x58
 8012838:	4614      	mov	r4, r2
 801283a:	461d      	mov	r5, r3
 801283c:	da08      	bge.n	8012850 <__swhatbuf_r+0x24>
 801283e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012842:	2200      	movs	r2, #0
 8012844:	602a      	str	r2, [r5, #0]
 8012846:	061a      	lsls	r2, r3, #24
 8012848:	d410      	bmi.n	801286c <__swhatbuf_r+0x40>
 801284a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801284e:	e00e      	b.n	801286e <__swhatbuf_r+0x42>
 8012850:	466a      	mov	r2, sp
 8012852:	f001 fd61 	bl	8014318 <_fstat_r>
 8012856:	2800      	cmp	r0, #0
 8012858:	dbf1      	blt.n	801283e <__swhatbuf_r+0x12>
 801285a:	9a01      	ldr	r2, [sp, #4]
 801285c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012860:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012864:	425a      	negs	r2, r3
 8012866:	415a      	adcs	r2, r3
 8012868:	602a      	str	r2, [r5, #0]
 801286a:	e7ee      	b.n	801284a <__swhatbuf_r+0x1e>
 801286c:	2340      	movs	r3, #64	; 0x40
 801286e:	2000      	movs	r0, #0
 8012870:	6023      	str	r3, [r4, #0]
 8012872:	b016      	add	sp, #88	; 0x58
 8012874:	bd70      	pop	{r4, r5, r6, pc}
	...

08012878 <__smakebuf_r>:
 8012878:	898b      	ldrh	r3, [r1, #12]
 801287a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801287c:	079d      	lsls	r5, r3, #30
 801287e:	4606      	mov	r6, r0
 8012880:	460c      	mov	r4, r1
 8012882:	d507      	bpl.n	8012894 <__smakebuf_r+0x1c>
 8012884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012888:	6023      	str	r3, [r4, #0]
 801288a:	6123      	str	r3, [r4, #16]
 801288c:	2301      	movs	r3, #1
 801288e:	6163      	str	r3, [r4, #20]
 8012890:	b002      	add	sp, #8
 8012892:	bd70      	pop	{r4, r5, r6, pc}
 8012894:	ab01      	add	r3, sp, #4
 8012896:	466a      	mov	r2, sp
 8012898:	f7ff ffc8 	bl	801282c <__swhatbuf_r>
 801289c:	9900      	ldr	r1, [sp, #0]
 801289e:	4605      	mov	r5, r0
 80128a0:	4630      	mov	r0, r6
 80128a2:	f000 fd87 	bl	80133b4 <_malloc_r>
 80128a6:	b948      	cbnz	r0, 80128bc <__smakebuf_r+0x44>
 80128a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128ac:	059a      	lsls	r2, r3, #22
 80128ae:	d4ef      	bmi.n	8012890 <__smakebuf_r+0x18>
 80128b0:	f023 0303 	bic.w	r3, r3, #3
 80128b4:	f043 0302 	orr.w	r3, r3, #2
 80128b8:	81a3      	strh	r3, [r4, #12]
 80128ba:	e7e3      	b.n	8012884 <__smakebuf_r+0xc>
 80128bc:	4b0d      	ldr	r3, [pc, #52]	; (80128f4 <__smakebuf_r+0x7c>)
 80128be:	62b3      	str	r3, [r6, #40]	; 0x28
 80128c0:	89a3      	ldrh	r3, [r4, #12]
 80128c2:	6020      	str	r0, [r4, #0]
 80128c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128c8:	81a3      	strh	r3, [r4, #12]
 80128ca:	9b00      	ldr	r3, [sp, #0]
 80128cc:	6163      	str	r3, [r4, #20]
 80128ce:	9b01      	ldr	r3, [sp, #4]
 80128d0:	6120      	str	r0, [r4, #16]
 80128d2:	b15b      	cbz	r3, 80128ec <__smakebuf_r+0x74>
 80128d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128d8:	4630      	mov	r0, r6
 80128da:	f001 fd2f 	bl	801433c <_isatty_r>
 80128de:	b128      	cbz	r0, 80128ec <__smakebuf_r+0x74>
 80128e0:	89a3      	ldrh	r3, [r4, #12]
 80128e2:	f023 0303 	bic.w	r3, r3, #3
 80128e6:	f043 0301 	orr.w	r3, r3, #1
 80128ea:	81a3      	strh	r3, [r4, #12]
 80128ec:	89a0      	ldrh	r0, [r4, #12]
 80128ee:	4305      	orrs	r5, r0
 80128f0:	81a5      	strh	r5, [r4, #12]
 80128f2:	e7cd      	b.n	8012890 <__smakebuf_r+0x18>
 80128f4:	08011f79 	.word	0x08011f79

080128f8 <malloc>:
 80128f8:	4b02      	ldr	r3, [pc, #8]	; (8012904 <malloc+0xc>)
 80128fa:	4601      	mov	r1, r0
 80128fc:	6818      	ldr	r0, [r3, #0]
 80128fe:	f000 bd59 	b.w	80133b4 <_malloc_r>
 8012902:	bf00      	nop
 8012904:	20000110 	.word	0x20000110

08012908 <__ascii_mbtowc>:
 8012908:	b082      	sub	sp, #8
 801290a:	b901      	cbnz	r1, 801290e <__ascii_mbtowc+0x6>
 801290c:	a901      	add	r1, sp, #4
 801290e:	b142      	cbz	r2, 8012922 <__ascii_mbtowc+0x1a>
 8012910:	b14b      	cbz	r3, 8012926 <__ascii_mbtowc+0x1e>
 8012912:	7813      	ldrb	r3, [r2, #0]
 8012914:	600b      	str	r3, [r1, #0]
 8012916:	7812      	ldrb	r2, [r2, #0]
 8012918:	1e10      	subs	r0, r2, #0
 801291a:	bf18      	it	ne
 801291c:	2001      	movne	r0, #1
 801291e:	b002      	add	sp, #8
 8012920:	4770      	bx	lr
 8012922:	4610      	mov	r0, r2
 8012924:	e7fb      	b.n	801291e <__ascii_mbtowc+0x16>
 8012926:	f06f 0001 	mvn.w	r0, #1
 801292a:	e7f8      	b.n	801291e <__ascii_mbtowc+0x16>

0801292c <_Balloc>:
 801292c:	b570      	push	{r4, r5, r6, lr}
 801292e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012930:	4604      	mov	r4, r0
 8012932:	460d      	mov	r5, r1
 8012934:	b976      	cbnz	r6, 8012954 <_Balloc+0x28>
 8012936:	2010      	movs	r0, #16
 8012938:	f7ff ffde 	bl	80128f8 <malloc>
 801293c:	4602      	mov	r2, r0
 801293e:	6260      	str	r0, [r4, #36]	; 0x24
 8012940:	b920      	cbnz	r0, 801294c <_Balloc+0x20>
 8012942:	4b18      	ldr	r3, [pc, #96]	; (80129a4 <_Balloc+0x78>)
 8012944:	4818      	ldr	r0, [pc, #96]	; (80129a8 <_Balloc+0x7c>)
 8012946:	2166      	movs	r1, #102	; 0x66
 8012948:	f001 fcb6 	bl	80142b8 <__assert_func>
 801294c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012950:	6006      	str	r6, [r0, #0]
 8012952:	60c6      	str	r6, [r0, #12]
 8012954:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012956:	68f3      	ldr	r3, [r6, #12]
 8012958:	b183      	cbz	r3, 801297c <_Balloc+0x50>
 801295a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801295c:	68db      	ldr	r3, [r3, #12]
 801295e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012962:	b9b8      	cbnz	r0, 8012994 <_Balloc+0x68>
 8012964:	2101      	movs	r1, #1
 8012966:	fa01 f605 	lsl.w	r6, r1, r5
 801296a:	1d72      	adds	r2, r6, #5
 801296c:	0092      	lsls	r2, r2, #2
 801296e:	4620      	mov	r0, r4
 8012970:	f000 fc9d 	bl	80132ae <_calloc_r>
 8012974:	b160      	cbz	r0, 8012990 <_Balloc+0x64>
 8012976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801297a:	e00e      	b.n	801299a <_Balloc+0x6e>
 801297c:	2221      	movs	r2, #33	; 0x21
 801297e:	2104      	movs	r1, #4
 8012980:	4620      	mov	r0, r4
 8012982:	f000 fc94 	bl	80132ae <_calloc_r>
 8012986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012988:	60f0      	str	r0, [r6, #12]
 801298a:	68db      	ldr	r3, [r3, #12]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d1e4      	bne.n	801295a <_Balloc+0x2e>
 8012990:	2000      	movs	r0, #0
 8012992:	bd70      	pop	{r4, r5, r6, pc}
 8012994:	6802      	ldr	r2, [r0, #0]
 8012996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801299a:	2300      	movs	r3, #0
 801299c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80129a0:	e7f7      	b.n	8012992 <_Balloc+0x66>
 80129a2:	bf00      	nop
 80129a4:	080152dd 	.word	0x080152dd
 80129a8:	0801543c 	.word	0x0801543c

080129ac <_Bfree>:
 80129ac:	b570      	push	{r4, r5, r6, lr}
 80129ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80129b0:	4605      	mov	r5, r0
 80129b2:	460c      	mov	r4, r1
 80129b4:	b976      	cbnz	r6, 80129d4 <_Bfree+0x28>
 80129b6:	2010      	movs	r0, #16
 80129b8:	f7ff ff9e 	bl	80128f8 <malloc>
 80129bc:	4602      	mov	r2, r0
 80129be:	6268      	str	r0, [r5, #36]	; 0x24
 80129c0:	b920      	cbnz	r0, 80129cc <_Bfree+0x20>
 80129c2:	4b09      	ldr	r3, [pc, #36]	; (80129e8 <_Bfree+0x3c>)
 80129c4:	4809      	ldr	r0, [pc, #36]	; (80129ec <_Bfree+0x40>)
 80129c6:	218a      	movs	r1, #138	; 0x8a
 80129c8:	f001 fc76 	bl	80142b8 <__assert_func>
 80129cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80129d0:	6006      	str	r6, [r0, #0]
 80129d2:	60c6      	str	r6, [r0, #12]
 80129d4:	b13c      	cbz	r4, 80129e6 <_Bfree+0x3a>
 80129d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80129d8:	6862      	ldr	r2, [r4, #4]
 80129da:	68db      	ldr	r3, [r3, #12]
 80129dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80129e0:	6021      	str	r1, [r4, #0]
 80129e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80129e6:	bd70      	pop	{r4, r5, r6, pc}
 80129e8:	080152dd 	.word	0x080152dd
 80129ec:	0801543c 	.word	0x0801543c

080129f0 <__multadd>:
 80129f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129f4:	690d      	ldr	r5, [r1, #16]
 80129f6:	4607      	mov	r7, r0
 80129f8:	460c      	mov	r4, r1
 80129fa:	461e      	mov	r6, r3
 80129fc:	f101 0c14 	add.w	ip, r1, #20
 8012a00:	2000      	movs	r0, #0
 8012a02:	f8dc 3000 	ldr.w	r3, [ip]
 8012a06:	b299      	uxth	r1, r3
 8012a08:	fb02 6101 	mla	r1, r2, r1, r6
 8012a0c:	0c1e      	lsrs	r6, r3, #16
 8012a0e:	0c0b      	lsrs	r3, r1, #16
 8012a10:	fb02 3306 	mla	r3, r2, r6, r3
 8012a14:	b289      	uxth	r1, r1
 8012a16:	3001      	adds	r0, #1
 8012a18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012a1c:	4285      	cmp	r5, r0
 8012a1e:	f84c 1b04 	str.w	r1, [ip], #4
 8012a22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012a26:	dcec      	bgt.n	8012a02 <__multadd+0x12>
 8012a28:	b30e      	cbz	r6, 8012a6e <__multadd+0x7e>
 8012a2a:	68a3      	ldr	r3, [r4, #8]
 8012a2c:	42ab      	cmp	r3, r5
 8012a2e:	dc19      	bgt.n	8012a64 <__multadd+0x74>
 8012a30:	6861      	ldr	r1, [r4, #4]
 8012a32:	4638      	mov	r0, r7
 8012a34:	3101      	adds	r1, #1
 8012a36:	f7ff ff79 	bl	801292c <_Balloc>
 8012a3a:	4680      	mov	r8, r0
 8012a3c:	b928      	cbnz	r0, 8012a4a <__multadd+0x5a>
 8012a3e:	4602      	mov	r2, r0
 8012a40:	4b0c      	ldr	r3, [pc, #48]	; (8012a74 <__multadd+0x84>)
 8012a42:	480d      	ldr	r0, [pc, #52]	; (8012a78 <__multadd+0x88>)
 8012a44:	21b5      	movs	r1, #181	; 0xb5
 8012a46:	f001 fc37 	bl	80142b8 <__assert_func>
 8012a4a:	6922      	ldr	r2, [r4, #16]
 8012a4c:	3202      	adds	r2, #2
 8012a4e:	f104 010c 	add.w	r1, r4, #12
 8012a52:	0092      	lsls	r2, r2, #2
 8012a54:	300c      	adds	r0, #12
 8012a56:	f7fc fb85 	bl	800f164 <memcpy>
 8012a5a:	4621      	mov	r1, r4
 8012a5c:	4638      	mov	r0, r7
 8012a5e:	f7ff ffa5 	bl	80129ac <_Bfree>
 8012a62:	4644      	mov	r4, r8
 8012a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012a68:	3501      	adds	r5, #1
 8012a6a:	615e      	str	r6, [r3, #20]
 8012a6c:	6125      	str	r5, [r4, #16]
 8012a6e:	4620      	mov	r0, r4
 8012a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a74:	0801534f 	.word	0x0801534f
 8012a78:	0801543c 	.word	0x0801543c

08012a7c <__s2b>:
 8012a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a80:	460c      	mov	r4, r1
 8012a82:	4615      	mov	r5, r2
 8012a84:	461f      	mov	r7, r3
 8012a86:	2209      	movs	r2, #9
 8012a88:	3308      	adds	r3, #8
 8012a8a:	4606      	mov	r6, r0
 8012a8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a90:	2100      	movs	r1, #0
 8012a92:	2201      	movs	r2, #1
 8012a94:	429a      	cmp	r2, r3
 8012a96:	db09      	blt.n	8012aac <__s2b+0x30>
 8012a98:	4630      	mov	r0, r6
 8012a9a:	f7ff ff47 	bl	801292c <_Balloc>
 8012a9e:	b940      	cbnz	r0, 8012ab2 <__s2b+0x36>
 8012aa0:	4602      	mov	r2, r0
 8012aa2:	4b19      	ldr	r3, [pc, #100]	; (8012b08 <__s2b+0x8c>)
 8012aa4:	4819      	ldr	r0, [pc, #100]	; (8012b0c <__s2b+0x90>)
 8012aa6:	21ce      	movs	r1, #206	; 0xce
 8012aa8:	f001 fc06 	bl	80142b8 <__assert_func>
 8012aac:	0052      	lsls	r2, r2, #1
 8012aae:	3101      	adds	r1, #1
 8012ab0:	e7f0      	b.n	8012a94 <__s2b+0x18>
 8012ab2:	9b08      	ldr	r3, [sp, #32]
 8012ab4:	6143      	str	r3, [r0, #20]
 8012ab6:	2d09      	cmp	r5, #9
 8012ab8:	f04f 0301 	mov.w	r3, #1
 8012abc:	6103      	str	r3, [r0, #16]
 8012abe:	dd16      	ble.n	8012aee <__s2b+0x72>
 8012ac0:	f104 0909 	add.w	r9, r4, #9
 8012ac4:	46c8      	mov	r8, r9
 8012ac6:	442c      	add	r4, r5
 8012ac8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012acc:	4601      	mov	r1, r0
 8012ace:	3b30      	subs	r3, #48	; 0x30
 8012ad0:	220a      	movs	r2, #10
 8012ad2:	4630      	mov	r0, r6
 8012ad4:	f7ff ff8c 	bl	80129f0 <__multadd>
 8012ad8:	45a0      	cmp	r8, r4
 8012ada:	d1f5      	bne.n	8012ac8 <__s2b+0x4c>
 8012adc:	f1a5 0408 	sub.w	r4, r5, #8
 8012ae0:	444c      	add	r4, r9
 8012ae2:	1b2d      	subs	r5, r5, r4
 8012ae4:	1963      	adds	r3, r4, r5
 8012ae6:	42bb      	cmp	r3, r7
 8012ae8:	db04      	blt.n	8012af4 <__s2b+0x78>
 8012aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aee:	340a      	adds	r4, #10
 8012af0:	2509      	movs	r5, #9
 8012af2:	e7f6      	b.n	8012ae2 <__s2b+0x66>
 8012af4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012af8:	4601      	mov	r1, r0
 8012afa:	3b30      	subs	r3, #48	; 0x30
 8012afc:	220a      	movs	r2, #10
 8012afe:	4630      	mov	r0, r6
 8012b00:	f7ff ff76 	bl	80129f0 <__multadd>
 8012b04:	e7ee      	b.n	8012ae4 <__s2b+0x68>
 8012b06:	bf00      	nop
 8012b08:	0801534f 	.word	0x0801534f
 8012b0c:	0801543c 	.word	0x0801543c

08012b10 <__hi0bits>:
 8012b10:	0c03      	lsrs	r3, r0, #16
 8012b12:	041b      	lsls	r3, r3, #16
 8012b14:	b9d3      	cbnz	r3, 8012b4c <__hi0bits+0x3c>
 8012b16:	0400      	lsls	r0, r0, #16
 8012b18:	2310      	movs	r3, #16
 8012b1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012b1e:	bf04      	itt	eq
 8012b20:	0200      	lsleq	r0, r0, #8
 8012b22:	3308      	addeq	r3, #8
 8012b24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012b28:	bf04      	itt	eq
 8012b2a:	0100      	lsleq	r0, r0, #4
 8012b2c:	3304      	addeq	r3, #4
 8012b2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012b32:	bf04      	itt	eq
 8012b34:	0080      	lsleq	r0, r0, #2
 8012b36:	3302      	addeq	r3, #2
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	db05      	blt.n	8012b48 <__hi0bits+0x38>
 8012b3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012b40:	f103 0301 	add.w	r3, r3, #1
 8012b44:	bf08      	it	eq
 8012b46:	2320      	moveq	r3, #32
 8012b48:	4618      	mov	r0, r3
 8012b4a:	4770      	bx	lr
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	e7e4      	b.n	8012b1a <__hi0bits+0xa>

08012b50 <__lo0bits>:
 8012b50:	6803      	ldr	r3, [r0, #0]
 8012b52:	f013 0207 	ands.w	r2, r3, #7
 8012b56:	4601      	mov	r1, r0
 8012b58:	d00b      	beq.n	8012b72 <__lo0bits+0x22>
 8012b5a:	07da      	lsls	r2, r3, #31
 8012b5c:	d423      	bmi.n	8012ba6 <__lo0bits+0x56>
 8012b5e:	0798      	lsls	r0, r3, #30
 8012b60:	bf49      	itett	mi
 8012b62:	085b      	lsrmi	r3, r3, #1
 8012b64:	089b      	lsrpl	r3, r3, #2
 8012b66:	2001      	movmi	r0, #1
 8012b68:	600b      	strmi	r3, [r1, #0]
 8012b6a:	bf5c      	itt	pl
 8012b6c:	600b      	strpl	r3, [r1, #0]
 8012b6e:	2002      	movpl	r0, #2
 8012b70:	4770      	bx	lr
 8012b72:	b298      	uxth	r0, r3
 8012b74:	b9a8      	cbnz	r0, 8012ba2 <__lo0bits+0x52>
 8012b76:	0c1b      	lsrs	r3, r3, #16
 8012b78:	2010      	movs	r0, #16
 8012b7a:	b2da      	uxtb	r2, r3
 8012b7c:	b90a      	cbnz	r2, 8012b82 <__lo0bits+0x32>
 8012b7e:	3008      	adds	r0, #8
 8012b80:	0a1b      	lsrs	r3, r3, #8
 8012b82:	071a      	lsls	r2, r3, #28
 8012b84:	bf04      	itt	eq
 8012b86:	091b      	lsreq	r3, r3, #4
 8012b88:	3004      	addeq	r0, #4
 8012b8a:	079a      	lsls	r2, r3, #30
 8012b8c:	bf04      	itt	eq
 8012b8e:	089b      	lsreq	r3, r3, #2
 8012b90:	3002      	addeq	r0, #2
 8012b92:	07da      	lsls	r2, r3, #31
 8012b94:	d403      	bmi.n	8012b9e <__lo0bits+0x4e>
 8012b96:	085b      	lsrs	r3, r3, #1
 8012b98:	f100 0001 	add.w	r0, r0, #1
 8012b9c:	d005      	beq.n	8012baa <__lo0bits+0x5a>
 8012b9e:	600b      	str	r3, [r1, #0]
 8012ba0:	4770      	bx	lr
 8012ba2:	4610      	mov	r0, r2
 8012ba4:	e7e9      	b.n	8012b7a <__lo0bits+0x2a>
 8012ba6:	2000      	movs	r0, #0
 8012ba8:	4770      	bx	lr
 8012baa:	2020      	movs	r0, #32
 8012bac:	4770      	bx	lr
	...

08012bb0 <__i2b>:
 8012bb0:	b510      	push	{r4, lr}
 8012bb2:	460c      	mov	r4, r1
 8012bb4:	2101      	movs	r1, #1
 8012bb6:	f7ff feb9 	bl	801292c <_Balloc>
 8012bba:	4602      	mov	r2, r0
 8012bbc:	b928      	cbnz	r0, 8012bca <__i2b+0x1a>
 8012bbe:	4b05      	ldr	r3, [pc, #20]	; (8012bd4 <__i2b+0x24>)
 8012bc0:	4805      	ldr	r0, [pc, #20]	; (8012bd8 <__i2b+0x28>)
 8012bc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012bc6:	f001 fb77 	bl	80142b8 <__assert_func>
 8012bca:	2301      	movs	r3, #1
 8012bcc:	6144      	str	r4, [r0, #20]
 8012bce:	6103      	str	r3, [r0, #16]
 8012bd0:	bd10      	pop	{r4, pc}
 8012bd2:	bf00      	nop
 8012bd4:	0801534f 	.word	0x0801534f
 8012bd8:	0801543c 	.word	0x0801543c

08012bdc <__multiply>:
 8012bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be0:	4691      	mov	r9, r2
 8012be2:	690a      	ldr	r2, [r1, #16]
 8012be4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	bfb8      	it	lt
 8012bec:	460b      	movlt	r3, r1
 8012bee:	460c      	mov	r4, r1
 8012bf0:	bfbc      	itt	lt
 8012bf2:	464c      	movlt	r4, r9
 8012bf4:	4699      	movlt	r9, r3
 8012bf6:	6927      	ldr	r7, [r4, #16]
 8012bf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012bfc:	68a3      	ldr	r3, [r4, #8]
 8012bfe:	6861      	ldr	r1, [r4, #4]
 8012c00:	eb07 060a 	add.w	r6, r7, sl
 8012c04:	42b3      	cmp	r3, r6
 8012c06:	b085      	sub	sp, #20
 8012c08:	bfb8      	it	lt
 8012c0a:	3101      	addlt	r1, #1
 8012c0c:	f7ff fe8e 	bl	801292c <_Balloc>
 8012c10:	b930      	cbnz	r0, 8012c20 <__multiply+0x44>
 8012c12:	4602      	mov	r2, r0
 8012c14:	4b44      	ldr	r3, [pc, #272]	; (8012d28 <__multiply+0x14c>)
 8012c16:	4845      	ldr	r0, [pc, #276]	; (8012d2c <__multiply+0x150>)
 8012c18:	f240 115d 	movw	r1, #349	; 0x15d
 8012c1c:	f001 fb4c 	bl	80142b8 <__assert_func>
 8012c20:	f100 0514 	add.w	r5, r0, #20
 8012c24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012c28:	462b      	mov	r3, r5
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	4543      	cmp	r3, r8
 8012c2e:	d321      	bcc.n	8012c74 <__multiply+0x98>
 8012c30:	f104 0314 	add.w	r3, r4, #20
 8012c34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012c38:	f109 0314 	add.w	r3, r9, #20
 8012c3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012c40:	9202      	str	r2, [sp, #8]
 8012c42:	1b3a      	subs	r2, r7, r4
 8012c44:	3a15      	subs	r2, #21
 8012c46:	f022 0203 	bic.w	r2, r2, #3
 8012c4a:	3204      	adds	r2, #4
 8012c4c:	f104 0115 	add.w	r1, r4, #21
 8012c50:	428f      	cmp	r7, r1
 8012c52:	bf38      	it	cc
 8012c54:	2204      	movcc	r2, #4
 8012c56:	9201      	str	r2, [sp, #4]
 8012c58:	9a02      	ldr	r2, [sp, #8]
 8012c5a:	9303      	str	r3, [sp, #12]
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d80c      	bhi.n	8012c7a <__multiply+0x9e>
 8012c60:	2e00      	cmp	r6, #0
 8012c62:	dd03      	ble.n	8012c6c <__multiply+0x90>
 8012c64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d05a      	beq.n	8012d22 <__multiply+0x146>
 8012c6c:	6106      	str	r6, [r0, #16]
 8012c6e:	b005      	add	sp, #20
 8012c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c74:	f843 2b04 	str.w	r2, [r3], #4
 8012c78:	e7d8      	b.n	8012c2c <__multiply+0x50>
 8012c7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8012c7e:	f1ba 0f00 	cmp.w	sl, #0
 8012c82:	d024      	beq.n	8012cce <__multiply+0xf2>
 8012c84:	f104 0e14 	add.w	lr, r4, #20
 8012c88:	46a9      	mov	r9, r5
 8012c8a:	f04f 0c00 	mov.w	ip, #0
 8012c8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012c92:	f8d9 1000 	ldr.w	r1, [r9]
 8012c96:	fa1f fb82 	uxth.w	fp, r2
 8012c9a:	b289      	uxth	r1, r1
 8012c9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8012ca0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012ca4:	f8d9 2000 	ldr.w	r2, [r9]
 8012ca8:	4461      	add	r1, ip
 8012caa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012cae:	fb0a c20b 	mla	r2, sl, fp, ip
 8012cb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012cb6:	b289      	uxth	r1, r1
 8012cb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012cbc:	4577      	cmp	r7, lr
 8012cbe:	f849 1b04 	str.w	r1, [r9], #4
 8012cc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012cc6:	d8e2      	bhi.n	8012c8e <__multiply+0xb2>
 8012cc8:	9a01      	ldr	r2, [sp, #4]
 8012cca:	f845 c002 	str.w	ip, [r5, r2]
 8012cce:	9a03      	ldr	r2, [sp, #12]
 8012cd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012cd4:	3304      	adds	r3, #4
 8012cd6:	f1b9 0f00 	cmp.w	r9, #0
 8012cda:	d020      	beq.n	8012d1e <__multiply+0x142>
 8012cdc:	6829      	ldr	r1, [r5, #0]
 8012cde:	f104 0c14 	add.w	ip, r4, #20
 8012ce2:	46ae      	mov	lr, r5
 8012ce4:	f04f 0a00 	mov.w	sl, #0
 8012ce8:	f8bc b000 	ldrh.w	fp, [ip]
 8012cec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012cf0:	fb09 220b 	mla	r2, r9, fp, r2
 8012cf4:	4492      	add	sl, r2
 8012cf6:	b289      	uxth	r1, r1
 8012cf8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012cfc:	f84e 1b04 	str.w	r1, [lr], #4
 8012d00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012d04:	f8be 1000 	ldrh.w	r1, [lr]
 8012d08:	0c12      	lsrs	r2, r2, #16
 8012d0a:	fb09 1102 	mla	r1, r9, r2, r1
 8012d0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012d12:	4567      	cmp	r7, ip
 8012d14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012d18:	d8e6      	bhi.n	8012ce8 <__multiply+0x10c>
 8012d1a:	9a01      	ldr	r2, [sp, #4]
 8012d1c:	50a9      	str	r1, [r5, r2]
 8012d1e:	3504      	adds	r5, #4
 8012d20:	e79a      	b.n	8012c58 <__multiply+0x7c>
 8012d22:	3e01      	subs	r6, #1
 8012d24:	e79c      	b.n	8012c60 <__multiply+0x84>
 8012d26:	bf00      	nop
 8012d28:	0801534f 	.word	0x0801534f
 8012d2c:	0801543c 	.word	0x0801543c

08012d30 <__pow5mult>:
 8012d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d34:	4615      	mov	r5, r2
 8012d36:	f012 0203 	ands.w	r2, r2, #3
 8012d3a:	4606      	mov	r6, r0
 8012d3c:	460f      	mov	r7, r1
 8012d3e:	d007      	beq.n	8012d50 <__pow5mult+0x20>
 8012d40:	4c25      	ldr	r4, [pc, #148]	; (8012dd8 <__pow5mult+0xa8>)
 8012d42:	3a01      	subs	r2, #1
 8012d44:	2300      	movs	r3, #0
 8012d46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012d4a:	f7ff fe51 	bl	80129f0 <__multadd>
 8012d4e:	4607      	mov	r7, r0
 8012d50:	10ad      	asrs	r5, r5, #2
 8012d52:	d03d      	beq.n	8012dd0 <__pow5mult+0xa0>
 8012d54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012d56:	b97c      	cbnz	r4, 8012d78 <__pow5mult+0x48>
 8012d58:	2010      	movs	r0, #16
 8012d5a:	f7ff fdcd 	bl	80128f8 <malloc>
 8012d5e:	4602      	mov	r2, r0
 8012d60:	6270      	str	r0, [r6, #36]	; 0x24
 8012d62:	b928      	cbnz	r0, 8012d70 <__pow5mult+0x40>
 8012d64:	4b1d      	ldr	r3, [pc, #116]	; (8012ddc <__pow5mult+0xac>)
 8012d66:	481e      	ldr	r0, [pc, #120]	; (8012de0 <__pow5mult+0xb0>)
 8012d68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012d6c:	f001 faa4 	bl	80142b8 <__assert_func>
 8012d70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012d74:	6004      	str	r4, [r0, #0]
 8012d76:	60c4      	str	r4, [r0, #12]
 8012d78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012d7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012d80:	b94c      	cbnz	r4, 8012d96 <__pow5mult+0x66>
 8012d82:	f240 2171 	movw	r1, #625	; 0x271
 8012d86:	4630      	mov	r0, r6
 8012d88:	f7ff ff12 	bl	8012bb0 <__i2b>
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012d92:	4604      	mov	r4, r0
 8012d94:	6003      	str	r3, [r0, #0]
 8012d96:	f04f 0900 	mov.w	r9, #0
 8012d9a:	07eb      	lsls	r3, r5, #31
 8012d9c:	d50a      	bpl.n	8012db4 <__pow5mult+0x84>
 8012d9e:	4639      	mov	r1, r7
 8012da0:	4622      	mov	r2, r4
 8012da2:	4630      	mov	r0, r6
 8012da4:	f7ff ff1a 	bl	8012bdc <__multiply>
 8012da8:	4639      	mov	r1, r7
 8012daa:	4680      	mov	r8, r0
 8012dac:	4630      	mov	r0, r6
 8012dae:	f7ff fdfd 	bl	80129ac <_Bfree>
 8012db2:	4647      	mov	r7, r8
 8012db4:	106d      	asrs	r5, r5, #1
 8012db6:	d00b      	beq.n	8012dd0 <__pow5mult+0xa0>
 8012db8:	6820      	ldr	r0, [r4, #0]
 8012dba:	b938      	cbnz	r0, 8012dcc <__pow5mult+0x9c>
 8012dbc:	4622      	mov	r2, r4
 8012dbe:	4621      	mov	r1, r4
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	f7ff ff0b 	bl	8012bdc <__multiply>
 8012dc6:	6020      	str	r0, [r4, #0]
 8012dc8:	f8c0 9000 	str.w	r9, [r0]
 8012dcc:	4604      	mov	r4, r0
 8012dce:	e7e4      	b.n	8012d9a <__pow5mult+0x6a>
 8012dd0:	4638      	mov	r0, r7
 8012dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dd6:	bf00      	nop
 8012dd8:	08015588 	.word	0x08015588
 8012ddc:	080152dd 	.word	0x080152dd
 8012de0:	0801543c 	.word	0x0801543c

08012de4 <__lshift>:
 8012de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012de8:	460c      	mov	r4, r1
 8012dea:	6849      	ldr	r1, [r1, #4]
 8012dec:	6923      	ldr	r3, [r4, #16]
 8012dee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012df2:	68a3      	ldr	r3, [r4, #8]
 8012df4:	4607      	mov	r7, r0
 8012df6:	4691      	mov	r9, r2
 8012df8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012dfc:	f108 0601 	add.w	r6, r8, #1
 8012e00:	42b3      	cmp	r3, r6
 8012e02:	db0b      	blt.n	8012e1c <__lshift+0x38>
 8012e04:	4638      	mov	r0, r7
 8012e06:	f7ff fd91 	bl	801292c <_Balloc>
 8012e0a:	4605      	mov	r5, r0
 8012e0c:	b948      	cbnz	r0, 8012e22 <__lshift+0x3e>
 8012e0e:	4602      	mov	r2, r0
 8012e10:	4b2a      	ldr	r3, [pc, #168]	; (8012ebc <__lshift+0xd8>)
 8012e12:	482b      	ldr	r0, [pc, #172]	; (8012ec0 <__lshift+0xdc>)
 8012e14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012e18:	f001 fa4e 	bl	80142b8 <__assert_func>
 8012e1c:	3101      	adds	r1, #1
 8012e1e:	005b      	lsls	r3, r3, #1
 8012e20:	e7ee      	b.n	8012e00 <__lshift+0x1c>
 8012e22:	2300      	movs	r3, #0
 8012e24:	f100 0114 	add.w	r1, r0, #20
 8012e28:	f100 0210 	add.w	r2, r0, #16
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	4553      	cmp	r3, sl
 8012e30:	db37      	blt.n	8012ea2 <__lshift+0xbe>
 8012e32:	6920      	ldr	r0, [r4, #16]
 8012e34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012e38:	f104 0314 	add.w	r3, r4, #20
 8012e3c:	f019 091f 	ands.w	r9, r9, #31
 8012e40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012e44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012e48:	d02f      	beq.n	8012eaa <__lshift+0xc6>
 8012e4a:	f1c9 0e20 	rsb	lr, r9, #32
 8012e4e:	468a      	mov	sl, r1
 8012e50:	f04f 0c00 	mov.w	ip, #0
 8012e54:	681a      	ldr	r2, [r3, #0]
 8012e56:	fa02 f209 	lsl.w	r2, r2, r9
 8012e5a:	ea42 020c 	orr.w	r2, r2, ip
 8012e5e:	f84a 2b04 	str.w	r2, [sl], #4
 8012e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e66:	4298      	cmp	r0, r3
 8012e68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012e6c:	d8f2      	bhi.n	8012e54 <__lshift+0x70>
 8012e6e:	1b03      	subs	r3, r0, r4
 8012e70:	3b15      	subs	r3, #21
 8012e72:	f023 0303 	bic.w	r3, r3, #3
 8012e76:	3304      	adds	r3, #4
 8012e78:	f104 0215 	add.w	r2, r4, #21
 8012e7c:	4290      	cmp	r0, r2
 8012e7e:	bf38      	it	cc
 8012e80:	2304      	movcc	r3, #4
 8012e82:	f841 c003 	str.w	ip, [r1, r3]
 8012e86:	f1bc 0f00 	cmp.w	ip, #0
 8012e8a:	d001      	beq.n	8012e90 <__lshift+0xac>
 8012e8c:	f108 0602 	add.w	r6, r8, #2
 8012e90:	3e01      	subs	r6, #1
 8012e92:	4638      	mov	r0, r7
 8012e94:	612e      	str	r6, [r5, #16]
 8012e96:	4621      	mov	r1, r4
 8012e98:	f7ff fd88 	bl	80129ac <_Bfree>
 8012e9c:	4628      	mov	r0, r5
 8012e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ea2:	f842 0f04 	str.w	r0, [r2, #4]!
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	e7c1      	b.n	8012e2e <__lshift+0x4a>
 8012eaa:	3904      	subs	r1, #4
 8012eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8012eb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8012eb4:	4298      	cmp	r0, r3
 8012eb6:	d8f9      	bhi.n	8012eac <__lshift+0xc8>
 8012eb8:	e7ea      	b.n	8012e90 <__lshift+0xac>
 8012eba:	bf00      	nop
 8012ebc:	0801534f 	.word	0x0801534f
 8012ec0:	0801543c 	.word	0x0801543c

08012ec4 <__mcmp>:
 8012ec4:	b530      	push	{r4, r5, lr}
 8012ec6:	6902      	ldr	r2, [r0, #16]
 8012ec8:	690c      	ldr	r4, [r1, #16]
 8012eca:	1b12      	subs	r2, r2, r4
 8012ecc:	d10e      	bne.n	8012eec <__mcmp+0x28>
 8012ece:	f100 0314 	add.w	r3, r0, #20
 8012ed2:	3114      	adds	r1, #20
 8012ed4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012ed8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012edc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012ee0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012ee4:	42a5      	cmp	r5, r4
 8012ee6:	d003      	beq.n	8012ef0 <__mcmp+0x2c>
 8012ee8:	d305      	bcc.n	8012ef6 <__mcmp+0x32>
 8012eea:	2201      	movs	r2, #1
 8012eec:	4610      	mov	r0, r2
 8012eee:	bd30      	pop	{r4, r5, pc}
 8012ef0:	4283      	cmp	r3, r0
 8012ef2:	d3f3      	bcc.n	8012edc <__mcmp+0x18>
 8012ef4:	e7fa      	b.n	8012eec <__mcmp+0x28>
 8012ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8012efa:	e7f7      	b.n	8012eec <__mcmp+0x28>

08012efc <__mdiff>:
 8012efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f00:	460c      	mov	r4, r1
 8012f02:	4606      	mov	r6, r0
 8012f04:	4611      	mov	r1, r2
 8012f06:	4620      	mov	r0, r4
 8012f08:	4690      	mov	r8, r2
 8012f0a:	f7ff ffdb 	bl	8012ec4 <__mcmp>
 8012f0e:	1e05      	subs	r5, r0, #0
 8012f10:	d110      	bne.n	8012f34 <__mdiff+0x38>
 8012f12:	4629      	mov	r1, r5
 8012f14:	4630      	mov	r0, r6
 8012f16:	f7ff fd09 	bl	801292c <_Balloc>
 8012f1a:	b930      	cbnz	r0, 8012f2a <__mdiff+0x2e>
 8012f1c:	4b3a      	ldr	r3, [pc, #232]	; (8013008 <__mdiff+0x10c>)
 8012f1e:	4602      	mov	r2, r0
 8012f20:	f240 2132 	movw	r1, #562	; 0x232
 8012f24:	4839      	ldr	r0, [pc, #228]	; (801300c <__mdiff+0x110>)
 8012f26:	f001 f9c7 	bl	80142b8 <__assert_func>
 8012f2a:	2301      	movs	r3, #1
 8012f2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012f30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f34:	bfa4      	itt	ge
 8012f36:	4643      	movge	r3, r8
 8012f38:	46a0      	movge	r8, r4
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012f40:	bfa6      	itte	ge
 8012f42:	461c      	movge	r4, r3
 8012f44:	2500      	movge	r5, #0
 8012f46:	2501      	movlt	r5, #1
 8012f48:	f7ff fcf0 	bl	801292c <_Balloc>
 8012f4c:	b920      	cbnz	r0, 8012f58 <__mdiff+0x5c>
 8012f4e:	4b2e      	ldr	r3, [pc, #184]	; (8013008 <__mdiff+0x10c>)
 8012f50:	4602      	mov	r2, r0
 8012f52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012f56:	e7e5      	b.n	8012f24 <__mdiff+0x28>
 8012f58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012f5c:	6926      	ldr	r6, [r4, #16]
 8012f5e:	60c5      	str	r5, [r0, #12]
 8012f60:	f104 0914 	add.w	r9, r4, #20
 8012f64:	f108 0514 	add.w	r5, r8, #20
 8012f68:	f100 0e14 	add.w	lr, r0, #20
 8012f6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012f70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012f74:	f108 0210 	add.w	r2, r8, #16
 8012f78:	46f2      	mov	sl, lr
 8012f7a:	2100      	movs	r1, #0
 8012f7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012f80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012f84:	fa1f f883 	uxth.w	r8, r3
 8012f88:	fa11 f18b 	uxtah	r1, r1, fp
 8012f8c:	0c1b      	lsrs	r3, r3, #16
 8012f8e:	eba1 0808 	sub.w	r8, r1, r8
 8012f92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012f96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012f9a:	fa1f f888 	uxth.w	r8, r8
 8012f9e:	1419      	asrs	r1, r3, #16
 8012fa0:	454e      	cmp	r6, r9
 8012fa2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012fa6:	f84a 3b04 	str.w	r3, [sl], #4
 8012faa:	d8e7      	bhi.n	8012f7c <__mdiff+0x80>
 8012fac:	1b33      	subs	r3, r6, r4
 8012fae:	3b15      	subs	r3, #21
 8012fb0:	f023 0303 	bic.w	r3, r3, #3
 8012fb4:	3304      	adds	r3, #4
 8012fb6:	3415      	adds	r4, #21
 8012fb8:	42a6      	cmp	r6, r4
 8012fba:	bf38      	it	cc
 8012fbc:	2304      	movcc	r3, #4
 8012fbe:	441d      	add	r5, r3
 8012fc0:	4473      	add	r3, lr
 8012fc2:	469e      	mov	lr, r3
 8012fc4:	462e      	mov	r6, r5
 8012fc6:	4566      	cmp	r6, ip
 8012fc8:	d30e      	bcc.n	8012fe8 <__mdiff+0xec>
 8012fca:	f10c 0203 	add.w	r2, ip, #3
 8012fce:	1b52      	subs	r2, r2, r5
 8012fd0:	f022 0203 	bic.w	r2, r2, #3
 8012fd4:	3d03      	subs	r5, #3
 8012fd6:	45ac      	cmp	ip, r5
 8012fd8:	bf38      	it	cc
 8012fda:	2200      	movcc	r2, #0
 8012fdc:	441a      	add	r2, r3
 8012fde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012fe2:	b17b      	cbz	r3, 8013004 <__mdiff+0x108>
 8012fe4:	6107      	str	r7, [r0, #16]
 8012fe6:	e7a3      	b.n	8012f30 <__mdiff+0x34>
 8012fe8:	f856 8b04 	ldr.w	r8, [r6], #4
 8012fec:	fa11 f288 	uxtah	r2, r1, r8
 8012ff0:	1414      	asrs	r4, r2, #16
 8012ff2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012ff6:	b292      	uxth	r2, r2
 8012ff8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012ffc:	f84e 2b04 	str.w	r2, [lr], #4
 8013000:	1421      	asrs	r1, r4, #16
 8013002:	e7e0      	b.n	8012fc6 <__mdiff+0xca>
 8013004:	3f01      	subs	r7, #1
 8013006:	e7ea      	b.n	8012fde <__mdiff+0xe2>
 8013008:	0801534f 	.word	0x0801534f
 801300c:	0801543c 	.word	0x0801543c

08013010 <__ulp>:
 8013010:	b082      	sub	sp, #8
 8013012:	ed8d 0b00 	vstr	d0, [sp]
 8013016:	9b01      	ldr	r3, [sp, #4]
 8013018:	4912      	ldr	r1, [pc, #72]	; (8013064 <__ulp+0x54>)
 801301a:	4019      	ands	r1, r3
 801301c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013020:	2900      	cmp	r1, #0
 8013022:	dd05      	ble.n	8013030 <__ulp+0x20>
 8013024:	2200      	movs	r2, #0
 8013026:	460b      	mov	r3, r1
 8013028:	ec43 2b10 	vmov	d0, r2, r3
 801302c:	b002      	add	sp, #8
 801302e:	4770      	bx	lr
 8013030:	4249      	negs	r1, r1
 8013032:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013036:	ea4f 5021 	mov.w	r0, r1, asr #20
 801303a:	f04f 0200 	mov.w	r2, #0
 801303e:	f04f 0300 	mov.w	r3, #0
 8013042:	da04      	bge.n	801304e <__ulp+0x3e>
 8013044:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013048:	fa41 f300 	asr.w	r3, r1, r0
 801304c:	e7ec      	b.n	8013028 <__ulp+0x18>
 801304e:	f1a0 0114 	sub.w	r1, r0, #20
 8013052:	291e      	cmp	r1, #30
 8013054:	bfda      	itte	le
 8013056:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801305a:	fa20 f101 	lsrle.w	r1, r0, r1
 801305e:	2101      	movgt	r1, #1
 8013060:	460a      	mov	r2, r1
 8013062:	e7e1      	b.n	8013028 <__ulp+0x18>
 8013064:	7ff00000 	.word	0x7ff00000

08013068 <__b2d>:
 8013068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801306a:	6905      	ldr	r5, [r0, #16]
 801306c:	f100 0714 	add.w	r7, r0, #20
 8013070:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013074:	1f2e      	subs	r6, r5, #4
 8013076:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801307a:	4620      	mov	r0, r4
 801307c:	f7ff fd48 	bl	8012b10 <__hi0bits>
 8013080:	f1c0 0320 	rsb	r3, r0, #32
 8013084:	280a      	cmp	r0, #10
 8013086:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013104 <__b2d+0x9c>
 801308a:	600b      	str	r3, [r1, #0]
 801308c:	dc14      	bgt.n	80130b8 <__b2d+0x50>
 801308e:	f1c0 0e0b 	rsb	lr, r0, #11
 8013092:	fa24 f10e 	lsr.w	r1, r4, lr
 8013096:	42b7      	cmp	r7, r6
 8013098:	ea41 030c 	orr.w	r3, r1, ip
 801309c:	bf34      	ite	cc
 801309e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80130a2:	2100      	movcs	r1, #0
 80130a4:	3015      	adds	r0, #21
 80130a6:	fa04 f000 	lsl.w	r0, r4, r0
 80130aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80130ae:	ea40 0201 	orr.w	r2, r0, r1
 80130b2:	ec43 2b10 	vmov	d0, r2, r3
 80130b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130b8:	42b7      	cmp	r7, r6
 80130ba:	bf3a      	itte	cc
 80130bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80130c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80130c4:	2100      	movcs	r1, #0
 80130c6:	380b      	subs	r0, #11
 80130c8:	d017      	beq.n	80130fa <__b2d+0x92>
 80130ca:	f1c0 0c20 	rsb	ip, r0, #32
 80130ce:	fa04 f500 	lsl.w	r5, r4, r0
 80130d2:	42be      	cmp	r6, r7
 80130d4:	fa21 f40c 	lsr.w	r4, r1, ip
 80130d8:	ea45 0504 	orr.w	r5, r5, r4
 80130dc:	bf8c      	ite	hi
 80130de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80130e2:	2400      	movls	r4, #0
 80130e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80130e8:	fa01 f000 	lsl.w	r0, r1, r0
 80130ec:	fa24 f40c 	lsr.w	r4, r4, ip
 80130f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80130f4:	ea40 0204 	orr.w	r2, r0, r4
 80130f8:	e7db      	b.n	80130b2 <__b2d+0x4a>
 80130fa:	ea44 030c 	orr.w	r3, r4, ip
 80130fe:	460a      	mov	r2, r1
 8013100:	e7d7      	b.n	80130b2 <__b2d+0x4a>
 8013102:	bf00      	nop
 8013104:	3ff00000 	.word	0x3ff00000

08013108 <__d2b>:
 8013108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801310c:	4689      	mov	r9, r1
 801310e:	2101      	movs	r1, #1
 8013110:	ec57 6b10 	vmov	r6, r7, d0
 8013114:	4690      	mov	r8, r2
 8013116:	f7ff fc09 	bl	801292c <_Balloc>
 801311a:	4604      	mov	r4, r0
 801311c:	b930      	cbnz	r0, 801312c <__d2b+0x24>
 801311e:	4602      	mov	r2, r0
 8013120:	4b25      	ldr	r3, [pc, #148]	; (80131b8 <__d2b+0xb0>)
 8013122:	4826      	ldr	r0, [pc, #152]	; (80131bc <__d2b+0xb4>)
 8013124:	f240 310a 	movw	r1, #778	; 0x30a
 8013128:	f001 f8c6 	bl	80142b8 <__assert_func>
 801312c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013130:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013134:	bb35      	cbnz	r5, 8013184 <__d2b+0x7c>
 8013136:	2e00      	cmp	r6, #0
 8013138:	9301      	str	r3, [sp, #4]
 801313a:	d028      	beq.n	801318e <__d2b+0x86>
 801313c:	4668      	mov	r0, sp
 801313e:	9600      	str	r6, [sp, #0]
 8013140:	f7ff fd06 	bl	8012b50 <__lo0bits>
 8013144:	9900      	ldr	r1, [sp, #0]
 8013146:	b300      	cbz	r0, 801318a <__d2b+0x82>
 8013148:	9a01      	ldr	r2, [sp, #4]
 801314a:	f1c0 0320 	rsb	r3, r0, #32
 801314e:	fa02 f303 	lsl.w	r3, r2, r3
 8013152:	430b      	orrs	r3, r1
 8013154:	40c2      	lsrs	r2, r0
 8013156:	6163      	str	r3, [r4, #20]
 8013158:	9201      	str	r2, [sp, #4]
 801315a:	9b01      	ldr	r3, [sp, #4]
 801315c:	61a3      	str	r3, [r4, #24]
 801315e:	2b00      	cmp	r3, #0
 8013160:	bf14      	ite	ne
 8013162:	2202      	movne	r2, #2
 8013164:	2201      	moveq	r2, #1
 8013166:	6122      	str	r2, [r4, #16]
 8013168:	b1d5      	cbz	r5, 80131a0 <__d2b+0x98>
 801316a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801316e:	4405      	add	r5, r0
 8013170:	f8c9 5000 	str.w	r5, [r9]
 8013174:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013178:	f8c8 0000 	str.w	r0, [r8]
 801317c:	4620      	mov	r0, r4
 801317e:	b003      	add	sp, #12
 8013180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013188:	e7d5      	b.n	8013136 <__d2b+0x2e>
 801318a:	6161      	str	r1, [r4, #20]
 801318c:	e7e5      	b.n	801315a <__d2b+0x52>
 801318e:	a801      	add	r0, sp, #4
 8013190:	f7ff fcde 	bl	8012b50 <__lo0bits>
 8013194:	9b01      	ldr	r3, [sp, #4]
 8013196:	6163      	str	r3, [r4, #20]
 8013198:	2201      	movs	r2, #1
 801319a:	6122      	str	r2, [r4, #16]
 801319c:	3020      	adds	r0, #32
 801319e:	e7e3      	b.n	8013168 <__d2b+0x60>
 80131a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80131a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80131a8:	f8c9 0000 	str.w	r0, [r9]
 80131ac:	6918      	ldr	r0, [r3, #16]
 80131ae:	f7ff fcaf 	bl	8012b10 <__hi0bits>
 80131b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80131b6:	e7df      	b.n	8013178 <__d2b+0x70>
 80131b8:	0801534f 	.word	0x0801534f
 80131bc:	0801543c 	.word	0x0801543c

080131c0 <__ratio>:
 80131c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c4:	4688      	mov	r8, r1
 80131c6:	4669      	mov	r1, sp
 80131c8:	4681      	mov	r9, r0
 80131ca:	f7ff ff4d 	bl	8013068 <__b2d>
 80131ce:	a901      	add	r1, sp, #4
 80131d0:	4640      	mov	r0, r8
 80131d2:	ec55 4b10 	vmov	r4, r5, d0
 80131d6:	f7ff ff47 	bl	8013068 <__b2d>
 80131da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80131de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80131e2:	eba3 0c02 	sub.w	ip, r3, r2
 80131e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80131ea:	1a9b      	subs	r3, r3, r2
 80131ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80131f0:	ec51 0b10 	vmov	r0, r1, d0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	bfd6      	itet	le
 80131f8:	460a      	movle	r2, r1
 80131fa:	462a      	movgt	r2, r5
 80131fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013200:	468b      	mov	fp, r1
 8013202:	462f      	mov	r7, r5
 8013204:	bfd4      	ite	le
 8013206:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801320a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801320e:	4620      	mov	r0, r4
 8013210:	ee10 2a10 	vmov	r2, s0
 8013214:	465b      	mov	r3, fp
 8013216:	4639      	mov	r1, r7
 8013218:	f7ed fb38 	bl	800088c <__aeabi_ddiv>
 801321c:	ec41 0b10 	vmov	d0, r0, r1
 8013220:	b003      	add	sp, #12
 8013222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013226 <__copybits>:
 8013226:	3901      	subs	r1, #1
 8013228:	b570      	push	{r4, r5, r6, lr}
 801322a:	1149      	asrs	r1, r1, #5
 801322c:	6914      	ldr	r4, [r2, #16]
 801322e:	3101      	adds	r1, #1
 8013230:	f102 0314 	add.w	r3, r2, #20
 8013234:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013238:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801323c:	1f05      	subs	r5, r0, #4
 801323e:	42a3      	cmp	r3, r4
 8013240:	d30c      	bcc.n	801325c <__copybits+0x36>
 8013242:	1aa3      	subs	r3, r4, r2
 8013244:	3b11      	subs	r3, #17
 8013246:	f023 0303 	bic.w	r3, r3, #3
 801324a:	3211      	adds	r2, #17
 801324c:	42a2      	cmp	r2, r4
 801324e:	bf88      	it	hi
 8013250:	2300      	movhi	r3, #0
 8013252:	4418      	add	r0, r3
 8013254:	2300      	movs	r3, #0
 8013256:	4288      	cmp	r0, r1
 8013258:	d305      	bcc.n	8013266 <__copybits+0x40>
 801325a:	bd70      	pop	{r4, r5, r6, pc}
 801325c:	f853 6b04 	ldr.w	r6, [r3], #4
 8013260:	f845 6f04 	str.w	r6, [r5, #4]!
 8013264:	e7eb      	b.n	801323e <__copybits+0x18>
 8013266:	f840 3b04 	str.w	r3, [r0], #4
 801326a:	e7f4      	b.n	8013256 <__copybits+0x30>

0801326c <__any_on>:
 801326c:	f100 0214 	add.w	r2, r0, #20
 8013270:	6900      	ldr	r0, [r0, #16]
 8013272:	114b      	asrs	r3, r1, #5
 8013274:	4298      	cmp	r0, r3
 8013276:	b510      	push	{r4, lr}
 8013278:	db11      	blt.n	801329e <__any_on+0x32>
 801327a:	dd0a      	ble.n	8013292 <__any_on+0x26>
 801327c:	f011 011f 	ands.w	r1, r1, #31
 8013280:	d007      	beq.n	8013292 <__any_on+0x26>
 8013282:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013286:	fa24 f001 	lsr.w	r0, r4, r1
 801328a:	fa00 f101 	lsl.w	r1, r0, r1
 801328e:	428c      	cmp	r4, r1
 8013290:	d10b      	bne.n	80132aa <__any_on+0x3e>
 8013292:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013296:	4293      	cmp	r3, r2
 8013298:	d803      	bhi.n	80132a2 <__any_on+0x36>
 801329a:	2000      	movs	r0, #0
 801329c:	bd10      	pop	{r4, pc}
 801329e:	4603      	mov	r3, r0
 80132a0:	e7f7      	b.n	8013292 <__any_on+0x26>
 80132a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80132a6:	2900      	cmp	r1, #0
 80132a8:	d0f5      	beq.n	8013296 <__any_on+0x2a>
 80132aa:	2001      	movs	r0, #1
 80132ac:	e7f6      	b.n	801329c <__any_on+0x30>

080132ae <_calloc_r>:
 80132ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80132b0:	fba1 2402 	umull	r2, r4, r1, r2
 80132b4:	b94c      	cbnz	r4, 80132ca <_calloc_r+0x1c>
 80132b6:	4611      	mov	r1, r2
 80132b8:	9201      	str	r2, [sp, #4]
 80132ba:	f000 f87b 	bl	80133b4 <_malloc_r>
 80132be:	9a01      	ldr	r2, [sp, #4]
 80132c0:	4605      	mov	r5, r0
 80132c2:	b930      	cbnz	r0, 80132d2 <_calloc_r+0x24>
 80132c4:	4628      	mov	r0, r5
 80132c6:	b003      	add	sp, #12
 80132c8:	bd30      	pop	{r4, r5, pc}
 80132ca:	220c      	movs	r2, #12
 80132cc:	6002      	str	r2, [r0, #0]
 80132ce:	2500      	movs	r5, #0
 80132d0:	e7f8      	b.n	80132c4 <_calloc_r+0x16>
 80132d2:	4621      	mov	r1, r4
 80132d4:	f7fb ff6e 	bl	800f1b4 <memset>
 80132d8:	e7f4      	b.n	80132c4 <_calloc_r+0x16>
	...

080132dc <_free_r>:
 80132dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80132de:	2900      	cmp	r1, #0
 80132e0:	d044      	beq.n	801336c <_free_r+0x90>
 80132e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132e6:	9001      	str	r0, [sp, #4]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	f1a1 0404 	sub.w	r4, r1, #4
 80132ee:	bfb8      	it	lt
 80132f0:	18e4      	addlt	r4, r4, r3
 80132f2:	f001 f833 	bl	801435c <__malloc_lock>
 80132f6:	4a1e      	ldr	r2, [pc, #120]	; (8013370 <_free_r+0x94>)
 80132f8:	9801      	ldr	r0, [sp, #4]
 80132fa:	6813      	ldr	r3, [r2, #0]
 80132fc:	b933      	cbnz	r3, 801330c <_free_r+0x30>
 80132fe:	6063      	str	r3, [r4, #4]
 8013300:	6014      	str	r4, [r2, #0]
 8013302:	b003      	add	sp, #12
 8013304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013308:	f001 b82e 	b.w	8014368 <__malloc_unlock>
 801330c:	42a3      	cmp	r3, r4
 801330e:	d908      	bls.n	8013322 <_free_r+0x46>
 8013310:	6825      	ldr	r5, [r4, #0]
 8013312:	1961      	adds	r1, r4, r5
 8013314:	428b      	cmp	r3, r1
 8013316:	bf01      	itttt	eq
 8013318:	6819      	ldreq	r1, [r3, #0]
 801331a:	685b      	ldreq	r3, [r3, #4]
 801331c:	1949      	addeq	r1, r1, r5
 801331e:	6021      	streq	r1, [r4, #0]
 8013320:	e7ed      	b.n	80132fe <_free_r+0x22>
 8013322:	461a      	mov	r2, r3
 8013324:	685b      	ldr	r3, [r3, #4]
 8013326:	b10b      	cbz	r3, 801332c <_free_r+0x50>
 8013328:	42a3      	cmp	r3, r4
 801332a:	d9fa      	bls.n	8013322 <_free_r+0x46>
 801332c:	6811      	ldr	r1, [r2, #0]
 801332e:	1855      	adds	r5, r2, r1
 8013330:	42a5      	cmp	r5, r4
 8013332:	d10b      	bne.n	801334c <_free_r+0x70>
 8013334:	6824      	ldr	r4, [r4, #0]
 8013336:	4421      	add	r1, r4
 8013338:	1854      	adds	r4, r2, r1
 801333a:	42a3      	cmp	r3, r4
 801333c:	6011      	str	r1, [r2, #0]
 801333e:	d1e0      	bne.n	8013302 <_free_r+0x26>
 8013340:	681c      	ldr	r4, [r3, #0]
 8013342:	685b      	ldr	r3, [r3, #4]
 8013344:	6053      	str	r3, [r2, #4]
 8013346:	4421      	add	r1, r4
 8013348:	6011      	str	r1, [r2, #0]
 801334a:	e7da      	b.n	8013302 <_free_r+0x26>
 801334c:	d902      	bls.n	8013354 <_free_r+0x78>
 801334e:	230c      	movs	r3, #12
 8013350:	6003      	str	r3, [r0, #0]
 8013352:	e7d6      	b.n	8013302 <_free_r+0x26>
 8013354:	6825      	ldr	r5, [r4, #0]
 8013356:	1961      	adds	r1, r4, r5
 8013358:	428b      	cmp	r3, r1
 801335a:	bf04      	itt	eq
 801335c:	6819      	ldreq	r1, [r3, #0]
 801335e:	685b      	ldreq	r3, [r3, #4]
 8013360:	6063      	str	r3, [r4, #4]
 8013362:	bf04      	itt	eq
 8013364:	1949      	addeq	r1, r1, r5
 8013366:	6021      	streq	r1, [r4, #0]
 8013368:	6054      	str	r4, [r2, #4]
 801336a:	e7ca      	b.n	8013302 <_free_r+0x26>
 801336c:	b003      	add	sp, #12
 801336e:	bd30      	pop	{r4, r5, pc}
 8013370:	2000320c 	.word	0x2000320c

08013374 <sbrk_aligned>:
 8013374:	b570      	push	{r4, r5, r6, lr}
 8013376:	4e0e      	ldr	r6, [pc, #56]	; (80133b0 <sbrk_aligned+0x3c>)
 8013378:	460c      	mov	r4, r1
 801337a:	6831      	ldr	r1, [r6, #0]
 801337c:	4605      	mov	r5, r0
 801337e:	b911      	cbnz	r1, 8013386 <sbrk_aligned+0x12>
 8013380:	f000 fe82 	bl	8014088 <_sbrk_r>
 8013384:	6030      	str	r0, [r6, #0]
 8013386:	4621      	mov	r1, r4
 8013388:	4628      	mov	r0, r5
 801338a:	f000 fe7d 	bl	8014088 <_sbrk_r>
 801338e:	1c43      	adds	r3, r0, #1
 8013390:	d00a      	beq.n	80133a8 <sbrk_aligned+0x34>
 8013392:	1cc4      	adds	r4, r0, #3
 8013394:	f024 0403 	bic.w	r4, r4, #3
 8013398:	42a0      	cmp	r0, r4
 801339a:	d007      	beq.n	80133ac <sbrk_aligned+0x38>
 801339c:	1a21      	subs	r1, r4, r0
 801339e:	4628      	mov	r0, r5
 80133a0:	f000 fe72 	bl	8014088 <_sbrk_r>
 80133a4:	3001      	adds	r0, #1
 80133a6:	d101      	bne.n	80133ac <sbrk_aligned+0x38>
 80133a8:	f04f 34ff 	mov.w	r4, #4294967295
 80133ac:	4620      	mov	r0, r4
 80133ae:	bd70      	pop	{r4, r5, r6, pc}
 80133b0:	20003210 	.word	0x20003210

080133b4 <_malloc_r>:
 80133b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133b8:	1ccd      	adds	r5, r1, #3
 80133ba:	f025 0503 	bic.w	r5, r5, #3
 80133be:	3508      	adds	r5, #8
 80133c0:	2d0c      	cmp	r5, #12
 80133c2:	bf38      	it	cc
 80133c4:	250c      	movcc	r5, #12
 80133c6:	2d00      	cmp	r5, #0
 80133c8:	4607      	mov	r7, r0
 80133ca:	db01      	blt.n	80133d0 <_malloc_r+0x1c>
 80133cc:	42a9      	cmp	r1, r5
 80133ce:	d905      	bls.n	80133dc <_malloc_r+0x28>
 80133d0:	230c      	movs	r3, #12
 80133d2:	603b      	str	r3, [r7, #0]
 80133d4:	2600      	movs	r6, #0
 80133d6:	4630      	mov	r0, r6
 80133d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133dc:	4e2e      	ldr	r6, [pc, #184]	; (8013498 <_malloc_r+0xe4>)
 80133de:	f000 ffbd 	bl	801435c <__malloc_lock>
 80133e2:	6833      	ldr	r3, [r6, #0]
 80133e4:	461c      	mov	r4, r3
 80133e6:	bb34      	cbnz	r4, 8013436 <_malloc_r+0x82>
 80133e8:	4629      	mov	r1, r5
 80133ea:	4638      	mov	r0, r7
 80133ec:	f7ff ffc2 	bl	8013374 <sbrk_aligned>
 80133f0:	1c43      	adds	r3, r0, #1
 80133f2:	4604      	mov	r4, r0
 80133f4:	d14d      	bne.n	8013492 <_malloc_r+0xde>
 80133f6:	6834      	ldr	r4, [r6, #0]
 80133f8:	4626      	mov	r6, r4
 80133fa:	2e00      	cmp	r6, #0
 80133fc:	d140      	bne.n	8013480 <_malloc_r+0xcc>
 80133fe:	6823      	ldr	r3, [r4, #0]
 8013400:	4631      	mov	r1, r6
 8013402:	4638      	mov	r0, r7
 8013404:	eb04 0803 	add.w	r8, r4, r3
 8013408:	f000 fe3e 	bl	8014088 <_sbrk_r>
 801340c:	4580      	cmp	r8, r0
 801340e:	d13a      	bne.n	8013486 <_malloc_r+0xd2>
 8013410:	6821      	ldr	r1, [r4, #0]
 8013412:	3503      	adds	r5, #3
 8013414:	1a6d      	subs	r5, r5, r1
 8013416:	f025 0503 	bic.w	r5, r5, #3
 801341a:	3508      	adds	r5, #8
 801341c:	2d0c      	cmp	r5, #12
 801341e:	bf38      	it	cc
 8013420:	250c      	movcc	r5, #12
 8013422:	4629      	mov	r1, r5
 8013424:	4638      	mov	r0, r7
 8013426:	f7ff ffa5 	bl	8013374 <sbrk_aligned>
 801342a:	3001      	adds	r0, #1
 801342c:	d02b      	beq.n	8013486 <_malloc_r+0xd2>
 801342e:	6823      	ldr	r3, [r4, #0]
 8013430:	442b      	add	r3, r5
 8013432:	6023      	str	r3, [r4, #0]
 8013434:	e00e      	b.n	8013454 <_malloc_r+0xa0>
 8013436:	6822      	ldr	r2, [r4, #0]
 8013438:	1b52      	subs	r2, r2, r5
 801343a:	d41e      	bmi.n	801347a <_malloc_r+0xc6>
 801343c:	2a0b      	cmp	r2, #11
 801343e:	d916      	bls.n	801346e <_malloc_r+0xba>
 8013440:	1961      	adds	r1, r4, r5
 8013442:	42a3      	cmp	r3, r4
 8013444:	6025      	str	r5, [r4, #0]
 8013446:	bf18      	it	ne
 8013448:	6059      	strne	r1, [r3, #4]
 801344a:	6863      	ldr	r3, [r4, #4]
 801344c:	bf08      	it	eq
 801344e:	6031      	streq	r1, [r6, #0]
 8013450:	5162      	str	r2, [r4, r5]
 8013452:	604b      	str	r3, [r1, #4]
 8013454:	4638      	mov	r0, r7
 8013456:	f104 060b 	add.w	r6, r4, #11
 801345a:	f000 ff85 	bl	8014368 <__malloc_unlock>
 801345e:	f026 0607 	bic.w	r6, r6, #7
 8013462:	1d23      	adds	r3, r4, #4
 8013464:	1af2      	subs	r2, r6, r3
 8013466:	d0b6      	beq.n	80133d6 <_malloc_r+0x22>
 8013468:	1b9b      	subs	r3, r3, r6
 801346a:	50a3      	str	r3, [r4, r2]
 801346c:	e7b3      	b.n	80133d6 <_malloc_r+0x22>
 801346e:	6862      	ldr	r2, [r4, #4]
 8013470:	42a3      	cmp	r3, r4
 8013472:	bf0c      	ite	eq
 8013474:	6032      	streq	r2, [r6, #0]
 8013476:	605a      	strne	r2, [r3, #4]
 8013478:	e7ec      	b.n	8013454 <_malloc_r+0xa0>
 801347a:	4623      	mov	r3, r4
 801347c:	6864      	ldr	r4, [r4, #4]
 801347e:	e7b2      	b.n	80133e6 <_malloc_r+0x32>
 8013480:	4634      	mov	r4, r6
 8013482:	6876      	ldr	r6, [r6, #4]
 8013484:	e7b9      	b.n	80133fa <_malloc_r+0x46>
 8013486:	230c      	movs	r3, #12
 8013488:	603b      	str	r3, [r7, #0]
 801348a:	4638      	mov	r0, r7
 801348c:	f000 ff6c 	bl	8014368 <__malloc_unlock>
 8013490:	e7a1      	b.n	80133d6 <_malloc_r+0x22>
 8013492:	6025      	str	r5, [r4, #0]
 8013494:	e7de      	b.n	8013454 <_malloc_r+0xa0>
 8013496:	bf00      	nop
 8013498:	2000320c 	.word	0x2000320c

0801349c <__ssputs_r>:
 801349c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134a0:	688e      	ldr	r6, [r1, #8]
 80134a2:	429e      	cmp	r6, r3
 80134a4:	4682      	mov	sl, r0
 80134a6:	460c      	mov	r4, r1
 80134a8:	4690      	mov	r8, r2
 80134aa:	461f      	mov	r7, r3
 80134ac:	d838      	bhi.n	8013520 <__ssputs_r+0x84>
 80134ae:	898a      	ldrh	r2, [r1, #12]
 80134b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80134b4:	d032      	beq.n	801351c <__ssputs_r+0x80>
 80134b6:	6825      	ldr	r5, [r4, #0]
 80134b8:	6909      	ldr	r1, [r1, #16]
 80134ba:	eba5 0901 	sub.w	r9, r5, r1
 80134be:	6965      	ldr	r5, [r4, #20]
 80134c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80134c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80134c8:	3301      	adds	r3, #1
 80134ca:	444b      	add	r3, r9
 80134cc:	106d      	asrs	r5, r5, #1
 80134ce:	429d      	cmp	r5, r3
 80134d0:	bf38      	it	cc
 80134d2:	461d      	movcc	r5, r3
 80134d4:	0553      	lsls	r3, r2, #21
 80134d6:	d531      	bpl.n	801353c <__ssputs_r+0xa0>
 80134d8:	4629      	mov	r1, r5
 80134da:	f7ff ff6b 	bl	80133b4 <_malloc_r>
 80134de:	4606      	mov	r6, r0
 80134e0:	b950      	cbnz	r0, 80134f8 <__ssputs_r+0x5c>
 80134e2:	230c      	movs	r3, #12
 80134e4:	f8ca 3000 	str.w	r3, [sl]
 80134e8:	89a3      	ldrh	r3, [r4, #12]
 80134ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134ee:	81a3      	strh	r3, [r4, #12]
 80134f0:	f04f 30ff 	mov.w	r0, #4294967295
 80134f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134f8:	6921      	ldr	r1, [r4, #16]
 80134fa:	464a      	mov	r2, r9
 80134fc:	f7fb fe32 	bl	800f164 <memcpy>
 8013500:	89a3      	ldrh	r3, [r4, #12]
 8013502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801350a:	81a3      	strh	r3, [r4, #12]
 801350c:	6126      	str	r6, [r4, #16]
 801350e:	6165      	str	r5, [r4, #20]
 8013510:	444e      	add	r6, r9
 8013512:	eba5 0509 	sub.w	r5, r5, r9
 8013516:	6026      	str	r6, [r4, #0]
 8013518:	60a5      	str	r5, [r4, #8]
 801351a:	463e      	mov	r6, r7
 801351c:	42be      	cmp	r6, r7
 801351e:	d900      	bls.n	8013522 <__ssputs_r+0x86>
 8013520:	463e      	mov	r6, r7
 8013522:	6820      	ldr	r0, [r4, #0]
 8013524:	4632      	mov	r2, r6
 8013526:	4641      	mov	r1, r8
 8013528:	f7fb fe2a 	bl	800f180 <memmove>
 801352c:	68a3      	ldr	r3, [r4, #8]
 801352e:	1b9b      	subs	r3, r3, r6
 8013530:	60a3      	str	r3, [r4, #8]
 8013532:	6823      	ldr	r3, [r4, #0]
 8013534:	4433      	add	r3, r6
 8013536:	6023      	str	r3, [r4, #0]
 8013538:	2000      	movs	r0, #0
 801353a:	e7db      	b.n	80134f4 <__ssputs_r+0x58>
 801353c:	462a      	mov	r2, r5
 801353e:	f000 ff19 	bl	8014374 <_realloc_r>
 8013542:	4606      	mov	r6, r0
 8013544:	2800      	cmp	r0, #0
 8013546:	d1e1      	bne.n	801350c <__ssputs_r+0x70>
 8013548:	6921      	ldr	r1, [r4, #16]
 801354a:	4650      	mov	r0, sl
 801354c:	f7ff fec6 	bl	80132dc <_free_r>
 8013550:	e7c7      	b.n	80134e2 <__ssputs_r+0x46>
	...

08013554 <_svfiprintf_r>:
 8013554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013558:	4698      	mov	r8, r3
 801355a:	898b      	ldrh	r3, [r1, #12]
 801355c:	061b      	lsls	r3, r3, #24
 801355e:	b09d      	sub	sp, #116	; 0x74
 8013560:	4607      	mov	r7, r0
 8013562:	460d      	mov	r5, r1
 8013564:	4614      	mov	r4, r2
 8013566:	d50e      	bpl.n	8013586 <_svfiprintf_r+0x32>
 8013568:	690b      	ldr	r3, [r1, #16]
 801356a:	b963      	cbnz	r3, 8013586 <_svfiprintf_r+0x32>
 801356c:	2140      	movs	r1, #64	; 0x40
 801356e:	f7ff ff21 	bl	80133b4 <_malloc_r>
 8013572:	6028      	str	r0, [r5, #0]
 8013574:	6128      	str	r0, [r5, #16]
 8013576:	b920      	cbnz	r0, 8013582 <_svfiprintf_r+0x2e>
 8013578:	230c      	movs	r3, #12
 801357a:	603b      	str	r3, [r7, #0]
 801357c:	f04f 30ff 	mov.w	r0, #4294967295
 8013580:	e0d1      	b.n	8013726 <_svfiprintf_r+0x1d2>
 8013582:	2340      	movs	r3, #64	; 0x40
 8013584:	616b      	str	r3, [r5, #20]
 8013586:	2300      	movs	r3, #0
 8013588:	9309      	str	r3, [sp, #36]	; 0x24
 801358a:	2320      	movs	r3, #32
 801358c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013590:	f8cd 800c 	str.w	r8, [sp, #12]
 8013594:	2330      	movs	r3, #48	; 0x30
 8013596:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013740 <_svfiprintf_r+0x1ec>
 801359a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801359e:	f04f 0901 	mov.w	r9, #1
 80135a2:	4623      	mov	r3, r4
 80135a4:	469a      	mov	sl, r3
 80135a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135aa:	b10a      	cbz	r2, 80135b0 <_svfiprintf_r+0x5c>
 80135ac:	2a25      	cmp	r2, #37	; 0x25
 80135ae:	d1f9      	bne.n	80135a4 <_svfiprintf_r+0x50>
 80135b0:	ebba 0b04 	subs.w	fp, sl, r4
 80135b4:	d00b      	beq.n	80135ce <_svfiprintf_r+0x7a>
 80135b6:	465b      	mov	r3, fp
 80135b8:	4622      	mov	r2, r4
 80135ba:	4629      	mov	r1, r5
 80135bc:	4638      	mov	r0, r7
 80135be:	f7ff ff6d 	bl	801349c <__ssputs_r>
 80135c2:	3001      	adds	r0, #1
 80135c4:	f000 80aa 	beq.w	801371c <_svfiprintf_r+0x1c8>
 80135c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135ca:	445a      	add	r2, fp
 80135cc:	9209      	str	r2, [sp, #36]	; 0x24
 80135ce:	f89a 3000 	ldrb.w	r3, [sl]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	f000 80a2 	beq.w	801371c <_svfiprintf_r+0x1c8>
 80135d8:	2300      	movs	r3, #0
 80135da:	f04f 32ff 	mov.w	r2, #4294967295
 80135de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80135e2:	f10a 0a01 	add.w	sl, sl, #1
 80135e6:	9304      	str	r3, [sp, #16]
 80135e8:	9307      	str	r3, [sp, #28]
 80135ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80135ee:	931a      	str	r3, [sp, #104]	; 0x68
 80135f0:	4654      	mov	r4, sl
 80135f2:	2205      	movs	r2, #5
 80135f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135f8:	4851      	ldr	r0, [pc, #324]	; (8013740 <_svfiprintf_r+0x1ec>)
 80135fa:	f7ec fe11 	bl	8000220 <memchr>
 80135fe:	9a04      	ldr	r2, [sp, #16]
 8013600:	b9d8      	cbnz	r0, 801363a <_svfiprintf_r+0xe6>
 8013602:	06d0      	lsls	r0, r2, #27
 8013604:	bf44      	itt	mi
 8013606:	2320      	movmi	r3, #32
 8013608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801360c:	0711      	lsls	r1, r2, #28
 801360e:	bf44      	itt	mi
 8013610:	232b      	movmi	r3, #43	; 0x2b
 8013612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013616:	f89a 3000 	ldrb.w	r3, [sl]
 801361a:	2b2a      	cmp	r3, #42	; 0x2a
 801361c:	d015      	beq.n	801364a <_svfiprintf_r+0xf6>
 801361e:	9a07      	ldr	r2, [sp, #28]
 8013620:	4654      	mov	r4, sl
 8013622:	2000      	movs	r0, #0
 8013624:	f04f 0c0a 	mov.w	ip, #10
 8013628:	4621      	mov	r1, r4
 801362a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801362e:	3b30      	subs	r3, #48	; 0x30
 8013630:	2b09      	cmp	r3, #9
 8013632:	d94e      	bls.n	80136d2 <_svfiprintf_r+0x17e>
 8013634:	b1b0      	cbz	r0, 8013664 <_svfiprintf_r+0x110>
 8013636:	9207      	str	r2, [sp, #28]
 8013638:	e014      	b.n	8013664 <_svfiprintf_r+0x110>
 801363a:	eba0 0308 	sub.w	r3, r0, r8
 801363e:	fa09 f303 	lsl.w	r3, r9, r3
 8013642:	4313      	orrs	r3, r2
 8013644:	9304      	str	r3, [sp, #16]
 8013646:	46a2      	mov	sl, r4
 8013648:	e7d2      	b.n	80135f0 <_svfiprintf_r+0x9c>
 801364a:	9b03      	ldr	r3, [sp, #12]
 801364c:	1d19      	adds	r1, r3, #4
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	9103      	str	r1, [sp, #12]
 8013652:	2b00      	cmp	r3, #0
 8013654:	bfbb      	ittet	lt
 8013656:	425b      	neglt	r3, r3
 8013658:	f042 0202 	orrlt.w	r2, r2, #2
 801365c:	9307      	strge	r3, [sp, #28]
 801365e:	9307      	strlt	r3, [sp, #28]
 8013660:	bfb8      	it	lt
 8013662:	9204      	strlt	r2, [sp, #16]
 8013664:	7823      	ldrb	r3, [r4, #0]
 8013666:	2b2e      	cmp	r3, #46	; 0x2e
 8013668:	d10c      	bne.n	8013684 <_svfiprintf_r+0x130>
 801366a:	7863      	ldrb	r3, [r4, #1]
 801366c:	2b2a      	cmp	r3, #42	; 0x2a
 801366e:	d135      	bne.n	80136dc <_svfiprintf_r+0x188>
 8013670:	9b03      	ldr	r3, [sp, #12]
 8013672:	1d1a      	adds	r2, r3, #4
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	9203      	str	r2, [sp, #12]
 8013678:	2b00      	cmp	r3, #0
 801367a:	bfb8      	it	lt
 801367c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013680:	3402      	adds	r4, #2
 8013682:	9305      	str	r3, [sp, #20]
 8013684:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013750 <_svfiprintf_r+0x1fc>
 8013688:	7821      	ldrb	r1, [r4, #0]
 801368a:	2203      	movs	r2, #3
 801368c:	4650      	mov	r0, sl
 801368e:	f7ec fdc7 	bl	8000220 <memchr>
 8013692:	b140      	cbz	r0, 80136a6 <_svfiprintf_r+0x152>
 8013694:	2340      	movs	r3, #64	; 0x40
 8013696:	eba0 000a 	sub.w	r0, r0, sl
 801369a:	fa03 f000 	lsl.w	r0, r3, r0
 801369e:	9b04      	ldr	r3, [sp, #16]
 80136a0:	4303      	orrs	r3, r0
 80136a2:	3401      	adds	r4, #1
 80136a4:	9304      	str	r3, [sp, #16]
 80136a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136aa:	4826      	ldr	r0, [pc, #152]	; (8013744 <_svfiprintf_r+0x1f0>)
 80136ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80136b0:	2206      	movs	r2, #6
 80136b2:	f7ec fdb5 	bl	8000220 <memchr>
 80136b6:	2800      	cmp	r0, #0
 80136b8:	d038      	beq.n	801372c <_svfiprintf_r+0x1d8>
 80136ba:	4b23      	ldr	r3, [pc, #140]	; (8013748 <_svfiprintf_r+0x1f4>)
 80136bc:	bb1b      	cbnz	r3, 8013706 <_svfiprintf_r+0x1b2>
 80136be:	9b03      	ldr	r3, [sp, #12]
 80136c0:	3307      	adds	r3, #7
 80136c2:	f023 0307 	bic.w	r3, r3, #7
 80136c6:	3308      	adds	r3, #8
 80136c8:	9303      	str	r3, [sp, #12]
 80136ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136cc:	4433      	add	r3, r6
 80136ce:	9309      	str	r3, [sp, #36]	; 0x24
 80136d0:	e767      	b.n	80135a2 <_svfiprintf_r+0x4e>
 80136d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80136d6:	460c      	mov	r4, r1
 80136d8:	2001      	movs	r0, #1
 80136da:	e7a5      	b.n	8013628 <_svfiprintf_r+0xd4>
 80136dc:	2300      	movs	r3, #0
 80136de:	3401      	adds	r4, #1
 80136e0:	9305      	str	r3, [sp, #20]
 80136e2:	4619      	mov	r1, r3
 80136e4:	f04f 0c0a 	mov.w	ip, #10
 80136e8:	4620      	mov	r0, r4
 80136ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80136ee:	3a30      	subs	r2, #48	; 0x30
 80136f0:	2a09      	cmp	r2, #9
 80136f2:	d903      	bls.n	80136fc <_svfiprintf_r+0x1a8>
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d0c5      	beq.n	8013684 <_svfiprintf_r+0x130>
 80136f8:	9105      	str	r1, [sp, #20]
 80136fa:	e7c3      	b.n	8013684 <_svfiprintf_r+0x130>
 80136fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8013700:	4604      	mov	r4, r0
 8013702:	2301      	movs	r3, #1
 8013704:	e7f0      	b.n	80136e8 <_svfiprintf_r+0x194>
 8013706:	ab03      	add	r3, sp, #12
 8013708:	9300      	str	r3, [sp, #0]
 801370a:	462a      	mov	r2, r5
 801370c:	4b0f      	ldr	r3, [pc, #60]	; (801374c <_svfiprintf_r+0x1f8>)
 801370e:	a904      	add	r1, sp, #16
 8013710:	4638      	mov	r0, r7
 8013712:	f7fb fdf7 	bl	800f304 <_printf_float>
 8013716:	1c42      	adds	r2, r0, #1
 8013718:	4606      	mov	r6, r0
 801371a:	d1d6      	bne.n	80136ca <_svfiprintf_r+0x176>
 801371c:	89ab      	ldrh	r3, [r5, #12]
 801371e:	065b      	lsls	r3, r3, #25
 8013720:	f53f af2c 	bmi.w	801357c <_svfiprintf_r+0x28>
 8013724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013726:	b01d      	add	sp, #116	; 0x74
 8013728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801372c:	ab03      	add	r3, sp, #12
 801372e:	9300      	str	r3, [sp, #0]
 8013730:	462a      	mov	r2, r5
 8013732:	4b06      	ldr	r3, [pc, #24]	; (801374c <_svfiprintf_r+0x1f8>)
 8013734:	a904      	add	r1, sp, #16
 8013736:	4638      	mov	r0, r7
 8013738:	f7fc f888 	bl	800f84c <_printf_i>
 801373c:	e7eb      	b.n	8013716 <_svfiprintf_r+0x1c2>
 801373e:	bf00      	nop
 8013740:	08015594 	.word	0x08015594
 8013744:	0801559e 	.word	0x0801559e
 8013748:	0800f305 	.word	0x0800f305
 801374c:	0801349d 	.word	0x0801349d
 8013750:	0801559a 	.word	0x0801559a

08013754 <_sungetc_r>:
 8013754:	b538      	push	{r3, r4, r5, lr}
 8013756:	1c4b      	adds	r3, r1, #1
 8013758:	4614      	mov	r4, r2
 801375a:	d103      	bne.n	8013764 <_sungetc_r+0x10>
 801375c:	f04f 35ff 	mov.w	r5, #4294967295
 8013760:	4628      	mov	r0, r5
 8013762:	bd38      	pop	{r3, r4, r5, pc}
 8013764:	8993      	ldrh	r3, [r2, #12]
 8013766:	f023 0320 	bic.w	r3, r3, #32
 801376a:	8193      	strh	r3, [r2, #12]
 801376c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801376e:	6852      	ldr	r2, [r2, #4]
 8013770:	b2cd      	uxtb	r5, r1
 8013772:	b18b      	cbz	r3, 8013798 <_sungetc_r+0x44>
 8013774:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013776:	4293      	cmp	r3, r2
 8013778:	dd08      	ble.n	801378c <_sungetc_r+0x38>
 801377a:	6823      	ldr	r3, [r4, #0]
 801377c:	1e5a      	subs	r2, r3, #1
 801377e:	6022      	str	r2, [r4, #0]
 8013780:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013784:	6863      	ldr	r3, [r4, #4]
 8013786:	3301      	adds	r3, #1
 8013788:	6063      	str	r3, [r4, #4]
 801378a:	e7e9      	b.n	8013760 <_sungetc_r+0xc>
 801378c:	4621      	mov	r1, r4
 801378e:	f000 fd4b 	bl	8014228 <__submore>
 8013792:	2800      	cmp	r0, #0
 8013794:	d0f1      	beq.n	801377a <_sungetc_r+0x26>
 8013796:	e7e1      	b.n	801375c <_sungetc_r+0x8>
 8013798:	6921      	ldr	r1, [r4, #16]
 801379a:	6823      	ldr	r3, [r4, #0]
 801379c:	b151      	cbz	r1, 80137b4 <_sungetc_r+0x60>
 801379e:	4299      	cmp	r1, r3
 80137a0:	d208      	bcs.n	80137b4 <_sungetc_r+0x60>
 80137a2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80137a6:	42a9      	cmp	r1, r5
 80137a8:	d104      	bne.n	80137b4 <_sungetc_r+0x60>
 80137aa:	3b01      	subs	r3, #1
 80137ac:	3201      	adds	r2, #1
 80137ae:	6023      	str	r3, [r4, #0]
 80137b0:	6062      	str	r2, [r4, #4]
 80137b2:	e7d5      	b.n	8013760 <_sungetc_r+0xc>
 80137b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80137b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137bc:	6363      	str	r3, [r4, #52]	; 0x34
 80137be:	2303      	movs	r3, #3
 80137c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80137c2:	4623      	mov	r3, r4
 80137c4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80137c8:	6023      	str	r3, [r4, #0]
 80137ca:	2301      	movs	r3, #1
 80137cc:	e7dc      	b.n	8013788 <_sungetc_r+0x34>

080137ce <__ssrefill_r>:
 80137ce:	b510      	push	{r4, lr}
 80137d0:	460c      	mov	r4, r1
 80137d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80137d4:	b169      	cbz	r1, 80137f2 <__ssrefill_r+0x24>
 80137d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137da:	4299      	cmp	r1, r3
 80137dc:	d001      	beq.n	80137e2 <__ssrefill_r+0x14>
 80137de:	f7ff fd7d 	bl	80132dc <_free_r>
 80137e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80137e4:	6063      	str	r3, [r4, #4]
 80137e6:	2000      	movs	r0, #0
 80137e8:	6360      	str	r0, [r4, #52]	; 0x34
 80137ea:	b113      	cbz	r3, 80137f2 <__ssrefill_r+0x24>
 80137ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80137ee:	6023      	str	r3, [r4, #0]
 80137f0:	bd10      	pop	{r4, pc}
 80137f2:	6923      	ldr	r3, [r4, #16]
 80137f4:	6023      	str	r3, [r4, #0]
 80137f6:	2300      	movs	r3, #0
 80137f8:	6063      	str	r3, [r4, #4]
 80137fa:	89a3      	ldrh	r3, [r4, #12]
 80137fc:	f043 0320 	orr.w	r3, r3, #32
 8013800:	81a3      	strh	r3, [r4, #12]
 8013802:	f04f 30ff 	mov.w	r0, #4294967295
 8013806:	e7f3      	b.n	80137f0 <__ssrefill_r+0x22>

08013808 <__ssvfiscanf_r>:
 8013808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801380c:	460c      	mov	r4, r1
 801380e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013812:	2100      	movs	r1, #0
 8013814:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013818:	49a6      	ldr	r1, [pc, #664]	; (8013ab4 <__ssvfiscanf_r+0x2ac>)
 801381a:	91a0      	str	r1, [sp, #640]	; 0x280
 801381c:	f10d 0804 	add.w	r8, sp, #4
 8013820:	49a5      	ldr	r1, [pc, #660]	; (8013ab8 <__ssvfiscanf_r+0x2b0>)
 8013822:	4fa6      	ldr	r7, [pc, #664]	; (8013abc <__ssvfiscanf_r+0x2b4>)
 8013824:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013ac0 <__ssvfiscanf_r+0x2b8>
 8013828:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801382c:	4606      	mov	r6, r0
 801382e:	91a1      	str	r1, [sp, #644]	; 0x284
 8013830:	9300      	str	r3, [sp, #0]
 8013832:	7813      	ldrb	r3, [r2, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	f000 815a 	beq.w	8013aee <__ssvfiscanf_r+0x2e6>
 801383a:	5dd9      	ldrb	r1, [r3, r7]
 801383c:	f011 0108 	ands.w	r1, r1, #8
 8013840:	f102 0501 	add.w	r5, r2, #1
 8013844:	d019      	beq.n	801387a <__ssvfiscanf_r+0x72>
 8013846:	6863      	ldr	r3, [r4, #4]
 8013848:	2b00      	cmp	r3, #0
 801384a:	dd0f      	ble.n	801386c <__ssvfiscanf_r+0x64>
 801384c:	6823      	ldr	r3, [r4, #0]
 801384e:	781a      	ldrb	r2, [r3, #0]
 8013850:	5cba      	ldrb	r2, [r7, r2]
 8013852:	0712      	lsls	r2, r2, #28
 8013854:	d401      	bmi.n	801385a <__ssvfiscanf_r+0x52>
 8013856:	462a      	mov	r2, r5
 8013858:	e7eb      	b.n	8013832 <__ssvfiscanf_r+0x2a>
 801385a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801385c:	3201      	adds	r2, #1
 801385e:	9245      	str	r2, [sp, #276]	; 0x114
 8013860:	6862      	ldr	r2, [r4, #4]
 8013862:	3301      	adds	r3, #1
 8013864:	3a01      	subs	r2, #1
 8013866:	6062      	str	r2, [r4, #4]
 8013868:	6023      	str	r3, [r4, #0]
 801386a:	e7ec      	b.n	8013846 <__ssvfiscanf_r+0x3e>
 801386c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801386e:	4621      	mov	r1, r4
 8013870:	4630      	mov	r0, r6
 8013872:	4798      	blx	r3
 8013874:	2800      	cmp	r0, #0
 8013876:	d0e9      	beq.n	801384c <__ssvfiscanf_r+0x44>
 8013878:	e7ed      	b.n	8013856 <__ssvfiscanf_r+0x4e>
 801387a:	2b25      	cmp	r3, #37	; 0x25
 801387c:	d012      	beq.n	80138a4 <__ssvfiscanf_r+0x9c>
 801387e:	469a      	mov	sl, r3
 8013880:	6863      	ldr	r3, [r4, #4]
 8013882:	2b00      	cmp	r3, #0
 8013884:	f340 8091 	ble.w	80139aa <__ssvfiscanf_r+0x1a2>
 8013888:	6822      	ldr	r2, [r4, #0]
 801388a:	7813      	ldrb	r3, [r2, #0]
 801388c:	4553      	cmp	r3, sl
 801388e:	f040 812e 	bne.w	8013aee <__ssvfiscanf_r+0x2e6>
 8013892:	6863      	ldr	r3, [r4, #4]
 8013894:	3b01      	subs	r3, #1
 8013896:	6063      	str	r3, [r4, #4]
 8013898:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801389a:	3201      	adds	r2, #1
 801389c:	3301      	adds	r3, #1
 801389e:	6022      	str	r2, [r4, #0]
 80138a0:	9345      	str	r3, [sp, #276]	; 0x114
 80138a2:	e7d8      	b.n	8013856 <__ssvfiscanf_r+0x4e>
 80138a4:	9141      	str	r1, [sp, #260]	; 0x104
 80138a6:	9143      	str	r1, [sp, #268]	; 0x10c
 80138a8:	7853      	ldrb	r3, [r2, #1]
 80138aa:	2b2a      	cmp	r3, #42	; 0x2a
 80138ac:	bf02      	ittt	eq
 80138ae:	2310      	moveq	r3, #16
 80138b0:	1c95      	addeq	r5, r2, #2
 80138b2:	9341      	streq	r3, [sp, #260]	; 0x104
 80138b4:	220a      	movs	r2, #10
 80138b6:	46aa      	mov	sl, r5
 80138b8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80138bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80138c0:	2b09      	cmp	r3, #9
 80138c2:	d91d      	bls.n	8013900 <__ssvfiscanf_r+0xf8>
 80138c4:	487e      	ldr	r0, [pc, #504]	; (8013ac0 <__ssvfiscanf_r+0x2b8>)
 80138c6:	2203      	movs	r2, #3
 80138c8:	f7ec fcaa 	bl	8000220 <memchr>
 80138cc:	b140      	cbz	r0, 80138e0 <__ssvfiscanf_r+0xd8>
 80138ce:	2301      	movs	r3, #1
 80138d0:	eba0 0009 	sub.w	r0, r0, r9
 80138d4:	fa03 f000 	lsl.w	r0, r3, r0
 80138d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80138da:	4318      	orrs	r0, r3
 80138dc:	9041      	str	r0, [sp, #260]	; 0x104
 80138de:	4655      	mov	r5, sl
 80138e0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80138e4:	2b78      	cmp	r3, #120	; 0x78
 80138e6:	d806      	bhi.n	80138f6 <__ssvfiscanf_r+0xee>
 80138e8:	2b57      	cmp	r3, #87	; 0x57
 80138ea:	d810      	bhi.n	801390e <__ssvfiscanf_r+0x106>
 80138ec:	2b25      	cmp	r3, #37	; 0x25
 80138ee:	d0c6      	beq.n	801387e <__ssvfiscanf_r+0x76>
 80138f0:	d856      	bhi.n	80139a0 <__ssvfiscanf_r+0x198>
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d064      	beq.n	80139c0 <__ssvfiscanf_r+0x1b8>
 80138f6:	2303      	movs	r3, #3
 80138f8:	9347      	str	r3, [sp, #284]	; 0x11c
 80138fa:	230a      	movs	r3, #10
 80138fc:	9342      	str	r3, [sp, #264]	; 0x108
 80138fe:	e071      	b.n	80139e4 <__ssvfiscanf_r+0x1dc>
 8013900:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013902:	fb02 1103 	mla	r1, r2, r3, r1
 8013906:	3930      	subs	r1, #48	; 0x30
 8013908:	9143      	str	r1, [sp, #268]	; 0x10c
 801390a:	4655      	mov	r5, sl
 801390c:	e7d3      	b.n	80138b6 <__ssvfiscanf_r+0xae>
 801390e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013912:	2a20      	cmp	r2, #32
 8013914:	d8ef      	bhi.n	80138f6 <__ssvfiscanf_r+0xee>
 8013916:	a101      	add	r1, pc, #4	; (adr r1, 801391c <__ssvfiscanf_r+0x114>)
 8013918:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801391c:	080139cf 	.word	0x080139cf
 8013920:	080138f7 	.word	0x080138f7
 8013924:	080138f7 	.word	0x080138f7
 8013928:	08013a2d 	.word	0x08013a2d
 801392c:	080138f7 	.word	0x080138f7
 8013930:	080138f7 	.word	0x080138f7
 8013934:	080138f7 	.word	0x080138f7
 8013938:	080138f7 	.word	0x080138f7
 801393c:	080138f7 	.word	0x080138f7
 8013940:	080138f7 	.word	0x080138f7
 8013944:	080138f7 	.word	0x080138f7
 8013948:	08013a43 	.word	0x08013a43
 801394c:	08013a19 	.word	0x08013a19
 8013950:	080139a7 	.word	0x080139a7
 8013954:	080139a7 	.word	0x080139a7
 8013958:	080139a7 	.word	0x080139a7
 801395c:	080138f7 	.word	0x080138f7
 8013960:	08013a1d 	.word	0x08013a1d
 8013964:	080138f7 	.word	0x080138f7
 8013968:	080138f7 	.word	0x080138f7
 801396c:	080138f7 	.word	0x080138f7
 8013970:	080138f7 	.word	0x080138f7
 8013974:	08013a53 	.word	0x08013a53
 8013978:	08013a25 	.word	0x08013a25
 801397c:	080139c7 	.word	0x080139c7
 8013980:	080138f7 	.word	0x080138f7
 8013984:	080138f7 	.word	0x080138f7
 8013988:	08013a4f 	.word	0x08013a4f
 801398c:	080138f7 	.word	0x080138f7
 8013990:	08013a19 	.word	0x08013a19
 8013994:	080138f7 	.word	0x080138f7
 8013998:	080138f7 	.word	0x080138f7
 801399c:	080139cf 	.word	0x080139cf
 80139a0:	3b45      	subs	r3, #69	; 0x45
 80139a2:	2b02      	cmp	r3, #2
 80139a4:	d8a7      	bhi.n	80138f6 <__ssvfiscanf_r+0xee>
 80139a6:	2305      	movs	r3, #5
 80139a8:	e01b      	b.n	80139e2 <__ssvfiscanf_r+0x1da>
 80139aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80139ac:	4621      	mov	r1, r4
 80139ae:	4630      	mov	r0, r6
 80139b0:	4798      	blx	r3
 80139b2:	2800      	cmp	r0, #0
 80139b4:	f43f af68 	beq.w	8013888 <__ssvfiscanf_r+0x80>
 80139b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80139ba:	2800      	cmp	r0, #0
 80139bc:	f040 808d 	bne.w	8013ada <__ssvfiscanf_r+0x2d2>
 80139c0:	f04f 30ff 	mov.w	r0, #4294967295
 80139c4:	e08f      	b.n	8013ae6 <__ssvfiscanf_r+0x2de>
 80139c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80139c8:	f042 0220 	orr.w	r2, r2, #32
 80139cc:	9241      	str	r2, [sp, #260]	; 0x104
 80139ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80139d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80139d4:	9241      	str	r2, [sp, #260]	; 0x104
 80139d6:	2210      	movs	r2, #16
 80139d8:	2b6f      	cmp	r3, #111	; 0x6f
 80139da:	9242      	str	r2, [sp, #264]	; 0x108
 80139dc:	bf34      	ite	cc
 80139de:	2303      	movcc	r3, #3
 80139e0:	2304      	movcs	r3, #4
 80139e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80139e4:	6863      	ldr	r3, [r4, #4]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	dd42      	ble.n	8013a70 <__ssvfiscanf_r+0x268>
 80139ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80139ec:	0659      	lsls	r1, r3, #25
 80139ee:	d404      	bmi.n	80139fa <__ssvfiscanf_r+0x1f2>
 80139f0:	6823      	ldr	r3, [r4, #0]
 80139f2:	781a      	ldrb	r2, [r3, #0]
 80139f4:	5cba      	ldrb	r2, [r7, r2]
 80139f6:	0712      	lsls	r2, r2, #28
 80139f8:	d441      	bmi.n	8013a7e <__ssvfiscanf_r+0x276>
 80139fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80139fc:	2b02      	cmp	r3, #2
 80139fe:	dc50      	bgt.n	8013aa2 <__ssvfiscanf_r+0x29a>
 8013a00:	466b      	mov	r3, sp
 8013a02:	4622      	mov	r2, r4
 8013a04:	a941      	add	r1, sp, #260	; 0x104
 8013a06:	4630      	mov	r0, r6
 8013a08:	f000 f9d0 	bl	8013dac <_scanf_chars>
 8013a0c:	2801      	cmp	r0, #1
 8013a0e:	d06e      	beq.n	8013aee <__ssvfiscanf_r+0x2e6>
 8013a10:	2802      	cmp	r0, #2
 8013a12:	f47f af20 	bne.w	8013856 <__ssvfiscanf_r+0x4e>
 8013a16:	e7cf      	b.n	80139b8 <__ssvfiscanf_r+0x1b0>
 8013a18:	220a      	movs	r2, #10
 8013a1a:	e7dd      	b.n	80139d8 <__ssvfiscanf_r+0x1d0>
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	9342      	str	r3, [sp, #264]	; 0x108
 8013a20:	2303      	movs	r3, #3
 8013a22:	e7de      	b.n	80139e2 <__ssvfiscanf_r+0x1da>
 8013a24:	2308      	movs	r3, #8
 8013a26:	9342      	str	r3, [sp, #264]	; 0x108
 8013a28:	2304      	movs	r3, #4
 8013a2a:	e7da      	b.n	80139e2 <__ssvfiscanf_r+0x1da>
 8013a2c:	4629      	mov	r1, r5
 8013a2e:	4640      	mov	r0, r8
 8013a30:	f000 fb3a 	bl	80140a8 <__sccl>
 8013a34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a3a:	9341      	str	r3, [sp, #260]	; 0x104
 8013a3c:	4605      	mov	r5, r0
 8013a3e:	2301      	movs	r3, #1
 8013a40:	e7cf      	b.n	80139e2 <__ssvfiscanf_r+0x1da>
 8013a42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a48:	9341      	str	r3, [sp, #260]	; 0x104
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	e7c9      	b.n	80139e2 <__ssvfiscanf_r+0x1da>
 8013a4e:	2302      	movs	r3, #2
 8013a50:	e7c7      	b.n	80139e2 <__ssvfiscanf_r+0x1da>
 8013a52:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013a54:	06c3      	lsls	r3, r0, #27
 8013a56:	f53f aefe 	bmi.w	8013856 <__ssvfiscanf_r+0x4e>
 8013a5a:	9b00      	ldr	r3, [sp, #0]
 8013a5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013a5e:	1d19      	adds	r1, r3, #4
 8013a60:	9100      	str	r1, [sp, #0]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	f010 0f01 	tst.w	r0, #1
 8013a68:	bf14      	ite	ne
 8013a6a:	801a      	strhne	r2, [r3, #0]
 8013a6c:	601a      	streq	r2, [r3, #0]
 8013a6e:	e6f2      	b.n	8013856 <__ssvfiscanf_r+0x4e>
 8013a70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013a72:	4621      	mov	r1, r4
 8013a74:	4630      	mov	r0, r6
 8013a76:	4798      	blx	r3
 8013a78:	2800      	cmp	r0, #0
 8013a7a:	d0b6      	beq.n	80139ea <__ssvfiscanf_r+0x1e2>
 8013a7c:	e79c      	b.n	80139b8 <__ssvfiscanf_r+0x1b0>
 8013a7e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013a80:	3201      	adds	r2, #1
 8013a82:	9245      	str	r2, [sp, #276]	; 0x114
 8013a84:	6862      	ldr	r2, [r4, #4]
 8013a86:	3a01      	subs	r2, #1
 8013a88:	2a00      	cmp	r2, #0
 8013a8a:	6062      	str	r2, [r4, #4]
 8013a8c:	dd02      	ble.n	8013a94 <__ssvfiscanf_r+0x28c>
 8013a8e:	3301      	adds	r3, #1
 8013a90:	6023      	str	r3, [r4, #0]
 8013a92:	e7ad      	b.n	80139f0 <__ssvfiscanf_r+0x1e8>
 8013a94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013a96:	4621      	mov	r1, r4
 8013a98:	4630      	mov	r0, r6
 8013a9a:	4798      	blx	r3
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	d0a7      	beq.n	80139f0 <__ssvfiscanf_r+0x1e8>
 8013aa0:	e78a      	b.n	80139b8 <__ssvfiscanf_r+0x1b0>
 8013aa2:	2b04      	cmp	r3, #4
 8013aa4:	dc0e      	bgt.n	8013ac4 <__ssvfiscanf_r+0x2bc>
 8013aa6:	466b      	mov	r3, sp
 8013aa8:	4622      	mov	r2, r4
 8013aaa:	a941      	add	r1, sp, #260	; 0x104
 8013aac:	4630      	mov	r0, r6
 8013aae:	f000 f9d7 	bl	8013e60 <_scanf_i>
 8013ab2:	e7ab      	b.n	8013a0c <__ssvfiscanf_r+0x204>
 8013ab4:	08013755 	.word	0x08013755
 8013ab8:	080137cf 	.word	0x080137cf
 8013abc:	0801513d 	.word	0x0801513d
 8013ac0:	0801559a 	.word	0x0801559a
 8013ac4:	4b0b      	ldr	r3, [pc, #44]	; (8013af4 <__ssvfiscanf_r+0x2ec>)
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	f43f aec5 	beq.w	8013856 <__ssvfiscanf_r+0x4e>
 8013acc:	466b      	mov	r3, sp
 8013ace:	4622      	mov	r2, r4
 8013ad0:	a941      	add	r1, sp, #260	; 0x104
 8013ad2:	4630      	mov	r0, r6
 8013ad4:	f7fb ffe0 	bl	800fa98 <_scanf_float>
 8013ad8:	e798      	b.n	8013a0c <__ssvfiscanf_r+0x204>
 8013ada:	89a3      	ldrh	r3, [r4, #12]
 8013adc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013ae0:	bf18      	it	ne
 8013ae2:	f04f 30ff 	movne.w	r0, #4294967295
 8013ae6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013aee:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013af0:	e7f9      	b.n	8013ae6 <__ssvfiscanf_r+0x2de>
 8013af2:	bf00      	nop
 8013af4:	0800fa99 	.word	0x0800fa99

08013af8 <__sfputc_r>:
 8013af8:	6893      	ldr	r3, [r2, #8]
 8013afa:	3b01      	subs	r3, #1
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	b410      	push	{r4}
 8013b00:	6093      	str	r3, [r2, #8]
 8013b02:	da08      	bge.n	8013b16 <__sfputc_r+0x1e>
 8013b04:	6994      	ldr	r4, [r2, #24]
 8013b06:	42a3      	cmp	r3, r4
 8013b08:	db01      	blt.n	8013b0e <__sfputc_r+0x16>
 8013b0a:	290a      	cmp	r1, #10
 8013b0c:	d103      	bne.n	8013b16 <__sfputc_r+0x1e>
 8013b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b12:	f7fd b9ed 	b.w	8010ef0 <__swbuf_r>
 8013b16:	6813      	ldr	r3, [r2, #0]
 8013b18:	1c58      	adds	r0, r3, #1
 8013b1a:	6010      	str	r0, [r2, #0]
 8013b1c:	7019      	strb	r1, [r3, #0]
 8013b1e:	4608      	mov	r0, r1
 8013b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b24:	4770      	bx	lr

08013b26 <__sfputs_r>:
 8013b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b28:	4606      	mov	r6, r0
 8013b2a:	460f      	mov	r7, r1
 8013b2c:	4614      	mov	r4, r2
 8013b2e:	18d5      	adds	r5, r2, r3
 8013b30:	42ac      	cmp	r4, r5
 8013b32:	d101      	bne.n	8013b38 <__sfputs_r+0x12>
 8013b34:	2000      	movs	r0, #0
 8013b36:	e007      	b.n	8013b48 <__sfputs_r+0x22>
 8013b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b3c:	463a      	mov	r2, r7
 8013b3e:	4630      	mov	r0, r6
 8013b40:	f7ff ffda 	bl	8013af8 <__sfputc_r>
 8013b44:	1c43      	adds	r3, r0, #1
 8013b46:	d1f3      	bne.n	8013b30 <__sfputs_r+0xa>
 8013b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b4c <_vfiprintf_r>:
 8013b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b50:	460d      	mov	r5, r1
 8013b52:	b09d      	sub	sp, #116	; 0x74
 8013b54:	4614      	mov	r4, r2
 8013b56:	4698      	mov	r8, r3
 8013b58:	4606      	mov	r6, r0
 8013b5a:	b118      	cbz	r0, 8013b64 <_vfiprintf_r+0x18>
 8013b5c:	6983      	ldr	r3, [r0, #24]
 8013b5e:	b90b      	cbnz	r3, 8013b64 <_vfiprintf_r+0x18>
 8013b60:	f7fe fa3e 	bl	8011fe0 <__sinit>
 8013b64:	4b89      	ldr	r3, [pc, #548]	; (8013d8c <_vfiprintf_r+0x240>)
 8013b66:	429d      	cmp	r5, r3
 8013b68:	d11b      	bne.n	8013ba2 <_vfiprintf_r+0x56>
 8013b6a:	6875      	ldr	r5, [r6, #4]
 8013b6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b6e:	07d9      	lsls	r1, r3, #31
 8013b70:	d405      	bmi.n	8013b7e <_vfiprintf_r+0x32>
 8013b72:	89ab      	ldrh	r3, [r5, #12]
 8013b74:	059a      	lsls	r2, r3, #22
 8013b76:	d402      	bmi.n	8013b7e <_vfiprintf_r+0x32>
 8013b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b7a:	f7fe fe42 	bl	8012802 <__retarget_lock_acquire_recursive>
 8013b7e:	89ab      	ldrh	r3, [r5, #12]
 8013b80:	071b      	lsls	r3, r3, #28
 8013b82:	d501      	bpl.n	8013b88 <_vfiprintf_r+0x3c>
 8013b84:	692b      	ldr	r3, [r5, #16]
 8013b86:	b9eb      	cbnz	r3, 8013bc4 <_vfiprintf_r+0x78>
 8013b88:	4629      	mov	r1, r5
 8013b8a:	4630      	mov	r0, r6
 8013b8c:	f7fd fa14 	bl	8010fb8 <__swsetup_r>
 8013b90:	b1c0      	cbz	r0, 8013bc4 <_vfiprintf_r+0x78>
 8013b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b94:	07dc      	lsls	r4, r3, #31
 8013b96:	d50e      	bpl.n	8013bb6 <_vfiprintf_r+0x6a>
 8013b98:	f04f 30ff 	mov.w	r0, #4294967295
 8013b9c:	b01d      	add	sp, #116	; 0x74
 8013b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba2:	4b7b      	ldr	r3, [pc, #492]	; (8013d90 <_vfiprintf_r+0x244>)
 8013ba4:	429d      	cmp	r5, r3
 8013ba6:	d101      	bne.n	8013bac <_vfiprintf_r+0x60>
 8013ba8:	68b5      	ldr	r5, [r6, #8]
 8013baa:	e7df      	b.n	8013b6c <_vfiprintf_r+0x20>
 8013bac:	4b79      	ldr	r3, [pc, #484]	; (8013d94 <_vfiprintf_r+0x248>)
 8013bae:	429d      	cmp	r5, r3
 8013bb0:	bf08      	it	eq
 8013bb2:	68f5      	ldreq	r5, [r6, #12]
 8013bb4:	e7da      	b.n	8013b6c <_vfiprintf_r+0x20>
 8013bb6:	89ab      	ldrh	r3, [r5, #12]
 8013bb8:	0598      	lsls	r0, r3, #22
 8013bba:	d4ed      	bmi.n	8013b98 <_vfiprintf_r+0x4c>
 8013bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bbe:	f7fe fe21 	bl	8012804 <__retarget_lock_release_recursive>
 8013bc2:	e7e9      	b.n	8013b98 <_vfiprintf_r+0x4c>
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8013bc8:	2320      	movs	r3, #32
 8013bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8013bd2:	2330      	movs	r3, #48	; 0x30
 8013bd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013d98 <_vfiprintf_r+0x24c>
 8013bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013bdc:	f04f 0901 	mov.w	r9, #1
 8013be0:	4623      	mov	r3, r4
 8013be2:	469a      	mov	sl, r3
 8013be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013be8:	b10a      	cbz	r2, 8013bee <_vfiprintf_r+0xa2>
 8013bea:	2a25      	cmp	r2, #37	; 0x25
 8013bec:	d1f9      	bne.n	8013be2 <_vfiprintf_r+0x96>
 8013bee:	ebba 0b04 	subs.w	fp, sl, r4
 8013bf2:	d00b      	beq.n	8013c0c <_vfiprintf_r+0xc0>
 8013bf4:	465b      	mov	r3, fp
 8013bf6:	4622      	mov	r2, r4
 8013bf8:	4629      	mov	r1, r5
 8013bfa:	4630      	mov	r0, r6
 8013bfc:	f7ff ff93 	bl	8013b26 <__sfputs_r>
 8013c00:	3001      	adds	r0, #1
 8013c02:	f000 80aa 	beq.w	8013d5a <_vfiprintf_r+0x20e>
 8013c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c08:	445a      	add	r2, fp
 8013c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8013c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	f000 80a2 	beq.w	8013d5a <_vfiprintf_r+0x20e>
 8013c16:	2300      	movs	r3, #0
 8013c18:	f04f 32ff 	mov.w	r2, #4294967295
 8013c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c20:	f10a 0a01 	add.w	sl, sl, #1
 8013c24:	9304      	str	r3, [sp, #16]
 8013c26:	9307      	str	r3, [sp, #28]
 8013c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8013c2e:	4654      	mov	r4, sl
 8013c30:	2205      	movs	r2, #5
 8013c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c36:	4858      	ldr	r0, [pc, #352]	; (8013d98 <_vfiprintf_r+0x24c>)
 8013c38:	f7ec faf2 	bl	8000220 <memchr>
 8013c3c:	9a04      	ldr	r2, [sp, #16]
 8013c3e:	b9d8      	cbnz	r0, 8013c78 <_vfiprintf_r+0x12c>
 8013c40:	06d1      	lsls	r1, r2, #27
 8013c42:	bf44      	itt	mi
 8013c44:	2320      	movmi	r3, #32
 8013c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c4a:	0713      	lsls	r3, r2, #28
 8013c4c:	bf44      	itt	mi
 8013c4e:	232b      	movmi	r3, #43	; 0x2b
 8013c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c54:	f89a 3000 	ldrb.w	r3, [sl]
 8013c58:	2b2a      	cmp	r3, #42	; 0x2a
 8013c5a:	d015      	beq.n	8013c88 <_vfiprintf_r+0x13c>
 8013c5c:	9a07      	ldr	r2, [sp, #28]
 8013c5e:	4654      	mov	r4, sl
 8013c60:	2000      	movs	r0, #0
 8013c62:	f04f 0c0a 	mov.w	ip, #10
 8013c66:	4621      	mov	r1, r4
 8013c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c6c:	3b30      	subs	r3, #48	; 0x30
 8013c6e:	2b09      	cmp	r3, #9
 8013c70:	d94e      	bls.n	8013d10 <_vfiprintf_r+0x1c4>
 8013c72:	b1b0      	cbz	r0, 8013ca2 <_vfiprintf_r+0x156>
 8013c74:	9207      	str	r2, [sp, #28]
 8013c76:	e014      	b.n	8013ca2 <_vfiprintf_r+0x156>
 8013c78:	eba0 0308 	sub.w	r3, r0, r8
 8013c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8013c80:	4313      	orrs	r3, r2
 8013c82:	9304      	str	r3, [sp, #16]
 8013c84:	46a2      	mov	sl, r4
 8013c86:	e7d2      	b.n	8013c2e <_vfiprintf_r+0xe2>
 8013c88:	9b03      	ldr	r3, [sp, #12]
 8013c8a:	1d19      	adds	r1, r3, #4
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	9103      	str	r1, [sp, #12]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	bfbb      	ittet	lt
 8013c94:	425b      	neglt	r3, r3
 8013c96:	f042 0202 	orrlt.w	r2, r2, #2
 8013c9a:	9307      	strge	r3, [sp, #28]
 8013c9c:	9307      	strlt	r3, [sp, #28]
 8013c9e:	bfb8      	it	lt
 8013ca0:	9204      	strlt	r2, [sp, #16]
 8013ca2:	7823      	ldrb	r3, [r4, #0]
 8013ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8013ca6:	d10c      	bne.n	8013cc2 <_vfiprintf_r+0x176>
 8013ca8:	7863      	ldrb	r3, [r4, #1]
 8013caa:	2b2a      	cmp	r3, #42	; 0x2a
 8013cac:	d135      	bne.n	8013d1a <_vfiprintf_r+0x1ce>
 8013cae:	9b03      	ldr	r3, [sp, #12]
 8013cb0:	1d1a      	adds	r2, r3, #4
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	9203      	str	r2, [sp, #12]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	bfb8      	it	lt
 8013cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8013cbe:	3402      	adds	r4, #2
 8013cc0:	9305      	str	r3, [sp, #20]
 8013cc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013da8 <_vfiprintf_r+0x25c>
 8013cc6:	7821      	ldrb	r1, [r4, #0]
 8013cc8:	2203      	movs	r2, #3
 8013cca:	4650      	mov	r0, sl
 8013ccc:	f7ec faa8 	bl	8000220 <memchr>
 8013cd0:	b140      	cbz	r0, 8013ce4 <_vfiprintf_r+0x198>
 8013cd2:	2340      	movs	r3, #64	; 0x40
 8013cd4:	eba0 000a 	sub.w	r0, r0, sl
 8013cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8013cdc:	9b04      	ldr	r3, [sp, #16]
 8013cde:	4303      	orrs	r3, r0
 8013ce0:	3401      	adds	r4, #1
 8013ce2:	9304      	str	r3, [sp, #16]
 8013ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ce8:	482c      	ldr	r0, [pc, #176]	; (8013d9c <_vfiprintf_r+0x250>)
 8013cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013cee:	2206      	movs	r2, #6
 8013cf0:	f7ec fa96 	bl	8000220 <memchr>
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	d03f      	beq.n	8013d78 <_vfiprintf_r+0x22c>
 8013cf8:	4b29      	ldr	r3, [pc, #164]	; (8013da0 <_vfiprintf_r+0x254>)
 8013cfa:	bb1b      	cbnz	r3, 8013d44 <_vfiprintf_r+0x1f8>
 8013cfc:	9b03      	ldr	r3, [sp, #12]
 8013cfe:	3307      	adds	r3, #7
 8013d00:	f023 0307 	bic.w	r3, r3, #7
 8013d04:	3308      	adds	r3, #8
 8013d06:	9303      	str	r3, [sp, #12]
 8013d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d0a:	443b      	add	r3, r7
 8013d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8013d0e:	e767      	b.n	8013be0 <_vfiprintf_r+0x94>
 8013d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d14:	460c      	mov	r4, r1
 8013d16:	2001      	movs	r0, #1
 8013d18:	e7a5      	b.n	8013c66 <_vfiprintf_r+0x11a>
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	3401      	adds	r4, #1
 8013d1e:	9305      	str	r3, [sp, #20]
 8013d20:	4619      	mov	r1, r3
 8013d22:	f04f 0c0a 	mov.w	ip, #10
 8013d26:	4620      	mov	r0, r4
 8013d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d2c:	3a30      	subs	r2, #48	; 0x30
 8013d2e:	2a09      	cmp	r2, #9
 8013d30:	d903      	bls.n	8013d3a <_vfiprintf_r+0x1ee>
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d0c5      	beq.n	8013cc2 <_vfiprintf_r+0x176>
 8013d36:	9105      	str	r1, [sp, #20]
 8013d38:	e7c3      	b.n	8013cc2 <_vfiprintf_r+0x176>
 8013d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d3e:	4604      	mov	r4, r0
 8013d40:	2301      	movs	r3, #1
 8013d42:	e7f0      	b.n	8013d26 <_vfiprintf_r+0x1da>
 8013d44:	ab03      	add	r3, sp, #12
 8013d46:	9300      	str	r3, [sp, #0]
 8013d48:	462a      	mov	r2, r5
 8013d4a:	4b16      	ldr	r3, [pc, #88]	; (8013da4 <_vfiprintf_r+0x258>)
 8013d4c:	a904      	add	r1, sp, #16
 8013d4e:	4630      	mov	r0, r6
 8013d50:	f7fb fad8 	bl	800f304 <_printf_float>
 8013d54:	4607      	mov	r7, r0
 8013d56:	1c78      	adds	r0, r7, #1
 8013d58:	d1d6      	bne.n	8013d08 <_vfiprintf_r+0x1bc>
 8013d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d5c:	07d9      	lsls	r1, r3, #31
 8013d5e:	d405      	bmi.n	8013d6c <_vfiprintf_r+0x220>
 8013d60:	89ab      	ldrh	r3, [r5, #12]
 8013d62:	059a      	lsls	r2, r3, #22
 8013d64:	d402      	bmi.n	8013d6c <_vfiprintf_r+0x220>
 8013d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d68:	f7fe fd4c 	bl	8012804 <__retarget_lock_release_recursive>
 8013d6c:	89ab      	ldrh	r3, [r5, #12]
 8013d6e:	065b      	lsls	r3, r3, #25
 8013d70:	f53f af12 	bmi.w	8013b98 <_vfiprintf_r+0x4c>
 8013d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d76:	e711      	b.n	8013b9c <_vfiprintf_r+0x50>
 8013d78:	ab03      	add	r3, sp, #12
 8013d7a:	9300      	str	r3, [sp, #0]
 8013d7c:	462a      	mov	r2, r5
 8013d7e:	4b09      	ldr	r3, [pc, #36]	; (8013da4 <_vfiprintf_r+0x258>)
 8013d80:	a904      	add	r1, sp, #16
 8013d82:	4630      	mov	r0, r6
 8013d84:	f7fb fd62 	bl	800f84c <_printf_i>
 8013d88:	e7e4      	b.n	8013d54 <_vfiprintf_r+0x208>
 8013d8a:	bf00      	nop
 8013d8c:	08015380 	.word	0x08015380
 8013d90:	080153a0 	.word	0x080153a0
 8013d94:	08015360 	.word	0x08015360
 8013d98:	08015594 	.word	0x08015594
 8013d9c:	0801559e 	.word	0x0801559e
 8013da0:	0800f305 	.word	0x0800f305
 8013da4:	08013b27 	.word	0x08013b27
 8013da8:	0801559a 	.word	0x0801559a

08013dac <_scanf_chars>:
 8013dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013db0:	4615      	mov	r5, r2
 8013db2:	688a      	ldr	r2, [r1, #8]
 8013db4:	4680      	mov	r8, r0
 8013db6:	460c      	mov	r4, r1
 8013db8:	b932      	cbnz	r2, 8013dc8 <_scanf_chars+0x1c>
 8013dba:	698a      	ldr	r2, [r1, #24]
 8013dbc:	2a00      	cmp	r2, #0
 8013dbe:	bf0c      	ite	eq
 8013dc0:	2201      	moveq	r2, #1
 8013dc2:	f04f 32ff 	movne.w	r2, #4294967295
 8013dc6:	608a      	str	r2, [r1, #8]
 8013dc8:	6822      	ldr	r2, [r4, #0]
 8013dca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013e5c <_scanf_chars+0xb0>
 8013dce:	06d1      	lsls	r1, r2, #27
 8013dd0:	bf5f      	itttt	pl
 8013dd2:	681a      	ldrpl	r2, [r3, #0]
 8013dd4:	1d11      	addpl	r1, r2, #4
 8013dd6:	6019      	strpl	r1, [r3, #0]
 8013dd8:	6816      	ldrpl	r6, [r2, #0]
 8013dda:	2700      	movs	r7, #0
 8013ddc:	69a0      	ldr	r0, [r4, #24]
 8013dde:	b188      	cbz	r0, 8013e04 <_scanf_chars+0x58>
 8013de0:	2801      	cmp	r0, #1
 8013de2:	d107      	bne.n	8013df4 <_scanf_chars+0x48>
 8013de4:	682a      	ldr	r2, [r5, #0]
 8013de6:	7811      	ldrb	r1, [r2, #0]
 8013de8:	6962      	ldr	r2, [r4, #20]
 8013dea:	5c52      	ldrb	r2, [r2, r1]
 8013dec:	b952      	cbnz	r2, 8013e04 <_scanf_chars+0x58>
 8013dee:	2f00      	cmp	r7, #0
 8013df0:	d031      	beq.n	8013e56 <_scanf_chars+0xaa>
 8013df2:	e022      	b.n	8013e3a <_scanf_chars+0x8e>
 8013df4:	2802      	cmp	r0, #2
 8013df6:	d120      	bne.n	8013e3a <_scanf_chars+0x8e>
 8013df8:	682b      	ldr	r3, [r5, #0]
 8013dfa:	781b      	ldrb	r3, [r3, #0]
 8013dfc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013e00:	071b      	lsls	r3, r3, #28
 8013e02:	d41a      	bmi.n	8013e3a <_scanf_chars+0x8e>
 8013e04:	6823      	ldr	r3, [r4, #0]
 8013e06:	06da      	lsls	r2, r3, #27
 8013e08:	bf5e      	ittt	pl
 8013e0a:	682b      	ldrpl	r3, [r5, #0]
 8013e0c:	781b      	ldrbpl	r3, [r3, #0]
 8013e0e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013e12:	682a      	ldr	r2, [r5, #0]
 8013e14:	686b      	ldr	r3, [r5, #4]
 8013e16:	3201      	adds	r2, #1
 8013e18:	602a      	str	r2, [r5, #0]
 8013e1a:	68a2      	ldr	r2, [r4, #8]
 8013e1c:	3b01      	subs	r3, #1
 8013e1e:	3a01      	subs	r2, #1
 8013e20:	606b      	str	r3, [r5, #4]
 8013e22:	3701      	adds	r7, #1
 8013e24:	60a2      	str	r2, [r4, #8]
 8013e26:	b142      	cbz	r2, 8013e3a <_scanf_chars+0x8e>
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	dcd7      	bgt.n	8013ddc <_scanf_chars+0x30>
 8013e2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013e30:	4629      	mov	r1, r5
 8013e32:	4640      	mov	r0, r8
 8013e34:	4798      	blx	r3
 8013e36:	2800      	cmp	r0, #0
 8013e38:	d0d0      	beq.n	8013ddc <_scanf_chars+0x30>
 8013e3a:	6823      	ldr	r3, [r4, #0]
 8013e3c:	f013 0310 	ands.w	r3, r3, #16
 8013e40:	d105      	bne.n	8013e4e <_scanf_chars+0xa2>
 8013e42:	68e2      	ldr	r2, [r4, #12]
 8013e44:	3201      	adds	r2, #1
 8013e46:	60e2      	str	r2, [r4, #12]
 8013e48:	69a2      	ldr	r2, [r4, #24]
 8013e4a:	b102      	cbz	r2, 8013e4e <_scanf_chars+0xa2>
 8013e4c:	7033      	strb	r3, [r6, #0]
 8013e4e:	6923      	ldr	r3, [r4, #16]
 8013e50:	443b      	add	r3, r7
 8013e52:	6123      	str	r3, [r4, #16]
 8013e54:	2000      	movs	r0, #0
 8013e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e5a:	bf00      	nop
 8013e5c:	0801513d 	.word	0x0801513d

08013e60 <_scanf_i>:
 8013e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e64:	4698      	mov	r8, r3
 8013e66:	4b76      	ldr	r3, [pc, #472]	; (8014040 <_scanf_i+0x1e0>)
 8013e68:	460c      	mov	r4, r1
 8013e6a:	4682      	mov	sl, r0
 8013e6c:	4616      	mov	r6, r2
 8013e6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013e72:	b087      	sub	sp, #28
 8013e74:	ab03      	add	r3, sp, #12
 8013e76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013e7a:	4b72      	ldr	r3, [pc, #456]	; (8014044 <_scanf_i+0x1e4>)
 8013e7c:	69a1      	ldr	r1, [r4, #24]
 8013e7e:	4a72      	ldr	r2, [pc, #456]	; (8014048 <_scanf_i+0x1e8>)
 8013e80:	2903      	cmp	r1, #3
 8013e82:	bf18      	it	ne
 8013e84:	461a      	movne	r2, r3
 8013e86:	68a3      	ldr	r3, [r4, #8]
 8013e88:	9201      	str	r2, [sp, #4]
 8013e8a:	1e5a      	subs	r2, r3, #1
 8013e8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013e90:	bf88      	it	hi
 8013e92:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013e96:	4627      	mov	r7, r4
 8013e98:	bf82      	ittt	hi
 8013e9a:	eb03 0905 	addhi.w	r9, r3, r5
 8013e9e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013ea2:	60a3      	strhi	r3, [r4, #8]
 8013ea4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013ea8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013eac:	bf98      	it	ls
 8013eae:	f04f 0900 	movls.w	r9, #0
 8013eb2:	6023      	str	r3, [r4, #0]
 8013eb4:	463d      	mov	r5, r7
 8013eb6:	f04f 0b00 	mov.w	fp, #0
 8013eba:	6831      	ldr	r1, [r6, #0]
 8013ebc:	ab03      	add	r3, sp, #12
 8013ebe:	7809      	ldrb	r1, [r1, #0]
 8013ec0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013ec4:	2202      	movs	r2, #2
 8013ec6:	f7ec f9ab 	bl	8000220 <memchr>
 8013eca:	b328      	cbz	r0, 8013f18 <_scanf_i+0xb8>
 8013ecc:	f1bb 0f01 	cmp.w	fp, #1
 8013ed0:	d159      	bne.n	8013f86 <_scanf_i+0x126>
 8013ed2:	6862      	ldr	r2, [r4, #4]
 8013ed4:	b92a      	cbnz	r2, 8013ee2 <_scanf_i+0x82>
 8013ed6:	6822      	ldr	r2, [r4, #0]
 8013ed8:	2308      	movs	r3, #8
 8013eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013ede:	6063      	str	r3, [r4, #4]
 8013ee0:	6022      	str	r2, [r4, #0]
 8013ee2:	6822      	ldr	r2, [r4, #0]
 8013ee4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013ee8:	6022      	str	r2, [r4, #0]
 8013eea:	68a2      	ldr	r2, [r4, #8]
 8013eec:	1e51      	subs	r1, r2, #1
 8013eee:	60a1      	str	r1, [r4, #8]
 8013ef0:	b192      	cbz	r2, 8013f18 <_scanf_i+0xb8>
 8013ef2:	6832      	ldr	r2, [r6, #0]
 8013ef4:	1c51      	adds	r1, r2, #1
 8013ef6:	6031      	str	r1, [r6, #0]
 8013ef8:	7812      	ldrb	r2, [r2, #0]
 8013efa:	f805 2b01 	strb.w	r2, [r5], #1
 8013efe:	6872      	ldr	r2, [r6, #4]
 8013f00:	3a01      	subs	r2, #1
 8013f02:	2a00      	cmp	r2, #0
 8013f04:	6072      	str	r2, [r6, #4]
 8013f06:	dc07      	bgt.n	8013f18 <_scanf_i+0xb8>
 8013f08:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013f0c:	4631      	mov	r1, r6
 8013f0e:	4650      	mov	r0, sl
 8013f10:	4790      	blx	r2
 8013f12:	2800      	cmp	r0, #0
 8013f14:	f040 8085 	bne.w	8014022 <_scanf_i+0x1c2>
 8013f18:	f10b 0b01 	add.w	fp, fp, #1
 8013f1c:	f1bb 0f03 	cmp.w	fp, #3
 8013f20:	d1cb      	bne.n	8013eba <_scanf_i+0x5a>
 8013f22:	6863      	ldr	r3, [r4, #4]
 8013f24:	b90b      	cbnz	r3, 8013f2a <_scanf_i+0xca>
 8013f26:	230a      	movs	r3, #10
 8013f28:	6063      	str	r3, [r4, #4]
 8013f2a:	6863      	ldr	r3, [r4, #4]
 8013f2c:	4947      	ldr	r1, [pc, #284]	; (801404c <_scanf_i+0x1ec>)
 8013f2e:	6960      	ldr	r0, [r4, #20]
 8013f30:	1ac9      	subs	r1, r1, r3
 8013f32:	f000 f8b9 	bl	80140a8 <__sccl>
 8013f36:	f04f 0b00 	mov.w	fp, #0
 8013f3a:	68a3      	ldr	r3, [r4, #8]
 8013f3c:	6822      	ldr	r2, [r4, #0]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d03d      	beq.n	8013fbe <_scanf_i+0x15e>
 8013f42:	6831      	ldr	r1, [r6, #0]
 8013f44:	6960      	ldr	r0, [r4, #20]
 8013f46:	f891 c000 	ldrb.w	ip, [r1]
 8013f4a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	d035      	beq.n	8013fbe <_scanf_i+0x15e>
 8013f52:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013f56:	d124      	bne.n	8013fa2 <_scanf_i+0x142>
 8013f58:	0510      	lsls	r0, r2, #20
 8013f5a:	d522      	bpl.n	8013fa2 <_scanf_i+0x142>
 8013f5c:	f10b 0b01 	add.w	fp, fp, #1
 8013f60:	f1b9 0f00 	cmp.w	r9, #0
 8013f64:	d003      	beq.n	8013f6e <_scanf_i+0x10e>
 8013f66:	3301      	adds	r3, #1
 8013f68:	f109 39ff 	add.w	r9, r9, #4294967295
 8013f6c:	60a3      	str	r3, [r4, #8]
 8013f6e:	6873      	ldr	r3, [r6, #4]
 8013f70:	3b01      	subs	r3, #1
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	6073      	str	r3, [r6, #4]
 8013f76:	dd1b      	ble.n	8013fb0 <_scanf_i+0x150>
 8013f78:	6833      	ldr	r3, [r6, #0]
 8013f7a:	3301      	adds	r3, #1
 8013f7c:	6033      	str	r3, [r6, #0]
 8013f7e:	68a3      	ldr	r3, [r4, #8]
 8013f80:	3b01      	subs	r3, #1
 8013f82:	60a3      	str	r3, [r4, #8]
 8013f84:	e7d9      	b.n	8013f3a <_scanf_i+0xda>
 8013f86:	f1bb 0f02 	cmp.w	fp, #2
 8013f8a:	d1ae      	bne.n	8013eea <_scanf_i+0x8a>
 8013f8c:	6822      	ldr	r2, [r4, #0]
 8013f8e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013f92:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013f96:	d1bf      	bne.n	8013f18 <_scanf_i+0xb8>
 8013f98:	2310      	movs	r3, #16
 8013f9a:	6063      	str	r3, [r4, #4]
 8013f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013fa0:	e7a2      	b.n	8013ee8 <_scanf_i+0x88>
 8013fa2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013fa6:	6022      	str	r2, [r4, #0]
 8013fa8:	780b      	ldrb	r3, [r1, #0]
 8013faa:	f805 3b01 	strb.w	r3, [r5], #1
 8013fae:	e7de      	b.n	8013f6e <_scanf_i+0x10e>
 8013fb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013fb4:	4631      	mov	r1, r6
 8013fb6:	4650      	mov	r0, sl
 8013fb8:	4798      	blx	r3
 8013fba:	2800      	cmp	r0, #0
 8013fbc:	d0df      	beq.n	8013f7e <_scanf_i+0x11e>
 8013fbe:	6823      	ldr	r3, [r4, #0]
 8013fc0:	05db      	lsls	r3, r3, #23
 8013fc2:	d50d      	bpl.n	8013fe0 <_scanf_i+0x180>
 8013fc4:	42bd      	cmp	r5, r7
 8013fc6:	d909      	bls.n	8013fdc <_scanf_i+0x17c>
 8013fc8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013fcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013fd0:	4632      	mov	r2, r6
 8013fd2:	4650      	mov	r0, sl
 8013fd4:	4798      	blx	r3
 8013fd6:	f105 39ff 	add.w	r9, r5, #4294967295
 8013fda:	464d      	mov	r5, r9
 8013fdc:	42bd      	cmp	r5, r7
 8013fde:	d02d      	beq.n	801403c <_scanf_i+0x1dc>
 8013fe0:	6822      	ldr	r2, [r4, #0]
 8013fe2:	f012 0210 	ands.w	r2, r2, #16
 8013fe6:	d113      	bne.n	8014010 <_scanf_i+0x1b0>
 8013fe8:	702a      	strb	r2, [r5, #0]
 8013fea:	6863      	ldr	r3, [r4, #4]
 8013fec:	9e01      	ldr	r6, [sp, #4]
 8013fee:	4639      	mov	r1, r7
 8013ff0:	4650      	mov	r0, sl
 8013ff2:	47b0      	blx	r6
 8013ff4:	6821      	ldr	r1, [r4, #0]
 8013ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8013ffa:	f011 0f20 	tst.w	r1, #32
 8013ffe:	d013      	beq.n	8014028 <_scanf_i+0x1c8>
 8014000:	1d1a      	adds	r2, r3, #4
 8014002:	f8c8 2000 	str.w	r2, [r8]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	6018      	str	r0, [r3, #0]
 801400a:	68e3      	ldr	r3, [r4, #12]
 801400c:	3301      	adds	r3, #1
 801400e:	60e3      	str	r3, [r4, #12]
 8014010:	1bed      	subs	r5, r5, r7
 8014012:	44ab      	add	fp, r5
 8014014:	6925      	ldr	r5, [r4, #16]
 8014016:	445d      	add	r5, fp
 8014018:	6125      	str	r5, [r4, #16]
 801401a:	2000      	movs	r0, #0
 801401c:	b007      	add	sp, #28
 801401e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014022:	f04f 0b00 	mov.w	fp, #0
 8014026:	e7ca      	b.n	8013fbe <_scanf_i+0x15e>
 8014028:	1d1a      	adds	r2, r3, #4
 801402a:	f8c8 2000 	str.w	r2, [r8]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f011 0f01 	tst.w	r1, #1
 8014034:	bf14      	ite	ne
 8014036:	8018      	strhne	r0, [r3, #0]
 8014038:	6018      	streq	r0, [r3, #0]
 801403a:	e7e6      	b.n	801400a <_scanf_i+0x1aa>
 801403c:	2001      	movs	r0, #1
 801403e:	e7ed      	b.n	801401c <_scanf_i+0x1bc>
 8014040:	08015118 	.word	0x08015118
 8014044:	08014225 	.word	0x08014225
 8014048:	08010eed 	.word	0x08010eed
 801404c:	080155be 	.word	0x080155be

08014050 <_read_r>:
 8014050:	b538      	push	{r3, r4, r5, lr}
 8014052:	4d07      	ldr	r5, [pc, #28]	; (8014070 <_read_r+0x20>)
 8014054:	4604      	mov	r4, r0
 8014056:	4608      	mov	r0, r1
 8014058:	4611      	mov	r1, r2
 801405a:	2200      	movs	r2, #0
 801405c:	602a      	str	r2, [r5, #0]
 801405e:	461a      	mov	r2, r3
 8014060:	f7f0 fa82 	bl	8004568 <_read>
 8014064:	1c43      	adds	r3, r0, #1
 8014066:	d102      	bne.n	801406e <_read_r+0x1e>
 8014068:	682b      	ldr	r3, [r5, #0]
 801406a:	b103      	cbz	r3, 801406e <_read_r+0x1e>
 801406c:	6023      	str	r3, [r4, #0]
 801406e:	bd38      	pop	{r3, r4, r5, pc}
 8014070:	20003214 	.word	0x20003214
 8014074:	00000000 	.word	0x00000000

08014078 <nan>:
 8014078:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014080 <nan+0x8>
 801407c:	4770      	bx	lr
 801407e:	bf00      	nop
 8014080:	00000000 	.word	0x00000000
 8014084:	7ff80000 	.word	0x7ff80000

08014088 <_sbrk_r>:
 8014088:	b538      	push	{r3, r4, r5, lr}
 801408a:	4d06      	ldr	r5, [pc, #24]	; (80140a4 <_sbrk_r+0x1c>)
 801408c:	2300      	movs	r3, #0
 801408e:	4604      	mov	r4, r0
 8014090:	4608      	mov	r0, r1
 8014092:	602b      	str	r3, [r5, #0]
 8014094:	f7f0 faba 	bl	800460c <_sbrk>
 8014098:	1c43      	adds	r3, r0, #1
 801409a:	d102      	bne.n	80140a2 <_sbrk_r+0x1a>
 801409c:	682b      	ldr	r3, [r5, #0]
 801409e:	b103      	cbz	r3, 80140a2 <_sbrk_r+0x1a>
 80140a0:	6023      	str	r3, [r4, #0]
 80140a2:	bd38      	pop	{r3, r4, r5, pc}
 80140a4:	20003214 	.word	0x20003214

080140a8 <__sccl>:
 80140a8:	b570      	push	{r4, r5, r6, lr}
 80140aa:	780b      	ldrb	r3, [r1, #0]
 80140ac:	4604      	mov	r4, r0
 80140ae:	2b5e      	cmp	r3, #94	; 0x5e
 80140b0:	bf0b      	itete	eq
 80140b2:	784b      	ldrbeq	r3, [r1, #1]
 80140b4:	1c48      	addne	r0, r1, #1
 80140b6:	1c88      	addeq	r0, r1, #2
 80140b8:	2200      	movne	r2, #0
 80140ba:	bf08      	it	eq
 80140bc:	2201      	moveq	r2, #1
 80140be:	1e61      	subs	r1, r4, #1
 80140c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80140c4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80140c8:	42a9      	cmp	r1, r5
 80140ca:	d1fb      	bne.n	80140c4 <__sccl+0x1c>
 80140cc:	b90b      	cbnz	r3, 80140d2 <__sccl+0x2a>
 80140ce:	3801      	subs	r0, #1
 80140d0:	bd70      	pop	{r4, r5, r6, pc}
 80140d2:	f082 0201 	eor.w	r2, r2, #1
 80140d6:	54e2      	strb	r2, [r4, r3]
 80140d8:	4605      	mov	r5, r0
 80140da:	4628      	mov	r0, r5
 80140dc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80140e0:	292d      	cmp	r1, #45	; 0x2d
 80140e2:	d006      	beq.n	80140f2 <__sccl+0x4a>
 80140e4:	295d      	cmp	r1, #93	; 0x5d
 80140e6:	d0f3      	beq.n	80140d0 <__sccl+0x28>
 80140e8:	b909      	cbnz	r1, 80140ee <__sccl+0x46>
 80140ea:	4628      	mov	r0, r5
 80140ec:	e7f0      	b.n	80140d0 <__sccl+0x28>
 80140ee:	460b      	mov	r3, r1
 80140f0:	e7f1      	b.n	80140d6 <__sccl+0x2e>
 80140f2:	786e      	ldrb	r6, [r5, #1]
 80140f4:	2e5d      	cmp	r6, #93	; 0x5d
 80140f6:	d0fa      	beq.n	80140ee <__sccl+0x46>
 80140f8:	42b3      	cmp	r3, r6
 80140fa:	dcf8      	bgt.n	80140ee <__sccl+0x46>
 80140fc:	3502      	adds	r5, #2
 80140fe:	4619      	mov	r1, r3
 8014100:	3101      	adds	r1, #1
 8014102:	428e      	cmp	r6, r1
 8014104:	5462      	strb	r2, [r4, r1]
 8014106:	dcfb      	bgt.n	8014100 <__sccl+0x58>
 8014108:	1af1      	subs	r1, r6, r3
 801410a:	3901      	subs	r1, #1
 801410c:	1c58      	adds	r0, r3, #1
 801410e:	42b3      	cmp	r3, r6
 8014110:	bfa8      	it	ge
 8014112:	2100      	movge	r1, #0
 8014114:	1843      	adds	r3, r0, r1
 8014116:	e7e0      	b.n	80140da <__sccl+0x32>

08014118 <strncmp>:
 8014118:	b510      	push	{r4, lr}
 801411a:	b17a      	cbz	r2, 801413c <strncmp+0x24>
 801411c:	4603      	mov	r3, r0
 801411e:	3901      	subs	r1, #1
 8014120:	1884      	adds	r4, r0, r2
 8014122:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014126:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801412a:	4290      	cmp	r0, r2
 801412c:	d101      	bne.n	8014132 <strncmp+0x1a>
 801412e:	42a3      	cmp	r3, r4
 8014130:	d101      	bne.n	8014136 <strncmp+0x1e>
 8014132:	1a80      	subs	r0, r0, r2
 8014134:	bd10      	pop	{r4, pc}
 8014136:	2800      	cmp	r0, #0
 8014138:	d1f3      	bne.n	8014122 <strncmp+0xa>
 801413a:	e7fa      	b.n	8014132 <strncmp+0x1a>
 801413c:	4610      	mov	r0, r2
 801413e:	e7f9      	b.n	8014134 <strncmp+0x1c>

08014140 <_strtoul_l.constprop.0>:
 8014140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014144:	4f36      	ldr	r7, [pc, #216]	; (8014220 <_strtoul_l.constprop.0+0xe0>)
 8014146:	4686      	mov	lr, r0
 8014148:	460d      	mov	r5, r1
 801414a:	4628      	mov	r0, r5
 801414c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014150:	5de6      	ldrb	r6, [r4, r7]
 8014152:	f016 0608 	ands.w	r6, r6, #8
 8014156:	d1f8      	bne.n	801414a <_strtoul_l.constprop.0+0xa>
 8014158:	2c2d      	cmp	r4, #45	; 0x2d
 801415a:	d12f      	bne.n	80141bc <_strtoul_l.constprop.0+0x7c>
 801415c:	782c      	ldrb	r4, [r5, #0]
 801415e:	2601      	movs	r6, #1
 8014160:	1c85      	adds	r5, r0, #2
 8014162:	2b00      	cmp	r3, #0
 8014164:	d057      	beq.n	8014216 <_strtoul_l.constprop.0+0xd6>
 8014166:	2b10      	cmp	r3, #16
 8014168:	d109      	bne.n	801417e <_strtoul_l.constprop.0+0x3e>
 801416a:	2c30      	cmp	r4, #48	; 0x30
 801416c:	d107      	bne.n	801417e <_strtoul_l.constprop.0+0x3e>
 801416e:	7828      	ldrb	r0, [r5, #0]
 8014170:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014174:	2858      	cmp	r0, #88	; 0x58
 8014176:	d149      	bne.n	801420c <_strtoul_l.constprop.0+0xcc>
 8014178:	786c      	ldrb	r4, [r5, #1]
 801417a:	2310      	movs	r3, #16
 801417c:	3502      	adds	r5, #2
 801417e:	f04f 38ff 	mov.w	r8, #4294967295
 8014182:	2700      	movs	r7, #0
 8014184:	fbb8 f8f3 	udiv	r8, r8, r3
 8014188:	fb03 f908 	mul.w	r9, r3, r8
 801418c:	ea6f 0909 	mvn.w	r9, r9
 8014190:	4638      	mov	r0, r7
 8014192:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014196:	f1bc 0f09 	cmp.w	ip, #9
 801419a:	d814      	bhi.n	80141c6 <_strtoul_l.constprop.0+0x86>
 801419c:	4664      	mov	r4, ip
 801419e:	42a3      	cmp	r3, r4
 80141a0:	dd22      	ble.n	80141e8 <_strtoul_l.constprop.0+0xa8>
 80141a2:	2f00      	cmp	r7, #0
 80141a4:	db1d      	blt.n	80141e2 <_strtoul_l.constprop.0+0xa2>
 80141a6:	4580      	cmp	r8, r0
 80141a8:	d31b      	bcc.n	80141e2 <_strtoul_l.constprop.0+0xa2>
 80141aa:	d101      	bne.n	80141b0 <_strtoul_l.constprop.0+0x70>
 80141ac:	45a1      	cmp	r9, r4
 80141ae:	db18      	blt.n	80141e2 <_strtoul_l.constprop.0+0xa2>
 80141b0:	fb00 4003 	mla	r0, r0, r3, r4
 80141b4:	2701      	movs	r7, #1
 80141b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141ba:	e7ea      	b.n	8014192 <_strtoul_l.constprop.0+0x52>
 80141bc:	2c2b      	cmp	r4, #43	; 0x2b
 80141be:	bf04      	itt	eq
 80141c0:	782c      	ldrbeq	r4, [r5, #0]
 80141c2:	1c85      	addeq	r5, r0, #2
 80141c4:	e7cd      	b.n	8014162 <_strtoul_l.constprop.0+0x22>
 80141c6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80141ca:	f1bc 0f19 	cmp.w	ip, #25
 80141ce:	d801      	bhi.n	80141d4 <_strtoul_l.constprop.0+0x94>
 80141d0:	3c37      	subs	r4, #55	; 0x37
 80141d2:	e7e4      	b.n	801419e <_strtoul_l.constprop.0+0x5e>
 80141d4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80141d8:	f1bc 0f19 	cmp.w	ip, #25
 80141dc:	d804      	bhi.n	80141e8 <_strtoul_l.constprop.0+0xa8>
 80141de:	3c57      	subs	r4, #87	; 0x57
 80141e0:	e7dd      	b.n	801419e <_strtoul_l.constprop.0+0x5e>
 80141e2:	f04f 37ff 	mov.w	r7, #4294967295
 80141e6:	e7e6      	b.n	80141b6 <_strtoul_l.constprop.0+0x76>
 80141e8:	2f00      	cmp	r7, #0
 80141ea:	da07      	bge.n	80141fc <_strtoul_l.constprop.0+0xbc>
 80141ec:	2322      	movs	r3, #34	; 0x22
 80141ee:	f8ce 3000 	str.w	r3, [lr]
 80141f2:	f04f 30ff 	mov.w	r0, #4294967295
 80141f6:	b932      	cbnz	r2, 8014206 <_strtoul_l.constprop.0+0xc6>
 80141f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141fc:	b106      	cbz	r6, 8014200 <_strtoul_l.constprop.0+0xc0>
 80141fe:	4240      	negs	r0, r0
 8014200:	2a00      	cmp	r2, #0
 8014202:	d0f9      	beq.n	80141f8 <_strtoul_l.constprop.0+0xb8>
 8014204:	b107      	cbz	r7, 8014208 <_strtoul_l.constprop.0+0xc8>
 8014206:	1e69      	subs	r1, r5, #1
 8014208:	6011      	str	r1, [r2, #0]
 801420a:	e7f5      	b.n	80141f8 <_strtoul_l.constprop.0+0xb8>
 801420c:	2430      	movs	r4, #48	; 0x30
 801420e:	2b00      	cmp	r3, #0
 8014210:	d1b5      	bne.n	801417e <_strtoul_l.constprop.0+0x3e>
 8014212:	2308      	movs	r3, #8
 8014214:	e7b3      	b.n	801417e <_strtoul_l.constprop.0+0x3e>
 8014216:	2c30      	cmp	r4, #48	; 0x30
 8014218:	d0a9      	beq.n	801416e <_strtoul_l.constprop.0+0x2e>
 801421a:	230a      	movs	r3, #10
 801421c:	e7af      	b.n	801417e <_strtoul_l.constprop.0+0x3e>
 801421e:	bf00      	nop
 8014220:	0801513d 	.word	0x0801513d

08014224 <_strtoul_r>:
 8014224:	f7ff bf8c 	b.w	8014140 <_strtoul_l.constprop.0>

08014228 <__submore>:
 8014228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801422c:	460c      	mov	r4, r1
 801422e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014234:	4299      	cmp	r1, r3
 8014236:	d11d      	bne.n	8014274 <__submore+0x4c>
 8014238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801423c:	f7ff f8ba 	bl	80133b4 <_malloc_r>
 8014240:	b918      	cbnz	r0, 801424a <__submore+0x22>
 8014242:	f04f 30ff 	mov.w	r0, #4294967295
 8014246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801424a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801424e:	63a3      	str	r3, [r4, #56]	; 0x38
 8014250:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014254:	6360      	str	r0, [r4, #52]	; 0x34
 8014256:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801425a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801425e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014262:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014266:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801426a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801426e:	6020      	str	r0, [r4, #0]
 8014270:	2000      	movs	r0, #0
 8014272:	e7e8      	b.n	8014246 <__submore+0x1e>
 8014274:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014276:	0077      	lsls	r7, r6, #1
 8014278:	463a      	mov	r2, r7
 801427a:	f000 f87b 	bl	8014374 <_realloc_r>
 801427e:	4605      	mov	r5, r0
 8014280:	2800      	cmp	r0, #0
 8014282:	d0de      	beq.n	8014242 <__submore+0x1a>
 8014284:	eb00 0806 	add.w	r8, r0, r6
 8014288:	4601      	mov	r1, r0
 801428a:	4632      	mov	r2, r6
 801428c:	4640      	mov	r0, r8
 801428e:	f7fa ff69 	bl	800f164 <memcpy>
 8014292:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014296:	f8c4 8000 	str.w	r8, [r4]
 801429a:	e7e9      	b.n	8014270 <__submore+0x48>

0801429c <__ascii_wctomb>:
 801429c:	b149      	cbz	r1, 80142b2 <__ascii_wctomb+0x16>
 801429e:	2aff      	cmp	r2, #255	; 0xff
 80142a0:	bf85      	ittet	hi
 80142a2:	238a      	movhi	r3, #138	; 0x8a
 80142a4:	6003      	strhi	r3, [r0, #0]
 80142a6:	700a      	strbls	r2, [r1, #0]
 80142a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80142ac:	bf98      	it	ls
 80142ae:	2001      	movls	r0, #1
 80142b0:	4770      	bx	lr
 80142b2:	4608      	mov	r0, r1
 80142b4:	4770      	bx	lr
	...

080142b8 <__assert_func>:
 80142b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80142ba:	4614      	mov	r4, r2
 80142bc:	461a      	mov	r2, r3
 80142be:	4b09      	ldr	r3, [pc, #36]	; (80142e4 <__assert_func+0x2c>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	4605      	mov	r5, r0
 80142c4:	68d8      	ldr	r0, [r3, #12]
 80142c6:	b14c      	cbz	r4, 80142dc <__assert_func+0x24>
 80142c8:	4b07      	ldr	r3, [pc, #28]	; (80142e8 <__assert_func+0x30>)
 80142ca:	9100      	str	r1, [sp, #0]
 80142cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80142d0:	4906      	ldr	r1, [pc, #24]	; (80142ec <__assert_func+0x34>)
 80142d2:	462b      	mov	r3, r5
 80142d4:	f000 f80e 	bl	80142f4 <fiprintf>
 80142d8:	f000 f87b 	bl	80143d2 <abort>
 80142dc:	4b04      	ldr	r3, [pc, #16]	; (80142f0 <__assert_func+0x38>)
 80142de:	461c      	mov	r4, r3
 80142e0:	e7f3      	b.n	80142ca <__assert_func+0x12>
 80142e2:	bf00      	nop
 80142e4:	20000110 	.word	0x20000110
 80142e8:	080155c0 	.word	0x080155c0
 80142ec:	080155cd 	.word	0x080155cd
 80142f0:	080155fb 	.word	0x080155fb

080142f4 <fiprintf>:
 80142f4:	b40e      	push	{r1, r2, r3}
 80142f6:	b503      	push	{r0, r1, lr}
 80142f8:	4601      	mov	r1, r0
 80142fa:	ab03      	add	r3, sp, #12
 80142fc:	4805      	ldr	r0, [pc, #20]	; (8014314 <fiprintf+0x20>)
 80142fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014302:	6800      	ldr	r0, [r0, #0]
 8014304:	9301      	str	r3, [sp, #4]
 8014306:	f7ff fc21 	bl	8013b4c <_vfiprintf_r>
 801430a:	b002      	add	sp, #8
 801430c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014310:	b003      	add	sp, #12
 8014312:	4770      	bx	lr
 8014314:	20000110 	.word	0x20000110

08014318 <_fstat_r>:
 8014318:	b538      	push	{r3, r4, r5, lr}
 801431a:	4d07      	ldr	r5, [pc, #28]	; (8014338 <_fstat_r+0x20>)
 801431c:	2300      	movs	r3, #0
 801431e:	4604      	mov	r4, r0
 8014320:	4608      	mov	r0, r1
 8014322:	4611      	mov	r1, r2
 8014324:	602b      	str	r3, [r5, #0]
 8014326:	f7f0 f948 	bl	80045ba <_fstat>
 801432a:	1c43      	adds	r3, r0, #1
 801432c:	d102      	bne.n	8014334 <_fstat_r+0x1c>
 801432e:	682b      	ldr	r3, [r5, #0]
 8014330:	b103      	cbz	r3, 8014334 <_fstat_r+0x1c>
 8014332:	6023      	str	r3, [r4, #0]
 8014334:	bd38      	pop	{r3, r4, r5, pc}
 8014336:	bf00      	nop
 8014338:	20003214 	.word	0x20003214

0801433c <_isatty_r>:
 801433c:	b538      	push	{r3, r4, r5, lr}
 801433e:	4d06      	ldr	r5, [pc, #24]	; (8014358 <_isatty_r+0x1c>)
 8014340:	2300      	movs	r3, #0
 8014342:	4604      	mov	r4, r0
 8014344:	4608      	mov	r0, r1
 8014346:	602b      	str	r3, [r5, #0]
 8014348:	f7f0 f947 	bl	80045da <_isatty>
 801434c:	1c43      	adds	r3, r0, #1
 801434e:	d102      	bne.n	8014356 <_isatty_r+0x1a>
 8014350:	682b      	ldr	r3, [r5, #0]
 8014352:	b103      	cbz	r3, 8014356 <_isatty_r+0x1a>
 8014354:	6023      	str	r3, [r4, #0]
 8014356:	bd38      	pop	{r3, r4, r5, pc}
 8014358:	20003214 	.word	0x20003214

0801435c <__malloc_lock>:
 801435c:	4801      	ldr	r0, [pc, #4]	; (8014364 <__malloc_lock+0x8>)
 801435e:	f7fe ba50 	b.w	8012802 <__retarget_lock_acquire_recursive>
 8014362:	bf00      	nop
 8014364:	20003208 	.word	0x20003208

08014368 <__malloc_unlock>:
 8014368:	4801      	ldr	r0, [pc, #4]	; (8014370 <__malloc_unlock+0x8>)
 801436a:	f7fe ba4b 	b.w	8012804 <__retarget_lock_release_recursive>
 801436e:	bf00      	nop
 8014370:	20003208 	.word	0x20003208

08014374 <_realloc_r>:
 8014374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014378:	4680      	mov	r8, r0
 801437a:	4614      	mov	r4, r2
 801437c:	460e      	mov	r6, r1
 801437e:	b921      	cbnz	r1, 801438a <_realloc_r+0x16>
 8014380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014384:	4611      	mov	r1, r2
 8014386:	f7ff b815 	b.w	80133b4 <_malloc_r>
 801438a:	b92a      	cbnz	r2, 8014398 <_realloc_r+0x24>
 801438c:	f7fe ffa6 	bl	80132dc <_free_r>
 8014390:	4625      	mov	r5, r4
 8014392:	4628      	mov	r0, r5
 8014394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014398:	f000 f822 	bl	80143e0 <_malloc_usable_size_r>
 801439c:	4284      	cmp	r4, r0
 801439e:	4607      	mov	r7, r0
 80143a0:	d802      	bhi.n	80143a8 <_realloc_r+0x34>
 80143a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80143a6:	d812      	bhi.n	80143ce <_realloc_r+0x5a>
 80143a8:	4621      	mov	r1, r4
 80143aa:	4640      	mov	r0, r8
 80143ac:	f7ff f802 	bl	80133b4 <_malloc_r>
 80143b0:	4605      	mov	r5, r0
 80143b2:	2800      	cmp	r0, #0
 80143b4:	d0ed      	beq.n	8014392 <_realloc_r+0x1e>
 80143b6:	42bc      	cmp	r4, r7
 80143b8:	4622      	mov	r2, r4
 80143ba:	4631      	mov	r1, r6
 80143bc:	bf28      	it	cs
 80143be:	463a      	movcs	r2, r7
 80143c0:	f7fa fed0 	bl	800f164 <memcpy>
 80143c4:	4631      	mov	r1, r6
 80143c6:	4640      	mov	r0, r8
 80143c8:	f7fe ff88 	bl	80132dc <_free_r>
 80143cc:	e7e1      	b.n	8014392 <_realloc_r+0x1e>
 80143ce:	4635      	mov	r5, r6
 80143d0:	e7df      	b.n	8014392 <_realloc_r+0x1e>

080143d2 <abort>:
 80143d2:	b508      	push	{r3, lr}
 80143d4:	2006      	movs	r0, #6
 80143d6:	f000 f833 	bl	8014440 <raise>
 80143da:	2001      	movs	r0, #1
 80143dc:	f7f0 f8ba 	bl	8004554 <_exit>

080143e0 <_malloc_usable_size_r>:
 80143e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143e4:	1f18      	subs	r0, r3, #4
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	bfbc      	itt	lt
 80143ea:	580b      	ldrlt	r3, [r1, r0]
 80143ec:	18c0      	addlt	r0, r0, r3
 80143ee:	4770      	bx	lr

080143f0 <_raise_r>:
 80143f0:	291f      	cmp	r1, #31
 80143f2:	b538      	push	{r3, r4, r5, lr}
 80143f4:	4604      	mov	r4, r0
 80143f6:	460d      	mov	r5, r1
 80143f8:	d904      	bls.n	8014404 <_raise_r+0x14>
 80143fa:	2316      	movs	r3, #22
 80143fc:	6003      	str	r3, [r0, #0]
 80143fe:	f04f 30ff 	mov.w	r0, #4294967295
 8014402:	bd38      	pop	{r3, r4, r5, pc}
 8014404:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014406:	b112      	cbz	r2, 801440e <_raise_r+0x1e>
 8014408:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801440c:	b94b      	cbnz	r3, 8014422 <_raise_r+0x32>
 801440e:	4620      	mov	r0, r4
 8014410:	f000 f830 	bl	8014474 <_getpid_r>
 8014414:	462a      	mov	r2, r5
 8014416:	4601      	mov	r1, r0
 8014418:	4620      	mov	r0, r4
 801441a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801441e:	f000 b817 	b.w	8014450 <_kill_r>
 8014422:	2b01      	cmp	r3, #1
 8014424:	d00a      	beq.n	801443c <_raise_r+0x4c>
 8014426:	1c59      	adds	r1, r3, #1
 8014428:	d103      	bne.n	8014432 <_raise_r+0x42>
 801442a:	2316      	movs	r3, #22
 801442c:	6003      	str	r3, [r0, #0]
 801442e:	2001      	movs	r0, #1
 8014430:	e7e7      	b.n	8014402 <_raise_r+0x12>
 8014432:	2400      	movs	r4, #0
 8014434:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014438:	4628      	mov	r0, r5
 801443a:	4798      	blx	r3
 801443c:	2000      	movs	r0, #0
 801443e:	e7e0      	b.n	8014402 <_raise_r+0x12>

08014440 <raise>:
 8014440:	4b02      	ldr	r3, [pc, #8]	; (801444c <raise+0xc>)
 8014442:	4601      	mov	r1, r0
 8014444:	6818      	ldr	r0, [r3, #0]
 8014446:	f7ff bfd3 	b.w	80143f0 <_raise_r>
 801444a:	bf00      	nop
 801444c:	20000110 	.word	0x20000110

08014450 <_kill_r>:
 8014450:	b538      	push	{r3, r4, r5, lr}
 8014452:	4d07      	ldr	r5, [pc, #28]	; (8014470 <_kill_r+0x20>)
 8014454:	2300      	movs	r3, #0
 8014456:	4604      	mov	r4, r0
 8014458:	4608      	mov	r0, r1
 801445a:	4611      	mov	r1, r2
 801445c:	602b      	str	r3, [r5, #0]
 801445e:	f7f0 f869 	bl	8004534 <_kill>
 8014462:	1c43      	adds	r3, r0, #1
 8014464:	d102      	bne.n	801446c <_kill_r+0x1c>
 8014466:	682b      	ldr	r3, [r5, #0]
 8014468:	b103      	cbz	r3, 801446c <_kill_r+0x1c>
 801446a:	6023      	str	r3, [r4, #0]
 801446c:	bd38      	pop	{r3, r4, r5, pc}
 801446e:	bf00      	nop
 8014470:	20003214 	.word	0x20003214

08014474 <_getpid_r>:
 8014474:	f7f0 b856 	b.w	8004524 <_getpid>

08014478 <_init>:
 8014478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447a:	bf00      	nop
 801447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801447e:	bc08      	pop	{r3}
 8014480:	469e      	mov	lr, r3
 8014482:	4770      	bx	lr

08014484 <_fini>:
 8014484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014486:	bf00      	nop
 8014488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801448a:	bc08      	pop	{r3}
 801448c:	469e      	mov	lr, r3
 801448e:	4770      	bx	lr
